
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0801679c  0801679c  0002679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b78  08016b78  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08016b78  08016b78  00026b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b80  08016b80  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b80  08016b80  00026b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016b84  08016b84  00026b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08016b88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041934  240001d0  08016d54  000301d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24041b04  08016d54  00031b04  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040d8c  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c27  00000000  00000000  00070f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002070  00000000  00000000  00077bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dc0  00000000  00000000  00079c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004069f  00000000  00000000  0007b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022ecc  00000000  00000000  000bc07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001706e1  00000000  00000000  000def4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024f62c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009114  00000000  00000000  0024f6a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d0 	.word	0x240001d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016784 	.word	0x08016784

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d4 	.word	0x240001d4
 80002dc:	08016784 	.word	0x08016784

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <gps_msg_config>:
#include <string.h>
#include <stdint.h>
#include <GPS.h>
#include "main.h"

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	; 0x78
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f7ff fe1f 	bl	80002e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d001      	beq.n	80006ac <gps_msg_config+0x1c>
 80006a8:	2301      	movs	r3, #1
 80006aa:	e052      	b.n	8000752 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80006ac:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <gps_msg_config+0xcc>)
 80006b8:	211f      	movs	r1, #31
 80006ba:	f015 f861 	bl	8015780 <sniprintf>

	int checksum_int = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80006c6:	e00b      	b.n	80006e0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80006c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d6:	4053      	eors	r3, r2
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006dc:	3301      	adds	r3, #1
 80006de:	66bb      	str	r3, [r7, #104]	; 0x68
 80006e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <gps_msg_config+0x64>
 80006ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dde9      	ble.n	80006c8 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80006f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80006f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <gps_msg_config+0xd0>)
 80006fc:	2107      	movs	r1, #7
 80006fe:	f015 f83f 	bl	8015780 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000702:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000706:	f107 0014 	add.w	r0, r7, #20
 800070a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <gps_msg_config+0xd4>)
 8000714:	2129      	movs	r1, #41	; 0x29
 8000716:	f015 f833 	bl	8015780 <sniprintf>
	printf("\n\rSending: ");
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <gps_msg_config+0xd8>)
 800071c:	f014 ffa4 	bl	8015668 <iprintf>
	printf("%s", messagetosend);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <gps_msg_config+0xdc>)
 8000728:	f014 ff9e 	bl	8015668 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd5 	bl	80002e0 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 0114 	add.w	r1, r7, #20
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f00b fa66 	bl	800bc12 <HAL_UART_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <gps_msg_config+0xc0>
		Error_Handler();
 800074c:	f000 fec4 	bl	80014d8 <Error_Handler>
	}
	return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3770      	adds	r7, #112	; 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	0801679c 	.word	0x0801679c
 8000760:	080167b4 	.word	0x080167b4
 8000764:	080167bc 	.word	0x080167bc
 8000768:	080167c4 	.word	0x080167c4
 800076c:	080167d0 	.word	0x080167d0

08000770 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	817b      	strh	r3, [r7, #10]
 8000782:	460b      	mov	r3, r1
 8000784:	813b      	strh	r3, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800078a:	2306      	movs	r3, #6
 800078c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800078e:	23b5      	movs	r3, #181	; 0xb5
 8000790:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000792:	2362      	movs	r3, #98	; 0x62
 8000794:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000796:	2306      	movs	r3, #6
 8000798:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800079a:	2308      	movs	r3, #8
 800079c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800079e:	8bfb      	ldrh	r3, [r7, #30]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 80007a8:	897b      	ldrh	r3, [r7, #10]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 80007b2:	893b      	ldrh	r3, [r7, #8]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	e013      	b.n	8000800 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	4413      	add	r3, r2
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80007ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f4:	4413      	add	r3, r2
 80007f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	3301      	adds	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	dde8      	ble.n	80007d8 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800080a:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 800080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000810:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000812:	f107 0110 	add.w	r1, r7, #16
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	220e      	movs	r2, #14
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f00b f9f9 	bl	800bc12 <HAL_UART_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <gps_rate_config+0xbe>
				Error_Handler();
 8000826:	f000 fe57 	bl	80014d8 <Error_Handler>
				return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <gps_rate_config+0xc0>
			}
		return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000844:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d013      	beq.n	8000878 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000850:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000854:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000858:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00b      	beq.n	8000878 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000860:	e000      	b.n	8000864 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000862:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000864:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f9      	beq.n	8000862 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800086e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_write>:
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int WriteToBuff(char *, int);
static void FDCAN_Config(void);
int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ffc7 	bl	8000838 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x16>
  return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f001 f9e0 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f9b2 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f000 fca0 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d8:	f000 fc7e 	bl	80011d8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80008dc:	f000 fb6c 	bl	8000fb8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008e0:	f00e fccc 	bl	800f27c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80008e4:	f014 f8cc 	bl	8014a80 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80008e8:	f000 fa9c 	bl	8000e24 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008ec:	f000 fb00 	bl	8000ef0 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80008f0:	f000 fbda 	bl	80010a8 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80008f4:	f000 fc24 	bl	8001140 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80008f8:	f000 fb80 	bl	8000ffc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\n");
 80008fc:	48a9      	ldr	r0, [pc, #676]	; (8000ba4 <main+0x2e0>)
 80008fe:	f014 ff27 	bl	8015750 <puts>
  FDCAN_Config();
 8000902:	f000 fd73 	bl	80013ec <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8000906:	2246      	movs	r2, #70	; 0x46
 8000908:	49a7      	ldr	r1, [pc, #668]	; (8000ba8 <main+0x2e4>)
 800090a:	48a8      	ldr	r0, [pc, #672]	; (8000bac <main+0x2e8>)
 800090c:	f00b fa18 	bl	800bd40 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8000910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000914:	f001 fa4e 	bl	8001db4 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8000918:	2364      	movs	r3, #100	; 0x64
 800091a:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
  uint16_t navRate = 1;
 800091e:	2301      	movs	r3, #1
 8000920:	f8a7 34dc 	strh.w	r3, [r7, #1244]	; 0x4dc
  uint16_t timeRef = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 800092a:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 800092e:	f8b7 24dc 	ldrh.w	r2, [r7, #1244]	; 0x4dc
 8000932:	f8b7 14de 	ldrh.w	r1, [r7, #1246]	; 0x4de
 8000936:	489d      	ldr	r0, [pc, #628]	; (8000bac <main+0x2e8>)
 8000938:	f7ff ff1a 	bl	8000770 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 800093c:	2200      	movs	r2, #0
 800093e:	499c      	ldr	r1, [pc, #624]	; (8000bb0 <main+0x2ec>)
 8000940:	489a      	ldr	r0, [pc, #616]	; (8000bac <main+0x2e8>)
 8000942:	f7ff fea5 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8000946:	2200      	movs	r2, #0
 8000948:	499a      	ldr	r1, [pc, #616]	; (8000bb4 <main+0x2f0>)
 800094a:	4898      	ldr	r0, [pc, #608]	; (8000bac <main+0x2e8>)
 800094c:	f7ff fea0 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8000950:	2200      	movs	r2, #0
 8000952:	4999      	ldr	r1, [pc, #612]	; (8000bb8 <main+0x2f4>)
 8000954:	4895      	ldr	r0, [pc, #596]	; (8000bac <main+0x2e8>)
 8000956:	f7ff fe9b 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 800095a:	2200      	movs	r2, #0
 800095c:	4997      	ldr	r1, [pc, #604]	; (8000bbc <main+0x2f8>)
 800095e:	4893      	ldr	r0, [pc, #588]	; (8000bac <main+0x2e8>)
 8000960:	f7ff fe96 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8000964:	2200      	movs	r2, #0
 8000966:	4996      	ldr	r1, [pc, #600]	; (8000bc0 <main+0x2fc>)
 8000968:	4890      	ldr	r0, [pc, #576]	; (8000bac <main+0x2e8>)
 800096a:	f7ff fe91 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 800096e:	2200      	movs	r2, #0
 8000970:	4994      	ldr	r1, [pc, #592]	; (8000bc4 <main+0x300>)
 8000972:	488e      	ldr	r0, [pc, #568]	; (8000bac <main+0x2e8>)
 8000974:	f7ff fe8c 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8000978:	2200      	movs	r2, #0
 800097a:	4993      	ldr	r1, [pc, #588]	; (8000bc8 <main+0x304>)
 800097c:	488b      	ldr	r0, [pc, #556]	; (8000bac <main+0x2e8>)
 800097e:	f7ff fe87 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8000982:	2200      	movs	r2, #0
 8000984:	4991      	ldr	r1, [pc, #580]	; (8000bcc <main+0x308>)
 8000986:	4889      	ldr	r0, [pc, #548]	; (8000bac <main+0x2e8>)
 8000988:	f7ff fe82 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 800098c:	2200      	movs	r2, #0
 800098e:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <main+0x30c>)
 8000990:	4886      	ldr	r0, [pc, #536]	; (8000bac <main+0x2e8>)
 8000992:	f7ff fe7d 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8000996:	2200      	movs	r2, #0
 8000998:	498e      	ldr	r1, [pc, #568]	; (8000bd4 <main+0x310>)
 800099a:	4884      	ldr	r0, [pc, #528]	; (8000bac <main+0x2e8>)
 800099c:	f7ff fe78 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 80009a0:	2200      	movs	r2, #0
 80009a2:	498d      	ldr	r1, [pc, #564]	; (8000bd8 <main+0x314>)
 80009a4:	4881      	ldr	r0, [pc, #516]	; (8000bac <main+0x2e8>)
 80009a6:	f7ff fe73 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 80009aa:	2200      	movs	r2, #0
 80009ac:	498b      	ldr	r1, [pc, #556]	; (8000bdc <main+0x318>)
 80009ae:	487f      	ldr	r0, [pc, #508]	; (8000bac <main+0x2e8>)
 80009b0:	f7ff fe6e 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 80009b4:	2200      	movs	r2, #0
 80009b6:	498a      	ldr	r1, [pc, #552]	; (8000be0 <main+0x31c>)
 80009b8:	487c      	ldr	r0, [pc, #496]	; (8000bac <main+0x2e8>)
 80009ba:	f7ff fe69 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 80009be:	2200      	movs	r2, #0
 80009c0:	4988      	ldr	r1, [pc, #544]	; (8000be4 <main+0x320>)
 80009c2:	487a      	ldr	r0, [pc, #488]	; (8000bac <main+0x2e8>)
 80009c4:	f7ff fe64 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	4987      	ldr	r1, [pc, #540]	; (8000be8 <main+0x324>)
 80009cc:	4877      	ldr	r0, [pc, #476]	; (8000bac <main+0x2e8>)
 80009ce:	f7ff fe5f 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 80009d2:	2201      	movs	r2, #1
 80009d4:	4985      	ldr	r1, [pc, #532]	; (8000bec <main+0x328>)
 80009d6:	4875      	ldr	r0, [pc, #468]	; (8000bac <main+0x2e8>)
 80009d8:	f7ff fe5a 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	4984      	ldr	r1, [pc, #528]	; (8000bf0 <main+0x32c>)
 80009e0:	4872      	ldr	r0, [pc, #456]	; (8000bac <main+0x2e8>)
 80009e2:	f7ff fe55 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 80009e6:	2200      	movs	r2, #0
 80009e8:	4982      	ldr	r1, [pc, #520]	; (8000bf4 <main+0x330>)
 80009ea:	4870      	ldr	r0, [pc, #448]	; (8000bac <main+0x2e8>)
 80009ec:	f7ff fe50 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 80009f0:	2200      	movs	r2, #0
 80009f2:	4981      	ldr	r1, [pc, #516]	; (8000bf8 <main+0x334>)
 80009f4:	486d      	ldr	r0, [pc, #436]	; (8000bac <main+0x2e8>)
 80009f6:	f7ff fe4b 	bl	8000690 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 80009fa:	2200      	movs	r2, #0
 80009fc:	497f      	ldr	r1, [pc, #508]	; (8000bfc <main+0x338>)
 80009fe:	486b      	ldr	r0, [pc, #428]	; (8000bac <main+0x2e8>)
 8000a00:	f7ff fe46 	bl	8000690 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8000a04:	2201      	movs	r2, #1
 8000a06:	497e      	ldr	r1, [pc, #504]	; (8000c00 <main+0x33c>)
 8000a08:	487e      	ldr	r0, [pc, #504]	; (8000c04 <main+0x340>)
 8000a0a:	f013 fa7d 	bl	8013f08 <f_mount>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f040 80bf 	bne.w	8000b94 <main+0x2d0>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "gps.csv\0";
 8000a16:	4a7c      	ldr	r2, [pc, #496]	; (8000c08 <main+0x344>)
 8000a18:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a1e:	c303      	stmia	r3!, {r0, r1}
 8000a20:	701a      	strb	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8000a22:	4a7a      	ldr	r2, [pc, #488]	; (8000c0c <main+0x348>)
 8000a24:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8000a2e:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000a32:	2201      	movs	r2, #1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4876      	ldr	r0, [pc, #472]	; (8000c10 <main+0x34c>)
 8000a38:	f013 faac 	bl	8013f94 <f_open>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d144      	bne.n	8000acc <main+0x208>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000a42:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000a46:	220a      	movs	r2, #10
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4871      	ldr	r0, [pc, #452]	; (8000c10 <main+0x34c>)
 8000a4c:	f013 faa2 	bl	8013f94 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8000a50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a54:	4a6f      	ldr	r2, [pc, #444]	; (8000c14 <main+0x350>)
 8000a56:	461c      	mov	r4, r3
 8000a58:	4615      	mov	r5, r2
 8000a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a66:	c403      	stmia	r4!, {r0, r1}
 8000a68:	8022      	strh	r2, [r4, #0]
 8000a6a:	3402      	adds	r4, #2
 8000a6c:	0c13      	lsrs	r3, r2, #16
 8000a6e:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8000a70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fc33 	bl	80002e0 <strlen>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a80:	4413      	add	r3, r2
 8000a82:	4a65      	ldr	r2, [pc, #404]	; (8000c18 <main+0x354>)
 8000a84:	4614      	mov	r4, r2
 8000a86:	469c      	mov	ip, r3
 8000a88:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000a8c:	4665      	mov	r5, ip
 8000a8e:	4626      	mov	r6, r4
 8000a90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a92:	6028      	str	r0, [r5, #0]
 8000a94:	6069      	str	r1, [r5, #4]
 8000a96:	60aa      	str	r2, [r5, #8]
 8000a98:	60eb      	str	r3, [r5, #12]
 8000a9a:	3410      	adds	r4, #16
 8000a9c:	f10c 0c10 	add.w	ip, ip, #16
 8000aa0:	4574      	cmp	r4, lr
 8000aa2:	d1f3      	bne.n	8000a8c <main+0x1c8>
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	cb03      	ldmia	r3!, {r0, r1}
 8000aaa:	6010      	str	r0, [r2, #0]
 8000aac:	6051      	str	r1, [r2, #4]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8000ab2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fc12 	bl	80002e0 <strlen>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000ac2:	4b56      	ldr	r3, [pc, #344]	; (8000c1c <main+0x358>)
 8000ac4:	4852      	ldr	r0, [pc, #328]	; (8000c10 <main+0x34c>)
 8000ac6:	f013 fd62 	bl	801458e <f_write>
 8000aca:	e00b      	b.n	8000ae4 <main+0x220>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8000acc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fc05 	bl	80002e0 <strlen>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000adc:	4b50      	ldr	r3, [pc, #320]	; (8000c20 <main+0x35c>)
 8000ade:	484c      	ldr	r0, [pc, #304]	; (8000c10 <main+0x34c>)
 8000ae0:	f013 fc16 	bl	8014310 <f_read>
      }
      f_close(&Config);
 8000ae4:	484a      	ldr	r0, [pc, #296]	; (8000c10 <main+0x34c>)
 8000ae6:	f013 ff45 	bl	8014974 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000aea:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000aee:	220a      	movs	r2, #10
 8000af0:	4619      	mov	r1, r3
 8000af2:	484c      	ldr	r0, [pc, #304]	; (8000c24 <main+0x360>)
 8000af4:	f013 fa4e 	bl	8013f94 <f_open>

  	  //write speed test
  	  	for(int i = 0; i<131072; i++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000afe:	e00a      	b.n	8000b16 <main+0x252>
  		    DataBuffer.Data.DataBuff1[i] = 'A';
 8000b00:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <main+0x364>)
 8000b02:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b06:	4413      	add	r3, r2
 8000b08:	2241      	movs	r2, #65	; 0x41
 8000b0a:	701a      	strb	r2, [r3, #0]
  	  	for(int i = 0; i<131072; i++){
 8000b0c:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b10:	3301      	adds	r3, #1
 8000b12:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000b16:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b1e:	dbef      	blt.n	8000b00 <main+0x23c>
  	    }
  	    int start = HAL_GetTick();
 8000b20:	f001 f93c 	bl	8001d9c <HAL_GetTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  	    for(int i = 0; i<2048; i++){
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8000b30:	e00b      	b.n	8000b4a <main+0x286>
  		f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte);
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <main+0x368>)
 8000b34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b38:	493b      	ldr	r1, [pc, #236]	; (8000c28 <main+0x364>)
 8000b3a:	483a      	ldr	r0, [pc, #232]	; (8000c24 <main+0x360>)
 8000b3c:	f013 fd27 	bl	801458e <f_write>
  	    for(int i = 0; i<2048; i++){
 8000b40:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000b44:	3301      	adds	r3, #1
 8000b46:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8000b4a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b52:	dbee      	blt.n	8000b32 <main+0x26e>
        }
  	    int end = HAL_GetTick();
 8000b54:	f001 f922 	bl	8001d9c <HAL_GetTick>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  	    int duration = end - start;
 8000b5e:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8000b62:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
  	    char myTime[200];
  	    sprintf(myTime, "\r%i", duration);
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8000b72:	492f      	ldr	r1, [pc, #188]	; (8000c30 <main+0x36c>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f014 fe37 	bl	80157e8 <siprintf>
  	    f_write(&myFILE, myTime, strlen(myTime), &testByte);
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fbaf 	bl	80002e0 <strlen>
 8000b82:	4602      	mov	r2, r0
 8000b84:	1d39      	adds	r1, r7, #4
 8000b86:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <main+0x368>)
 8000b88:	4826      	ldr	r0, [pc, #152]	; (8000c24 <main+0x360>)
 8000b8a:	f013 fd00 	bl	801458e <f_write>
      f_close(&myFILE);
 8000b8e:	4825      	ldr	r0, [pc, #148]	; (8000c24 <main+0x360>)
 8000b90:	f013 fef0 	bl	8014974 <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  ///HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  printf("loop\n");
 8000b94:	4827      	ldr	r0, [pc, #156]	; (8000c34 <main+0x370>)
 8000b96:	f014 fddb 	bl	8015750 <puts>
	  HAL_Delay(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9e:	f001 f909 	bl	8001db4 <HAL_Delay>
	  printf("loop\n");
 8000ba2:	e7f7      	b.n	8000b94 <main+0x2d0>
 8000ba4:	080167dc 	.word	0x080167dc
 8000ba8:	240405f8 	.word	0x240405f8
 8000bac:	240402b8 	.word	0x240402b8
 8000bb0:	080167e8 	.word	0x080167e8
 8000bb4:	080167ec 	.word	0x080167ec
 8000bb8:	080167f0 	.word	0x080167f0
 8000bbc:	080167f4 	.word	0x080167f4
 8000bc0:	080167f8 	.word	0x080167f8
 8000bc4:	080167fc 	.word	0x080167fc
 8000bc8:	08016800 	.word	0x08016800
 8000bcc:	08016804 	.word	0x08016804
 8000bd0:	08016808 	.word	0x08016808
 8000bd4:	0801680c 	.word	0x0801680c
 8000bd8:	08016810 	.word	0x08016810
 8000bdc:	08016814 	.word	0x08016814
 8000be0:	08016818 	.word	0x08016818
 8000be4:	0801681c 	.word	0x0801681c
 8000be8:	08016820 	.word	0x08016820
 8000bec:	08016824 	.word	0x08016824
 8000bf0:	08016828 	.word	0x08016828
 8000bf4:	0801682c 	.word	0x0801682c
 8000bf8:	08016830 	.word	0x08016830
 8000bfc:	08016834 	.word	0x08016834
 8000c00:	24040dc4 	.word	0x24040dc4
 8000c04:	240407f8 	.word	0x240407f8
 8000c08:	080168ac 	.word	0x080168ac
 8000c0c:	080168b8 	.word	0x080168b8
 8000c10:	24040b8c 	.word	0x24040b8c
 8000c14:	08016838 	.word	0x08016838
 8000c18:	08016864 	.word	0x08016864
 8000c1c:	2404076c 	.word	0x2404076c
 8000c20:	240405f4 	.word	0x240405f4
 8000c24:	24040344 	.word	0x24040344
 8000c28:	240001ec 	.word	0x240001ec
 8000c2c:	24040b88 	.word	0x24040b88
 8000c30:	080168a0 	.word	0x080168a0
 8000c34:	080168a4 	.word	0x080168a4

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0cc      	sub	sp, #304	; 0x130
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c42:	224c      	movs	r2, #76	; 0x4c
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f014 fc5d 	bl	8015506 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f014 fc56 	bl	8015506 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	23bc      	movs	r3, #188	; 0xbc
 8000c62:	461a      	mov	r2, r3
 8000c64:	2100      	movs	r1, #0
 8000c66:	f014 fc4e 	bl	8015506 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f006 f81c 	bl	8006ca8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	4b67      	ldr	r3, [pc, #412]	; (8000e14 <SystemClock_Config+0x1dc>)
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	4a66      	ldr	r2, [pc, #408]	; (8000e14 <SystemClock_Config+0x1dc>)
 8000c7c:	f023 0301 	bic.w	r3, r3, #1
 8000c80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c82:	4b64      	ldr	r3, [pc, #400]	; (8000e14 <SystemClock_Config+0x1dc>)
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	f003 0201 	and.w	r2, r3, #1
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	4b62      	ldr	r3, [pc, #392]	; (8000e18 <SystemClock_Config+0x1e0>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a61      	ldr	r2, [pc, #388]	; (8000e18 <SystemClock_Config+0x1e0>)
 8000c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <SystemClock_Config+0x1e0>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000caa:	bf00      	nop
 8000cac:	4b5a      	ldr	r3, [pc, #360]	; (8000e18 <SystemClock_Config+0x1e0>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb8:	d1f8      	bne.n	8000cac <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000cba:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <SystemClock_Config+0x1e4>)
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	f023 0303 	bic.w	r3, r3, #3
 8000cc2:	4a56      	ldr	r2, [pc, #344]	; (8000e1c <SystemClock_Config+0x1e4>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000cca:	2321      	movs	r3, #33	; 0x21
 8000ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f006 f80c 	bl	8006d3c <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000d2a:	f000 fbd5 	bl	80014d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	233f      	movs	r3, #63	; 0x3f
 8000d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d34:	2303      	movs	r3, #3
 8000d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d40:	2308      	movs	r3, #8
 8000d42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d46:	2340      	movs	r3, #64	; 0x40
 8000d48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fbf8 	bl	800755c <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 8000d72:	f000 fbb1 	bl	80014d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4a29      	ldr	r2, [pc, #164]	; (8000e20 <SystemClock_Config+0x1e8>)
 8000d7c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	2202      	movs	r2, #2
 8000d84:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	2202      	movs	r2, #2
 8000d94:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	2203      	movs	r2, #3
 8000da4:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	22c0      	movs	r2, #192	; 0xc0
 8000dac:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2220      	movs	r2, #32
 8000db4:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dc6:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2200      	movs	r2, #0
 8000dce:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd8:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 ff62 	bl	8007cbc <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x1ca>
  {
    Error_Handler();
 8000dfe:	f000 fb6b 	bl	80014d8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000e02:	f006 fd61 	bl	80078c8 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000e06:	f005 ff89 	bl	8006d1c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000e0a:	bf00      	nop
 8000e0c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	58000400 	.word	0x58000400
 8000e18:	58024800 	.word	0x58024800
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	00059002 	.word	0x00059002

08000e24 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e2a:	4a30      	ldr	r2, [pc, #192]	; (8000eec <MX_FDCAN1_Init+0xc8>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e30:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e34:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e36:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e42:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e56:	2232      	movs	r2, #50	; 0x32
 8000e58:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e5c:	226d      	movs	r2, #109	; 0x6d
 8000e5e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8000e60:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e62:	2232      	movs	r2, #50	; 0x32
 8000e64:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e7a:	2205      	movs	r2, #5
 8000e7c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e92:	2240      	movs	r2, #64	; 0x40
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e98:	2212      	movs	r2, #18
 8000e9a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000ece:	2204      	movs	r2, #4
 8000ed0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_FDCAN1_Init+0xc4>)
 8000ed4:	f003 f984 	bl	80041e0 <HAL_FDCAN_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000ede:	f000 fafb 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	24040640 	.word	0x24040640
 8000eec:	4000a000 	.word	0x4000a000

08000ef0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <MX_FDCAN2_Init+0xc4>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f98:	2204      	movs	r2, #4
 8000f9a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_FDCAN2_Init+0xc0>)
 8000f9e:	f003 f91f 	bl	80041e0 <HAL_FDCAN_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000fa8:	f000 fa96 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	24040ad8 	.word	0x24040ad8
 8000fb4:	4000a400 	.word	0x4000a400

08000fb8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <MX_SDMMC1_SD_Init+0x40>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fdc:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	24040574 	.word	0x24040574
 8000ff8:	52007000 	.word	0x52007000

08000ffc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001002:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <MX_SPI1_Init+0xa8>)
 8001004:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001008:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800100c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001016:	2207      	movs	r2, #7
 8001018:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_SPI1_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001028:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800102c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_SPI1_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_SPI1_Init+0xa4>)
 800104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001056:	2200      	movs	r2, #0
 8001058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_SPI1_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_SPI1_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_SPI1_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_SPI1_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_SPI1_Init+0xa4>)
 800108c:	f00a fc5e 	bl	800b94c <HAL_SPI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001096:	f000 fa1f 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	24040770 	.word	0x24040770
 80010a4:	40013000 	.word	0x40013000

080010a8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_UART8_Init+0x90>)
 80010ae:	4a23      	ldr	r2, [pc, #140]	; (800113c <MX_UART8_Init+0x94>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_UART8_Init+0x90>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_UART8_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_UART8_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_UART8_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_UART8_Init+0x90>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_UART8_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_UART8_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_UART8_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_UART8_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_UART8_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_UART8_Init+0x90>)
 80010f2:	f00a fd3e 	bl	800bb72 <HAL_UART_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80010fc:	f000 f9ec 	bl	80014d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001100:	2100      	movs	r1, #0
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_UART8_Init+0x90>)
 8001104:	f00b fece 	bl	800cea4 <HAL_UARTEx_SetTxFifoThreshold>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800110e:	f000 f9e3 	bl	80014d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001112:	2100      	movs	r1, #0
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <MX_UART8_Init+0x90>)
 8001116:	f00b ff03 	bl	800cf20 <HAL_UARTEx_SetRxFifoThreshold>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001120:	f000 f9da 	bl	80014d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_UART8_Init+0x90>)
 8001126:	f00b fe84 	bl	800ce32 <HAL_UARTEx_DisableFifoMode>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001130:	f000 f9d2 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	240406e0 	.word	0x240406e0
 800113c:	40007c00 	.word	0x40007c00

08001140 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <MX_USART3_UART_Init+0x94>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800114c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001188:	4811      	ldr	r0, [pc, #68]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800118a:	f00a fcf2 	bl	800bb72 <HAL_UART_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001194:	f000 f9a0 	bl	80014d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800119c:	f00b fe82 	bl	800cea4 <HAL_UARTEx_SetTxFifoThreshold>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011a6:	f000 f997 	bl	80014d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4808      	ldr	r0, [pc, #32]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 80011ae:	f00b feb7 	bl	800cf20 <HAL_UARTEx_SetRxFifoThreshold>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011b8:	f000 f98e 	bl	80014d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 80011be:	f00b fe38 	bl	800ce32 <HAL_UARTEx_DisableFifoMode>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011c8:	f000 f986 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	240402b8 	.word	0x240402b8
 80011d4:	40004800 	.word	0x40004800

080011d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <MX_DMA_Init+0x3c>)
 80011e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <MX_DMA_Init+0x3c>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_DMA_Init+0x3c>)
 80011f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	200b      	movs	r0, #11
 8001202:	f000 fee0 	bl	8001fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001206:	200b      	movs	r0, #11
 8001208:	f000 fef7 	bl	8001ffa <HAL_NVIC_EnableIRQ>

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58024400 	.word	0x58024400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a67      	ldr	r2, [pc, #412]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a60      	ldr	r2, [pc, #384]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	4b5a      	ldr	r3, [pc, #360]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 8001272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a51      	ldr	r2, [pc, #324]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c4:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a42      	ldr	r2, [pc, #264]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d4:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <MX_GPIO_Init+0x1bc>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	210c      	movs	r1, #12
 80012e6:	483c      	ldr	r0, [pc, #240]	; (80013d8 <MX_GPIO_Init+0x1c0>)
 80012e8:	f004 fa7e 	bl	80057e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2103      	movs	r1, #3
 80012f0:	483a      	ldr	r0, [pc, #232]	; (80013dc <MX_GPIO_Init+0x1c4>)
 80012f2:	f004 fa79 	bl	80057e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2101      	movs	r1, #1
 80012fa:	4839      	ldr	r0, [pc, #228]	; (80013e0 <MX_GPIO_Init+0x1c8>)
 80012fc:	f004 fa74 	bl	80057e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001306:	4837      	ldr	r0, [pc, #220]	; (80013e4 <MX_GPIO_Init+0x1cc>)
 8001308:	f004 fa6e 	bl	80057e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 800130c:	230c      	movs	r3, #12
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	482d      	ldr	r0, [pc, #180]	; (80013d8 <MX_GPIO_Init+0x1c0>)
 8001324:	f004 f898 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8001328:	2303      	movs	r3, #3
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4827      	ldr	r0, [pc, #156]	; (80013dc <MX_GPIO_Init+0x1c4>)
 8001340:	f004 f88a 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8001344:	2304      	movs	r3, #4
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <MX_GPIO_Init+0x1d0>)
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4821      	ldr	r0, [pc, #132]	; (80013dc <MX_GPIO_Init+0x1c4>)
 8001358:	f004 f87e 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800135c:	2301      	movs	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	481b      	ldr	r0, [pc, #108]	; (80013e0 <MX_GPIO_Init+0x1c8>)
 8001374:	f004 f870 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_GPIO_Init+0x1d0>)
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4812      	ldr	r0, [pc, #72]	; (80013d8 <MX_GPIO_Init+0x1c0>)
 800138e:	f004 f863 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	480e      	ldr	r0, [pc, #56]	; (80013e4 <MX_GPIO_Init+0x1cc>)
 80013ac:	f004 f854 	bl	8005458 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 80013b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_GPIO_Init+0x1c4>)
 80013c6:	f004 f847 	bl	8005458 <HAL_GPIO_Init>

}
 80013ca:	bf00      	nop
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58020000 	.word	0x58020000
 80013e0:	58020400 	.word	0x58020400
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	11110000 	.word	0x11110000

080013ec <FDCAN_Config>:
    return 2; //buffer 2 is full
  }
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len+1);
  return 0;
}
static void FDCAN_Config(void){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80013fa:	2302      	movs	r3, #2
 80013fc:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x321;
 8001402:	f240 3321 	movw	r3, #801	; 0x321
 8001406:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0x7FF;
 8001408:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800140c:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) == HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <FDCAN_Config+0x84>)
 8001414:	f003 f8c6 	bl	80045a4 <HAL_FDCAN_ConfigFilter>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <FDCAN_Config+0x38>
	  {
	    printf("Filter configured\n");
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <FDCAN_Config+0x88>)
 8001420:	f014 f996 	bl	8015750 <puts>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8001424:	2300      	movs	r3, #0
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	2202      	movs	r2, #2
 800142c:	2102      	movs	r1, #2
 800142e:	4810      	ldr	r0, [pc, #64]	; (8001470 <FDCAN_Config+0x84>)
 8001430:	f003 f92e 	bl	8004690 <HAL_FDCAN_ConfigGlobalFilter>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <FDCAN_Config+0x52>
	  {
	    Error_Handler();
 800143a:	f000 f84d 	bl	80014d8 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800143e:	480c      	ldr	r0, [pc, #48]	; (8001470 <FDCAN_Config+0x84>)
 8001440:	f003 f976 	bl	8004730 <HAL_FDCAN_Start>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <FDCAN_Config+0x62>
	  {
	    Error_Handler();
 800144a:	f000 f845 	bl	80014d8 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800144e:	2200      	movs	r2, #0
 8001450:	2101      	movs	r1, #1
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <FDCAN_Config+0x84>)
 8001454:	f003 faf6 	bl	8004a44 <HAL_FDCAN_ActivateNotification>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <FDCAN_Config+0x76>
	  {
	    /* Notification Error */
	    Error_Handler();
 800145e:	f000 f83b 	bl	80014d8 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1);
 8001462:	4803      	ldr	r0, [pc, #12]	; (8001470 <FDCAN_Config+0x84>)
 8001464:	f003 f941 	bl	80046ea <HAL_FDCAN_EnableTxDelayCompensation>

}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	24040640 	.word	0x24040640
 8001474:	080168c4 	.word	0x080168c4

08001478 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_FDCAN_RxFifo0Callback+0x34>)
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8001486:	2140      	movs	r1, #64	; 0x40
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f003 f97d 	bl	8004788 <HAL_FDCAN_GetRxMessage>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <HAL_FDCAN_RxFifo0Callback+0x2a>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001494:	2101      	movs	r1, #1
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8001498:	f004 f9bf 	bl	800581a <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_FDCAN_RxFifo0Callback+0x40>)
 800149e:	f014 f957 	bl	8015750 <puts>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24040a28 	.word	0x24040a28
 80014b0:	24040ab0 	.word	0x24040ab0
 80014b4:	58020400 	.word	0x58020400
 80014b8:	080168d8 	.word	0x080168d8

080014bc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
   */

  /*for(int i=0; i<BUFFLENGTH; i++){
	  printf("%c", rxBuf[i]);
  }*/
  printf("GPS Recieved\n");
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <HAL_UART_RxCpltCallback+0x18>)
 80014c6:	f014 f943 	bl	8015750 <puts>

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	080168ec 	.word	0x080168ec

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error\n");
 80014de:	4802      	ldr	r0, [pc, #8]	; (80014e8 <Error_Handler+0x10>)
 80014e0:	f014 f936 	bl	8015750 <puts>
 80014e4:	e7fb      	b.n	80014de <Error_Handler+0x6>
 80014e6:	bf00      	nop
 80014e8:	080168fc 	.word	0x080168fc

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_MspInit+0x30>)
 80014f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x30>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x30>)
 8001504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	58024400 	.word	0x58024400

08001520 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_FDCAN_MspInit+0x140>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d14e      	bne.n	80015e0 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001542:	4b48      	ldr	r3, [pc, #288]	; (8001664 <HAL_FDCAN_MspInit+0x144>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	4a46      	ldr	r2, [pc, #280]	; (8001664 <HAL_FDCAN_MspInit+0x144>)
 800154a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800154c:	4b45      	ldr	r3, [pc, #276]	; (8001664 <HAL_FDCAN_MspInit+0x144>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10e      	bne.n	8001572 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001554:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 8001556:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800155a:	4a43      	ldr	r2, [pc, #268]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001564:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 8001566:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001590:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015a2:	2309      	movs	r3, #9
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	482f      	ldr	r0, [pc, #188]	; (800166c <HAL_FDCAN_MspInit+0x14c>)
 80015ae:	f003 ff53 	bl	8005458 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 80015b2:	2040      	movs	r0, #64	; 0x40
 80015b4:	f004 f94c 	bl	8005850 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 80015b8:	2080      	movs	r0, #128	; 0x80
 80015ba:	f004 f949 	bl	8005850 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2013      	movs	r0, #19
 80015c4:	f000 fcff 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80015c8:	2013      	movs	r0, #19
 80015ca:	f000 fd16 	bl	8001ffa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2015      	movs	r0, #21
 80015d4:	f000 fcf7 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80015d8:	2015      	movs	r0, #21
 80015da:	f000 fd0e 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80015de:	e03b      	b.n	8001658 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <HAL_FDCAN_MspInit+0x150>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d136      	bne.n	8001658 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_FDCAN_MspInit+0x144>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <HAL_FDCAN_MspInit+0x144>)
 80015f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_FDCAN_MspInit+0x144>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10e      	bne.n	800161a <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 80015fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001602:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 800160e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_FDCAN_MspInit+0x148>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001638:	2360      	movs	r3, #96	; 0x60
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001648:	2309      	movs	r3, #9
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <HAL_FDCAN_MspInit+0x14c>)
 8001654:	f003 ff00 	bl	8005458 <HAL_GPIO_Init>
}
 8001658:	bf00      	nop
 800165a:	3730      	adds	r7, #48	; 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	4000a000 	.word	0x4000a000
 8001664:	240401f0 	.word	0x240401f0
 8001668:	58024400 	.word	0x58024400
 800166c:	58020400 	.word	0x58020400
 8001670:	4000a400 	.word	0x4000a400

08001674 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a2e      	ldr	r2, [pc, #184]	; (800174c <HAL_SD_MspInit+0xd8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d155      	bne.n	8001742 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_SD_MspInit+0xdc>)
 8001698:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800169c:	4a2c      	ldr	r2, [pc, #176]	; (8001750 <HAL_SD_MspInit+0xdc>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_SD_MspInit+0xdc>)
 80016a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_SD_MspInit+0xdc>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a25      	ldr	r2, [pc, #148]	; (8001750 <HAL_SD_MspInit+0xdc>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_SD_MspInit+0xdc>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <HAL_SD_MspInit+0xdc>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <HAL_SD_MspInit+0xdc>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_SD_MspInit+0xdc>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80016f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001702:	230c      	movs	r3, #12
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4811      	ldr	r0, [pc, #68]	; (8001754 <HAL_SD_MspInit+0xe0>)
 800170e:	f003 fea3 	bl	8005458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001712:	2304      	movs	r3, #4
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001722:	230c      	movs	r3, #12
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	480a      	ldr	r0, [pc, #40]	; (8001758 <HAL_SD_MspInit+0xe4>)
 800172e:	f003 fe93 	bl	8005458 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2031      	movs	r0, #49	; 0x31
 8001738:	f000 fc45 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800173c:	2031      	movs	r0, #49	; 0x31
 800173e:	f000 fc5c 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	52007000 	.word	0x52007000
 8001750:	58024400 	.word	0x58024400
 8001754:	58020800 	.word	0x58020800
 8001758:	58020c00 	.word	0x58020c00

0800175c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_SPI_MspInit+0x88>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12d      	bne.n	80017da <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_SPI_MspInit+0x8c>)
 8001780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_SPI_MspInit+0x8c>)
 8001786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800178a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_SPI_MspInit+0x8c>)
 8001790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_SPI_MspInit+0x8c>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_SPI_MspInit+0x8c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_SPI_MspInit+0x8c>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017ba:	23e0      	movs	r3, #224	; 0xe0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ca:	2305      	movs	r3, #5
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_SPI_MspInit+0x90>)
 80017d6:	f003 fe3f 	bl	8005458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40013000 	.word	0x40013000
 80017e8:	58024400 	.word	0x58024400
 80017ec:	58020000 	.word	0x58020000

080017f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a4b      	ldr	r2, [pc, #300]	; (800193c <HAL_UART_MspInit+0x14c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d12e      	bne.n	8001870 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001812:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <HAL_UART_MspInit+0x150>)
 8001814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001818:	4a49      	ldr	r2, [pc, #292]	; (8001940 <HAL_UART_MspInit+0x150>)
 800181a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800181e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001822:	4b47      	ldr	r3, [pc, #284]	; (8001940 <HAL_UART_MspInit+0x150>)
 8001824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001830:	4b43      	ldr	r3, [pc, #268]	; (8001940 <HAL_UART_MspInit+0x150>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	4a42      	ldr	r2, [pc, #264]	; (8001940 <HAL_UART_MspInit+0x150>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_UART_MspInit+0x150>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800184e:	2303      	movs	r3, #3
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800185e:	2308      	movs	r3, #8
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4836      	ldr	r0, [pc, #216]	; (8001944 <HAL_UART_MspInit+0x154>)
 800186a:	f003 fdf5 	bl	8005458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800186e:	e061      	b.n	8001934 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a34      	ldr	r2, [pc, #208]	; (8001948 <HAL_UART_MspInit+0x158>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d15c      	bne.n	8001934 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_UART_MspInit+0x150>)
 800187c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001880:	4a2f      	ldr	r2, [pc, #188]	; (8001940 <HAL_UART_MspInit+0x150>)
 8001882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001886:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_UART_MspInit+0x150>)
 800188c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_UART_MspInit+0x150>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189e:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_UART_MspInit+0x150>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_UART_MspInit+0x150>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018c8:	2307      	movs	r3, #7
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	481e      	ldr	r0, [pc, #120]	; (800194c <HAL_UART_MspInit+0x15c>)
 80018d4:	f003 fdc0 	bl	8005458 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018da:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_UART_MspInit+0x164>)
 80018dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018e0:	222d      	movs	r2, #45	; 0x2d
 80018e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_UART_MspInit+0x160>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_UART_MspInit+0x160>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <HAL_UART_MspInit+0x160>)
 800191a:	f000 fb89 	bl	8002030 <HAL_DMA_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001924:	f7ff fdd8 	bl	80014d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_UART_MspInit+0x160>)
 800192c:	679a      	str	r2, [r3, #120]	; 0x78
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_UART_MspInit+0x160>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001934:	bf00      	nop
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40007c00 	.word	0x40007c00
 8001940:	58024400 	.word	0x58024400
 8001944:	58021000 	.word	0x58021000
 8001948:	40004800 	.word	0x40004800
 800194c:	58020c00 	.word	0x58020c00
 8001950:	24040240 	.word	0x24040240
 8001954:	40020010 	.word	0x40020010

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800195c:	f006 f992 	bl	8007c84 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x8>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 f9e4 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA1_Stream0_IRQHandler+0x10>)
 80019b6:	f001 f901 	bl	8002bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	24040240 	.word	0x24040240

080019c4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <FDCAN1_IT0_IRQHandler+0x10>)
 80019ca:	f003 f8b5 	bl	8004b38 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	24040640 	.word	0x24040640

080019d8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <FDCAN1_IT1_IRQHandler+0x10>)
 80019de:	f003 f8ab 	bl	8004b38 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	24040640 	.word	0x24040640

080019ec <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <SDMMC1_IRQHandler+0x10>)
 80019f2:	f008 fdb3 	bl	800a55c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	24040574 	.word	0x24040574

08001a00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <OTG_FS_IRQHandler+0x10>)
 8001a06:	f004 f89e 	bl	8005b46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	240416f8 	.word	0x240416f8

08001a14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e00a      	b.n	8001a3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a26:	f3af 8000 	nop.w
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	b2ca      	uxtb	r2, r1
 8001a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbf0      	blt.n	8001a26 <_read+0x12>
	}

return len;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	return -1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a76:	605a      	str	r2, [r3, #4]
	return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_isatty>:

int _isatty(int file)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
	return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <_sbrk+0x5c>)
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <_sbrk+0x60>)
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <_sbrk+0x64>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <_sbrk+0x68>)
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d207      	bcs.n	8001af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae8:	f013 fcc8 	bl	801547c <__errno>
 8001aec:	4602      	mov	r2, r0
 8001aee:	230c      	movs	r3, #12
 8001af0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	e009      	b.n	8001b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <_sbrk+0x64>)
 8001b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	24080000 	.word	0x24080000
 8001b18:	00000400 	.word	0x00000400
 8001b1c:	240401f4 	.word	0x240401f4
 8001b20:	24041b08 	.word	0x24041b08

08001b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <SystemInit+0xec>)
 8001b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2e:	4a38      	ldr	r2, [pc, #224]	; (8001c10 <SystemInit+0xec>)
 8001b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <SystemInit+0xf0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	2b06      	cmp	r3, #6
 8001b42:	d807      	bhi.n	8001b54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b44:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <SystemInit+0xf0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 030f 	bic.w	r3, r3, #15
 8001b4c:	4a31      	ldr	r2, [pc, #196]	; (8001c14 <SystemInit+0xf0>)
 8001b4e:	f043 0307 	orr.w	r3, r3, #7
 8001b52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <SystemInit+0xf4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <SystemInit+0xf4>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <SystemInit+0xf4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b66:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <SystemInit+0xf4>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	492b      	ldr	r1, [pc, #172]	; (8001c18 <SystemInit+0xf4>)
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <SystemInit+0xf8>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <SystemInit+0xf0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	2b07      	cmp	r3, #7
 8001b7c:	d907      	bls.n	8001b8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <SystemInit+0xf0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 030f 	bic.w	r3, r3, #15
 8001b86:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <SystemInit+0xf0>)
 8001b88:	f043 0307 	orr.w	r3, r3, #7
 8001b8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <SystemInit+0xf4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <SystemInit+0xf4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <SystemInit+0xf4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <SystemInit+0xf4>)
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <SystemInit+0xfc>)
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <SystemInit+0xf4>)
 8001ba8:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <SystemInit+0x100>)
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <SystemInit+0xf4>)
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <SystemInit+0x104>)
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <SystemInit+0xf4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <SystemInit+0xf4>)
 8001bba:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <SystemInit+0x104>)
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <SystemInit+0xf4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <SystemInit+0xf4>)
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <SystemInit+0x104>)
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <SystemInit+0xf4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <SystemInit+0xf4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <SystemInit+0xf4>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <SystemInit+0xf4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <SystemInit+0x108>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <SystemInit+0x10c>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bee:	d202      	bcs.n	8001bf6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <SystemInit+0x110>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <SystemInit+0x114>)
 8001bf8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SystemInit+0xec>)
 8001c00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c04:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	52002000 	.word	0x52002000
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c20:	02020200 	.word	0x02020200
 8001c24:	01ff0000 	.word	0x01ff0000
 8001c28:	01010280 	.word	0x01010280
 8001c2c:	5c001000 	.word	0x5c001000
 8001c30:	ffff0000 	.word	0xffff0000
 8001c34:	51008108 	.word	0x51008108
 8001c38:	52004000 	.word	0x52004000

08001c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c74 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c40:	f7ff ff70 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c46:	e003      	b.n	8001c50 <LoopCopyDataInit>

08001c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c4e:	3104      	adds	r1, #4

08001c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c50:	480a      	ldr	r0, [pc, #40]	; (8001c7c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c58:	d3f6      	bcc.n	8001c48 <CopyDataInit>
  ldr  r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001c5c:	e002      	b.n	8001c64 <LoopFillZerobss>

08001c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c60:	f842 3b04 	str.w	r3, [r2], #4

08001c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c68:	d3f9      	bcc.n	8001c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f013 fc0d 	bl	8015488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6e:	f7fe fe29 	bl	80008c4 <main>
  bx  lr    
 8001c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c74:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001c78:	08016b88 	.word	0x08016b88
  ldr  r0, =_sdata
 8001c7c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001c80:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001c84:	240001d0 	.word	0x240001d0
  ldr  r3, = _ebss
 8001c88:	24041b04 	.word	0x24041b04

08001c8c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC3_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c96:	2003      	movs	r0, #3
 8001c98:	f000 f98a 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c9c:	f005 fe24 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_Init+0x68>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_Init+0x6c>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_Init+0x68>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_Init+0x6c>)
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_Init+0x70>)
 8001cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_Init+0x74>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f814 	bl	8001d08 <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e002      	b.n	8001cf0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cea:	f7ff fbff 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	58024400 	.word	0x58024400
 8001cfc:	080169e8 	.word	0x080169e8
 8001d00:	24000004 	.word	0x24000004
 8001d04:	24000000 	.word	0x24000000

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_InitTick+0x60>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e021      	b.n	8001d60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_InitTick+0x64>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_InitTick+0x60>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f96f 	bl	8002016 <HAL_SYSTICK_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00e      	b.n	8001d60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d80a      	bhi.n	8001d5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f000 f939 	bl	8001fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d54:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <HAL_InitTick+0x68>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2400000c 	.word	0x2400000c
 8001d6c:	24000000 	.word	0x24000000
 8001d70:	24000008 	.word	0x24000008

08001d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x20>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_IncTick+0x24>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <HAL_IncTick+0x24>)
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2400000c 	.word	0x2400000c
 8001d98:	24040dbc 	.word	0x24040dbc

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_GetTick+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	24040dbc 	.word	0x24040dbc

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff ffee 	bl	8001d9c <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d005      	beq.n	8001dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_Delay+0x40>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dda:	bf00      	nop
 8001ddc:	f7ff ffde 	bl	8001d9c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d8f7      	bhi.n	8001ddc <HAL_Delay+0x28>
  {
  }
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2400000c 	.word	0x2400000c

08001df8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_GetREVID+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0c1b      	lsrs	r3, r3, #16
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	5c001000 	.word	0x5c001000

08001e10 <__NVIC_SetPriorityGrouping>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <__NVIC_SetPriorityGrouping+0x40>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <__NVIC_SetPriorityGrouping+0x40>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	05fa0000 	.word	0x05fa0000

08001e58 <__NVIC_GetPriorityGrouping>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <__NVIC_GetPriorityGrouping+0x18>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0307 	and.w	r3, r3, #7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_EnableIRQ>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	db0b      	blt.n	8001e9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	4907      	ldr	r1, [pc, #28]	; (8001eac <__NVIC_EnableIRQ+0x38>)
 8001e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2001      	movs	r0, #1
 8001e96:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <SysTick_Config>:
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f7c:	d301      	bcc.n	8001f82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00f      	b.n	8001fa2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <SysTick_Config+0x40>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f7ff ff8e 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <SysTick_Config+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SysTick_Config+0x40>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff29 	bl	8001e10 <__NVIC_SetPriorityGrouping>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff40 	bl	8001e58 <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff90 	bl	8001f04 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5f 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff33 	bl	8001e74 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa4 	bl	8001f6c <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff feb0 	bl	8001d9c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e316      	b.n	8002676 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <HAL_DMA_Init+0x1b8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d04a      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a65      	ldr	r2, [pc, #404]	; (80021ec <HAL_DMA_Init+0x1bc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d045      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a63      	ldr	r2, [pc, #396]	; (80021f0 <HAL_DMA_Init+0x1c0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d040      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a62      	ldr	r2, [pc, #392]	; (80021f4 <HAL_DMA_Init+0x1c4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d03b      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a60      	ldr	r2, [pc, #384]	; (80021f8 <HAL_DMA_Init+0x1c8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d036      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a5f      	ldr	r2, [pc, #380]	; (80021fc <HAL_DMA_Init+0x1cc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d031      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a5d      	ldr	r2, [pc, #372]	; (8002200 <HAL_DMA_Init+0x1d0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d02c      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <HAL_DMA_Init+0x1d4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d027      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <HAL_DMA_Init+0x1d8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d022      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a59      	ldr	r2, [pc, #356]	; (800220c <HAL_DMA_Init+0x1dc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d01d      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a57      	ldr	r2, [pc, #348]	; (8002210 <HAL_DMA_Init+0x1e0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d018      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a56      	ldr	r2, [pc, #344]	; (8002214 <HAL_DMA_Init+0x1e4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d013      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a54      	ldr	r2, [pc, #336]	; (8002218 <HAL_DMA_Init+0x1e8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00e      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a53      	ldr	r2, [pc, #332]	; (800221c <HAL_DMA_Init+0x1ec>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a51      	ldr	r2, [pc, #324]	; (8002220 <HAL_DMA_Init+0x1f0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d004      	beq.n	80020e8 <HAL_DMA_Init+0xb8>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a50      	ldr	r2, [pc, #320]	; (8002224 <HAL_DMA_Init+0x1f4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d101      	bne.n	80020ec <HAL_DMA_Init+0xbc>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_DMA_Init+0xbe>
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 813b 	beq.w	800236a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <HAL_DMA_Init+0x1b8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d04a      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a36      	ldr	r2, [pc, #216]	; (80021ec <HAL_DMA_Init+0x1bc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d045      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a34      	ldr	r2, [pc, #208]	; (80021f0 <HAL_DMA_Init+0x1c0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d040      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a33      	ldr	r2, [pc, #204]	; (80021f4 <HAL_DMA_Init+0x1c4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d03b      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a31      	ldr	r2, [pc, #196]	; (80021f8 <HAL_DMA_Init+0x1c8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d036      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a30      	ldr	r2, [pc, #192]	; (80021fc <HAL_DMA_Init+0x1cc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d031      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2e      	ldr	r2, [pc, #184]	; (8002200 <HAL_DMA_Init+0x1d0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d02c      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <HAL_DMA_Init+0x1d4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d027      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_DMA_Init+0x1d8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d022      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2a      	ldr	r2, [pc, #168]	; (800220c <HAL_DMA_Init+0x1dc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d01d      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <HAL_DMA_Init+0x1e0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d018      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a27      	ldr	r2, [pc, #156]	; (8002214 <HAL_DMA_Init+0x1e4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a25      	ldr	r2, [pc, #148]	; (8002218 <HAL_DMA_Init+0x1e8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00e      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a24      	ldr	r2, [pc, #144]	; (800221c <HAL_DMA_Init+0x1ec>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d009      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a22      	ldr	r2, [pc, #136]	; (8002220 <HAL_DMA_Init+0x1f0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_DMA_Init+0x174>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a21      	ldr	r2, [pc, #132]	; (8002224 <HAL_DMA_Init+0x1f4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d108      	bne.n	80021b6 <HAL_DMA_Init+0x186>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e007      	b.n	80021c6 <HAL_DMA_Init+0x196>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021c6:	e02f      	b.n	8002228 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c8:	f7ff fde8 	bl	8001d9c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d928      	bls.n	8002228 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e246      	b.n	8002676 <HAL_DMA_Init+0x646>
 80021e8:	40020010 	.word	0x40020010
 80021ec:	40020028 	.word	0x40020028
 80021f0:	40020040 	.word	0x40020040
 80021f4:	40020058 	.word	0x40020058
 80021f8:	40020070 	.word	0x40020070
 80021fc:	40020088 	.word	0x40020088
 8002200:	400200a0 	.word	0x400200a0
 8002204:	400200b8 	.word	0x400200b8
 8002208:	40020410 	.word	0x40020410
 800220c:	40020428 	.word	0x40020428
 8002210:	40020440 	.word	0x40020440
 8002214:	40020458 	.word	0x40020458
 8002218:	40020470 	.word	0x40020470
 800221c:	40020488 	.word	0x40020488
 8002220:	400204a0 	.word	0x400204a0
 8002224:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1c8      	bne.n	80021c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4b83      	ldr	r3, [pc, #524]	; (8002450 <HAL_DMA_Init+0x420>)
 8002242:	4013      	ands	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800224e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002266:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b04      	cmp	r3, #4
 800227a:	d107      	bne.n	800228c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4313      	orrs	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800228c:	4b71      	ldr	r3, [pc, #452]	; (8002454 <HAL_DMA_Init+0x424>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b71      	ldr	r3, [pc, #452]	; (8002458 <HAL_DMA_Init+0x428>)
 8002292:	4013      	ands	r3, r2
 8002294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002298:	d328      	bcc.n	80022ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b28      	cmp	r3, #40	; 0x28
 80022a0:	d903      	bls.n	80022aa <HAL_DMA_Init+0x27a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b2e      	cmp	r3, #46	; 0x2e
 80022a8:	d917      	bls.n	80022da <HAL_DMA_Init+0x2aa>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b3e      	cmp	r3, #62	; 0x3e
 80022b0:	d903      	bls.n	80022ba <HAL_DMA_Init+0x28a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b42      	cmp	r3, #66	; 0x42
 80022b8:	d90f      	bls.n	80022da <HAL_DMA_Init+0x2aa>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b46      	cmp	r3, #70	; 0x46
 80022c0:	d903      	bls.n	80022ca <HAL_DMA_Init+0x29a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b48      	cmp	r3, #72	; 0x48
 80022c8:	d907      	bls.n	80022da <HAL_DMA_Init+0x2aa>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b4e      	cmp	r3, #78	; 0x4e
 80022d0:	d905      	bls.n	80022de <HAL_DMA_Init+0x2ae>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b52      	cmp	r3, #82	; 0x52
 80022d8:	d801      	bhi.n	80022de <HAL_DMA_Init+0x2ae>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_DMA_Init+0x2b0>
 80022de:	2300      	movs	r3, #0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f023 0307 	bic.w	r3, r3, #7
 8002302:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2b04      	cmp	r3, #4
 8002314:	d117      	bne.n	8002346 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f001 fdcf 	bl	8003ecc <DMA_CheckFifoParam>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2240      	movs	r2, #64	; 0x40
 8002338:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e197      	b.n	8002676 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f001 fd0a 	bl	8003d68 <DMA_CalcBaseAndBitshift>
 8002354:	4603      	mov	r3, r0
 8002356:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	e0cd      	b.n	8002506 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a3b      	ldr	r2, [pc, #236]	; (800245c <HAL_DMA_Init+0x42c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d022      	beq.n	80023ba <HAL_DMA_Init+0x38a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a39      	ldr	r2, [pc, #228]	; (8002460 <HAL_DMA_Init+0x430>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01d      	beq.n	80023ba <HAL_DMA_Init+0x38a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a38      	ldr	r2, [pc, #224]	; (8002464 <HAL_DMA_Init+0x434>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d018      	beq.n	80023ba <HAL_DMA_Init+0x38a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a36      	ldr	r2, [pc, #216]	; (8002468 <HAL_DMA_Init+0x438>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_DMA_Init+0x38a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a35      	ldr	r2, [pc, #212]	; (800246c <HAL_DMA_Init+0x43c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00e      	beq.n	80023ba <HAL_DMA_Init+0x38a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a33      	ldr	r2, [pc, #204]	; (8002470 <HAL_DMA_Init+0x440>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_DMA_Init+0x38a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a32      	ldr	r2, [pc, #200]	; (8002474 <HAL_DMA_Init+0x444>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_DMA_Init+0x38a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a30      	ldr	r2, [pc, #192]	; (8002478 <HAL_DMA_Init+0x448>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_DMA_Init+0x38e>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_DMA_Init+0x390>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8097 	beq.w	80024f4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a24      	ldr	r2, [pc, #144]	; (800245c <HAL_DMA_Init+0x42c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d021      	beq.n	8002414 <HAL_DMA_Init+0x3e4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a22      	ldr	r2, [pc, #136]	; (8002460 <HAL_DMA_Init+0x430>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01c      	beq.n	8002414 <HAL_DMA_Init+0x3e4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a21      	ldr	r2, [pc, #132]	; (8002464 <HAL_DMA_Init+0x434>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d017      	beq.n	8002414 <HAL_DMA_Init+0x3e4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_DMA_Init+0x438>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d012      	beq.n	8002414 <HAL_DMA_Init+0x3e4>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1e      	ldr	r2, [pc, #120]	; (800246c <HAL_DMA_Init+0x43c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00d      	beq.n	8002414 <HAL_DMA_Init+0x3e4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_DMA_Init+0x440>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d008      	beq.n	8002414 <HAL_DMA_Init+0x3e4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_DMA_Init+0x444>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d003      	beq.n	8002414 <HAL_DMA_Init+0x3e4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_DMA_Init+0x448>)
 8002412:	4293      	cmp	r3, r2
 8002414:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_DMA_Init+0x44c>)
 8002432:	4013      	ands	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d020      	beq.n	8002480 <HAL_DMA_Init+0x450>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b80      	cmp	r3, #128	; 0x80
 8002444:	d102      	bne.n	800244c <HAL_DMA_Init+0x41c>
 8002446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800244a:	e01a      	b.n	8002482 <HAL_DMA_Init+0x452>
 800244c:	2300      	movs	r3, #0
 800244e:	e018      	b.n	8002482 <HAL_DMA_Init+0x452>
 8002450:	fe10803f 	.word	0xfe10803f
 8002454:	5c001000 	.word	0x5c001000
 8002458:	ffff0000 	.word	0xffff0000
 800245c:	58025408 	.word	0x58025408
 8002460:	5802541c 	.word	0x5802541c
 8002464:	58025430 	.word	0x58025430
 8002468:	58025444 	.word	0x58025444
 800246c:	58025458 	.word	0x58025458
 8002470:	5802546c 	.word	0x5802546c
 8002474:	58025480 	.word	0x58025480
 8002478:	58025494 	.word	0x58025494
 800247c:	fffe000f 	.word	0xfffe000f
 8002480:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68d2      	ldr	r2, [r2, #12]
 8002486:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002488:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002490:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <HAL_DMA_Init+0x650>)
 80024c8:	4413      	add	r3, r2
 80024ca:	4a6e      	ldr	r2, [pc, #440]	; (8002684 <HAL_DMA_Init+0x654>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	009a      	lsls	r2, r3, #2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f001 fc45 	bl	8003d68 <DMA_CalcBaseAndBitshift>
 80024de:	4603      	mov	r3, r0
 80024e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2201      	movs	r2, #1
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e008      	b.n	8002506 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2240      	movs	r2, #64	; 0x40
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0b7      	b.n	8002676 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5f      	ldr	r2, [pc, #380]	; (8002688 <HAL_DMA_Init+0x658>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d072      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a5d      	ldr	r2, [pc, #372]	; (800268c <HAL_DMA_Init+0x65c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d06d      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5c      	ldr	r2, [pc, #368]	; (8002690 <HAL_DMA_Init+0x660>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d068      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a5a      	ldr	r2, [pc, #360]	; (8002694 <HAL_DMA_Init+0x664>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d063      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a59      	ldr	r2, [pc, #356]	; (8002698 <HAL_DMA_Init+0x668>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d05e      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a57      	ldr	r2, [pc, #348]	; (800269c <HAL_DMA_Init+0x66c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d059      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_DMA_Init+0x670>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d054      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a54      	ldr	r2, [pc, #336]	; (80026a4 <HAL_DMA_Init+0x674>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d04f      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a53      	ldr	r2, [pc, #332]	; (80026a8 <HAL_DMA_Init+0x678>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d04a      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a51      	ldr	r2, [pc, #324]	; (80026ac <HAL_DMA_Init+0x67c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d045      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a50      	ldr	r2, [pc, #320]	; (80026b0 <HAL_DMA_Init+0x680>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d040      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a4e      	ldr	r2, [pc, #312]	; (80026b4 <HAL_DMA_Init+0x684>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d03b      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4d      	ldr	r2, [pc, #308]	; (80026b8 <HAL_DMA_Init+0x688>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d036      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <HAL_DMA_Init+0x68c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <HAL_DMA_Init+0x690>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d02c      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a48      	ldr	r2, [pc, #288]	; (80026c4 <HAL_DMA_Init+0x694>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d027      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a47      	ldr	r2, [pc, #284]	; (80026c8 <HAL_DMA_Init+0x698>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a45      	ldr	r2, [pc, #276]	; (80026cc <HAL_DMA_Init+0x69c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01d      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <HAL_DMA_Init+0x6a0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d018      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a42      	ldr	r2, [pc, #264]	; (80026d4 <HAL_DMA_Init+0x6a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a41      	ldr	r2, [pc, #260]	; (80026d8 <HAL_DMA_Init+0x6a8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00e      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3f      	ldr	r2, [pc, #252]	; (80026dc <HAL_DMA_Init+0x6ac>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a3e      	ldr	r2, [pc, #248]	; (80026e0 <HAL_DMA_Init+0x6b0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_DMA_Init+0x5c6>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a3c      	ldr	r2, [pc, #240]	; (80026e4 <HAL_DMA_Init+0x6b4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_DMA_Init+0x5ca>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_DMA_Init+0x5cc>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d032      	beq.n	8002666 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f001 fcdf 	bl	8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b80      	cmp	r3, #128	; 0x80
 800260c:	d102      	bne.n	8002614 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002628:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d010      	beq.n	8002654 <HAL_DMA_Init+0x624>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b08      	cmp	r3, #8
 8002638:	d80c      	bhi.n	8002654 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f001 fd5c 	bl	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e008      	b.n	8002666 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	a7fdabf8 	.word	0xa7fdabf8
 8002684:	cccccccd 	.word	0xcccccccd
 8002688:	40020010 	.word	0x40020010
 800268c:	40020028 	.word	0x40020028
 8002690:	40020040 	.word	0x40020040
 8002694:	40020058 	.word	0x40020058
 8002698:	40020070 	.word	0x40020070
 800269c:	40020088 	.word	0x40020088
 80026a0:	400200a0 	.word	0x400200a0
 80026a4:	400200b8 	.word	0x400200b8
 80026a8:	40020410 	.word	0x40020410
 80026ac:	40020428 	.word	0x40020428
 80026b0:	40020440 	.word	0x40020440
 80026b4:	40020458 	.word	0x40020458
 80026b8:	40020470 	.word	0x40020470
 80026bc:	40020488 	.word	0x40020488
 80026c0:	400204a0 	.word	0x400204a0
 80026c4:	400204b8 	.word	0x400204b8
 80026c8:	58025408 	.word	0x58025408
 80026cc:	5802541c 	.word	0x5802541c
 80026d0:	58025430 	.word	0x58025430
 80026d4:	58025444 	.word	0x58025444
 80026d8:	58025458 	.word	0x58025458
 80026dc:	5802546c 	.word	0x5802546c
 80026e0:	58025480 	.word	0x58025480
 80026e4:	58025494 	.word	0x58025494

080026e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e226      	b.n	8002b52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_DMA_Start_IT+0x2a>
 800270e:	2302      	movs	r3, #2
 8002710:	e21f      	b.n	8002b52 <HAL_DMA_Start_IT+0x46a>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	f040 820a 	bne.w	8002b3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a68      	ldr	r2, [pc, #416]	; (80028dc <HAL_DMA_Start_IT+0x1f4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d04a      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a66      	ldr	r2, [pc, #408]	; (80028e0 <HAL_DMA_Start_IT+0x1f8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d045      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a65      	ldr	r2, [pc, #404]	; (80028e4 <HAL_DMA_Start_IT+0x1fc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d040      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a63      	ldr	r2, [pc, #396]	; (80028e8 <HAL_DMA_Start_IT+0x200>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d03b      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a62      	ldr	r2, [pc, #392]	; (80028ec <HAL_DMA_Start_IT+0x204>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d036      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a60      	ldr	r2, [pc, #384]	; (80028f0 <HAL_DMA_Start_IT+0x208>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d031      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5f      	ldr	r2, [pc, #380]	; (80028f4 <HAL_DMA_Start_IT+0x20c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d02c      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5d      	ldr	r2, [pc, #372]	; (80028f8 <HAL_DMA_Start_IT+0x210>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d027      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5c      	ldr	r2, [pc, #368]	; (80028fc <HAL_DMA_Start_IT+0x214>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5a      	ldr	r2, [pc, #360]	; (8002900 <HAL_DMA_Start_IT+0x218>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01d      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a59      	ldr	r2, [pc, #356]	; (8002904 <HAL_DMA_Start_IT+0x21c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d018      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a57      	ldr	r2, [pc, #348]	; (8002908 <HAL_DMA_Start_IT+0x220>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a56      	ldr	r2, [pc, #344]	; (800290c <HAL_DMA_Start_IT+0x224>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a54      	ldr	r2, [pc, #336]	; (8002910 <HAL_DMA_Start_IT+0x228>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a53      	ldr	r2, [pc, #332]	; (8002914 <HAL_DMA_Start_IT+0x22c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_Start_IT+0xee>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a51      	ldr	r2, [pc, #324]	; (8002918 <HAL_DMA_Start_IT+0x230>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <HAL_DMA_Start_IT+0x100>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e007      	b.n	80027f8 <HAL_DMA_Start_IT+0x110>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f001 f906 	bl	8003a10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a34      	ldr	r2, [pc, #208]	; (80028dc <HAL_DMA_Start_IT+0x1f4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04a      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_DMA_Start_IT+0x1f8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d045      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_DMA_Start_IT+0x1fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d040      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a30      	ldr	r2, [pc, #192]	; (80028e8 <HAL_DMA_Start_IT+0x200>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03b      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_DMA_Start_IT+0x204>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d036      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <HAL_DMA_Start_IT+0x208>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d031      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <HAL_DMA_Start_IT+0x20c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02c      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <HAL_DMA_Start_IT+0x210>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d027      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a28      	ldr	r2, [pc, #160]	; (80028fc <HAL_DMA_Start_IT+0x214>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_DMA_Start_IT+0x218>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01d      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_DMA_Start_IT+0x21c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a24      	ldr	r2, [pc, #144]	; (8002908 <HAL_DMA_Start_IT+0x220>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_DMA_Start_IT+0x224>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	; (8002910 <HAL_DMA_Start_IT+0x228>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_DMA_Start_IT+0x22c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_Start_IT+0x1bc>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <HAL_DMA_Start_IT+0x230>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_Start_IT+0x1c0>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_DMA_Start_IT+0x1c2>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d036      	beq.n	800291c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 021e 	bic.w	r2, r3, #30
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0216 	orr.w	r2, r2, #22
 80028c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d03e      	beq.n	8002948 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0208 	orr.w	r2, r2, #8
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e035      	b.n	8002948 <HAL_DMA_Start_IT+0x260>
 80028dc:	40020010 	.word	0x40020010
 80028e0:	40020028 	.word	0x40020028
 80028e4:	40020040 	.word	0x40020040
 80028e8:	40020058 	.word	0x40020058
 80028ec:	40020070 	.word	0x40020070
 80028f0:	40020088 	.word	0x40020088
 80028f4:	400200a0 	.word	0x400200a0
 80028f8:	400200b8 	.word	0x400200b8
 80028fc:	40020410 	.word	0x40020410
 8002900:	40020428 	.word	0x40020428
 8002904:	40020440 	.word	0x40020440
 8002908:	40020458 	.word	0x40020458
 800290c:	40020470 	.word	0x40020470
 8002910:	40020488 	.word	0x40020488
 8002914:	400204a0 	.word	0x400204a0
 8002918:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 020e 	bic.w	r2, r3, #14
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 020a 	orr.w	r2, r2, #10
 800292e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0204 	orr.w	r2, r2, #4
 8002946:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a83      	ldr	r2, [pc, #524]	; (8002b5c <HAL_DMA_Start_IT+0x474>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d072      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a82      	ldr	r2, [pc, #520]	; (8002b60 <HAL_DMA_Start_IT+0x478>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d06d      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a80      	ldr	r2, [pc, #512]	; (8002b64 <HAL_DMA_Start_IT+0x47c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d068      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a7f      	ldr	r2, [pc, #508]	; (8002b68 <HAL_DMA_Start_IT+0x480>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d063      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a7d      	ldr	r2, [pc, #500]	; (8002b6c <HAL_DMA_Start_IT+0x484>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d05e      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7c      	ldr	r2, [pc, #496]	; (8002b70 <HAL_DMA_Start_IT+0x488>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d059      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7a      	ldr	r2, [pc, #488]	; (8002b74 <HAL_DMA_Start_IT+0x48c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d054      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a79      	ldr	r2, [pc, #484]	; (8002b78 <HAL_DMA_Start_IT+0x490>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04f      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a77      	ldr	r2, [pc, #476]	; (8002b7c <HAL_DMA_Start_IT+0x494>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d04a      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a76      	ldr	r2, [pc, #472]	; (8002b80 <HAL_DMA_Start_IT+0x498>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d045      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a74      	ldr	r2, [pc, #464]	; (8002b84 <HAL_DMA_Start_IT+0x49c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d040      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a73      	ldr	r2, [pc, #460]	; (8002b88 <HAL_DMA_Start_IT+0x4a0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d03b      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a71      	ldr	r2, [pc, #452]	; (8002b8c <HAL_DMA_Start_IT+0x4a4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d036      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a70      	ldr	r2, [pc, #448]	; (8002b90 <HAL_DMA_Start_IT+0x4a8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d031      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_DMA_Start_IT+0x4ac>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02c      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6d      	ldr	r2, [pc, #436]	; (8002b98 <HAL_DMA_Start_IT+0x4b0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d027      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6b      	ldr	r2, [pc, #428]	; (8002b9c <HAL_DMA_Start_IT+0x4b4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d022      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6a      	ldr	r2, [pc, #424]	; (8002ba0 <HAL_DMA_Start_IT+0x4b8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d01d      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a68      	ldr	r2, [pc, #416]	; (8002ba4 <HAL_DMA_Start_IT+0x4bc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d018      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a67      	ldr	r2, [pc, #412]	; (8002ba8 <HAL_DMA_Start_IT+0x4c0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a65      	ldr	r2, [pc, #404]	; (8002bac <HAL_DMA_Start_IT+0x4c4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a64      	ldr	r2, [pc, #400]	; (8002bb0 <HAL_DMA_Start_IT+0x4c8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a62      	ldr	r2, [pc, #392]	; (8002bb4 <HAL_DMA_Start_IT+0x4cc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_Start_IT+0x350>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a61      	ldr	r2, [pc, #388]	; (8002bb8 <HAL_DMA_Start_IT+0x4d0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <HAL_DMA_Start_IT+0x354>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_DMA_Start_IT+0x356>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01a      	beq.n	8002a78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a37      	ldr	r2, [pc, #220]	; (8002b5c <HAL_DMA_Start_IT+0x474>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a36      	ldr	r2, [pc, #216]	; (8002b60 <HAL_DMA_Start_IT+0x478>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_DMA_Start_IT+0x47c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a33      	ldr	r2, [pc, #204]	; (8002b68 <HAL_DMA_Start_IT+0x480>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a31      	ldr	r2, [pc, #196]	; (8002b6c <HAL_DMA_Start_IT+0x484>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a30      	ldr	r2, [pc, #192]	; (8002b70 <HAL_DMA_Start_IT+0x488>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <HAL_DMA_Start_IT+0x48c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2d      	ldr	r2, [pc, #180]	; (8002b78 <HAL_DMA_Start_IT+0x490>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_DMA_Start_IT+0x494>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <HAL_DMA_Start_IT+0x498>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <HAL_DMA_Start_IT+0x49c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_DMA_Start_IT+0x4a0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <HAL_DMA_Start_IT+0x4a4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_DMA_Start_IT+0x4a8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_DMA_Start_IT+0x4ac>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_Start_IT+0x430>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <HAL_DMA_Start_IT+0x4b0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <HAL_DMA_Start_IT+0x442>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e012      	b.n	8002b50 <HAL_DMA_Start_IT+0x468>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e009      	b.n	8002b50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40020010 	.word	0x40020010
 8002b60:	40020028 	.word	0x40020028
 8002b64:	40020040 	.word	0x40020040
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	40020070 	.word	0x40020070
 8002b70:	40020088 	.word	0x40020088
 8002b74:	400200a0 	.word	0x400200a0
 8002b78:	400200b8 	.word	0x400200b8
 8002b7c:	40020410 	.word	0x40020410
 8002b80:	40020428 	.word	0x40020428
 8002b84:	40020440 	.word	0x40020440
 8002b88:	40020458 	.word	0x40020458
 8002b8c:	40020470 	.word	0x40020470
 8002b90:	40020488 	.word	0x40020488
 8002b94:	400204a0 	.word	0x400204a0
 8002b98:	400204b8 	.word	0x400204b8
 8002b9c:	58025408 	.word	0x58025408
 8002ba0:	5802541c 	.word	0x5802541c
 8002ba4:	58025430 	.word	0x58025430
 8002ba8:	58025444 	.word	0x58025444
 8002bac:	58025458 	.word	0x58025458
 8002bb0:	5802546c 	.word	0x5802546c
 8002bb4:	58025480 	.word	0x58025480
 8002bb8:	58025494 	.word	0x58025494

08002bbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bc8:	4b67      	ldr	r3, [pc, #412]	; (8002d68 <HAL_DMA_IRQHandler+0x1ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a67      	ldr	r2, [pc, #412]	; (8002d6c <HAL_DMA_IRQHandler+0x1b0>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5f      	ldr	r2, [pc, #380]	; (8002d70 <HAL_DMA_IRQHandler+0x1b4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04a      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a5d      	ldr	r2, [pc, #372]	; (8002d74 <HAL_DMA_IRQHandler+0x1b8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d045      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a5c      	ldr	r2, [pc, #368]	; (8002d78 <HAL_DMA_IRQHandler+0x1bc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d040      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a5a      	ldr	r2, [pc, #360]	; (8002d7c <HAL_DMA_IRQHandler+0x1c0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d03b      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a59      	ldr	r2, [pc, #356]	; (8002d80 <HAL_DMA_IRQHandler+0x1c4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d036      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a57      	ldr	r2, [pc, #348]	; (8002d84 <HAL_DMA_IRQHandler+0x1c8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d031      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a56      	ldr	r2, [pc, #344]	; (8002d88 <HAL_DMA_IRQHandler+0x1cc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d02c      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a54      	ldr	r2, [pc, #336]	; (8002d8c <HAL_DMA_IRQHandler+0x1d0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d027      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a53      	ldr	r2, [pc, #332]	; (8002d90 <HAL_DMA_IRQHandler+0x1d4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <HAL_DMA_IRQHandler+0x1d8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a50      	ldr	r2, [pc, #320]	; (8002d98 <HAL_DMA_IRQHandler+0x1dc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d018      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4e      	ldr	r2, [pc, #312]	; (8002d9c <HAL_DMA_IRQHandler+0x1e0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a4d      	ldr	r2, [pc, #308]	; (8002da0 <HAL_DMA_IRQHandler+0x1e4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a4b      	ldr	r2, [pc, #300]	; (8002da4 <HAL_DMA_IRQHandler+0x1e8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a4a      	ldr	r2, [pc, #296]	; (8002da8 <HAL_DMA_IRQHandler+0x1ec>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xd2>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_DMA_IRQHandler+0x1f0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_DMA_IRQHandler+0xd6>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_IRQHandler+0xd8>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 842b 	beq.w	80034f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80a2 	beq.w	8002df4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2e      	ldr	r2, [pc, #184]	; (8002d70 <HAL_DMA_IRQHandler+0x1b4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d04a      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2d      	ldr	r2, [pc, #180]	; (8002d74 <HAL_DMA_IRQHandler+0x1b8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d045      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <HAL_DMA_IRQHandler+0x1bc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d040      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_DMA_IRQHandler+0x1c0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d03b      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <HAL_DMA_IRQHandler+0x1c4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d036      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_DMA_IRQHandler+0x1c8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d031      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_DMA_IRQHandler+0x1cc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02c      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a24      	ldr	r2, [pc, #144]	; (8002d8c <HAL_DMA_IRQHandler+0x1d0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d027      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_DMA_IRQHandler+0x1d4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d022      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <HAL_DMA_IRQHandler+0x1d8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d01d      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_DMA_IRQHandler+0x1dc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d018      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <HAL_DMA_IRQHandler+0x1e0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_DMA_IRQHandler+0x1e4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_DMA_IRQHandler+0x1e8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_DMA_IRQHandler+0x1ec>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x194>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_DMA_IRQHandler+0x1f0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d12f      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x1f4>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf14      	ite	ne
 8002d5e:	2301      	movne	r3, #1
 8002d60:	2300      	moveq	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	e02e      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x208>
 8002d66:	bf00      	nop
 8002d68:	24000000 	.word	0x24000000
 8002d6c:	1b4e81b5 	.word	0x1b4e81b5
 8002d70:	40020010 	.word	0x40020010
 8002d74:	40020028 	.word	0x40020028
 8002d78:	40020040 	.word	0x40020040
 8002d7c:	40020058 	.word	0x40020058
 8002d80:	40020070 	.word	0x40020070
 8002d84:	40020088 	.word	0x40020088
 8002d88:	400200a0 	.word	0x400200a0
 8002d8c:	400200b8 	.word	0x400200b8
 8002d90:	40020410 	.word	0x40020410
 8002d94:	40020428 	.word	0x40020428
 8002d98:	40020440 	.word	0x40020440
 8002d9c:	40020458 	.word	0x40020458
 8002da0:	40020470 	.word	0x40020470
 8002da4:	40020488 	.word	0x40020488
 8002da8:	400204a0 	.word	0x400204a0
 8002dac:	400204b8 	.word	0x400204b8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d015      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0204 	bic.w	r2, r2, #4
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2208      	movs	r2, #8
 8002de2:	409a      	lsls	r2, r3
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d06e      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_DMA_IRQHandler+0x3f8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d04a      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a67      	ldr	r2, [pc, #412]	; (8002fb8 <HAL_DMA_IRQHandler+0x3fc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d045      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a66      	ldr	r2, [pc, #408]	; (8002fbc <HAL_DMA_IRQHandler+0x400>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d040      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a64      	ldr	r2, [pc, #400]	; (8002fc0 <HAL_DMA_IRQHandler+0x404>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d03b      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a63      	ldr	r2, [pc, #396]	; (8002fc4 <HAL_DMA_IRQHandler+0x408>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d036      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a61      	ldr	r2, [pc, #388]	; (8002fc8 <HAL_DMA_IRQHandler+0x40c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d031      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a60      	ldr	r2, [pc, #384]	; (8002fcc <HAL_DMA_IRQHandler+0x410>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d02c      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a5e      	ldr	r2, [pc, #376]	; (8002fd0 <HAL_DMA_IRQHandler+0x414>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d027      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5d      	ldr	r2, [pc, #372]	; (8002fd4 <HAL_DMA_IRQHandler+0x418>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d022      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5b      	ldr	r2, [pc, #364]	; (8002fd8 <HAL_DMA_IRQHandler+0x41c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01d      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a5a      	ldr	r2, [pc, #360]	; (8002fdc <HAL_DMA_IRQHandler+0x420>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <HAL_DMA_IRQHandler+0x424>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a57      	ldr	r2, [pc, #348]	; (8002fe4 <HAL_DMA_IRQHandler+0x428>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a55      	ldr	r2, [pc, #340]	; (8002fe8 <HAL_DMA_IRQHandler+0x42c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a54      	ldr	r2, [pc, #336]	; (8002fec <HAL_DMA_IRQHandler+0x430>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2ee>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_DMA_IRQHandler+0x434>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x304>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e003      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x30c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f043 0202 	orr.w	r2, r3, #2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 808f 	beq.w	800301c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2c      	ldr	r2, [pc, #176]	; (8002fb4 <HAL_DMA_IRQHandler+0x3f8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d04a      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2a      	ldr	r2, [pc, #168]	; (8002fb8 <HAL_DMA_IRQHandler+0x3fc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d045      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a29      	ldr	r2, [pc, #164]	; (8002fbc <HAL_DMA_IRQHandler+0x400>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d040      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a27      	ldr	r2, [pc, #156]	; (8002fc0 <HAL_DMA_IRQHandler+0x404>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d03b      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <HAL_DMA_IRQHandler+0x408>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d036      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a24      	ldr	r2, [pc, #144]	; (8002fc8 <HAL_DMA_IRQHandler+0x40c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a23      	ldr	r2, [pc, #140]	; (8002fcc <HAL_DMA_IRQHandler+0x410>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d02c      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <HAL_DMA_IRQHandler+0x414>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d027      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <HAL_DMA_IRQHandler+0x418>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_DMA_IRQHandler+0x41c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01d      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_DMA_IRQHandler+0x420>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d018      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <HAL_DMA_IRQHandler+0x424>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_DMA_IRQHandler+0x428>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00e      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_DMA_IRQHandler+0x42c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <HAL_DMA_IRQHandler+0x430>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x3e2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_DMA_IRQHandler+0x434>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d12a      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x438>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e023      	b.n	8002ffc <HAL_DMA_IRQHandler+0x440>
 8002fb4:	40020010 	.word	0x40020010
 8002fb8:	40020028 	.word	0x40020028
 8002fbc:	40020040 	.word	0x40020040
 8002fc0:	40020058 	.word	0x40020058
 8002fc4:	40020070 	.word	0x40020070
 8002fc8:	40020088 	.word	0x40020088
 8002fcc:	400200a0 	.word	0x400200a0
 8002fd0:	400200b8 	.word	0x400200b8
 8002fd4:	40020410 	.word	0x40020410
 8002fd8:	40020428 	.word	0x40020428
 8002fdc:	40020440 	.word	0x40020440
 8002fe0:	40020458 	.word	0x40020458
 8002fe4:	40020470 	.word	0x40020470
 8002fe8:	40020488 	.word	0x40020488
 8002fec:	400204a0 	.word	0x400204a0
 8002ff0:	400204b8 	.word	0x400204b8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00d      	beq.n	800301c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2204      	movs	r2, #4
 800300a:	409a      	lsls	r2, r3
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2210      	movs	r2, #16
 8003026:	409a      	lsls	r2, r3
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80a6 	beq.w	800317e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a85      	ldr	r2, [pc, #532]	; (800324c <HAL_DMA_IRQHandler+0x690>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04a      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a83      	ldr	r2, [pc, #524]	; (8003250 <HAL_DMA_IRQHandler+0x694>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d045      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a82      	ldr	r2, [pc, #520]	; (8003254 <HAL_DMA_IRQHandler+0x698>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d040      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a80      	ldr	r2, [pc, #512]	; (8003258 <HAL_DMA_IRQHandler+0x69c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03b      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7f      	ldr	r2, [pc, #508]	; (800325c <HAL_DMA_IRQHandler+0x6a0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d036      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a7d      	ldr	r2, [pc, #500]	; (8003260 <HAL_DMA_IRQHandler+0x6a4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d031      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a7c      	ldr	r2, [pc, #496]	; (8003264 <HAL_DMA_IRQHandler+0x6a8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d02c      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a7a      	ldr	r2, [pc, #488]	; (8003268 <HAL_DMA_IRQHandler+0x6ac>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d027      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a79      	ldr	r2, [pc, #484]	; (800326c <HAL_DMA_IRQHandler+0x6b0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a77      	ldr	r2, [pc, #476]	; (8003270 <HAL_DMA_IRQHandler+0x6b4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01d      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a76      	ldr	r2, [pc, #472]	; (8003274 <HAL_DMA_IRQHandler+0x6b8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d018      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a74      	ldr	r2, [pc, #464]	; (8003278 <HAL_DMA_IRQHandler+0x6bc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a73      	ldr	r2, [pc, #460]	; (800327c <HAL_DMA_IRQHandler+0x6c0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a71      	ldr	r2, [pc, #452]	; (8003280 <HAL_DMA_IRQHandler+0x6c4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a70      	ldr	r2, [pc, #448]	; (8003284 <HAL_DMA_IRQHandler+0x6c8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x516>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a6e      	ldr	r2, [pc, #440]	; (8003288 <HAL_DMA_IRQHandler+0x6cc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10a      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x52c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e009      	b.n	80030fc <HAL_DMA_IRQHandler+0x540>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d03e      	beq.n	800317e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	2210      	movs	r2, #16
 800310a:	409a      	lsls	r2, r3
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d018      	beq.n	8003150 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d108      	bne.n	800313e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d024      	beq.n	800317e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e01f      	b.n	800317e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
 800314e:	e016      	b.n	800317e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d107      	bne.n	800316e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0208 	bic.w	r2, r2, #8
 800316c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2220      	movs	r2, #32
 8003188:	409a      	lsls	r2, r3
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8110 	beq.w	80033b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2c      	ldr	r2, [pc, #176]	; (800324c <HAL_DMA_IRQHandler+0x690>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04a      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <HAL_DMA_IRQHandler+0x694>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d045      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a29      	ldr	r2, [pc, #164]	; (8003254 <HAL_DMA_IRQHandler+0x698>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d040      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_DMA_IRQHandler+0x69c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d03b      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <HAL_DMA_IRQHandler+0x6a0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d036      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a25      	ldr	r2, [pc, #148]	; (8003260 <HAL_DMA_IRQHandler+0x6a4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d031      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a23      	ldr	r2, [pc, #140]	; (8003264 <HAL_DMA_IRQHandler+0x6a8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02c      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a22      	ldr	r2, [pc, #136]	; (8003268 <HAL_DMA_IRQHandler+0x6ac>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d027      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a20      	ldr	r2, [pc, #128]	; (800326c <HAL_DMA_IRQHandler+0x6b0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d022      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <HAL_DMA_IRQHandler+0x6b4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d01d      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <HAL_DMA_IRQHandler+0x6b8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d018      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <HAL_DMA_IRQHandler+0x6bc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1a      	ldr	r2, [pc, #104]	; (800327c <HAL_DMA_IRQHandler+0x6c0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_DMA_IRQHandler+0x6c4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a17      	ldr	r2, [pc, #92]	; (8003284 <HAL_DMA_IRQHandler+0x6c8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_DMA_IRQHandler+0x678>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_DMA_IRQHandler+0x6cc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d12b      	bne.n	800328c <HAL_DMA_IRQHandler+0x6d0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	e02a      	b.n	80032a0 <HAL_DMA_IRQHandler+0x6e4>
 800324a:	bf00      	nop
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8087 	beq.w	80033b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2220      	movs	r2, #32
 80032b0:	409a      	lsls	r2, r3
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d139      	bne.n	8003336 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0216 	bic.w	r2, r2, #22
 80032d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <HAL_DMA_IRQHandler+0x736>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0208 	bic.w	r2, r2, #8
 8003300:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	223f      	movs	r2, #63	; 0x3f
 800330c:	409a      	lsls	r2, r3
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 834a 	beq.w	80039c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
          }
          return;
 8003334:	e344      	b.n	80039c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d018      	beq.n	8003376 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02c      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
 8003362:	e027      	b.n	80033b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d023      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	e01e      	b.n	80033b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10f      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0210 	bic.w	r2, r2, #16
 8003392:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8306 	beq.w	80039ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8088 	beq.w	80034dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2204      	movs	r2, #4
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <HAL_DMA_IRQHandler+0xa08>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d04a      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a79      	ldr	r2, [pc, #484]	; (80035c8 <HAL_DMA_IRQHandler+0xa0c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d045      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a77      	ldr	r2, [pc, #476]	; (80035cc <HAL_DMA_IRQHandler+0xa10>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a76      	ldr	r2, [pc, #472]	; (80035d0 <HAL_DMA_IRQHandler+0xa14>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d03b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a74      	ldr	r2, [pc, #464]	; (80035d4 <HAL_DMA_IRQHandler+0xa18>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a73      	ldr	r2, [pc, #460]	; (80035d8 <HAL_DMA_IRQHandler+0xa1c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d031      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a71      	ldr	r2, [pc, #452]	; (80035dc <HAL_DMA_IRQHandler+0xa20>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a70      	ldr	r2, [pc, #448]	; (80035e0 <HAL_DMA_IRQHandler+0xa24>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_DMA_IRQHandler+0xa28>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d022      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6d      	ldr	r2, [pc, #436]	; (80035e8 <HAL_DMA_IRQHandler+0xa2c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a6b      	ldr	r2, [pc, #428]	; (80035ec <HAL_DMA_IRQHandler+0xa30>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <HAL_DMA_IRQHandler+0xa34>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d013      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_DMA_IRQHandler+0xa38>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a67      	ldr	r2, [pc, #412]	; (80035f8 <HAL_DMA_IRQHandler+0xa3c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a65      	ldr	r2, [pc, #404]	; (80035fc <HAL_DMA_IRQHandler+0xa40>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_DMA_IRQHandler+0x8b8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a64      	ldr	r2, [pc, #400]	; (8003600 <HAL_DMA_IRQHandler+0xa44>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d108      	bne.n	8003486 <HAL_DMA_IRQHandler+0x8ca>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e007      	b.n	8003496 <HAL_DMA_IRQHandler+0x8da>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3301      	adds	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	429a      	cmp	r2, r3
 80034a0:	d307      	bcc.n	80034b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f2      	bne.n	8003496 <HAL_DMA_IRQHandler+0x8da>
 80034b0:	e000      	b.n	80034b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80034b2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2203      	movs	r2, #3
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80034d2:	e003      	b.n	80034dc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8272 	beq.w	80039ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
 80034ee:	e26c      	b.n	80039ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a43      	ldr	r2, [pc, #268]	; (8003604 <HAL_DMA_IRQHandler+0xa48>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d022      	beq.n	8003540 <HAL_DMA_IRQHandler+0x984>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a42      	ldr	r2, [pc, #264]	; (8003608 <HAL_DMA_IRQHandler+0xa4c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d01d      	beq.n	8003540 <HAL_DMA_IRQHandler+0x984>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a40      	ldr	r2, [pc, #256]	; (800360c <HAL_DMA_IRQHandler+0xa50>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d018      	beq.n	8003540 <HAL_DMA_IRQHandler+0x984>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a3f      	ldr	r2, [pc, #252]	; (8003610 <HAL_DMA_IRQHandler+0xa54>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_DMA_IRQHandler+0x984>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3d      	ldr	r2, [pc, #244]	; (8003614 <HAL_DMA_IRQHandler+0xa58>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_DMA_IRQHandler+0x984>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <HAL_DMA_IRQHandler+0xa5c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_DMA_IRQHandler+0x984>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a3a      	ldr	r2, [pc, #232]	; (800361c <HAL_DMA_IRQHandler+0xa60>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_DMA_IRQHandler+0x984>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a39      	ldr	r2, [pc, #228]	; (8003620 <HAL_DMA_IRQHandler+0xa64>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_DMA_IRQHandler+0x988>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_DMA_IRQHandler+0x98a>
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 823f 	beq.w	80039ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2204      	movs	r2, #4
 800355e:	409a      	lsls	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80cd 	beq.w	8003704 <HAL_DMA_IRQHandler+0xb48>
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80c7 	beq.w	8003704 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	2204      	movs	r2, #4
 8003580:	409a      	lsls	r2, r3
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d049      	beq.n	8003624 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8210 	beq.w	80039c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ac:	e20a      	b.n	80039c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8206 	beq.w	80039c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035c0:	e200      	b.n	80039c4 <HAL_DMA_IRQHandler+0xe08>
 80035c2:	bf00      	nop
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
 8003604:	58025408 	.word	0x58025408
 8003608:	5802541c 	.word	0x5802541c
 800360c:	58025430 	.word	0x58025430
 8003610:	58025444 	.word	0x58025444
 8003614:	58025458 	.word	0x58025458
 8003618:	5802546c 	.word	0x5802546c
 800361c:	58025480 	.word	0x58025480
 8003620:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	d160      	bne.n	80036f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a8c      	ldr	r2, [pc, #560]	; (8003864 <HAL_DMA_IRQHandler+0xca8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d04a      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a8a      	ldr	r2, [pc, #552]	; (8003868 <HAL_DMA_IRQHandler+0xcac>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d045      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a89      	ldr	r2, [pc, #548]	; (800386c <HAL_DMA_IRQHandler+0xcb0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d040      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a87      	ldr	r2, [pc, #540]	; (8003870 <HAL_DMA_IRQHandler+0xcb4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d03b      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a86      	ldr	r2, [pc, #536]	; (8003874 <HAL_DMA_IRQHandler+0xcb8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d036      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a84      	ldr	r2, [pc, #528]	; (8003878 <HAL_DMA_IRQHandler+0xcbc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d031      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a83      	ldr	r2, [pc, #524]	; (800387c <HAL_DMA_IRQHandler+0xcc0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d02c      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a81      	ldr	r2, [pc, #516]	; (8003880 <HAL_DMA_IRQHandler+0xcc4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d027      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a80      	ldr	r2, [pc, #512]	; (8003884 <HAL_DMA_IRQHandler+0xcc8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a7e      	ldr	r2, [pc, #504]	; (8003888 <HAL_DMA_IRQHandler+0xccc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01d      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7d      	ldr	r2, [pc, #500]	; (800388c <HAL_DMA_IRQHandler+0xcd0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d018      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7b      	ldr	r2, [pc, #492]	; (8003890 <HAL_DMA_IRQHandler+0xcd4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7a      	ldr	r2, [pc, #488]	; (8003894 <HAL_DMA_IRQHandler+0xcd8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a78      	ldr	r2, [pc, #480]	; (8003898 <HAL_DMA_IRQHandler+0xcdc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a77      	ldr	r2, [pc, #476]	; (800389c <HAL_DMA_IRQHandler+0xce0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_DMA_IRQHandler+0xb12>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a75      	ldr	r2, [pc, #468]	; (80038a0 <HAL_DMA_IRQHandler+0xce4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <HAL_DMA_IRQHandler+0xb24>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0208 	bic.w	r2, r2, #8
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e007      	b.n	80036f0 <HAL_DMA_IRQHandler+0xb34>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0204 	bic.w	r2, r2, #4
 80036ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8165 	beq.w	80039c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003702:	e15f      	b.n	80039c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2202      	movs	r2, #2
 800370e:	409a      	lsls	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80c5 	beq.w	80038a4 <HAL_DMA_IRQHandler+0xce8>
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80bf 	beq.w	80038a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2202      	movs	r2, #2
 8003730:	409a      	lsls	r2, r3
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d018      	beq.n	8003772 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 813a 	beq.w	80039c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800375c:	e134      	b.n	80039c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8130 	beq.w	80039c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003770:	e12a      	b.n	80039c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d168      	bne.n	800384e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a38      	ldr	r2, [pc, #224]	; (8003864 <HAL_DMA_IRQHandler+0xca8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04a      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a37      	ldr	r2, [pc, #220]	; (8003868 <HAL_DMA_IRQHandler+0xcac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d045      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a35      	ldr	r2, [pc, #212]	; (800386c <HAL_DMA_IRQHandler+0xcb0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d040      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a34      	ldr	r2, [pc, #208]	; (8003870 <HAL_DMA_IRQHandler+0xcb4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d03b      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a32      	ldr	r2, [pc, #200]	; (8003874 <HAL_DMA_IRQHandler+0xcb8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d036      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a31      	ldr	r2, [pc, #196]	; (8003878 <HAL_DMA_IRQHandler+0xcbc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d031      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2f      	ldr	r2, [pc, #188]	; (800387c <HAL_DMA_IRQHandler+0xcc0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02c      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2e      	ldr	r2, [pc, #184]	; (8003880 <HAL_DMA_IRQHandler+0xcc4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d027      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <HAL_DMA_IRQHandler+0xcc8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <HAL_DMA_IRQHandler+0xccc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01d      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a29      	ldr	r2, [pc, #164]	; (800388c <HAL_DMA_IRQHandler+0xcd0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a28      	ldr	r2, [pc, #160]	; (8003890 <HAL_DMA_IRQHandler+0xcd4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <HAL_DMA_IRQHandler+0xcd8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a25      	ldr	r2, [pc, #148]	; (8003898 <HAL_DMA_IRQHandler+0xcdc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a23      	ldr	r2, [pc, #140]	; (800389c <HAL_DMA_IRQHandler+0xce0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_DMA_IRQHandler+0xc60>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_DMA_IRQHandler+0xce4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <HAL_DMA_IRQHandler+0xc72>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0214 	bic.w	r2, r2, #20
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e007      	b.n	800383e <HAL_DMA_IRQHandler+0xc82>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 020a 	bic.w	r2, r2, #10
 800383c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80b8 	beq.w	80039c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003860:	e0b2      	b.n	80039c8 <HAL_DMA_IRQHandler+0xe0c>
 8003862:	bf00      	nop
 8003864:	40020010 	.word	0x40020010
 8003868:	40020028 	.word	0x40020028
 800386c:	40020040 	.word	0x40020040
 8003870:	40020058 	.word	0x40020058
 8003874:	40020070 	.word	0x40020070
 8003878:	40020088 	.word	0x40020088
 800387c:	400200a0 	.word	0x400200a0
 8003880:	400200b8 	.word	0x400200b8
 8003884:	40020410 	.word	0x40020410
 8003888:	40020428 	.word	0x40020428
 800388c:	40020440 	.word	0x40020440
 8003890:	40020458 	.word	0x40020458
 8003894:	40020470 	.word	0x40020470
 8003898:	40020488 	.word	0x40020488
 800389c:	400204a0 	.word	0x400204a0
 80038a0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2208      	movs	r2, #8
 80038ae:	409a      	lsls	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8088 	beq.w	80039ca <HAL_DMA_IRQHandler+0xe0e>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8082 	beq.w	80039ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a41      	ldr	r2, [pc, #260]	; (80039d0 <HAL_DMA_IRQHandler+0xe14>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d04a      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <HAL_DMA_IRQHandler+0xe18>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d045      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a3e      	ldr	r2, [pc, #248]	; (80039d8 <HAL_DMA_IRQHandler+0xe1c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d040      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <HAL_DMA_IRQHandler+0xe20>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d03b      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a3b      	ldr	r2, [pc, #236]	; (80039e0 <HAL_DMA_IRQHandler+0xe24>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d036      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a39      	ldr	r2, [pc, #228]	; (80039e4 <HAL_DMA_IRQHandler+0xe28>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d031      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a38      	ldr	r2, [pc, #224]	; (80039e8 <HAL_DMA_IRQHandler+0xe2c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d02c      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a36      	ldr	r2, [pc, #216]	; (80039ec <HAL_DMA_IRQHandler+0xe30>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d027      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a35      	ldr	r2, [pc, #212]	; (80039f0 <HAL_DMA_IRQHandler+0xe34>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d022      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a33      	ldr	r2, [pc, #204]	; (80039f4 <HAL_DMA_IRQHandler+0xe38>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01d      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a32      	ldr	r2, [pc, #200]	; (80039f8 <HAL_DMA_IRQHandler+0xe3c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d018      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a30      	ldr	r2, [pc, #192]	; (80039fc <HAL_DMA_IRQHandler+0xe40>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2f      	ldr	r2, [pc, #188]	; (8003a00 <HAL_DMA_IRQHandler+0xe44>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00e      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <HAL_DMA_IRQHandler+0xe48>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d009      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2c      	ldr	r2, [pc, #176]	; (8003a08 <HAL_DMA_IRQHandler+0xe4c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d004      	beq.n	8003966 <HAL_DMA_IRQHandler+0xdaa>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <HAL_DMA_IRQHandler+0xe50>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <HAL_DMA_IRQHandler+0xdbc>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 021c 	bic.w	r2, r2, #28
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e007      	b.n	8003988 <HAL_DMA_IRQHandler+0xdcc>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 020e 	bic.w	r2, r2, #14
 8003986:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	2201      	movs	r2, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
 80039be:	e004      	b.n	80039ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80039c0:	bf00      	nop
 80039c2:	e002      	b.n	80039ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40020010 	.word	0x40020010
 80039d4:	40020028 	.word	0x40020028
 80039d8:	40020040 	.word	0x40020040
 80039dc:	40020058 	.word	0x40020058
 80039e0:	40020070 	.word	0x40020070
 80039e4:	40020088 	.word	0x40020088
 80039e8:	400200a0 	.word	0x400200a0
 80039ec:	400200b8 	.word	0x400200b8
 80039f0:	40020410 	.word	0x40020410
 80039f4:	40020428 	.word	0x40020428
 80039f8:	40020440 	.word	0x40020440
 80039fc:	40020458 	.word	0x40020458
 8003a00:	40020470 	.word	0x40020470
 8003a04:	40020488 	.word	0x40020488
 8003a08:	400204a0 	.word	0x400204a0
 8003a0c:	400204b8 	.word	0x400204b8

08003a10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a84      	ldr	r2, [pc, #528]	; (8003c40 <DMA_SetConfig+0x230>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d072      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a82      	ldr	r2, [pc, #520]	; (8003c44 <DMA_SetConfig+0x234>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d06d      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a81      	ldr	r2, [pc, #516]	; (8003c48 <DMA_SetConfig+0x238>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d068      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <DMA_SetConfig+0x23c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d063      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7e      	ldr	r2, [pc, #504]	; (8003c50 <DMA_SetConfig+0x240>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d05e      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7c      	ldr	r2, [pc, #496]	; (8003c54 <DMA_SetConfig+0x244>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d059      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7b      	ldr	r2, [pc, #492]	; (8003c58 <DMA_SetConfig+0x248>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d054      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a79      	ldr	r2, [pc, #484]	; (8003c5c <DMA_SetConfig+0x24c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d04f      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a78      	ldr	r2, [pc, #480]	; (8003c60 <DMA_SetConfig+0x250>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d04a      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a76      	ldr	r2, [pc, #472]	; (8003c64 <DMA_SetConfig+0x254>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d045      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <DMA_SetConfig+0x258>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d040      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <DMA_SetConfig+0x25c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d03b      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a72      	ldr	r2, [pc, #456]	; (8003c70 <DMA_SetConfig+0x260>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d036      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a70      	ldr	r2, [pc, #448]	; (8003c74 <DMA_SetConfig+0x264>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d031      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6f      	ldr	r2, [pc, #444]	; (8003c78 <DMA_SetConfig+0x268>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d02c      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6d      	ldr	r2, [pc, #436]	; (8003c7c <DMA_SetConfig+0x26c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d027      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6c      	ldr	r2, [pc, #432]	; (8003c80 <DMA_SetConfig+0x270>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	; (8003c84 <DMA_SetConfig+0x274>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01d      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a69      	ldr	r2, [pc, #420]	; (8003c88 <DMA_SetConfig+0x278>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a67      	ldr	r2, [pc, #412]	; (8003c8c <DMA_SetConfig+0x27c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a66      	ldr	r2, [pc, #408]	; (8003c90 <DMA_SetConfig+0x280>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a64      	ldr	r2, [pc, #400]	; (8003c94 <DMA_SetConfig+0x284>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a63      	ldr	r2, [pc, #396]	; (8003c98 <DMA_SetConfig+0x288>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a61      	ldr	r2, [pc, #388]	; (8003c9c <DMA_SetConfig+0x28c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <DMA_SetConfig+0x10e>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <DMA_SetConfig+0x110>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a3e      	ldr	r2, [pc, #248]	; (8003c40 <DMA_SetConfig+0x230>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d04a      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a3d      	ldr	r2, [pc, #244]	; (8003c44 <DMA_SetConfig+0x234>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d045      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a3b      	ldr	r2, [pc, #236]	; (8003c48 <DMA_SetConfig+0x238>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d040      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a3a      	ldr	r2, [pc, #232]	; (8003c4c <DMA_SetConfig+0x23c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d03b      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a38      	ldr	r2, [pc, #224]	; (8003c50 <DMA_SetConfig+0x240>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d036      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a37      	ldr	r2, [pc, #220]	; (8003c54 <DMA_SetConfig+0x244>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d031      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a35      	ldr	r2, [pc, #212]	; (8003c58 <DMA_SetConfig+0x248>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d02c      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <DMA_SetConfig+0x24c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d027      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a32      	ldr	r2, [pc, #200]	; (8003c60 <DMA_SetConfig+0x250>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d022      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a31      	ldr	r2, [pc, #196]	; (8003c64 <DMA_SetConfig+0x254>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01d      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2f      	ldr	r2, [pc, #188]	; (8003c68 <DMA_SetConfig+0x258>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2e      	ldr	r2, [pc, #184]	; (8003c6c <DMA_SetConfig+0x25c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2c      	ldr	r2, [pc, #176]	; (8003c70 <DMA_SetConfig+0x260>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	; (8003c74 <DMA_SetConfig+0x264>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <DMA_SetConfig+0x268>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <DMA_SetConfig+0x26c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <DMA_SetConfig+0x1d4>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <DMA_SetConfig+0x1d6>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d05a      	beq.n	8003ca0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	223f      	movs	r2, #63	; 0x3f
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d108      	bne.n	8003c2c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c2a:	e087      	b.n	8003d3c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
}
 8003c3c:	e07e      	b.n	8003d3c <DMA_SetConfig+0x32c>
 8003c3e:	bf00      	nop
 8003c40:	40020010 	.word	0x40020010
 8003c44:	40020028 	.word	0x40020028
 8003c48:	40020040 	.word	0x40020040
 8003c4c:	40020058 	.word	0x40020058
 8003c50:	40020070 	.word	0x40020070
 8003c54:	40020088 	.word	0x40020088
 8003c58:	400200a0 	.word	0x400200a0
 8003c5c:	400200b8 	.word	0x400200b8
 8003c60:	40020410 	.word	0x40020410
 8003c64:	40020428 	.word	0x40020428
 8003c68:	40020440 	.word	0x40020440
 8003c6c:	40020458 	.word	0x40020458
 8003c70:	40020470 	.word	0x40020470
 8003c74:	40020488 	.word	0x40020488
 8003c78:	400204a0 	.word	0x400204a0
 8003c7c:	400204b8 	.word	0x400204b8
 8003c80:	58025408 	.word	0x58025408
 8003c84:	5802541c 	.word	0x5802541c
 8003c88:	58025430 	.word	0x58025430
 8003c8c:	58025444 	.word	0x58025444
 8003c90:	58025458 	.word	0x58025458
 8003c94:	5802546c 	.word	0x5802546c
 8003c98:	58025480 	.word	0x58025480
 8003c9c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <DMA_SetConfig+0x338>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d022      	beq.n	8003cf0 <DMA_SetConfig+0x2e0>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <DMA_SetConfig+0x33c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01d      	beq.n	8003cf0 <DMA_SetConfig+0x2e0>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <DMA_SetConfig+0x340>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <DMA_SetConfig+0x2e0>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <DMA_SetConfig+0x344>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <DMA_SetConfig+0x2e0>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <DMA_SetConfig+0x348>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <DMA_SetConfig+0x2e0>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a21      	ldr	r2, [pc, #132]	; (8003d5c <DMA_SetConfig+0x34c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <DMA_SetConfig+0x2e0>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <DMA_SetConfig+0x350>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <DMA_SetConfig+0x2e0>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <DMA_SetConfig+0x354>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <DMA_SetConfig+0x2e4>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <DMA_SetConfig+0x2e6>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d020      	beq.n	8003d3c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2201      	movs	r2, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d108      	bne.n	8003d2c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	60da      	str	r2, [r3, #12]
}
 8003d2a:	e007      	b.n	8003d3c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	60da      	str	r2, [r3, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	58025408 	.word	0x58025408
 8003d4c:	5802541c 	.word	0x5802541c
 8003d50:	58025430 	.word	0x58025430
 8003d54:	58025444 	.word	0x58025444
 8003d58:	58025458 	.word	0x58025458
 8003d5c:	5802546c 	.word	0x5802546c
 8003d60:	58025480 	.word	0x58025480
 8003d64:	58025494 	.word	0x58025494

08003d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a42      	ldr	r2, [pc, #264]	; (8003e80 <DMA_CalcBaseAndBitshift+0x118>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d04a      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a41      	ldr	r2, [pc, #260]	; (8003e84 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d045      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <DMA_CalcBaseAndBitshift+0x120>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d040      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3e      	ldr	r2, [pc, #248]	; (8003e8c <DMA_CalcBaseAndBitshift+0x124>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d03b      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <DMA_CalcBaseAndBitshift+0x128>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d036      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <DMA_CalcBaseAndBitshift+0x12c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d031      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a39      	ldr	r2, [pc, #228]	; (8003e98 <DMA_CalcBaseAndBitshift+0x130>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a38      	ldr	r2, [pc, #224]	; (8003e9c <DMA_CalcBaseAndBitshift+0x134>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d027      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a36      	ldr	r2, [pc, #216]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x138>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a35      	ldr	r2, [pc, #212]	; (8003ea4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01d      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a33      	ldr	r2, [pc, #204]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x140>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a32      	ldr	r2, [pc, #200]	; (8003eac <DMA_CalcBaseAndBitshift+0x144>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a30      	ldr	r2, [pc, #192]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x148>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x150>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <DMA_CalcBaseAndBitshift+0x154>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <DMA_CalcBaseAndBitshift+0xac>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <DMA_CalcBaseAndBitshift+0xae>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d024      	beq.n	8003e64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3b10      	subs	r3, #16
 8003e22:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x158>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d908      	bls.n	8003e54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x160>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	1d1a      	adds	r2, r3, #4
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	659a      	str	r2, [r3, #88]	; 0x58
 8003e52:	e00d      	b.n	8003e70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x160>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6593      	str	r3, [r2, #88]	; 0x58
 8003e62:	e005      	b.n	8003e70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40020010 	.word	0x40020010
 8003e84:	40020028 	.word	0x40020028
 8003e88:	40020040 	.word	0x40020040
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	40020070 	.word	0x40020070
 8003e94:	40020088 	.word	0x40020088
 8003e98:	400200a0 	.word	0x400200a0
 8003e9c:	400200b8 	.word	0x400200b8
 8003ea0:	40020410 	.word	0x40020410
 8003ea4:	40020428 	.word	0x40020428
 8003ea8:	40020440 	.word	0x40020440
 8003eac:	40020458 	.word	0x40020458
 8003eb0:	40020470 	.word	0x40020470
 8003eb4:	40020488 	.word	0x40020488
 8003eb8:	400204a0 	.word	0x400204a0
 8003ebc:	400204b8 	.word	0x400204b8
 8003ec0:	aaaaaaab 	.word	0xaaaaaaab
 8003ec4:	080169f8 	.word	0x080169f8
 8003ec8:	fffffc00 	.word	0xfffffc00

08003ecc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d120      	bne.n	8003f22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d858      	bhi.n	8003f9a <DMA_CheckFifoParam+0xce>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <DMA_CheckFifoParam+0x24>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f13 	.word	0x08003f13
 8003ef8:	08003f01 	.word	0x08003f01
 8003efc:	08003f9b 	.word	0x08003f9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d048      	beq.n	8003f9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f10:	e045      	b.n	8003f9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f1a:	d142      	bne.n	8003fa2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f20:	e03f      	b.n	8003fa2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2a:	d123      	bne.n	8003f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d838      	bhi.n	8003fa6 <DMA_CheckFifoParam+0xda>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <DMA_CheckFifoParam+0x70>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f53 	.word	0x08003f53
 8003f44:	08003f4d 	.word	0x08003f4d
 8003f48:	08003f65 	.word	0x08003f65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
        break;
 8003f50:	e030      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d025      	beq.n	8003faa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f62:	e022      	b.n	8003faa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f6c:	d11f      	bne.n	8003fae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f72:	e01c      	b.n	8003fae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d902      	bls.n	8003f82 <DMA_CheckFifoParam+0xb6>
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d003      	beq.n	8003f88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f80:	e018      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
        break;
 8003f86:	e015      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
    break;
 8003f98:	e00b      	b.n	8003fb2 <DMA_CheckFifoParam+0xe6>
        break;
 8003f9a:	bf00      	nop
 8003f9c:	e00a      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e008      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e006      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
    break;
 8003fb2:	bf00      	nop
    }
  }

  return status;
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop

08003fc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a38      	ldr	r2, [pc, #224]	; (80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a36      	ldr	r2, [pc, #216]	; (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01d      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a35      	ldr	r2, [pc, #212]	; (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a33      	ldr	r2, [pc, #204]	; (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a32      	ldr	r2, [pc, #200]	; (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a30      	ldr	r2, [pc, #192]	; (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2f      	ldr	r2, [pc, #188]	; (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2d      	ldr	r2, [pc, #180]	; (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004026:	2300      	movs	r3, #0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01a      	beq.n	8004062 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3b08      	subs	r3, #8
 8004034:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4b26      	ldr	r3, [pc, #152]	; (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	461a      	mov	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004050:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004060:	e024      	b.n	80040ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	3b10      	subs	r3, #16
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d806      	bhi.n	800408a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d902      	bls.n	800408a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3308      	adds	r3, #8
 8004088:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800409c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	2201      	movs	r2, #1
 80040a6:	409a      	lsls	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	58025408 	.word	0x58025408
 80040bc:	5802541c 	.word	0x5802541c
 80040c0:	58025430 	.word	0x58025430
 80040c4:	58025444 	.word	0x58025444
 80040c8:	58025458 	.word	0x58025458
 80040cc:	5802546c 	.word	0x5802546c
 80040d0:	58025480 	.word	0x58025480
 80040d4:	58025494 	.word	0x58025494
 80040d8:	cccccccd 	.word	0xcccccccd
 80040dc:	16009600 	.word	0x16009600
 80040e0:	58025880 	.word	0x58025880
 80040e4:	aaaaaaab 	.word	0xaaaaaaab
 80040e8:	400204b8 	.word	0x400204b8
 80040ec:	4002040f 	.word	0x4002040f
 80040f0:	10008200 	.word	0x10008200
 80040f4:	40020880 	.word	0x40020880

080040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04a      	beq.n	80041a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d847      	bhi.n	80041a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a25      	ldr	r2, [pc, #148]	; (80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a24      	ldr	r2, [pc, #144]	; (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01d      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a21      	ldr	r2, [pc, #132]	; (80041bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004180:	671a      	str	r2, [r3, #112]	; 0x70
 8004182:	e009      	b.n	8004198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a11      	ldr	r2, [pc, #68]	; (80041dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004196:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	58025408 	.word	0x58025408
 80041b4:	5802541c 	.word	0x5802541c
 80041b8:	58025430 	.word	0x58025430
 80041bc:	58025444 	.word	0x58025444
 80041c0:	58025458 	.word	0x58025458
 80041c4:	5802546c 	.word	0x5802546c
 80041c8:	58025480 	.word	0x58025480
 80041cc:	58025494 	.word	0x58025494
 80041d0:	1600963f 	.word	0x1600963f
 80041d4:	58025940 	.word	0x58025940
 80041d8:	1000823f 	.word	0x1000823f
 80041dc:	40020940 	.word	0x40020940

080041e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b098      	sub	sp, #96	; 0x60
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80041e8:	4a84      	ldr	r2, [pc, #528]	; (80043fc <HAL_FDCAN_Init+0x21c>)
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	4611      	mov	r1, r2
 80041f0:	224c      	movs	r2, #76	; 0x4c
 80041f2:	4618      	mov	r0, r3
 80041f4:	f011 f97c 	bl	80154f0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1ca      	b.n	8004598 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7e      	ldr	r2, [pc, #504]	; (8004400 <HAL_FDCAN_Init+0x220>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d106      	bne.n	800421a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd f976 	bl	8001520 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0210 	bic.w	r2, r2, #16
 8004242:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004244:	f7fd fdaa 	bl	8001d9c <HAL_GetTick>
 8004248:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800424a:	e014      	b.n	8004276 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800424c:	f7fd fda6 	bl	8001d9c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b0a      	cmp	r3, #10
 8004258:	d90d      	bls.n	8004276 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2203      	movs	r2, #3
 800426e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e190      	b.n	8004598 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d0e3      	beq.n	800424c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004294:	f7fd fd82 	bl	8001d9c <HAL_GetTick>
 8004298:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800429a:	e014      	b.n	80042c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800429c:	f7fd fd7e 	bl	8001d9c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b0a      	cmp	r3, #10
 80042a8:	d90d      	bls.n	80042c6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2203      	movs	r2, #3
 80042be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e168      	b.n	8004598 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0e3      	beq.n	800429c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0202 	orr.w	r2, r2, #2
 80042e2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7c1b      	ldrb	r3, [r3, #16]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d108      	bne.n	80042fe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fa:	619a      	str	r2, [r3, #24]
 80042fc:	e007      	b.n	800430e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800430c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7c5b      	ldrb	r3, [r3, #17]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d108      	bne.n	8004328 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004324:	619a      	str	r2, [r3, #24]
 8004326:	e007      	b.n	8004338 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004336:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7c9b      	ldrb	r3, [r3, #18]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d108      	bne.n	8004352 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800434e:	619a      	str	r2, [r3, #24]
 8004350:	e007      	b.n	8004362 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699a      	ldr	r2, [r3, #24]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004360:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004386:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0210 	bic.w	r2, r2, #16
 8004396:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d108      	bne.n	80043b2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0204 	orr.w	r2, r2, #4
 80043ae:	619a      	str	r2, [r3, #24]
 80043b0:	e030      	b.n	8004414 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d02c      	beq.n	8004414 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d020      	beq.n	8004404 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043d0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0210 	orr.w	r2, r2, #16
 80043e0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d114      	bne.n	8004414 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0220 	orr.w	r2, r2, #32
 80043f8:	619a      	str	r2, [r3, #24]
 80043fa:	e00b      	b.n	8004414 <HAL_FDCAN_Init+0x234>
 80043fc:	08016904 	.word	0x08016904
 8004400:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0220 	orr.w	r2, r2, #32
 8004412:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	3b01      	subs	r3, #1
 800441a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	3b01      	subs	r3, #1
 8004422:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004424:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800442c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	3b01      	subs	r3, #1
 8004436:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800443c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800443e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	d115      	bne.n	8004476 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	3b01      	subs	r3, #1
 8004456:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004458:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	3b01      	subs	r3, #1
 8004460:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004462:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	3b01      	subs	r3, #1
 800446c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004472:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004474:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449c:	4413      	add	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d012      	beq.n	80044c8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80044aa:	f023 0107 	bic.w	r1, r3, #7
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044b8:	4413      	add	r3, r2
 80044ba:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d012      	beq.n	80044f6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80044d8:	f023 0107 	bic.w	r1, r3, #7
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044e6:	4413      	add	r3, r2
 80044e8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d013      	beq.n	8004526 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004506:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004514:	4413      	add	r3, r2
 8004516:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800451a:	011a      	lsls	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452a:	2b00      	cmp	r3, #0
 800452c:	d013      	beq.n	8004556 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004536:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004544:	4413      	add	r3, r2
 8004546:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800454a:	021a      	lsls	r2, r3, #8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a11      	ldr	r2, [pc, #68]	; (80045a0 <HAL_FDCAN_Init+0x3c0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d107      	bne.n	8004570 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f022 0203 	bic.w	r2, r2, #3
 800456e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fddf 	bl	800514c <FDCAN_CalcultateRamBlockAddresses>
 800458e:	4603      	mov	r3, r0
 8004590:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004594:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004598:	4618      	mov	r0, r3
 800459a:	3760      	adds	r7, #96	; 0x60
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	4000a000 	.word	0x4000a000

080045a4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80045b4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d002      	beq.n	80045c2 <HAL_FDCAN_ConfigFilter+0x1e>
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d157      	bne.n	8004672 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d12b      	bne.n	8004622 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b07      	cmp	r3, #7
 80045d0:	d10d      	bne.n	80045ee <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80045de:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80045e4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80045e6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e00e      	b.n	800460c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045fa:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004602:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e025      	b.n	800466e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	075a      	lsls	r2, r3, #29
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b07      	cmp	r3, #7
 8004636:	d103      	bne.n	8004640 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	e006      	b.n	800464e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	079a      	lsls	r2, r3, #30
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3304      	adds	r3, #4
 8004666:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e008      	b.n	8004684 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004678:	f043 0202 	orr.w	r2, r3, #2
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d110      	bne.n	80046cc <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80046b2:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80046b8:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80046c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e008      	b.n	80046de <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046d2:	f043 0204 	orr.w	r2, r3, #4
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d109      	bne.n	8004712 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800470c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e008      	b.n	8004724 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004718:	f043 0204 	orr.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d111      	bne.n	8004768 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e008      	b.n	800477a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800476e:	f043 0204 	orr.w	r2, r3, #4
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004788:	b480      	push	{r7}
 800478a:	b08b      	sub	sp, #44	; 0x2c
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80047a0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80047a2:	7efb      	ldrb	r3, [r7, #27]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	f040 813b 	bne.w	8004a20 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d145      	bne.n	800483c <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047c6:	f043 0220 	orr.w	r2, r3, #32
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e12e      	b.n	8004a32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e11c      	b.n	8004a32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004800:	0e1b      	lsrs	r3, r3, #24
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d103      	bne.n	8004812 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	69f9      	ldr	r1, [r7, #28]
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e061      	b.n	8004900 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b41      	cmp	r3, #65	; 0x41
 8004840:	d145      	bne.n	80048ce <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800484a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0e5      	b.n	8004a32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800486e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800487c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0d3      	b.n	8004a32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004892:	0e1b      	lsrs	r3, r3, #24
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d103      	bne.n	80048a4 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
 80048cc:	e018      	b.n	8004900 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d309      	bcc.n	80048ec <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048de:	f043 0220 	orr.w	r2, r3, #32
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0a2      	b.n	8004a32 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d107      	bne.n	8004924 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	0c9b      	lsrs	r3, r3, #18
 800491a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e005      	b.n	8004930 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	3304      	adds	r3, #4
 800494c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	0e1b      	lsrs	r3, r3, #24
 8004982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	0fda      	lsrs	r2, r3, #31
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	3304      	adds	r3, #4
 8004998:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
 80049a2:	e00a      	b.n	80049ba <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	441a      	add	r2, r3
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	440b      	add	r3, r1
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	3301      	adds	r3, #1
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <HAL_FDCAN_GetRxMessage+0x2b8>)
 80049c2:	5cd3      	ldrb	r3, [r2, r3]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d3eb      	bcc.n	80049a4 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d105      	bne.n	80049de <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80049dc:	e01e      	b.n	8004a1c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b41      	cmp	r3, #65	; 0x41
 80049e2:	d105      	bne.n	80049f0 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80049ee:	e015      	b.n	8004a1c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b1f      	cmp	r3, #31
 80049f4:	d808      	bhi.n	8004a08 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2101      	movs	r1, #1
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004a02:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004a06:	e009      	b.n	8004a1c <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 021f 	and.w	r2, r3, #31
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f202 	lsl.w	r2, r1, r2
 8004a18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e008      	b.n	8004a32 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a26:	f043 0208 	orr.w	r2, r3, #8
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	372c      	adds	r7, #44	; 0x2c
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	08016a00 	.word	0x08016a00

08004a44 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004a56:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d002      	beq.n	8004a64 <HAL_FDCAN_ActivateNotification+0x20>
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d155      	bne.n	8004b10 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d108      	bne.n	8004a84 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a82:	e014      	b.n	8004aae <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d108      	bne.n	8004aa6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0202 	orr.w	r2, r2, #2
 8004aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004aa4:	e003      	b.n	8004aae <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <HAL_FDCAN_ActivateNotification+0xec>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	430b      	orrs	r3, r1
 8004afc:	6553      	str	r3, [r2, #84]	; 0x54
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	0f9b      	lsrs	r3, r3, #30
 8004b06:	490b      	ldr	r1, [pc, #44]	; (8004b34 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e008      	b.n	8004b22 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b16:	f043 0202 	orr.w	r2, r3, #2
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	3fcfffff 	.word	0x3fcfffff
 8004b34:	4000a800 	.word	0x4000a800

08004b38 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b092      	sub	sp, #72	; 0x48
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004b40:	4b90      	ldr	r3, [pc, #576]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	079b      	lsls	r3, r3, #30
 8004b46:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004b48:	4b8e      	ldr	r3, [pc, #568]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	079b      	lsls	r3, r3, #30
 8004b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b50:	4013      	ands	r3, r2
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b68:	4013      	ands	r3, r2
 8004b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b80:	4013      	ands	r3, r2
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b98:	4013      	ands	r3, r2
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004bbe:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc8:	4013      	ands	r3, r2
 8004bca:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bf0:	651a      	str	r2, [r3, #80]	; 0x50
 8004bf2:	4b64      	ldr	r3, [pc, #400]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa5a 	bl	80050b2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01e      	beq.n	8004c4a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d017      	beq.n	8004c4a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c2e:	4013      	ands	r3, r2
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c3a:	651a      	str	r2, [r3, #80]	; 0x50
 8004c3c:	4b51      	ldr	r3, [pc, #324]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fa0b 	bl	8005060 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c56:	4b4c      	ldr	r3, [pc, #304]	; (8004d88 <HAL_FDCAN_IRQHandler+0x250>)
 8004c58:	400b      	ands	r3, r1
 8004c5a:	6513      	str	r3, [r2, #80]	; 0x50
 8004c5c:	4a49      	ldr	r2, [pc, #292]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c60:	0f9b      	lsrs	r3, r3, #30
 8004c62:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004c64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f9c4 	bl	8004ff4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c78:	4b43      	ldr	r3, [pc, #268]	; (8004d88 <HAL_FDCAN_IRQHandler+0x250>)
 8004c7a:	400b      	ands	r3, r1
 8004c7c:	6513      	str	r3, [r2, #80]	; 0x50
 8004c7e:	4a41      	ldr	r2, [pc, #260]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c82:	0f9b      	lsrs	r3, r3, #30
 8004c84:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f9be 	bl	800500a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00d      	beq.n	8004cb0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <HAL_FDCAN_IRQHandler+0x250>)
 8004c9c:	400b      	ands	r3, r1
 8004c9e:	6513      	str	r3, [r2, #80]	; 0x50
 8004ca0:	4a38      	ldr	r2, [pc, #224]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca4:	0f9b      	lsrs	r3, r3, #30
 8004ca6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc fbe4 	bl	8001478 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cbc:	4b32      	ldr	r3, [pc, #200]	; (8004d88 <HAL_FDCAN_IRQHandler+0x250>)
 8004cbe:	400b      	ands	r3, r1
 8004cc0:	6513      	str	r3, [r2, #80]	; 0x50
 8004cc2:	4a30      	ldr	r2, [pc, #192]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	0f9b      	lsrs	r3, r3, #30
 8004cc8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f9a7 	bl	8005020 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d011      	beq.n	8004d04 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cf6:	651a      	str	r2, [r3, #80]	; 0x50
 8004cf8:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f999 	bl	8005036 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01e      	beq.n	8004d50 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d017      	beq.n	8004d50 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d34:	4013      	ands	r3, r2
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d40:	651a      	str	r2, [r3, #80]	; 0x50
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f97d 	bl	800504a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00f      	beq.n	8004d8c <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d74:	651a      	str	r2, [r3, #80]	; 0x50
 8004d76:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_FDCAN_IRQHandler+0x24c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f97a 	bl	8005076 <HAL_FDCAN_RxBufferNewMessageCallback>
 8004d82:	e003      	b.n	8004d8c <HAL_FDCAN_IRQHandler+0x254>
 8004d84:	4000a800 	.word	0x4000a800
 8004d88:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004db0:	651a      	str	r2, [r3, #80]	; 0x50
 8004db2:	4b8d      	ldr	r3, [pc, #564]	; (8004fe8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f966 	bl	800508a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d011      	beq.n	8004df0 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004de2:	651a      	str	r2, [r3, #80]	; 0x50
 8004de4:	4b80      	ldr	r3, [pc, #512]	; (8004fe8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f957 	bl	800509e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00f      	beq.n	8004e2c <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50
 8004e16:	4b74      	ldr	r3, [pc, #464]	; (8004fe8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00d      	beq.n	8004e4e <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e38:	4b6c      	ldr	r3, [pc, #432]	; (8004fec <HAL_FDCAN_IRQHandler+0x4b4>)
 8004e3a:	400b      	ands	r3, r1
 8004e3c:	6513      	str	r3, [r2, #80]	; 0x50
 8004e3e:	4a6a      	ldr	r2, [pc, #424]	; (8004fe8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	0f9b      	lsrs	r3, r3, #30
 8004e44:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004e46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f946 	bl	80050da <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d011      	beq.n	8004e78 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e5a:	4b64      	ldr	r3, [pc, #400]	; (8004fec <HAL_FDCAN_IRQHandler+0x4b4>)
 8004e5c:	400b      	ands	r3, r1
 8004e5e:	6513      	str	r3, [r2, #80]	; 0x50
 8004e60:	4a61      	ldr	r2, [pc, #388]	; (8004fe8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	0f9b      	lsrs	r3, r3, #30
 8004e66:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a5c      	ldr	r2, [pc, #368]	; (8004ff0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	f040 80a6 	bne.w	8004fd0 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 809e 	beq.w	8004fd0 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eb6:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004ece:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004ee6:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004efe:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f8e7 	bl	80050f0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	6a3a      	ldr	r2, [r7, #32]
 8004f2e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004f30:	6a39      	ldr	r1, [r7, #32]
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8e7 	bl	8005106 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01b      	beq.n	8004f7e <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d014      	beq.n	8004f7e <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f6a:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	6939      	ldr	r1, [r7, #16]
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8cf 	bl	800511c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004f8c:	69f9      	ldr	r1, [r7, #28]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8d0 	bl	8005134 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f873 	bl	80050c6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3748      	adds	r7, #72	; 0x48
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	4000a800 	.word	0x4000a800
 8004fec:	3fcfffff 	.word	0x3fcfffff
 8004ff0:	4000a000 	.word	0x4000a000

08004ff4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005162:	4ba7      	ldr	r3, [pc, #668]	; (8005400 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005164:	4013      	ands	r3, r2
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	0091      	lsls	r1, r2, #2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	430b      	orrs	r3, r1
 8005170:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800517c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	041a      	lsls	r2, r3, #16
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	4413      	add	r3, r2
 8005198:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051a2:	4b97      	ldr	r3, [pc, #604]	; (8005400 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0091      	lsls	r1, r2, #2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	430b      	orrs	r3, r1
 80051b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c4:	041a      	lsls	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4413      	add	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80051e4:	4b86      	ldr	r3, [pc, #536]	; (8005400 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	0091      	lsls	r1, r2, #2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051fe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	041a      	lsls	r2, r3, #16
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800522c:	4b74      	ldr	r3, [pc, #464]	; (8005400 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800522e:	4013      	ands	r3, r2
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	0091      	lsls	r1, r2, #2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	430b      	orrs	r3, r1
 800523a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005246:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800524e:	041a      	lsls	r2, r3, #16
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005262:	fb02 f303 	mul.w	r3, r2, r3
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4413      	add	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005274:	4b62      	ldr	r3, [pc, #392]	; (8005400 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005276:	4013      	ands	r3, r2
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	0091      	lsls	r1, r2, #2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	430b      	orrs	r3, r1
 8005282:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	4413      	add	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80052a0:	4b57      	ldr	r3, [pc, #348]	; (8005400 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	0091      	lsls	r1, r2, #2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	430b      	orrs	r3, r1
 80052ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c2:	041a      	lsls	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4413      	add	r3, r2
 80052d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80052e2:	4b47      	ldr	r3, [pc, #284]	; (8005400 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	0091      	lsls	r1, r2, #2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	430b      	orrs	r3, r1
 80052f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80052fc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	041a      	lsls	r2, r3, #16
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005318:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005320:	061a      	lsls	r2, r3, #24
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005330:	4b34      	ldr	r3, [pc, #208]	; (8005404 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005332:	4413      	add	r3, r2
 8005334:	009a      	lsls	r2, r3, #2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	441a      	add	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	441a      	add	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800537e:	fb01 f303 	mul.w	r3, r1, r3
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	441a      	add	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	4a04      	ldr	r2, [pc, #16]	; (8005408 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d915      	bls.n	8005428 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80053fc:	e006      	b.n	800540c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80053fe:	bf00      	nop
 8005400:	ffff0003 	.word	0xffff0003
 8005404:	10002b00 	.word	0x10002b00
 8005408:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2203      	movs	r2, #3
 8005420:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e010      	b.n	800544a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e005      	b.n	800543c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3304      	adds	r3, #4
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	429a      	cmp	r2, r3
 8005446:	d3f3      	bcc.n	8005430 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005458:	b480      	push	{r7}
 800545a:	b089      	sub	sp, #36	; 0x24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005466:	4b89      	ldr	r3, [pc, #548]	; (800568c <HAL_GPIO_Init+0x234>)
 8005468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800546a:	e194      	b.n	8005796 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2101      	movs	r1, #1
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	fa01 f303 	lsl.w	r3, r1, r3
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8186 	beq.w	8005790 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d00b      	beq.n	80054a4 <HAL_GPIO_Init+0x4c>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d007      	beq.n	80054a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005498:	2b11      	cmp	r3, #17
 800549a:	d003      	beq.n	80054a4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b12      	cmp	r3, #18
 80054a2:	d130      	bne.n	8005506 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	2203      	movs	r2, #3
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054da:	2201      	movs	r2, #1
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	f003 0201 	and.w	r2, r3, #1
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2203      	movs	r2, #3
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d003      	beq.n	8005546 <HAL_GPIO_Init+0xee>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b12      	cmp	r3, #18
 8005544:	d123      	bne.n	800558e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	08da      	lsrs	r2, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3208      	adds	r2, #8
 800554e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	220f      	movs	r2, #15
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43db      	mvns	r3, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	4013      	ands	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4313      	orrs	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	08da      	lsrs	r2, r3, #3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3208      	adds	r2, #8
 8005588:	69b9      	ldr	r1, [r7, #24]
 800558a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	2203      	movs	r2, #3
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4013      	ands	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 0203 	and.w	r2, r3, #3
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80e0 	beq.w	8005790 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d0:	4b2f      	ldr	r3, [pc, #188]	; (8005690 <HAL_GPIO_Init+0x238>)
 80055d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055d6:	4a2e      	ldr	r2, [pc, #184]	; (8005690 <HAL_GPIO_Init+0x238>)
 80055d8:	f043 0302 	orr.w	r3, r3, #2
 80055dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80055e0:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <HAL_GPIO_Init+0x238>)
 80055e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ee:	4a29      	ldr	r2, [pc, #164]	; (8005694 <HAL_GPIO_Init+0x23c>)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	089b      	lsrs	r3, r3, #2
 80055f4:	3302      	adds	r3, #2
 80055f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	220f      	movs	r2, #15
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a20      	ldr	r2, [pc, #128]	; (8005698 <HAL_GPIO_Init+0x240>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d052      	beq.n	80056c0 <HAL_GPIO_Init+0x268>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a1f      	ldr	r2, [pc, #124]	; (800569c <HAL_GPIO_Init+0x244>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d031      	beq.n	8005686 <HAL_GPIO_Init+0x22e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <HAL_GPIO_Init+0x248>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d02b      	beq.n	8005682 <HAL_GPIO_Init+0x22a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <HAL_GPIO_Init+0x24c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d025      	beq.n	800567e <HAL_GPIO_Init+0x226>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1c      	ldr	r2, [pc, #112]	; (80056a8 <HAL_GPIO_Init+0x250>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01f      	beq.n	800567a <HAL_GPIO_Init+0x222>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1b      	ldr	r2, [pc, #108]	; (80056ac <HAL_GPIO_Init+0x254>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d019      	beq.n	8005676 <HAL_GPIO_Init+0x21e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a1a      	ldr	r2, [pc, #104]	; (80056b0 <HAL_GPIO_Init+0x258>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_GPIO_Init+0x21a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <HAL_GPIO_Init+0x25c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00d      	beq.n	800566e <HAL_GPIO_Init+0x216>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <HAL_GPIO_Init+0x260>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <HAL_GPIO_Init+0x212>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a17      	ldr	r2, [pc, #92]	; (80056bc <HAL_GPIO_Init+0x264>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d101      	bne.n	8005666 <HAL_GPIO_Init+0x20e>
 8005662:	2309      	movs	r3, #9
 8005664:	e02d      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 8005666:	230a      	movs	r3, #10
 8005668:	e02b      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 800566a:	2308      	movs	r3, #8
 800566c:	e029      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 800566e:	2307      	movs	r3, #7
 8005670:	e027      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 8005672:	2306      	movs	r3, #6
 8005674:	e025      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 8005676:	2305      	movs	r3, #5
 8005678:	e023      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 800567a:	2304      	movs	r3, #4
 800567c:	e021      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 800567e:	2303      	movs	r3, #3
 8005680:	e01f      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 8005682:	2302      	movs	r3, #2
 8005684:	e01d      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 8005686:	2301      	movs	r3, #1
 8005688:	e01b      	b.n	80056c2 <HAL_GPIO_Init+0x26a>
 800568a:	bf00      	nop
 800568c:	58000080 	.word	0x58000080
 8005690:	58024400 	.word	0x58024400
 8005694:	58000400 	.word	0x58000400
 8005698:	58020000 	.word	0x58020000
 800569c:	58020400 	.word	0x58020400
 80056a0:	58020800 	.word	0x58020800
 80056a4:	58020c00 	.word	0x58020c00
 80056a8:	58021000 	.word	0x58021000
 80056ac:	58021400 	.word	0x58021400
 80056b0:	58021800 	.word	0x58021800
 80056b4:	58021c00 	.word	0x58021c00
 80056b8:	58022000 	.word	0x58022000
 80056bc:	58022400 	.word	0x58022400
 80056c0:	2300      	movs	r3, #0
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	f002 0203 	and.w	r2, r2, #3
 80056c8:	0092      	lsls	r2, r2, #2
 80056ca:	4093      	lsls	r3, r2
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056d2:	4938      	ldr	r1, [pc, #224]	; (80057b4 <HAL_GPIO_Init+0x35c>)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	089b      	lsrs	r3, r3, #2
 80056d8:	3302      	adds	r3, #2
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	43db      	mvns	r3, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	4013      	ands	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800575a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3301      	adds	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f47f ae63 	bne.w	800546c <HAL_GPIO_Init+0x14>
  }
}
 80057a6:	bf00      	nop
 80057a8:	3724      	adds	r7, #36	; 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	58000400 	.word	0x58000400

080057b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	887b      	ldrh	r3, [r7, #2]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
 80057d4:	e001      	b.n	80057da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	807b      	strh	r3, [r7, #2]
 80057f4:	4613      	mov	r3, r2
 80057f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057f8:	787b      	ldrb	r3, [r7, #1]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057fe:	887a      	ldrh	r2, [r7, #2]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005804:	e003      	b.n	800580e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005806:	887b      	ldrh	r3, [r7, #2]
 8005808:	041a      	lsls	r2, r3, #16
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	619a      	str	r2, [r3, #24]
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	887b      	ldrh	r3, [r7, #2]
 800582c:	401a      	ands	r2, r3
 800582e:	887b      	ldrh	r3, [r7, #2]
 8005830:	429a      	cmp	r2, r3
 8005832:	d104      	bne.n	800583e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005834:	887b      	ldrh	r3, [r7, #2]
 8005836:	041a      	lsls	r2, r3, #16
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800583c:	e002      	b.n	8005844 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800583e:	887a      	ldrh	r2, [r7, #2]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	619a      	str	r2, [r3, #24]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005858:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800585a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800585e:	4a0c      	ldr	r2, [pc, #48]	; (8005890 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005860:	f043 0302 	orr.w	r3, r3, #2
 8005864:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005868:	4b09      	ldr	r3, [pc, #36]	; (8005890 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800586a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8005876:	4b07      	ldr	r3, [pc, #28]	; (8005894 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	4906      	ldr	r1, [pc, #24]	; (8005894 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4313      	orrs	r3, r2
 8005880:	604b      	str	r3, [r1, #4]
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	58024400 	.word	0x58024400
 8005894:	58000400 	.word	0x58000400

08005898 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800589a:	b08f      	sub	sp, #60	; 0x3c
 800589c:	af0a      	add	r7, sp, #40	; 0x28
 800589e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e116      	b.n	8005ad8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f00f fabb 	bl	8014e40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2203      	movs	r2, #3
 80058ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f008 fac0 	bl	800de6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	687e      	ldr	r6, [r7, #4]
 80058f6:	466d      	mov	r5, sp
 80058f8:	f106 0410 	add.w	r4, r6, #16
 80058fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005904:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005908:	e885 0003 	stmia.w	r5, {r0, r1}
 800590c:	1d33      	adds	r3, r6, #4
 800590e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005910:	6838      	ldr	r0, [r7, #0]
 8005912:	f008 f997 	bl	800dc44 <USB_CoreInit>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0d7      	b.n	8005ad8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f008 faae 	bl	800de90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005934:	2300      	movs	r3, #0
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	e04a      	b.n	80059d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	333d      	adds	r3, #61	; 0x3d
 800594a:	2201      	movs	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800594e:	7bfa      	ldrb	r2, [r7, #15]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	333c      	adds	r3, #60	; 0x3c
 800595e:	7bfa      	ldrb	r2, [r7, #15]
 8005960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	b298      	uxth	r0, r3
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	4613      	mov	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	1a9b      	subs	r3, r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	440b      	add	r3, r1
 8005974:	3342      	adds	r3, #66	; 0x42
 8005976:	4602      	mov	r2, r0
 8005978:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800597a:	7bfa      	ldrb	r2, [r7, #15]
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	1a9b      	subs	r3, r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	333f      	adds	r3, #63	; 0x3f
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800598e:	7bfa      	ldrb	r2, [r7, #15]
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	3344      	adds	r3, #68	; 0x44
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059a2:	7bfa      	ldrb	r2, [r7, #15]
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	3348      	adds	r3, #72	; 0x48
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	1a9b      	subs	r3, r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3350      	adds	r3, #80	; 0x50
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	3301      	adds	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
 80059d0:	7bfa      	ldrb	r2, [r7, #15]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d3af      	bcc.n	800593a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	e044      	b.n	8005a6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059e0:	7bfa      	ldrb	r2, [r7, #15]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059f6:	7bfa      	ldrb	r2, [r7, #15]
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	440b      	add	r3, r1
 8005a04:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a08:	7bfa      	ldrb	r2, [r7, #15]
 8005a0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a0c:	7bfa      	ldrb	r2, [r7, #15]
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a38:	7bfa      	ldrb	r2, [r7, #15]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a4e:	7bfa      	ldrb	r2, [r7, #15]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	3301      	adds	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	7bfa      	ldrb	r2, [r7, #15]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d3b5      	bcc.n	80059e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	687e      	ldr	r6, [r7, #4]
 8005a7c:	466d      	mov	r5, sp
 8005a7e:	f106 0410 	add.w	r4, r6, #16
 8005a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a92:	1d33      	adds	r3, r6, #4
 8005a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a96:	6838      	ldr	r0, [r7, #0]
 8005a98:	f008 fa24 	bl	800dee4 <USB_DevInit>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e014      	b.n	8005ad8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d102      	bne.n	8005acc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 f8be 	bl	8006c48 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f009 fa63 	bl	800ef9c <USB_DevDisconnect>

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ae0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_PCD_Start+0x1c>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e020      	b.n	8005b3e <HAL_PCD_Start+0x5e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d109      	bne.n	8005b20 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d005      	beq.n	8005b20 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f009 fa21 	bl	800ef6c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f008 f98c 	bl	800de4c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b46:	b590      	push	{r4, r7, lr}
 8005b48:	b08d      	sub	sp, #52	; 0x34
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f009 fac8 	bl	800f0f2 <USB_GetMode>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f040 83ca 	bne.w	80062fe <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f009 fa2c 	bl	800efcc <USB_ReadInterrupts>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 83c0 	beq.w	80062fc <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f009 fa23 	bl	800efcc <USB_ReadInterrupts>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d107      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f002 0202 	and.w	r2, r2, #2
 8005b9e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f009 fa11 	bl	800efcc <USB_ReadInterrupts>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d161      	bne.n	8005c78 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0210 	bic.w	r2, r2, #16
 8005bc2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f003 020f 	and.w	r2, r3, #15
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4413      	add	r3, r2
 8005be0:	3304      	adds	r3, #4
 8005be2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	0c5b      	lsrs	r3, r3, #17
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d124      	bne.n	8005c3a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d035      	beq.n	8005c68 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6a38      	ldr	r0, [r7, #32]
 8005c10:	f009 f889 	bl	800ed26 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c20:	441a      	add	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c32:	441a      	add	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	619a      	str	r2, [r3, #24]
 8005c38:	e016      	b.n	8005c68 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	0c5b      	lsrs	r3, r3, #17
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	2b06      	cmp	r3, #6
 8005c44:	d110      	bne.n	8005c68 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6a38      	ldr	r0, [r7, #32]
 8005c52:	f009 f868 	bl	800ed26 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c62:	441a      	add	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0210 	orr.w	r2, r2, #16
 8005c76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f009 f9a5 	bl	800efcc <USB_ReadInterrupts>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c8c:	d16e      	bne.n	8005d6c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f009 f9ab 	bl	800eff2 <USB_ReadDevAllOutEpInterrupt>
 8005c9c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005c9e:	e062      	b.n	8005d66 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d057      	beq.n	8005d5a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f009 f9d0 	bl	800f05a <USB_ReadDevOutEPInterrupt>
 8005cba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fe0a 	bl	80068f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00c      	beq.n	8005d04 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 ff04 	bl	8006b0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d008      	beq.n	8005d20 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d008      	beq.n	8005d3c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	461a      	mov	r2, r3
 8005d38:	2320      	movs	r3, #32
 8005d3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	461a      	mov	r2, r3
 8005d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d199      	bne.n	8005ca0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f009 f92b 	bl	800efcc <USB_ReadInterrupts>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d80:	f040 80c0 	bne.w	8005f04 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f009 f94c 	bl	800f026 <USB_ReadDevAllInEpInterrupt>
 8005d8e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005d94:	e0b2      	b.n	8005efc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80a7 	beq.w	8005ef0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	4611      	mov	r1, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f009 f972 	bl	800f096 <USB_ReadDevInEPInterrupt>
 8005db2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d057      	beq.n	8005e6e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	69f9      	ldr	r1, [r7, #28]
 8005dda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dde:	4013      	ands	r3, r2
 8005de0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	461a      	mov	r2, r3
 8005df0:	2301      	movs	r3, #1
 8005df2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d132      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	3348      	adds	r3, #72	; 0x48
 8005e0c:	6819      	ldr	r1, [r3, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e12:	4613      	mov	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4403      	add	r3, r0
 8005e1c:	3344      	adds	r3, #68	; 0x44
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4419      	add	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e26:	4613      	mov	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4403      	add	r3, r0
 8005e30:	3348      	adds	r3, #72	; 0x48
 8005e32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d113      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x31c>
 8005e3a:	6879      	ldr	r1, [r7, #4]
 8005e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3e:	4613      	mov	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	3350      	adds	r3, #80	; 0x50
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d108      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	f009 f97b 	bl	800f158 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f00f f868 	bl	8014f3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	461a      	mov	r2, r3
 8005e86:	2308      	movs	r3, #8
 8005e88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2310      	movs	r3, #16
 8005ea4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2302      	movs	r3, #2
 8005edc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fc75 	bl	80067da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f47f af49 	bne.w	8005d96 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f009 f85f 	bl	800efcc <USB_ReadInterrupts>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f18:	d122      	bne.n	8005f60 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d108      	bne.n	8005f4a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f40:	2100      	movs	r1, #0
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fea4 	bl	8006c90 <HAL_PCDEx_LPM_Callback>
 8005f48:	e002      	b.n	8005f50 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f00f f86e 	bl	801502c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f009 f831 	bl	800efcc <USB_ReadInterrupts>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f74:	d112      	bne.n	8005f9c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d102      	bne.n	8005f8c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f00f f82a 	bl	8014fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695a      	ldr	r2, [r3, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f9a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f009 f813 	bl	800efcc <USB_ReadInterrupts>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fb0:	d121      	bne.n	8005ff6 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005fc0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d111      	bne.n	8005ff0 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	f003 020f 	and.w	r2, r3, #15
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fe51 	bl	8006c90 <HAL_PCDEx_LPM_Callback>
 8005fee:	e002      	b.n	8005ff6 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f00e fff5 	bl	8014fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f008 ffe6 	bl	800efcc <USB_ReadInterrupts>
 8006000:	4603      	mov	r3, r0
 8006002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600a:	f040 80c7 	bne.w	800619c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2110      	movs	r1, #16
 8006028:	4618      	mov	r0, r3
 800602a:	f008 f8b9 	bl	800e1a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800602e:	2300      	movs	r3, #0
 8006030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006032:	e056      	b.n	80060e2 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	461a      	mov	r2, r3
 8006042:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006046:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006066:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006086:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	461a      	mov	r2, r3
 8006096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800609a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	3301      	adds	r3, #1
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d3a3      	bcc.n	8006034 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80060fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	2b00      	cmp	r3, #0
 8006106:	d016      	beq.n	8006136 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006118:	f043 030b 	orr.w	r3, r3, #11
 800611c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612e:	f043 030b 	orr.w	r3, r3, #11
 8006132:	6453      	str	r3, [r2, #68]	; 0x44
 8006134:	e015      	b.n	8006162 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006144:	4619      	mov	r1, r3
 8006146:	f242 032b 	movw	r3, #8235	; 0x202b
 800614a:	4313      	orrs	r3, r2
 800614c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800615c:	f043 030b 	orr.w	r3, r3, #11
 8006160:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006170:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006174:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006186:	461a      	mov	r2, r3
 8006188:	f008 ffe6 	bl	800f158 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800619a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f008 ff13 	bl	800efcc <USB_ReadInterrupts>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b0:	d124      	bne.n	80061fc <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f008 ffaa 	bl	800f110 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f008 f84e 	bl	800e262 <USB_GetDevSpeed>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681c      	ldr	r4, [r3, #0]
 80061d2:	f001 fcfb 	bl	8007bcc <HAL_RCC_GetHCLKFreq>
 80061d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	4620      	mov	r0, r4
 80061e2:	f007 fd91 	bl	800dd08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f00e fed1 	bl	8014f8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695a      	ldr	r2, [r3, #20]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80061fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4618      	mov	r0, r3
 8006202:	f008 fee3 	bl	800efcc <USB_ReadInterrupts>
 8006206:	4603      	mov	r3, r0
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b08      	cmp	r3, #8
 800620e:	d10a      	bne.n	8006226 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f00e feae 	bl	8014f72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f002 0208 	and.w	r2, r2, #8
 8006224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f008 fece 	bl	800efcc <USB_ReadInterrupts>
 8006230:	4603      	mov	r3, r0
 8006232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800623a:	d10f      	bne.n	800625c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	b2db      	uxtb	r3, r3
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f00e ff10 	bl	801506c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800625a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f008 feb3 	bl	800efcc <USB_ReadInterrupts>
 8006266:	4603      	mov	r3, r0
 8006268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800626c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006270:	d10f      	bne.n	8006292 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	b2db      	uxtb	r3, r3
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f00e fee3 	bl	8015048 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f008 fe98 	bl	800efcc <USB_ReadInterrupts>
 800629c:	4603      	mov	r3, r0
 800629e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d10a      	bne.n	80062be <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f00e fef1 	bl	8015090 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695a      	ldr	r2, [r3, #20]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80062bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f008 fe82 	bl	800efcc <USB_ReadInterrupts>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d115      	bne.n	80062fe <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f00e fee1 	bl	80150ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	e000      	b.n	80062fe <HAL_PCD_IRQHandler+0x7b8>
      return;
 80062fc:	bf00      	nop
    }
  }
}
 80062fe:	3734      	adds	r7, #52	; 0x34
 8006300:	46bd      	mov	sp, r7
 8006302:	bd90      	pop	{r4, r7, pc}

08006304 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_PCD_SetAddress+0x1a>
 800631a:	2302      	movs	r3, #2
 800631c:	e013      	b.n	8006346 <HAL_PCD_SetAddress+0x42>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	4611      	mov	r1, r2
 8006336:	4618      	mov	r0, r3
 8006338:	f008 fdf2 	bl	800ef20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	4608      	mov	r0, r1
 8006358:	4611      	mov	r1, r2
 800635a:	461a      	mov	r2, r3
 800635c:	4603      	mov	r3, r0
 800635e:	70fb      	strb	r3, [r7, #3]
 8006360:	460b      	mov	r3, r1
 8006362:	803b      	strh	r3, [r7, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800636c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006370:	2b00      	cmp	r3, #0
 8006372:	da0f      	bge.n	8006394 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	f003 020f 	and.w	r2, r3, #15
 800637a:	4613      	mov	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	3338      	adds	r3, #56	; 0x38
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	3304      	adds	r3, #4
 800638a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	705a      	strb	r2, [r3, #1]
 8006392:	e00f      	b.n	80063b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	f003 020f 	and.w	r2, r3, #15
 800639a:	4613      	mov	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4413      	add	r3, r2
 80063aa:	3304      	adds	r3, #4
 80063ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80063c0:	883a      	ldrh	r2, [r7, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	78ba      	ldrb	r2, [r7, #2]
 80063ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80063de:	78bb      	ldrb	r3, [r7, #2]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d102      	bne.n	80063ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_PCD_EP_Open+0xaa>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e00e      	b.n	8006416 <HAL_PCD_EP_Open+0xc8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68f9      	ldr	r1, [r7, #12]
 8006406:	4618      	mov	r0, r3
 8006408:	f007 ff50 	bl	800e2ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006414:	7afb      	ldrb	r3, [r7, #11]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800642a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800642e:	2b00      	cmp	r3, #0
 8006430:	da0f      	bge.n	8006452 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	4613      	mov	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	3338      	adds	r3, #56	; 0x38
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	4413      	add	r3, r2
 8006446:	3304      	adds	r3, #4
 8006448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	705a      	strb	r2, [r3, #1]
 8006450:	e00f      	b.n	8006472 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	f003 020f 	and.w	r2, r3, #15
 8006458:	4613      	mov	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	4413      	add	r3, r2
 8006468:	3304      	adds	r3, #4
 800646a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	b2da      	uxtb	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_PCD_EP_Close+0x6e>
 8006488:	2302      	movs	r3, #2
 800648a:	e00e      	b.n	80064aa <HAL_PCD_EP_Close+0x8c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68f9      	ldr	r1, [r7, #12]
 800649a:	4618      	mov	r0, r3
 800649c:	f007 ff8e 	bl	800e3bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
 80064be:	460b      	mov	r3, r1
 80064c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	f003 020f 	and.w	r2, r3, #15
 80064c8:	4613      	mov	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	1a9b      	subs	r3, r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	3304      	adds	r3, #4
 80064da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2200      	movs	r2, #0
 80064ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2200      	movs	r2, #0
 80064f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064f4:	7afb      	ldrb	r3, [r7, #11]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d102      	bne.n	800650e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	2b00      	cmp	r3, #0
 8006516:	d109      	bne.n	800652c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	6979      	ldr	r1, [r7, #20]
 8006526:	f008 fa71 	bl	800ea0c <USB_EP0StartXfer>
 800652a:	e008      	b.n	800653e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	6979      	ldr	r1, [r7, #20]
 800653a:	f008 f81b 	bl	800e574 <USB_EPStartXfer>
  }

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 020f 	and.w	r2, r3, #15
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800656a:	681b      	ldr	r3, [r3, #0]
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	607a      	str	r2, [r7, #4]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	460b      	mov	r3, r1
 8006586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	f003 020f 	and.w	r2, r3, #15
 800658e:	4613      	mov	r3, r2
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	3338      	adds	r3, #56	; 0x38
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	3304      	adds	r3, #4
 800659e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2200      	movs	r2, #0
 80065b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2201      	movs	r2, #1
 80065b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d102      	bne.n	80065d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	6979      	ldr	r1, [r7, #20]
 80065ea:	f008 fa0f 	bl	800ea0c <USB_EP0StartXfer>
 80065ee:	e008      	b.n	8006602 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	6979      	ldr	r1, [r7, #20]
 80065fe:	f007 ffb9 	bl	800e574 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	f003 020f 	and.w	r2, r3, #15
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d901      	bls.n	800662a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e050      	b.n	80066cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800662a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800662e:	2b00      	cmp	r3, #0
 8006630:	da0f      	bge.n	8006652 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	f003 020f 	and.w	r2, r3, #15
 8006638:	4613      	mov	r3, r2
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	3338      	adds	r3, #56	; 0x38
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	3304      	adds	r3, #4
 8006648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	705a      	strb	r2, [r3, #1]
 8006650:	e00d      	b.n	800666e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	4413      	add	r3, r2
 8006664:	3304      	adds	r3, #4
 8006666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	b2da      	uxtb	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_PCD_EP_SetStall+0x82>
 800668a:	2302      	movs	r3, #2
 800668c:	e01e      	b.n	80066cc <HAL_PCD_EP_SetStall+0xc0>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	4618      	mov	r0, r3
 800669e:	f008 fb6b 	bl	800ed78 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	b2d9      	uxtb	r1, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066bc:	461a      	mov	r2, r3
 80066be:	f008 fd4b 	bl	800f158 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	f003 020f 	and.w	r2, r3, #15
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d901      	bls.n	80066f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e042      	b.n	8006778 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da0f      	bge.n	800671a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	f003 020f 	and.w	r2, r3, #15
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	3338      	adds	r3, #56	; 0x38
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	3304      	adds	r3, #4
 8006710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	705a      	strb	r2, [r3, #1]
 8006718:	e00f      	b.n	800673a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	4613      	mov	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4413      	add	r3, r2
 8006730:	3304      	adds	r3, #4
 8006732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	b2da      	uxtb	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <HAL_PCD_EP_ClrStall+0x86>
 8006756:	2302      	movs	r3, #2
 8006758:	e00e      	b.n	8006778 <HAL_PCD_EP_ClrStall+0xa4>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	4618      	mov	r0, r3
 800676a:	f008 fb73 	bl	800ee54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_PCD_EP_Flush+0x1a>
 8006796:	2302      	movs	r3, #2
 8006798:	e01b      	b.n	80067d2 <HAL_PCD_EP_Flush+0x52>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80067a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da09      	bge.n	80067be <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f007 fcf2 	bl	800e1a0 <USB_FlushTxFifo>
 80067bc:	e004      	b.n	80067c8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f007 fd12 	bl	800e1ec <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b08a      	sub	sp, #40	; 0x28
 80067de:	af02      	add	r7, sp, #8
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	3338      	adds	r3, #56	; 0x38
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	4413      	add	r3, r2
 80067fe:	3304      	adds	r3, #4
 8006800:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	429a      	cmp	r2, r3
 800680c:	d901      	bls.n	8006812 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e06c      	b.n	80068ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	429a      	cmp	r2, r3
 8006826:	d902      	bls.n	800682e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	3303      	adds	r3, #3
 8006832:	089b      	lsrs	r3, r3, #2
 8006834:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006836:	e02b      	b.n	8006890 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	695a      	ldr	r2, [r3, #20]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	429a      	cmp	r2, r3
 800684c:	d902      	bls.n	8006854 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	3303      	adds	r3, #3
 8006858:	089b      	lsrs	r3, r3, #2
 800685a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	68d9      	ldr	r1, [r3, #12]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800686c:	b2db      	uxtb	r3, r3
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	4603      	mov	r3, r0
 8006872:	6978      	ldr	r0, [r7, #20]
 8006874:	f008 fa22 	bl	800ecbc <USB_WritePacket>

    ep->xfer_buff  += len;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	441a      	add	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	441a      	add	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d809      	bhi.n	80068ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d203      	bcs.n	80068ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1be      	bne.n	8006838 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d811      	bhi.n	80068ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	2201      	movs	r2, #1
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	43db      	mvns	r3, r3
 80068e0:	6939      	ldr	r1, [r7, #16]
 80068e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e6:	4013      	ands	r3, r2
 80068e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	333c      	adds	r3, #60	; 0x3c
 800690c:	3304      	adds	r3, #4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b01      	cmp	r3, #1
 8006928:	f040 80a0 	bne.w	8006a6c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d015      	beq.n	8006962 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a72      	ldr	r2, [pc, #456]	; (8006b04 <PCD_EP_OutXfrComplete_int+0x210>)
 800693a:	4293      	cmp	r3, r2
 800693c:	f240 80dd 	bls.w	8006afa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80d7 	beq.w	8006afa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	461a      	mov	r2, r3
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	6093      	str	r3, [r2, #8]
 8006960:	e0cb      	b.n	8006afa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006978:	461a      	mov	r2, r3
 800697a:	2320      	movs	r3, #32
 800697c:	6093      	str	r3, [r2, #8]
 800697e:	e0bc      	b.n	8006afa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	f040 80b7 	bne.w	8006afa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a5d      	ldr	r2, [pc, #372]	; (8006b04 <PCD_EP_OutXfrComplete_int+0x210>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d90f      	bls.n	80069b4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	461a      	mov	r2, r3
 80069ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b0:	6093      	str	r3, [r2, #8]
 80069b2:	e0a2      	b.n	8006afa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	1a9b      	subs	r3, r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80069c6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	0159      	lsls	r1, r3, #5
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	440b      	add	r3, r1
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80069da:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4403      	add	r3, r0
 80069ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80069ee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	4613      	mov	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4403      	add	r3, r0
 8006a12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4419      	add	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4403      	add	r3, r0
 8006a28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a2c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d114      	bne.n	8006a5e <PCD_EP_OutXfrComplete_int+0x16a>
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	1a9b      	subs	r3, r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	440b      	add	r3, r1
 8006a42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d108      	bne.n	8006a5e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a56:	461a      	mov	r2, r3
 8006a58:	2101      	movs	r1, #1
 8006a5a:	f008 fb7d 	bl	800f158 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f00e fa4f 	bl	8014f08 <HAL_PCD_DataOutStageCallback>
 8006a6a:	e046      	b.n	8006afa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <PCD_EP_OutXfrComplete_int+0x214>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d124      	bne.n	8006abe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a90:	6093      	str	r3, [r2, #8]
 8006a92:	e032      	b.n	8006afa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	461a      	mov	r2, r3
 8006aac:	2320      	movs	r3, #32
 8006aae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f00e fa26 	bl	8014f08 <HAL_PCD_DataOutStageCallback>
 8006abc:	e01d      	b.n	8006afa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d114      	bne.n	8006aee <PCD_EP_OutXfrComplete_int+0x1fa>
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d108      	bne.n	8006aee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	2100      	movs	r1, #0
 8006aea:	f008 fb35 	bl	800f158 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f00e fa07 	bl	8014f08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	4f54300a 	.word	0x4f54300a
 8006b08:	4f54310a 	.word	0x4f54310a

08006b0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	333c      	adds	r3, #60	; 0x3c
 8006b24:	3304      	adds	r3, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d90e      	bls.n	8006b60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f00e f9bf 	bl	8014ee4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a0a      	ldr	r2, [pc, #40]	; (8006b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d90c      	bls.n	8006b88 <PCD_EP_OutSetupPacket_int+0x7c>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d108      	bne.n	8006b88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b80:	461a      	mov	r2, r3
 8006b82:	2101      	movs	r1, #1
 8006b84:	f008 fae8 	bl	800f158 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	4f54300a 	.word	0x4f54300a

08006b98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d107      	bne.n	8006bc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006bb6:	883b      	ldrh	r3, [r7, #0]
 8006bb8:	0419      	lsls	r1, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8006bc4:	e028      	b.n	8006c18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
 8006bd8:	e00d      	b.n	8006bf6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	3340      	adds	r3, #64	; 0x40
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	0c1b      	lsrs	r3, r3, #16
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4413      	add	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	73fb      	strb	r3, [r7, #15]
 8006bf6:	7bfa      	ldrb	r2, [r7, #15]
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d3ec      	bcc.n	8006bda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c00:	883b      	ldrh	r3, [r7, #0]
 8006c02:	0418      	lsls	r0, r3, #16
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6819      	ldr	r1, [r3, #0]
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	4302      	orrs	r2, r0
 8006c10:	3340      	adds	r3, #64	; 0x40
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	887a      	ldrh	r2, [r7, #2]
 8006c38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <HAL_PCDEx_ActivateLPM+0x44>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	10000003 	.word	0x10000003

08006c90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <HAL_PWREx_ConfigSupply+0x70>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d00a      	beq.n	8006cd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cbc:	4b16      	ldr	r3, [pc, #88]	; (8006d18 <HAL_PWREx_ConfigSupply+0x70>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d001      	beq.n	8006cce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e01f      	b.n	8006d0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e01d      	b.n	8006d0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cd2:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <HAL_PWREx_ConfigSupply+0x70>)
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f023 0207 	bic.w	r2, r3, #7
 8006cda:	490f      	ldr	r1, [pc, #60]	; (8006d18 <HAL_PWREx_ConfigSupply+0x70>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ce2:	f7fb f85b 	bl	8001d9c <HAL_GetTick>
 8006ce6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ce8:	e009      	b.n	8006cfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cea:	f7fb f857 	bl	8001d9c <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cf8:	d901      	bls.n	8006cfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e007      	b.n	8006d0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <HAL_PWREx_ConfigSupply+0x70>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0a:	d1ee      	bne.n	8006cea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	58024800 	.word	0x58024800

08006d1c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4a04      	ldr	r2, [pc, #16]	; (8006d38 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d2a:	60d3      	str	r3, [r2, #12]
}
 8006d2c:	bf00      	nop
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	58024800 	.word	0x58024800

08006d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08c      	sub	sp, #48	; 0x30
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e3ff      	b.n	800754e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 8087 	beq.w	8006e6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d5c:	4b99      	ldr	r3, [pc, #612]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d66:	4b97      	ldr	r3, [pc, #604]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	2b10      	cmp	r3, #16
 8006d70:	d007      	beq.n	8006d82 <HAL_RCC_OscConfig+0x46>
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	2b18      	cmp	r3, #24
 8006d76:	d110      	bne.n	8006d9a <HAL_RCC_OscConfig+0x5e>
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d10b      	bne.n	8006d9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d82:	4b90      	ldr	r3, [pc, #576]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d06c      	beq.n	8006e68 <HAL_RCC_OscConfig+0x12c>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d168      	bne.n	8006e68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e3d9      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da2:	d106      	bne.n	8006db2 <HAL_RCC_OscConfig+0x76>
 8006da4:	4b87      	ldr	r3, [pc, #540]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a86      	ldr	r2, [pc, #536]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	e02e      	b.n	8006e10 <HAL_RCC_OscConfig+0xd4>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10c      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x98>
 8006dba:	4b82      	ldr	r3, [pc, #520]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a81      	ldr	r2, [pc, #516]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	4b7f      	ldr	r3, [pc, #508]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a7e      	ldr	r2, [pc, #504]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	e01d      	b.n	8006e10 <HAL_RCC_OscConfig+0xd4>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCC_OscConfig+0xbc>
 8006dde:	4b79      	ldr	r3, [pc, #484]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a78      	ldr	r2, [pc, #480]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	4b76      	ldr	r3, [pc, #472]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a75      	ldr	r2, [pc, #468]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e00b      	b.n	8006e10 <HAL_RCC_OscConfig+0xd4>
 8006df8:	4b72      	ldr	r3, [pc, #456]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a71      	ldr	r2, [pc, #452]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	4b6f      	ldr	r3, [pc, #444]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a6e      	ldr	r2, [pc, #440]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d013      	beq.n	8006e40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fa ffc0 	bl	8001d9c <HAL_GetTick>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e20:	f7fa ffbc 	bl	8001d9c <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b64      	cmp	r3, #100	; 0x64
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e38d      	b.n	800754e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e32:	4b64      	ldr	r3, [pc, #400]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0xe4>
 8006e3e:	e014      	b.n	8006e6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e40:	f7fa ffac 	bl	8001d9c <HAL_GetTick>
 8006e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e48:	f7fa ffa8 	bl	8001d9c <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b64      	cmp	r3, #100	; 0x64
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e379      	b.n	800754e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e5a:	4b5a      	ldr	r3, [pc, #360]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f0      	bne.n	8006e48 <HAL_RCC_OscConfig+0x10c>
 8006e66:	e000      	b.n	8006e6a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80ae 	beq.w	8006fd4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e78:	4b52      	ldr	r3, [pc, #328]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e82:	4b50      	ldr	r3, [pc, #320]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <HAL_RCC_OscConfig+0x162>
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	2b18      	cmp	r3, #24
 8006e92:	d13a      	bne.n	8006f0a <HAL_RCC_OscConfig+0x1ce>
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d135      	bne.n	8006f0a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e9e:	4b49      	ldr	r3, [pc, #292]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d005      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x17a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e34b      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb6:	f7fa ff9f 	bl	8001df8 <HAL_GetREVID>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d817      	bhi.n	8006ef4 <HAL_RCC_OscConfig+0x1b8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b40      	cmp	r3, #64	; 0x40
 8006eca:	d108      	bne.n	8006ede <HAL_RCC_OscConfig+0x1a2>
 8006ecc:	4b3d      	ldr	r3, [pc, #244]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ed4:	4a3b      	ldr	r2, [pc, #236]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eda:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006edc:	e07a      	b.n	8006fd4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ede:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	031b      	lsls	r3, r3, #12
 8006eec:	4935      	ldr	r1, [pc, #212]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef2:	e06f      	b.n	8006fd4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef4:	4b33      	ldr	r3, [pc, #204]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	4930      	ldr	r1, [pc, #192]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f08:	e064      	b.n	8006fd4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d045      	beq.n	8006f9e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f12:	4b2c      	ldr	r3, [pc, #176]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f023 0219 	bic.w	r2, r3, #25
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	4929      	ldr	r1, [pc, #164]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f24:	f7fa ff3a 	bl	8001d9c <HAL_GetTick>
 8006f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f2c:	f7fa ff36 	bl	8001d9c <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e307      	b.n	800754e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f3e:	4b21      	ldr	r3, [pc, #132]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0f0      	beq.n	8006f2c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4a:	f7fa ff55 	bl	8001df8 <HAL_GetREVID>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	f241 0303 	movw	r3, #4099	; 0x1003
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d817      	bhi.n	8006f88 <HAL_RCC_OscConfig+0x24c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	d108      	bne.n	8006f72 <HAL_RCC_OscConfig+0x236>
 8006f60:	4b18      	ldr	r3, [pc, #96]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f68:	4a16      	ldr	r2, [pc, #88]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6e:	6053      	str	r3, [r2, #4]
 8006f70:	e030      	b.n	8006fd4 <HAL_RCC_OscConfig+0x298>
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	031b      	lsls	r3, r3, #12
 8006f80:	4910      	ldr	r1, [pc, #64]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	604b      	str	r3, [r1, #4]
 8006f86:	e025      	b.n	8006fd4 <HAL_RCC_OscConfig+0x298>
 8006f88:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	061b      	lsls	r3, r3, #24
 8006f96:	490b      	ldr	r1, [pc, #44]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	604b      	str	r3, [r1, #4]
 8006f9c:	e01a      	b.n	8006fd4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a08      	ldr	r2, [pc, #32]	; (8006fc4 <HAL_RCC_OscConfig+0x288>)
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006faa:	f7fa fef7 	bl	8001d9c <HAL_GetTick>
 8006fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fb0:	e00a      	b.n	8006fc8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fb2:	f7fa fef3 	bl	8001d9c <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d903      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e2c4      	b.n	800754e <HAL_RCC_OscConfig+0x812>
 8006fc4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fc8:	4ba4      	ldr	r3, [pc, #656]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1ee      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0310 	and.w	r3, r3, #16
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80a9 	beq.w	8007134 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fe2:	4b9e      	ldr	r3, [pc, #632]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fec:	4b9b      	ldr	r3, [pc, #620]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d007      	beq.n	8007008 <HAL_RCC_OscConfig+0x2cc>
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b18      	cmp	r3, #24
 8006ffc:	d13a      	bne.n	8007074 <HAL_RCC_OscConfig+0x338>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	2b01      	cmp	r3, #1
 8007006:	d135      	bne.n	8007074 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007008:	4b94      	ldr	r3, [pc, #592]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCC_OscConfig+0x2e4>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	2b80      	cmp	r3, #128	; 0x80
 800701a:	d001      	beq.n	8007020 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e296      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007020:	f7fa feea 	bl	8001df8 <HAL_GetREVID>
 8007024:	4602      	mov	r2, r0
 8007026:	f241 0303 	movw	r3, #4099	; 0x1003
 800702a:	429a      	cmp	r2, r3
 800702c:	d817      	bhi.n	800705e <HAL_RCC_OscConfig+0x322>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	2b20      	cmp	r3, #32
 8007034:	d108      	bne.n	8007048 <HAL_RCC_OscConfig+0x30c>
 8007036:	4b89      	ldr	r3, [pc, #548]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800703e:	4a87      	ldr	r2, [pc, #540]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007044:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007046:	e075      	b.n	8007134 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007048:	4b84      	ldr	r3, [pc, #528]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	069b      	lsls	r3, r3, #26
 8007056:	4981      	ldr	r1, [pc, #516]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007058:	4313      	orrs	r3, r2
 800705a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800705c:	e06a      	b.n	8007134 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800705e:	4b7f      	ldr	r3, [pc, #508]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	061b      	lsls	r3, r3, #24
 800706c:	497b      	ldr	r1, [pc, #492]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800706e:	4313      	orrs	r3, r2
 8007070:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007072:	e05f      	b.n	8007134 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d042      	beq.n	8007102 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800707c:	4b77      	ldr	r3, [pc, #476]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a76      	ldr	r2, [pc, #472]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7fa fe88 	bl	8001d9c <HAL_GetTick>
 800708c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007090:	f7fa fe84 	bl	8001d9c <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e255      	b.n	800754e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070a2:	4b6e      	ldr	r3, [pc, #440]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0f0      	beq.n	8007090 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070ae:	f7fa fea3 	bl	8001df8 <HAL_GetREVID>
 80070b2:	4602      	mov	r2, r0
 80070b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d817      	bhi.n	80070ec <HAL_RCC_OscConfig+0x3b0>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d108      	bne.n	80070d6 <HAL_RCC_OscConfig+0x39a>
 80070c4:	4b65      	ldr	r3, [pc, #404]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070cc:	4a63      	ldr	r2, [pc, #396]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80070ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d2:	6053      	str	r3, [r2, #4]
 80070d4:	e02e      	b.n	8007134 <HAL_RCC_OscConfig+0x3f8>
 80070d6:	4b61      	ldr	r3, [pc, #388]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	069b      	lsls	r3, r3, #26
 80070e4:	495d      	ldr	r1, [pc, #372]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	604b      	str	r3, [r1, #4]
 80070ea:	e023      	b.n	8007134 <HAL_RCC_OscConfig+0x3f8>
 80070ec:	4b5b      	ldr	r3, [pc, #364]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	061b      	lsls	r3, r3, #24
 80070fa:	4958      	ldr	r1, [pc, #352]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60cb      	str	r3, [r1, #12]
 8007100:	e018      	b.n	8007134 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007102:	4b56      	ldr	r3, [pc, #344]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a55      	ldr	r2, [pc, #340]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710e:	f7fa fe45 	bl	8001d9c <HAL_GetTick>
 8007112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007114:	e008      	b.n	8007128 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007116:	f7fa fe41 	bl	8001d9c <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e212      	b.n	800754e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007128:	4b4c      	ldr	r3, [pc, #304]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f0      	bne.n	8007116 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d036      	beq.n	80071ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d019      	beq.n	800717c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007148:	4b44      	ldr	r3, [pc, #272]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800714a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714c:	4a43      	ldr	r2, [pc, #268]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007154:	f7fa fe22 	bl	8001d9c <HAL_GetTick>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800715c:	f7fa fe1e 	bl	8001d9c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e1ef      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800716e:	4b3b      	ldr	r3, [pc, #236]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0x420>
 800717a:	e018      	b.n	80071ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800717c:	4b37      	ldr	r3, [pc, #220]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800717e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007180:	4a36      	ldr	r2, [pc, #216]	; (800725c <HAL_RCC_OscConfig+0x520>)
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007188:	f7fa fe08 	bl	8001d9c <HAL_GetTick>
 800718c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007190:	f7fa fe04 	bl	8001d9c <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e1d5      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071a2:	4b2e      	ldr	r3, [pc, #184]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80071a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1f0      	bne.n	8007190 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d036      	beq.n	8007228 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d019      	beq.n	80071f6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071c2:	4b26      	ldr	r3, [pc, #152]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a25      	ldr	r2, [pc, #148]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80071c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071ce:	f7fa fde5 	bl	8001d9c <HAL_GetTick>
 80071d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071d4:	e008      	b.n	80071e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80071d6:	f7fa fde1 	bl	8001d9c <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e1b2      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0f0      	beq.n	80071d6 <HAL_RCC_OscConfig+0x49a>
 80071f4:	e018      	b.n	8007228 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071f6:	4b19      	ldr	r3, [pc, #100]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a18      	ldr	r2, [pc, #96]	; (800725c <HAL_RCC_OscConfig+0x520>)
 80071fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007200:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007202:	f7fa fdcb 	bl	8001d9c <HAL_GetTick>
 8007206:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007208:	e008      	b.n	800721c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800720a:	f7fa fdc7 	bl	8001d9c <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e198      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800721c:	4b0f      	ldr	r3, [pc, #60]	; (800725c <HAL_RCC_OscConfig+0x520>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1f0      	bne.n	800720a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8085 	beq.w	8007340 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <HAL_RCC_OscConfig+0x524>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a09      	ldr	r2, [pc, #36]	; (8007260 <HAL_RCC_OscConfig+0x524>)
 800723c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007242:	f7fa fdab 	bl	8001d9c <HAL_GetTick>
 8007246:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007248:	e00c      	b.n	8007264 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800724a:	f7fa fda7 	bl	8001d9c <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b64      	cmp	r3, #100	; 0x64
 8007256:	d905      	bls.n	8007264 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e178      	b.n	800754e <HAL_RCC_OscConfig+0x812>
 800725c:	58024400 	.word	0x58024400
 8007260:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007264:	4b96      	ldr	r3, [pc, #600]	; (80074c0 <HAL_RCC_OscConfig+0x784>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0ec      	beq.n	800724a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d106      	bne.n	8007286 <HAL_RCC_OscConfig+0x54a>
 8007278:	4b92      	ldr	r3, [pc, #584]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	4a91      	ldr	r2, [pc, #580]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800727e:	f043 0301 	orr.w	r3, r3, #1
 8007282:	6713      	str	r3, [r2, #112]	; 0x70
 8007284:	e02d      	b.n	80072e2 <HAL_RCC_OscConfig+0x5a6>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10c      	bne.n	80072a8 <HAL_RCC_OscConfig+0x56c>
 800728e:	4b8d      	ldr	r3, [pc, #564]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	4a8c      	ldr	r2, [pc, #560]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007294:	f023 0301 	bic.w	r3, r3, #1
 8007298:	6713      	str	r3, [r2, #112]	; 0x70
 800729a:	4b8a      	ldr	r3, [pc, #552]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	4a89      	ldr	r2, [pc, #548]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072a0:	f023 0304 	bic.w	r3, r3, #4
 80072a4:	6713      	str	r3, [r2, #112]	; 0x70
 80072a6:	e01c      	b.n	80072e2 <HAL_RCC_OscConfig+0x5a6>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b05      	cmp	r3, #5
 80072ae:	d10c      	bne.n	80072ca <HAL_RCC_OscConfig+0x58e>
 80072b0:	4b84      	ldr	r3, [pc, #528]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	4a83      	ldr	r2, [pc, #524]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072b6:	f043 0304 	orr.w	r3, r3, #4
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70
 80072bc:	4b81      	ldr	r3, [pc, #516]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	4a80      	ldr	r2, [pc, #512]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	6713      	str	r3, [r2, #112]	; 0x70
 80072c8:	e00b      	b.n	80072e2 <HAL_RCC_OscConfig+0x5a6>
 80072ca:	4b7e      	ldr	r3, [pc, #504]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	4a7d      	ldr	r2, [pc, #500]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	6713      	str	r3, [r2, #112]	; 0x70
 80072d6:	4b7b      	ldr	r3, [pc, #492]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	4a7a      	ldr	r2, [pc, #488]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80072dc:	f023 0304 	bic.w	r3, r3, #4
 80072e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d015      	beq.n	8007316 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ea:	f7fa fd57 	bl	8001d9c <HAL_GetTick>
 80072ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072f0:	e00a      	b.n	8007308 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072f2:	f7fa fd53 	bl	8001d9c <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007300:	4293      	cmp	r3, r2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e122      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007308:	4b6e      	ldr	r3, [pc, #440]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0ee      	beq.n	80072f2 <HAL_RCC_OscConfig+0x5b6>
 8007314:	e014      	b.n	8007340 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007316:	f7fa fd41 	bl	8001d9c <HAL_GetTick>
 800731a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800731c:	e00a      	b.n	8007334 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800731e:	f7fa fd3d 	bl	8001d9c <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f241 3288 	movw	r2, #5000	; 0x1388
 800732c:	4293      	cmp	r3, r2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e10c      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007334:	4b63      	ldr	r3, [pc, #396]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1ee      	bne.n	800731e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8101 	beq.w	800754c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800734a:	4b5e      	ldr	r3, [pc, #376]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007352:	2b18      	cmp	r3, #24
 8007354:	f000 80bc 	beq.w	80074d0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b02      	cmp	r3, #2
 800735e:	f040 8095 	bne.w	800748c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007362:	4b58      	ldr	r3, [pc, #352]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a57      	ldr	r2, [pc, #348]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800736c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736e:	f7fa fd15 	bl	8001d9c <HAL_GetTick>
 8007372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007374:	e008      	b.n	8007388 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007376:	f7fa fd11 	bl	8001d9c <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e0e2      	b.n	800754e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007388:	4b4e      	ldr	r3, [pc, #312]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f0      	bne.n	8007376 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007394:	4b4b      	ldr	r3, [pc, #300]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007398:	4b4b      	ldr	r3, [pc, #300]	; (80074c8 <HAL_RCC_OscConfig+0x78c>)
 800739a:	4013      	ands	r3, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073a4:	0112      	lsls	r2, r2, #4
 80073a6:	430a      	orrs	r2, r1
 80073a8:	4946      	ldr	r1, [pc, #280]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	628b      	str	r3, [r1, #40]	; 0x28
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	3b01      	subs	r3, #1
 80073b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073bc:	3b01      	subs	r3, #1
 80073be:	025b      	lsls	r3, r3, #9
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	3b01      	subs	r3, #1
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d6:	3b01      	subs	r3, #1
 80073d8:	061b      	lsls	r3, r3, #24
 80073da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073de:	4939      	ldr	r1, [pc, #228]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80073e4:	4b37      	ldr	r3, [pc, #220]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	4a36      	ldr	r2, [pc, #216]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073f0:	4b34      	ldr	r3, [pc, #208]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80073f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f4:	4b35      	ldr	r3, [pc, #212]	; (80074cc <HAL_RCC_OscConfig+0x790>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073fc:	00d2      	lsls	r2, r2, #3
 80073fe:	4931      	ldr	r1, [pc, #196]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007400:	4313      	orrs	r3, r2
 8007402:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007404:	4b2f      	ldr	r3, [pc, #188]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	f023 020c 	bic.w	r2, r3, #12
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	492c      	ldr	r1, [pc, #176]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007412:	4313      	orrs	r3, r2
 8007414:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007416:	4b2b      	ldr	r3, [pc, #172]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	f023 0202 	bic.w	r2, r3, #2
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	4928      	ldr	r1, [pc, #160]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007424:	4313      	orrs	r3, r2
 8007426:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007428:	4b26      	ldr	r3, [pc, #152]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	4a25      	ldr	r2, [pc, #148]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800742e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007434:	4b23      	ldr	r3, [pc, #140]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800743a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800743e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007440:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	4a1f      	ldr	r2, [pc, #124]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800744a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800744c:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	4a1c      	ldr	r2, [pc, #112]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a19      	ldr	r2, [pc, #100]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800745e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fa fc9a 	bl	8001d9c <HAL_GetTick>
 8007468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800746c:	f7fa fc96 	bl	8001d9c <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e067      	b.n	800754e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800747e:	4b11      	ldr	r3, [pc, #68]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0f0      	beq.n	800746c <HAL_RCC_OscConfig+0x730>
 800748a:	e05f      	b.n	800754c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800748c:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0c      	ldr	r2, [pc, #48]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 8007492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fa fc80 	bl	8001d9c <HAL_GetTick>
 800749c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074a0:	f7fa fc7c 	bl	8001d9c <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e04d      	b.n	800754e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074b2:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <HAL_RCC_OscConfig+0x788>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f0      	bne.n	80074a0 <HAL_RCC_OscConfig+0x764>
 80074be:	e045      	b.n	800754c <HAL_RCC_OscConfig+0x810>
 80074c0:	58024800 	.word	0x58024800
 80074c4:	58024400 	.word	0x58024400
 80074c8:	fffffc0c 	.word	0xfffffc0c
 80074cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074d0:	4b21      	ldr	r3, [pc, #132]	; (8007558 <HAL_RCC_OscConfig+0x81c>)
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074d6:	4b20      	ldr	r3, [pc, #128]	; (8007558 <HAL_RCC_OscConfig+0x81c>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d031      	beq.n	8007548 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f003 0203 	and.w	r2, r3, #3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d12a      	bne.n	8007548 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	091b      	lsrs	r3, r3, #4
 80074f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fe:	429a      	cmp	r2, r3
 8007500:	d122      	bne.n	8007548 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800750e:	429a      	cmp	r2, r3
 8007510:	d11a      	bne.n	8007548 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	0a5b      	lsrs	r3, r3, #9
 8007516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d111      	bne.n	8007548 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	0c1b      	lsrs	r3, r3, #16
 8007528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007532:	429a      	cmp	r2, r3
 8007534:	d108      	bne.n	8007548 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	0e1b      	lsrs	r3, r3, #24
 800753a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007544:	429a      	cmp	r2, r3
 8007546:	d001      	beq.n	800754c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3730      	adds	r7, #48	; 0x30
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	58024400 	.word	0x58024400

0800755c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e19c      	b.n	80078aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007570:	4b8a      	ldr	r3, [pc, #552]	; (800779c <HAL_RCC_ClockConfig+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d910      	bls.n	80075a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757e:	4b87      	ldr	r3, [pc, #540]	; (800779c <HAL_RCC_ClockConfig+0x240>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f023 020f 	bic.w	r2, r3, #15
 8007586:	4985      	ldr	r1, [pc, #532]	; (800779c <HAL_RCC_ClockConfig+0x240>)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	4313      	orrs	r3, r2
 800758c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800758e:	4b83      	ldr	r3, [pc, #524]	; (800779c <HAL_RCC_ClockConfig+0x240>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d001      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e184      	b.n	80078aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	4b7b      	ldr	r3, [pc, #492]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d908      	bls.n	80075ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075bc:	4b78      	ldr	r3, [pc, #480]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	4975      	ldr	r1, [pc, #468]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d010      	beq.n	80075fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695a      	ldr	r2, [r3, #20]
 80075de:	4b70      	ldr	r3, [pc, #448]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d908      	bls.n	80075fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075ea:	4b6d      	ldr	r3, [pc, #436]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	496a      	ldr	r1, [pc, #424]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	d010      	beq.n	800762a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	4b64      	ldr	r3, [pc, #400]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007614:	429a      	cmp	r2, r3
 8007616:	d908      	bls.n	800762a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007618:	4b61      	ldr	r3, [pc, #388]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	495e      	ldr	r1, [pc, #376]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 8007626:	4313      	orrs	r3, r2
 8007628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	4b59      	ldr	r3, [pc, #356]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007642:	429a      	cmp	r2, r3
 8007644:	d908      	bls.n	8007658 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007646:	4b56      	ldr	r3, [pc, #344]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	4953      	ldr	r1, [pc, #332]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 8007654:	4313      	orrs	r3, r2
 8007656:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d010      	beq.n	8007686 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	4b4d      	ldr	r3, [pc, #308]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	429a      	cmp	r2, r3
 8007672:	d908      	bls.n	8007686 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007674:	4b4a      	ldr	r3, [pc, #296]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f023 020f 	bic.w	r2, r3, #15
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	4947      	ldr	r1, [pc, #284]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 8007682:	4313      	orrs	r3, r2
 8007684:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d055      	beq.n	800773e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007692:	4b43      	ldr	r3, [pc, #268]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	4940      	ldr	r1, [pc, #256]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d107      	bne.n	80076bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076ac:	4b3c      	ldr	r3, [pc, #240]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d121      	bne.n	80076fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0f6      	b.n	80078aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d107      	bne.n	80076d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076c4:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d115      	bne.n	80076fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0ea      	b.n	80078aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d107      	bne.n	80076ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076dc:	4b30      	ldr	r3, [pc, #192]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d109      	bne.n	80076fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e0de      	b.n	80078aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076ec:	4b2c      	ldr	r3, [pc, #176]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0d6      	b.n	80078aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076fc:	4b28      	ldr	r3, [pc, #160]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f023 0207 	bic.w	r2, r3, #7
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	4925      	ldr	r1, [pc, #148]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 800770a:	4313      	orrs	r3, r2
 800770c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770e:	f7fa fb45 	bl	8001d9c <HAL_GetTick>
 8007712:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007714:	e00a      	b.n	800772c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007716:	f7fa fb41 	bl	8001d9c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f241 3288 	movw	r2, #5000	; 0x1388
 8007724:	4293      	cmp	r3, r2
 8007726:	d901      	bls.n	800772c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e0be      	b.n	80078aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800772c:	4b1c      	ldr	r3, [pc, #112]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	429a      	cmp	r2, r3
 800773c:	d1eb      	bne.n	8007716 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d010      	beq.n	800776c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	429a      	cmp	r2, r3
 8007758:	d208      	bcs.n	800776c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800775a:	4b11      	ldr	r3, [pc, #68]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f023 020f 	bic.w	r2, r3, #15
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	490e      	ldr	r1, [pc, #56]	; (80077a0 <HAL_RCC_ClockConfig+0x244>)
 8007768:	4313      	orrs	r3, r2
 800776a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800776c:	4b0b      	ldr	r3, [pc, #44]	; (800779c <HAL_RCC_ClockConfig+0x240>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d214      	bcs.n	80077a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b08      	ldr	r3, [pc, #32]	; (800779c <HAL_RCC_ClockConfig+0x240>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 020f 	bic.w	r2, r3, #15
 8007782:	4906      	ldr	r1, [pc, #24]	; (800779c <HAL_RCC_ClockConfig+0x240>)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	4313      	orrs	r3, r2
 8007788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b04      	ldr	r3, [pc, #16]	; (800779c <HAL_RCC_ClockConfig+0x240>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d005      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e086      	b.n	80078aa <HAL_RCC_ClockConfig+0x34e>
 800779c:	52002000 	.word	0x52002000
 80077a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d010      	beq.n	80077d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	4b3f      	ldr	r3, [pc, #252]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077bc:	429a      	cmp	r2, r3
 80077be:	d208      	bcs.n	80077d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077c0:	4b3c      	ldr	r3, [pc, #240]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	4939      	ldr	r1, [pc, #228]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0308 	and.w	r3, r3, #8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d010      	beq.n	8007800 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d208      	bcs.n	8007800 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077ee:	4b31      	ldr	r3, [pc, #196]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	492e      	ldr	r1, [pc, #184]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	d010      	beq.n	800782e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	4b28      	ldr	r3, [pc, #160]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007818:	429a      	cmp	r2, r3
 800781a:	d208      	bcs.n	800782e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800781c:	4b25      	ldr	r3, [pc, #148]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	4922      	ldr	r1, [pc, #136]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 800782a:	4313      	orrs	r3, r2
 800782c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d010      	beq.n	800785c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	4b1d      	ldr	r3, [pc, #116]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007846:	429a      	cmp	r2, r3
 8007848:	d208      	bcs.n	800785c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800784a:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	4917      	ldr	r1, [pc, #92]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 8007858:	4313      	orrs	r3, r2
 800785a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800785c:	f000 f844 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
 8007860:	4601      	mov	r1, r0
 8007862:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	4a12      	ldr	r2, [pc, #72]	; (80078b8 <HAL_RCC_ClockConfig+0x35c>)
 800786e:	5cd3      	ldrb	r3, [r2, r3]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	fa21 f303 	lsr.w	r3, r1, r3
 8007878:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800787a:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <HAL_RCC_ClockConfig+0x358>)
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	4a0d      	ldr	r2, [pc, #52]	; (80078b8 <HAL_RCC_ClockConfig+0x35c>)
 8007884:	5cd3      	ldrb	r3, [r2, r3]
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <HAL_RCC_ClockConfig+0x360>)
 8007892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007894:	4a0a      	ldr	r2, [pc, #40]	; (80078c0 <HAL_RCC_ClockConfig+0x364>)
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <HAL_RCC_ClockConfig+0x368>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fa fa32 	bl	8001d08 <HAL_InitTick>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	58024400 	.word	0x58024400
 80078b8:	080169e8 	.word	0x080169e8
 80078bc:	24000004 	.word	0x24000004
 80078c0:	24000000 	.word	0x24000000
 80078c4:	24000008 	.word	0x24000008

080078c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <HAL_RCC_EnableCSS+0x1c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <HAL_RCC_EnableCSS+0x1c>)
 80078d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078d6:	6013      	str	r3, [r2, #0]
}
 80078d8:	bf00      	nop
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	58024400 	.word	0x58024400

080078e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b089      	sub	sp, #36	; 0x24
 80078ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078ee:	4baf      	ldr	r3, [pc, #700]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078f6:	2b18      	cmp	r3, #24
 80078f8:	f200 814e 	bhi.w	8007b98 <HAL_RCC_GetSysClockFreq+0x2b0>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <HAL_RCC_GetSysClockFreq+0x1c>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007969 	.word	0x08007969
 8007908:	08007b99 	.word	0x08007b99
 800790c:	08007b99 	.word	0x08007b99
 8007910:	08007b99 	.word	0x08007b99
 8007914:	08007b99 	.word	0x08007b99
 8007918:	08007b99 	.word	0x08007b99
 800791c:	08007b99 	.word	0x08007b99
 8007920:	08007b99 	.word	0x08007b99
 8007924:	0800798f 	.word	0x0800798f
 8007928:	08007b99 	.word	0x08007b99
 800792c:	08007b99 	.word	0x08007b99
 8007930:	08007b99 	.word	0x08007b99
 8007934:	08007b99 	.word	0x08007b99
 8007938:	08007b99 	.word	0x08007b99
 800793c:	08007b99 	.word	0x08007b99
 8007940:	08007b99 	.word	0x08007b99
 8007944:	08007995 	.word	0x08007995
 8007948:	08007b99 	.word	0x08007b99
 800794c:	08007b99 	.word	0x08007b99
 8007950:	08007b99 	.word	0x08007b99
 8007954:	08007b99 	.word	0x08007b99
 8007958:	08007b99 	.word	0x08007b99
 800795c:	08007b99 	.word	0x08007b99
 8007960:	08007b99 	.word	0x08007b99
 8007964:	0800799b 	.word	0x0800799b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007968:	4b90      	ldr	r3, [pc, #576]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007974:	4b8d      	ldr	r3, [pc, #564]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	08db      	lsrs	r3, r3, #3
 800797a:	f003 0303 	and.w	r3, r3, #3
 800797e:	4a8c      	ldr	r2, [pc, #560]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
 8007984:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007986:	e10a      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007988:	4b89      	ldr	r3, [pc, #548]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800798a:	61bb      	str	r3, [r7, #24]
    break;
 800798c:	e107      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800798e:	4b89      	ldr	r3, [pc, #548]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007990:	61bb      	str	r3, [r7, #24]
    break;
 8007992:	e104      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007994:	4b88      	ldr	r3, [pc, #544]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007996:	61bb      	str	r3, [r7, #24]
    break;
 8007998:	e101      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800799a:	4b84      	ldr	r3, [pc, #528]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80079a4:	4b81      	ldr	r3, [pc, #516]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	091b      	lsrs	r3, r3, #4
 80079aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80079b0:	4b7e      	ldr	r3, [pc, #504]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80079ba:	4b7c      	ldr	r3, [pc, #496]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079be:	08db      	lsrs	r3, r3, #3
 80079c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	fb02 f303 	mul.w	r3, r2, r3
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80da 	beq.w	8007b92 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d05a      	beq.n	8007a9a <HAL_RCC_GetSysClockFreq+0x1b2>
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d302      	bcc.n	80079ee <HAL_RCC_GetSysClockFreq+0x106>
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d078      	beq.n	8007ade <HAL_RCC_GetSysClockFreq+0x1f6>
 80079ec:	e099      	b.n	8007b22 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ee:	4b6f      	ldr	r3, [pc, #444]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d02d      	beq.n	8007a56 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079fa:	4b6c      	ldr	r3, [pc, #432]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	08db      	lsrs	r3, r3, #3
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	4a6a      	ldr	r2, [pc, #424]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007a06:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a24:	4b61      	ldr	r3, [pc, #388]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2c:	ee07 3a90 	vmov	s15, r3
 8007a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a34:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a38:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8007a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007a54:	e087      	b.n	8007b66 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	ee07 3a90 	vmov	s15, r3
 8007a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a60:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007bc0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a68:	4b50      	ldr	r3, [pc, #320]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a70:	ee07 3a90 	vmov	s15, r3
 8007a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a78:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a7c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8007a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a98:	e065      	b.n	8007b66 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007bc4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aac:	4b3f      	ldr	r3, [pc, #252]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab4:	ee07 3a90 	vmov	s15, r3
 8007ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007abc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ac0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8007ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007adc:	e043      	b.n	8007b66 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	ee07 3a90 	vmov	s15, r3
 8007ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007bc8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af0:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af8:	ee07 3a90 	vmov	s15, r3
 8007afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b00:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b04:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8007b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b20:	e021      	b.n	8007b66 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007bc4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b34:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3c:	ee07 3a90 	vmov	s15, r3
 8007b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b44:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b48:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007bbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8007b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b64:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007b66:	4b11      	ldr	r3, [pc, #68]	; (8007bac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	0a5b      	lsrs	r3, r3, #9
 8007b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b70:	3301      	adds	r3, #1
 8007b72:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b8a:	ee17 3a90 	vmov	r3, s15
 8007b8e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007b90:	e005      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61bb      	str	r3, [r7, #24]
    break;
 8007b96:	e002      	b.n	8007b9e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007b9a:	61bb      	str	r3, [r7, #24]
    break;
 8007b9c:	bf00      	nop
  }

  return sysclockfreq;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3724      	adds	r7, #36	; 0x24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	58024400 	.word	0x58024400
 8007bb0:	03d09000 	.word	0x03d09000
 8007bb4:	003d0900 	.word	0x003d0900
 8007bb8:	017d7840 	.word	0x017d7840
 8007bbc:	46000000 	.word	0x46000000
 8007bc0:	4c742400 	.word	0x4c742400
 8007bc4:	4a742400 	.word	0x4a742400
 8007bc8:	4bbebc20 	.word	0x4bbebc20

08007bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007bd2:	f7ff fe89 	bl	80078e8 <HAL_RCC_GetSysClockFreq>
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	0a1b      	lsrs	r3, r3, #8
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	4a0f      	ldr	r2, [pc, #60]	; (8007c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8007be4:	5cd3      	ldrb	r3, [r2, r3]
 8007be6:	f003 031f 	and.w	r3, r3, #31
 8007bea:	fa21 f303 	lsr.w	r3, r1, r3
 8007bee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8007bfa:	5cd3      	ldrb	r3, [r2, r3]
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	4a07      	ldr	r2, [pc, #28]	; (8007c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c0a:	4a07      	ldr	r2, [pc, #28]	; (8007c28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c10:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c12:	681b      	ldr	r3, [r3, #0]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	58024400 	.word	0x58024400
 8007c20:	080169e8 	.word	0x080169e8
 8007c24:	24000004 	.word	0x24000004
 8007c28:	24000000 	.word	0x24000000

08007c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c30:	f7ff ffcc 	bl	8007bcc <HAL_RCC_GetHCLKFreq>
 8007c34:	4601      	mov	r1, r0
 8007c36:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	091b      	lsrs	r3, r3, #4
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	4a04      	ldr	r2, [pc, #16]	; (8007c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c42:	5cd3      	ldrb	r3, [r2, r3]
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	58024400 	.word	0x58024400
 8007c54:	080169e8 	.word	0x080169e8

08007c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007c5c:	f7ff ffb6 	bl	8007bcc <HAL_RCC_GetHCLKFreq>
 8007c60:	4601      	mov	r1, r0
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	0a1b      	lsrs	r3, r3, #8
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c6e:	5cd3      	ldrb	r3, [r2, r3]
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	080169e8 	.word	0x080169e8

08007c84 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c94:	d105      	bne.n	8007ca2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8007c96:	f000 f809 	bl	8007cac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007c9a:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ca0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8007ca2:	bf00      	nop
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400

08007cac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007cc8:	2300      	movs	r3, #0
 8007cca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d03d      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ce0:	d013      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ce6:	d802      	bhi.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007cec:	e01f      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cf2:	d013      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007cf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cf8:	d01c      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007cfa:	e018      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfc:	4baf      	ldr	r3, [pc, #700]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	4aae      	ldr	r2, [pc, #696]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d08:	e015      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	2102      	movs	r1, #2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 fd33 	bl	800977c <RCCEx_PLL2_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d1a:	e00c      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3324      	adds	r3, #36	; 0x24
 8007d20:	2102      	movs	r1, #2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fddc 	bl	80098e0 <RCCEx_PLL3_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007d2c:	e003      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
      break;
 8007d32:	e000      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d3c:	4b9f      	ldr	r3, [pc, #636]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d48:	499c      	ldr	r1, [pc, #624]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	650b      	str	r3, [r1, #80]	; 0x50
 8007d4e:	e001      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d03d      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d826      	bhi.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d85 	.word	0x08007d85
 8007d74:	08007d93 	.word	0x08007d93
 8007d78:	08007da5 	.word	0x08007da5
 8007d7c:	08007dbd 	.word	0x08007dbd
 8007d80:	08007dbd 	.word	0x08007dbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d84:	4b8d      	ldr	r3, [pc, #564]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	4a8c      	ldr	r2, [pc, #560]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d90:	e015      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3304      	adds	r3, #4
 8007d96:	2100      	movs	r1, #0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f001 fcef 	bl	800977c <RCCEx_PLL2_Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007da2:	e00c      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3324      	adds	r3, #36	; 0x24
 8007da8:	2100      	movs	r1, #0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f001 fd98 	bl	80098e0 <RCCEx_PLL3_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007db4:	e003      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	75fb      	strb	r3, [r7, #23]
      break;
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dc4:	4b7d      	ldr	r3, [pc, #500]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc8:	f023 0207 	bic.w	r2, r3, #7
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd0:	497a      	ldr	r1, [pc, #488]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	650b      	str	r3, [r1, #80]	; 0x50
 8007dd6:	e001      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d03e      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dec:	2b80      	cmp	r3, #128	; 0x80
 8007dee:	d01c      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d804      	bhi.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007df8:	2b40      	cmp	r3, #64	; 0x40
 8007dfa:	d00d      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007dfc:	e01e      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8007e00:	d01f      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e06:	d01e      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007e08:	e018      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0a:	4b6c      	ldr	r3, [pc, #432]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	4a6b      	ldr	r2, [pc, #428]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e16:	e017      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f001 fcac 	bl	800977c <RCCEx_PLL2_Config>
 8007e24:	4603      	mov	r3, r0
 8007e26:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e28:	e00e      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3324      	adds	r3, #36	; 0x24
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f001 fd55 	bl	80098e0 <RCCEx_PLL3_Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007e3a:	e005      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e40:	e002      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007e42:	bf00      	nop
 8007e44:	e000      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e4e:	4b5b      	ldr	r3, [pc, #364]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e52:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5a:	4958      	ldr	r1, [pc, #352]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	650b      	str	r3, [r1, #80]	; 0x50
 8007e60:	e001      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d044      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e7c:	d01f      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e82:	d805      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00a      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e8c:	d00e      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007e8e:	e01f      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007e90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e94:	d01f      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e9a:	d01e      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007e9c:	e018      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9e:	4b47      	ldr	r3, [pc, #284]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	4a46      	ldr	r2, [pc, #280]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007eaa:	e017      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fc62 	bl	800977c <RCCEx_PLL2_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007ebc:	e00e      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3324      	adds	r3, #36	; 0x24
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 fd0b 	bl	80098e0 <RCCEx_PLL3_Config>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ece:	e005      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed4:	e002      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007ed6:	bf00      	nop
 8007ed8:	e000      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ee2:	4b36      	ldr	r3, [pc, #216]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ef0:	4932      	ldr	r1, [pc, #200]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ef6:	e001      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d044      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f12:	d01f      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f18:	d805      	bhi.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f22:	d00e      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007f24:	e01f      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007f26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f2a:	d01f      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f30:	d01e      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007f32:	e018      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f34:	4b21      	ldr	r3, [pc, #132]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f40:	e017      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3304      	adds	r3, #4
 8007f46:	2100      	movs	r1, #0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f001 fc17 	bl	800977c <RCCEx_PLL2_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f52:	e00e      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3324      	adds	r3, #36	; 0x24
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 fcc0 	bl	80098e0 <RCCEx_PLL3_Config>
 8007f60:	4603      	mov	r3, r0
 8007f62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f64:	e005      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6a:	e002      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007f6c:	bf00      	nop
 8007f6e:	e000      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f78:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f86:	490d      	ldr	r1, [pc, #52]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	658b      	str	r3, [r1, #88]	; 0x58
 8007f8c:	e001      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d035      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa2:	2b10      	cmp	r3, #16
 8007fa4:	d00c      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007fa6:	2b10      	cmp	r3, #16
 8007fa8:	d802      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01b      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007fae:	e017      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007fb0:	2b20      	cmp	r3, #32
 8007fb2:	d00c      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007fb4:	2b30      	cmp	r3, #48	; 0x30
 8007fb6:	d018      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007fb8:	e012      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007fba:	bf00      	nop
 8007fbc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc0:	4baf      	ldr	r3, [pc, #700]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	4aae      	ldr	r2, [pc, #696]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fcc:	e00e      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 fbd1 	bl	800977c <RCCEx_PLL2_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fde:	e005      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe4:	e002      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007fe6:	bf00      	nop
 8007fe8:	e000      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d109      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ff2:	4ba3      	ldr	r3, [pc, #652]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ffe:	49a0      	ldr	r1, [pc, #640]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008000:	4313      	orrs	r3, r2
 8008002:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008004:	e001      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d042      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801e:	d01f      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008024:	d805      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800802a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802e:	d00e      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008030:	e01f      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008036:	d01f      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800803c:	d01e      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800803e:	e018      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008040:	4b8f      	ldr	r3, [pc, #572]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	4a8e      	ldr	r2, [pc, #568]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800804a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800804c:	e017      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3304      	adds	r3, #4
 8008052:	2100      	movs	r1, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f001 fb91 	bl	800977c <RCCEx_PLL2_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800805e:	e00e      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3324      	adds	r3, #36	; 0x24
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f001 fc3a 	bl	80098e0 <RCCEx_PLL3_Config>
 800806c:	4603      	mov	r3, r0
 800806e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008070:	e005      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	75fb      	strb	r3, [r7, #23]
      break;
 8008076:	e002      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008078:	bf00      	nop
 800807a:	e000      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800807c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008084:	4b7e      	ldr	r3, [pc, #504]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008088:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008090:	497b      	ldr	r1, [pc, #492]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008092:	4313      	orrs	r3, r2
 8008094:	650b      	str	r3, [r1, #80]	; 0x50
 8008096:	e001      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d042      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b0:	d01b      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80080b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b6:	d805      	bhi.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d022      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80080bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c0:	d00a      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80080c2:	e01b      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x440>
 80080c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080c8:	d01d      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80080ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080ce:	d01c      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80080d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080d4:	d01b      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80080d6:	e011      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	2101      	movs	r1, #1
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fb4c 	bl	800977c <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080e8:	e012      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3324      	adds	r3, #36	; 0x24
 80080ee:	2101      	movs	r1, #1
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 fbf5 	bl	80098e0 <RCCEx_PLL3_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080fa:	e009      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008100:	e006      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008102:	bf00      	nop
 8008104:	e004      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008106:	bf00      	nop
 8008108:	e002      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800810a:	bf00      	nop
 800810c:	e000      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800810e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008116:	4b5a      	ldr	r3, [pc, #360]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008122:	4957      	ldr	r1, [pc, #348]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008124:	4313      	orrs	r3, r2
 8008126:	650b      	str	r3, [r1, #80]	; 0x50
 8008128:	e001      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d044      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008144:	d01b      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814a:	d805      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d022      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008154:	d00a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008156:	e01b      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d01d      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800815e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008162:	d01c      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008164:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008168:	d01b      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800816a:	e011      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fb02 	bl	800977c <RCCEx_PLL2_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800817c:	e012      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3324      	adds	r3, #36	; 0x24
 8008182:	2101      	movs	r1, #1
 8008184:	4618      	mov	r0, r3
 8008186:	f001 fbab 	bl	80098e0 <RCCEx_PLL3_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800818e:	e009      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]
      break;
 8008194:	e006      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008196:	bf00      	nop
 8008198:	e004      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800819a:	bf00      	nop
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80081a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081aa:	4b35      	ldr	r3, [pc, #212]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081b8:	4931      	ldr	r1, [pc, #196]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	658b      	str	r3, [r1, #88]	; 0x58
 80081be:	e001      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d02d      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081d8:	d005      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80081da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081de:	d009      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d013      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80081e4:	e00f      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e6:	4b26      	ldr	r3, [pc, #152]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	4a25      	ldr	r2, [pc, #148]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80081f2:	e00c      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	2101      	movs	r1, #1
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 fabe 	bl	800977c <RCCEx_PLL2_Config>
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008204:	e003      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	75fb      	strb	r3, [r7, #23]
      break;
 800820a:	e000      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800820c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008214:	4b1a      	ldr	r3, [pc, #104]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008218:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008220:	4917      	ldr	r1, [pc, #92]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008222:	4313      	orrs	r3, r2
 8008224:	650b      	str	r3, [r1, #80]	; 0x50
 8008226:	e001      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d035      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823c:	2b03      	cmp	r3, #3
 800823e:	d81b      	bhi.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	08008285 	.word	0x08008285
 800824c:	08008259 	.word	0x08008259
 8008250:	08008267 	.word	0x08008267
 8008254:	08008285 	.word	0x08008285
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008258:	4b09      	ldr	r3, [pc, #36]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a08      	ldr	r2, [pc, #32]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800825e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008264:	e00f      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3304      	adds	r3, #4
 800826a:	2102      	movs	r1, #2
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fa85 	bl	800977c <RCCEx_PLL2_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008276:	e006      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]
      break;
 800827c:	e003      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800827e:	bf00      	nop
 8008280:	58024400 	.word	0x58024400
      break;
 8008284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d109      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800828c:	4bba      	ldr	r3, [pc, #744]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800828e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008290:	f023 0203 	bic.w	r2, r3, #3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008298:	49b7      	ldr	r1, [pc, #732]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800829a:	4313      	orrs	r3, r2
 800829c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800829e:	e001      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8086 	beq.w	80083be <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082b2:	4bb2      	ldr	r3, [pc, #712]	; (800857c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4ab1      	ldr	r2, [pc, #708]	; (800857c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80082b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082be:	f7f9 fd6d 	bl	8001d9c <HAL_GetTick>
 80082c2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082c4:	e009      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c6:	f7f9 fd69 	bl	8001d9c <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b64      	cmp	r3, #100	; 0x64
 80082d2:	d902      	bls.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
        break;
 80082d8:	e005      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082da:	4ba8      	ldr	r3, [pc, #672]	; (800857c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0ef      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d166      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082ec:	4ba2      	ldr	r3, [pc, #648]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082f6:	4053      	eors	r3, r2
 80082f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d013      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008300:	4b9d      	ldr	r3, [pc, #628]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008308:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800830a:	4b9b      	ldr	r3, [pc, #620]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800830c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830e:	4a9a      	ldr	r2, [pc, #616]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008314:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008316:	4b98      	ldr	r3, [pc, #608]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831a:	4a97      	ldr	r2, [pc, #604]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800831c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008320:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008322:	4a95      	ldr	r2, [pc, #596]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800832e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008332:	d115      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008334:	f7f9 fd32 	bl	8001d9c <HAL_GetTick>
 8008338:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800833a:	e00b      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800833c:	f7f9 fd2e 	bl	8001d9c <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	f241 3288 	movw	r2, #5000	; 0x1388
 800834a:	4293      	cmp	r3, r2
 800834c:	d902      	bls.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	75fb      	strb	r3, [r7, #23]
            break;
 8008352:	e005      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008354:	4b88      	ldr	r3, [pc, #544]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0ed      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d126      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800836c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008374:	d10d      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008376:	4b80      	ldr	r3, [pc, #512]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008384:	0919      	lsrs	r1, r3, #4
 8008386:	4b7e      	ldr	r3, [pc, #504]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008388:	400b      	ands	r3, r1
 800838a:	497b      	ldr	r1, [pc, #492]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800838c:	4313      	orrs	r3, r2
 800838e:	610b      	str	r3, [r1, #16]
 8008390:	e005      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008392:	4b79      	ldr	r3, [pc, #484]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	4a78      	ldr	r2, [pc, #480]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008398:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800839c:	6113      	str	r3, [r2, #16]
 800839e:	4b76      	ldr	r3, [pc, #472]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ac:	4972      	ldr	r1, [pc, #456]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	670b      	str	r3, [r1, #112]	; 0x70
 80083b2:	e004      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	75bb      	strb	r3, [r7, #22]
 80083b8:	e001      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d07d      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ce:	2b28      	cmp	r3, #40	; 0x28
 80083d0:	d866      	bhi.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80083d2:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80083d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d8:	080084a7 	.word	0x080084a7
 80083dc:	080084a1 	.word	0x080084a1
 80083e0:	080084a1 	.word	0x080084a1
 80083e4:	080084a1 	.word	0x080084a1
 80083e8:	080084a1 	.word	0x080084a1
 80083ec:	080084a1 	.word	0x080084a1
 80083f0:	080084a1 	.word	0x080084a1
 80083f4:	080084a1 	.word	0x080084a1
 80083f8:	0800847d 	.word	0x0800847d
 80083fc:	080084a1 	.word	0x080084a1
 8008400:	080084a1 	.word	0x080084a1
 8008404:	080084a1 	.word	0x080084a1
 8008408:	080084a1 	.word	0x080084a1
 800840c:	080084a1 	.word	0x080084a1
 8008410:	080084a1 	.word	0x080084a1
 8008414:	080084a1 	.word	0x080084a1
 8008418:	0800848f 	.word	0x0800848f
 800841c:	080084a1 	.word	0x080084a1
 8008420:	080084a1 	.word	0x080084a1
 8008424:	080084a1 	.word	0x080084a1
 8008428:	080084a1 	.word	0x080084a1
 800842c:	080084a1 	.word	0x080084a1
 8008430:	080084a1 	.word	0x080084a1
 8008434:	080084a1 	.word	0x080084a1
 8008438:	080084a7 	.word	0x080084a7
 800843c:	080084a1 	.word	0x080084a1
 8008440:	080084a1 	.word	0x080084a1
 8008444:	080084a1 	.word	0x080084a1
 8008448:	080084a1 	.word	0x080084a1
 800844c:	080084a1 	.word	0x080084a1
 8008450:	080084a1 	.word	0x080084a1
 8008454:	080084a1 	.word	0x080084a1
 8008458:	080084a7 	.word	0x080084a7
 800845c:	080084a1 	.word	0x080084a1
 8008460:	080084a1 	.word	0x080084a1
 8008464:	080084a1 	.word	0x080084a1
 8008468:	080084a1 	.word	0x080084a1
 800846c:	080084a1 	.word	0x080084a1
 8008470:	080084a1 	.word	0x080084a1
 8008474:	080084a1 	.word	0x080084a1
 8008478:	080084a7 	.word	0x080084a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3304      	adds	r3, #4
 8008480:	2101      	movs	r1, #1
 8008482:	4618      	mov	r0, r3
 8008484:	f001 f97a 	bl	800977c <RCCEx_PLL2_Config>
 8008488:	4603      	mov	r3, r0
 800848a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800848c:	e00c      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3324      	adds	r3, #36	; 0x24
 8008492:	2101      	movs	r1, #1
 8008494:	4618      	mov	r0, r3
 8008496:	f001 fa23 	bl	80098e0 <RCCEx_PLL3_Config>
 800849a:	4603      	mov	r3, r0
 800849c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800849e:	e003      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	75fb      	strb	r3, [r7, #23]
      break;
 80084a4:	e000      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80084a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d109      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084ae:	4b32      	ldr	r3, [pc, #200]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ba:	492f      	ldr	r1, [pc, #188]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	654b      	str	r3, [r1, #84]	; 0x54
 80084c0:	e001      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d037      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d6:	2b05      	cmp	r3, #5
 80084d8:	d820      	bhi.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x860>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008523 	.word	0x08008523
 80084e4:	080084f9 	.word	0x080084f9
 80084e8:	0800850b 	.word	0x0800850b
 80084ec:	08008523 	.word	0x08008523
 80084f0:	08008523 	.word	0x08008523
 80084f4:	08008523 	.word	0x08008523
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3304      	adds	r3, #4
 80084fc:	2101      	movs	r1, #1
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 f93c 	bl	800977c <RCCEx_PLL2_Config>
 8008504:	4603      	mov	r3, r0
 8008506:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008508:	e00c      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3324      	adds	r3, #36	; 0x24
 800850e:	2101      	movs	r1, #1
 8008510:	4618      	mov	r0, r3
 8008512:	f001 f9e5 	bl	80098e0 <RCCEx_PLL3_Config>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800851a:	e003      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	75fb      	strb	r3, [r7, #23]
      break;
 8008520:	e000      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800852a:	4b13      	ldr	r3, [pc, #76]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800852c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852e:	f023 0207 	bic.w	r2, r3, #7
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008536:	4910      	ldr	r1, [pc, #64]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008538:	4313      	orrs	r3, r2
 800853a:	654b      	str	r3, [r1, #84]	; 0x54
 800853c:	e001      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0304 	and.w	r3, r3, #4
 800854a:	2b00      	cmp	r3, #0
 800854c:	d040      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008554:	2b05      	cmp	r3, #5
 8008556:	d827      	bhi.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	080085af 	.word	0x080085af
 8008564:	08008585 	.word	0x08008585
 8008568:	08008597 	.word	0x08008597
 800856c:	080085af 	.word	0x080085af
 8008570:	080085af 	.word	0x080085af
 8008574:	080085af 	.word	0x080085af
 8008578:	58024400 	.word	0x58024400
 800857c:	58024800 	.word	0x58024800
 8008580:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3304      	adds	r3, #4
 8008588:	2101      	movs	r1, #1
 800858a:	4618      	mov	r0, r3
 800858c:	f001 f8f6 	bl	800977c <RCCEx_PLL2_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008594:	e00c      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3324      	adds	r3, #36	; 0x24
 800859a:	2101      	movs	r1, #1
 800859c:	4618      	mov	r0, r3
 800859e:	f001 f99f 	bl	80098e0 <RCCEx_PLL3_Config>
 80085a2:	4603      	mov	r3, r0
 80085a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085a6:	e003      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	75fb      	strb	r3, [r7, #23]
      break;
 80085ac:	e000      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80085ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085b6:	4bb2      	ldr	r3, [pc, #712]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ba:	f023 0207 	bic.w	r2, r3, #7
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c4:	49ae      	ldr	r1, [pc, #696]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	658b      	str	r3, [r1, #88]	; 0x58
 80085ca:	e001      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d044      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e6:	d01b      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80085e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ec:	d805      	bhi.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d022      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80085f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085f6:	d00a      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x952>
 80085f8:	e01b      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80085fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fe:	d01d      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008604:	d01c      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800860a:	d01b      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800860c:	e011      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3304      	adds	r3, #4
 8008612:	2100      	movs	r1, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f8b1 	bl	800977c <RCCEx_PLL2_Config>
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800861e:	e012      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3324      	adds	r3, #36	; 0x24
 8008624:	2102      	movs	r1, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f001 f95a 	bl	80098e0 <RCCEx_PLL3_Config>
 800862c:	4603      	mov	r3, r0
 800862e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008630:	e009      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	75fb      	strb	r3, [r7, #23]
      break;
 8008636:	e006      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008638:	bf00      	nop
 800863a:	e004      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800863c:	bf00      	nop
 800863e:	e002      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008640:	bf00      	nop
 8008642:	e000      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800864c:	4b8c      	ldr	r3, [pc, #560]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800864e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008650:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800865a:	4989      	ldr	r1, [pc, #548]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800865c:	4313      	orrs	r3, r2
 800865e:	654b      	str	r3, [r1, #84]	; 0x54
 8008660:	e001      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d044      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800867c:	d01b      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800867e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008682:	d805      	bhi.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d022      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800868c:	d00a      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800868e:	e01b      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008694:	d01d      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008696:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800869a:	d01c      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800869c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086a0:	d01b      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80086a2:	e011      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3304      	adds	r3, #4
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f866 	bl	800977c <RCCEx_PLL2_Config>
 80086b0:	4603      	mov	r3, r0
 80086b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086b4:	e012      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3324      	adds	r3, #36	; 0x24
 80086ba:	2102      	movs	r1, #2
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 f90f 	bl	80098e0 <RCCEx_PLL3_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086c6:	e009      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	75fb      	strb	r3, [r7, #23]
      break;
 80086cc:	e006      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80086ce:	bf00      	nop
 80086d0:	e004      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80086d2:	bf00      	nop
 80086d4:	e002      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80086d6:	bf00      	nop
 80086d8:	e000      	b.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80086da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086e2:	4b67      	ldr	r3, [pc, #412]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80086e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086f0:	4963      	ldr	r1, [pc, #396]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	658b      	str	r3, [r1, #88]	; 0x58
 80086f6:	e001      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008704:	2b00      	cmp	r3, #0
 8008706:	d044      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800870e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008712:	d01b      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008718:	d805      	bhi.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d022      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800871e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008722:	d00a      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008724:	e01b      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8008726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872a:	d01d      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800872c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008730:	d01c      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008732:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008736:	d01b      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008738:	e011      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3304      	adds	r3, #4
 800873e:	2100      	movs	r1, #0
 8008740:	4618      	mov	r0, r3
 8008742:	f001 f81b 	bl	800977c <RCCEx_PLL2_Config>
 8008746:	4603      	mov	r3, r0
 8008748:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800874a:	e012      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3324      	adds	r3, #36	; 0x24
 8008750:	2102      	movs	r1, #2
 8008752:	4618      	mov	r0, r3
 8008754:	f001 f8c4 	bl	80098e0 <RCCEx_PLL3_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800875c:	e009      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]
      break;
 8008762:	e006      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008764:	bf00      	nop
 8008766:	e004      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008768:	bf00      	nop
 800876a:	e002      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800876c:	bf00      	nop
 800876e:	e000      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008778:	4b41      	ldr	r3, [pc, #260]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800877a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008786:	493e      	ldr	r1, [pc, #248]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008788:	4313      	orrs	r3, r2
 800878a:	658b      	str	r3, [r1, #88]	; 0x58
 800878c:	e001      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0308 	and.w	r3, r3, #8
 800879a:	2b00      	cmp	r3, #0
 800879c:	d01a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a8:	d10a      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3324      	adds	r3, #36	; 0x24
 80087ae:	2102      	movs	r1, #2
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 f895 	bl	80098e0 <RCCEx_PLL3_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087c0:	4b2f      	ldr	r3, [pc, #188]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ce:	492c      	ldr	r1, [pc, #176]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0310 	and.w	r3, r3, #16
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01a      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ea:	d10a      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3324      	adds	r3, #36	; 0x24
 80087f0:	2102      	movs	r1, #2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 f874 	bl	80098e0 <RCCEx_PLL3_Config>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008802:	4b1f      	ldr	r3, [pc, #124]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008810:	491b      	ldr	r1, [pc, #108]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008812:	4313      	orrs	r3, r2
 8008814:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d032      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800882c:	d00d      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800882e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008832:	d016      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d111      	bne.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3304      	adds	r3, #4
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f000 ff9c 	bl	800977c <RCCEx_PLL2_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008848:	e00c      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3324      	adds	r3, #36	; 0x24
 800884e:	2102      	movs	r1, #2
 8008850:	4618      	mov	r0, r3
 8008852:	f001 f845 	bl	80098e0 <RCCEx_PLL3_Config>
 8008856:	4603      	mov	r3, r0
 8008858:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800885a:	e003      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]
      break;
 8008860:	e000      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10c      	bne.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800886c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008878:	4901      	ldr	r1, [pc, #4]	; (8008880 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800887a:	4313      	orrs	r3, r2
 800887c:	658b      	str	r3, [r1, #88]	; 0x58
 800887e:	e003      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d02f      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800889e:	d00c      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80088a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088a4:	d015      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80088a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088aa:	d10f      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ac:	4b79      	ldr	r3, [pc, #484]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	4a78      	ldr	r2, [pc, #480]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80088b8:	e00c      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3324      	adds	r3, #36	; 0x24
 80088be:	2101      	movs	r1, #1
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f80d 	bl	80098e0 <RCCEx_PLL3_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80088ca:	e003      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	75fb      	strb	r3, [r7, #23]
      break;
 80088d0:	e000      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80088d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088da:	4b6e      	ldr	r3, [pc, #440]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088e8:	496a      	ldr	r1, [pc, #424]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	654b      	str	r3, [r1, #84]	; 0x54
 80088ee:	e001      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d029      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800890c:	d007      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800890e:	e00f      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008910:	4b60      	ldr	r3, [pc, #384]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	4a5f      	ldr	r2, [pc, #380]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800891a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800891c:	e00b      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3304      	adds	r3, #4
 8008922:	2102      	movs	r1, #2
 8008924:	4618      	mov	r0, r3
 8008926:	f000 ff29 	bl	800977c <RCCEx_PLL2_Config>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800892e:	e002      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	75fb      	strb	r3, [r7, #23]
      break;
 8008934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d109      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800893c:	4b55      	ldr	r3, [pc, #340]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800893e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008948:	4952      	ldr	r1, [pc, #328]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800894a:	4313      	orrs	r3, r2
 800894c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800894e:	e001      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3324      	adds	r3, #36	; 0x24
 8008964:	2102      	movs	r1, #2
 8008966:	4618      	mov	r0, r3
 8008968:	f000 ffba 	bl	80098e0 <RCCEx_PLL3_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d02f      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898a:	d00c      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800898c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008990:	d802      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d011      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008996:	e00d      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800899c:	d00f      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800899e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089a2:	d00e      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80089a4:	e006      	b.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089a6:	4b3b      	ldr	r3, [pc, #236]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089aa:	4a3a      	ldr	r2, [pc, #232]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80089b2:	e007      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	75fb      	strb	r3, [r7, #23]
      break;
 80089b8:	e004      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80089ba:	bf00      	nop
 80089bc:	e002      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80089be:	bf00      	nop
 80089c0:	e000      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80089c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d109      	bne.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089ca:	4b32      	ldr	r3, [pc, #200]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089d6:	492f      	ldr	r1, [pc, #188]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	654b      	str	r3, [r1, #84]	; 0x54
 80089dc:	e001      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d008      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089ee:	4b29      	ldr	r3, [pc, #164]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fa:	4926      	ldr	r1, [pc, #152]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a0c:	4b21      	ldr	r3, [pc, #132]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a1a:	491e      	ldr	r1, [pc, #120]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d008      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a2c:	4b19      	ldr	r3, [pc, #100]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a38:	4916      	ldr	r1, [pc, #88]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00d      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a4a:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	4a11      	ldr	r2, [pc, #68]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a54:	6113      	str	r3, [r2, #16]
 8008a56:	4b0f      	ldr	r3, [pc, #60]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a60:	490c      	ldr	r1, [pc, #48]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da08      	bge.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7a:	4906      	ldr	r1, [pc, #24]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008a80:	7dbb      	ldrb	r3, [r7, #22]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e000      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	58024400 	.word	0x58024400

08008a98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b090      	sub	sp, #64	; 0x40
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa6:	d150      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008aa8:	4ba1      	ldr	r3, [pc, #644]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	2b04      	cmp	r3, #4
 8008ab6:	d844      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ad5 	.word	0x08008ad5
 8008ac4:	08008ae5 	.word	0x08008ae5
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	08008b3d 	.word	0x08008b3d
 8008ad0:	08008b05 	.word	0x08008b05
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 fd03 	bl	80094e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ae2:	e241      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ae4:	f107 0318 	add.w	r3, r7, #24
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fa63 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af2:	e239      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008af4:	f107 030c 	add.w	r3, r7, #12
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fba7 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b02:	e231      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b04:	4b8a      	ldr	r3, [pc, #552]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008b14:	4b87      	ldr	r3, [pc, #540]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008b18:	e226      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b20:	d102      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008b22:	4b85      	ldr	r3, [pc, #532]	; (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b26:	e21f      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b2e:	d102      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008b30:	4b82      	ldr	r3, [pc, #520]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b34:	e218      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b3a:	e215      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b3c:	4b80      	ldr	r3, [pc, #512]	; (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b40:	e212      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b46:	bf00      	nop
 8008b48:	e20e      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b50:	d14f      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008b52:	4b77      	ldr	r3, [pc, #476]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b56:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008b5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d01c      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008b62:	2b80      	cmp	r3, #128	; 0x80
 8008b64:	d804      	bhi.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d008      	beq.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008b6a:	2b40      	cmp	r3, #64	; 0x40
 8008b6c:	d00e      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008b6e:	e03c      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008b70:	2bc0      	cmp	r3, #192	; 0xc0
 8008b72:	d037      	beq.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b78:	d018      	beq.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008b7a:	e036      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fcaf 	bl	80094e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b8a:	e1ed      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b8c:	f107 0318 	add.w	r3, r7, #24
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fa0f 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b9a:	e1e5      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b9c:	f107 030c 	add.w	r3, r7, #12
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fb53 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008baa:	e1dd      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bac:	4b60      	ldr	r3, [pc, #384]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008bbc:	4b5d      	ldr	r3, [pc, #372]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008bc0:	e1d2      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bc8:	d102      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008bca:	4b5b      	ldr	r3, [pc, #364]	; (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bce:	e1cb      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bd6:	d102      	bne.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008bd8:	4b58      	ldr	r3, [pc, #352]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bdc:	e1c4      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be2:	e1c1      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008be4:	4b56      	ldr	r3, [pc, #344]	; (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be8:	e1be      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bee:	bf00      	nop
 8008bf0:	e1ba      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bf8:	d153      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008bfa:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bfe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008c02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c0a:	d01f      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c10:	d805      	bhi.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c1a:	d00f      	beq.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008c1c:	e03d      	b.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008c1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c22:	d037      	beq.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008c24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c28:	d018      	beq.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008c2a:	e036      	b.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fc57 	bl	80094e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c3a:	e195      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3c:	f107 0318 	add.w	r3, r7, #24
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 f9b7 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c4a:	e18d      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c4c:	f107 030c 	add.w	r3, r7, #12
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fafb 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c5a:	e185      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c5c:	4b34      	ldr	r3, [pc, #208]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008c6c:	4b31      	ldr	r3, [pc, #196]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008c70:	e17a      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c78:	d102      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008c7a:	4b2f      	ldr	r3, [pc, #188]	; (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c7e:	e173      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c86:	d102      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008c88:	4b2c      	ldr	r3, [pc, #176]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c8c:	e16c      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c92:	e169      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c94:	4b2a      	ldr	r3, [pc, #168]	; (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c98:	e166      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c9e:	bf00      	nop
 8008ca0:	e162      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ca8:	d15d      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008caa:	4b21      	ldr	r3, [pc, #132]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008cb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cba:	d01f      	beq.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cc0:	d805      	bhi.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00a      	beq.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008cc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cca:	d00f      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008ccc:	e047      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008cce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008cd2:	d041      	beq.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cd8:	d018      	beq.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008cda:	e040      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fbff 	bl	80094e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cea:	e13d      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cec:	f107 0318 	add.w	r3, r7, #24
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 f95f 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cfa:	e135      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cfc:	f107 030c 	add.w	r3, r7, #12
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 faa3 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d0a:	e12d      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d0c:	4b08      	ldr	r3, [pc, #32]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d14:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008d1c:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008d20:	e122      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d28:	d10c      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008d2a:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d2e:	e11b      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008d30:	58024400 	.word	0x58024400
 8008d34:	03d09000 	.word	0x03d09000
 8008d38:	003d0900 	.word	0x003d0900
 8008d3c:	017d7840 	.word	0x017d7840
 8008d40:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d4a:	d102      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008d4c:	4b89      	ldr	r3, [pc, #548]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d50:	e10a      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d56:	e107      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d58:	4b87      	ldr	r3, [pc, #540]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d5c:	e104      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d62:	bf00      	nop
 8008d64:	e100      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6c:	d153      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008d6e:	4b83      	ldr	r3, [pc, #524]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d72:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008d76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d7e:	d01f      	beq.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d84:	d805      	bhi.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d8e:	d00f      	beq.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008d90:	e03d      	b.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d96:	d037      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d9c:	d018      	beq.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008d9e:	e036      	b.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fb9d 	bl	80094e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dae:	e0db      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db0:	f107 0318 	add.w	r3, r7, #24
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f8fd 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dbe:	e0d3      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dc0:	f107 030c 	add.w	r3, r7, #12
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fa41 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dce:	e0cb      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008dd0:	4b6a      	ldr	r3, [pc, #424]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008de0:	4b67      	ldr	r3, [pc, #412]	; (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008de4:	e0c0      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dec:	d102      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008dee:	4b65      	ldr	r3, [pc, #404]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008df2:	e0b9      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dfa:	d102      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008dfc:	4b5d      	ldr	r3, [pc, #372]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e00:	e0b2      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e06:	e0af      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e08:	4b5b      	ldr	r3, [pc, #364]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e0c:	e0ac      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e12:	bf00      	nop
 8008e14:	e0a8      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e1c:	d13d      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008e1e:	4b57      	ldr	r3, [pc, #348]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e26:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e2e:	d00c      	beq.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e34:	d011      	beq.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d12b      	bne.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3a:	f107 0318 	add.w	r3, r7, #24
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f8b8 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e48:	e08e      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4a:	f107 030c 	add.w	r3, r7, #12
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 f9fc 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e58:	e086      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e5a:	4b48      	ldr	r3, [pc, #288]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e62:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008e6a:	4b45      	ldr	r3, [pc, #276]	; (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008e6e:	e07b      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e76:	d102      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008e78:	4b42      	ldr	r3, [pc, #264]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7c:	e074      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e84:	d102      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8008e86:	4b3b      	ldr	r3, [pc, #236]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e8a:	e06d      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e90:	e06a      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e96:	bf00      	nop
 8008e98:	e066      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea0:	d11f      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008ea2:	4b36      	ldr	r3, [pc, #216]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eaa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb6:	d008      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008eb8:	e00f      	b.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fb10 	bl	80094e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ec8:	e04e      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eca:	f107 0318 	add.w	r3, r7, #24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 f870 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed8:	e046      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ede:	bf00      	nop
 8008ee0:	e042      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ee8:	d13c      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008eea:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008ef2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efa:	d01e      	beq.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f00:	d805      	bhi.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00d      	beq.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f0a:	d00e      	beq.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008f0c:	e026      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f12:	d01d      	beq.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f18:	d01d      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008f1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f1e:	d014      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008f20:	e01c      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f22:	f000 f831 	bl	8008f88 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f26:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008f28:	e01e      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f2a:	f107 0318 	add.w	r3, r7, #24
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f840 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f38:	e016      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3a:	f107 030c 	add.w	r3, r7, #12
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 f984 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f48:	e00e      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008f4a:	4b0d      	ldr	r3, [pc, #52]	; (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f4e:	e00b      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f54:	e008      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008f56:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f5a:	e005      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f60:	bf00      	nop
 8008f62:	e001      	b.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3740      	adds	r7, #64	; 0x40
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	017d7840 	.word	0x017d7840
 8008f78:	00bb8000 	.word	0x00bb8000
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	03d09000 	.word	0x03d09000
 8008f84:	003d0900 	.word	0x003d0900

08008f88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f8c:	f7fe fe1e 	bl	8007bcc <HAL_RCC_GetHCLKFreq>
 8008f90:	4601      	mov	r1, r0
 8008f92:	4b06      	ldr	r3, [pc, #24]	; (8008fac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	091b      	lsrs	r3, r3, #4
 8008f98:	f003 0307 	and.w	r3, r3, #7
 8008f9c:	4a04      	ldr	r2, [pc, #16]	; (8008fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f9e:	5cd3      	ldrb	r3, [r2, r3]
 8008fa0:	f003 031f 	and.w	r3, r3, #31
 8008fa4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	58024400 	.word	0x58024400
 8008fb0:	080169e8 	.word	0x080169e8

08008fb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b089      	sub	sp, #36	; 0x24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fbc:	4b9d      	ldr	r3, [pc, #628]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008fc6:	4b9b      	ldr	r3, [pc, #620]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	0b1b      	lsrs	r3, r3, #12
 8008fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fd2:	4b98      	ldr	r3, [pc, #608]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	091b      	lsrs	r3, r3, #4
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008fde:	4b95      	ldr	r3, [pc, #596]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	08db      	lsrs	r3, r3, #3
 8008fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 810a 	beq.w	8009216 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d05a      	beq.n	80090be <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009008:	2b01      	cmp	r3, #1
 800900a:	d302      	bcc.n	8009012 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800900c:	2b02      	cmp	r3, #2
 800900e:	d078      	beq.n	8009102 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009010:	e099      	b.n	8009146 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009012:	4b88      	ldr	r3, [pc, #544]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d02d      	beq.n	800907a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901e:	4b85      	ldr	r3, [pc, #532]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	08db      	lsrs	r3, r3, #3
 8009024:	f003 0303 	and.w	r3, r3, #3
 8009028:	4a83      	ldr	r2, [pc, #524]	; (8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800902a:	fa22 f303 	lsr.w	r3, r2, r3
 800902e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	ee07 3a90 	vmov	s15, r3
 8009040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009048:	4b7a      	ldr	r3, [pc, #488]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009058:	ed97 6a03 	vldr	s12, [r7, #12]
 800905c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800923c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800906c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009074:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009078:	e087      	b.n	800918a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	ee07 3a90 	vmov	s15, r3
 8009080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009084:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800908c:	4b69      	ldr	r3, [pc, #420]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800908e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009094:	ee07 3a90 	vmov	s15, r3
 8009098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909c:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800923c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80090a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090bc:	e065      	b.n	800918a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	ee07 3a90 	vmov	s15, r3
 80090c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80090cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d0:	4b58      	ldr	r3, [pc, #352]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d8:	ee07 3a90 	vmov	s15, r3
 80090dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800923c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80090e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009100:	e043      	b.n	800918a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	ee07 3a90 	vmov	s15, r3
 8009108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009114:	4b47      	ldr	r3, [pc, #284]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800911c:	ee07 3a90 	vmov	s15, r3
 8009120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009124:	ed97 6a03 	vldr	s12, [r7, #12]
 8009128:	eddf 5a44 	vldr	s11, [pc, #272]	; 800923c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800912c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800913c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009140:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009144:	e021      	b.n	800918a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009150:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009158:	4b36      	ldr	r3, [pc, #216]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009160:	ee07 3a90 	vmov	s15, r3
 8009164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009168:	ed97 6a03 	vldr	s12, [r7, #12]
 800916c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800923c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800917c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009188:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800918a:	4b2a      	ldr	r3, [pc, #168]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800918c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918e:	0a5b      	lsrs	r3, r3, #9
 8009190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009194:	ee07 3a90 	vmov	s15, r3
 8009198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80091a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b0:	ee17 2a90 	vmov	r2, s15
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80091b8:	4b1e      	ldr	r3, [pc, #120]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091bc:	0c1b      	lsrs	r3, r3, #16
 80091be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c2:	ee07 3a90 	vmov	s15, r3
 80091c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091de:	ee17 2a90 	vmov	r2, s15
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80091e6:	4b13      	ldr	r3, [pc, #76]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	0e1b      	lsrs	r3, r3, #24
 80091ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009200:	edd7 6a07 	vldr	s13, [r7, #28]
 8009204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800920c:	ee17 2a90 	vmov	r2, s15
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009214:	e008      	b.n	8009228 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	609a      	str	r2, [r3, #8]
}
 8009228:	bf00      	nop
 800922a:	3724      	adds	r7, #36	; 0x24
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	58024400 	.word	0x58024400
 8009238:	03d09000 	.word	0x03d09000
 800923c:	46000000 	.word	0x46000000
 8009240:	4c742400 	.word	0x4c742400
 8009244:	4a742400 	.word	0x4a742400
 8009248:	4bbebc20 	.word	0x4bbebc20

0800924c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800924c:	b480      	push	{r7}
 800924e:	b089      	sub	sp, #36	; 0x24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009254:	4b9d      	ldr	r3, [pc, #628]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009258:	f003 0303 	and.w	r3, r3, #3
 800925c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800925e:	4b9b      	ldr	r3, [pc, #620]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	0d1b      	lsrs	r3, r3, #20
 8009264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009268:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800926a:	4b98      	ldr	r3, [pc, #608]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	0a1b      	lsrs	r3, r3, #8
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009276:	4b95      	ldr	r3, [pc, #596]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927a:	08db      	lsrs	r3, r3, #3
 800927c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	fb02 f303 	mul.w	r3, r2, r3
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 810a 	beq.w	80094ae <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d05a      	beq.n	8009356 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d302      	bcc.n	80092aa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d078      	beq.n	800939a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80092a8:	e099      	b.n	80093de <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092aa:	4b88      	ldr	r3, [pc, #544]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d02d      	beq.n	8009312 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092b6:	4b85      	ldr	r3, [pc, #532]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	08db      	lsrs	r3, r3, #3
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	4a83      	ldr	r2, [pc, #524]	; (80094d0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80092c2:	fa22 f303 	lsr.w	r3, r2, r3
 80092c6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e0:	4b7a      	ldr	r3, [pc, #488]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80092e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80092f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009310:	e087      	b.n	8009422 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009324:	4b69      	ldr	r3, [pc, #420]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932c:	ee07 3a90 	vmov	s15, r3
 8009330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009334:	ed97 6a03 	vldr	s12, [r7, #12]
 8009338:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800933c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009344:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009350:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009354:	e065      	b.n	8009422 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	ee07 3a90 	vmov	s15, r3
 800935c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009360:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009368:	4b58      	ldr	r3, [pc, #352]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800936a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009370:	ee07 3a90 	vmov	s15, r3
 8009374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009378:	ed97 6a03 	vldr	s12, [r7, #12]
 800937c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800938c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009394:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009398:	e043      	b.n	8009422 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	ee07 3a90 	vmov	s15, r3
 80093a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80093a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ac:	4b47      	ldr	r3, [pc, #284]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80093c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093dc:	e021      	b.n	8009422 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	ee07 3a90 	vmov	s15, r3
 80093e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80093ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f0:	4b36      	ldr	r3, [pc, #216]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f8:	ee07 3a90 	vmov	s15, r3
 80093fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009400:	ed97 6a03 	vldr	s12, [r7, #12]
 8009404:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009420:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009422:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	0a5b      	lsrs	r3, r3, #9
 8009428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800943c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009448:	ee17 2a90 	vmov	r2, s15
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009450:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946a:	edd7 6a07 	vldr	s13, [r7, #28]
 800946e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009476:	ee17 2a90 	vmov	r2, s15
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800947e:	4b13      	ldr	r3, [pc, #76]	; (80094cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	0e1b      	lsrs	r3, r3, #24
 8009484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009498:	edd7 6a07 	vldr	s13, [r7, #28]
 800949c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a4:	ee17 2a90 	vmov	r2, s15
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094ac:	e008      	b.n	80094c0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	609a      	str	r2, [r3, #8]
}
 80094c0:	bf00      	nop
 80094c2:	3724      	adds	r7, #36	; 0x24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	58024400 	.word	0x58024400
 80094d0:	03d09000 	.word	0x03d09000
 80094d4:	46000000 	.word	0x46000000
 80094d8:	4c742400 	.word	0x4c742400
 80094dc:	4a742400 	.word	0x4a742400
 80094e0:	4bbebc20 	.word	0x4bbebc20

080094e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b089      	sub	sp, #36	; 0x24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094ec:	4b9d      	ldr	r3, [pc, #628]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80094f6:	4b9b      	ldr	r3, [pc, #620]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fa:	091b      	lsrs	r3, r3, #4
 80094fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009500:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009502:	4b98      	ldr	r3, [pc, #608]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800950c:	4b95      	ldr	r3, [pc, #596]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800950e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009510:	08db      	lsrs	r3, r3, #3
 8009512:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	fb02 f303 	mul.w	r3, r2, r3
 800951c:	ee07 3a90 	vmov	s15, r3
 8009520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009524:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 810a 	beq.w	8009744 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d05a      	beq.n	80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8009536:	2b01      	cmp	r3, #1
 8009538:	d302      	bcc.n	8009540 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800953a:	2b02      	cmp	r3, #2
 800953c:	d078      	beq.n	8009630 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800953e:	e099      	b.n	8009674 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009540:	4b88      	ldr	r3, [pc, #544]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b00      	cmp	r3, #0
 800954a:	d02d      	beq.n	80095a8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800954c:	4b85      	ldr	r3, [pc, #532]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	08db      	lsrs	r3, r3, #3
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	4a84      	ldr	r2, [pc, #528]	; (8009768 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
 800955c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	ee07 3a90 	vmov	s15, r3
 8009564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009576:	4b7b      	ldr	r3, [pc, #492]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009586:	ed97 6a03 	vldr	s12, [r7, #12]
 800958a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800976c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800958e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80095a6:	e087      	b.n	80096b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009770 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80095b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ba:	4b6a      	ldr	r3, [pc, #424]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800976c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80095d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ea:	e065      	b.n	80096b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009774 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80095fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fe:	4b59      	ldr	r3, [pc, #356]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009612:	eddf 5a56 	vldr	s11, [pc, #344]	; 800976c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800962e:	e043      	b.n	80096b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	ee07 3a90 	vmov	s15, r3
 8009636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009778 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800963e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009642:	4b48      	ldr	r3, [pc, #288]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009652:	ed97 6a03 	vldr	s12, [r7, #12]
 8009656:	eddf 5a45 	vldr	s11, [pc, #276]	; 800976c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800965a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009672:	e021      	b.n	80096b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009774 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009686:	4b37      	ldr	r3, [pc, #220]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009696:	ed97 6a03 	vldr	s12, [r7, #12]
 800969a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800976c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800969e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096b6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80096b8:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096bc:	0a5b      	lsrs	r3, r3, #9
 80096be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096de:	ee17 2a90 	vmov	r2, s15
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80096e6:	4b1f      	ldr	r3, [pc, #124]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	0c1b      	lsrs	r3, r3, #16
 80096ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009700:	edd7 6a07 	vldr	s13, [r7, #28]
 8009704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800970c:	ee17 2a90 	vmov	r2, s15
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009714:	4b13      	ldr	r3, [pc, #76]	; (8009764 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	0e1b      	lsrs	r3, r3, #24
 800971a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800972a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973a:	ee17 2a90 	vmov	r2, s15
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009742:	e008      	b.n	8009756 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	609a      	str	r2, [r3, #8]
}
 8009756:	bf00      	nop
 8009758:	3724      	adds	r7, #36	; 0x24
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	58024400 	.word	0x58024400
 8009768:	03d09000 	.word	0x03d09000
 800976c:	46000000 	.word	0x46000000
 8009770:	4c742400 	.word	0x4c742400
 8009774:	4a742400 	.word	0x4a742400
 8009778:	4bbebc20 	.word	0x4bbebc20

0800977c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800978a:	4b53      	ldr	r3, [pc, #332]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	2b03      	cmp	r3, #3
 8009794:	d101      	bne.n	800979a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e099      	b.n	80098ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800979a:	4b4f      	ldr	r3, [pc, #316]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a4e      	ldr	r2, [pc, #312]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 80097a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097a6:	f7f8 faf9 	bl	8001d9c <HAL_GetTick>
 80097aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097ac:	e008      	b.n	80097c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80097ae:	f7f8 faf5 	bl	8001d9c <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d901      	bls.n	80097c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e086      	b.n	80098ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097c0:	4b45      	ldr	r3, [pc, #276]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1f0      	bne.n	80097ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097cc:	4b42      	ldr	r3, [pc, #264]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 80097ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	031b      	lsls	r3, r3, #12
 80097da:	493f      	ldr	r1, [pc, #252]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	628b      	str	r3, [r1, #40]	; 0x28
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	025b      	lsls	r3, r3, #9
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	431a      	orrs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	041b      	lsls	r3, r3, #16
 80097fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	3b01      	subs	r3, #1
 800980a:	061b      	lsls	r3, r3, #24
 800980c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009810:	4931      	ldr	r1, [pc, #196]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009812:	4313      	orrs	r3, r2
 8009814:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009816:	4b30      	ldr	r3, [pc, #192]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	492d      	ldr	r1, [pc, #180]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009824:	4313      	orrs	r3, r2
 8009826:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009828:	4b2b      	ldr	r3, [pc, #172]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	f023 0220 	bic.w	r2, r3, #32
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	4928      	ldr	r1, [pc, #160]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009836:	4313      	orrs	r3, r2
 8009838:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800983a:	4b27      	ldr	r3, [pc, #156]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	4a26      	ldr	r2, [pc, #152]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009840:	f023 0310 	bic.w	r3, r3, #16
 8009844:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009846:	4b24      	ldr	r3, [pc, #144]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <RCCEx_PLL2_Config+0x160>)
 800984c:	4013      	ands	r3, r2
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	69d2      	ldr	r2, [r2, #28]
 8009852:	00d2      	lsls	r2, r2, #3
 8009854:	4920      	ldr	r1, [pc, #128]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009856:	4313      	orrs	r3, r2
 8009858:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800985a:	4b1f      	ldr	r3, [pc, #124]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	4a1e      	ldr	r2, [pc, #120]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009860:	f043 0310 	orr.w	r3, r3, #16
 8009864:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800986c:	4b1a      	ldr	r3, [pc, #104]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	4a19      	ldr	r2, [pc, #100]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009872:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009876:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009878:	e00f      	b.n	800989a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d106      	bne.n	800988e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009880:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009884:	4a14      	ldr	r2, [pc, #80]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800988a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800988c:	e005      	b.n	800989a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	4a11      	ldr	r2, [pc, #68]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 8009894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009898:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800989a:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a0e      	ldr	r2, [pc, #56]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 80098a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098a6:	f7f8 fa79 	bl	8001d9c <HAL_GetTick>
 80098aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098ac:	e008      	b.n	80098c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80098ae:	f7f8 fa75 	bl	8001d9c <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d901      	bls.n	80098c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e006      	b.n	80098ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098c0:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <RCCEx_PLL2_Config+0x15c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0f0      	beq.n	80098ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	58024400 	.word	0x58024400
 80098dc:	ffff0007 	.word	0xffff0007

080098e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098ee:	4b53      	ldr	r3, [pc, #332]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d101      	bne.n	80098fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e099      	b.n	8009a32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80098fe:	4b4f      	ldr	r3, [pc, #316]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a4e      	ldr	r2, [pc, #312]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800990a:	f7f8 fa47 	bl	8001d9c <HAL_GetTick>
 800990e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009910:	e008      	b.n	8009924 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009912:	f7f8 fa43 	bl	8001d9c <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d901      	bls.n	8009924 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e086      	b.n	8009a32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009924:	4b45      	ldr	r3, [pc, #276]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1f0      	bne.n	8009912 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009930:	4b42      	ldr	r3, [pc, #264]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009934:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	051b      	lsls	r3, r3, #20
 800993e:	493f      	ldr	r1, [pc, #252]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009940:	4313      	orrs	r3, r2
 8009942:	628b      	str	r3, [r1, #40]	; 0x28
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	3b01      	subs	r3, #1
 800994a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	3b01      	subs	r3, #1
 8009954:	025b      	lsls	r3, r3, #9
 8009956:	b29b      	uxth	r3, r3
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	3b01      	subs	r3, #1
 8009960:	041b      	lsls	r3, r3, #16
 8009962:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	3b01      	subs	r3, #1
 800996e:	061b      	lsls	r3, r3, #24
 8009970:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009974:	4931      	ldr	r1, [pc, #196]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009976:	4313      	orrs	r3, r2
 8009978:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800997a:	4b30      	ldr	r3, [pc, #192]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	492d      	ldr	r1, [pc, #180]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009988:	4313      	orrs	r3, r2
 800998a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800998c:	4b2b      	ldr	r3, [pc, #172]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	4928      	ldr	r1, [pc, #160]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 800999a:	4313      	orrs	r3, r2
 800999c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800999e:	4b27      	ldr	r3, [pc, #156]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	4a26      	ldr	r2, [pc, #152]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099aa:	4b24      	ldr	r3, [pc, #144]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ae:	4b24      	ldr	r3, [pc, #144]	; (8009a40 <RCCEx_PLL3_Config+0x160>)
 80099b0:	4013      	ands	r3, r2
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	69d2      	ldr	r2, [r2, #28]
 80099b6:	00d2      	lsls	r2, r2, #3
 80099b8:	4920      	ldr	r1, [pc, #128]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099be:	4b1f      	ldr	r3, [pc, #124]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c2:	4a1e      	ldr	r2, [pc, #120]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d106      	bne.n	80099de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099d0:	4b1a      	ldr	r3, [pc, #104]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	4a19      	ldr	r2, [pc, #100]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099dc:	e00f      	b.n	80099fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d106      	bne.n	80099f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099e4:	4b15      	ldr	r3, [pc, #84]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	4a14      	ldr	r2, [pc, #80]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099f0:	e005      	b.n	80099fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	4a11      	ldr	r2, [pc, #68]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 80099f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a0e      	ldr	r2, [pc, #56]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a0a:	f7f8 f9c7 	bl	8001d9c <HAL_GetTick>
 8009a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a10:	e008      	b.n	8009a24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a12:	f7f8 f9c3 	bl	8001d9c <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d901      	bls.n	8009a24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e006      	b.n	8009a32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <RCCEx_PLL3_Config+0x15c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0f0      	beq.n	8009a12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	ffff0007 	.word	0xffff0007

08009a44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08a      	sub	sp, #40	; 0x28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e07c      	b.n	8009b50 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10c      	bne.n	8009a7c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d102      	bne.n	8009a76 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7f7 fdfc 	bl	8001674 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f867 	bl	8009b58 <HAL_SD_InitCard>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e05d      	b.n	8009b50 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009a94:	f107 0308 	add.w	r3, r7, #8
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 f8ce 	bl	800ac3c <HAL_SD_GetCardStatus>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e052      	b.n	8009b50 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009aaa:	7e3b      	ldrb	r3, [r7, #24]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009ab0:	7e7b      	ldrb	r3, [r7, #25]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d10a      	bne.n	8009ad4 <HAL_SD_Init+0x90>
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d102      	bne.n	8009aca <HAL_SD_Init+0x86>
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d004      	beq.n	8009ad4 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ad0:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ad2:	e00b      	b.n	8009aec <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d104      	bne.n	8009ae6 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ae2:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ae4:	e002      	b.n	8009aec <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 f984 	bl	800ae00 <HAL_SD_ConfigWideBusOperation>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e026      	b.n	8009b50 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009b02:	f7f8 f94b 	bl	8001d9c <HAL_GetTick>
 8009b06:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009b08:	e011      	b.n	8009b2e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009b0a:	f7f8 f947 	bl	8001d9c <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b18:	d109      	bne.n	8009b2e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e010      	b.n	8009b50 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 fa10 	bl	800af54 <HAL_SD_GetCardState>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	d1e7      	bne.n	8009b0a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3728      	adds	r7, #40	; 0x28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b58:	b5b0      	push	{r4, r5, r7, lr}
 8009b5a:	b08e      	sub	sp, #56	; 0x38
 8009b5c:	af04      	add	r7, sp, #16
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009b70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009b74:	f7fe ff90 	bl	8008a98 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b78:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	4a40      	ldr	r2, [pc, #256]	; (8009c80 <HAL_SD_InitCard+0x128>)
 8009b80:	fba2 2303 	umull	r2, r3, r2, r3
 8009b84:	091b      	lsrs	r3, r3, #4
 8009b86:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d107      	bne.n	8009ba0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0210 	orr.w	r2, r2, #16
 8009b9e:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681d      	ldr	r5, [r3, #0]
 8009ba4:	466c      	mov	r4, sp
 8009ba6:	f107 0314 	add.w	r3, r7, #20
 8009baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009bb2:	f107 0308 	add.w	r3, r7, #8
 8009bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f003 fa57 	bl	800d06c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f003 fa9a 	bl	800d0fc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d008      	beq.n	8009bec <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009bda:	4a2a      	ldr	r2, [pc, #168]	; (8009c84 <HAL_SD_InitCard+0x12c>)
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be2:	3301      	adds	r3, #1
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7f8 f8e5 	bl	8001db4 <HAL_Delay>
 8009bea:	e002      	b.n	8009bf2 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8009bec:	2002      	movs	r0, #2
 8009bee:	f7f8 f8e1 	bl	8001db4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 fa8c 	bl	800b110 <SD_PowerON>
 8009bf8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00b      	beq.n	8009c18 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e02e      	b.n	8009c76 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 f9bb 	bl	800af94 <SD_InitCard>
 8009c1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00b      	beq.n	8009c3e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e01b      	b.n	8009c76 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c46:	4618      	mov	r0, r3
 8009c48:	f003 faee 	bl	800d228 <SDMMC_CmdBlockLength>
 8009c4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00f      	beq.n	8009c74 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a0b      	ldr	r2, [pc, #44]	; (8009c88 <HAL_SD_InitCard+0x130>)
 8009c5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	431a      	orrs	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e000      	b.n	8009c76 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3728      	adds	r7, #40	; 0x28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	014f8b59 	.word	0x014f8b59
 8009c84:	00012110 	.word	0x00012110
 8009c88:	1fe00fff 	.word	0x1fe00fff

08009c8c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b092      	sub	sp, #72	; 0x48
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c9a:	f7f8 f87f 	bl	8001d9c <HAL_GetTick>
 8009c9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d107      	bne.n	8009cbe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e167      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	f040 815a 	bne.w	8009f80 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	441a      	add	r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d907      	bls.n	8009cf0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e14e      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2203      	movs	r2, #3
 8009cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d002      	beq.n	8009d0e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0a:	025b      	lsls	r3, r3, #9
 8009d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	025b      	lsls	r3, r3, #9
 8009d18:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009d1a:	2390      	movs	r3, #144	; 0x90
 8009d1c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d1e:	2302      	movs	r3, #2
 8009d20:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009d26:	2300      	movs	r3, #0
 8009d28:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f107 0214 	add.w	r2, r7, #20
 8009d32:	4611      	mov	r1, r2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f003 fa4b 	bl	800d1d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d48:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d90a      	bls.n	8009d66 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2202      	movs	r2, #2
 8009d54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f003 faa9 	bl	800d2b4 <SDMMC_CmdReadMultiBlock>
 8009d62:	6478      	str	r0, [r7, #68]	; 0x44
 8009d64:	e009      	b.n	8009d7a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d72:	4618      	mov	r0, r3
 8009d74:	f003 fa7b 	bl	800d26e <SDMMC_CmdReadSingleBlock>
 8009d78:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d012      	beq.n	8009da6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a84      	ldr	r2, [pc, #528]	; (8009f98 <HAL_SD_ReadBlocks+0x30c>)
 8009d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e0f3      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009daa:	e058      	b.n	8009e5e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d033      	beq.n	8009e22 <HAL_SD_ReadBlocks+0x196>
 8009dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dbc:	2b1f      	cmp	r3, #31
 8009dbe:	d930      	bls.n	8009e22 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8009dc4:	e027      	b.n	8009e16 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f003 f978 	bl	800d0c0 <SDMMC_ReadFIFO>
 8009dd0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ddc:	3301      	adds	r3, #1
 8009dde:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	0a1b      	lsrs	r3, r3, #8
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dec:	3301      	adds	r3, #1
 8009dee:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	0e1b      	lsrs	r3, r3, #24
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8009e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e12:	3301      	adds	r3, #1
 8009e14:	643b      	str	r3, [r7, #64]	; 0x40
 8009e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e18:	2b07      	cmp	r3, #7
 8009e1a:	d9d4      	bls.n	8009dc6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1e:	3b20      	subs	r3, #32
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009e22:	f7f7 ffbb 	bl	8001d9c <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d902      	bls.n	8009e38 <HAL_SD_ReadBlocks+0x1ac>
 8009e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d112      	bne.n	8009e5e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a56      	ldr	r2, [pc, #344]	; (8009f98 <HAL_SD_ReadBlocks+0x30c>)
 8009e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e097      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e64:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d09f      	beq.n	8009dac <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e7a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d022      	beq.n	8009ed0 <HAL_SD_ReadBlocks+0x244>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d91f      	bls.n	8009ed0 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d01b      	beq.n	8009ed0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f003 fa73 	bl	800d388 <SDMMC_CmdStopTransfer>
 8009ea2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d012      	beq.n	8009ed0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a3a      	ldr	r2, [pc, #232]	; (8009f98 <HAL_SD_ReadBlocks+0x30c>)
 8009eb0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e05e      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed6:	f003 0308 	and.w	r3, r3, #8
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d012      	beq.n	8009f04 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a2d      	ldr	r2, [pc, #180]	; (8009f98 <HAL_SD_ReadBlocks+0x30c>)
 8009ee4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eea:	f043 0208 	orr.w	r2, r3, #8
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e044      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d012      	beq.n	8009f38 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a20      	ldr	r2, [pc, #128]	; (8009f98 <HAL_SD_ReadBlocks+0x30c>)
 8009f18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	f043 0202 	orr.w	r2, r3, #2
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e02a      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d012      	beq.n	8009f6c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a13      	ldr	r2, [pc, #76]	; (8009f98 <HAL_SD_ReadBlocks+0x30c>)
 8009f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	f043 0220 	orr.w	r2, r3, #32
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e010      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0a      	ldr	r2, [pc, #40]	; (8009f9c <HAL_SD_ReadBlocks+0x310>)
 8009f72:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	e006      	b.n	8009f8e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
  }
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3748      	adds	r7, #72	; 0x48
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	1fe00fff 	.word	0x1fe00fff
 8009f9c:	18000f3a 	.word	0x18000f3a

08009fa0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b092      	sub	sp, #72	; 0x48
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fae:	f7f7 fef5 	bl	8001d9c <HAL_GetTick>
 8009fb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d107      	bne.n	8009fd2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e16b      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	f040 815e 	bne.w	800a29c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	441a      	add	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d907      	bls.n	800a004 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e152      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2203      	movs	r2, #3
 800a008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2200      	movs	r2, #0
 800a012:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d002      	beq.n	800a022 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	025b      	lsls	r3, r3, #9
 800a020:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a022:	f04f 33ff 	mov.w	r3, #4294967295
 800a026:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	025b      	lsls	r3, r3, #9
 800a02c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a02e:	2390      	movs	r3, #144	; 0x90
 800a030:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a032:	2300      	movs	r3, #0
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a036:	2300      	movs	r3, #0
 800a038:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a03a:	2300      	movs	r3, #0
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f107 0218 	add.w	r2, r7, #24
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f003 f8c1 	bl	800d1d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a05c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d90a      	bls.n	800a07a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2220      	movs	r2, #32
 800a068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a070:	4618      	mov	r0, r3
 800a072:	f003 f965 	bl	800d340 <SDMMC_CmdWriteMultiBlock>
 800a076:	6478      	str	r0, [r7, #68]	; 0x44
 800a078:	e009      	b.n	800a08e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2210      	movs	r2, #16
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a086:	4618      	mov	r0, r3
 800a088:	f003 f937 	bl	800d2fa <SDMMC_CmdWriteSingleBlock>
 800a08c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a090:	2b00      	cmp	r3, #0
 800a092:	d012      	beq.n	800a0ba <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a86      	ldr	r2, [pc, #536]	; (800a2b4 <HAL_SD_WriteBlocks+0x314>)
 800a09a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e0f7      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a0be:	e05c      	b.n	800a17a <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d037      	beq.n	800a13e <HAL_SD_WriteBlocks+0x19e>
 800a0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d0:	2b1f      	cmp	r3, #31
 800a0d2:	d934      	bls.n	800a13e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a0d8:	e02b      	b.n	800a132 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	021a      	lsls	r2, r3, #8
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	041a      	lsls	r2, r3, #16
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	4313      	orrs	r3, r2
 800a102:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a106:	3301      	adds	r3, #1
 800a108:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	061a      	lsls	r2, r3, #24
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	4313      	orrs	r3, r2
 800a114:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	3301      	adds	r3, #1
 800a11a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f107 0214 	add.w	r2, r7, #20
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f002 ffd7 	bl	800d0da <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a12e:	3301      	adds	r3, #1
 800a130:	643b      	str	r3, [r7, #64]	; 0x40
 800a132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a134:	2b07      	cmp	r3, #7
 800a136:	d9d0      	bls.n	800a0da <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13a:	3b20      	subs	r3, #32
 800a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a13e:	f7f7 fe2d 	bl	8001d9c <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d902      	bls.n	800a154 <HAL_SD_WriteBlocks+0x1b4>
 800a14e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a150:	2b00      	cmp	r3, #0
 800a152:	d112      	bne.n	800a17a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a56      	ldr	r2, [pc, #344]	; (800a2b4 <HAL_SD_WriteBlocks+0x314>)
 800a15a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a162:	431a      	orrs	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e097      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a180:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a184:	2b00      	cmp	r3, #0
 800a186:	d09b      	beq.n	800a0c0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a196:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d022      	beq.n	800a1ec <HAL_SD_WriteBlocks+0x24c>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d91f      	bls.n	800a1ec <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	d01b      	beq.n	800a1ec <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f003 f8e5 	bl	800d388 <SDMMC_CmdStopTransfer>
 800a1be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a1c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d012      	beq.n	800a1ec <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a3a      	ldr	r2, [pc, #232]	; (800a2b4 <HAL_SD_WriteBlocks+0x314>)
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e05e      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d012      	beq.n	800a220 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a2d      	ldr	r2, [pc, #180]	; (800a2b4 <HAL_SD_WriteBlocks+0x314>)
 800a200:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a206:	f043 0208 	orr.w	r2, r3, #8
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e044      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d012      	beq.n	800a254 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a20      	ldr	r2, [pc, #128]	; (800a2b4 <HAL_SD_WriteBlocks+0x314>)
 800a234:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23a:	f043 0202 	orr.w	r2, r3, #2
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e02a      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25a:	f003 0310 	and.w	r3, r3, #16
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d012      	beq.n	800a288 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a13      	ldr	r2, [pc, #76]	; (800a2b4 <HAL_SD_WriteBlocks+0x314>)
 800a268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	f043 0210 	orr.w	r2, r3, #16
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e010      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a0a      	ldr	r2, [pc, #40]	; (800a2b8 <HAL_SD_WriteBlocks+0x318>)
 800a28e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	e006      	b.n	800a2aa <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
  }
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3748      	adds	r7, #72	; 0x48
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	1fe00fff 	.word	0x1fe00fff
 800a2b8:	18000f3a 	.word	0x18000f3a

0800a2bc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08c      	sub	sp, #48	; 0x30
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d107      	bne.n	800a2e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e08d      	b.n	800a400 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	f040 8086 	bne.w	800a3fe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	441a      	add	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a302:	429a      	cmp	r2, r3
 800a304:	d907      	bls.n	800a316 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e074      	b.n	800a400 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2203      	movs	r2, #3
 800a31a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2200      	movs	r2, #0
 800a324:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	025a      	lsls	r2, r3, #9
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d002      	beq.n	800a342 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	025b      	lsls	r3, r3, #9
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a342:	f04f 33ff 	mov.w	r3, #4294967295
 800a346:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	025b      	lsls	r3, r3, #9
 800a34c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a34e:	2390      	movs	r3, #144	; 0x90
 800a350:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a352:	2302      	movs	r3, #2
 800a354:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a356:	2300      	movs	r3, #0
 800a358:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a35a:	2300      	movs	r3, #0
 800a35c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f107 0210 	add.w	r2, r7, #16
 800a366:	4611      	mov	r1, r2
 800a368:	4618      	mov	r0, r3
 800a36a:	f002 ff31 	bl	800d1d0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a37c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2201      	movs	r2, #1
 800a38c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d90a      	bls.n	800a3aa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2282      	movs	r2, #130	; 0x82
 800a398:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f002 ff87 	bl	800d2b4 <SDMMC_CmdReadMultiBlock>
 800a3a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a3a8:	e009      	b.n	800a3be <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2281      	movs	r2, #129	; 0x81
 800a3ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f002 ff59 	bl	800d26e <SDMMC_CmdReadSingleBlock>
 800a3bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d012      	beq.n	800a3ea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a0f      	ldr	r2, [pc, #60]	; (800a408 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a3ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	431a      	orrs	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e00a      	b.n	800a400 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a3f8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e000      	b.n	800a400 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a3fe:	2302      	movs	r3, #2
  }
}
 800a400:	4618      	mov	r0, r3
 800a402:	3730      	adds	r7, #48	; 0x30
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	1fe00fff 	.word	0x1fe00fff

0800a40c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08c      	sub	sp, #48	; 0x30
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d107      	bne.n	800a434 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e08d      	b.n	800a550 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	f040 8086 	bne.w	800a54e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	441a      	add	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a452:	429a      	cmp	r2, r3
 800a454:	d907      	bls.n	800a466 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e074      	b.n	800a550 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2203      	movs	r2, #3
 800a46a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2200      	movs	r2, #0
 800a474:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	025a      	lsls	r2, r3, #9
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d002      	beq.n	800a492 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	025b      	lsls	r3, r3, #9
 800a490:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a492:	f04f 33ff 	mov.w	r3, #4294967295
 800a496:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	025b      	lsls	r3, r3, #9
 800a49c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a49e:	2390      	movs	r3, #144	; 0x90
 800a4a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f107 0210 	add.w	r2, r7, #16
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f002 fe89 	bl	800d1d0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4cc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d90a      	bls.n	800a4fa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	22a0      	movs	r2, #160	; 0xa0
 800a4e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f002 ff25 	bl	800d340 <SDMMC_CmdWriteMultiBlock>
 800a4f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a4f8:	e009      	b.n	800a50e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2290      	movs	r2, #144	; 0x90
 800a4fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a506:	4618      	mov	r0, r3
 800a508:	f002 fef7 	bl	800d2fa <SDMMC_CmdWriteSingleBlock>
 800a50c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a510:	2b00      	cmp	r3, #0
 800a512:	d012      	beq.n	800a53a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a0f      	ldr	r2, [pc, #60]	; (800a558 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a51a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	431a      	orrs	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e00a      	b.n	800a550 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a548:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e000      	b.n	800a550 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a54e:	2302      	movs	r3, #2
  }
}
 800a550:	4618      	mov	r0, r3
 800a552:	3730      	adds	r7, #48	; 0x30
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	1fe00fff 	.word	0x1fe00fff

0800a55c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a568:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d008      	beq.n	800a58a <HAL_SD_IRQHandler+0x2e>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d003      	beq.n	800a58a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 f92a 	bl	800b7dc <SD_Read_IT>
 800a588:	e19a      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 80ac 	beq.w	800a6f2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4b9d      	ldr	r3, [pc, #628]	; (800a824 <HAL_SD_IRQHandler+0x2c8>)
 800a5b0:	400b      	ands	r3, r1
 800a5b2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5c2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5d2:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f003 0308 	and.w	r3, r3, #8
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d038      	beq.n	800a650 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f003 0302 	and.w	r3, r3, #2
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d104      	bne.n	800a5f2 <HAL_SD_IRQHandler+0x96>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d011      	beq.n	800a616 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f002 fec6 	bl	800d388 <SDMMC_CmdStopTransfer>
 800a5fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d008      	beq.n	800a616 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	431a      	orrs	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f959 	bl	800a8c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a83      	ldr	r2, [pc, #524]	; (800a828 <HAL_SD_IRQHandler+0x2cc>)
 800a61c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d104      	bne.n	800a640 <HAL_SD_IRQHandler+0xe4>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f004 feb7 	bl	800f3b4 <HAL_SD_RxCpltCallback>
 800a646:	e13b      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f004 fea9 	bl	800f3a0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a64e:	e137      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	f000 8132 	beq.w	800a8c0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2200      	movs	r2, #0
 800a662:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2200      	movs	r2, #0
 800a66a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2200      	movs	r2, #0
 800a672:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f003 0302 	and.w	r3, r3, #2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d104      	bne.n	800a688 <HAL_SD_IRQHandler+0x12c>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b00      	cmp	r3, #0
 800a686:	d011      	beq.n	800a6ac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f002 fe7b 	bl	800d388 <SDMMC_CmdStopTransfer>
 800a692:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d008      	beq.n	800a6ac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f90e 	bl	800a8c8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f003 0310 	and.w	r3, r3, #16
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d104      	bne.n	800a6ce <HAL_SD_IRQHandler+0x172>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d002      	beq.n	800a6d4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f004 fe66 	bl	800f3a0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d105      	bne.n	800a6ea <HAL_SD_IRQHandler+0x18e>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f003 0302 	and.w	r3, r3, #2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 80eb 	beq.w	800a8c0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f004 fe62 	bl	800f3b4 <HAL_SD_RxCpltCallback>
}
 800a6f0:	e0e6      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d008      	beq.n	800a712 <HAL_SD_IRQHandler+0x1b6>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f003 0308 	and.w	r3, r3, #8
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f001 f8ac 	bl	800b868 <SD_Write_IT>
 800a710:	e0d6      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a718:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80a2 	beq.w	800a866 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	f043 0202 	orr.w	r2, r3, #2
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a742:	f003 0308 	and.w	r3, r3, #8
 800a746:	2b00      	cmp	r3, #0
 800a748:	d005      	beq.n	800a756 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74e:	f043 0208 	orr.w	r2, r3, #8
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75c:	f003 0320 	and.w	r3, r3, #32
 800a760:	2b00      	cmp	r3, #0
 800a762:	d005      	beq.n	800a770 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a768:	f043 0220 	orr.w	r2, r3, #32
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a776:	f003 0310 	and.w	r3, r3, #16
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a782:	f043 0210 	orr.w	r2, r3, #16
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a26      	ldr	r2, [pc, #152]	; (800a828 <HAL_SD_IRQHandler+0x2cc>)
 800a790:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a7a0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7b0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68da      	ldr	r2, [r3, #12]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7d0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f002 fdd6 	bl	800d388 <SDMMC_CmdStopTransfer>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68da      	ldr	r2, [r3, #12]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7f6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a800:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f003 0308 	and.w	r3, r3, #8
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00f      	beq.n	800a82c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f854 	bl	800a8c8 <HAL_SD_ErrorCallback>
}
 800a820:	e04e      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
 800a822:	bf00      	nop
 800a824:	ffff3ec5 	.word	0xffff3ec5
 800a828:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a832:	2b00      	cmp	r3, #0
 800a834:	d044      	beq.n	800a8c0 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d040      	beq.n	800a8c0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a84c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2200      	movs	r2, #0
 800a854:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f832 	bl	800a8c8 <HAL_SD_ErrorCallback>
}
 800a864:	e02c      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a870:	2b00      	cmp	r3, #0
 800a872:	d025      	beq.n	800a8c0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a87c:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10c      	bne.n	800a8a6 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f001 f84e 	bl	800b938 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a89c:	e010      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 f836 	bl	800b910 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a8a4:	e00c      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f003 0320 	and.w	r3, r3, #32
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d003      	beq.n	800a8b8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 f837 	bl	800b924 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a8b6:	e003      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 f81f 	bl	800b8fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a8be:	e7ff      	b.n	800a8c0 <HAL_SD_IRQHandler+0x364>
 800a8c0:	bf00      	nop
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800a8e6:	bf00      	nop
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a902:	0f9b      	lsrs	r3, r3, #30
 800a904:	b2da      	uxtb	r2, r3
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a90e:	0e9b      	lsrs	r3, r3, #26
 800a910:	b2db      	uxtb	r3, r3
 800a912:	f003 030f 	and.w	r3, r3, #15
 800a916:	b2da      	uxtb	r2, r3
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a920:	0e1b      	lsrs	r3, r3, #24
 800a922:	b2db      	uxtb	r3, r3
 800a924:	f003 0303 	and.w	r3, r3, #3
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	b2da      	uxtb	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a93e:	0a1b      	lsrs	r3, r3, #8
 800a940:	b2da      	uxtb	r2, r3
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a954:	0d1b      	lsrs	r3, r3, #20
 800a956:	b29a      	uxth	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a960:	0c1b      	lsrs	r3, r3, #16
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a972:	0bdb      	lsrs	r3, r3, #15
 800a974:	b2db      	uxtb	r3, r3
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a984:	0b9b      	lsrs	r3, r3, #14
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a996:	0b5b      	lsrs	r3, r3, #13
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9a8:	0b1b      	lsrs	r3, r3, #12
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d163      	bne.n	800aa8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c8:	009a      	lsls	r2, r3, #2
 800a9ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a9d4:	0f92      	lsrs	r2, r2, #30
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9e0:	0edb      	lsrs	r3, r3, #27
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9f2:	0e1b      	lsrs	r3, r3, #24
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa04:	0d5b      	lsrs	r3, r3, #21
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa16:	0c9b      	lsrs	r3, r3, #18
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 0307 	and.w	r3, r3, #7
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa28:	0bdb      	lsrs	r3, r3, #15
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	f003 0307 	and.w	r3, r3, #7
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	7e1b      	ldrb	r3, [r3, #24]
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	3302      	adds	r3, #2
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800aa56:	fb02 f203 	mul.w	r2, r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	7a1b      	ldrb	r3, [r3, #8]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 030f 	and.w	r3, r3, #15
 800aa68:	2201      	movs	r2, #1
 800aa6a:	409a      	lsls	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa78:	0a52      	lsrs	r2, r2, #9
 800aa7a:	fb02 f203 	mul.w	r2, r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa88:	659a      	str	r2, [r3, #88]	; 0x58
 800aa8a:	e031      	b.n	800aaf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d11d      	bne.n	800aad0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa98:	041b      	lsls	r3, r3, #16
 800aa9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaa2:	0c1b      	lsrs	r3, r3, #16
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	3301      	adds	r3, #1
 800aab0:	029a      	lsls	r2, r3, #10
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aac4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	659a      	str	r2, [r3, #88]	; 0x58
 800aace:	e00f      	b.n	800aaf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a58      	ldr	r2, [pc, #352]	; (800ac38 <HAL_SD_GetCardCSD+0x344>)
 800aad6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aadc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e09d      	b.n	800ac2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaf4:	0b9b      	lsrs	r3, r3, #14
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab06:	09db      	lsrs	r3, r3, #7
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab28:	0fdb      	lsrs	r3, r3, #31
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab34:	0f5b      	lsrs	r3, r3, #29
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab46:	0e9b      	lsrs	r3, r3, #26
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	f003 0307 	and.w	r3, r3, #7
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab58:	0d9b      	lsrs	r3, r3, #22
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 030f 	and.w	r3, r3, #15
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab6a:	0d5b      	lsrs	r3, r3, #21
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab86:	0c1b      	lsrs	r3, r3, #16
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab9a:	0bdb      	lsrs	r3, r3, #15
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abae:	0b9b      	lsrs	r3, r3, #14
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc2:	0b5b      	lsrs	r3, r3, #13
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abd6:	0b1b      	lsrs	r3, r3, #12
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abea:	0a9b      	lsrs	r3, r3, #10
 800abec:	b2db      	uxtb	r3, r3
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abfe:	0a1b      	lsrs	r3, r3, #8
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 0303 	and.w	r3, r3, #3
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac12:	085b      	lsrs	r3, r3, #1
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	1fe00fff 	.word	0x1fe00fff

0800ac3c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b094      	sub	sp, #80	; 0x50
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ac4c:	f107 0308 	add.w	r3, r7, #8
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fb64 	bl	800b320 <SD_SendSDStatus>
 800ac58:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d011      	beq.n	800ac84 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a4f      	ldr	r2, [pc, #316]	; (800ada4 <HAL_SD_GetCardStatus+0x168>)
 800ac66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ac82:	e070      	b.n	800ad66 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	099b      	lsrs	r3, r3, #6
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	095b      	lsrs	r3, r3, #5
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	0a1b      	lsrs	r3, r3, #8
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	0e1b      	lsrs	r3, r3, #24
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	4313      	orrs	r3, r2
 800acb8:	b29a      	uxth	r2, r3
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	061a      	lsls	r2, r3, #24
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	0a1b      	lsrs	r3, r3, #8
 800acd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acd4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	0e1b      	lsrs	r3, r3, #24
 800acda:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	0a1b      	lsrs	r3, r3, #8
 800acec:	b2da      	uxtb	r2, r3
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	0d1b      	lsrs	r3, r3, #20
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	0c1b      	lsrs	r3, r3, #16
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	4313      	orrs	r3, r2
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	0a9b      	lsrs	r3, r3, #10
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	0a1b      	lsrs	r3, r3, #8
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	f003 0303 	and.w	r3, r3, #3
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	091b      	lsrs	r3, r3, #4
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 030f 	and.w	r3, r3, #15
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	0e1b      	lsrs	r3, r3, #24
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f002 fa5a 	bl	800d228 <SDMMC_CmdBlockLength>
 800ad74:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00d      	beq.n	800ad98 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a08      	ldr	r2, [pc, #32]	; (800ada4 <HAL_SD_GetCardStatus+0x168>)
 800ad82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ad98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3750      	adds	r7, #80	; 0x50
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	1fe00fff 	.word	0x1fe00fff

0800ada8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ae00:	b5b0      	push	{r4, r5, r7, lr}
 800ae02:	b08e      	sub	sp, #56	; 0x38
 800ae04:	af04      	add	r7, sp, #16
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2203      	movs	r2, #3
 800ae14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d02e      	beq.n	800ae7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae26:	d106      	bne.n	800ae36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	639a      	str	r2, [r3, #56]	; 0x38
 800ae34:	e029      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae3c:	d10a      	bne.n	800ae54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fb66 	bl	800b510 <SD_WideBus_Enable>
 800ae44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	639a      	str	r2, [r3, #56]	; 0x38
 800ae52:	e01a      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10a      	bne.n	800ae70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fba3 	bl	800b5a6 <SD_WideBus_Disable>
 800ae60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	639a      	str	r2, [r3, #56]	; 0x38
 800ae6e:	e00c      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	639a      	str	r2, [r3, #56]	; 0x38
 800ae7c:	e005      	b.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a2e      	ldr	r2, [pc, #184]	; (800af50 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ae98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aea0:	e034      	b.n	800af0c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d903      	bls.n	800aec8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	61bb      	str	r3, [r7, #24]
 800aec6:	e012      	b.n	800aeee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aed0:	d103      	bne.n	800aeda <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	61bb      	str	r3, [r7, #24]
 800aed8:	e009      	b.n	800aeee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aee2:	d102      	bne.n	800aeea <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800aee4:	2302      	movs	r3, #2
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	e001      	b.n	800aeee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800aeea:	2304      	movs	r3, #4
 800aeec:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681d      	ldr	r5, [r3, #0]
 800aef2:	466c      	mov	r4, sp
 800aef4:	f107 0314 	add.w	r3, r7, #20
 800aef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aefc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af00:	f107 0308 	add.w	r3, r7, #8
 800af04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af06:	4628      	mov	r0, r5
 800af08:	f002 f8b0 	bl	800d06c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af14:	4618      	mov	r0, r3
 800af16:	f002 f987 	bl	800d228 <SDMMC_CmdBlockLength>
 800af1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00c      	beq.n	800af3c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a0a      	ldr	r2, [pc, #40]	; (800af50 <HAL_SD_ConfigWideBusOperation+0x150>)
 800af28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	431a      	orrs	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800af44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3728      	adds	r7, #40	; 0x28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bdb0      	pop	{r4, r5, r7, pc}
 800af50:	1fe00fff 	.word	0x1fe00fff

0800af54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800af60:	f107 030c 	add.w	r3, r7, #12
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 faaa 	bl	800b4c0 <SD_SendStatus>
 800af6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	431a      	orrs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	0a5b      	lsrs	r3, r3, #9
 800af84:	f003 030f 	and.w	r3, r3, #15
 800af88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800af8a:	693b      	ldr	r3, [r7, #16]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3718      	adds	r7, #24
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800af94:	b590      	push	{r4, r7, lr}
 800af96:	b091      	sub	sp, #68	; 0x44
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800af9c:	2301      	movs	r3, #1
 800af9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f002 f8ba 	bl	800d11e <SDMMC_GetPowerState>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d102      	bne.n	800afb6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800afb4:	e0a8      	b.n	800b108 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afba:	2b03      	cmp	r3, #3
 800afbc:	d02e      	beq.n	800b01c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f002 fb06 	bl	800d5d4 <SDMMC_CmdSendCID>
 800afc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <SD_InitCard+0x40>
    {
      return errorstate;
 800afd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd2:	e099      	b.n	800b108 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2100      	movs	r1, #0
 800afda:	4618      	mov	r0, r3
 800afdc:	f002 f8e5 	bl	800d1aa <SDMMC_GetResponse>
 800afe0:	4602      	mov	r2, r0
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2104      	movs	r1, #4
 800afec:	4618      	mov	r0, r3
 800afee:	f002 f8dc 	bl	800d1aa <SDMMC_GetResponse>
 800aff2:	4602      	mov	r2, r0
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2108      	movs	r1, #8
 800affe:	4618      	mov	r0, r3
 800b000:	f002 f8d3 	bl	800d1aa <SDMMC_GetResponse>
 800b004:	4602      	mov	r2, r0
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	210c      	movs	r1, #12
 800b010:	4618      	mov	r0, r3
 800b012:	f002 f8ca 	bl	800d1aa <SDMMC_GetResponse>
 800b016:	4602      	mov	r2, r0
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b020:	2b03      	cmp	r3, #3
 800b022:	d00d      	beq.n	800b040 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f107 020e 	add.w	r2, r7, #14
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f002 fb0f 	bl	800d652 <SDMMC_CmdSetRelAdd>
 800b034:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <SD_InitCard+0xac>
    {
      return errorstate;
 800b03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03e:	e063      	b.n	800b108 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b044:	2b03      	cmp	r3, #3
 800b046:	d036      	beq.n	800b0b6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b048:	89fb      	ldrh	r3, [r7, #14]
 800b04a:	461a      	mov	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b058:	041b      	lsls	r3, r3, #16
 800b05a:	4619      	mov	r1, r3
 800b05c:	4610      	mov	r0, r2
 800b05e:	f002 fad8 	bl	800d612 <SDMMC_CmdSendCSD>
 800b062:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <SD_InitCard+0xda>
    {
      return errorstate;
 800b06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b06c:	e04c      	b.n	800b108 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2100      	movs	r1, #0
 800b074:	4618      	mov	r0, r3
 800b076:	f002 f898 	bl	800d1aa <SDMMC_GetResponse>
 800b07a:	4602      	mov	r2, r0
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2104      	movs	r1, #4
 800b086:	4618      	mov	r0, r3
 800b088:	f002 f88f 	bl	800d1aa <SDMMC_GetResponse>
 800b08c:	4602      	mov	r2, r0
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2108      	movs	r1, #8
 800b098:	4618      	mov	r0, r3
 800b09a:	f002 f886 	bl	800d1aa <SDMMC_GetResponse>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	210c      	movs	r1, #12
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f002 f87d 	bl	800d1aa <SDMMC_GetResponse>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2104      	movs	r1, #4
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f002 f874 	bl	800d1aa <SDMMC_GetResponse>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	0d1a      	lsrs	r2, r3, #20
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b0ca:	f107 0310 	add.w	r3, r7, #16
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff fc0f 	bl	800a8f4 <HAL_SD_GetCardCSD>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0e0:	e012      	b.n	800b108 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6819      	ldr	r1, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ea:	041b      	lsls	r3, r3, #16
 800b0ec:	f04f 0400 	mov.w	r4, #0
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	4623      	mov	r3, r4
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	f002 f983 	bl	800d400 <SDMMC_CmdSelDesel>
 800b0fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <SD_InitCard+0x172>
  {
    return errorstate;
 800b102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b104:	e000      	b.n	800b108 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3744      	adds	r7, #68	; 0x44
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd90      	pop	{r4, r7, pc}

0800b110 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b118:	2300      	movs	r3, #0
 800b11a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	61fb      	str	r3, [r7, #28]
 800b120:	2300      	movs	r3, #0
 800b122:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800b124:	f7f6 fe3a 	bl	8001d9c <HAL_GetTick>
 800b128:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4618      	mov	r0, r3
 800b130:	f002 f98a 	bl	800d448 <SDMMC_CmdGoIdleState>
 800b134:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <SD_PowerON+0x30>
  {
    return errorstate;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	e0e9      	b.n	800b314 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4618      	mov	r0, r3
 800b146:	f002 f99d 	bl	800d484 <SDMMC_CmdOperCond>
 800b14a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00d      	beq.n	800b16e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f002 f973 	bl	800d448 <SDMMC_CmdGoIdleState>
 800b162:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d004      	beq.n	800b174 <SD_PowerON+0x64>
    {
      return errorstate;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	e0d2      	b.n	800b314 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d137      	bne.n	800b1ec <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2100      	movs	r1, #0
 800b182:	4618      	mov	r0, r3
 800b184:	f002 f99e 	bl	800d4c4 <SDMMC_CmdAppCommand>
 800b188:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d02d      	beq.n	800b1ec <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b194:	e0be      	b.n	800b314 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2100      	movs	r1, #0
 800b19c:	4618      	mov	r0, r3
 800b19e:	f002 f991 	bl	800d4c4 <SDMMC_CmdAppCommand>
 800b1a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <SD_PowerON+0x9e>
    {
      return errorstate;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	e0b2      	b.n	800b314 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	495a      	ldr	r1, [pc, #360]	; (800b31c <SD_PowerON+0x20c>)
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f002 f9a8 	bl	800d50a <SDMMC_CmdAppOperCommand>
 800b1ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d002      	beq.n	800b1c8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1c6:	e0a5      	b.n	800b314 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 ffeb 	bl	800d1aa <SDMMC_GetResponse>
 800b1d4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	0fdb      	lsrs	r3, r3, #31
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d101      	bne.n	800b1e2 <SD_PowerON+0xd2>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e000      	b.n	800b1e4 <SD_PowerON+0xd4>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	61bb      	str	r3, [r7, #24]

    count++;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d802      	bhi.n	800b1fc <SD_PowerON+0xec>
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d0cc      	beq.n	800b196 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b202:	4293      	cmp	r3, r2
 800b204:	d902      	bls.n	800b20c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b20a:	e083      	b.n	800b314 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d07d      	beq.n	800b312 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	2b02      	cmp	r3, #2
 800b222:	d176      	bne.n	800b312 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d071      	beq.n	800b312 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b234:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f042 0208 	orr.w	r2, r2, #8
 800b244:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f002 fa68 	bl	800d720 <SDMMC_CmdVoltageSwitch>
 800b250:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00c      	beq.n	800b272 <SD_PowerON+0x162>
        {
          return errorstate;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	e05b      	b.n	800b314 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b25c:	f7f6 fd9e 	bl	8001d9c <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26a:	d102      	bne.n	800b272 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800b26c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b270:	e050      	b.n	800b314 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b27c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b280:	d1ec      	bne.n	800b25c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b28a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b29a:	d002      	beq.n	800b2a2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800b29c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2a0:	e038      	b.n	800b314 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800b2a2:	2001      	movs	r0, #1
 800b2a4:	f7ff fb1a 	bl	800a8dc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0204 	orr.w	r2, r2, #4
 800b2b6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b2b8:	e00a      	b.n	800b2d0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b2ba:	f7f6 fd6f 	bl	8001d9c <HAL_GetTick>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c8:	d102      	bne.n	800b2d0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800b2ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2ce:	e021      	b.n	800b314 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2de:	d1ec      	bne.n	800b2ba <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b2e8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2f8:	d102      	bne.n	800b300 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b2fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2fe:	e009      	b.n	800b314 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2213      	movs	r2, #19
 800b306:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f04f 32ff 	mov.w	r2, #4294967295
 800b310:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3720      	adds	r7, #32
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	c1100000 	.word	0xc1100000

0800b320 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08c      	sub	sp, #48	; 0x30
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b32a:	f7f6 fd37 	bl	8001d9c <HAL_GetTick>
 800b32e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2100      	movs	r1, #0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 ff35 	bl	800d1aa <SDMMC_GetResponse>
 800b340:	4603      	mov	r3, r0
 800b342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b34a:	d102      	bne.n	800b352 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b34c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b350:	e0b0      	b.n	800b4b4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2140      	movs	r1, #64	; 0x40
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 ff65 	bl	800d228 <SDMMC_CmdBlockLength>
 800b35e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d005      	beq.n	800b372 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	e0a0      	b.n	800b4b4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b37a:	041b      	lsls	r3, r3, #16
 800b37c:	4619      	mov	r1, r3
 800b37e:	4610      	mov	r0, r2
 800b380:	f002 f8a0 	bl	800d4c4 <SDMMC_CmdAppCommand>
 800b384:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	e08d      	b.n	800b4b4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b398:	f04f 33ff 	mov.w	r3, #4294967295
 800b39c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b39e:	2340      	movs	r3, #64	; 0x40
 800b3a0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b3a2:	2360      	movs	r3, #96	; 0x60
 800b3a4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f107 0208 	add.w	r2, r7, #8
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f001 ff07 	bl	800d1d0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f002 f988 	bl	800d6dc <SDMMC_CmdStatusRegister>
 800b3cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d02b      	beq.n	800b42c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800b3dc:	6a3b      	ldr	r3, [r7, #32]
 800b3de:	e069      	b.n	800b4b4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d013      	beq.n	800b416 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3f2:	e00d      	b.n	800b410 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f001 fe61 	bl	800d0c0 <SDMMC_ReadFIFO>
 800b3fe:	4602      	mov	r2, r0
 800b400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b402:	601a      	str	r2, [r3, #0]
        pData++;
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	3304      	adds	r3, #4
 800b408:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800b40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40c:	3301      	adds	r3, #1
 800b40e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	2b07      	cmp	r3, #7
 800b414:	d9ee      	bls.n	800b3f4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b416:	f7f6 fcc1 	bl	8001d9c <HAL_GetTick>
 800b41a:	4602      	mov	r2, r0
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b424:	d102      	bne.n	800b42c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b426:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b42a:	e043      	b.n	800b4b4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b432:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0d2      	beq.n	800b3e0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b440:	f003 0308 	and.w	r3, r3, #8
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b448:	2308      	movs	r3, #8
 800b44a:	e033      	b.n	800b4b4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b45a:	2302      	movs	r3, #2
 800b45c:	e02a      	b.n	800b4b4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b464:	f003 0320 	and.w	r3, r3, #32
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d017      	beq.n	800b49c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b46c:	2320      	movs	r3, #32
 800b46e:	e021      	b.n	800b4b4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4618      	mov	r0, r3
 800b476:	f001 fe23 	bl	800d0c0 <SDMMC_ReadFIFO>
 800b47a:	4602      	mov	r2, r0
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	601a      	str	r2, [r3, #0]
    pData++;
 800b480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b482:	3304      	adds	r3, #4
 800b484:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b486:	f7f6 fc89 	bl	8001d9c <HAL_GetTick>
 800b48a:	4602      	mov	r2, r0
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b494:	d102      	bne.n	800b49c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b496:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b49a:	e00b      	b.n	800b4b4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1e2      	bne.n	800b470 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a03      	ldr	r2, [pc, #12]	; (800b4bc <SD_SendSDStatus+0x19c>)
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3730      	adds	r7, #48	; 0x30
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	18000f3a 	.word	0x18000f3a

0800b4c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d102      	bne.n	800b4d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b4d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b4d4:	e018      	b.n	800b508 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4de:	041b      	lsls	r3, r3, #16
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	f002 f8d7 	bl	800d696 <SDMMC_CmdSendStatus>
 800b4e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	e009      	b.n	800b508 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f001 fe55 	bl	800d1aa <SDMMC_GetResponse>
 800b500:	4602      	mov	r2, r0
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	2300      	movs	r3, #0
 800b51e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2100      	movs	r1, #0
 800b526:	4618      	mov	r0, r3
 800b528:	f001 fe3f 	bl	800d1aa <SDMMC_GetResponse>
 800b52c:	4603      	mov	r3, r0
 800b52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b536:	d102      	bne.n	800b53e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b53c:	e02f      	b.n	800b59e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b53e:	f107 030c 	add.w	r3, r7, #12
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f879 	bl	800b63c <SD_FindSCR>
 800b54a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	e023      	b.n	800b59e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d01c      	beq.n	800b59a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b568:	041b      	lsls	r3, r3, #16
 800b56a:	4619      	mov	r1, r3
 800b56c:	4610      	mov	r0, r2
 800b56e:	f001 ffa9 	bl	800d4c4 <SDMMC_CmdAppCommand>
 800b572:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	e00f      	b.n	800b59e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2102      	movs	r1, #2
 800b584:	4618      	mov	r0, r3
 800b586:	f001 ffe0 	bl	800d54a <SDMMC_CmdBusWidth>
 800b58a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	e003      	b.n	800b59e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b596:	2300      	movs	r3, #0
 800b598:	e001      	b.n	800b59e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b59a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3718      	adds	r7, #24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b086      	sub	sp, #24
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 fdf4 	bl	800d1aa <SDMMC_GetResponse>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5cc:	d102      	bne.n	800b5d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b5ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5d2:	e02f      	b.n	800b634 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b5d4:	f107 030c 	add.w	r3, r7, #12
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f82e 	bl	800b63c <SD_FindSCR>
 800b5e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	e023      	b.n	800b634 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d01c      	beq.n	800b630 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5fe:	041b      	lsls	r3, r3, #16
 800b600:	4619      	mov	r1, r3
 800b602:	4610      	mov	r0, r2
 800b604:	f001 ff5e 	bl	800d4c4 <SDMMC_CmdAppCommand>
 800b608:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	e00f      	b.n	800b634 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2100      	movs	r1, #0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 ff95 	bl	800d54a <SDMMC_CmdBusWidth>
 800b620:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	e003      	b.n	800b634 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	e001      	b.n	800b634 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b630:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b08e      	sub	sp, #56	; 0x38
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b646:	f7f6 fba9 	bl	8001d9c <HAL_GetTick>
 800b64a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b64c:	2300      	movs	r3, #0
 800b64e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b650:	2300      	movs	r3, #0
 800b652:	60bb      	str	r3, [r7, #8]
 800b654:	2300      	movs	r3, #0
 800b656:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2108      	movs	r1, #8
 800b662:	4618      	mov	r0, r3
 800b664:	f001 fde0 	bl	800d228 <SDMMC_CmdBlockLength>
 800b668:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	e0ad      	b.n	800b7d0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b67c:	041b      	lsls	r3, r3, #16
 800b67e:	4619      	mov	r1, r3
 800b680:	4610      	mov	r0, r2
 800b682:	f001 ff1f 	bl	800d4c4 <SDMMC_CmdAppCommand>
 800b686:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	e09e      	b.n	800b7d0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b692:	f04f 33ff 	mov.w	r3, #4294967295
 800b696:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b698:	2308      	movs	r3, #8
 800b69a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b69c:	2330      	movs	r3, #48	; 0x30
 800b69e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f107 0210 	add.w	r2, r7, #16
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f001 fd8a 	bl	800d1d0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 ff65 	bl	800d590 <SDMMC_CmdSendSCR>
 800b6c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d027      	beq.n	800b71e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	e07e      	b.n	800b7d0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d113      	bne.n	800b708 <SD_FindSCR+0xcc>
 800b6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d110      	bne.n	800b708 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f001 fce8 	bl	800d0c0 <SDMMC_ReadFIFO>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f001 fce1 	bl	800d0c0 <SDMMC_ReadFIFO>
 800b6fe:	4603      	mov	r3, r0
 800b700:	60fb      	str	r3, [r7, #12]
      index++;
 800b702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b704:	3301      	adds	r3, #1
 800b706:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b708:	f7f6 fb48 	bl	8001d9c <HAL_GetTick>
 800b70c:	4602      	mov	r2, r0
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b716:	d102      	bne.n	800b71e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b71c:	e058      	b.n	800b7d0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b724:	f240 532a 	movw	r3, #1322	; 0x52a
 800b728:	4013      	ands	r3, r2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0d1      	beq.n	800b6d2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b734:	f003 0308 	and.w	r3, r3, #8
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d005      	beq.n	800b748 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2208      	movs	r2, #8
 800b742:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b744:	2308      	movs	r3, #8
 800b746:	e043      	b.n	800b7d0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74e:	f003 0302 	and.w	r3, r3, #2
 800b752:	2b00      	cmp	r3, #0
 800b754:	d005      	beq.n	800b762 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2202      	movs	r2, #2
 800b75c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b75e:	2302      	movs	r3, #2
 800b760:	e036      	b.n	800b7d0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b768:	f003 0320 	and.w	r3, r3, #32
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2220      	movs	r2, #32
 800b776:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b778:	2320      	movs	r3, #32
 800b77a:	e029      	b.n	800b7d0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a15      	ldr	r2, [pc, #84]	; (800b7d8 <SD_FindSCR+0x19c>)
 800b782:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	061a      	lsls	r2, r3, #24
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	021b      	lsls	r3, r3, #8
 800b78c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b790:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	0a1b      	lsrs	r3, r3, #8
 800b796:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b79a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	0e1b      	lsrs	r3, r3, #24
 800b7a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	601a      	str	r2, [r3, #0]
    scr++;
 800b7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	061a      	lsls	r2, r3, #24
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	021b      	lsls	r3, r3, #8
 800b7b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b7b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	0a1b      	lsrs	r3, r3, #8
 800b7be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b7c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	0e1b      	lsrs	r3, r3, #24
 800b7c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3738      	adds	r7, #56	; 0x38
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	18000f3a 	.word	0x18000f3a

0800b7dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ee:	2b1f      	cmp	r3, #31
 800b7f0:	d936      	bls.n	800b860 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	e027      	b.n	800b848 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f001 fc5f 	bl	800d0c0 <SDMMC_ReadFIFO>
 800b802:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	b2da      	uxtb	r2, r3
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	3301      	adds	r3, #1
 800b810:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	0a1b      	lsrs	r3, r3, #8
 800b816:	b2da      	uxtb	r2, r3
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	3301      	adds	r3, #1
 800b820:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	0c1b      	lsrs	r3, r3, #16
 800b826:	b2da      	uxtb	r2, r3
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	3301      	adds	r3, #1
 800b830:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	0e1b      	lsrs	r3, r3, #24
 800b836:	b2da      	uxtb	r2, r3
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	3301      	adds	r3, #1
 800b840:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	3301      	adds	r3, #1
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2b07      	cmp	r3, #7
 800b84c:	d9d4      	bls.n	800b7f8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	f1a3 0220 	sub.w	r2, r3, #32
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b860:	bf00      	nop
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	2b1f      	cmp	r3, #31
 800b87c:	d93a      	bls.n	800b8f4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e02b      	b.n	800b8dc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	3301      	adds	r3, #1
 800b88e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	021a      	lsls	r2, r3, #8
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	041a      	lsls	r2, r3, #16
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	061a      	lsls	r2, r3, #24
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f107 020c 	add.w	r2, r7, #12
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f001 fc02 	bl	800d0da <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	2b07      	cmp	r3, #7
 800b8e0:	d9d0      	bls.n	800b884 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	f1a3 0220 	sub.w	r2, r3, #32
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b8f4:	bf00      	nop
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800b954:	2300      	movs	r3, #0
 800b956:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	e0e2      	b.n	800bb28 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a70      	ldr	r2, [pc, #448]	; (800bb30 <HAL_SPI_Init+0x1e4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00f      	beq.n	800b992 <HAL_SPI_Init+0x46>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a6f      	ldr	r2, [pc, #444]	; (800bb34 <HAL_SPI_Init+0x1e8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d00a      	beq.n	800b992 <HAL_SPI_Init+0x46>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a6d      	ldr	r2, [pc, #436]	; (800bb38 <HAL_SPI_Init+0x1ec>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d005      	beq.n	800b992 <HAL_SPI_Init+0x46>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	2b0f      	cmp	r3, #15
 800b98c:	d901      	bls.n	800b992 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e0ca      	b.n	800bb28 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f8d2 	bl	800bb3c <SPI_GetPacketSize>
 800b998:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a64      	ldr	r2, [pc, #400]	; (800bb30 <HAL_SPI_Init+0x1e4>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d00c      	beq.n	800b9be <HAL_SPI_Init+0x72>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a62      	ldr	r2, [pc, #392]	; (800bb34 <HAL_SPI_Init+0x1e8>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d007      	beq.n	800b9be <HAL_SPI_Init+0x72>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a61      	ldr	r2, [pc, #388]	; (800bb38 <HAL_SPI_Init+0x1ec>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d002      	beq.n	800b9be <HAL_SPI_Init+0x72>
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	d811      	bhi.n	800b9e2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9c2:	4a5b      	ldr	r2, [pc, #364]	; (800bb30 <HAL_SPI_Init+0x1e4>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d009      	beq.n	800b9dc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a59      	ldr	r2, [pc, #356]	; (800bb34 <HAL_SPI_Init+0x1e8>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d004      	beq.n	800b9dc <HAL_SPI_Init+0x90>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a58      	ldr	r2, [pc, #352]	; (800bb38 <HAL_SPI_Init+0x1ec>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d104      	bne.n	800b9e6 <HAL_SPI_Init+0x9a>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	d901      	bls.n	800b9e6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e0a0      	b.n	800bb28 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7f5 feae 	bl	800175c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2202      	movs	r2, #2
 800ba04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f022 0201 	bic.w	r2, r2, #1
 800ba16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba20:	d110      	bne.n	800ba44 <HAL_SPI_Init+0xf8>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba2a:	d10b      	bne.n	800ba44 <HAL_SPI_Init+0xf8>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d107      	bne.n	800ba44 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba42:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	69da      	ldr	r2, [r3, #28]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4c:	431a      	orrs	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	431a      	orrs	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba56:	ea42 0103 	orr.w	r1, r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	68da      	ldr	r2, [r3, #12]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6e:	431a      	orrs	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba74:	431a      	orrs	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	431a      	orrs	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	431a      	orrs	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	431a      	orrs	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a1b      	ldr	r3, [r3, #32]
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	431a      	orrs	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	431a      	orrs	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baa4:	ea42 0103 	orr.w	r1, r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d113      	bne.n	800bae4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bace:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bae2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0201 	bic.w	r2, r2, #1
 800baf2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00a      	beq.n	800bb16 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	40013000 	.word	0x40013000
 800bb34:	40003800 	.word	0x40003800
 800bb38:	40003c00 	.word	0x40003c00

0800bb3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb48:	095b      	lsrs	r3, r3, #5
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	3301      	adds	r3, #1
 800bb54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	3307      	adds	r3, #7
 800bb5a:	08db      	lsrs	r3, r3, #3
 800bb5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b082      	sub	sp, #8
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e042      	b.n	800bc0a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d106      	bne.n	800bb9c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7f5 fe2a 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2224      	movs	r2, #36	; 0x24
 800bba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f022 0201 	bic.w	r2, r2, #1
 800bbb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f95f 	bl	800be78 <UART_SetConfig>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d101      	bne.n	800bbc4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e022      	b.n	800bc0a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 ff03 	bl	800c9d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbe0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbf0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f042 0201 	orr.w	r2, r2, #1
 800bc00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 ff8a 	bl	800cb1c <UART_CheckIdleState>
 800bc08:	4603      	mov	r3, r0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b08a      	sub	sp, #40	; 0x28
 800bc16:	af02      	add	r7, sp, #8
 800bc18:	60f8      	str	r0, [r7, #12]
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	603b      	str	r3, [r7, #0]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc28:	2b20      	cmp	r3, #32
 800bc2a:	f040 8083 	bne.w	800bd34 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <HAL_UART_Transmit+0x28>
 800bc34:	88fb      	ldrh	r3, [r7, #6]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d101      	bne.n	800bc3e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e07b      	b.n	800bd36 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d101      	bne.n	800bc4c <HAL_UART_Transmit+0x3a>
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e074      	b.n	800bd36 <HAL_UART_Transmit+0x124>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2221      	movs	r2, #33	; 0x21
 800bc60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800bc64:	f7f6 f89a 	bl	8001d9c <HAL_GetTick>
 800bc68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	88fa      	ldrh	r2, [r7, #6]
 800bc6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	88fa      	ldrh	r2, [r7, #6]
 800bc76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc82:	d108      	bne.n	800bc96 <HAL_UART_Transmit+0x84>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d104      	bne.n	800bc96 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	61bb      	str	r3, [r7, #24]
 800bc94:	e003      	b.n	800bc9e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800bca6:	e02c      	b.n	800bd02 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2180      	movs	r1, #128	; 0x80
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f000 ff7a 	bl	800cbac <UART_WaitOnFlagUntilTimeout>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e039      	b.n	800bd36 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10b      	bne.n	800bce0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	461a      	mov	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	3302      	adds	r3, #2
 800bcdc:	61bb      	str	r3, [r7, #24]
 800bcde:	e007      	b.n	800bcf0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	781a      	ldrb	r2, [r3, #0]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	3301      	adds	r3, #1
 800bcee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1cc      	bne.n	800bca8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	2200      	movs	r2, #0
 800bd16:	2140      	movs	r1, #64	; 0x40
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f000 ff47 	bl	800cbac <UART_WaitOnFlagUntilTimeout>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e006      	b.n	800bd36 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2220      	movs	r2, #32
 800bd2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	e000      	b.n	800bd36 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bd34:	2302      	movs	r3, #2
  }
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3720      	adds	r7, #32
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd54:	2b20      	cmp	r3, #32
 800bd56:	d170      	bne.n	800be3a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <HAL_UART_Receive_DMA+0x24>
 800bd5e:	88fb      	ldrh	r3, [r7, #6]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e069      	b.n	800be3c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d101      	bne.n	800bd76 <HAL_UART_Receive_DMA+0x36>
 800bd72:	2302      	movs	r3, #2
 800bd74:	e062      	b.n	800be3c <HAL_UART_Receive_DMA+0xfc>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	88fa      	ldrh	r2, [r7, #6]
 800bd88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2222      	movs	r2, #34	; 0x22
 800bd98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d02c      	beq.n	800bdfe <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda8:	4a26      	ldr	r2, [pc, #152]	; (800be44 <HAL_UART_Receive_DMA+0x104>)
 800bdaa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdb0:	4a25      	ldr	r2, [pc, #148]	; (800be48 <HAL_UART_Receive_DMA+0x108>)
 800bdb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdb8:	4a24      	ldr	r2, [pc, #144]	; (800be4c <HAL_UART_Receive_DMA+0x10c>)
 800bdba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3324      	adds	r3, #36	; 0x24
 800bdce:	4619      	mov	r1, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	f7f6 fc86 	bl	80026e8 <HAL_DMA_Start_IT>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00d      	beq.n	800bdfe <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2210      	movs	r2, #16
 800bde6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e01e      	b.n	800be3c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be14:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	689a      	ldr	r2, [r3, #8]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0201 	orr.w	r2, r2, #1
 800be24:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	689a      	ldr	r2, [r3, #8]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be34:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	e000      	b.n	800be3c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800be3a:	2302      	movs	r3, #2
  }
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	0800cd31 	.word	0x0800cd31
 800be48:	0800cd97 	.word	0x0800cd97
 800be4c:	0800cdb3 	.word	0x0800cdb3

0800be50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800be58:	bf00      	nop
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800be7c:	b08e      	sub	sp, #56	; 0x38
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	689a      	ldr	r2, [r3, #8]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	431a      	orrs	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	69db      	ldr	r3, [r3, #28]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea6:	4313      	orrs	r3, r2
 800bea8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	4bc1      	ldr	r3, [pc, #772]	; (800c1b8 <UART_SetConfig+0x340>)
 800beb2:	4013      	ands	r3, r2
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	6812      	ldr	r2, [r2, #0]
 800beb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800beba:	430b      	orrs	r3, r1
 800bebc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68da      	ldr	r2, [r3, #12]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	430a      	orrs	r2, r1
 800bed2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4ab7      	ldr	r2, [pc, #732]	; (800c1bc <UART_SetConfig+0x344>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d004      	beq.n	800beee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a1b      	ldr	r3, [r3, #32]
 800bee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beea:	4313      	orrs	r3, r2
 800beec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689a      	ldr	r2, [r3, #8]
 800bef4:	4bb2      	ldr	r3, [pc, #712]	; (800c1c0 <UART_SetConfig+0x348>)
 800bef6:	4013      	ands	r3, r2
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	6812      	ldr	r2, [r2, #0]
 800befc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800befe:	430b      	orrs	r3, r1
 800bf00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	f023 010f 	bic.w	r1, r3, #15
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4aa9      	ldr	r2, [pc, #676]	; (800c1c4 <UART_SetConfig+0x34c>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d177      	bne.n	800c012 <UART_SetConfig+0x19a>
 800bf22:	4ba9      	ldr	r3, [pc, #676]	; (800c1c8 <UART_SetConfig+0x350>)
 800bf24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf2a:	2b28      	cmp	r3, #40	; 0x28
 800bf2c:	d86c      	bhi.n	800c008 <UART_SetConfig+0x190>
 800bf2e:	a201      	add	r2, pc, #4	; (adr r2, 800bf34 <UART_SetConfig+0xbc>)
 800bf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf34:	0800bfd9 	.word	0x0800bfd9
 800bf38:	0800c009 	.word	0x0800c009
 800bf3c:	0800c009 	.word	0x0800c009
 800bf40:	0800c009 	.word	0x0800c009
 800bf44:	0800c009 	.word	0x0800c009
 800bf48:	0800c009 	.word	0x0800c009
 800bf4c:	0800c009 	.word	0x0800c009
 800bf50:	0800c009 	.word	0x0800c009
 800bf54:	0800bfe1 	.word	0x0800bfe1
 800bf58:	0800c009 	.word	0x0800c009
 800bf5c:	0800c009 	.word	0x0800c009
 800bf60:	0800c009 	.word	0x0800c009
 800bf64:	0800c009 	.word	0x0800c009
 800bf68:	0800c009 	.word	0x0800c009
 800bf6c:	0800c009 	.word	0x0800c009
 800bf70:	0800c009 	.word	0x0800c009
 800bf74:	0800bfe9 	.word	0x0800bfe9
 800bf78:	0800c009 	.word	0x0800c009
 800bf7c:	0800c009 	.word	0x0800c009
 800bf80:	0800c009 	.word	0x0800c009
 800bf84:	0800c009 	.word	0x0800c009
 800bf88:	0800c009 	.word	0x0800c009
 800bf8c:	0800c009 	.word	0x0800c009
 800bf90:	0800c009 	.word	0x0800c009
 800bf94:	0800bff1 	.word	0x0800bff1
 800bf98:	0800c009 	.word	0x0800c009
 800bf9c:	0800c009 	.word	0x0800c009
 800bfa0:	0800c009 	.word	0x0800c009
 800bfa4:	0800c009 	.word	0x0800c009
 800bfa8:	0800c009 	.word	0x0800c009
 800bfac:	0800c009 	.word	0x0800c009
 800bfb0:	0800c009 	.word	0x0800c009
 800bfb4:	0800bff9 	.word	0x0800bff9
 800bfb8:	0800c009 	.word	0x0800c009
 800bfbc:	0800c009 	.word	0x0800c009
 800bfc0:	0800c009 	.word	0x0800c009
 800bfc4:	0800c009 	.word	0x0800c009
 800bfc8:	0800c009 	.word	0x0800c009
 800bfcc:	0800c009 	.word	0x0800c009
 800bfd0:	0800c009 	.word	0x0800c009
 800bfd4:	0800c001 	.word	0x0800c001
 800bfd8:	2301      	movs	r3, #1
 800bfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfde:	e233      	b.n	800c448 <UART_SetConfig+0x5d0>
 800bfe0:	2304      	movs	r3, #4
 800bfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfe6:	e22f      	b.n	800c448 <UART_SetConfig+0x5d0>
 800bfe8:	2308      	movs	r3, #8
 800bfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfee:	e22b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800bff0:	2310      	movs	r3, #16
 800bff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bff6:	e227      	b.n	800c448 <UART_SetConfig+0x5d0>
 800bff8:	2320      	movs	r3, #32
 800bffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bffe:	e223      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c000:	2340      	movs	r3, #64	; 0x40
 800c002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c006:	e21f      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c008:	2380      	movs	r3, #128	; 0x80
 800c00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c00e:	bf00      	nop
 800c010:	e21a      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a6d      	ldr	r2, [pc, #436]	; (800c1cc <UART_SetConfig+0x354>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d132      	bne.n	800c082 <UART_SetConfig+0x20a>
 800c01c:	4b6a      	ldr	r3, [pc, #424]	; (800c1c8 <UART_SetConfig+0x350>)
 800c01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c020:	f003 0307 	and.w	r3, r3, #7
 800c024:	2b05      	cmp	r3, #5
 800c026:	d827      	bhi.n	800c078 <UART_SetConfig+0x200>
 800c028:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <UART_SetConfig+0x1b8>)
 800c02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02e:	bf00      	nop
 800c030:	0800c049 	.word	0x0800c049
 800c034:	0800c051 	.word	0x0800c051
 800c038:	0800c059 	.word	0x0800c059
 800c03c:	0800c061 	.word	0x0800c061
 800c040:	0800c069 	.word	0x0800c069
 800c044:	0800c071 	.word	0x0800c071
 800c048:	2300      	movs	r3, #0
 800c04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c04e:	e1fb      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c050:	2304      	movs	r3, #4
 800c052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c056:	e1f7      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c058:	2308      	movs	r3, #8
 800c05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c05e:	e1f3      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c060:	2310      	movs	r3, #16
 800c062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c066:	e1ef      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c068:	2320      	movs	r3, #32
 800c06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c06e:	e1eb      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c070:	2340      	movs	r3, #64	; 0x40
 800c072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c076:	e1e7      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c078:	2380      	movs	r3, #128	; 0x80
 800c07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c07e:	bf00      	nop
 800c080:	e1e2      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a52      	ldr	r2, [pc, #328]	; (800c1d0 <UART_SetConfig+0x358>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d132      	bne.n	800c0f2 <UART_SetConfig+0x27a>
 800c08c:	4b4e      	ldr	r3, [pc, #312]	; (800c1c8 <UART_SetConfig+0x350>)
 800c08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c090:	f003 0307 	and.w	r3, r3, #7
 800c094:	2b05      	cmp	r3, #5
 800c096:	d827      	bhi.n	800c0e8 <UART_SetConfig+0x270>
 800c098:	a201      	add	r2, pc, #4	; (adr r2, 800c0a0 <UART_SetConfig+0x228>)
 800c09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c09e:	bf00      	nop
 800c0a0:	0800c0b9 	.word	0x0800c0b9
 800c0a4:	0800c0c1 	.word	0x0800c0c1
 800c0a8:	0800c0c9 	.word	0x0800c0c9
 800c0ac:	0800c0d1 	.word	0x0800c0d1
 800c0b0:	0800c0d9 	.word	0x0800c0d9
 800c0b4:	0800c0e1 	.word	0x0800c0e1
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0be:	e1c3      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c0c0:	2304      	movs	r3, #4
 800c0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0c6:	e1bf      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c0c8:	2308      	movs	r3, #8
 800c0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ce:	e1bb      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0d6:	e1b7      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c0d8:	2320      	movs	r3, #32
 800c0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0de:	e1b3      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c0e0:	2340      	movs	r3, #64	; 0x40
 800c0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0e6:	e1af      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c0e8:	2380      	movs	r3, #128	; 0x80
 800c0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ee:	bf00      	nop
 800c0f0:	e1aa      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a37      	ldr	r2, [pc, #220]	; (800c1d4 <UART_SetConfig+0x35c>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d132      	bne.n	800c162 <UART_SetConfig+0x2ea>
 800c0fc:	4b32      	ldr	r3, [pc, #200]	; (800c1c8 <UART_SetConfig+0x350>)
 800c0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c100:	f003 0307 	and.w	r3, r3, #7
 800c104:	2b05      	cmp	r3, #5
 800c106:	d827      	bhi.n	800c158 <UART_SetConfig+0x2e0>
 800c108:	a201      	add	r2, pc, #4	; (adr r2, 800c110 <UART_SetConfig+0x298>)
 800c10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10e:	bf00      	nop
 800c110:	0800c129 	.word	0x0800c129
 800c114:	0800c131 	.word	0x0800c131
 800c118:	0800c139 	.word	0x0800c139
 800c11c:	0800c141 	.word	0x0800c141
 800c120:	0800c149 	.word	0x0800c149
 800c124:	0800c151 	.word	0x0800c151
 800c128:	2300      	movs	r3, #0
 800c12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c12e:	e18b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c130:	2304      	movs	r3, #4
 800c132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c136:	e187      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c138:	2308      	movs	r3, #8
 800c13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c13e:	e183      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c140:	2310      	movs	r3, #16
 800c142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c146:	e17f      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c148:	2320      	movs	r3, #32
 800c14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c14e:	e17b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c150:	2340      	movs	r3, #64	; 0x40
 800c152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c156:	e177      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c158:	2380      	movs	r3, #128	; 0x80
 800c15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c15e:	bf00      	nop
 800c160:	e172      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a1c      	ldr	r2, [pc, #112]	; (800c1d8 <UART_SetConfig+0x360>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d144      	bne.n	800c1f6 <UART_SetConfig+0x37e>
 800c16c:	4b16      	ldr	r3, [pc, #88]	; (800c1c8 <UART_SetConfig+0x350>)
 800c16e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c170:	f003 0307 	and.w	r3, r3, #7
 800c174:	2b05      	cmp	r3, #5
 800c176:	d839      	bhi.n	800c1ec <UART_SetConfig+0x374>
 800c178:	a201      	add	r2, pc, #4	; (adr r2, 800c180 <UART_SetConfig+0x308>)
 800c17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17e:	bf00      	nop
 800c180:	0800c199 	.word	0x0800c199
 800c184:	0800c1a1 	.word	0x0800c1a1
 800c188:	0800c1a9 	.word	0x0800c1a9
 800c18c:	0800c1b1 	.word	0x0800c1b1
 800c190:	0800c1dd 	.word	0x0800c1dd
 800c194:	0800c1e5 	.word	0x0800c1e5
 800c198:	2300      	movs	r3, #0
 800c19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c19e:	e153      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c1a0:	2304      	movs	r3, #4
 800c1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1a6:	e14f      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c1a8:	2308      	movs	r3, #8
 800c1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ae:	e14b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c1b0:	2310      	movs	r3, #16
 800c1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1b6:	e147      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c1b8:	cfff69f3 	.word	0xcfff69f3
 800c1bc:	58000c00 	.word	0x58000c00
 800c1c0:	11fff4ff 	.word	0x11fff4ff
 800c1c4:	40011000 	.word	0x40011000
 800c1c8:	58024400 	.word	0x58024400
 800c1cc:	40004400 	.word	0x40004400
 800c1d0:	40004800 	.word	0x40004800
 800c1d4:	40004c00 	.word	0x40004c00
 800c1d8:	40005000 	.word	0x40005000
 800c1dc:	2320      	movs	r3, #32
 800c1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1e2:	e131      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c1e4:	2340      	movs	r3, #64	; 0x40
 800c1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ea:	e12d      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c1ec:	2380      	movs	r3, #128	; 0x80
 800c1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1f2:	bf00      	nop
 800c1f4:	e128      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4ab6      	ldr	r2, [pc, #728]	; (800c4d4 <UART_SetConfig+0x65c>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d178      	bne.n	800c2f2 <UART_SetConfig+0x47a>
 800c200:	4bb5      	ldr	r3, [pc, #724]	; (800c4d8 <UART_SetConfig+0x660>)
 800c202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c208:	2b28      	cmp	r3, #40	; 0x28
 800c20a:	d86d      	bhi.n	800c2e8 <UART_SetConfig+0x470>
 800c20c:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <UART_SetConfig+0x39c>)
 800c20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c212:	bf00      	nop
 800c214:	0800c2b9 	.word	0x0800c2b9
 800c218:	0800c2e9 	.word	0x0800c2e9
 800c21c:	0800c2e9 	.word	0x0800c2e9
 800c220:	0800c2e9 	.word	0x0800c2e9
 800c224:	0800c2e9 	.word	0x0800c2e9
 800c228:	0800c2e9 	.word	0x0800c2e9
 800c22c:	0800c2e9 	.word	0x0800c2e9
 800c230:	0800c2e9 	.word	0x0800c2e9
 800c234:	0800c2c1 	.word	0x0800c2c1
 800c238:	0800c2e9 	.word	0x0800c2e9
 800c23c:	0800c2e9 	.word	0x0800c2e9
 800c240:	0800c2e9 	.word	0x0800c2e9
 800c244:	0800c2e9 	.word	0x0800c2e9
 800c248:	0800c2e9 	.word	0x0800c2e9
 800c24c:	0800c2e9 	.word	0x0800c2e9
 800c250:	0800c2e9 	.word	0x0800c2e9
 800c254:	0800c2c9 	.word	0x0800c2c9
 800c258:	0800c2e9 	.word	0x0800c2e9
 800c25c:	0800c2e9 	.word	0x0800c2e9
 800c260:	0800c2e9 	.word	0x0800c2e9
 800c264:	0800c2e9 	.word	0x0800c2e9
 800c268:	0800c2e9 	.word	0x0800c2e9
 800c26c:	0800c2e9 	.word	0x0800c2e9
 800c270:	0800c2e9 	.word	0x0800c2e9
 800c274:	0800c2d1 	.word	0x0800c2d1
 800c278:	0800c2e9 	.word	0x0800c2e9
 800c27c:	0800c2e9 	.word	0x0800c2e9
 800c280:	0800c2e9 	.word	0x0800c2e9
 800c284:	0800c2e9 	.word	0x0800c2e9
 800c288:	0800c2e9 	.word	0x0800c2e9
 800c28c:	0800c2e9 	.word	0x0800c2e9
 800c290:	0800c2e9 	.word	0x0800c2e9
 800c294:	0800c2d9 	.word	0x0800c2d9
 800c298:	0800c2e9 	.word	0x0800c2e9
 800c29c:	0800c2e9 	.word	0x0800c2e9
 800c2a0:	0800c2e9 	.word	0x0800c2e9
 800c2a4:	0800c2e9 	.word	0x0800c2e9
 800c2a8:	0800c2e9 	.word	0x0800c2e9
 800c2ac:	0800c2e9 	.word	0x0800c2e9
 800c2b0:	0800c2e9 	.word	0x0800c2e9
 800c2b4:	0800c2e1 	.word	0x0800c2e1
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2be:	e0c3      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c2c0:	2304      	movs	r3, #4
 800c2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2c6:	e0bf      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c2c8:	2308      	movs	r3, #8
 800c2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ce:	e0bb      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c2d0:	2310      	movs	r3, #16
 800c2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2d6:	e0b7      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c2d8:	2320      	movs	r3, #32
 800c2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2de:	e0b3      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c2e0:	2340      	movs	r3, #64	; 0x40
 800c2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2e6:	e0af      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c2e8:	2380      	movs	r3, #128	; 0x80
 800c2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ee:	bf00      	nop
 800c2f0:	e0aa      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a79      	ldr	r2, [pc, #484]	; (800c4dc <UART_SetConfig+0x664>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d132      	bne.n	800c362 <UART_SetConfig+0x4ea>
 800c2fc:	4b76      	ldr	r3, [pc, #472]	; (800c4d8 <UART_SetConfig+0x660>)
 800c2fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c300:	f003 0307 	and.w	r3, r3, #7
 800c304:	2b05      	cmp	r3, #5
 800c306:	d827      	bhi.n	800c358 <UART_SetConfig+0x4e0>
 800c308:	a201      	add	r2, pc, #4	; (adr r2, 800c310 <UART_SetConfig+0x498>)
 800c30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30e:	bf00      	nop
 800c310:	0800c329 	.word	0x0800c329
 800c314:	0800c331 	.word	0x0800c331
 800c318:	0800c339 	.word	0x0800c339
 800c31c:	0800c341 	.word	0x0800c341
 800c320:	0800c349 	.word	0x0800c349
 800c324:	0800c351 	.word	0x0800c351
 800c328:	2300      	movs	r3, #0
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	e08b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c330:	2304      	movs	r3, #4
 800c332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c336:	e087      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c338:	2308      	movs	r3, #8
 800c33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33e:	e083      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c340:	2310      	movs	r3, #16
 800c342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c346:	e07f      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c348:	2320      	movs	r3, #32
 800c34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c34e:	e07b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c350:	2340      	movs	r3, #64	; 0x40
 800c352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c356:	e077      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c358:	2380      	movs	r3, #128	; 0x80
 800c35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c35e:	bf00      	nop
 800c360:	e072      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a5e      	ldr	r2, [pc, #376]	; (800c4e0 <UART_SetConfig+0x668>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d132      	bne.n	800c3d2 <UART_SetConfig+0x55a>
 800c36c:	4b5a      	ldr	r3, [pc, #360]	; (800c4d8 <UART_SetConfig+0x660>)
 800c36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c370:	f003 0307 	and.w	r3, r3, #7
 800c374:	2b05      	cmp	r3, #5
 800c376:	d827      	bhi.n	800c3c8 <UART_SetConfig+0x550>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <UART_SetConfig+0x508>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c399 	.word	0x0800c399
 800c384:	0800c3a1 	.word	0x0800c3a1
 800c388:	0800c3a9 	.word	0x0800c3a9
 800c38c:	0800c3b1 	.word	0x0800c3b1
 800c390:	0800c3b9 	.word	0x0800c3b9
 800c394:	0800c3c1 	.word	0x0800c3c1
 800c398:	2300      	movs	r3, #0
 800c39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39e:	e053      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c3a0:	2304      	movs	r3, #4
 800c3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3a6:	e04f      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ae:	e04b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c3b0:	2310      	movs	r3, #16
 800c3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3b6:	e047      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c3b8:	2320      	movs	r3, #32
 800c3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3be:	e043      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c3c0:	2340      	movs	r3, #64	; 0x40
 800c3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3c6:	e03f      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c3c8:	2380      	movs	r3, #128	; 0x80
 800c3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ce:	bf00      	nop
 800c3d0:	e03a      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a43      	ldr	r2, [pc, #268]	; (800c4e4 <UART_SetConfig+0x66c>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d132      	bne.n	800c442 <UART_SetConfig+0x5ca>
 800c3dc:	4b3e      	ldr	r3, [pc, #248]	; (800c4d8 <UART_SetConfig+0x660>)
 800c3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e0:	f003 0307 	and.w	r3, r3, #7
 800c3e4:	2b05      	cmp	r3, #5
 800c3e6:	d827      	bhi.n	800c438 <UART_SetConfig+0x5c0>
 800c3e8:	a201      	add	r2, pc, #4	; (adr r2, 800c3f0 <UART_SetConfig+0x578>)
 800c3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ee:	bf00      	nop
 800c3f0:	0800c409 	.word	0x0800c409
 800c3f4:	0800c411 	.word	0x0800c411
 800c3f8:	0800c419 	.word	0x0800c419
 800c3fc:	0800c421 	.word	0x0800c421
 800c400:	0800c429 	.word	0x0800c429
 800c404:	0800c431 	.word	0x0800c431
 800c408:	2302      	movs	r3, #2
 800c40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40e:	e01b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c410:	2304      	movs	r3, #4
 800c412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c416:	e017      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c418:	2308      	movs	r3, #8
 800c41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c41e:	e013      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c420:	2310      	movs	r3, #16
 800c422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c426:	e00f      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c428:	2320      	movs	r3, #32
 800c42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c42e:	e00b      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c430:	2340      	movs	r3, #64	; 0x40
 800c432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c436:	e007      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c438:	2380      	movs	r3, #128	; 0x80
 800c43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c43e:	bf00      	nop
 800c440:	e002      	b.n	800c448 <UART_SetConfig+0x5d0>
 800c442:	2380      	movs	r3, #128	; 0x80
 800c444:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a25      	ldr	r2, [pc, #148]	; (800c4e4 <UART_SetConfig+0x66c>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	f040 80b8 	bne.w	800c5c4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c458:	2b08      	cmp	r3, #8
 800c45a:	d019      	beq.n	800c490 <UART_SetConfig+0x618>
 800c45c:	2b08      	cmp	r3, #8
 800c45e:	dc04      	bgt.n	800c46a <UART_SetConfig+0x5f2>
 800c460:	2b02      	cmp	r3, #2
 800c462:	d009      	beq.n	800c478 <UART_SetConfig+0x600>
 800c464:	2b04      	cmp	r3, #4
 800c466:	d00b      	beq.n	800c480 <UART_SetConfig+0x608>
 800c468:	e042      	b.n	800c4f0 <UART_SetConfig+0x678>
 800c46a:	2b20      	cmp	r3, #32
 800c46c:	d02b      	beq.n	800c4c6 <UART_SetConfig+0x64e>
 800c46e:	2b40      	cmp	r3, #64	; 0x40
 800c470:	d02c      	beq.n	800c4cc <UART_SetConfig+0x654>
 800c472:	2b10      	cmp	r3, #16
 800c474:	d014      	beq.n	800c4a0 <UART_SetConfig+0x628>
 800c476:	e03b      	b.n	800c4f0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c478:	f7fc fd86 	bl	8008f88 <HAL_RCCEx_GetD3PCLK1Freq>
 800c47c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c47e:	e03d      	b.n	800c4fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c480:	f107 0314 	add.w	r3, r7, #20
 800c484:	4618      	mov	r0, r3
 800c486:	f7fc fd95 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c48e:	e035      	b.n	800c4fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c490:	f107 0308 	add.w	r3, r7, #8
 800c494:	4618      	mov	r0, r3
 800c496:	f7fc fed9 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c49e:	e02d      	b.n	800c4fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4a0:	4b0d      	ldr	r3, [pc, #52]	; (800c4d8 <UART_SetConfig+0x660>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 0320 	and.w	r3, r3, #32
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d009      	beq.n	800c4c0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4ac:	4b0a      	ldr	r3, [pc, #40]	; (800c4d8 <UART_SetConfig+0x660>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	08db      	lsrs	r3, r3, #3
 800c4b2:	f003 0303 	and.w	r3, r3, #3
 800c4b6:	4a0c      	ldr	r2, [pc, #48]	; (800c4e8 <UART_SetConfig+0x670>)
 800c4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4be:	e01d      	b.n	800c4fc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800c4c0:	4b09      	ldr	r3, [pc, #36]	; (800c4e8 <UART_SetConfig+0x670>)
 800c4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4c4:	e01a      	b.n	800c4fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4c6:	4b09      	ldr	r3, [pc, #36]	; (800c4ec <UART_SetConfig+0x674>)
 800c4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4ca:	e017      	b.n	800c4fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4d2:	e013      	b.n	800c4fc <UART_SetConfig+0x684>
 800c4d4:	40011400 	.word	0x40011400
 800c4d8:	58024400 	.word	0x58024400
 800c4dc:	40007800 	.word	0x40007800
 800c4e0:	40007c00 	.word	0x40007c00
 800c4e4:	58000c00 	.word	0x58000c00
 800c4e8:	03d09000 	.word	0x03d09000
 800c4ec:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c4fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f000 824d 	beq.w	800c99e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	4aad      	ldr	r2, [pc, #692]	; (800c7c0 <UART_SetConfig+0x948>)
 800c50a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c50e:	461a      	mov	r2, r3
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	fbb3 f3f2 	udiv	r3, r3, r2
 800c516:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	4613      	mov	r3, r2
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	4413      	add	r3, r2
 800c522:	6a3a      	ldr	r2, [r7, #32]
 800c524:	429a      	cmp	r2, r3
 800c526:	d305      	bcc.n	800c534 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c52e:	6a3a      	ldr	r2, [r7, #32]
 800c530:	429a      	cmp	r2, r3
 800c532:	d903      	bls.n	800c53c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c53a:	e230      	b.n	800c99e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53e:	4618      	mov	r0, r3
 800c540:	f04f 0100 	mov.w	r1, #0
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c548:	4a9d      	ldr	r2, [pc, #628]	; (800c7c0 <UART_SetConfig+0x948>)
 800c54a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c54e:	b29b      	uxth	r3, r3
 800c550:	f04f 0400 	mov.w	r4, #0
 800c554:	461a      	mov	r2, r3
 800c556:	4623      	mov	r3, r4
 800c558:	f7f3 ff1a 	bl	8000390 <__aeabi_uldivmod>
 800c55c:	4603      	mov	r3, r0
 800c55e:	460c      	mov	r4, r1
 800c560:	4619      	mov	r1, r3
 800c562:	4622      	mov	r2, r4
 800c564:	f04f 0300 	mov.w	r3, #0
 800c568:	f04f 0400 	mov.w	r4, #0
 800c56c:	0214      	lsls	r4, r2, #8
 800c56e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c572:	020b      	lsls	r3, r1, #8
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	6852      	ldr	r2, [r2, #4]
 800c578:	0852      	lsrs	r2, r2, #1
 800c57a:	4611      	mov	r1, r2
 800c57c:	f04f 0200 	mov.w	r2, #0
 800c580:	eb13 0b01 	adds.w	fp, r3, r1
 800c584:	eb44 0c02 	adc.w	ip, r4, r2
 800c588:	4658      	mov	r0, fp
 800c58a:	4661      	mov	r1, ip
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	f04f 0400 	mov.w	r4, #0
 800c594:	461a      	mov	r2, r3
 800c596:	4623      	mov	r3, r4
 800c598:	f7f3 fefa 	bl	8000390 <__aeabi_uldivmod>
 800c59c:	4603      	mov	r3, r0
 800c59e:	460c      	mov	r4, r1
 800c5a0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5a8:	d308      	bcc.n	800c5bc <UART_SetConfig+0x744>
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5b0:	d204      	bcs.n	800c5bc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5b8:	60da      	str	r2, [r3, #12]
 800c5ba:	e1f0      	b.n	800c99e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c5c2:	e1ec      	b.n	800c99e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5cc:	f040 8100 	bne.w	800c7d0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800c5d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5d4:	2b40      	cmp	r3, #64	; 0x40
 800c5d6:	f200 80b7 	bhi.w	800c748 <UART_SetConfig+0x8d0>
 800c5da:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <UART_SetConfig+0x768>)
 800c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e0:	0800c6e5 	.word	0x0800c6e5
 800c5e4:	0800c6ed 	.word	0x0800c6ed
 800c5e8:	0800c749 	.word	0x0800c749
 800c5ec:	0800c749 	.word	0x0800c749
 800c5f0:	0800c6f5 	.word	0x0800c6f5
 800c5f4:	0800c749 	.word	0x0800c749
 800c5f8:	0800c749 	.word	0x0800c749
 800c5fc:	0800c749 	.word	0x0800c749
 800c600:	0800c705 	.word	0x0800c705
 800c604:	0800c749 	.word	0x0800c749
 800c608:	0800c749 	.word	0x0800c749
 800c60c:	0800c749 	.word	0x0800c749
 800c610:	0800c749 	.word	0x0800c749
 800c614:	0800c749 	.word	0x0800c749
 800c618:	0800c749 	.word	0x0800c749
 800c61c:	0800c749 	.word	0x0800c749
 800c620:	0800c715 	.word	0x0800c715
 800c624:	0800c749 	.word	0x0800c749
 800c628:	0800c749 	.word	0x0800c749
 800c62c:	0800c749 	.word	0x0800c749
 800c630:	0800c749 	.word	0x0800c749
 800c634:	0800c749 	.word	0x0800c749
 800c638:	0800c749 	.word	0x0800c749
 800c63c:	0800c749 	.word	0x0800c749
 800c640:	0800c749 	.word	0x0800c749
 800c644:	0800c749 	.word	0x0800c749
 800c648:	0800c749 	.word	0x0800c749
 800c64c:	0800c749 	.word	0x0800c749
 800c650:	0800c749 	.word	0x0800c749
 800c654:	0800c749 	.word	0x0800c749
 800c658:	0800c749 	.word	0x0800c749
 800c65c:	0800c749 	.word	0x0800c749
 800c660:	0800c73b 	.word	0x0800c73b
 800c664:	0800c749 	.word	0x0800c749
 800c668:	0800c749 	.word	0x0800c749
 800c66c:	0800c749 	.word	0x0800c749
 800c670:	0800c749 	.word	0x0800c749
 800c674:	0800c749 	.word	0x0800c749
 800c678:	0800c749 	.word	0x0800c749
 800c67c:	0800c749 	.word	0x0800c749
 800c680:	0800c749 	.word	0x0800c749
 800c684:	0800c749 	.word	0x0800c749
 800c688:	0800c749 	.word	0x0800c749
 800c68c:	0800c749 	.word	0x0800c749
 800c690:	0800c749 	.word	0x0800c749
 800c694:	0800c749 	.word	0x0800c749
 800c698:	0800c749 	.word	0x0800c749
 800c69c:	0800c749 	.word	0x0800c749
 800c6a0:	0800c749 	.word	0x0800c749
 800c6a4:	0800c749 	.word	0x0800c749
 800c6a8:	0800c749 	.word	0x0800c749
 800c6ac:	0800c749 	.word	0x0800c749
 800c6b0:	0800c749 	.word	0x0800c749
 800c6b4:	0800c749 	.word	0x0800c749
 800c6b8:	0800c749 	.word	0x0800c749
 800c6bc:	0800c749 	.word	0x0800c749
 800c6c0:	0800c749 	.word	0x0800c749
 800c6c4:	0800c749 	.word	0x0800c749
 800c6c8:	0800c749 	.word	0x0800c749
 800c6cc:	0800c749 	.word	0x0800c749
 800c6d0:	0800c749 	.word	0x0800c749
 800c6d4:	0800c749 	.word	0x0800c749
 800c6d8:	0800c749 	.word	0x0800c749
 800c6dc:	0800c749 	.word	0x0800c749
 800c6e0:	0800c741 	.word	0x0800c741
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6e4:	f7fb faa2 	bl	8007c2c <HAL_RCC_GetPCLK1Freq>
 800c6e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c6ea:	e033      	b.n	800c754 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6ec:	f7fb fab4 	bl	8007c58 <HAL_RCC_GetPCLK2Freq>
 800c6f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c6f2:	e02f      	b.n	800c754 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f4:	f107 0314 	add.w	r3, r7, #20
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fc fc5b 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c702:	e027      	b.n	800c754 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c704:	f107 0308 	add.w	r3, r7, #8
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fc fd9f 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c712:	e01f      	b.n	800c754 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c714:	4b2b      	ldr	r3, [pc, #172]	; (800c7c4 <UART_SetConfig+0x94c>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 0320 	and.w	r3, r3, #32
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d009      	beq.n	800c734 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c720:	4b28      	ldr	r3, [pc, #160]	; (800c7c4 <UART_SetConfig+0x94c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	08db      	lsrs	r3, r3, #3
 800c726:	f003 0303 	and.w	r3, r3, #3
 800c72a:	4a27      	ldr	r2, [pc, #156]	; (800c7c8 <UART_SetConfig+0x950>)
 800c72c:	fa22 f303 	lsr.w	r3, r2, r3
 800c730:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c732:	e00f      	b.n	800c754 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800c734:	4b24      	ldr	r3, [pc, #144]	; (800c7c8 <UART_SetConfig+0x950>)
 800c736:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c738:	e00c      	b.n	800c754 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c73a:	4b24      	ldr	r3, [pc, #144]	; (800c7cc <UART_SetConfig+0x954>)
 800c73c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c73e:	e009      	b.n	800c754 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c744:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c746:	e005      	b.n	800c754 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800c748:	2300      	movs	r3, #0
 800c74a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c74c:	2301      	movs	r3, #1
 800c74e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c752:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 8121 	beq.w	800c99e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c760:	4a17      	ldr	r2, [pc, #92]	; (800c7c0 <UART_SetConfig+0x948>)
 800c762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c766:	461a      	mov	r2, r3
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c76e:	005a      	lsls	r2, r3, #1
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	085b      	lsrs	r3, r3, #1
 800c776:	441a      	add	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c780:	b29b      	uxth	r3, r3
 800c782:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	2b0f      	cmp	r3, #15
 800c788:	d916      	bls.n	800c7b8 <UART_SetConfig+0x940>
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c790:	d212      	bcs.n	800c7b8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c794:	b29b      	uxth	r3, r3
 800c796:	f023 030f 	bic.w	r3, r3, #15
 800c79a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	085b      	lsrs	r3, r3, #1
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	f003 0307 	and.w	r3, r3, #7
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7b4:	60da      	str	r2, [r3, #12]
 800c7b6:	e0f2      	b.n	800c99e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c7be:	e0ee      	b.n	800c99e <UART_SetConfig+0xb26>
 800c7c0:	08016a10 	.word	0x08016a10
 800c7c4:	58024400 	.word	0x58024400
 800c7c8:	03d09000 	.word	0x03d09000
 800c7cc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c7d4:	2b40      	cmp	r3, #64	; 0x40
 800c7d6:	f200 80b7 	bhi.w	800c948 <UART_SetConfig+0xad0>
 800c7da:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <UART_SetConfig+0x968>)
 800c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e0:	0800c8e5 	.word	0x0800c8e5
 800c7e4:	0800c8ed 	.word	0x0800c8ed
 800c7e8:	0800c949 	.word	0x0800c949
 800c7ec:	0800c949 	.word	0x0800c949
 800c7f0:	0800c8f5 	.word	0x0800c8f5
 800c7f4:	0800c949 	.word	0x0800c949
 800c7f8:	0800c949 	.word	0x0800c949
 800c7fc:	0800c949 	.word	0x0800c949
 800c800:	0800c905 	.word	0x0800c905
 800c804:	0800c949 	.word	0x0800c949
 800c808:	0800c949 	.word	0x0800c949
 800c80c:	0800c949 	.word	0x0800c949
 800c810:	0800c949 	.word	0x0800c949
 800c814:	0800c949 	.word	0x0800c949
 800c818:	0800c949 	.word	0x0800c949
 800c81c:	0800c949 	.word	0x0800c949
 800c820:	0800c915 	.word	0x0800c915
 800c824:	0800c949 	.word	0x0800c949
 800c828:	0800c949 	.word	0x0800c949
 800c82c:	0800c949 	.word	0x0800c949
 800c830:	0800c949 	.word	0x0800c949
 800c834:	0800c949 	.word	0x0800c949
 800c838:	0800c949 	.word	0x0800c949
 800c83c:	0800c949 	.word	0x0800c949
 800c840:	0800c949 	.word	0x0800c949
 800c844:	0800c949 	.word	0x0800c949
 800c848:	0800c949 	.word	0x0800c949
 800c84c:	0800c949 	.word	0x0800c949
 800c850:	0800c949 	.word	0x0800c949
 800c854:	0800c949 	.word	0x0800c949
 800c858:	0800c949 	.word	0x0800c949
 800c85c:	0800c949 	.word	0x0800c949
 800c860:	0800c93b 	.word	0x0800c93b
 800c864:	0800c949 	.word	0x0800c949
 800c868:	0800c949 	.word	0x0800c949
 800c86c:	0800c949 	.word	0x0800c949
 800c870:	0800c949 	.word	0x0800c949
 800c874:	0800c949 	.word	0x0800c949
 800c878:	0800c949 	.word	0x0800c949
 800c87c:	0800c949 	.word	0x0800c949
 800c880:	0800c949 	.word	0x0800c949
 800c884:	0800c949 	.word	0x0800c949
 800c888:	0800c949 	.word	0x0800c949
 800c88c:	0800c949 	.word	0x0800c949
 800c890:	0800c949 	.word	0x0800c949
 800c894:	0800c949 	.word	0x0800c949
 800c898:	0800c949 	.word	0x0800c949
 800c89c:	0800c949 	.word	0x0800c949
 800c8a0:	0800c949 	.word	0x0800c949
 800c8a4:	0800c949 	.word	0x0800c949
 800c8a8:	0800c949 	.word	0x0800c949
 800c8ac:	0800c949 	.word	0x0800c949
 800c8b0:	0800c949 	.word	0x0800c949
 800c8b4:	0800c949 	.word	0x0800c949
 800c8b8:	0800c949 	.word	0x0800c949
 800c8bc:	0800c949 	.word	0x0800c949
 800c8c0:	0800c949 	.word	0x0800c949
 800c8c4:	0800c949 	.word	0x0800c949
 800c8c8:	0800c949 	.word	0x0800c949
 800c8cc:	0800c949 	.word	0x0800c949
 800c8d0:	0800c949 	.word	0x0800c949
 800c8d4:	0800c949 	.word	0x0800c949
 800c8d8:	0800c949 	.word	0x0800c949
 800c8dc:	0800c949 	.word	0x0800c949
 800c8e0:	0800c941 	.word	0x0800c941
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8e4:	f7fb f9a2 	bl	8007c2c <HAL_RCC_GetPCLK1Freq>
 800c8e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c8ea:	e033      	b.n	800c954 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8ec:	f7fb f9b4 	bl	8007c58 <HAL_RCC_GetPCLK2Freq>
 800c8f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c8f2:	e02f      	b.n	800c954 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8f4:	f107 0314 	add.w	r3, r7, #20
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fc fb5b 	bl	8008fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c902:	e027      	b.n	800c954 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c904:	f107 0308 	add.w	r3, r7, #8
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fc fc9f 	bl	800924c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c912:	e01f      	b.n	800c954 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c914:	4b2c      	ldr	r3, [pc, #176]	; (800c9c8 <UART_SetConfig+0xb50>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 0320 	and.w	r3, r3, #32
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d009      	beq.n	800c934 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c920:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <UART_SetConfig+0xb50>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	08db      	lsrs	r3, r3, #3
 800c926:	f003 0303 	and.w	r3, r3, #3
 800c92a:	4a28      	ldr	r2, [pc, #160]	; (800c9cc <UART_SetConfig+0xb54>)
 800c92c:	fa22 f303 	lsr.w	r3, r2, r3
 800c930:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c932:	e00f      	b.n	800c954 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800c934:	4b25      	ldr	r3, [pc, #148]	; (800c9cc <UART_SetConfig+0xb54>)
 800c936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c938:	e00c      	b.n	800c954 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c93a:	4b25      	ldr	r3, [pc, #148]	; (800c9d0 <UART_SetConfig+0xb58>)
 800c93c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c93e:	e009      	b.n	800c954 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c944:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c946:	e005      	b.n	800c954 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800c948:	2300      	movs	r3, #0
 800c94a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c94c:	2301      	movs	r3, #1
 800c94e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c952:	bf00      	nop
    }

    if (pclk != 0U)
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	2b00      	cmp	r3, #0
 800c958:	d021      	beq.n	800c99e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95e:	4a1d      	ldr	r2, [pc, #116]	; (800c9d4 <UART_SetConfig+0xb5c>)
 800c960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c964:	461a      	mov	r2, r3
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	fbb3 f2f2 	udiv	r2, r3, r2
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	085b      	lsrs	r3, r3, #1
 800c972:	441a      	add	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	fbb2 f3f3 	udiv	r3, r2, r3
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c982:	2b0f      	cmp	r3, #15
 800c984:	d908      	bls.n	800c998 <UART_SetConfig+0xb20>
 800c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c98c:	d204      	bcs.n	800c998 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c994:	60da      	str	r2, [r3, #12]
 800c996:	e002      	b.n	800c99e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c9ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3738      	adds	r7, #56	; 0x38
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c9c8:	58024400 	.word	0x58024400
 800c9cc:	03d09000 	.word	0x03d09000
 800c9d0:	003d0900 	.word	0x003d0900
 800c9d4:	08016a10 	.word	0x08016a10

0800c9d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00a      	beq.n	800ca02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	430a      	orrs	r2, r1
 800ca00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00a      	beq.n	800ca24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	430a      	orrs	r2, r1
 800ca22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca28:	f003 0304 	and.w	r3, r3, #4
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00a      	beq.n	800ca46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	430a      	orrs	r2, r1
 800ca44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4a:	f003 0308 	and.w	r3, r3, #8
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00a      	beq.n	800ca68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	430a      	orrs	r2, r1
 800ca66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6c:	f003 0310 	and.w	r3, r3, #16
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00a      	beq.n	800ca8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	430a      	orrs	r2, r1
 800ca88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca8e:	f003 0320 	and.w	r3, r3, #32
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00a      	beq.n	800caac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	430a      	orrs	r2, r1
 800caaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d01a      	beq.n	800caee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	430a      	orrs	r2, r1
 800cacc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cad6:	d10a      	bne.n	800caee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	430a      	orrs	r2, r1
 800caec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00a      	beq.n	800cb10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	430a      	orrs	r2, r1
 800cb0e:	605a      	str	r2, [r3, #4]
  }
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af02      	add	r7, sp, #8
 800cb22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cb2c:	f7f5 f936 	bl	8001d9c <HAL_GetTick>
 800cb30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f003 0308 	and.w	r3, r3, #8
 800cb3c:	2b08      	cmp	r3, #8
 800cb3e:	d10e      	bne.n	800cb5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 f82c 	bl	800cbac <UART_WaitOnFlagUntilTimeout>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e022      	b.n	800cba4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 0304 	and.w	r3, r3, #4
 800cb68:	2b04      	cmp	r3, #4
 800cb6a:	d10e      	bne.n	800cb8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f816 	bl	800cbac <UART_WaitOnFlagUntilTimeout>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb86:	2303      	movs	r3, #3
 800cb88:	e00c      	b.n	800cba4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2220      	movs	r2, #32
 800cb8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2220      	movs	r2, #32
 800cb96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cba2:	2300      	movs	r3, #0
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	603b      	str	r3, [r7, #0]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbbc:	e062      	b.n	800cc84 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc4:	d05e      	beq.n	800cc84 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbc6:	f7f5 f8e9 	bl	8001d9c <HAL_GetTick>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	69ba      	ldr	r2, [r7, #24]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d302      	bcc.n	800cbdc <UART_WaitOnFlagUntilTimeout+0x30>
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d11d      	bne.n	800cc18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cbea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689a      	ldr	r2, [r3, #8]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f022 0201 	bic.w	r2, r2, #1
 800cbfa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2220      	movs	r2, #32
 800cc00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2220      	movs	r2, #32
 800cc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800cc14:	2303      	movs	r3, #3
 800cc16:	e045      	b.n	800cca4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f003 0304 	and.w	r3, r3, #4
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d02e      	beq.n	800cc84 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	69db      	ldr	r3, [r3, #28]
 800cc2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc34:	d126      	bne.n	800cc84 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc3e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cc4e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	689a      	ldr	r2, [r3, #8]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f022 0201 	bic.w	r2, r2, #1
 800cc5e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2220      	movs	r2, #32
 800cc64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2220      	movs	r2, #32
 800cc6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2220      	movs	r2, #32
 800cc74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e00f      	b.n	800cca4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	69da      	ldr	r2, [r3, #28]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	bf0c      	ite	eq
 800cc94:	2301      	moveq	r3, #1
 800cc96:	2300      	movne	r3, #0
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d08d      	beq.n	800cbbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cca2:	2300      	movs	r3, #0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ccc2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	689a      	ldr	r2, [r3, #8]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ccd2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2220      	movs	r2, #32
 800ccd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ccfe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6899      	ldr	r1, [r3, #8]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	4b08      	ldr	r3, [pc, #32]	; (800cd2c <UART_EndRxTransfer+0x44>)
 800cd0c:	400b      	ands	r3, r1
 800cd0e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2220      	movs	r2, #32
 800cd14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800cd1e:	bf00      	nop
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	effffffe 	.word	0xeffffffe

0800cd30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	69db      	ldr	r3, [r3, #28]
 800cd42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd46:	d01f      	beq.n	800cd88 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd5e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	689a      	ldr	r2, [r3, #8]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f022 0201 	bic.w	r2, r2, #1
 800cd6e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	689a      	ldr	r2, [r3, #8]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd7e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2220      	movs	r2, #32
 800cd84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f7f4 fb97 	bl	80014bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd8e:	bf00      	nop
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b084      	sub	sp, #16
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f7ff f853 	bl	800be50 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdaa:	bf00      	nop
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b086      	sub	sp, #24
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdbe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdc6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdda:	2b80      	cmp	r3, #128	; 0x80
 800cddc:	d109      	bne.n	800cdf2 <UART_DMAError+0x40>
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	2b21      	cmp	r3, #33	; 0x21
 800cde2:	d106      	bne.n	800cdf2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cdec:	6978      	ldr	r0, [r7, #20]
 800cdee:	f7ff ff5d 	bl	800ccac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdfc:	2b40      	cmp	r3, #64	; 0x40
 800cdfe:	d109      	bne.n	800ce14 <UART_DMAError+0x62>
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2b22      	cmp	r3, #34	; 0x22
 800ce04:	d106      	bne.n	800ce14 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ce0e:	6978      	ldr	r0, [r7, #20]
 800ce10:	f7ff ff6a 	bl	800cce8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce1a:	f043 0210 	orr.w	r2, r3, #16
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce24:	6978      	ldr	r0, [r7, #20]
 800ce26:	f7ff f81d 	bl	800be64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce2a:	bf00      	nop
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce32:	b480      	push	{r7}
 800ce34:	b085      	sub	sp, #20
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d101      	bne.n	800ce48 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce44:	2302      	movs	r3, #2
 800ce46:	e027      	b.n	800ce98 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2224      	movs	r2, #36	; 0x24
 800ce54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f022 0201 	bic.w	r2, r2, #1
 800ce6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2220      	movs	r2, #32
 800ce8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ce96:	2300      	movs	r3, #0
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3714      	adds	r7, #20
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d101      	bne.n	800cebc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ceb8:	2302      	movs	r3, #2
 800ceba:	e02d      	b.n	800cf18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2224      	movs	r2, #36	; 0x24
 800cec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f022 0201 	bic.w	r2, r2, #1
 800cee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	430a      	orrs	r2, r1
 800cef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f84f 	bl	800cf9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2220      	movs	r2, #32
 800cf0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d101      	bne.n	800cf38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf34:	2302      	movs	r3, #2
 800cf36:	e02d      	b.n	800cf94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2224      	movs	r2, #36	; 0x24
 800cf44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f022 0201 	bic.w	r2, r2, #1
 800cf5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	430a      	orrs	r2, r1
 800cf72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f811 	bl	800cf9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2220      	movs	r2, #32
 800cf86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b089      	sub	sp, #36	; 0x24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cfa4:	4a2f      	ldr	r2, [pc, #188]	; (800d064 <UARTEx_SetNbDataToProcess+0xc8>)
 800cfa6:	f107 0314 	add.w	r3, r7, #20
 800cfaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800cfb2:	4a2d      	ldr	r2, [pc, #180]	; (800d068 <UARTEx_SetNbDataToProcess+0xcc>)
 800cfb4:	f107 030c 	add.w	r3, r7, #12
 800cfb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfbc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d108      	bne.n	800cfda <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfd8:	e03d      	b.n	800d056 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfda:	2310      	movs	r3, #16
 800cfdc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfde:	2310      	movs	r3, #16
 800cfe0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	0e5b      	lsrs	r3, r3, #25
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	f003 0307 	and.w	r3, r3, #7
 800cff0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	0f5b      	lsrs	r3, r3, #29
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	f003 0307 	and.w	r3, r3, #7
 800d000:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d002:	7fbb      	ldrb	r3, [r7, #30]
 800d004:	7f3a      	ldrb	r2, [r7, #28]
 800d006:	f107 0120 	add.w	r1, r7, #32
 800d00a:	440a      	add	r2, r1
 800d00c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d010:	fb02 f303 	mul.w	r3, r2, r3
 800d014:	7f3a      	ldrb	r2, [r7, #28]
 800d016:	f107 0120 	add.w	r1, r7, #32
 800d01a:	440a      	add	r2, r1
 800d01c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d020:	fb93 f3f2 	sdiv	r3, r3, r2
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d02c:	7ffb      	ldrb	r3, [r7, #31]
 800d02e:	7f7a      	ldrb	r2, [r7, #29]
 800d030:	f107 0120 	add.w	r1, r7, #32
 800d034:	440a      	add	r2, r1
 800d036:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d03a:	fb02 f303 	mul.w	r3, r2, r3
 800d03e:	7f7a      	ldrb	r2, [r7, #29]
 800d040:	f107 0120 	add.w	r1, r7, #32
 800d044:	440a      	add	r2, r1
 800d046:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d04a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d04e:	b29a      	uxth	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d056:	bf00      	nop
 800d058:	3724      	adds	r7, #36	; 0x24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	08016950 	.word	0x08016950
 800d068:	08016958 	.word	0x08016958

0800d06c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d06c:	b084      	sub	sp, #16
 800d06e:	b480      	push	{r7}
 800d070:	b085      	sub	sp, #20
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	f107 001c 	add.w	r0, r7, #28
 800d07a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d082:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d084:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d086:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d08a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d08e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d092:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	4313      	orrs	r3, r2
 800d098:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	4b07      	ldr	r3, [pc, #28]	; (800d0bc <SDMMC_Init+0x50>)
 800d0a0:	4013      	ands	r3, r2
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	431a      	orrs	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	b004      	add	sp, #16
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	ffc02c00 	.word	0xffc02c00

0800d0c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f043 0203 	orr.w	r2, r3, #3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d11e:	b480      	push	{r7}
 800d120:	b083      	sub	sp, #12
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0303 	and.w	r3, r3, #3
}
 800d12e:	4618      	mov	r0, r3
 800d130:	370c      	adds	r7, #12
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
	...

0800d13c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d15a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d160:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d166:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	68da      	ldr	r2, [r3, #12]
 800d172:	4b06      	ldr	r3, [pc, #24]	; (800d18c <SDMMC_SendCommand+0x50>)
 800d174:	4013      	ands	r3, r2
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	431a      	orrs	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3714      	adds	r7, #20
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	fffee0c0 	.word	0xfffee0c0

0800d190 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	b2db      	uxtb	r3, r3
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b085      	sub	sp, #20
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
 800d1b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3314      	adds	r3, #20
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	4413      	add	r3, r2
 800d1be:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	685a      	ldr	r2, [r3, #4]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d1f6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d1fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d202:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	4313      	orrs	r3, r2
 800d208:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	431a      	orrs	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d21a:	2300      	movs	r3, #0

}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3714      	adds	r7, #20
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b088      	sub	sp, #32
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d236:	2310      	movs	r3, #16
 800d238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d23a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d23e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d240:	2300      	movs	r3, #0
 800d242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d248:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d24a:	f107 0308 	add.w	r3, r7, #8
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7ff ff73 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d256:	f241 3288 	movw	r2, #5000	; 0x1388
 800d25a:	2110      	movs	r1, #16
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 faaf 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d264:	69fb      	ldr	r3, [r7, #28]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3720      	adds	r7, #32
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b088      	sub	sp, #32
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d27c:	2311      	movs	r3, #17
 800d27e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d280:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d286:	2300      	movs	r3, #0
 800d288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d28a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d28e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d290:	f107 0308 	add.w	r3, r7, #8
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff ff50 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2a0:	2111      	movs	r1, #17
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 fa8c 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2aa:	69fb      	ldr	r3, [r7, #28]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b088      	sub	sp, #32
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d2c2:	2312      	movs	r3, #18
 800d2c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2d6:	f107 0308 	add.w	r3, r7, #8
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff ff2d 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e6:	2112      	movs	r1, #18
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fa69 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2f0:	69fb      	ldr	r3, [r7, #28]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b088      	sub	sp, #32
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d308:	2318      	movs	r3, #24
 800d30a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d30c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d312:	2300      	movs	r3, #0
 800d314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d31a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d31c:	f107 0308 	add.w	r3, r7, #8
 800d320:	4619      	mov	r1, r3
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7ff ff0a 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d328:	f241 3288 	movw	r2, #5000	; 0x1388
 800d32c:	2118      	movs	r1, #24
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fa46 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d336:	69fb      	ldr	r3, [r7, #28]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3720      	adds	r7, #32
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d34e:	2319      	movs	r3, #25
 800d350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d352:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d358:	2300      	movs	r3, #0
 800d35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d35c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d360:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d362:	f107 0308 	add.w	r3, r7, #8
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff fee7 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d372:	2119      	movs	r1, #25
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fa23 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d37c:	69fb      	ldr	r3, [r7, #28]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3720      	adds	r7, #32
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b088      	sub	sp, #32
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d390:	2300      	movs	r3, #0
 800d392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d394:	230c      	movs	r3, #12
 800d396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3a6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3c0:	f107 0308 	add.w	r3, r7, #8
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7ff feb8 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d3cc:	4a0b      	ldr	r2, [pc, #44]	; (800d3fc <SDMMC_CmdStopTransfer+0x74>)
 800d3ce:	210c      	movs	r1, #12
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f9f5 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d3d6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3ea:	d101      	bne.n	800d3f0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d3f0:	69fb      	ldr	r3, [r7, #28]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3720      	adds	r7, #32
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	05f5e100 	.word	0x05f5e100

0800d400 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08a      	sub	sp, #40	; 0x28
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d410:	2307      	movs	r3, #7
 800d412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d414:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d418:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d41a:	2300      	movs	r3, #0
 800d41c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d41e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d422:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d424:	f107 0310 	add.w	r3, r7, #16
 800d428:	4619      	mov	r1, r3
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7ff fe86 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d430:	f241 3288 	movw	r2, #5000	; 0x1388
 800d434:	2107      	movs	r1, #7
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f000 f9c2 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d43c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d440:	4618      	mov	r0, r3
 800d442:	3728      	adds	r7, #40	; 0x28
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d450:	2300      	movs	r3, #0
 800d452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d454:	2300      	movs	r3, #0
 800d456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d458:	2300      	movs	r3, #0
 800d45a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d45c:	2300      	movs	r3, #0
 800d45e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d464:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d466:	f107 0308 	add.w	r3, r7, #8
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff fe65 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f976 	bl	800d764 <SDMMC_GetCmdError>
 800d478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d47a:	69fb      	ldr	r3, [r7, #28]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3720      	adds	r7, #32
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b088      	sub	sp, #32
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d48c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d492:	2308      	movs	r3, #8
 800d494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d49a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d49c:	2300      	movs	r3, #0
 800d49e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4a6:	f107 0308 	add.w	r3, r7, #8
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff fe45 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 fb78 	bl	800dba8 <SDMMC_GetCmdResp7>
 800d4b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4ba:	69fb      	ldr	r3, [r7, #28]
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3720      	adds	r7, #32
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b088      	sub	sp, #32
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d4d2:	2337      	movs	r3, #55	; 0x37
 800d4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4e6:	f107 0308 	add.w	r3, r7, #8
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fe25 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d4f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4f6:	2137      	movs	r1, #55	; 0x37
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 f961 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d4fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d500:	69fb      	ldr	r3, [r7, #28]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3720      	adds	r7, #32
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b088      	sub	sp, #32
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d518:	2329      	movs	r3, #41	; 0x29
 800d51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d51c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d522:	2300      	movs	r3, #0
 800d524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d52a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d52c:	f107 0308 	add.w	r3, r7, #8
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff fe02 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 fa7d 	bl	800da38 <SDMMC_GetCmdResp3>
 800d53e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d540:	69fb      	ldr	r3, [r7, #28]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3720      	adds	r7, #32
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b088      	sub	sp, #32
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d558:	2306      	movs	r3, #6
 800d55a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d55c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d562:	2300      	movs	r3, #0
 800d564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d56a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d56c:	f107 0308 	add.w	r3, r7, #8
 800d570:	4619      	mov	r1, r3
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fde2 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d578:	f241 3288 	movw	r2, #5000	; 0x1388
 800d57c:	2106      	movs	r1, #6
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f91e 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d586:	69fb      	ldr	r3, [r7, #28]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3720      	adds	r7, #32
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d598:	2300      	movs	r3, #0
 800d59a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d59c:	2333      	movs	r3, #51	; 0x33
 800d59e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5b0:	f107 0308 	add.w	r3, r7, #8
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff fdc0 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d5bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5c0:	2133      	movs	r1, #51	; 0x33
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 f8fc 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d5c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b088      	sub	sp, #32
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d5e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d5e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5f4:	f107 0308 	add.w	r3, r7, #8
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7ff fd9e 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 f9cf 	bl	800d9a4 <SDMMC_GetCmdResp2>
 800d606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d608:	69fb      	ldr	r3, [r7, #28]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3720      	adds	r7, #32
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b088      	sub	sp, #32
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d620:	2309      	movs	r3, #9
 800d622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d624:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d62e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d634:	f107 0308 	add.w	r3, r7, #8
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff fd7e 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f9af 	bl	800d9a4 <SDMMC_GetCmdResp2>
 800d646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d648:	69fb      	ldr	r3, [r7, #28]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b088      	sub	sp, #32
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d65c:	2300      	movs	r3, #0
 800d65e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d660:	2303      	movs	r3, #3
 800d662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d664:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d66a:	2300      	movs	r3, #0
 800d66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d66e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d674:	f107 0308 	add.w	r3, r7, #8
 800d678:	4619      	mov	r1, r3
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff fd5e 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	2103      	movs	r1, #3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fa17 	bl	800dab8 <SDMMC_GetCmdResp6>
 800d68a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d68c:	69fb      	ldr	r3, [r7, #28]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3720      	adds	r7, #32
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b088      	sub	sp, #32
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d6a4:	230d      	movs	r3, #13
 800d6a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6b8:	f107 0308 	add.w	r3, r7, #8
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f7ff fd3c 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d6c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6c8:	210d      	movs	r1, #13
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f878 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d6d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3720      	adds	r7, #32
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b088      	sub	sp, #32
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d6e8:	230d      	movs	r3, #13
 800d6ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6fc:	f107 0308 	add.w	r3, r7, #8
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff fd1a 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d708:	f241 3288 	movw	r2, #5000	; 0x1388
 800d70c:	210d      	movs	r1, #13
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f856 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d716:	69fb      	ldr	r3, [r7, #28]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3720      	adds	r7, #32
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d728:	2300      	movs	r3, #0
 800d72a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d72c:	230b      	movs	r3, #11
 800d72e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d730:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d736:	2300      	movs	r3, #0
 800d738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d73e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d740:	f107 0308 	add.w	r3, r7, #8
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff fcf8 	bl	800d13c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d750:	210b      	movs	r1, #11
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f834 	bl	800d7c0 <SDMMC_GetCmdResp1>
 800d758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d75a:	69fb      	ldr	r3, [r7, #28]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3720      	adds	r7, #32
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d76c:	4b11      	ldr	r3, [pc, #68]	; (800d7b4 <SDMMC_GetCmdError+0x50>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a11      	ldr	r2, [pc, #68]	; (800d7b8 <SDMMC_GetCmdError+0x54>)
 800d772:	fba2 2303 	umull	r2, r3, r2, r3
 800d776:	0a5b      	lsrs	r3, r3, #9
 800d778:	f241 3288 	movw	r2, #5000	; 0x1388
 800d77c:	fb02 f303 	mul.w	r3, r2, r3
 800d780:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	1e5a      	subs	r2, r3, #1
 800d786:	60fa      	str	r2, [r7, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d102      	bne.n	800d792 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d78c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d790:	e009      	b.n	800d7a6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d0f1      	beq.n	800d782 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a06      	ldr	r2, [pc, #24]	; (800d7bc <SDMMC_GetCmdError+0x58>)
 800d7a2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	24000000 	.word	0x24000000
 800d7b8:	10624dd3 	.word	0x10624dd3
 800d7bc:	002000c5 	.word	0x002000c5

0800d7c0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b088      	sub	sp, #32
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	607a      	str	r2, [r7, #4]
 800d7cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7ce:	4b70      	ldr	r3, [pc, #448]	; (800d990 <SDMMC_GetCmdResp1+0x1d0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4a70      	ldr	r2, [pc, #448]	; (800d994 <SDMMC_GetCmdResp1+0x1d4>)
 800d7d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d8:	0a5a      	lsrs	r2, r3, #9
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	fb02 f303 	mul.w	r3, r2, r3
 800d7e0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	1e5a      	subs	r2, r3, #1
 800d7e6:	61fa      	str	r2, [r7, #28]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d102      	bne.n	800d7f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7f0:	e0c9      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d7f8:	69ba      	ldr	r2, [r7, #24]
 800d7fa:	4b67      	ldr	r3, [pc, #412]	; (800d998 <SDMMC_GetCmdResp1+0x1d8>)
 800d7fc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0ef      	beq.n	800d7e2 <SDMMC_GetCmdResp1+0x22>
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1ea      	bne.n	800d7e2 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d810:	f003 0304 	and.w	r3, r3, #4
 800d814:	2b00      	cmp	r3, #0
 800d816:	d004      	beq.n	800d822 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2204      	movs	r2, #4
 800d81c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d81e:	2304      	movs	r3, #4
 800d820:	e0b1      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d004      	beq.n	800d838 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2201      	movs	r2, #1
 800d832:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d834:	2301      	movs	r3, #1
 800d836:	e0a6      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4a58      	ldr	r2, [pc, #352]	; (800d99c <SDMMC_GetCmdResp1+0x1dc>)
 800d83c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f7ff fca6 	bl	800d190 <SDMMC_GetCommandResponse>
 800d844:	4603      	mov	r3, r0
 800d846:	461a      	mov	r2, r3
 800d848:	7afb      	ldrb	r3, [r7, #11]
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d001      	beq.n	800d852 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d84e:	2301      	movs	r3, #1
 800d850:	e099      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d852:	2100      	movs	r1, #0
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f7ff fca8 	bl	800d1aa <SDMMC_GetResponse>
 800d85a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d85c:	697a      	ldr	r2, [r7, #20]
 800d85e:	4b50      	ldr	r3, [pc, #320]	; (800d9a0 <SDMMC_GetCmdResp1+0x1e0>)
 800d860:	4013      	ands	r3, r2
 800d862:	2b00      	cmp	r3, #0
 800d864:	d101      	bne.n	800d86a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d866:	2300      	movs	r3, #0
 800d868:	e08d      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	da02      	bge.n	800d876 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d874:	e087      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d880:	2340      	movs	r3, #64	; 0x40
 800d882:	e080      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d88e:	2380      	movs	r3, #128	; 0x80
 800d890:	e079      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d89c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8a0:	e071      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d8ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8b0:	e069      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d8bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8c0:	e061      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d8cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8d0:	e059      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8e0:	e051      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8f0:	e049      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d8fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d900:	e041      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d90c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d910:	e039      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d91c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d920:	e031      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d92c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d930:	e029      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d002      	beq.n	800d942 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d93c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d940:	e021      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d94c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d950:	e019      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d002      	beq.n	800d962 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d95c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d960:	e011      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d96c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d970:	e009      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f003 0308 	and.w	r3, r3, #8
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d97c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d980:	e001      	b.n	800d986 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d986:	4618      	mov	r0, r3
 800d988:	3720      	adds	r7, #32
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	24000000 	.word	0x24000000
 800d994:	10624dd3 	.word	0x10624dd3
 800d998:	00200045 	.word	0x00200045
 800d99c:	002000c5 	.word	0x002000c5
 800d9a0:	fdffe008 	.word	0xfdffe008

0800d9a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9ac:	4b1f      	ldr	r3, [pc, #124]	; (800da2c <SDMMC_GetCmdResp2+0x88>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a1f      	ldr	r2, [pc, #124]	; (800da30 <SDMMC_GetCmdResp2+0x8c>)
 800d9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9b6:	0a5b      	lsrs	r3, r3, #9
 800d9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9bc:	fb02 f303 	mul.w	r3, r2, r3
 800d9c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	1e5a      	subs	r2, r3, #1
 800d9c6:	60fa      	str	r2, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d102      	bne.n	800d9d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9d0:	e026      	b.n	800da20 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d0ef      	beq.n	800d9c2 <SDMMC_GetCmdResp2+0x1e>
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1ea      	bne.n	800d9c2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f0:	f003 0304 	and.w	r3, r3, #4
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d004      	beq.n	800da02 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2204      	movs	r2, #4
 800d9fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9fe:	2304      	movs	r3, #4
 800da00:	e00e      	b.n	800da20 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d004      	beq.n	800da18 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da14:	2301      	movs	r3, #1
 800da16:	e003      	b.n	800da20 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a06      	ldr	r2, [pc, #24]	; (800da34 <SDMMC_GetCmdResp2+0x90>)
 800da1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3714      	adds	r7, #20
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr
 800da2c:	24000000 	.word	0x24000000
 800da30:	10624dd3 	.word	0x10624dd3
 800da34:	002000c5 	.word	0x002000c5

0800da38 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da40:	4b1a      	ldr	r3, [pc, #104]	; (800daac <SDMMC_GetCmdResp3+0x74>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a1a      	ldr	r2, [pc, #104]	; (800dab0 <SDMMC_GetCmdResp3+0x78>)
 800da46:	fba2 2303 	umull	r2, r3, r2, r3
 800da4a:	0a5b      	lsrs	r3, r3, #9
 800da4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800da50:	fb02 f303 	mul.w	r3, r2, r3
 800da54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	1e5a      	subs	r2, r3, #1
 800da5a:	60fa      	str	r2, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d102      	bne.n	800da66 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da64:	e01b      	b.n	800da9e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da72:	2b00      	cmp	r3, #0
 800da74:	d0ef      	beq.n	800da56 <SDMMC_GetCmdResp3+0x1e>
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1ea      	bne.n	800da56 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d004      	beq.n	800da96 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2204      	movs	r2, #4
 800da90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da92:	2304      	movs	r3, #4
 800da94:	e003      	b.n	800da9e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a06      	ldr	r2, [pc, #24]	; (800dab4 <SDMMC_GetCmdResp3+0x7c>)
 800da9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3714      	adds	r7, #20
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	24000000 	.word	0x24000000
 800dab0:	10624dd3 	.word	0x10624dd3
 800dab4:	002000c5 	.word	0x002000c5

0800dab8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	460b      	mov	r3, r1
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dac6:	4b35      	ldr	r3, [pc, #212]	; (800db9c <SDMMC_GetCmdResp6+0xe4>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a35      	ldr	r2, [pc, #212]	; (800dba0 <SDMMC_GetCmdResp6+0xe8>)
 800dacc:	fba2 2303 	umull	r2, r3, r2, r3
 800dad0:	0a5b      	lsrs	r3, r3, #9
 800dad2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dad6:	fb02 f303 	mul.w	r3, r2, r3
 800dada:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	1e5a      	subs	r2, r3, #1
 800dae0:	61fa      	str	r2, [r7, #28]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dae6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800daea:	e052      	b.n	800db92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d0ef      	beq.n	800dadc <SDMMC_GetCmdResp6+0x24>
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1ea      	bne.n	800dadc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db0a:	f003 0304 	and.w	r3, r3, #4
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d004      	beq.n	800db1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2204      	movs	r2, #4
 800db16:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db18:	2304      	movs	r3, #4
 800db1a:	e03a      	b.n	800db92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db20:	f003 0301 	and.w	r3, r3, #1
 800db24:	2b00      	cmp	r3, #0
 800db26:	d004      	beq.n	800db32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2201      	movs	r2, #1
 800db2c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db2e:	2301      	movs	r3, #1
 800db30:	e02f      	b.n	800db92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f7ff fb2c 	bl	800d190 <SDMMC_GetCommandResponse>
 800db38:	4603      	mov	r3, r0
 800db3a:	461a      	mov	r2, r3
 800db3c:	7afb      	ldrb	r3, [r7, #11]
 800db3e:	4293      	cmp	r3, r2
 800db40:	d001      	beq.n	800db46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db42:	2301      	movs	r3, #1
 800db44:	e025      	b.n	800db92 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	4a16      	ldr	r2, [pc, #88]	; (800dba4 <SDMMC_GetCmdResp6+0xec>)
 800db4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800db4c:	2100      	movs	r1, #0
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7ff fb2b 	bl	800d1aa <SDMMC_GetResponse>
 800db54:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d106      	bne.n	800db6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	0c1b      	lsrs	r3, r3, #16
 800db64:	b29a      	uxth	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800db6a:	2300      	movs	r3, #0
 800db6c:	e011      	b.n	800db92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db74:	2b00      	cmp	r3, #0
 800db76:	d002      	beq.n	800db7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db7c:	e009      	b.n	800db92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db8c:	e001      	b.n	800db92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800db92:	4618      	mov	r0, r3
 800db94:	3720      	adds	r7, #32
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	24000000 	.word	0x24000000
 800dba0:	10624dd3 	.word	0x10624dd3
 800dba4:	002000c5 	.word	0x002000c5

0800dba8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbb0:	4b22      	ldr	r3, [pc, #136]	; (800dc3c <SDMMC_GetCmdResp7+0x94>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a22      	ldr	r2, [pc, #136]	; (800dc40 <SDMMC_GetCmdResp7+0x98>)
 800dbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800dbba:	0a5b      	lsrs	r3, r3, #9
 800dbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbc0:	fb02 f303 	mul.w	r3, r2, r3
 800dbc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	1e5a      	subs	r2, r3, #1
 800dbca:	60fa      	str	r2, [r7, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d102      	bne.n	800dbd6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbd4:	e02c      	b.n	800dc30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d0ef      	beq.n	800dbc6 <SDMMC_GetCmdResp7+0x1e>
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d1ea      	bne.n	800dbc6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf4:	f003 0304 	and.w	r3, r3, #4
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d004      	beq.n	800dc06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2204      	movs	r2, #4
 800dc00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc02:	2304      	movs	r3, #4
 800dc04:	e014      	b.n	800dc30 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d004      	beq.n	800dc1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2201      	movs	r2, #1
 800dc16:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e009      	b.n	800dc30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d002      	beq.n	800dc2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2240      	movs	r2, #64	; 0x40
 800dc2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc2e:	2300      	movs	r3, #0

}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3714      	adds	r7, #20
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	24000000 	.word	0x24000000
 800dc40:	10624dd3 	.word	0x10624dd3

0800dc44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc44:	b084      	sub	sp, #16
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b084      	sub	sp, #16
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	f107 001c 	add.w	r0, r7, #28
 800dc52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d120      	bne.n	800dc9e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68da      	ldr	r2, [r3, #12]
 800dc6c:	4b25      	ldr	r3, [pc, #148]	; (800dd04 <USB_CoreInit+0xc0>)
 800dc6e:	4013      	ands	r3, r2
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d105      	bne.n	800dc92 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f001 fabe 	bl	800f214 <USB_CoreReset>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	73fb      	strb	r3, [r7, #15]
 800dc9c:	e01a      	b.n	800dcd4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f001 fab2 	bl	800f214 <USB_CoreReset>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d106      	bne.n	800dcc8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	639a      	str	r2, [r3, #56]	; 0x38
 800dcc6:	e005      	b.n	800dcd4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dccc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d10b      	bne.n	800dcf2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	689b      	ldr	r3, [r3, #8]
 800dcde:	f043 0206 	orr.w	r2, r3, #6
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	f043 0220 	orr.w	r2, r3, #32
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcfe:	b004      	add	sp, #16
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	ffbdffbf 	.word	0xffbdffbf

0800dd08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b087      	sub	sp, #28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	4613      	mov	r3, r2
 800dd14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dd16:	79fb      	ldrb	r3, [r7, #7]
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	d165      	bne.n	800dde8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	4a41      	ldr	r2, [pc, #260]	; (800de24 <USB_SetTurnaroundTime+0x11c>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d906      	bls.n	800dd32 <USB_SetTurnaroundTime+0x2a>
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	4a40      	ldr	r2, [pc, #256]	; (800de28 <USB_SetTurnaroundTime+0x120>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d802      	bhi.n	800dd32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dd2c:	230f      	movs	r3, #15
 800dd2e:	617b      	str	r3, [r7, #20]
 800dd30:	e062      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	4a3c      	ldr	r2, [pc, #240]	; (800de28 <USB_SetTurnaroundTime+0x120>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d906      	bls.n	800dd48 <USB_SetTurnaroundTime+0x40>
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	4a3b      	ldr	r2, [pc, #236]	; (800de2c <USB_SetTurnaroundTime+0x124>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d802      	bhi.n	800dd48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dd42:	230e      	movs	r3, #14
 800dd44:	617b      	str	r3, [r7, #20]
 800dd46:	e057      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	4a38      	ldr	r2, [pc, #224]	; (800de2c <USB_SetTurnaroundTime+0x124>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d906      	bls.n	800dd5e <USB_SetTurnaroundTime+0x56>
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	4a37      	ldr	r2, [pc, #220]	; (800de30 <USB_SetTurnaroundTime+0x128>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d802      	bhi.n	800dd5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dd58:	230d      	movs	r3, #13
 800dd5a:	617b      	str	r3, [r7, #20]
 800dd5c:	e04c      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	4a33      	ldr	r2, [pc, #204]	; (800de30 <USB_SetTurnaroundTime+0x128>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d906      	bls.n	800dd74 <USB_SetTurnaroundTime+0x6c>
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	4a32      	ldr	r2, [pc, #200]	; (800de34 <USB_SetTurnaroundTime+0x12c>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d802      	bhi.n	800dd74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dd6e:	230c      	movs	r3, #12
 800dd70:	617b      	str	r3, [r7, #20]
 800dd72:	e041      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	4a2f      	ldr	r2, [pc, #188]	; (800de34 <USB_SetTurnaroundTime+0x12c>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d906      	bls.n	800dd8a <USB_SetTurnaroundTime+0x82>
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	4a2e      	ldr	r2, [pc, #184]	; (800de38 <USB_SetTurnaroundTime+0x130>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d802      	bhi.n	800dd8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dd84:	230b      	movs	r3, #11
 800dd86:	617b      	str	r3, [r7, #20]
 800dd88:	e036      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	4a2a      	ldr	r2, [pc, #168]	; (800de38 <USB_SetTurnaroundTime+0x130>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d906      	bls.n	800dda0 <USB_SetTurnaroundTime+0x98>
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	4a29      	ldr	r2, [pc, #164]	; (800de3c <USB_SetTurnaroundTime+0x134>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d802      	bhi.n	800dda0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dd9a:	230a      	movs	r3, #10
 800dd9c:	617b      	str	r3, [r7, #20]
 800dd9e:	e02b      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	4a26      	ldr	r2, [pc, #152]	; (800de3c <USB_SetTurnaroundTime+0x134>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d906      	bls.n	800ddb6 <USB_SetTurnaroundTime+0xae>
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	4a25      	ldr	r2, [pc, #148]	; (800de40 <USB_SetTurnaroundTime+0x138>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d802      	bhi.n	800ddb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ddb0:	2309      	movs	r3, #9
 800ddb2:	617b      	str	r3, [r7, #20]
 800ddb4:	e020      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	4a21      	ldr	r2, [pc, #132]	; (800de40 <USB_SetTurnaroundTime+0x138>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d906      	bls.n	800ddcc <USB_SetTurnaroundTime+0xc4>
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	4a20      	ldr	r2, [pc, #128]	; (800de44 <USB_SetTurnaroundTime+0x13c>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d802      	bhi.n	800ddcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ddc6:	2308      	movs	r3, #8
 800ddc8:	617b      	str	r3, [r7, #20]
 800ddca:	e015      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	4a1d      	ldr	r2, [pc, #116]	; (800de44 <USB_SetTurnaroundTime+0x13c>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d906      	bls.n	800dde2 <USB_SetTurnaroundTime+0xda>
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	4a1c      	ldr	r2, [pc, #112]	; (800de48 <USB_SetTurnaroundTime+0x140>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d802      	bhi.n	800dde2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dddc:	2307      	movs	r3, #7
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	e00a      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dde2:	2306      	movs	r3, #6
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	e007      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dde8:	79fb      	ldrb	r3, [r7, #7]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d102      	bne.n	800ddf4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ddee:	2309      	movs	r3, #9
 800ddf0:	617b      	str	r3, [r7, #20]
 800ddf2:	e001      	b.n	800ddf8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ddf4:	2309      	movs	r3, #9
 800ddf6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	68da      	ldr	r2, [r3, #12]
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	029b      	lsls	r3, r3, #10
 800de0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800de10:	431a      	orrs	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	371c      	adds	r7, #28
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	00d8acbf 	.word	0x00d8acbf
 800de28:	00e4e1bf 	.word	0x00e4e1bf
 800de2c:	00f423ff 	.word	0x00f423ff
 800de30:	0106737f 	.word	0x0106737f
 800de34:	011a499f 	.word	0x011a499f
 800de38:	01312cff 	.word	0x01312cff
 800de3c:	014ca43f 	.word	0x014ca43f
 800de40:	016e35ff 	.word	0x016e35ff
 800de44:	01a6ab1f 	.word	0x01a6ab1f
 800de48:	01e847ff 	.word	0x01e847ff

0800de4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	f043 0201 	orr.w	r2, r3, #1
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de6e:	b480      	push	{r7}
 800de70:	b083      	sub	sp, #12
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	f023 0201 	bic.w	r2, r3, #1
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	460b      	mov	r3, r1
 800de9a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dea8:	78fb      	ldrb	r3, [r7, #3]
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d106      	bne.n	800debc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	60da      	str	r2, [r3, #12]
 800deba:	e00b      	b.n	800ded4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800debc:	78fb      	ldrb	r3, [r7, #3]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	60da      	str	r2, [r3, #12]
 800dece:	e001      	b.n	800ded4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e003      	b.n	800dedc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ded4:	2032      	movs	r0, #50	; 0x32
 800ded6:	f7f3 ff6d 	bl	8001db4 <HAL_Delay>

  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dee4:	b084      	sub	sp, #16
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b086      	sub	sp, #24
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800def2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800def6:	2300      	movs	r3, #0
 800def8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800defe:	2300      	movs	r3, #0
 800df00:	613b      	str	r3, [r7, #16]
 800df02:	e009      	b.n	800df18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	3340      	adds	r3, #64	; 0x40
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	2200      	movs	r2, #0
 800df10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	3301      	adds	r3, #1
 800df16:	613b      	str	r3, [r7, #16]
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	2b0e      	cmp	r3, #14
 800df1c:	d9f2      	bls.n	800df04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800df1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df20:	2b00      	cmp	r3, #0
 800df22:	d11c      	bne.n	800df5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df32:	f043 0302 	orr.w	r3, r3, #2
 800df36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	e005      	b.n	800df6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df70:	461a      	mov	r2, r3
 800df72:	2300      	movs	r3, #0
 800df74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df7c:	4619      	mov	r1, r3
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df84:	461a      	mov	r2, r3
 800df86:	680b      	ldr	r3, [r1, #0]
 800df88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d10c      	bne.n	800dfaa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800df90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df92:	2b00      	cmp	r3, #0
 800df94:	d104      	bne.n	800dfa0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800df96:	2100      	movs	r1, #0
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 f949 	bl	800e230 <USB_SetDevSpeed>
 800df9e:	e008      	b.n	800dfb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 f944 	bl	800e230 <USB_SetDevSpeed>
 800dfa8:	e003      	b.n	800dfb2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dfaa:	2103      	movs	r1, #3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f93f 	bl	800e230 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dfb2:	2110      	movs	r1, #16
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f8f3 	bl	800e1a0 <USB_FlushTxFifo>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 f911 	bl	800e1ec <USB_FlushRxFifo>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfda:	461a      	mov	r2, r3
 800dfdc:	2300      	movs	r3, #0
 800dfde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	2300      	movs	r3, #0
 800dfea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dff2:	461a      	mov	r2, r3
 800dff4:	2300      	movs	r3, #0
 800dff6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dff8:	2300      	movs	r3, #0
 800dffa:	613b      	str	r3, [r7, #16]
 800dffc:	e043      	b.n	800e086 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	015a      	lsls	r2, r3, #5
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	4413      	add	r3, r2
 800e006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e014:	d118      	bne.n	800e048 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10a      	bne.n	800e032 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	015a      	lsls	r2, r3, #5
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4413      	add	r3, r2
 800e024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e028:	461a      	mov	r2, r3
 800e02a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	e013      	b.n	800e05a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	015a      	lsls	r2, r3, #5
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	4413      	add	r3, r2
 800e03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e03e:	461a      	mov	r2, r3
 800e040:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e044:	6013      	str	r3, [r2, #0]
 800e046:	e008      	b.n	800e05a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	015a      	lsls	r2, r3, #5
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	4413      	add	r3, r2
 800e050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e054:	461a      	mov	r2, r3
 800e056:	2300      	movs	r3, #0
 800e058:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	015a      	lsls	r2, r3, #5
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	4413      	add	r3, r2
 800e062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e066:	461a      	mov	r2, r3
 800e068:	2300      	movs	r3, #0
 800e06a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	015a      	lsls	r2, r3, #5
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	4413      	add	r3, r2
 800e074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e078:	461a      	mov	r2, r3
 800e07a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e07e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	3301      	adds	r3, #1
 800e084:	613b      	str	r3, [r7, #16]
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	693a      	ldr	r2, [r7, #16]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d3b7      	bcc.n	800dffe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e08e:	2300      	movs	r3, #0
 800e090:	613b      	str	r3, [r7, #16]
 800e092:	e043      	b.n	800e11c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	015a      	lsls	r2, r3, #5
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4413      	add	r3, r2
 800e09c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0aa:	d118      	bne.n	800e0de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10a      	bne.n	800e0c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0be:	461a      	mov	r2, r3
 800e0c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e0c4:	6013      	str	r3, [r2, #0]
 800e0c6:	e013      	b.n	800e0f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	015a      	lsls	r2, r3, #5
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e0da:	6013      	str	r3, [r2, #0]
 800e0dc:	e008      	b.n	800e0f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	015a      	lsls	r2, r3, #5
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	015a      	lsls	r2, r3, #5
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	2300      	movs	r3, #0
 800e100:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	015a      	lsls	r2, r3, #5
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	4413      	add	r3, r2
 800e10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e10e:	461a      	mov	r2, r3
 800e110:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e114:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	3301      	adds	r3, #1
 800e11a:	613b      	str	r3, [r7, #16]
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	429a      	cmp	r2, r3
 800e122:	d3b7      	bcc.n	800e094 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e136:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e144:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d105      	bne.n	800e158 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	f043 0210 	orr.w	r2, r3, #16
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	699a      	ldr	r2, [r3, #24]
 800e15c:	4b0e      	ldr	r3, [pc, #56]	; (800e198 <USB_DevInit+0x2b4>)
 800e15e:	4313      	orrs	r3, r2
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e166:	2b00      	cmp	r3, #0
 800e168:	d005      	beq.n	800e176 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	699b      	ldr	r3, [r3, #24]
 800e16e:	f043 0208 	orr.w	r2, r3, #8
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d105      	bne.n	800e188 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	699a      	ldr	r2, [r3, #24]
 800e180:	4b06      	ldr	r3, [pc, #24]	; (800e19c <USB_DevInit+0x2b8>)
 800e182:	4313      	orrs	r3, r2
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e188:	7dfb      	ldrb	r3, [r7, #23]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e194:	b004      	add	sp, #16
 800e196:	4770      	bx	lr
 800e198:	803c3800 	.word	0x803c3800
 800e19c:	40000004 	.word	0x40000004

0800e1a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	019b      	lsls	r3, r3, #6
 800e1b2:	f043 0220 	orr.w	r2, r3, #32
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	60fb      	str	r3, [r7, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	4a09      	ldr	r2, [pc, #36]	; (800e1e8 <USB_FlushTxFifo+0x48>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d901      	bls.n	800e1cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	e006      	b.n	800e1da <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	f003 0320 	and.w	r3, r3, #32
 800e1d4:	2b20      	cmp	r3, #32
 800e1d6:	d0f0      	beq.n	800e1ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	00030d40 	.word	0x00030d40

0800e1ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2210      	movs	r2, #16
 800e1fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3301      	adds	r3, #1
 800e202:	60fb      	str	r3, [r7, #12]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	4a09      	ldr	r2, [pc, #36]	; (800e22c <USB_FlushRxFifo+0x40>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d901      	bls.n	800e210 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e20c:	2303      	movs	r3, #3
 800e20e:	e006      	b.n	800e21e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	f003 0310 	and.w	r3, r3, #16
 800e218:	2b10      	cmp	r3, #16
 800e21a:	d0f0      	beq.n	800e1fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3714      	adds	r7, #20
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	00030d40 	.word	0x00030d40

0800e230 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	460b      	mov	r3, r1
 800e23a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	78fb      	ldrb	r3, [r7, #3]
 800e24a:	68f9      	ldr	r1, [r7, #12]
 800e24c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e250:	4313      	orrs	r3, r2
 800e252:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3714      	adds	r7, #20
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e262:	b480      	push	{r7}
 800e264:	b087      	sub	sp, #28
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	f003 0306 	and.w	r3, r3, #6
 800e27a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d102      	bne.n	800e288 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e282:	2300      	movs	r3, #0
 800e284:	75fb      	strb	r3, [r7, #23]
 800e286:	e00a      	b.n	800e29e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d002      	beq.n	800e294 <USB_GetDevSpeed+0x32>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2b06      	cmp	r3, #6
 800e292:	d102      	bne.n	800e29a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e294:	2302      	movs	r3, #2
 800e296:	75fb      	strb	r3, [r7, #23]
 800e298:	e001      	b.n	800e29e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e29a:	230f      	movs	r3, #15
 800e29c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	371c      	adds	r7, #28
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	785b      	ldrb	r3, [r3, #1]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d139      	bne.n	800e33c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ce:	69da      	ldr	r2, [r3, #28]
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	f003 030f 	and.w	r3, r3, #15
 800e2d8:	2101      	movs	r1, #1
 800e2da:	fa01 f303 	lsl.w	r3, r1, r3
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	68f9      	ldr	r1, [r7, #12]
 800e2e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	015a      	lsls	r2, r3, #5
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d153      	bne.n	800e3a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	015a      	lsls	r2, r3, #5
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	4413      	add	r3, r2
 800e308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	78db      	ldrb	r3, [r3, #3]
 800e31a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e31c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	059b      	lsls	r3, r3, #22
 800e322:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e324:	431a      	orrs	r2, r3
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	0159      	lsls	r1, r3, #5
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	440b      	add	r3, r1
 800e32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e332:	4619      	mov	r1, r3
 800e334:	4b20      	ldr	r3, [pc, #128]	; (800e3b8 <USB_ActivateEndpoint+0x10c>)
 800e336:	4313      	orrs	r3, r2
 800e338:	600b      	str	r3, [r1, #0]
 800e33a:	e035      	b.n	800e3a8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e342:	69da      	ldr	r2, [r3, #28]
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f003 030f 	and.w	r3, r3, #15
 800e34c:	2101      	movs	r1, #1
 800e34e:	fa01 f303 	lsl.w	r3, r1, r3
 800e352:	041b      	lsls	r3, r3, #16
 800e354:	68f9      	ldr	r1, [r7, #12]
 800e356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e35a:	4313      	orrs	r3, r2
 800e35c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	015a      	lsls	r2, r3, #5
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	4413      	add	r3, r2
 800e366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d119      	bne.n	800e3a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	015a      	lsls	r2, r3, #5
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	4413      	add	r3, r2
 800e37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	78db      	ldrb	r3, [r3, #3]
 800e38e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e390:	430b      	orrs	r3, r1
 800e392:	431a      	orrs	r2, r3
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	0159      	lsls	r1, r3, #5
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	440b      	add	r3, r1
 800e39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4b05      	ldr	r3, [pc, #20]	; (800e3b8 <USB_ActivateEndpoint+0x10c>)
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e3a8:	2300      	movs	r3, #0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3714      	adds	r7, #20
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	10008000 	.word	0x10008000

0800e3bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	785b      	ldrb	r3, [r3, #1]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d161      	bne.n	800e49c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	015a      	lsls	r2, r3, #5
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3ee:	d11f      	bne.n	800e430 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	015a      	lsls	r2, r3, #5
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	0151      	lsls	r1, r2, #5
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	440a      	add	r2, r1
 800e406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e40a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e40e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	015a      	lsls	r2, r3, #5
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	4413      	add	r3, r2
 800e418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	68ba      	ldr	r2, [r7, #8]
 800e420:	0151      	lsls	r1, r2, #5
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	440a      	add	r2, r1
 800e426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e42a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e42e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	f003 030f 	and.w	r3, r3, #15
 800e440:	2101      	movs	r1, #1
 800e442:	fa01 f303 	lsl.w	r3, r1, r3
 800e446:	b29b      	uxth	r3, r3
 800e448:	43db      	mvns	r3, r3
 800e44a:	68f9      	ldr	r1, [r7, #12]
 800e44c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e450:	4013      	ands	r3, r2
 800e452:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e45a:	69da      	ldr	r2, [r3, #28]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	f003 030f 	and.w	r3, r3, #15
 800e464:	2101      	movs	r1, #1
 800e466:	fa01 f303 	lsl.w	r3, r1, r3
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	43db      	mvns	r3, r3
 800e46e:	68f9      	ldr	r1, [r7, #12]
 800e470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e474:	4013      	ands	r3, r2
 800e476:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	015a      	lsls	r2, r3, #5
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	0159      	lsls	r1, r3, #5
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	440b      	add	r3, r1
 800e48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e492:	4619      	mov	r1, r3
 800e494:	4b35      	ldr	r3, [pc, #212]	; (800e56c <USB_DeactivateEndpoint+0x1b0>)
 800e496:	4013      	ands	r3, r2
 800e498:	600b      	str	r3, [r1, #0]
 800e49a:	e060      	b.n	800e55e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	015a      	lsls	r2, r3, #5
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4b2:	d11f      	bne.n	800e4f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	015a      	lsls	r2, r3, #5
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68ba      	ldr	r2, [r7, #8]
 800e4c4:	0151      	lsls	r1, r2, #5
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	440a      	add	r2, r1
 800e4ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e4d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	015a      	lsls	r2, r3, #5
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	4413      	add	r3, r2
 800e4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	0151      	lsls	r1, r2, #5
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	440a      	add	r2, r1
 800e4ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	f003 030f 	and.w	r3, r3, #15
 800e504:	2101      	movs	r1, #1
 800e506:	fa01 f303 	lsl.w	r3, r1, r3
 800e50a:	041b      	lsls	r3, r3, #16
 800e50c:	43db      	mvns	r3, r3
 800e50e:	68f9      	ldr	r1, [r7, #12]
 800e510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e514:	4013      	ands	r3, r2
 800e516:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e51e:	69da      	ldr	r2, [r3, #28]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	f003 030f 	and.w	r3, r3, #15
 800e528:	2101      	movs	r1, #1
 800e52a:	fa01 f303 	lsl.w	r3, r1, r3
 800e52e:	041b      	lsls	r3, r3, #16
 800e530:	43db      	mvns	r3, r3
 800e532:	68f9      	ldr	r1, [r7, #12]
 800e534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e538:	4013      	ands	r3, r2
 800e53a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	015a      	lsls	r2, r3, #5
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	4413      	add	r3, r2
 800e544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	0159      	lsls	r1, r3, #5
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	440b      	add	r3, r1
 800e552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e556:	4619      	mov	r1, r3
 800e558:	4b05      	ldr	r3, [pc, #20]	; (800e570 <USB_DeactivateEndpoint+0x1b4>)
 800e55a:	4013      	ands	r3, r2
 800e55c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	ec337800 	.word	0xec337800
 800e570:	eff37800 	.word	0xeff37800

0800e574 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b08a      	sub	sp, #40	; 0x28
 800e578:	af02      	add	r7, sp, #8
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	4613      	mov	r3, r2
 800e580:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	785b      	ldrb	r3, [r3, #1]
 800e590:	2b01      	cmp	r3, #1
 800e592:	f040 8163 	bne.w	800e85c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	695b      	ldr	r3, [r3, #20]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d132      	bne.n	800e604 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	015a      	lsls	r2, r3, #5
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5aa:	691a      	ldr	r2, [r3, #16]
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	0159      	lsls	r1, r3, #5
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	440b      	add	r3, r1
 800e5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4ba5      	ldr	r3, [pc, #660]	; (800e850 <USB_EPStartXfer+0x2dc>)
 800e5bc:	4013      	ands	r3, r2
 800e5be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	015a      	lsls	r2, r3, #5
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	69ba      	ldr	r2, [r7, #24]
 800e5d0:	0151      	lsls	r1, r2, #5
 800e5d2:	69fa      	ldr	r2, [r7, #28]
 800e5d4:	440a      	add	r2, r1
 800e5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	015a      	lsls	r2, r3, #5
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ec:	691a      	ldr	r2, [r3, #16]
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	0159      	lsls	r1, r3, #5
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	440b      	add	r3, r1
 800e5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	4b95      	ldr	r3, [pc, #596]	; (800e854 <USB_EPStartXfer+0x2e0>)
 800e5fe:	4013      	ands	r3, r2
 800e600:	610b      	str	r3, [r1, #16]
 800e602:	e074      	b.n	800e6ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	015a      	lsls	r2, r3, #5
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	4413      	add	r3, r2
 800e60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e610:	691a      	ldr	r2, [r3, #16]
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	0159      	lsls	r1, r3, #5
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	440b      	add	r3, r1
 800e61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e61e:	4619      	mov	r1, r3
 800e620:	4b8c      	ldr	r3, [pc, #560]	; (800e854 <USB_EPStartXfer+0x2e0>)
 800e622:	4013      	ands	r3, r2
 800e624:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	015a      	lsls	r2, r3, #5
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	4413      	add	r3, r2
 800e62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e632:	691a      	ldr	r2, [r3, #16]
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	0159      	lsls	r1, r3, #5
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	440b      	add	r3, r1
 800e63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e640:	4619      	mov	r1, r3
 800e642:	4b83      	ldr	r3, [pc, #524]	; (800e850 <USB_EPStartXfer+0x2dc>)
 800e644:	4013      	ands	r3, r2
 800e646:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e654:	691a      	ldr	r2, [r3, #16]
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	6959      	ldr	r1, [r3, #20]
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	440b      	add	r3, r1
 800e660:	1e59      	subs	r1, r3, #1
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	fbb1 f3f3 	udiv	r3, r1, r3
 800e66a:	04d9      	lsls	r1, r3, #19
 800e66c:	4b7a      	ldr	r3, [pc, #488]	; (800e858 <USB_EPStartXfer+0x2e4>)
 800e66e:	400b      	ands	r3, r1
 800e670:	69b9      	ldr	r1, [r7, #24]
 800e672:	0148      	lsls	r0, r1, #5
 800e674:	69f9      	ldr	r1, [r7, #28]
 800e676:	4401      	add	r1, r0
 800e678:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e67c:	4313      	orrs	r3, r2
 800e67e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	015a      	lsls	r2, r3, #5
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	4413      	add	r3, r2
 800e688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e68c:	691a      	ldr	r2, [r3, #16]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	695b      	ldr	r3, [r3, #20]
 800e692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e696:	69b9      	ldr	r1, [r7, #24]
 800e698:	0148      	lsls	r0, r1, #5
 800e69a:	69f9      	ldr	r1, [r7, #28]
 800e69c:	4401      	add	r1, r0
 800e69e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	78db      	ldrb	r3, [r3, #3]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d11f      	bne.n	800e6ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	015a      	lsls	r2, r3, #5
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	69ba      	ldr	r2, [r7, #24]
 800e6be:	0151      	lsls	r1, r2, #5
 800e6c0:	69fa      	ldr	r2, [r7, #28]
 800e6c2:	440a      	add	r2, r1
 800e6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e6cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	015a      	lsls	r2, r3, #5
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	69ba      	ldr	r2, [r7, #24]
 800e6de:	0151      	lsls	r1, r2, #5
 800e6e0:	69fa      	ldr	r2, [r7, #28]
 800e6e2:	440a      	add	r2, r1
 800e6e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e6ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d14b      	bne.n	800e78c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d009      	beq.n	800e710 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	015a      	lsls	r2, r3, #5
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	4413      	add	r3, r2
 800e704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e708:	461a      	mov	r2, r3
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	78db      	ldrb	r3, [r3, #3]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d128      	bne.n	800e76a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e724:	2b00      	cmp	r3, #0
 800e726:	d110      	bne.n	800e74a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	015a      	lsls	r2, r3, #5
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	4413      	add	r3, r2
 800e730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	69ba      	ldr	r2, [r7, #24]
 800e738:	0151      	lsls	r1, r2, #5
 800e73a:	69fa      	ldr	r2, [r7, #28]
 800e73c:	440a      	add	r2, r1
 800e73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	e00f      	b.n	800e76a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	015a      	lsls	r2, r3, #5
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	4413      	add	r3, r2
 800e752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	69ba      	ldr	r2, [r7, #24]
 800e75a:	0151      	lsls	r1, r2, #5
 800e75c:	69fa      	ldr	r2, [r7, #28]
 800e75e:	440a      	add	r2, r1
 800e760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e768:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	015a      	lsls	r2, r3, #5
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	4413      	add	r3, r2
 800e772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	69ba      	ldr	r2, [r7, #24]
 800e77a:	0151      	lsls	r1, r2, #5
 800e77c:	69fa      	ldr	r2, [r7, #28]
 800e77e:	440a      	add	r2, r1
 800e780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e784:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e788:	6013      	str	r3, [r2, #0]
 800e78a:	e133      	b.n	800e9f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	015a      	lsls	r2, r3, #5
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	4413      	add	r3, r2
 800e794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	69ba      	ldr	r2, [r7, #24]
 800e79c:	0151      	lsls	r1, r2, #5
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	440a      	add	r2, r1
 800e7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	78db      	ldrb	r3, [r3, #3]
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d015      	beq.n	800e7e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f000 811b 	beq.w	800e9f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	f003 030f 	and.w	r3, r3, #15
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e7d4:	69f9      	ldr	r1, [r7, #28]
 800e7d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	634b      	str	r3, [r1, #52]	; 0x34
 800e7de:	e109      	b.n	800e9f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d110      	bne.n	800e812 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	015a      	lsls	r2, r3, #5
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	69ba      	ldr	r2, [r7, #24]
 800e800:	0151      	lsls	r1, r2, #5
 800e802:	69fa      	ldr	r2, [r7, #28]
 800e804:	440a      	add	r2, r1
 800e806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e80a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e80e:	6013      	str	r3, [r2, #0]
 800e810:	e00f      	b.n	800e832 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	015a      	lsls	r2, r3, #5
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	4413      	add	r3, r2
 800e81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	0151      	lsls	r1, r2, #5
 800e824:	69fa      	ldr	r2, [r7, #28]
 800e826:	440a      	add	r2, r1
 800e828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e82c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e830:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	68d9      	ldr	r1, [r3, #12]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	781a      	ldrb	r2, [r3, #0]
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	695b      	ldr	r3, [r3, #20]
 800e83e:	b298      	uxth	r0, r3
 800e840:	79fb      	ldrb	r3, [r7, #7]
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	4603      	mov	r3, r0
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f000 fa38 	bl	800ecbc <USB_WritePacket>
 800e84c:	e0d2      	b.n	800e9f4 <USB_EPStartXfer+0x480>
 800e84e:	bf00      	nop
 800e850:	e007ffff 	.word	0xe007ffff
 800e854:	fff80000 	.word	0xfff80000
 800e858:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	015a      	lsls	r2, r3, #5
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	4413      	add	r3, r2
 800e864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e868:	691a      	ldr	r2, [r3, #16]
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	0159      	lsls	r1, r3, #5
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	440b      	add	r3, r1
 800e872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e876:	4619      	mov	r1, r3
 800e878:	4b61      	ldr	r3, [pc, #388]	; (800ea00 <USB_EPStartXfer+0x48c>)
 800e87a:	4013      	ands	r3, r2
 800e87c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	015a      	lsls	r2, r3, #5
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	4413      	add	r3, r2
 800e886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e88a:	691a      	ldr	r2, [r3, #16]
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	0159      	lsls	r1, r3, #5
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	440b      	add	r3, r1
 800e894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e898:	4619      	mov	r1, r3
 800e89a:	4b5a      	ldr	r3, [pc, #360]	; (800ea04 <USB_EPStartXfer+0x490>)
 800e89c:	4013      	ands	r3, r2
 800e89e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	695b      	ldr	r3, [r3, #20]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d123      	bne.n	800e8f0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	015a      	lsls	r2, r3, #5
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8b4:	691a      	ldr	r2, [r3, #16]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e8be:	69b9      	ldr	r1, [r7, #24]
 800e8c0:	0148      	lsls	r0, r1, #5
 800e8c2:	69f9      	ldr	r1, [r7, #28]
 800e8c4:	4401      	add	r1, r0
 800e8c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	015a      	lsls	r2, r3, #5
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	69ba      	ldr	r2, [r7, #24]
 800e8de:	0151      	lsls	r1, r2, #5
 800e8e0:	69fa      	ldr	r2, [r7, #28]
 800e8e2:	440a      	add	r2, r1
 800e8e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e8ec:	6113      	str	r3, [r2, #16]
 800e8ee:	e033      	b.n	800e958 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	695a      	ldr	r2, [r3, #20]
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	1e5a      	subs	r2, r3, #1
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	fbb2 f3f3 	udiv	r3, r2, r3
 800e904:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	015a      	lsls	r2, r3, #5
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	4413      	add	r3, r2
 800e90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e912:	691a      	ldr	r2, [r3, #16]
 800e914:	8afb      	ldrh	r3, [r7, #22]
 800e916:	04d9      	lsls	r1, r3, #19
 800e918:	4b3b      	ldr	r3, [pc, #236]	; (800ea08 <USB_EPStartXfer+0x494>)
 800e91a:	400b      	ands	r3, r1
 800e91c:	69b9      	ldr	r1, [r7, #24]
 800e91e:	0148      	lsls	r0, r1, #5
 800e920:	69f9      	ldr	r1, [r7, #28]
 800e922:	4401      	add	r1, r0
 800e924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e928:	4313      	orrs	r3, r2
 800e92a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	015a      	lsls	r2, r3, #5
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	4413      	add	r3, r2
 800e934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e938:	691a      	ldr	r2, [r3, #16]
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	8af9      	ldrh	r1, [r7, #22]
 800e940:	fb01 f303 	mul.w	r3, r1, r3
 800e944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e948:	69b9      	ldr	r1, [r7, #24]
 800e94a:	0148      	lsls	r0, r1, #5
 800e94c:	69f9      	ldr	r1, [r7, #28]
 800e94e:	4401      	add	r1, r0
 800e950:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e954:	4313      	orrs	r3, r2
 800e956:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e958:	79fb      	ldrb	r3, [r7, #7]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d10d      	bne.n	800e97a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d009      	beq.n	800e97a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	68d9      	ldr	r1, [r3, #12]
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	015a      	lsls	r2, r3, #5
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	4413      	add	r3, r2
 800e972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e976:	460a      	mov	r2, r1
 800e978:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	78db      	ldrb	r3, [r3, #3]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d128      	bne.n	800e9d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d110      	bne.n	800e9b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	015a      	lsls	r2, r3, #5
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	4413      	add	r3, r2
 800e99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	69ba      	ldr	r2, [r7, #24]
 800e9a2:	0151      	lsls	r1, r2, #5
 800e9a4:	69fa      	ldr	r2, [r7, #28]
 800e9a6:	440a      	add	r2, r1
 800e9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	e00f      	b.n	800e9d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69ba      	ldr	r2, [r7, #24]
 800e9c4:	0151      	lsls	r1, r2, #5
 800e9c6:	69fa      	ldr	r2, [r7, #28]
 800e9c8:	440a      	add	r2, r1
 800e9ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	015a      	lsls	r2, r3, #5
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	4413      	add	r3, r2
 800e9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	69ba      	ldr	r2, [r7, #24]
 800e9e4:	0151      	lsls	r1, r2, #5
 800e9e6:	69fa      	ldr	r2, [r7, #28]
 800e9e8:	440a      	add	r2, r1
 800e9ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e9f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3720      	adds	r7, #32
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	fff80000 	.word	0xfff80000
 800ea04:	e007ffff 	.word	0xe007ffff
 800ea08:	1ff80000 	.word	0x1ff80000

0800ea0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b087      	sub	sp, #28
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	4613      	mov	r3, r2
 800ea18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	785b      	ldrb	r3, [r3, #1]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	f040 80cd 	bne.w	800ebc8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	695b      	ldr	r3, [r3, #20]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d132      	bne.n	800ea9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	015a      	lsls	r2, r3, #5
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea42:	691a      	ldr	r2, [r3, #16]
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	0159      	lsls	r1, r3, #5
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	440b      	add	r3, r1
 800ea4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea50:	4619      	mov	r1, r3
 800ea52:	4b98      	ldr	r3, [pc, #608]	; (800ecb4 <USB_EP0StartXfer+0x2a8>)
 800ea54:	4013      	ands	r3, r2
 800ea56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	015a      	lsls	r2, r3, #5
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	4413      	add	r3, r2
 800ea60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea64:	691b      	ldr	r3, [r3, #16]
 800ea66:	693a      	ldr	r2, [r7, #16]
 800ea68:	0151      	lsls	r1, r2, #5
 800ea6a:	697a      	ldr	r2, [r7, #20]
 800ea6c:	440a      	add	r2, r1
 800ea6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	015a      	lsls	r2, r3, #5
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	4413      	add	r3, r2
 800ea80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea84:	691a      	ldr	r2, [r3, #16]
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	0159      	lsls	r1, r3, #5
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	440b      	add	r3, r1
 800ea8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea92:	4619      	mov	r1, r3
 800ea94:	4b88      	ldr	r3, [pc, #544]	; (800ecb8 <USB_EP0StartXfer+0x2ac>)
 800ea96:	4013      	ands	r3, r2
 800ea98:	610b      	str	r3, [r1, #16]
 800ea9a:	e04e      	b.n	800eb3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	015a      	lsls	r2, r3, #5
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaa8:	691a      	ldr	r2, [r3, #16]
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	0159      	lsls	r1, r3, #5
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	440b      	add	r3, r1
 800eab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eab6:	4619      	mov	r1, r3
 800eab8:	4b7f      	ldr	r3, [pc, #508]	; (800ecb8 <USB_EP0StartXfer+0x2ac>)
 800eaba:	4013      	ands	r3, r2
 800eabc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	015a      	lsls	r2, r3, #5
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	4413      	add	r3, r2
 800eac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaca:	691a      	ldr	r2, [r3, #16]
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	0159      	lsls	r1, r3, #5
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	440b      	add	r3, r1
 800ead4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ead8:	4619      	mov	r1, r3
 800eada:	4b76      	ldr	r3, [pc, #472]	; (800ecb4 <USB_EP0StartXfer+0x2a8>)
 800eadc:	4013      	ands	r3, r2
 800eade:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	695a      	ldr	r2, [r3, #20]
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d903      	bls.n	800eaf4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	689a      	ldr	r2, [r3, #8]
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	015a      	lsls	r2, r3, #5
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	4413      	add	r3, r2
 800eafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	693a      	ldr	r2, [r7, #16]
 800eb04:	0151      	lsls	r1, r2, #5
 800eb06:	697a      	ldr	r2, [r7, #20]
 800eb08:	440a      	add	r2, r1
 800eb0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	015a      	lsls	r2, r3, #5
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb20:	691a      	ldr	r2, [r3, #16]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	695b      	ldr	r3, [r3, #20]
 800eb26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb2a:	6939      	ldr	r1, [r7, #16]
 800eb2c:	0148      	lsls	r0, r1, #5
 800eb2e:	6979      	ldr	r1, [r7, #20]
 800eb30:	4401      	add	r1, r0
 800eb32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eb36:	4313      	orrs	r3, r2
 800eb38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800eb3a:	79fb      	ldrb	r3, [r7, #7]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d11e      	bne.n	800eb7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d009      	beq.n	800eb5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	015a      	lsls	r2, r3, #5
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	4413      	add	r3, r2
 800eb50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb54:	461a      	mov	r2, r3
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	015a      	lsls	r2, r3, #5
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	4413      	add	r3, r2
 800eb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	693a      	ldr	r2, [r7, #16]
 800eb6c:	0151      	lsls	r1, r2, #5
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	440a      	add	r2, r1
 800eb72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb7a:	6013      	str	r3, [r2, #0]
 800eb7c:	e092      	b.n	800eca4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	015a      	lsls	r2, r3, #5
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	4413      	add	r3, r2
 800eb86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	693a      	ldr	r2, [r7, #16]
 800eb8e:	0151      	lsls	r1, r2, #5
 800eb90:	697a      	ldr	r2, [r7, #20]
 800eb92:	440a      	add	r2, r1
 800eb94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	695b      	ldr	r3, [r3, #20]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d07e      	beq.n	800eca4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	f003 030f 	and.w	r3, r3, #15
 800ebb6:	2101      	movs	r1, #1
 800ebb8:	fa01 f303 	lsl.w	r3, r1, r3
 800ebbc:	6979      	ldr	r1, [r7, #20]
 800ebbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	634b      	str	r3, [r1, #52]	; 0x34
 800ebc6:	e06d      	b.n	800eca4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	015a      	lsls	r2, r3, #5
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	4413      	add	r3, r2
 800ebd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebd4:	691a      	ldr	r2, [r3, #16]
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	0159      	lsls	r1, r3, #5
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	440b      	add	r3, r1
 800ebde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	4b34      	ldr	r3, [pc, #208]	; (800ecb8 <USB_EP0StartXfer+0x2ac>)
 800ebe6:	4013      	ands	r3, r2
 800ebe8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	015a      	lsls	r2, r3, #5
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf6:	691a      	ldr	r2, [r3, #16]
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	0159      	lsls	r1, r3, #5
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	440b      	add	r3, r1
 800ec00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec04:	4619      	mov	r1, r3
 800ec06:	4b2b      	ldr	r3, [pc, #172]	; (800ecb4 <USB_EP0StartXfer+0x2a8>)
 800ec08:	4013      	ands	r3, r2
 800ec0a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	695b      	ldr	r3, [r3, #20]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d003      	beq.n	800ec1c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	015a      	lsls	r2, r3, #5
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	4413      	add	r3, r2
 800ec24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	0151      	lsls	r1, r2, #5
 800ec2e:	697a      	ldr	r2, [r7, #20]
 800ec30:	440a      	add	r2, r1
 800ec32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	015a      	lsls	r2, r3, #5
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	4413      	add	r3, r2
 800ec44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec48:	691a      	ldr	r2, [r3, #16]
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec52:	6939      	ldr	r1, [r7, #16]
 800ec54:	0148      	lsls	r0, r1, #5
 800ec56:	6979      	ldr	r1, [r7, #20]
 800ec58:	4401      	add	r1, r0
 800ec5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ec62:	79fb      	ldrb	r3, [r7, #7]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d10d      	bne.n	800ec84 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d009      	beq.n	800ec84 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	68d9      	ldr	r1, [r3, #12]
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	015a      	lsls	r2, r3, #5
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec80:	460a      	mov	r2, r1
 800ec82:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	015a      	lsls	r2, r3, #5
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	693a      	ldr	r2, [r7, #16]
 800ec94:	0151      	lsls	r1, r2, #5
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	440a      	add	r2, r1
 800ec9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	371c      	adds	r7, #28
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	e007ffff 	.word	0xe007ffff
 800ecb8:	fff80000 	.word	0xfff80000

0800ecbc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b089      	sub	sp, #36	; 0x24
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	4611      	mov	r1, r2
 800ecc8:	461a      	mov	r2, r3
 800ecca:	460b      	mov	r3, r1
 800eccc:	71fb      	strb	r3, [r7, #7]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ecda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d11a      	bne.n	800ed18 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ece2:	88bb      	ldrh	r3, [r7, #4]
 800ece4:	3303      	adds	r3, #3
 800ece6:	089b      	lsrs	r3, r3, #2
 800ece8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ecea:	2300      	movs	r3, #0
 800ecec:	61bb      	str	r3, [r7, #24]
 800ecee:	e00f      	b.n	800ed10 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ecf0:	79fb      	ldrb	r3, [r7, #7]
 800ecf2:	031a      	lsls	r2, r3, #12
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	3304      	adds	r3, #4
 800ed08:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	61bb      	str	r3, [r7, #24]
 800ed10:	69ba      	ldr	r2, [r7, #24]
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d3eb      	bcc.n	800ecf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3724      	adds	r7, #36	; 0x24
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ed26:	b480      	push	{r7}
 800ed28:	b089      	sub	sp, #36	; 0x24
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	60f8      	str	r0, [r7, #12]
 800ed2e:	60b9      	str	r1, [r7, #8]
 800ed30:	4613      	mov	r3, r2
 800ed32:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ed3c:	88fb      	ldrh	r3, [r7, #6]
 800ed3e:	3303      	adds	r3, #3
 800ed40:	089b      	lsrs	r3, r3, #2
 800ed42:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ed44:	2300      	movs	r3, #0
 800ed46:	61bb      	str	r3, [r7, #24]
 800ed48:	e00b      	b.n	800ed62 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	601a      	str	r2, [r3, #0]
    pDest++;
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	3304      	adds	r3, #4
 800ed5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	61bb      	str	r3, [r7, #24]
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d3ef      	bcc.n	800ed4a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ed6a:	69fb      	ldr	r3, [r7, #28]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3724      	adds	r7, #36	; 0x24
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	785b      	ldrb	r3, [r3, #1]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d12c      	bne.n	800edee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	015a      	lsls	r2, r3, #5
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	db12      	blt.n	800edcc <USB_EPSetStall+0x54>
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00f      	beq.n	800edcc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	015a      	lsls	r2, r3, #5
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4413      	add	r3, r2
 800edb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68ba      	ldr	r2, [r7, #8]
 800edbc:	0151      	lsls	r1, r2, #5
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	440a      	add	r2, r1
 800edc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800edca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	015a      	lsls	r2, r3, #5
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	4413      	add	r3, r2
 800edd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	0151      	lsls	r1, r2, #5
 800edde:	68fa      	ldr	r2, [r7, #12]
 800ede0:	440a      	add	r2, r1
 800ede2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ede6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800edea:	6013      	str	r3, [r2, #0]
 800edec:	e02b      	b.n	800ee46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	015a      	lsls	r2, r3, #5
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	4413      	add	r3, r2
 800edf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	db12      	blt.n	800ee26 <USB_EPSetStall+0xae>
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d00f      	beq.n	800ee26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	015a      	lsls	r2, r3, #5
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	0151      	lsls	r1, r2, #5
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	440a      	add	r2, r1
 800ee1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ee24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	015a      	lsls	r2, r3, #5
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	68ba      	ldr	r2, [r7, #8]
 800ee36:	0151      	lsls	r1, r2, #5
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	440a      	add	r2, r1
 800ee3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ee44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee46:	2300      	movs	r3, #0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3714      	adds	r7, #20
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	785b      	ldrb	r3, [r3, #1]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d128      	bne.n	800eec2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	015a      	lsls	r2, r3, #5
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	4413      	add	r3, r2
 800ee78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	0151      	lsls	r1, r2, #5
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	440a      	add	r2, r1
 800ee86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ee8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	78db      	ldrb	r3, [r3, #3]
 800ee94:	2b03      	cmp	r3, #3
 800ee96:	d003      	beq.n	800eea0 <USB_EPClearStall+0x4c>
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	78db      	ldrb	r3, [r3, #3]
 800ee9c:	2b02      	cmp	r3, #2
 800ee9e:	d138      	bne.n	800ef12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	015a      	lsls	r2, r3, #5
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	4413      	add	r3, r2
 800eea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	0151      	lsls	r1, r2, #5
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	440a      	add	r2, r1
 800eeb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eeba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eebe:	6013      	str	r3, [r2, #0]
 800eec0:	e027      	b.n	800ef12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	015a      	lsls	r2, r3, #5
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	4413      	add	r3, r2
 800eeca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68ba      	ldr	r2, [r7, #8]
 800eed2:	0151      	lsls	r1, r2, #5
 800eed4:	68fa      	ldr	r2, [r7, #12]
 800eed6:	440a      	add	r2, r1
 800eed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eedc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eee0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	78db      	ldrb	r3, [r3, #3]
 800eee6:	2b03      	cmp	r3, #3
 800eee8:	d003      	beq.n	800eef2 <USB_EPClearStall+0x9e>
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	78db      	ldrb	r3, [r3, #3]
 800eeee:	2b02      	cmp	r3, #2
 800eef0:	d10f      	bne.n	800ef12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	015a      	lsls	r2, r3, #5
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	4413      	add	r3, r2
 800eefa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	0151      	lsls	r1, r2, #5
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	440a      	add	r2, r1
 800ef08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ef42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	78fb      	ldrb	r3, [r7, #3]
 800ef4e:	011b      	lsls	r3, r3, #4
 800ef50:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ef54:	68f9      	ldr	r1, [r7, #12]
 800ef56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3714      	adds	r7, #20
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef86:	f023 0302 	bic.w	r3, r3, #2
 800ef8a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ef8c:	2003      	movs	r0, #3
 800ef8e:	f7f2 ff11 	bl	8001db4 <HAL_Delay>

  return HAL_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efb6:	f043 0302 	orr.w	r3, r3, #2
 800efba:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800efbc:	2003      	movs	r0, #3
 800efbe:	f7f2 fef9 	bl	8001db4 <HAL_Delay>

  return HAL_OK;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	695b      	ldr	r3, [r3, #20]
 800efd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	699b      	ldr	r3, [r3, #24]
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	4013      	ands	r3, r2
 800efe2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800efe4:	68fb      	ldr	r3, [r7, #12]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3714      	adds	r7, #20
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr

0800eff2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eff2:	b480      	push	{r7}
 800eff4:	b085      	sub	sp, #20
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	68ba      	ldr	r2, [r7, #8]
 800f012:	4013      	ands	r3, r2
 800f014:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	0c1b      	lsrs	r3, r3, #16
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3714      	adds	r7, #20
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr

0800f026 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f026:	b480      	push	{r7}
 800f028:	b085      	sub	sp, #20
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f042:	69db      	ldr	r3, [r3, #28]
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	4013      	ands	r3, r2
 800f048:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	b29b      	uxth	r3, r3
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3714      	adds	r7, #20
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f05a:	b480      	push	{r7}
 800f05c:	b085      	sub	sp, #20
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	460b      	mov	r3, r1
 800f064:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f06a:	78fb      	ldrb	r3, [r7, #3]
 800f06c:	015a      	lsls	r2, r3, #5
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	4413      	add	r3, r2
 800f072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f080:	695b      	ldr	r3, [r3, #20]
 800f082:	68ba      	ldr	r2, [r7, #8]
 800f084:	4013      	ands	r3, r2
 800f086:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f088:	68bb      	ldr	r3, [r7, #8]
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3714      	adds	r7, #20
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr

0800f096 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f096:	b480      	push	{r7}
 800f098:	b087      	sub	sp, #28
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	460b      	mov	r3, r1
 800f0a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f0ba:	78fb      	ldrb	r3, [r7, #3]
 800f0bc:	f003 030f 	and.w	r3, r3, #15
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f0c6:	01db      	lsls	r3, r3, #7
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	693a      	ldr	r2, [r7, #16]
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f0d0:	78fb      	ldrb	r3, [r7, #3]
 800f0d2:	015a      	lsls	r2, r3, #5
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	4013      	ands	r3, r2
 800f0e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f0e4:	68bb      	ldr	r3, [r7, #8]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	371c      	adds	r7, #28
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f0f2:	b480      	push	{r7}
 800f0f4:	b083      	sub	sp, #12
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	695b      	ldr	r3, [r3, #20]
 800f0fe:	f003 0301 	and.w	r3, r3, #1
}
 800f102:	4618      	mov	r0, r3
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
	...

0800f110 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f12a:	4619      	mov	r1, r3
 800f12c:	4b09      	ldr	r3, [pc, #36]	; (800f154 <USB_ActivateSetup+0x44>)
 800f12e:	4013      	ands	r3, r2
 800f130:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f146:	2300      	movs	r3, #0
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr
 800f154:	fffff800 	.word	0xfffff800

0800f158 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f158:	b480      	push	{r7}
 800f15a:	b087      	sub	sp, #28
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	460b      	mov	r3, r1
 800f162:	607a      	str	r2, [r7, #4]
 800f164:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	333c      	adds	r3, #60	; 0x3c
 800f16e:	3304      	adds	r3, #4
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	4a26      	ldr	r2, [pc, #152]	; (800f210 <USB_EP0_OutStart+0xb8>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d90a      	bls.n	800f192 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f18c:	d101      	bne.n	800f192 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	e037      	b.n	800f202 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f198:	461a      	mov	r2, r3
 800f19a:	2300      	movs	r3, #0
 800f19c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b8:	691b      	ldr	r3, [r3, #16]
 800f1ba:	697a      	ldr	r2, [r7, #20]
 800f1bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1c0:	f043 0318 	orr.w	r3, r3, #24
 800f1c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1cc:	691b      	ldr	r3, [r3, #16]
 800f1ce:	697a      	ldr	r2, [r7, #20]
 800f1d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f1d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f1da:	7afb      	ldrb	r3, [r7, #11]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d10f      	bne.n	800f200 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	697a      	ldr	r2, [r7, #20]
 800f1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f1fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	371c      	adds	r7, #28
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	4f54300a 	.word	0x4f54300a

0800f214 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f214:	b480      	push	{r7}
 800f216:	b085      	sub	sp, #20
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f21c:	2300      	movs	r3, #0
 800f21e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	3301      	adds	r3, #1
 800f224:	60fb      	str	r3, [r7, #12]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	4a13      	ldr	r2, [pc, #76]	; (800f278 <USB_CoreReset+0x64>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d901      	bls.n	800f232 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f22e:	2303      	movs	r3, #3
 800f230:	e01b      	b.n	800f26a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	691b      	ldr	r3, [r3, #16]
 800f236:	2b00      	cmp	r3, #0
 800f238:	daf2      	bge.n	800f220 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f23a:	2300      	movs	r3, #0
 800f23c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	f043 0201 	orr.w	r2, r3, #1
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	3301      	adds	r3, #1
 800f24e:	60fb      	str	r3, [r7, #12]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	4a09      	ldr	r2, [pc, #36]	; (800f278 <USB_CoreReset+0x64>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d901      	bls.n	800f25c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f258:	2303      	movs	r3, #3
 800f25a:	e006      	b.n	800f26a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	f003 0301 	and.w	r3, r3, #1
 800f264:	2b01      	cmp	r3, #1
 800f266:	d0f0      	beq.n	800f24a <USB_CoreReset+0x36>

  return HAL_OK;
 800f268:	2300      	movs	r3, #0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr
 800f276:	bf00      	nop
 800f278:	00030d40 	.word	0x00030d40

0800f27c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f280:	4904      	ldr	r1, [pc, #16]	; (800f294 <MX_FATFS_Init+0x18>)
 800f282:	4805      	ldr	r0, [pc, #20]	; (800f298 <MX_FATFS_Init+0x1c>)
 800f284:	f005 fbec 	bl	8014a60 <FATFS_LinkDriver>
 800f288:	4603      	mov	r3, r0
 800f28a:	461a      	mov	r2, r3
 800f28c:	4b03      	ldr	r3, [pc, #12]	; (800f29c <MX_FATFS_Init+0x20>)
 800f28e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f290:	bf00      	nop
 800f292:	bd80      	pop	{r7, pc}
 800f294:	24040dc4 	.word	0x24040dc4
 800f298:	08016a28 	.word	0x08016a28
 800f29c:	24040dc0 	.word	0x24040dc0

0800f2a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f2a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f2ba:	f000 f885 	bl	800f3c8 <BSP_SD_IsDetected>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d001      	beq.n	800f2c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	e012      	b.n	800f2ee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f2c8:	480b      	ldr	r0, [pc, #44]	; (800f2f8 <BSP_SD_Init+0x48>)
 800f2ca:	f7fa fbbb 	bl	8009a44 <HAL_SD_Init>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d109      	bne.n	800f2ec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f2d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f2dc:	4806      	ldr	r0, [pc, #24]	; (800f2f8 <BSP_SD_Init+0x48>)
 800f2de:	f7fb fd8f 	bl	800ae00 <HAL_SD_ConfigWideBusOperation>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d001      	beq.n	800f2ec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f2ec:	79fb      	ldrb	r3, [r7, #7]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	24040574 	.word	0x24040574

0800f2fc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f308:	2300      	movs	r3, #0
 800f30a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	68ba      	ldr	r2, [r7, #8]
 800f310:	68f9      	ldr	r1, [r7, #12]
 800f312:	4806      	ldr	r0, [pc, #24]	; (800f32c <BSP_SD_ReadBlocks_DMA+0x30>)
 800f314:	f7fa ffd2 	bl	800a2bc <HAL_SD_ReadBlocks_DMA>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f31e:	2301      	movs	r3, #1
 800f320:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f322:	7dfb      	ldrb	r3, [r7, #23]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3718      	adds	r7, #24
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	24040574 	.word	0x24040574

0800f330 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	68f9      	ldr	r1, [r7, #12]
 800f346:	4806      	ldr	r0, [pc, #24]	; (800f360 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f348:	f7fb f860 	bl	800a40c <HAL_SD_WriteBlocks_DMA>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d001      	beq.n	800f356 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f352:	2301      	movs	r3, #1
 800f354:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f356:	7dfb      	ldrb	r3, [r7, #23]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3718      	adds	r7, #24
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	24040574 	.word	0x24040574

0800f364 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f368:	4805      	ldr	r0, [pc, #20]	; (800f380 <BSP_SD_GetCardState+0x1c>)
 800f36a:	f7fb fdf3 	bl	800af54 <HAL_SD_GetCardState>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b04      	cmp	r3, #4
 800f372:	bf14      	ite	ne
 800f374:	2301      	movne	r3, #1
 800f376:	2300      	moveq	r3, #0
 800f378:	b2db      	uxtb	r3, r3
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	24040574 	.word	0x24040574

0800f384 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f38c:	6879      	ldr	r1, [r7, #4]
 800f38e:	4803      	ldr	r0, [pc, #12]	; (800f39c <BSP_SD_GetCardInfo+0x18>)
 800f390:	f7fb fd0a 	bl	800ada8 <HAL_SD_GetCardInfo>
}
 800f394:	bf00      	nop
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	24040574 	.word	0x24040574

0800f3a0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f3a8:	f000 f9a0 	bl	800f6ec <BSP_SD_WriteCpltCallback>
}
 800f3ac:	bf00      	nop
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f3bc:	f000 f9a2 	bl	800f704 <BSP_SD_ReadCpltCallback>
}
 800f3c0:	bf00      	nop
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f3d2:	f000 f80b 	bl	800f3ec <BSP_PlatformIsDetected>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d101      	bne.n	800f3e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f3e0:	79fb      	ldrb	r3, [r7, #7]
 800f3e2:	b2db      	uxtb	r3, r3
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f3f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f3fa:	4806      	ldr	r0, [pc, #24]	; (800f414 <BSP_PlatformIsDetected+0x28>)
 800f3fc:	f7f6 f9dc 	bl	80057b8 <HAL_GPIO_ReadPin>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d001      	beq.n	800f40a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f406:	2300      	movs	r3, #0
 800f408:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f40a:	79fb      	ldrb	r3, [r7, #7]
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	58020000 	.word	0x58020000

0800f418 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800f420:	f7f2 fcbc 	bl	8001d9c <HAL_GetTick>
 800f424:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800f426:	e006      	b.n	800f436 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f428:	f7ff ff9c 	bl	800f364 <BSP_SD_GetCardState>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f432:	2300      	movs	r3, #0
 800f434:	e009      	b.n	800f44a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800f436:	f7f2 fcb1 	bl	8001d9c <HAL_GetTick>
 800f43a:	4602      	mov	r2, r0
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	1ad3      	subs	r3, r2, r3
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	429a      	cmp	r2, r3
 800f444:	d8f0      	bhi.n	800f428 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3710      	adds	r7, #16
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
	...

0800f454 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	4603      	mov	r3, r0
 800f45c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f45e:	4b0b      	ldr	r3, [pc, #44]	; (800f48c <SD_CheckStatus+0x38>)
 800f460:	2201      	movs	r2, #1
 800f462:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f464:	f7ff ff7e 	bl	800f364 <BSP_SD_GetCardState>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d107      	bne.n	800f47e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f46e:	4b07      	ldr	r3, [pc, #28]	; (800f48c <SD_CheckStatus+0x38>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	b2db      	uxtb	r3, r3
 800f474:	f023 0301 	bic.w	r3, r3, #1
 800f478:	b2da      	uxtb	r2, r3
 800f47a:	4b04      	ldr	r3, [pc, #16]	; (800f48c <SD_CheckStatus+0x38>)
 800f47c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f47e:	4b03      	ldr	r3, [pc, #12]	; (800f48c <SD_CheckStatus+0x38>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	b2db      	uxtb	r3, r3
}
 800f484:	4618      	mov	r0, r3
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	2400000d 	.word	0x2400000d

0800f490 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f49a:	f7ff ff09 	bl	800f2b0 <BSP_SD_Init>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d107      	bne.n	800f4b4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7ff ffd4 	bl	800f454 <SD_CheckStatus>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	4b04      	ldr	r3, [pc, #16]	; (800f4c4 <SD_initialize+0x34>)
 800f4b2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f4b4:	4b03      	ldr	r3, [pc, #12]	; (800f4c4 <SD_initialize+0x34>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	b2db      	uxtb	r3, r3
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	2400000d 	.word	0x2400000d

0800f4c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f4d2:	79fb      	ldrb	r3, [r7, #7]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7ff ffbd 	bl	800f454 <SD_CheckStatus>
 800f4da:	4603      	mov	r3, r0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60b9      	str	r1, [r7, #8]
 800f4ec:	607a      	str	r2, [r7, #4]
 800f4ee:	603b      	str	r3, [r7, #0]
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f4f8:	f247 5030 	movw	r0, #30000	; 0x7530
 800f4fc:	f7ff ff8c 	bl	800f418 <SD_CheckStatusWithTimeout>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	da01      	bge.n	800f50a <SD_read+0x26>
  {
    return res;
 800f506:	7dfb      	ldrb	r3, [r7, #23]
 800f508:	e03b      	b.n	800f582 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f50a:	683a      	ldr	r2, [r7, #0]
 800f50c:	6879      	ldr	r1, [r7, #4]
 800f50e:	68b8      	ldr	r0, [r7, #8]
 800f510:	f7ff fef4 	bl	800f2fc <BSP_SD_ReadBlocks_DMA>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d132      	bne.n	800f580 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f51a:	4b1c      	ldr	r3, [pc, #112]	; (800f58c <SD_read+0xa8>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f520:	f7f2 fc3c 	bl	8001d9c <HAL_GetTick>
 800f524:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f526:	bf00      	nop
 800f528:	4b18      	ldr	r3, [pc, #96]	; (800f58c <SD_read+0xa8>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d108      	bne.n	800f542 <SD_read+0x5e>
 800f530:	f7f2 fc34 	bl	8001d9c <HAL_GetTick>
 800f534:	4602      	mov	r2, r0
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	1ad3      	subs	r3, r2, r3
 800f53a:	f247 522f 	movw	r2, #29999	; 0x752f
 800f53e:	4293      	cmp	r3, r2
 800f540:	d9f2      	bls.n	800f528 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800f542:	4b12      	ldr	r3, [pc, #72]	; (800f58c <SD_read+0xa8>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d102      	bne.n	800f550 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	75fb      	strb	r3, [r7, #23]
 800f54e:	e017      	b.n	800f580 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f550:	4b0e      	ldr	r3, [pc, #56]	; (800f58c <SD_read+0xa8>)
 800f552:	2200      	movs	r2, #0
 800f554:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f556:	f7f2 fc21 	bl	8001d9c <HAL_GetTick>
 800f55a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f55c:	e007      	b.n	800f56e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f55e:	f7ff ff01 	bl	800f364 <BSP_SD_GetCardState>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d102      	bne.n	800f56e <SD_read+0x8a>
          {
            res = RES_OK;
 800f568:	2300      	movs	r3, #0
 800f56a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f56c:	e008      	b.n	800f580 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f56e:	f7f2 fc15 	bl	8001d9c <HAL_GetTick>
 800f572:	4602      	mov	r2, r0
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	1ad3      	subs	r3, r2, r3
 800f578:	f247 522f 	movw	r2, #29999	; 0x752f
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d9ee      	bls.n	800f55e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f580:	7dfb      	ldrb	r3, [r7, #23]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3718      	adds	r7, #24
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	240401fc 	.word	0x240401fc

0800f590 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	60b9      	str	r1, [r7, #8]
 800f598:	607a      	str	r2, [r7, #4]
 800f59a:	603b      	str	r3, [r7, #0]
 800f59c:	4603      	mov	r3, r0
 800f59e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f5a4:	4b24      	ldr	r3, [pc, #144]	; (800f638 <SD_write+0xa8>)
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f5aa:	f247 5030 	movw	r0, #30000	; 0x7530
 800f5ae:	f7ff ff33 	bl	800f418 <SD_CheckStatusWithTimeout>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	da01      	bge.n	800f5bc <SD_write+0x2c>
  {
    return res;
 800f5b8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ba:	e038      	b.n	800f62e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f5bc:	683a      	ldr	r2, [r7, #0]
 800f5be:	6879      	ldr	r1, [r7, #4]
 800f5c0:	68b8      	ldr	r0, [r7, #8]
 800f5c2:	f7ff feb5 	bl	800f330 <BSP_SD_WriteBlocks_DMA>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d12f      	bne.n	800f62c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f5cc:	f7f2 fbe6 	bl	8001d9c <HAL_GetTick>
 800f5d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f5d2:	bf00      	nop
 800f5d4:	4b18      	ldr	r3, [pc, #96]	; (800f638 <SD_write+0xa8>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d108      	bne.n	800f5ee <SD_write+0x5e>
 800f5dc:	f7f2 fbde 	bl	8001d9c <HAL_GetTick>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	f247 522f 	movw	r2, #29999	; 0x752f
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d9f2      	bls.n	800f5d4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800f5ee:	4b12      	ldr	r3, [pc, #72]	; (800f638 <SD_write+0xa8>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d102      	bne.n	800f5fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	75fb      	strb	r3, [r7, #23]
 800f5fa:	e017      	b.n	800f62c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f5fc:	4b0e      	ldr	r3, [pc, #56]	; (800f638 <SD_write+0xa8>)
 800f5fe:	2200      	movs	r2, #0
 800f600:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f602:	f7f2 fbcb 	bl	8001d9c <HAL_GetTick>
 800f606:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f608:	e007      	b.n	800f61a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f60a:	f7ff feab 	bl	800f364 <BSP_SD_GetCardState>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d102      	bne.n	800f61a <SD_write+0x8a>
          {
            res = RES_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	75fb      	strb	r3, [r7, #23]
            break;
 800f618:	e008      	b.n	800f62c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f61a:	f7f2 fbbf 	bl	8001d9c <HAL_GetTick>
 800f61e:	4602      	mov	r2, r0
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	f247 522f 	movw	r2, #29999	; 0x752f
 800f628:	4293      	cmp	r3, r2
 800f62a:	d9ee      	bls.n	800f60a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3718      	adds	r7, #24
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	240401f8 	.word	0x240401f8

0800f63c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08c      	sub	sp, #48	; 0x30
 800f640:	af00      	add	r7, sp, #0
 800f642:	4603      	mov	r3, r0
 800f644:	603a      	str	r2, [r7, #0]
 800f646:	71fb      	strb	r3, [r7, #7]
 800f648:	460b      	mov	r3, r1
 800f64a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f64c:	2301      	movs	r3, #1
 800f64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f652:	4b25      	ldr	r3, [pc, #148]	; (800f6e8 <SD_ioctl+0xac>)
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	b2db      	uxtb	r3, r3
 800f658:	f003 0301 	and.w	r3, r3, #1
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <SD_ioctl+0x28>
 800f660:	2303      	movs	r3, #3
 800f662:	e03c      	b.n	800f6de <SD_ioctl+0xa2>

  switch (cmd)
 800f664:	79bb      	ldrb	r3, [r7, #6]
 800f666:	2b03      	cmp	r3, #3
 800f668:	d834      	bhi.n	800f6d4 <SD_ioctl+0x98>
 800f66a:	a201      	add	r2, pc, #4	; (adr r2, 800f670 <SD_ioctl+0x34>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f681 	.word	0x0800f681
 800f674:	0800f689 	.word	0x0800f689
 800f678:	0800f6a1 	.word	0x0800f6a1
 800f67c:	0800f6bb 	.word	0x0800f6bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f680:	2300      	movs	r3, #0
 800f682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f686:	e028      	b.n	800f6da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f688:	f107 0308 	add.w	r3, r7, #8
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7ff fe79 	bl	800f384 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f692:	6a3a      	ldr	r2, [r7, #32]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f698:	2300      	movs	r3, #0
 800f69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f69e:	e01c      	b.n	800f6da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f6a0:	f107 0308 	add.w	r3, r7, #8
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7ff fe6d 	bl	800f384 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f6b8:	e00f      	b.n	800f6da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f6ba:	f107 0308 	add.w	r3, r7, #8
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7ff fe60 	bl	800f384 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c6:	0a5a      	lsrs	r2, r3, #9
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f6d2:	e002      	b.n	800f6da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f6d4:	2304      	movs	r3, #4
 800f6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f6da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3730      	adds	r7, #48	; 0x30
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2400000d 	.word	0x2400000d

0800f6ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f6f0:	4b03      	ldr	r3, [pc, #12]	; (800f700 <BSP_SD_WriteCpltCallback+0x14>)
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	601a      	str	r2, [r3, #0]
}
 800f6f6:	bf00      	nop
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	240401f8 	.word	0x240401f8

0800f704 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f704:	b480      	push	{r7}
 800f706:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f708:	4b03      	ldr	r3, [pc, #12]	; (800f718 <BSP_SD_ReadCpltCallback+0x14>)
 800f70a:	2201      	movs	r2, #1
 800f70c:	601a      	str	r2, [r3, #0]
}
 800f70e:	bf00      	nop
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr
 800f718:	240401fc 	.word	0x240401fc

0800f71c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	460b      	mov	r3, r1
 800f726:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800f728:	f248 0074 	movw	r0, #32884	; 0x8074
 800f72c:	f005 fed0 	bl	80154d0 <malloc>
 800f730:	4603      	mov	r3, r0
 800f732:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d105      	bne.n	800f746 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f742:	2302      	movs	r3, #2
 800f744:	e034      	b.n	800f7b0 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	7c1b      	ldrb	r3, [r3, #16]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d115      	bne.n	800f782 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800f756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f75a:	2202      	movs	r2, #2
 800f75c:	2101      	movs	r1, #1
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f005 fd1d 	bl	801519e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2201      	movs	r2, #1
 800f768:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800f76c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f770:	2202      	movs	r2, #2
 800f772:	2181      	movs	r1, #129	; 0x81
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f005 fd12 	bl	801519e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2201      	movs	r2, #1
 800f77e:	871a      	strh	r2, [r3, #56]	; 0x38
 800f780:	e012      	b.n	800f7a8 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800f782:	2340      	movs	r3, #64	; 0x40
 800f784:	2202      	movs	r2, #2
 800f786:	2101      	movs	r1, #1
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f005 fd08 	bl	801519e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2201      	movs	r2, #1
 800f792:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800f796:	2340      	movs	r3, #64	; 0x40
 800f798:	2202      	movs	r2, #2
 800f79a:	2181      	movs	r1, #129	; 0x81
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f005 fcfe 	bl	801519e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 f98e 	bl	800faca <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800f7ae:	2300      	movs	r3, #0
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f005 fd0f 	bl	80151ea <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800f7d4:	2181      	movs	r1, #129	; 0x81
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f005 fd07 	bl	80151ea <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 f9cf 	bl	800fb86 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d009      	beq.n	800f806 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f005 fe71 	bl	80154e0 <free>
    pdev->pClassData = NULL;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f820:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800f826:	2300      	movs	r3, #0
 800f828:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f832:	2b00      	cmp	r3, #0
 800f834:	d04d      	beq.n	800f8d2 <USBD_MSC_Setup+0xc2>
 800f836:	2b20      	cmp	r3, #32
 800f838:	f040 80c6 	bne.w	800f9c8 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	785b      	ldrb	r3, [r3, #1]
 800f840:	2bfe      	cmp	r3, #254	; 0xfe
 800f842:	d002      	beq.n	800f84a <USBD_MSC_Setup+0x3a>
 800f844:	2bff      	cmp	r3, #255	; 0xff
 800f846:	d024      	beq.n	800f892 <USBD_MSC_Setup+0x82>
 800f848:	e03b      	b.n	800f8c2 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	885b      	ldrh	r3, [r3, #2]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d118      	bne.n	800f884 <USBD_MSC_Setup+0x74>
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	88db      	ldrh	r3, [r3, #6]
 800f856:	2b01      	cmp	r3, #1
 800f858:	d114      	bne.n	800f884 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800f860:	2b00      	cmp	r3, #0
 800f862:	da0f      	bge.n	800f884 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f86a:	699b      	ldr	r3, [r3, #24]
 800f86c:	4798      	blx	r3
 800f86e:	4603      	mov	r3, r0
 800f870:	461a      	mov	r2, r3
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	2201      	movs	r2, #1
 800f87a:	4619      	mov	r1, r3
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f002 fdaa 	bl	80123d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f882:	e025      	b.n	800f8d0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f002 fd34 	bl	80122f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800f88c:	2303      	movs	r3, #3
 800f88e:	75fb      	strb	r3, [r7, #23]
      break;
 800f890:	e01e      	b.n	800f8d0 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	885b      	ldrh	r3, [r3, #2]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10c      	bne.n	800f8b4 <USBD_MSC_Setup+0xa4>
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	88db      	ldrh	r3, [r3, #6]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d108      	bne.n	800f8b4 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	db03      	blt.n	800f8b4 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 f947 	bl	800fb40 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f8b2:	e00d      	b.n	800f8d0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800f8b4:	6839      	ldr	r1, [r7, #0]
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f002 fd1c 	bl	80122f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800f8bc:	2303      	movs	r3, #3
 800f8be:	75fb      	strb	r3, [r7, #23]
      break;
 800f8c0:	e006      	b.n	800f8d0 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f002 fd15 	bl	80122f4 <USBD_CtlError>
      ret = USBD_FAIL;
 800f8ca:	2303      	movs	r3, #3
 800f8cc:	75fb      	strb	r3, [r7, #23]
      break;
 800f8ce:	bf00      	nop
    }
    break;
 800f8d0:	e081      	b.n	800f9d6 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	785b      	ldrb	r3, [r3, #1]
 800f8d6:	2b0b      	cmp	r3, #11
 800f8d8:	d86d      	bhi.n	800f9b6 <USBD_MSC_Setup+0x1a6>
 800f8da:	a201      	add	r2, pc, #4	; (adr r2, 800f8e0 <USBD_MSC_Setup+0xd0>)
 800f8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e0:	0800f911 	.word	0x0800f911
 800f8e4:	0800f987 	.word	0x0800f987
 800f8e8:	0800f9b7 	.word	0x0800f9b7
 800f8ec:	0800f9b7 	.word	0x0800f9b7
 800f8f0:	0800f9b7 	.word	0x0800f9b7
 800f8f4:	0800f9b7 	.word	0x0800f9b7
 800f8f8:	0800f9b7 	.word	0x0800f9b7
 800f8fc:	0800f9b7 	.word	0x0800f9b7
 800f900:	0800f9b7 	.word	0x0800f9b7
 800f904:	0800f9b7 	.word	0x0800f9b7
 800f908:	0800f939 	.word	0x0800f939
 800f90c:	0800f961 	.word	0x0800f961
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f916:	2b03      	cmp	r3, #3
 800f918:	d107      	bne.n	800f92a <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f91a:	f107 030e 	add.w	r3, r7, #14
 800f91e:	2202      	movs	r2, #2
 800f920:	4619      	mov	r1, r3
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f002 fd57 	bl	80123d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f928:	e04d      	b.n	800f9c6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f002 fce1 	bl	80122f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800f932:	2303      	movs	r3, #3
 800f934:	75fb      	strb	r3, [r7, #23]
      break;
 800f936:	e046      	b.n	800f9c6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f93e:	2b03      	cmp	r3, #3
 800f940:	d107      	bne.n	800f952 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	3304      	adds	r3, #4
 800f946:	2201      	movs	r2, #1
 800f948:	4619      	mov	r1, r3
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f002 fd43 	bl	80123d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f950:	e039      	b.n	800f9c6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f002 fccd 	bl	80122f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800f95a:	2303      	movs	r3, #3
 800f95c:	75fb      	strb	r3, [r7, #23]
      break;
 800f95e:	e032      	b.n	800f9c6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f966:	2b03      	cmp	r3, #3
 800f968:	d106      	bne.n	800f978 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	885b      	ldrh	r3, [r3, #2]
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	461a      	mov	r2, r3
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f976:	e026      	b.n	800f9c6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800f978:	6839      	ldr	r1, [r7, #0]
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f002 fcba 	bl	80122f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800f980:	2303      	movs	r3, #3
 800f982:	75fb      	strb	r3, [r7, #23]
      break;
 800f984:	e01f      	b.n	800f9c6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f98c:	2b03      	cmp	r3, #3
 800f98e:	d119      	bne.n	800f9c4 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	885b      	ldrh	r3, [r3, #2]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d115      	bne.n	800f9c4 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	889b      	ldrh	r3, [r3, #4]
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	4619      	mov	r1, r3
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f005 fc41 	bl	8015228 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	889b      	ldrh	r3, [r3, #4]
 800f9aa:	b2db      	uxtb	r3, r3
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 fa90 	bl	800fed4 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800f9b4:	e006      	b.n	800f9c4 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f002 fc9b 	bl	80122f4 <USBD_CtlError>
      ret = USBD_FAIL;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	75fb      	strb	r3, [r7, #23]
      break;
 800f9c2:	e000      	b.n	800f9c6 <USBD_MSC_Setup+0x1b6>
      break;
 800f9c4:	bf00      	nop
    }
    break;
 800f9c6:	e006      	b.n	800f9d6 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f002 fc92 	bl	80122f4 <USBD_CtlError>
    ret = USBD_FAIL;
 800f9d0:	2303      	movs	r3, #3
 800f9d2:	75fb      	strb	r3, [r7, #23]
    break;
 800f9d4:	bf00      	nop
  }

  return (uint8_t)ret;
 800f9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3718      	adds	r7, #24
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800f9ec:	78fb      	ldrb	r3, [r7, #3]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 f8d9 	bl	800fba8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800f9f6:	2300      	movs	r3, #0
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	460b      	mov	r3, r1
 800fa0a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800fa0c:	78fb      	ldrb	r3, [r7, #3]
 800fa0e:	4619      	mov	r1, r3
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f8fd 	bl	800fc10 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2220      	movs	r2, #32
 800fa2c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800fa2e:	4b03      	ldr	r3, [pc, #12]	; (800fa3c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	24000048 	.word	0x24000048

0800fa40 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2220      	movs	r2, #32
 800fa4c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800fa4e:	4b03      	ldr	r3, [pc, #12]	; (800fa5c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	24000068 	.word	0x24000068

0800fa60 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2220      	movs	r2, #32
 800fa6c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800fa6e:	4b03      	ldr	r3, [pc, #12]	; (800fa7c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	24000088 	.word	0x24000088

0800fa80 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	220a      	movs	r2, #10
 800fa8c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800fa8e:	4b03      	ldr	r3, [pc, #12]	; (800fa9c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr
 800fa9c:	240000a8 	.word	0x240000a8

0800faa0 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fab0:	2303      	movs	r3, #3
 800fab2:	e004      	b.n	800fabe <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	683a      	ldr	r2, [r7, #0]
 800fab8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr

0800faca <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b084      	sub	sp, #16
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fad8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2200      	movs	r2, #0
 800fade:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2200      	movs	r2, #0
 800fae4:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	f248 0361 	movw	r3, #32865	; 0x8061
 800faec:	4413      	add	r3, r2
 800faee:	2200      	movs	r2, #0
 800faf0:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	f248 0360 	movw	r3, #32864	; 0x8060
 800faf8:	4413      	add	r3, r2
 800fafa:	2200      	movs	r2, #0
 800fafc:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	f248 0362 	movw	r3, #32866	; 0x8062
 800fb04:	4413      	add	r3, r2
 800fb06:	2200      	movs	r2, #0
 800fb08:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2000      	movs	r0, #0
 800fb14:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800fb16:	2101      	movs	r1, #1
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f005 fb85 	bl	8015228 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800fb1e:	2181      	movs	r1, #129	; 0x81
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f005 fb81 	bl	8015228 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f248 0210 	movw	r2, #32784	; 0x8010
 800fb2c:	441a      	add	r2, r3
 800fb2e:	231f      	movs	r3, #31
 800fb30:	2101      	movs	r1, #1
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f005 fc41 	bl	80153ba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800fb38:	bf00      	nop
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb4e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800fb5c:	2181      	movs	r1, #129	; 0x81
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f005 fba0 	bl	80152a4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800fb64:	2101      	movs	r1, #1
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f005 fb9c 	bl	80152a4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f248 0210 	movw	r2, #32784	; 0x8010
 800fb72:	441a      	add	r2, r3
 800fb74:	231f      	movs	r3, #31
 800fb76:	2101      	movs	r1, #1
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f005 fc1e 	bl	80153ba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800fb7e:	bf00      	nop
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800fb86:	b480      	push	{r7}
 800fb88:	b085      	sub	sp, #20
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb94:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	721a      	strb	r2, [r3, #8]
}
 800fb9c:	bf00      	nop
 800fb9e:	3714      	adds	r7, #20
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fbba:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	7a1b      	ldrb	r3, [r3, #8]
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	d004      	beq.n	800fbce <MSC_BOT_DataIn+0x26>
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	db1c      	blt.n	800fc02 <MSC_BOT_DataIn+0x5a>
 800fbc8:	2b04      	cmp	r3, #4
 800fbca:	dc1a      	bgt.n	800fc02 <MSC_BOT_DataIn+0x5a>
 800fbcc:	e014      	b.n	800fbf8 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	f248 031d 	movw	r3, #32797	; 0x801d
 800fbd4:	4413      	add	r3, r2
 800fbd6:	7819      	ldrb	r1, [r3, #0]
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	f248 031f 	movw	r3, #32799	; 0x801f
 800fbde:	4413      	add	r3, r2
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 f99e 	bl	800ff24 <SCSI_ProcessCmd>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	da0b      	bge.n	800fc06 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fbee:	2101      	movs	r1, #1
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 f90b 	bl	800fe0c <MSC_BOT_SendCSW>
    }
    break;
 800fbf6:	e006      	b.n	800fc06 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f906 	bl	800fe0c <MSC_BOT_SendCSW>
    break;
 800fc00:	e002      	b.n	800fc08 <MSC_BOT_DataIn+0x60>

  default:
    break;
 800fc02:	bf00      	nop
 800fc04:	e000      	b.n	800fc08 <MSC_BOT_DataIn+0x60>
    break;
 800fc06:	bf00      	nop
  }
}
 800fc08:	bf00      	nop
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	460b      	mov	r3, r1
 800fc1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc22:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	7a1b      	ldrb	r3, [r3, #8]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <MSC_BOT_DataOut+0x22>
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d004      	beq.n	800fc3a <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800fc30:	e018      	b.n	800fc64 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f81a 	bl	800fc6c <MSC_BOT_CBW_Decode>
      break;
 800fc38:	e014      	b.n	800fc64 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	f248 031d 	movw	r3, #32797	; 0x801d
 800fc40:	4413      	add	r3, r2
 800fc42:	7819      	ldrb	r1, [r3, #0]
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	f248 031f 	movw	r3, #32799	; 0x801f
 800fc4a:	4413      	add	r3, r2
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 f968 	bl	800ff24 <SCSI_ProcessCmd>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	da03      	bge.n	800fc62 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 f8d5 	bl	800fe0c <MSC_BOT_SendCSW>
      break;
 800fc62:	bf00      	nop
  }
}
 800fc64:	bf00      	nop
 800fc66:	3710      	adds	r7, #16
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc7a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	f248 0314 	movw	r3, #32788	; 0x8014
 800fc82:	4413      	add	r3, r2
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	68f9      	ldr	r1, [r7, #12]
 800fc88:	f248 0334 	movw	r3, #32820	; 0x8034
 800fc8c:	440b      	add	r3, r1
 800fc8e:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	f248 0318 	movw	r3, #32792	; 0x8018
 800fc96:	4413      	add	r3, r2
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	68f9      	ldr	r1, [r7, #12]
 800fc9c:	f248 0338 	movw	r3, #32824	; 0x8038
 800fca0:	440b      	add	r3, r1
 800fca2:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800fca4:	2101      	movs	r1, #1
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f005 fba8 	bl	80153fc <USBD_LL_GetRxDataSize>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b1f      	cmp	r3, #31
 800fcb0:	d11c      	bne.n	800fcec <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	f248 0310 	movw	r3, #32784	; 0x8010
 800fcb8:	4413      	add	r3, r2
 800fcba:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800fcbc:	4a38      	ldr	r2, [pc, #224]	; (800fda0 <MSC_BOT_CBW_Decode+0x134>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d114      	bne.n	800fcec <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	f248 031d 	movw	r3, #32797	; 0x801d
 800fcc8:	4413      	add	r3, r2
 800fcca:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d80d      	bhi.n	800fcec <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fcd0:	68fa      	ldr	r2, [r7, #12]
 800fcd2:	f248 031e 	movw	r3, #32798	; 0x801e
 800fcd6:	4413      	add	r3, r2
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d006      	beq.n	800fcec <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	f248 031e 	movw	r3, #32798	; 0x801e
 800fce4:	4413      	add	r3, r2
 800fce6:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fce8:	2b10      	cmp	r3, #16
 800fcea:	d910      	bls.n	800fd0e <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	f248 031d 	movw	r3, #32797	; 0x801d
 800fcf2:	4413      	add	r3, r2
 800fcf4:	7819      	ldrb	r1, [r3, #0]
 800fcf6:	2320      	movs	r3, #32
 800fcf8:	2205      	movs	r2, #5
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fd36 	bl	801076c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2202      	movs	r2, #2
 800fd04:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 f8b2 	bl	800fe70 <MSC_BOT_Abort>
 800fd0c:	e044      	b.n	800fd98 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800fd0e:	68fa      	ldr	r2, [r7, #12]
 800fd10:	f248 031d 	movw	r3, #32797	; 0x801d
 800fd14:	4413      	add	r3, r2
 800fd16:	7819      	ldrb	r1, [r3, #0]
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	f248 031f 	movw	r3, #32799	; 0x801f
 800fd1e:	4413      	add	r3, r2
 800fd20:	461a      	mov	r2, r3
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f8fe 	bl	800ff24 <SCSI_ProcessCmd>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	da0c      	bge.n	800fd48 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	7a1b      	ldrb	r3, [r3, #8]
 800fd32:	2b05      	cmp	r3, #5
 800fd34:	d104      	bne.n	800fd40 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fd36:	2101      	movs	r1, #1
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f867 	bl	800fe0c <MSC_BOT_SendCSW>
 800fd3e:	e02b      	b.n	800fd98 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f895 	bl	800fe70 <MSC_BOT_Abort>
 800fd46:	e027      	b.n	800fd98 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	7a1b      	ldrb	r3, [r3, #8]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d022      	beq.n	800fd96 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d01e      	beq.n	800fd96 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800fd5c:	2b03      	cmp	r3, #3
 800fd5e:	d01a      	beq.n	800fd96 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d009      	beq.n	800fd7c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f103 0110 	add.w	r1, r3, #16
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	461a      	mov	r2, r3
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 f815 	bl	800fda4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800fd7a:	e00d      	b.n	800fd98 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d104      	bne.n	800fd8e <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800fd84:	2100      	movs	r1, #0
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 f840 	bl	800fe0c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800fd8c:	e004      	b.n	800fd98 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 f86e 	bl	800fe70 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800fd94:	e000      	b.n	800fd98 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 800fd96:	bf00      	nop
    }
  }
}
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	43425355 	.word	0x43425355

0800fda4 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b086      	sub	sp, #24
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdb6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	f248 0318 	movw	r3, #32792	; 0x8018
 800fdbe:	4413      	add	r3, r2
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	bf28      	it	cs
 800fdc8:	4613      	movcs	r3, r2
 800fdca:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800fdcc:	697a      	ldr	r2, [r7, #20]
 800fdce:	f248 0338 	movw	r3, #32824	; 0x8038
 800fdd2:	4413      	add	r3, r2
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	1ad2      	subs	r2, r2, r3
 800fdda:	6979      	ldr	r1, [r7, #20]
 800fddc:	f248 0338 	movw	r3, #32824	; 0x8038
 800fde0:	440b      	add	r3, r1
 800fde2:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	f248 033c 	movw	r3, #32828	; 0x803c
 800fdea:	4413      	add	r3, r2
 800fdec:	2200      	movs	r2, #0
 800fdee:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	2204      	movs	r2, #4
 800fdf4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	2181      	movs	r1, #129	; 0x81
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f005 fabb 	bl	8015378 <USBD_LL_Transmit>
}
 800fe02:	bf00      	nop
 800fe04:	3718      	adds	r7, #24
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
	...

0800fe0c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	460b      	mov	r3, r1
 800fe16:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe1e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	f248 0330 	movw	r3, #32816	; 0x8030
 800fe26:	4413      	add	r3, r2
 800fe28:	4a10      	ldr	r2, [pc, #64]	; (800fe6c <MSC_BOT_SendCSW+0x60>)
 800fe2a:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	f248 033c 	movw	r3, #32828	; 0x803c
 800fe32:	4413      	add	r3, r2
 800fe34:	78fa      	ldrb	r2, [r7, #3]
 800fe36:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f248 0230 	movw	r2, #32816	; 0x8030
 800fe44:	441a      	add	r2, r3
 800fe46:	230d      	movs	r3, #13
 800fe48:	2181      	movs	r1, #129	; 0x81
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f005 fa94 	bl	8015378 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f248 0210 	movw	r2, #32784	; 0x8010
 800fe56:	441a      	add	r2, r3
 800fe58:	231f      	movs	r3, #31
 800fe5a:	2101      	movs	r1, #1
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f005 faac 	bl	80153ba <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800fe62:	bf00      	nop
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	53425355 	.word	0x53425355

0800fe70 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe7e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800fe80:	68fa      	ldr	r2, [r7, #12]
 800fe82:	f248 031c 	movw	r3, #32796	; 0x801c
 800fe86:	4413      	add	r3, r2
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d10e      	bne.n	800feac <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 800fe8e:	68fa      	ldr	r2, [r7, #12]
 800fe90:	f248 0318 	movw	r3, #32792	; 0x8018
 800fe94:	4413      	add	r3, r2
 800fe96:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d007      	beq.n	800feac <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d103      	bne.n	800feac <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800fea4:	2101      	movs	r1, #1
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f005 f9dd 	bl	8015266 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800feac:	2181      	movs	r1, #129	; 0x81
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f005 f9d9 	bl	8015266 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	7a5b      	ldrb	r3, [r3, #9]
 800feb8:	2b02      	cmp	r3, #2
 800feba:	d107      	bne.n	800fecc <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800febc:	2181      	movs	r1, #129	; 0x81
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f005 f9d1 	bl	8015266 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800fec4:	2101      	movs	r1, #1
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f005 f9cd 	bl	8015266 <USBD_LL_StallEP>
  }
}
 800fecc:	bf00      	nop
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	460b      	mov	r3, r1
 800fede:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fee6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	7a5b      	ldrb	r3, [r3, #9]
 800feec:	2b02      	cmp	r3, #2
 800feee:	d108      	bne.n	800ff02 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800fef0:	2181      	movs	r1, #129	; 0x81
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f005 f9b7 	bl	8015266 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800fef8:	2101      	movs	r1, #1
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f005 f9b3 	bl	8015266 <USBD_LL_StallEP>
 800ff00:	e00d      	b.n	800ff1e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800ff02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	da08      	bge.n	800ff1c <MSC_BOT_CplClrFeature+0x48>
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	7a5b      	ldrb	r3, [r3, #9]
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d004      	beq.n	800ff1c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ff12:	2101      	movs	r1, #1
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f7ff ff79 	bl	800fe0c <MSC_BOT_SendCSW>
 800ff1a:	e000      	b.n	800ff1e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800ff1c:	bf00      	nop
  }
}
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b086      	sub	sp, #24
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	607a      	str	r2, [r7, #4]
 800ff30:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff38:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	2b25      	cmp	r3, #37	; 0x25
 800ff40:	d06e      	beq.n	8010020 <SCSI_ProcessCmd+0xfc>
 800ff42:	2b25      	cmp	r3, #37	; 0x25
 800ff44:	dc11      	bgt.n	800ff6a <SCSI_ProcessCmd+0x46>
 800ff46:	2b1a      	cmp	r3, #26
 800ff48:	d04f      	beq.n	800ffea <SCSI_ProcessCmd+0xc6>
 800ff4a:	2b1a      	cmp	r3, #26
 800ff4c:	dc06      	bgt.n	800ff5c <SCSI_ProcessCmd+0x38>
 800ff4e:	2b03      	cmp	r3, #3
 800ff50:	d027      	beq.n	800ffa2 <SCSI_ProcessCmd+0x7e>
 800ff52:	2b12      	cmp	r3, #18
 800ff54:	d02e      	beq.n	800ffb4 <SCSI_ProcessCmd+0x90>
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d01a      	beq.n	800ff90 <SCSI_ProcessCmd+0x6c>
 800ff5a:	e0a0      	b.n	801009e <SCSI_ProcessCmd+0x17a>
 800ff5c:	2b1e      	cmp	r3, #30
 800ff5e:	d03b      	beq.n	800ffd8 <SCSI_ProcessCmd+0xb4>
 800ff60:	2b23      	cmp	r3, #35	; 0x23
 800ff62:	d054      	beq.n	801000e <SCSI_ProcessCmd+0xea>
 800ff64:	2b1b      	cmp	r3, #27
 800ff66:	d02e      	beq.n	800ffc6 <SCSI_ProcessCmd+0xa2>
 800ff68:	e099      	b.n	801009e <SCSI_ProcessCmd+0x17a>
 800ff6a:	2b5a      	cmp	r3, #90	; 0x5a
 800ff6c:	d046      	beq.n	800fffc <SCSI_ProcessCmd+0xd8>
 800ff6e:	2b5a      	cmp	r3, #90	; 0x5a
 800ff70:	dc07      	bgt.n	800ff82 <SCSI_ProcessCmd+0x5e>
 800ff72:	2b2a      	cmp	r3, #42	; 0x2a
 800ff74:	d078      	beq.n	8010068 <SCSI_ProcessCmd+0x144>
 800ff76:	2b2f      	cmp	r3, #47	; 0x2f
 800ff78:	f000 8088 	beq.w	801008c <SCSI_ProcessCmd+0x168>
 800ff7c:	2b28      	cmp	r3, #40	; 0x28
 800ff7e:	d061      	beq.n	8010044 <SCSI_ProcessCmd+0x120>
 800ff80:	e08d      	b.n	801009e <SCSI_ProcessCmd+0x17a>
 800ff82:	2ba8      	cmp	r3, #168	; 0xa8
 800ff84:	d067      	beq.n	8010056 <SCSI_ProcessCmd+0x132>
 800ff86:	2baa      	cmp	r3, #170	; 0xaa
 800ff88:	d077      	beq.n	801007a <SCSI_ProcessCmd+0x156>
 800ff8a:	2b9e      	cmp	r3, #158	; 0x9e
 800ff8c:	d051      	beq.n	8010032 <SCSI_ProcessCmd+0x10e>
 800ff8e:	e086      	b.n	801009e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800ff90:	7afb      	ldrb	r3, [r7, #11]
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	4619      	mov	r1, r3
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f000 f893 	bl	80100c2 <SCSI_TestUnitReady>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	75fb      	strb	r3, [r7, #23]
    break;
 800ffa0:	e089      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800ffa2:	7afb      	ldrb	r3, [r7, #11]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f000 fb47 	bl	801063c <SCSI_RequestSense>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	75fb      	strb	r3, [r7, #23]
    break;
 800ffb2:	e080      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800ffb4:	7afb      	ldrb	r3, [r7, #11]
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4619      	mov	r1, r3
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f000 f8d2 	bl	8010164 <SCSI_Inquiry>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	75fb      	strb	r3, [r7, #23]
    break;
 800ffc4:	e077      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800ffc6:	7afb      	ldrb	r3, [r7, #11]
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	68f8      	ldr	r0, [r7, #12]
 800ffce:	f000 fc27 	bl	8010820 <SCSI_StartStopUnit>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	75fb      	strb	r3, [r7, #23]
    break;
 800ffd6:	e06e      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ffd8:	7afb      	ldrb	r3, [r7, #11]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f000 fc71 	bl	80108c6 <SCSI_AllowPreventRemovable>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	75fb      	strb	r3, [r7, #23]
    break;
 800ffe8:	e065      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800ffea:	7afb      	ldrb	r3, [r7, #11]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	4619      	mov	r1, r3
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f000 fad7 	bl	80105a4 <SCSI_ModeSense6>
 800fff6:	4603      	mov	r3, r0
 800fff8:	75fb      	strb	r3, [r7, #23]
    break;
 800fffa:	e05c      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800fffc:	7afb      	ldrb	r3, [r7, #11]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	4619      	mov	r1, r3
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f000 faf4 	bl	80105f0 <SCSI_ModeSense10>
 8010008:	4603      	mov	r3, r0
 801000a:	75fb      	strb	r3, [r7, #23]
    break;
 801000c:	e053      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801000e:	7afb      	ldrb	r3, [r7, #11]
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	4619      	mov	r1, r3
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f000 fa56 	bl	80104c6 <SCSI_ReadFormatCapacity>
 801001a:	4603      	mov	r3, r0
 801001c:	75fb      	strb	r3, [r7, #23]
    break;
 801001e:	e04a      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8010020:	7afb      	ldrb	r3, [r7, #11]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	4619      	mov	r1, r3
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	f000 f910 	bl	801024c <SCSI_ReadCapacity10>
 801002c:	4603      	mov	r3, r0
 801002e:	75fb      	strb	r3, [r7, #23]
    break;
 8010030:	e041      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8010032:	7afb      	ldrb	r3, [r7, #11]
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	4619      	mov	r1, r3
 8010038:	68f8      	ldr	r0, [r7, #12]
 801003a:	f000 f98b 	bl	8010354 <SCSI_ReadCapacity16>
 801003e:	4603      	mov	r3, r0
 8010040:	75fb      	strb	r3, [r7, #23]
    break;
 8010042:	e038      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8010044:	7afb      	ldrb	r3, [r7, #11]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	4619      	mov	r1, r3
 801004a:	68f8      	ldr	r0, [r7, #12]
 801004c:	f000 fc62 	bl	8010914 <SCSI_Read10>
 8010050:	4603      	mov	r3, r0
 8010052:	75fb      	strb	r3, [r7, #23]
    break;
 8010054:	e02f      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8010056:	7afb      	ldrb	r3, [r7, #11]
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	4619      	mov	r1, r3
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f000 fd0b 	bl	8010a78 <SCSI_Read12>
 8010062:	4603      	mov	r3, r0
 8010064:	75fb      	strb	r3, [r7, #23]
    break;
 8010066:	e026      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8010068:	7afb      	ldrb	r3, [r7, #11]
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	4619      	mov	r1, r3
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f000 fdbe 	bl	8010bf0 <SCSI_Write10>
 8010074:	4603      	mov	r3, r0
 8010076:	75fb      	strb	r3, [r7, #23]
    break;
 8010078:	e01d      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 801007a:	7afb      	ldrb	r3, [r7, #11]
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	4619      	mov	r1, r3
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f000 fe8d 	bl	8010da0 <SCSI_Write12>
 8010086:	4603      	mov	r3, r0
 8010088:	75fb      	strb	r3, [r7, #23]
    break;
 801008a:	e014      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 801008c:	7afb      	ldrb	r3, [r7, #11]
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	4619      	mov	r1, r3
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f000 ff6c 	bl	8010f70 <SCSI_Verify10>
 8010098:	4603      	mov	r3, r0
 801009a:	75fb      	strb	r3, [r7, #23]
    break;
 801009c:	e00b      	b.n	80100b6 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801009e:	7af9      	ldrb	r1, [r7, #11]
 80100a0:	2320      	movs	r3, #32
 80100a2:	2205      	movs	r2, #5
 80100a4:	68f8      	ldr	r0, [r7, #12]
 80100a6:	f000 fb61 	bl	801076c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	2202      	movs	r2, #2
 80100ae:	725a      	strb	r2, [r3, #9]
    ret = -1;
 80100b0:	23ff      	movs	r3, #255	; 0xff
 80100b2:	75fb      	strb	r3, [r7, #23]
    break;
 80100b4:	bf00      	nop
  }

  return ret;
 80100b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3718      	adds	r7, #24
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b086      	sub	sp, #24
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	60f8      	str	r0, [r7, #12]
 80100ca:	460b      	mov	r3, r1
 80100cc:	607a      	str	r2, [r7, #4]
 80100ce:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100d6:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80100d8:	697a      	ldr	r2, [r7, #20]
 80100da:	f248 0318 	movw	r3, #32792	; 0x8018
 80100de:	4413      	add	r3, r2
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00c      	beq.n	8010100 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80100e6:	697a      	ldr	r2, [r7, #20]
 80100e8:	f248 031d 	movw	r3, #32797	; 0x801d
 80100ec:	4413      	add	r3, r2
 80100ee:	7819      	ldrb	r1, [r3, #0]
 80100f0:	2320      	movs	r3, #32
 80100f2:	2205      	movs	r2, #5
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f000 fb39 	bl	801076c <SCSI_SenseCode>

    return -1;
 80100fa:	f04f 33ff 	mov.w	r3, #4294967295
 80100fe:	e02c      	b.n	801015a <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010100:	697a      	ldr	r2, [r7, #20]
 8010102:	f248 0362 	movw	r3, #32866	; 0x8062
 8010106:	4413      	add	r3, r2
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	2b02      	cmp	r3, #2
 801010c:	d10b      	bne.n	8010126 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801010e:	7af9      	ldrb	r1, [r7, #11]
 8010110:	233a      	movs	r3, #58	; 0x3a
 8010112:	2202      	movs	r2, #2
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f000 fb29 	bl	801076c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	2205      	movs	r2, #5
 801011e:	721a      	strb	r2, [r3, #8]
    return -1;
 8010120:	f04f 33ff 	mov.w	r3, #4294967295
 8010124:	e019      	b.n	801015a <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801012c:	689b      	ldr	r3, [r3, #8]
 801012e:	7afa      	ldrb	r2, [r7, #11]
 8010130:	4610      	mov	r0, r2
 8010132:	4798      	blx	r3
 8010134:	4603      	mov	r3, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00b      	beq.n	8010152 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801013a:	7af9      	ldrb	r1, [r7, #11]
 801013c:	233a      	movs	r3, #58	; 0x3a
 801013e:	2202      	movs	r2, #2
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f000 fb13 	bl	801076c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	2205      	movs	r2, #5
 801014a:	721a      	strb	r2, [r3, #8]

    return -1;
 801014c:	f04f 33ff 	mov.w	r3, #4294967295
 8010150:	e003      	b.n	801015a <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	2200      	movs	r2, #0
 8010156:	60da      	str	r2, [r3, #12]

  return 0;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3718      	adds	r7, #24
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
	...

08010164 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b088      	sub	sp, #32
 8010168:	af00      	add	r7, sp, #0
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	460b      	mov	r3, r1
 801016e:	607a      	str	r2, [r7, #4]
 8010170:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010178:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 801017a:	69ba      	ldr	r2, [r7, #24]
 801017c:	f248 0318 	movw	r3, #32792	; 0x8018
 8010180:	4413      	add	r3, r2
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10c      	bne.n	80101a2 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010188:	69ba      	ldr	r2, [r7, #24]
 801018a:	f248 031d 	movw	r3, #32797	; 0x801d
 801018e:	4413      	add	r3, r2
 8010190:	7819      	ldrb	r1, [r3, #0]
 8010192:	2320      	movs	r3, #32
 8010194:	2205      	movs	r2, #5
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	f000 fae8 	bl	801076c <SCSI_SenseCode>
    return -1;
 801019c:	f04f 33ff 	mov.w	r3, #4294967295
 80101a0:	e04c      	b.n	801023c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	3301      	adds	r3, #1
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	f003 0301 	and.w	r3, r3, #1
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d022      	beq.n	80101f6 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	3302      	adds	r3, #2
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d105      	bne.n	80101c6 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80101ba:	2206      	movs	r2, #6
 80101bc:	4921      	ldr	r1, [pc, #132]	; (8010244 <SCSI_Inquiry+0xe0>)
 80101be:	69b8      	ldr	r0, [r7, #24]
 80101c0:	f001 f862 	bl	8011288 <SCSI_UpdateBotData>
 80101c4:	e039      	b.n	801023a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	3302      	adds	r3, #2
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	2b80      	cmp	r3, #128	; 0x80
 80101ce:	d105      	bne.n	80101dc <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80101d0:	2208      	movs	r2, #8
 80101d2:	491d      	ldr	r1, [pc, #116]	; (8010248 <SCSI_Inquiry+0xe4>)
 80101d4:	69b8      	ldr	r0, [r7, #24]
 80101d6:	f001 f857 	bl	8011288 <SCSI_UpdateBotData>
 80101da:	e02e      	b.n	801023a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80101dc:	69ba      	ldr	r2, [r7, #24]
 80101de:	f248 031d 	movw	r3, #32797	; 0x801d
 80101e2:	4413      	add	r3, r2
 80101e4:	7819      	ldrb	r1, [r3, #0]
 80101e6:	2324      	movs	r3, #36	; 0x24
 80101e8:	2205      	movs	r2, #5
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f000 fabe 	bl	801076c <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80101f0:	f04f 33ff 	mov.w	r3, #4294967295
 80101f4:	e022      	b.n	801023c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80101fc:	69d9      	ldr	r1, [r3, #28]
 80101fe:	7afa      	ldrb	r2, [r7, #11]
 8010200:	4613      	mov	r3, r2
 8010202:	00db      	lsls	r3, r3, #3
 8010204:	4413      	add	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	440b      	add	r3, r1
 801020a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	3304      	adds	r3, #4
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	b29b      	uxth	r3, r3
 8010214:	3305      	adds	r3, #5
 8010216:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	3304      	adds	r3, #4
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	b29b      	uxth	r3, r3
 8010220:	8bfa      	ldrh	r2, [r7, #30]
 8010222:	429a      	cmp	r2, r3
 8010224:	d303      	bcc.n	801022e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	3304      	adds	r3, #4
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801022e:	8bfb      	ldrh	r3, [r7, #30]
 8010230:	461a      	mov	r2, r3
 8010232:	6979      	ldr	r1, [r7, #20]
 8010234:	69b8      	ldr	r0, [r7, #24]
 8010236:	f001 f827 	bl	8011288 <SCSI_UpdateBotData>
  }

  return 0;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3720      	adds	r7, #32
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	240000b4 	.word	0x240000b4
 8010248:	240000bc 	.word	0x240000bc

0801024c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801024c:	b590      	push	{r4, r7, lr}
 801024e:	b087      	sub	sp, #28
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	460b      	mov	r3, r1
 8010256:	607a      	str	r2, [r7, #4]
 8010258:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010260:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010268:	685c      	ldr	r4, [r3, #4]
 801026a:	697a      	ldr	r2, [r7, #20]
 801026c:	f248 0368 	movw	r3, #32872	; 0x8068
 8010270:	4413      	add	r3, r2
 8010272:	6979      	ldr	r1, [r7, #20]
 8010274:	f248 0264 	movw	r2, #32868	; 0x8064
 8010278:	440a      	add	r2, r1
 801027a:	7af8      	ldrb	r0, [r7, #11]
 801027c:	4619      	mov	r1, r3
 801027e:	47a0      	blx	r4
 8010280:	4603      	mov	r3, r0
 8010282:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010284:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d106      	bne.n	801029a <SCSI_ReadCapacity10+0x4e>
 801028c:	697a      	ldr	r2, [r7, #20]
 801028e:	f248 0362 	movw	r3, #32866	; 0x8062
 8010292:	4413      	add	r3, r2
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	2b02      	cmp	r3, #2
 8010298:	d108      	bne.n	80102ac <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801029a:	7af9      	ldrb	r1, [r7, #11]
 801029c:	233a      	movs	r3, #58	; 0x3a
 801029e:	2202      	movs	r2, #2
 80102a0:	68f8      	ldr	r0, [r7, #12]
 80102a2:	f000 fa63 	bl	801076c <SCSI_SenseCode>
    return -1;
 80102a6:	f04f 33ff 	mov.w	r3, #4294967295
 80102aa:	e04f      	b.n	801034c <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80102ac:	697a      	ldr	r2, [r7, #20]
 80102ae:	f248 0368 	movw	r3, #32872	; 0x8068
 80102b2:	4413      	add	r3, r2
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	3b01      	subs	r3, #1
 80102b8:	0e1b      	lsrs	r3, r3, #24
 80102ba:	b2da      	uxtb	r2, r3
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80102c0:	697a      	ldr	r2, [r7, #20]
 80102c2:	f248 0368 	movw	r3, #32872	; 0x8068
 80102c6:	4413      	add	r3, r2
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	3b01      	subs	r3, #1
 80102cc:	0c1b      	lsrs	r3, r3, #16
 80102ce:	b2da      	uxtb	r2, r3
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80102d4:	697a      	ldr	r2, [r7, #20]
 80102d6:	f248 0368 	movw	r3, #32872	; 0x8068
 80102da:	4413      	add	r3, r2
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	3b01      	subs	r3, #1
 80102e0:	0a1b      	lsrs	r3, r3, #8
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80102e8:	697a      	ldr	r2, [r7, #20]
 80102ea:	f248 0368 	movw	r3, #32872	; 0x8068
 80102ee:	4413      	add	r3, r2
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	3b01      	subs	r3, #1
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80102fc:	697a      	ldr	r2, [r7, #20]
 80102fe:	f248 0364 	movw	r3, #32868	; 0x8064
 8010302:	4413      	add	r3, r2
 8010304:	881b      	ldrh	r3, [r3, #0]
 8010306:	161b      	asrs	r3, r3, #24
 8010308:	b2da      	uxtb	r2, r3
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801030e:	697a      	ldr	r2, [r7, #20]
 8010310:	f248 0364 	movw	r3, #32868	; 0x8064
 8010314:	4413      	add	r3, r2
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	141b      	asrs	r3, r3, #16
 801031a:	b2da      	uxtb	r2, r3
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010320:	697a      	ldr	r2, [r7, #20]
 8010322:	f248 0364 	movw	r3, #32868	; 0x8064
 8010326:	4413      	add	r3, r2
 8010328:	881b      	ldrh	r3, [r3, #0]
 801032a:	0a1b      	lsrs	r3, r3, #8
 801032c:	b29b      	uxth	r3, r3
 801032e:	b2da      	uxtb	r2, r3
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8010334:	697a      	ldr	r2, [r7, #20]
 8010336:	f248 0364 	movw	r3, #32868	; 0x8064
 801033a:	4413      	add	r3, r2
 801033c:	881b      	ldrh	r3, [r3, #0]
 801033e:	b2da      	uxtb	r2, r3
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	2208      	movs	r2, #8
 8010348:	60da      	str	r2, [r3, #12]

  return 0;
 801034a:	2300      	movs	r3, #0

}
 801034c:	4618      	mov	r0, r3
 801034e:	371c      	adds	r7, #28
 8010350:	46bd      	mov	sp, r7
 8010352:	bd90      	pop	{r4, r7, pc}

08010354 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010354:	b590      	push	{r4, r7, lr}
 8010356:	b089      	sub	sp, #36	; 0x24
 8010358:	af00      	add	r7, sp, #0
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	460b      	mov	r3, r1
 801035e:	607a      	str	r2, [r7, #4]
 8010360:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010368:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010370:	685c      	ldr	r4, [r3, #4]
 8010372:	69ba      	ldr	r2, [r7, #24]
 8010374:	f248 0368 	movw	r3, #32872	; 0x8068
 8010378:	4413      	add	r3, r2
 801037a:	69b9      	ldr	r1, [r7, #24]
 801037c:	f248 0264 	movw	r2, #32868	; 0x8064
 8010380:	440a      	add	r2, r1
 8010382:	7af8      	ldrb	r0, [r7, #11]
 8010384:	4619      	mov	r1, r3
 8010386:	47a0      	blx	r4
 8010388:	4603      	mov	r3, r0
 801038a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801038c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d106      	bne.n	80103a2 <SCSI_ReadCapacity16+0x4e>
 8010394:	69ba      	ldr	r2, [r7, #24]
 8010396:	f248 0362 	movw	r3, #32866	; 0x8062
 801039a:	4413      	add	r3, r2
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	2b02      	cmp	r3, #2
 80103a0:	d108      	bne.n	80103b4 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80103a2:	7af9      	ldrb	r1, [r7, #11]
 80103a4:	233a      	movs	r3, #58	; 0x3a
 80103a6:	2202      	movs	r2, #2
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f000 f9df 	bl	801076c <SCSI_SenseCode>
    return -1;
 80103ae:	f04f 33ff 	mov.w	r3, #4294967295
 80103b2:	e084      	b.n	80104be <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	330a      	adds	r3, #10
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	330b      	adds	r3, #11
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80103c4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	330c      	adds	r3, #12
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80103ce:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	320d      	adds	r2, #13
 80103d4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80103d6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80103dc:	2300      	movs	r3, #0
 80103de:	77fb      	strb	r3, [r7, #31]
 80103e0:	e007      	b.n	80103f2 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 80103e2:	7ffb      	ldrb	r3, [r7, #31]
 80103e4:	69ba      	ldr	r2, [r7, #24]
 80103e6:	4413      	add	r3, r2
 80103e8:	2200      	movs	r2, #0
 80103ea:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80103ec:	7ffb      	ldrb	r3, [r7, #31]
 80103ee:	3301      	adds	r3, #1
 80103f0:	77fb      	strb	r3, [r7, #31]
 80103f2:	7ffa      	ldrb	r2, [r7, #31]
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d3f2      	bcc.n	80103e2 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80103fc:	69ba      	ldr	r2, [r7, #24]
 80103fe:	f248 0368 	movw	r3, #32872	; 0x8068
 8010402:	4413      	add	r3, r2
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3b01      	subs	r3, #1
 8010408:	0e1b      	lsrs	r3, r3, #24
 801040a:	b2da      	uxtb	r2, r3
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010410:	69ba      	ldr	r2, [r7, #24]
 8010412:	f248 0368 	movw	r3, #32872	; 0x8068
 8010416:	4413      	add	r3, r2
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	3b01      	subs	r3, #1
 801041c:	0c1b      	lsrs	r3, r3, #16
 801041e:	b2da      	uxtb	r2, r3
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010424:	69ba      	ldr	r2, [r7, #24]
 8010426:	f248 0368 	movw	r3, #32872	; 0x8068
 801042a:	4413      	add	r3, r2
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	3b01      	subs	r3, #1
 8010430:	0a1b      	lsrs	r3, r3, #8
 8010432:	b2da      	uxtb	r2, r3
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010438:	69ba      	ldr	r2, [r7, #24]
 801043a:	f248 0368 	movw	r3, #32872	; 0x8068
 801043e:	4413      	add	r3, r2
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	b2db      	uxtb	r3, r3
 8010444:	3b01      	subs	r3, #1
 8010446:	b2da      	uxtb	r2, r3
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801044c:	69ba      	ldr	r2, [r7, #24]
 801044e:	f248 0364 	movw	r3, #32868	; 0x8064
 8010452:	4413      	add	r3, r2
 8010454:	881b      	ldrh	r3, [r3, #0]
 8010456:	161b      	asrs	r3, r3, #24
 8010458:	b2da      	uxtb	r2, r3
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801045e:	69ba      	ldr	r2, [r7, #24]
 8010460:	f248 0364 	movw	r3, #32868	; 0x8064
 8010464:	4413      	add	r3, r2
 8010466:	881b      	ldrh	r3, [r3, #0]
 8010468:	141b      	asrs	r3, r3, #16
 801046a:	b2da      	uxtb	r2, r3
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010470:	69ba      	ldr	r2, [r7, #24]
 8010472:	f248 0364 	movw	r3, #32868	; 0x8064
 8010476:	4413      	add	r3, r2
 8010478:	881b      	ldrh	r3, [r3, #0]
 801047a:	0a1b      	lsrs	r3, r3, #8
 801047c:	b29b      	uxth	r3, r3
 801047e:	b2da      	uxtb	r2, r3
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8010484:	69ba      	ldr	r2, [r7, #24]
 8010486:	f248 0364 	movw	r3, #32868	; 0x8064
 801048a:	4413      	add	r3, r2
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	b2da      	uxtb	r2, r3
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	330a      	adds	r3, #10
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	330b      	adds	r3, #11
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80104a4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	330c      	adds	r3, #12
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80104ae:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	320d      	adds	r2, #13
 80104b4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80104b6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	60da      	str	r2, [r3, #12]

  return 0;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3724      	adds	r7, #36	; 0x24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd90      	pop	{r4, r7, pc}

080104c6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b088      	sub	sp, #32
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	60f8      	str	r0, [r7, #12]
 80104ce:	460b      	mov	r3, r1
 80104d0:	607a      	str	r2, [r7, #4]
 80104d2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104da:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	f107 0214 	add.w	r2, r7, #20
 80104e8:	f107 0110 	add.w	r1, r7, #16
 80104ec:	7af8      	ldrb	r0, [r7, #11]
 80104ee:	4798      	blx	r3
 80104f0:	4603      	mov	r3, r0
 80104f2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80104f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d106      	bne.n	801050a <SCSI_ReadFormatCapacity+0x44>
 80104fc:	69ba      	ldr	r2, [r7, #24]
 80104fe:	f248 0362 	movw	r3, #32866	; 0x8062
 8010502:	4413      	add	r3, r2
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	2b02      	cmp	r3, #2
 8010508:	d108      	bne.n	801051c <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801050a:	7af9      	ldrb	r1, [r7, #11]
 801050c:	233a      	movs	r3, #58	; 0x3a
 801050e:	2202      	movs	r2, #2
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f000 f92b 	bl	801076c <SCSI_SenseCode>
    return -1;
 8010516:	f04f 33ff 	mov.w	r3, #4294967295
 801051a:	e03e      	b.n	801059a <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 801051c:	2300      	movs	r3, #0
 801051e:	83fb      	strh	r3, [r7, #30]
 8010520:	e007      	b.n	8010532 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8010522:	8bfb      	ldrh	r3, [r7, #30]
 8010524:	69ba      	ldr	r2, [r7, #24]
 8010526:	4413      	add	r3, r2
 8010528:	2200      	movs	r2, #0
 801052a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801052c:	8bfb      	ldrh	r3, [r7, #30]
 801052e:	3301      	adds	r3, #1
 8010530:	83fb      	strh	r3, [r7, #30]
 8010532:	8bfb      	ldrh	r3, [r7, #30]
 8010534:	2b0b      	cmp	r3, #11
 8010536:	d9f4      	bls.n	8010522 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	2208      	movs	r2, #8
 801053c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	3b01      	subs	r3, #1
 8010542:	0e1b      	lsrs	r3, r3, #24
 8010544:	b2da      	uxtb	r2, r3
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	3b01      	subs	r3, #1
 801054e:	0c1b      	lsrs	r3, r3, #16
 8010550:	b2da      	uxtb	r2, r3
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	3b01      	subs	r3, #1
 801055a:	0a1b      	lsrs	r3, r3, #8
 801055c:	b2da      	uxtb	r2, r3
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	b2db      	uxtb	r3, r3
 8010566:	3b01      	subs	r3, #1
 8010568:	b2da      	uxtb	r2, r3
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	2202      	movs	r2, #2
 8010572:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8010574:	8abb      	ldrh	r3, [r7, #20]
 8010576:	141b      	asrs	r3, r3, #16
 8010578:	b2da      	uxtb	r2, r3
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801057e:	8abb      	ldrh	r3, [r7, #20]
 8010580:	0a1b      	lsrs	r3, r3, #8
 8010582:	b29b      	uxth	r3, r3
 8010584:	b2da      	uxtb	r2, r3
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801058a:	8abb      	ldrh	r3, [r7, #20]
 801058c:	b2da      	uxtb	r2, r3
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	220c      	movs	r2, #12
 8010596:	60da      	str	r2, [r3, #12]

  return 0;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3720      	adds	r7, #32
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
	...

080105a4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b086      	sub	sp, #24
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	460b      	mov	r3, r1
 80105ae:	607a      	str	r2, [r7, #4]
 80105b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105b8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80105ba:	2317      	movs	r3, #23
 80105bc:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	3304      	adds	r3, #4
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	8afa      	ldrh	r2, [r7, #22]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d303      	bcc.n	80105d4 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	3304      	adds	r3, #4
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80105d4:	8afb      	ldrh	r3, [r7, #22]
 80105d6:	461a      	mov	r2, r3
 80105d8:	4904      	ldr	r1, [pc, #16]	; (80105ec <SCSI_ModeSense6+0x48>)
 80105da:	6938      	ldr	r0, [r7, #16]
 80105dc:	f000 fe54 	bl	8011288 <SCSI_UpdateBotData>

  return 0;
 80105e0:	2300      	movs	r3, #0
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3718      	adds	r7, #24
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	240000c4 	.word	0x240000c4

080105f0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b086      	sub	sp, #24
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	460b      	mov	r3, r1
 80105fa:	607a      	str	r2, [r7, #4]
 80105fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010604:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8010606:	231b      	movs	r3, #27
 8010608:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	3308      	adds	r3, #8
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	b29b      	uxth	r3, r3
 8010612:	8afa      	ldrh	r2, [r7, #22]
 8010614:	429a      	cmp	r2, r3
 8010616:	d303      	bcc.n	8010620 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	3308      	adds	r3, #8
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8010620:	8afb      	ldrh	r3, [r7, #22]
 8010622:	461a      	mov	r2, r3
 8010624:	4904      	ldr	r1, [pc, #16]	; (8010638 <SCSI_ModeSense10+0x48>)
 8010626:	6938      	ldr	r0, [r7, #16]
 8010628:	f000 fe2e 	bl	8011288 <SCSI_UpdateBotData>

  return 0;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3718      	adds	r7, #24
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	240000dc 	.word	0x240000dc

0801063c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	460b      	mov	r3, r1
 8010646:	607a      	str	r2, [r7, #4]
 8010648:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010650:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8010652:	693a      	ldr	r2, [r7, #16]
 8010654:	f248 0318 	movw	r3, #32792	; 0x8018
 8010658:	4413      	add	r3, r2
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d10c      	bne.n	801067a <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010660:	693a      	ldr	r2, [r7, #16]
 8010662:	f248 031d 	movw	r3, #32797	; 0x801d
 8010666:	4413      	add	r3, r2
 8010668:	7819      	ldrb	r1, [r3, #0]
 801066a:	2320      	movs	r3, #32
 801066c:	2205      	movs	r2, #5
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f000 f87c 	bl	801076c <SCSI_SenseCode>
    return -1;
 8010674:	f04f 33ff 	mov.w	r3, #4294967295
 8010678:	e074      	b.n	8010764 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801067a:	2300      	movs	r3, #0
 801067c:	75fb      	strb	r3, [r7, #23]
 801067e:	e007      	b.n	8010690 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8010680:	7dfb      	ldrb	r3, [r7, #23]
 8010682:	693a      	ldr	r2, [r7, #16]
 8010684:	4413      	add	r3, r2
 8010686:	2200      	movs	r2, #0
 8010688:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801068a:	7dfb      	ldrb	r3, [r7, #23]
 801068c:	3301      	adds	r3, #1
 801068e:	75fb      	strb	r3, [r7, #23]
 8010690:	7dfb      	ldrb	r3, [r7, #23]
 8010692:	2b11      	cmp	r3, #17
 8010694:	d9f4      	bls.n	8010680 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	2270      	movs	r2, #112	; 0x70
 801069a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	220c      	movs	r2, #12
 80106a0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	f248 0360 	movw	r3, #32864	; 0x8060
 80106a8:	4413      	add	r3, r2
 80106aa:	781a      	ldrb	r2, [r3, #0]
 80106ac:	6939      	ldr	r1, [r7, #16]
 80106ae:	f248 0361 	movw	r3, #32865	; 0x8061
 80106b2:	440b      	add	r3, r1
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d045      	beq.n	8010746 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80106ba:	693a      	ldr	r2, [r7, #16]
 80106bc:	f248 0360 	movw	r3, #32864	; 0x8060
 80106c0:	4413      	add	r3, r2
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	4619      	mov	r1, r3
 80106c6:	693a      	ldr	r2, [r7, #16]
 80106c8:	f241 0308 	movw	r3, #4104	; 0x1008
 80106cc:	440b      	add	r3, r1
 80106ce:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80106d6:	693a      	ldr	r2, [r7, #16]
 80106d8:	f248 0360 	movw	r3, #32864	; 0x8060
 80106dc:	4413      	add	r3, r2
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	4619      	mov	r1, r3
 80106e2:	693a      	ldr	r2, [r7, #16]
 80106e4:	f241 0308 	movw	r3, #4104	; 0x1008
 80106e8:	440b      	add	r3, r1
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	4413      	add	r3, r2
 80106ee:	791a      	ldrb	r2, [r3, #4]
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80106f4:	693a      	ldr	r2, [r7, #16]
 80106f6:	f248 0360 	movw	r3, #32864	; 0x8060
 80106fa:	4413      	add	r3, r2
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	4619      	mov	r1, r3
 8010700:	693a      	ldr	r2, [r7, #16]
 8010702:	f241 0308 	movw	r3, #4104	; 0x1008
 8010706:	440b      	add	r3, r1
 8010708:	00db      	lsls	r3, r3, #3
 801070a:	4413      	add	r3, r2
 801070c:	795a      	ldrb	r2, [r3, #5]
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8010712:	693a      	ldr	r2, [r7, #16]
 8010714:	f248 0360 	movw	r3, #32864	; 0x8060
 8010718:	4413      	add	r3, r2
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	3301      	adds	r3, #1
 801071e:	b2d9      	uxtb	r1, r3
 8010720:	693a      	ldr	r2, [r7, #16]
 8010722:	f248 0360 	movw	r3, #32864	; 0x8060
 8010726:	4413      	add	r3, r2
 8010728:	460a      	mov	r2, r1
 801072a:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801072c:	693a      	ldr	r2, [r7, #16]
 801072e:	f248 0360 	movw	r3, #32864	; 0x8060
 8010732:	4413      	add	r3, r2
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	2b04      	cmp	r3, #4
 8010738:	d105      	bne.n	8010746 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 801073a:	693a      	ldr	r2, [r7, #16]
 801073c:	f248 0360 	movw	r3, #32864	; 0x8060
 8010740:	4413      	add	r3, r2
 8010742:	2200      	movs	r2, #0
 8010744:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2212      	movs	r2, #18
 801074a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	3304      	adds	r3, #4
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	2b12      	cmp	r3, #18
 8010754:	d805      	bhi.n	8010762 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	3304      	adds	r3, #4
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	461a      	mov	r2, r3
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8010762:	2300      	movs	r3, #0
}
 8010764:	4618      	mov	r0, r3
 8010766:	3718      	adds	r7, #24
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801076c:	b480      	push	{r7}
 801076e:	b085      	sub	sp, #20
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	4608      	mov	r0, r1
 8010776:	4611      	mov	r1, r2
 8010778:	461a      	mov	r2, r3
 801077a:	4603      	mov	r3, r0
 801077c:	70fb      	strb	r3, [r7, #3]
 801077e:	460b      	mov	r3, r1
 8010780:	70bb      	strb	r3, [r7, #2]
 8010782:	4613      	mov	r3, r2
 8010784:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801078c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	f248 0361 	movw	r3, #32865	; 0x8061
 8010794:	4413      	add	r3, r2
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	4619      	mov	r1, r3
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	f241 0308 	movw	r3, #4104	; 0x1008
 80107a0:	440b      	add	r3, r1
 80107a2:	78b9      	ldrb	r1, [r7, #2]
 80107a4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80107a8:	68fa      	ldr	r2, [r7, #12]
 80107aa:	f248 0361 	movw	r3, #32865	; 0x8061
 80107ae:	4413      	add	r3, r2
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	4619      	mov	r1, r3
 80107b4:	68fa      	ldr	r2, [r7, #12]
 80107b6:	f241 0308 	movw	r3, #4104	; 0x1008
 80107ba:	440b      	add	r3, r1
 80107bc:	00db      	lsls	r3, r3, #3
 80107be:	4413      	add	r3, r2
 80107c0:	787a      	ldrb	r2, [r7, #1]
 80107c2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	f248 0361 	movw	r3, #32865	; 0x8061
 80107ca:	4413      	add	r3, r2
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	4619      	mov	r1, r3
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	f241 0308 	movw	r3, #4104	; 0x1008
 80107d6:	440b      	add	r3, r1
 80107d8:	00db      	lsls	r3, r3, #3
 80107da:	4413      	add	r3, r2
 80107dc:	2200      	movs	r2, #0
 80107de:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80107e0:	68fa      	ldr	r2, [r7, #12]
 80107e2:	f248 0361 	movw	r3, #32865	; 0x8061
 80107e6:	4413      	add	r3, r2
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	3301      	adds	r3, #1
 80107ec:	b2d9      	uxtb	r1, r3
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	f248 0361 	movw	r3, #32865	; 0x8061
 80107f4:	4413      	add	r3, r2
 80107f6:	460a      	mov	r2, r1
 80107f8:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80107fa:	68fa      	ldr	r2, [r7, #12]
 80107fc:	f248 0361 	movw	r3, #32865	; 0x8061
 8010800:	4413      	add	r3, r2
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b04      	cmp	r3, #4
 8010806:	d105      	bne.n	8010814 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8010808:	68fa      	ldr	r2, [r7, #12]
 801080a:	f248 0361 	movw	r3, #32865	; 0x8061
 801080e:	4413      	add	r3, r2
 8010810:	2200      	movs	r2, #0
 8010812:	701a      	strb	r2, [r3, #0]
  }
}
 8010814:	bf00      	nop
 8010816:	3714      	adds	r7, #20
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b086      	sub	sp, #24
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	460b      	mov	r3, r1
 801082a:	607a      	str	r2, [r7, #4]
 801082c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010834:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	f248 0362 	movw	r3, #32866	; 0x8062
 801083c:	4413      	add	r3, r2
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	2b01      	cmp	r3, #1
 8010842:	d10f      	bne.n	8010864 <SCSI_StartStopUnit+0x44>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	3304      	adds	r3, #4
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	f003 0303 	and.w	r3, r3, #3
 801084e:	2b02      	cmp	r3, #2
 8010850:	d108      	bne.n	8010864 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010852:	7af9      	ldrb	r1, [r7, #11]
 8010854:	2324      	movs	r3, #36	; 0x24
 8010856:	2205      	movs	r2, #5
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f7ff ff87 	bl	801076c <SCSI_SenseCode>

    return -1;
 801085e:	f04f 33ff 	mov.w	r3, #4294967295
 8010862:	e02c      	b.n	80108be <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	3304      	adds	r3, #4
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	f003 0303 	and.w	r3, r3, #3
 801086e:	2b01      	cmp	r3, #1
 8010870:	d106      	bne.n	8010880 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010872:	697a      	ldr	r2, [r7, #20]
 8010874:	f248 0362 	movw	r3, #32866	; 0x8062
 8010878:	4413      	add	r3, r2
 801087a:	2200      	movs	r2, #0
 801087c:	701a      	strb	r2, [r3, #0]
 801087e:	e01a      	b.n	80108b6 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	3304      	adds	r3, #4
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	f003 0303 	and.w	r3, r3, #3
 801088a:	2b02      	cmp	r3, #2
 801088c:	d106      	bne.n	801089c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801088e:	697a      	ldr	r2, [r7, #20]
 8010890:	f248 0362 	movw	r3, #32866	; 0x8062
 8010894:	4413      	add	r3, r2
 8010896:	2202      	movs	r2, #2
 8010898:	701a      	strb	r2, [r3, #0]
 801089a:	e00c      	b.n	80108b6 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	3304      	adds	r3, #4
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	f003 0303 	and.w	r3, r3, #3
 80108a6:	2b03      	cmp	r3, #3
 80108a8:	d105      	bne.n	80108b6 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80108aa:	697a      	ldr	r2, [r7, #20]
 80108ac:	f248 0362 	movw	r3, #32866	; 0x8062
 80108b0:	4413      	add	r3, r2
 80108b2:	2200      	movs	r2, #0
 80108b4:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2200      	movs	r2, #0
 80108ba:	60da      	str	r2, [r3, #12]

  return 0;
 80108bc:	2300      	movs	r3, #0
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3718      	adds	r7, #24
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80108c6:	b480      	push	{r7}
 80108c8:	b087      	sub	sp, #28
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	60f8      	str	r0, [r7, #12]
 80108ce:	460b      	mov	r3, r1
 80108d0:	607a      	str	r2, [r7, #4]
 80108d2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108da:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	3304      	adds	r3, #4
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80108e6:	697a      	ldr	r2, [r7, #20]
 80108e8:	f248 0362 	movw	r3, #32866	; 0x8062
 80108ec:	4413      	add	r3, r2
 80108ee:	2200      	movs	r2, #0
 80108f0:	701a      	strb	r2, [r3, #0]
 80108f2:	e005      	b.n	8010900 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	f248 0362 	movw	r3, #32866	; 0x8062
 80108fa:	4413      	add	r3, r2
 80108fc:	2201      	movs	r2, #1
 80108fe:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	2200      	movs	r2, #0
 8010904:	60da      	str	r2, [r3, #12]

  return 0;
 8010906:	2300      	movs	r3, #0
}
 8010908:	4618      	mov	r0, r3
 801090a:	371c      	adds	r7, #28
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b086      	sub	sp, #24
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	460b      	mov	r3, r1
 801091e:	607a      	str	r2, [r7, #4]
 8010920:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010928:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	7a1b      	ldrb	r3, [r3, #8]
 801092e:	2b00      	cmp	r3, #0
 8010930:	f040 8094 	bne.w	8010a5c <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8010934:	697a      	ldr	r2, [r7, #20]
 8010936:	f248 031c 	movw	r3, #32796	; 0x801c
 801093a:	4413      	add	r3, r2
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	b25b      	sxtb	r3, r3
 8010940:	2b00      	cmp	r3, #0
 8010942:	db0c      	blt.n	801095e <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010944:	697a      	ldr	r2, [r7, #20]
 8010946:	f248 031d 	movw	r3, #32797	; 0x801d
 801094a:	4413      	add	r3, r2
 801094c:	7819      	ldrb	r1, [r3, #0]
 801094e:	2320      	movs	r3, #32
 8010950:	2205      	movs	r2, #5
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f7ff ff0a 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010958:	f04f 33ff 	mov.w	r3, #4294967295
 801095c:	e088      	b.n	8010a70 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801095e:	697a      	ldr	r2, [r7, #20]
 8010960:	f248 0362 	movw	r3, #32866	; 0x8062
 8010964:	4413      	add	r3, r2
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	2b02      	cmp	r3, #2
 801096a:	d108      	bne.n	801097e <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801096c:	7af9      	ldrb	r1, [r7, #11]
 801096e:	233a      	movs	r3, #58	; 0x3a
 8010970:	2202      	movs	r2, #2
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f7ff fefa 	bl	801076c <SCSI_SenseCode>

      return -1;
 8010978:	f04f 33ff 	mov.w	r3, #4294967295
 801097c:	e078      	b.n	8010a70 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	7afa      	ldrb	r2, [r7, #11]
 8010988:	4610      	mov	r0, r2
 801098a:	4798      	blx	r3
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d008      	beq.n	80109a4 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010992:	7af9      	ldrb	r1, [r7, #11]
 8010994:	233a      	movs	r3, #58	; 0x3a
 8010996:	2202      	movs	r2, #2
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	f7ff fee7 	bl	801076c <SCSI_SenseCode>
      return -1;
 801099e:	f04f 33ff 	mov.w	r3, #4294967295
 80109a2:	e065      	b.n	8010a70 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	3302      	adds	r3, #2
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	3303      	adds	r3, #3
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80109b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	3304      	adds	r3, #4
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80109be:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	3205      	adds	r2, #5
 80109c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80109c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80109c8:	6979      	ldr	r1, [r7, #20]
 80109ca:	f248 036c 	movw	r3, #32876	; 0x806c
 80109ce:	440b      	add	r3, r1
 80109d0:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	3307      	adds	r3, #7
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	021b      	lsls	r3, r3, #8
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	3208      	adds	r2, #8
 80109de:	7812      	ldrb	r2, [r2, #0]
 80109e0:	431a      	orrs	r2, r3
 80109e2:	6979      	ldr	r1, [r7, #20]
 80109e4:	f248 0370 	movw	r3, #32880	; 0x8070
 80109e8:	440b      	add	r3, r1
 80109ea:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80109ec:	697a      	ldr	r2, [r7, #20]
 80109ee:	f248 036c 	movw	r3, #32876	; 0x806c
 80109f2:	4413      	add	r3, r2
 80109f4:	6818      	ldr	r0, [r3, #0]
 80109f6:	697a      	ldr	r2, [r7, #20]
 80109f8:	f248 0370 	movw	r3, #32880	; 0x8070
 80109fc:	4413      	add	r3, r2
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	7af9      	ldrb	r1, [r7, #11]
 8010a02:	4602      	mov	r2, r0
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f000 faeb 	bl	8010fe0 <SCSI_CheckAddressRange>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	da02      	bge.n	8010a16 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010a10:	f04f 33ff 	mov.w	r3, #4294967295
 8010a14:	e02c      	b.n	8010a70 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8010a16:	697a      	ldr	r2, [r7, #20]
 8010a18:	f248 0318 	movw	r3, #32792	; 0x8018
 8010a1c:	4413      	add	r3, r2
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	6979      	ldr	r1, [r7, #20]
 8010a22:	f248 0370 	movw	r3, #32880	; 0x8070
 8010a26:	440b      	add	r3, r1
 8010a28:	6819      	ldr	r1, [r3, #0]
 8010a2a:	6978      	ldr	r0, [r7, #20]
 8010a2c:	f248 0364 	movw	r3, #32868	; 0x8064
 8010a30:	4403      	add	r3, r0
 8010a32:	881b      	ldrh	r3, [r3, #0]
 8010a34:	fb03 f301 	mul.w	r3, r3, r1
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d00c      	beq.n	8010a56 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010a3c:	697a      	ldr	r2, [r7, #20]
 8010a3e:	f248 031d 	movw	r3, #32797	; 0x801d
 8010a42:	4413      	add	r3, r2
 8010a44:	7819      	ldrb	r1, [r3, #0]
 8010a46:	2320      	movs	r3, #32
 8010a48:	2205      	movs	r2, #5
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f7ff fe8e 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010a50:	f04f 33ff 	mov.w	r3, #4294967295
 8010a54:	e00c      	b.n	8010a70 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	2202      	movs	r2, #2
 8010a5a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010a62:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8010a64:	7afb      	ldrb	r3, [r7, #11]
 8010a66:	4619      	mov	r1, r3
 8010a68:	68f8      	ldr	r0, [r7, #12]
 8010a6a:	f000 fadd 	bl	8011028 <SCSI_ProcessRead>
 8010a6e:	4603      	mov	r3, r0
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3718      	adds	r7, #24
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b086      	sub	sp, #24
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	460b      	mov	r3, r1
 8010a82:	607a      	str	r2, [r7, #4]
 8010a84:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a8c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	7a1b      	ldrb	r3, [r3, #8]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f040 809e 	bne.w	8010bd4 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8010a98:	697a      	ldr	r2, [r7, #20]
 8010a9a:	f248 031c 	movw	r3, #32796	; 0x801c
 8010a9e:	4413      	add	r3, r2
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	b25b      	sxtb	r3, r3
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	db0c      	blt.n	8010ac2 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010aa8:	697a      	ldr	r2, [r7, #20]
 8010aaa:	f248 031d 	movw	r3, #32797	; 0x801d
 8010aae:	4413      	add	r3, r2
 8010ab0:	7819      	ldrb	r1, [r3, #0]
 8010ab2:	2320      	movs	r3, #32
 8010ab4:	2205      	movs	r2, #5
 8010ab6:	68f8      	ldr	r0, [r7, #12]
 8010ab8:	f7ff fe58 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010abc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac0:	e092      	b.n	8010be8 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010ac2:	697a      	ldr	r2, [r7, #20]
 8010ac4:	f248 0362 	movw	r3, #32866	; 0x8062
 8010ac8:	4413      	add	r3, r2
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	2b02      	cmp	r3, #2
 8010ace:	d108      	bne.n	8010ae2 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010ad0:	7af9      	ldrb	r1, [r7, #11]
 8010ad2:	233a      	movs	r3, #58	; 0x3a
 8010ad4:	2202      	movs	r2, #2
 8010ad6:	68f8      	ldr	r0, [r7, #12]
 8010ad8:	f7ff fe48 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010adc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae0:	e082      	b.n	8010be8 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	7afa      	ldrb	r2, [r7, #11]
 8010aec:	4610      	mov	r0, r2
 8010aee:	4798      	blx	r3
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d008      	beq.n	8010b08 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010af6:	7af9      	ldrb	r1, [r7, #11]
 8010af8:	233a      	movs	r3, #58	; 0x3a
 8010afa:	2202      	movs	r2, #2
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	f7ff fe35 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010b02:	f04f 33ff 	mov.w	r3, #4294967295
 8010b06:	e06f      	b.n	8010be8 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	3302      	adds	r3, #2
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	3303      	adds	r3, #3
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010b18:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	3304      	adds	r3, #4
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010b22:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	3205      	adds	r2, #5
 8010b28:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8010b2a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010b2c:	6979      	ldr	r1, [r7, #20]
 8010b2e:	f248 036c 	movw	r3, #32876	; 0x806c
 8010b32:	440b      	add	r3, r1
 8010b34:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	3306      	adds	r3, #6
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	3307      	adds	r3, #7
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010b46:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	3308      	adds	r3, #8
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8010b50:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	3209      	adds	r2, #9
 8010b56:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010b58:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010b5a:	6979      	ldr	r1, [r7, #20]
 8010b5c:	f248 0370 	movw	r3, #32880	; 0x8070
 8010b60:	440b      	add	r3, r1
 8010b62:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010b64:	697a      	ldr	r2, [r7, #20]
 8010b66:	f248 036c 	movw	r3, #32876	; 0x806c
 8010b6a:	4413      	add	r3, r2
 8010b6c:	6818      	ldr	r0, [r3, #0]
 8010b6e:	697a      	ldr	r2, [r7, #20]
 8010b70:	f248 0370 	movw	r3, #32880	; 0x8070
 8010b74:	4413      	add	r3, r2
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	7af9      	ldrb	r1, [r7, #11]
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f000 fa2f 	bl	8010fe0 <SCSI_CheckAddressRange>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	da02      	bge.n	8010b8e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010b88:	f04f 33ff 	mov.w	r3, #4294967295
 8010b8c:	e02c      	b.n	8010be8 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8010b8e:	697a      	ldr	r2, [r7, #20]
 8010b90:	f248 0318 	movw	r3, #32792	; 0x8018
 8010b94:	4413      	add	r3, r2
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	6979      	ldr	r1, [r7, #20]
 8010b9a:	f248 0370 	movw	r3, #32880	; 0x8070
 8010b9e:	440b      	add	r3, r1
 8010ba0:	6819      	ldr	r1, [r3, #0]
 8010ba2:	6978      	ldr	r0, [r7, #20]
 8010ba4:	f248 0364 	movw	r3, #32868	; 0x8064
 8010ba8:	4403      	add	r3, r0
 8010baa:	881b      	ldrh	r3, [r3, #0]
 8010bac:	fb03 f301 	mul.w	r3, r3, r1
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d00c      	beq.n	8010bce <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010bb4:	697a      	ldr	r2, [r7, #20]
 8010bb6:	f248 031d 	movw	r3, #32797	; 0x801d
 8010bba:	4413      	add	r3, r2
 8010bbc:	7819      	ldrb	r1, [r3, #0]
 8010bbe:	2320      	movs	r3, #32
 8010bc0:	2205      	movs	r2, #5
 8010bc2:	68f8      	ldr	r0, [r7, #12]
 8010bc4:	f7ff fdd2 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bcc:	e00c      	b.n	8010be8 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	2202      	movs	r2, #2
 8010bd2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010bda:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8010bdc:	7afb      	ldrb	r3, [r7, #11]
 8010bde:	4619      	mov	r1, r3
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f000 fa21 	bl	8011028 <SCSI_ProcessRead>
 8010be6:	4603      	mov	r3, r0
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3718      	adds	r7, #24
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b086      	sub	sp, #24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	607a      	str	r2, [r7, #4]
 8010bfc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c04:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	7a1b      	ldrb	r3, [r3, #8]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f040 80be 	bne.w	8010d8c <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010c10:	697a      	ldr	r2, [r7, #20]
 8010c12:	f248 0318 	movw	r3, #32792	; 0x8018
 8010c16:	4413      	add	r3, r2
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d10c      	bne.n	8010c38 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010c1e:	697a      	ldr	r2, [r7, #20]
 8010c20:	f248 031d 	movw	r3, #32797	; 0x801d
 8010c24:	4413      	add	r3, r2
 8010c26:	7819      	ldrb	r1, [r3, #0]
 8010c28:	2320      	movs	r3, #32
 8010c2a:	2205      	movs	r2, #5
 8010c2c:	68f8      	ldr	r0, [r7, #12]
 8010c2e:	f7ff fd9d 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010c32:	f04f 33ff 	mov.w	r3, #4294967295
 8010c36:	e0af      	b.n	8010d98 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8010c38:	697a      	ldr	r2, [r7, #20]
 8010c3a:	f248 031c 	movw	r3, #32796	; 0x801c
 8010c3e:	4413      	add	r3, r2
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	b25b      	sxtb	r3, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	da0c      	bge.n	8010c62 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010c48:	697a      	ldr	r2, [r7, #20]
 8010c4a:	f248 031d 	movw	r3, #32797	; 0x801d
 8010c4e:	4413      	add	r3, r2
 8010c50:	7819      	ldrb	r1, [r3, #0]
 8010c52:	2320      	movs	r3, #32
 8010c54:	2205      	movs	r2, #5
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f7ff fd88 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c60:	e09a      	b.n	8010d98 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	7afa      	ldrb	r2, [r7, #11]
 8010c6c:	4610      	mov	r0, r2
 8010c6e:	4798      	blx	r3
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d008      	beq.n	8010c88 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010c76:	7af9      	ldrb	r1, [r7, #11]
 8010c78:	233a      	movs	r3, #58	; 0x3a
 8010c7a:	2202      	movs	r2, #2
 8010c7c:	68f8      	ldr	r0, [r7, #12]
 8010c7e:	f7ff fd75 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010c82:	f04f 33ff 	mov.w	r3, #4294967295
 8010c86:	e087      	b.n	8010d98 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	7afa      	ldrb	r2, [r7, #11]
 8010c92:	4610      	mov	r0, r2
 8010c94:	4798      	blx	r3
 8010c96:	4603      	mov	r3, r0
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d008      	beq.n	8010cae <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010c9c:	7af9      	ldrb	r1, [r7, #11]
 8010c9e:	2327      	movs	r3, #39	; 0x27
 8010ca0:	2202      	movs	r2, #2
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	f7ff fd62 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cac:	e074      	b.n	8010d98 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	3302      	adds	r3, #2
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	3303      	adds	r3, #3
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010cbe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	3304      	adds	r3, #4
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010cc8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	3205      	adds	r2, #5
 8010cce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010cd0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010cd2:	6979      	ldr	r1, [r7, #20]
 8010cd4:	f248 036c 	movw	r3, #32876	; 0x806c
 8010cd8:	440b      	add	r3, r1
 8010cda:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	3307      	adds	r3, #7
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	3208      	adds	r2, #8
 8010ce8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010cea:	431a      	orrs	r2, r3
 8010cec:	6979      	ldr	r1, [r7, #20]
 8010cee:	f248 0370 	movw	r3, #32880	; 0x8070
 8010cf2:	440b      	add	r3, r1
 8010cf4:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010cf6:	697a      	ldr	r2, [r7, #20]
 8010cf8:	f248 036c 	movw	r3, #32876	; 0x806c
 8010cfc:	4413      	add	r3, r2
 8010cfe:	6818      	ldr	r0, [r3, #0]
 8010d00:	697a      	ldr	r2, [r7, #20]
 8010d02:	f248 0370 	movw	r3, #32880	; 0x8070
 8010d06:	4413      	add	r3, r2
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	7af9      	ldrb	r1, [r7, #11]
 8010d0c:	4602      	mov	r2, r0
 8010d0e:	68f8      	ldr	r0, [r7, #12]
 8010d10:	f000 f966 	bl	8010fe0 <SCSI_CheckAddressRange>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	da02      	bge.n	8010d20 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d1e:	e03b      	b.n	8010d98 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010d20:	697a      	ldr	r2, [r7, #20]
 8010d22:	f248 0370 	movw	r3, #32880	; 0x8070
 8010d26:	4413      	add	r3, r2
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	6979      	ldr	r1, [r7, #20]
 8010d2c:	f248 0364 	movw	r3, #32868	; 0x8064
 8010d30:	440b      	add	r3, r1
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	fb03 f302 	mul.w	r3, r3, r2
 8010d38:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8010d3a:	697a      	ldr	r2, [r7, #20]
 8010d3c:	f248 0318 	movw	r3, #32792	; 0x8018
 8010d40:	4413      	add	r3, r2
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	693a      	ldr	r2, [r7, #16]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d00c      	beq.n	8010d64 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010d4a:	697a      	ldr	r2, [r7, #20]
 8010d4c:	f248 031d 	movw	r3, #32797	; 0x801d
 8010d50:	4413      	add	r3, r2
 8010d52:	7819      	ldrb	r1, [r3, #0]
 8010d54:	2320      	movs	r3, #32
 8010d56:	2205      	movs	r2, #5
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f7ff fd07 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d62:	e019      	b.n	8010d98 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d6a:	bf28      	it	cs
 8010d6c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8010d70:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	2201      	movs	r2, #1
 8010d76:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	f103 0210 	add.w	r2, r3, #16
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	2101      	movs	r1, #1
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	f004 fb19 	bl	80153ba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	e005      	b.n	8010d98 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8010d8c:	7afb      	ldrb	r3, [r7, #11]
 8010d8e:	4619      	mov	r1, r3
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f000 f9d7 	bl	8011144 <SCSI_ProcessWrite>
 8010d96:	4603      	mov	r3, r0
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3718      	adds	r7, #24
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b086      	sub	sp, #24
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	60f8      	str	r0, [r7, #12]
 8010da8:	460b      	mov	r3, r1
 8010daa:	607a      	str	r2, [r7, #4]
 8010dac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010db4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	7a1b      	ldrb	r3, [r3, #8]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f040 80ce 	bne.w	8010f5c <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010dc0:	697a      	ldr	r2, [r7, #20]
 8010dc2:	f248 0318 	movw	r3, #32792	; 0x8018
 8010dc6:	4413      	add	r3, r2
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d10c      	bne.n	8010de8 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010dce:	697a      	ldr	r2, [r7, #20]
 8010dd0:	f248 031d 	movw	r3, #32797	; 0x801d
 8010dd4:	4413      	add	r3, r2
 8010dd6:	7819      	ldrb	r1, [r3, #0]
 8010dd8:	2320      	movs	r3, #32
 8010dda:	2205      	movs	r2, #5
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f7ff fcc5 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010de2:	f04f 33ff 	mov.w	r3, #4294967295
 8010de6:	e0bf      	b.n	8010f68 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8010de8:	697a      	ldr	r2, [r7, #20]
 8010dea:	f248 031c 	movw	r3, #32796	; 0x801c
 8010dee:	4413      	add	r3, r2
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	b25b      	sxtb	r3, r3
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	da0c      	bge.n	8010e12 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	f248 031d 	movw	r3, #32797	; 0x801d
 8010dfe:	4413      	add	r3, r2
 8010e00:	7819      	ldrb	r1, [r3, #0]
 8010e02:	2320      	movs	r3, #32
 8010e04:	2205      	movs	r2, #5
 8010e06:	68f8      	ldr	r0, [r7, #12]
 8010e08:	f7ff fcb0 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e10:	e0aa      	b.n	8010f68 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	7afa      	ldrb	r2, [r7, #11]
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	4798      	blx	r3
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d00b      	beq.n	8010e3e <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010e26:	7af9      	ldrb	r1, [r7, #11]
 8010e28:	233a      	movs	r3, #58	; 0x3a
 8010e2a:	2202      	movs	r2, #2
 8010e2c:	68f8      	ldr	r0, [r7, #12]
 8010e2e:	f7ff fc9d 	bl	801076c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	2205      	movs	r2, #5
 8010e36:	721a      	strb	r2, [r3, #8]
      return -1;
 8010e38:	f04f 33ff 	mov.w	r3, #4294967295
 8010e3c:	e094      	b.n	8010f68 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	7afa      	ldrb	r2, [r7, #11]
 8010e48:	4610      	mov	r0, r2
 8010e4a:	4798      	blx	r3
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d00b      	beq.n	8010e6a <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010e52:	7af9      	ldrb	r1, [r7, #11]
 8010e54:	2327      	movs	r3, #39	; 0x27
 8010e56:	2202      	movs	r2, #2
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f7ff fc87 	bl	801076c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	2205      	movs	r2, #5
 8010e62:	721a      	strb	r2, [r3, #8]
      return -1;
 8010e64:	f04f 33ff 	mov.w	r3, #4294967295
 8010e68:	e07e      	b.n	8010f68 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	3302      	adds	r3, #2
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	3303      	adds	r3, #3
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010e7a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	3304      	adds	r3, #4
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010e84:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	3205      	adds	r2, #5
 8010e8a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010e8c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010e8e:	6979      	ldr	r1, [r7, #20]
 8010e90:	f248 036c 	movw	r3, #32876	; 0x806c
 8010e94:	440b      	add	r3, r1
 8010e96:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	3306      	adds	r3, #6
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	3307      	adds	r3, #7
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010ea8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	3308      	adds	r3, #8
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8010eb2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	3209      	adds	r2, #9
 8010eb8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010eba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010ebc:	6979      	ldr	r1, [r7, #20]
 8010ebe:	f248 0370 	movw	r3, #32880	; 0x8070
 8010ec2:	440b      	add	r3, r1
 8010ec4:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	f248 036c 	movw	r3, #32876	; 0x806c
 8010ecc:	4413      	add	r3, r2
 8010ece:	6818      	ldr	r0, [r3, #0]
 8010ed0:	697a      	ldr	r2, [r7, #20]
 8010ed2:	f248 0370 	movw	r3, #32880	; 0x8070
 8010ed6:	4413      	add	r3, r2
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	7af9      	ldrb	r1, [r7, #11]
 8010edc:	4602      	mov	r2, r0
 8010ede:	68f8      	ldr	r0, [r7, #12]
 8010ee0:	f000 f87e 	bl	8010fe0 <SCSI_CheckAddressRange>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	da02      	bge.n	8010ef0 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010eea:	f04f 33ff 	mov.w	r3, #4294967295
 8010eee:	e03b      	b.n	8010f68 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010ef0:	697a      	ldr	r2, [r7, #20]
 8010ef2:	f248 0370 	movw	r3, #32880	; 0x8070
 8010ef6:	4413      	add	r3, r2
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	6979      	ldr	r1, [r7, #20]
 8010efc:	f248 0364 	movw	r3, #32868	; 0x8064
 8010f00:	440b      	add	r3, r1
 8010f02:	881b      	ldrh	r3, [r3, #0]
 8010f04:	fb03 f302 	mul.w	r3, r3, r2
 8010f08:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8010f0a:	697a      	ldr	r2, [r7, #20]
 8010f0c:	f248 0318 	movw	r3, #32792	; 0x8018
 8010f10:	4413      	add	r3, r2
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	693a      	ldr	r2, [r7, #16]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d00c      	beq.n	8010f34 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010f1a:	697a      	ldr	r2, [r7, #20]
 8010f1c:	f248 031d 	movw	r3, #32797	; 0x801d
 8010f20:	4413      	add	r3, r2
 8010f22:	7819      	ldrb	r1, [r3, #0]
 8010f24:	2320      	movs	r3, #32
 8010f26:	2205      	movs	r2, #5
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	f7ff fc1f 	bl	801076c <SCSI_SenseCode>
      return -1;
 8010f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f32:	e019      	b.n	8010f68 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f3a:	bf28      	it	cs
 8010f3c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8010f40:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	2201      	movs	r2, #1
 8010f46:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	f103 0210 	add.w	r2, r3, #16
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	2101      	movs	r1, #1
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f004 fa31 	bl	80153ba <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	e005      	b.n	8010f68 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8010f5c:	7afb      	ldrb	r3, [r7, #11]
 8010f5e:	4619      	mov	r1, r3
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f000 f8ef 	bl	8011144 <SCSI_ProcessWrite>
 8010f66:	4603      	mov	r3, r0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3718      	adds	r7, #24
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b086      	sub	sp, #24
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	60f8      	str	r0, [r7, #12]
 8010f78:	460b      	mov	r3, r1
 8010f7a:	607a      	str	r2, [r7, #4]
 8010f7c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f84:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	f003 0302 	and.w	r3, r3, #2
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d008      	beq.n	8010fa6 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010f94:	7af9      	ldrb	r1, [r7, #11]
 8010f96:	2324      	movs	r3, #36	; 0x24
 8010f98:	2205      	movs	r2, #5
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f7ff fbe6 	bl	801076c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8010fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa4:	e018      	b.n	8010fd8 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8010fa6:	697a      	ldr	r2, [r7, #20]
 8010fa8:	f248 036c 	movw	r3, #32876	; 0x806c
 8010fac:	4413      	add	r3, r2
 8010fae:	6818      	ldr	r0, [r3, #0]
 8010fb0:	697a      	ldr	r2, [r7, #20]
 8010fb2:	f248 0370 	movw	r3, #32880	; 0x8070
 8010fb6:	4413      	add	r3, r2
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	7af9      	ldrb	r1, [r7, #11]
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f000 f80e 	bl	8010fe0 <SCSI_CheckAddressRange>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	da02      	bge.n	8010fd0 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8010fca:	f04f 33ff 	mov.w	r3, #4294967295
 8010fce:	e003      	b.n	8010fd8 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	60da      	str	r2, [r3, #12]

  return 0;
 8010fd6:	2300      	movs	r3, #0
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3718      	adds	r7, #24
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b086      	sub	sp, #24
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	607a      	str	r2, [r7, #4]
 8010fea:	603b      	str	r3, [r7, #0]
 8010fec:	460b      	mov	r3, r1
 8010fee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ff6:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	441a      	add	r2, r3
 8010ffe:	6979      	ldr	r1, [r7, #20]
 8011000:	f248 0368 	movw	r3, #32872	; 0x8068
 8011004:	440b      	add	r3, r1
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	429a      	cmp	r2, r3
 801100a:	d908      	bls.n	801101e <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801100c:	7af9      	ldrb	r1, [r7, #11]
 801100e:	2321      	movs	r3, #33	; 0x21
 8011010:	2205      	movs	r2, #5
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff fbaa 	bl	801076c <SCSI_SenseCode>
    return -1;
 8011018:	f04f 33ff 	mov.w	r3, #4294967295
 801101c:	e000      	b.n	8011020 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 801101e:	2300      	movs	r3, #0
}
 8011020:	4618      	mov	r0, r3
 8011022:	3718      	adds	r7, #24
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011028:	b5b0      	push	{r4, r5, r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801103a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801103c:	68fa      	ldr	r2, [r7, #12]
 801103e:	f248 0370 	movw	r3, #32880	; 0x8070
 8011042:	4413      	add	r3, r2
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	68f9      	ldr	r1, [r7, #12]
 8011048:	f248 0364 	movw	r3, #32868	; 0x8064
 801104c:	440b      	add	r3, r1
 801104e:	881b      	ldrh	r3, [r3, #0]
 8011050:	fb03 f302 	mul.w	r3, r3, r2
 8011054:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801105c:	bf28      	it	cs
 801105e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011062:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801106a:	691c      	ldr	r4, [r3, #16]
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f103 0110 	add.w	r1, r3, #16
 8011072:	68fa      	ldr	r2, [r7, #12]
 8011074:	f248 036c 	movw	r3, #32876	; 0x806c
 8011078:	4413      	add	r3, r2
 801107a:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801107c:	68fa      	ldr	r2, [r7, #12]
 801107e:	f248 0364 	movw	r3, #32868	; 0x8064
 8011082:	4413      	add	r3, r2
 8011084:	881b      	ldrh	r3, [r3, #0]
 8011086:	461a      	mov	r2, r3
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801108e:	b29b      	uxth	r3, r3
 8011090:	78f8      	ldrb	r0, [r7, #3]
 8011092:	462a      	mov	r2, r5
 8011094:	47a0      	blx	r4
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	da08      	bge.n	80110ae <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801109c:	78f9      	ldrb	r1, [r7, #3]
 801109e:	2311      	movs	r3, #17
 80110a0:	2204      	movs	r2, #4
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7ff fb62 	bl	801076c <SCSI_SenseCode>
    return -1;
 80110a8:	f04f 33ff 	mov.w	r3, #4294967295
 80110ac:	e046      	b.n	801113c <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f103 0210 	add.w	r2, r3, #16
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	2181      	movs	r1, #129	; 0x81
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f004 f95d 	bl	8015378 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80110be:	68fa      	ldr	r2, [r7, #12]
 80110c0:	f248 036c 	movw	r3, #32876	; 0x806c
 80110c4:	4413      	add	r3, r2
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	68f9      	ldr	r1, [r7, #12]
 80110ca:	f248 0364 	movw	r3, #32868	; 0x8064
 80110ce:	440b      	add	r3, r1
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	4619      	mov	r1, r3
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80110da:	441a      	add	r2, r3
 80110dc:	68f9      	ldr	r1, [r7, #12]
 80110de:	f248 036c 	movw	r3, #32876	; 0x806c
 80110e2:	440b      	add	r3, r1
 80110e4:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	f248 0370 	movw	r3, #32880	; 0x8070
 80110ec:	4413      	add	r3, r2
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	68f9      	ldr	r1, [r7, #12]
 80110f2:	f248 0364 	movw	r3, #32868	; 0x8064
 80110f6:	440b      	add	r3, r1
 80110f8:	881b      	ldrh	r3, [r3, #0]
 80110fa:	4619      	mov	r1, r3
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011102:	1ad2      	subs	r2, r2, r3
 8011104:	68f9      	ldr	r1, [r7, #12]
 8011106:	f248 0370 	movw	r3, #32880	; 0x8070
 801110a:	440b      	add	r3, r1
 801110c:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	f248 0338 	movw	r3, #32824	; 0x8038
 8011114:	4413      	add	r3, r2
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	1ad2      	subs	r2, r2, r3
 801111c:	68f9      	ldr	r1, [r7, #12]
 801111e:	f248 0338 	movw	r3, #32824	; 0x8038
 8011122:	440b      	add	r3, r1
 8011124:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8011126:	68fa      	ldr	r2, [r7, #12]
 8011128:	f248 0370 	movw	r3, #32880	; 0x8070
 801112c:	4413      	add	r3, r2
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d102      	bne.n	801113a <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2203      	movs	r2, #3
 8011138:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801113a:	2300      	movs	r3, #0
}
 801113c:	4618      	mov	r0, r3
 801113e:	3710      	adds	r7, #16
 8011140:	46bd      	mov	sp, r7
 8011142:	bdb0      	pop	{r4, r5, r7, pc}

08011144 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011144:	b5b0      	push	{r4, r5, r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	460b      	mov	r3, r1
 801114e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011156:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011158:	68fa      	ldr	r2, [r7, #12]
 801115a:	f248 0370 	movw	r3, #32880	; 0x8070
 801115e:	4413      	add	r3, r2
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	68f9      	ldr	r1, [r7, #12]
 8011164:	f248 0364 	movw	r3, #32868	; 0x8064
 8011168:	440b      	add	r3, r1
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	fb03 f302 	mul.w	r3, r3, r2
 8011170:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011178:	bf28      	it	cs
 801117a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801117e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011186:	695c      	ldr	r4, [r3, #20]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f103 0110 	add.w	r1, r3, #16
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	f248 036c 	movw	r3, #32876	; 0x806c
 8011194:	4413      	add	r3, r2
 8011196:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	f248 0364 	movw	r3, #32868	; 0x8064
 801119e:	4413      	add	r3, r2
 80111a0:	881b      	ldrh	r3, [r3, #0]
 80111a2:	461a      	mov	r2, r3
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	78f8      	ldrb	r0, [r7, #3]
 80111ae:	462a      	mov	r2, r5
 80111b0:	47a0      	blx	r4
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	da08      	bge.n	80111ca <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80111b8:	78f9      	ldrb	r1, [r7, #3]
 80111ba:	2303      	movs	r3, #3
 80111bc:	2204      	movs	r2, #4
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7ff fad4 	bl	801076c <SCSI_SenseCode>
    return -1;
 80111c4:	f04f 33ff 	mov.w	r3, #4294967295
 80111c8:	e05a      	b.n	8011280 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80111ca:	68fa      	ldr	r2, [r7, #12]
 80111cc:	f248 036c 	movw	r3, #32876	; 0x806c
 80111d0:	4413      	add	r3, r2
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	68f9      	ldr	r1, [r7, #12]
 80111d6:	f248 0364 	movw	r3, #32868	; 0x8064
 80111da:	440b      	add	r3, r1
 80111dc:	881b      	ldrh	r3, [r3, #0]
 80111de:	4619      	mov	r1, r3
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80111e6:	441a      	add	r2, r3
 80111e8:	68f9      	ldr	r1, [r7, #12]
 80111ea:	f248 036c 	movw	r3, #32876	; 0x806c
 80111ee:	440b      	add	r3, r1
 80111f0:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80111f2:	68fa      	ldr	r2, [r7, #12]
 80111f4:	f248 0370 	movw	r3, #32880	; 0x8070
 80111f8:	4413      	add	r3, r2
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	68f9      	ldr	r1, [r7, #12]
 80111fe:	f248 0364 	movw	r3, #32868	; 0x8064
 8011202:	440b      	add	r3, r1
 8011204:	881b      	ldrh	r3, [r3, #0]
 8011206:	4619      	mov	r1, r3
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	fbb3 f3f1 	udiv	r3, r3, r1
 801120e:	1ad2      	subs	r2, r2, r3
 8011210:	68f9      	ldr	r1, [r7, #12]
 8011212:	f248 0370 	movw	r3, #32880	; 0x8070
 8011216:	440b      	add	r3, r1
 8011218:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801121a:	68fa      	ldr	r2, [r7, #12]
 801121c:	f248 0338 	movw	r3, #32824	; 0x8038
 8011220:	4413      	add	r3, r2
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	1ad2      	subs	r2, r2, r3
 8011228:	68f9      	ldr	r1, [r7, #12]
 801122a:	f248 0338 	movw	r3, #32824	; 0x8038
 801122e:	440b      	add	r3, r1
 8011230:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	f248 0370 	movw	r3, #32880	; 0x8070
 8011238:	4413      	add	r3, r2
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d104      	bne.n	801124a <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011240:	2100      	movs	r1, #0
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f7fe fde2 	bl	800fe0c <MSC_BOT_SendCSW>
 8011248:	e019      	b.n	801127e <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801124a:	68fa      	ldr	r2, [r7, #12]
 801124c:	f248 0370 	movw	r3, #32880	; 0x8070
 8011250:	4413      	add	r3, r2
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	68f9      	ldr	r1, [r7, #12]
 8011256:	f248 0364 	movw	r3, #32868	; 0x8064
 801125a:	440b      	add	r3, r1
 801125c:	881b      	ldrh	r3, [r3, #0]
 801125e:	fb03 f302 	mul.w	r3, r3, r2
 8011262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011266:	bf28      	it	cs
 8011268:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801126c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f103 0210 	add.w	r2, r3, #16
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	2101      	movs	r1, #1
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f004 f89e 	bl	80153ba <USBD_LL_PrepareReceive>
  }

  return 0;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	3710      	adds	r7, #16
 8011284:	46bd      	mov	sp, r7
 8011286:	bdb0      	pop	{r4, r5, r7, pc}

08011288 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011288:	b480      	push	{r7}
 801128a:	b087      	sub	sp, #28
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	4613      	mov	r3, r2
 8011294:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8011296:	88fb      	ldrh	r3, [r7, #6]
 8011298:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 801129a:	8afa      	ldrh	r2, [r7, #22]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80112a0:	e00b      	b.n	80112ba <SCSI_UpdateBotData+0x32>
  {
    len--;
 80112a2:	8afb      	ldrh	r3, [r7, #22]
 80112a4:	3b01      	subs	r3, #1
 80112a6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80112a8:	8afb      	ldrh	r3, [r7, #22]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	441a      	add	r2, r3
 80112ae:	8afb      	ldrh	r3, [r7, #22]
 80112b0:	7811      	ldrb	r1, [r2, #0]
 80112b2:	68fa      	ldr	r2, [r7, #12]
 80112b4:	4413      	add	r3, r2
 80112b6:	460a      	mov	r2, r1
 80112b8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80112ba:	8afb      	ldrh	r3, [r7, #22]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1f0      	bne.n	80112a2 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80112c0:	2300      	movs	r3, #0
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	371c      	adds	r7, #28
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr

080112ce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80112ce:	b580      	push	{r7, lr}
 80112d0:	b086      	sub	sp, #24
 80112d2:	af00      	add	r7, sp, #0
 80112d4:	60f8      	str	r0, [r7, #12]
 80112d6:	60b9      	str	r1, [r7, #8]
 80112d8:	4613      	mov	r3, r2
 80112da:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d101      	bne.n	80112e6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80112e2:	2303      	movs	r3, #3
 80112e4:	e025      	b.n	8011332 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d003      	beq.n	80112f8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2200      	movs	r2, #0
 80112f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d003      	beq.n	801130a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2200      	movs	r2, #0
 8011306:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d003      	beq.n	8011318 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	68ba      	ldr	r2, [r7, #8]
 8011314:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	79fa      	ldrb	r2, [r7, #7]
 8011324:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f003 fece 	bl	80150c8 <USBD_LL_Init>
 801132c:	4603      	mov	r3, r0
 801132e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011330:	7dfb      	ldrb	r3, [r7, #23]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3718      	adds	r7, #24
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}

0801133a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801133a:	b580      	push	{r7, lr}
 801133c:	b084      	sub	sp, #16
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
 8011342:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011344:	2300      	movs	r3, #0
 8011346:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d101      	bne.n	8011352 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801134e:	2303      	movs	r3, #3
 8011350:	e010      	b.n	8011374 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	683a      	ldr	r2, [r7, #0]
 8011356:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011362:	f107 020e 	add.w	r2, r7, #14
 8011366:	4610      	mov	r0, r2
 8011368:	4798      	blx	r3
 801136a:	4602      	mov	r2, r0
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f003 feef 	bl	8015168 <USBD_LL_Start>
 801138a:	4603      	mov	r3, r0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011394:	b480      	push	{r7}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801139c:	2300      	movs	r3, #0
}
 801139e:	4618      	mov	r0, r3
 80113a0:	370c      	adds	r7, #12
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr

080113aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b084      	sub	sp, #16
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	460b      	mov	r3, r1
 80113b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80113b6:	2303      	movs	r3, #3
 80113b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d009      	beq.n	80113d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	78fa      	ldrb	r2, [r7, #3]
 80113ce:	4611      	mov	r1, r2
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	4798      	blx	r3
 80113d4:	4603      	mov	r3, r0
 80113d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80113d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3710      	adds	r7, #16
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b082      	sub	sp, #8
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
 80113ea:	460b      	mov	r3, r1
 80113ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d007      	beq.n	8011408 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113fe:	685b      	ldr	r3, [r3, #4]
 8011400:	78fa      	ldrb	r2, [r7, #3]
 8011402:	4611      	mov	r1, r2
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	4798      	blx	r3
  }

  return USBD_OK;
 8011408:	2300      	movs	r3, #0
}
 801140a:	4618      	mov	r0, r3
 801140c:	3708      	adds	r7, #8
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}

08011412 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011412:	b580      	push	{r7, lr}
 8011414:	b084      	sub	sp, #16
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
 801141a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011422:	6839      	ldr	r1, [r7, #0]
 8011424:	4618      	mov	r0, r3
 8011426:	f000 ff2b 	bl	8012280 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2201      	movs	r2, #1
 801142e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011438:	461a      	mov	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011446:	f003 031f 	and.w	r3, r3, #31
 801144a:	2b01      	cmp	r3, #1
 801144c:	d00e      	beq.n	801146c <USBD_LL_SetupStage+0x5a>
 801144e:	2b01      	cmp	r3, #1
 8011450:	d302      	bcc.n	8011458 <USBD_LL_SetupStage+0x46>
 8011452:	2b02      	cmp	r3, #2
 8011454:	d014      	beq.n	8011480 <USBD_LL_SetupStage+0x6e>
 8011456:	e01d      	b.n	8011494 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801145e:	4619      	mov	r1, r3
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f000 fa17 	bl	8011894 <USBD_StdDevReq>
 8011466:	4603      	mov	r3, r0
 8011468:	73fb      	strb	r3, [r7, #15]
      break;
 801146a:	e020      	b.n	80114ae <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011472:	4619      	mov	r1, r3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fa7b 	bl	8011970 <USBD_StdItfReq>
 801147a:	4603      	mov	r3, r0
 801147c:	73fb      	strb	r3, [r7, #15]
      break;
 801147e:	e016      	b.n	80114ae <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011486:	4619      	mov	r1, r3
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f000 fab7 	bl	80119fc <USBD_StdEPReq>
 801148e:	4603      	mov	r3, r0
 8011490:	73fb      	strb	r3, [r7, #15]
      break;
 8011492:	e00c      	b.n	80114ae <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801149a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	4619      	mov	r1, r3
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f003 fedf 	bl	8015266 <USBD_LL_StallEP>
 80114a8:	4603      	mov	r3, r0
 80114aa:	73fb      	strb	r3, [r7, #15]
      break;
 80114ac:	bf00      	nop
  }

  return ret;
 80114ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3710      	adds	r7, #16
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b086      	sub	sp, #24
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	460b      	mov	r3, r1
 80114c2:	607a      	str	r2, [r7, #4]
 80114c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80114c6:	7afb      	ldrb	r3, [r7, #11]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d137      	bne.n	801153c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80114d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80114da:	2b03      	cmp	r3, #3
 80114dc:	d14a      	bne.n	8011574 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	689a      	ldr	r2, [r3, #8]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d913      	bls.n	8011512 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	689a      	ldr	r2, [r3, #8]
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	1ad2      	subs	r2, r2, r3
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	68da      	ldr	r2, [r3, #12]
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	689b      	ldr	r3, [r3, #8]
 8011500:	4293      	cmp	r3, r2
 8011502:	bf28      	it	cs
 8011504:	4613      	movcs	r3, r2
 8011506:	461a      	mov	r2, r3
 8011508:	6879      	ldr	r1, [r7, #4]
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f000 ff8f 	bl	801242e <USBD_CtlContinueRx>
 8011510:	e030      	b.n	8011574 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011518:	691b      	ldr	r3, [r3, #16]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00a      	beq.n	8011534 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011524:	2b03      	cmp	r3, #3
 8011526:	d105      	bne.n	8011534 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801152e:	691b      	ldr	r3, [r3, #16]
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f000 ff8b 	bl	8012450 <USBD_CtlSendStatus>
 801153a:	e01b      	b.n	8011574 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011542:	699b      	ldr	r3, [r3, #24]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d013      	beq.n	8011570 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801154e:	2b03      	cmp	r3, #3
 8011550:	d10e      	bne.n	8011570 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011558:	699b      	ldr	r3, [r3, #24]
 801155a:	7afa      	ldrb	r2, [r7, #11]
 801155c:	4611      	mov	r1, r2
 801155e:	68f8      	ldr	r0, [r7, #12]
 8011560:	4798      	blx	r3
 8011562:	4603      	mov	r3, r0
 8011564:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011566:	7dfb      	ldrb	r3, [r7, #23]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d003      	beq.n	8011574 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801156c:	7dfb      	ldrb	r3, [r7, #23]
 801156e:	e002      	b.n	8011576 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011570:	2303      	movs	r3, #3
 8011572:	e000      	b.n	8011576 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3718      	adds	r7, #24
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b086      	sub	sp, #24
 8011582:	af00      	add	r7, sp, #0
 8011584:	60f8      	str	r0, [r7, #12]
 8011586:	460b      	mov	r3, r1
 8011588:	607a      	str	r2, [r7, #4]
 801158a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801158c:	7afb      	ldrb	r3, [r7, #11]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d16a      	bne.n	8011668 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	3314      	adds	r3, #20
 8011596:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801159e:	2b02      	cmp	r3, #2
 80115a0:	d155      	bne.n	801164e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	689a      	ldr	r2, [r3, #8]
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d914      	bls.n	80115d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	689a      	ldr	r2, [r3, #8]
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	68db      	ldr	r3, [r3, #12]
 80115b6:	1ad2      	subs	r2, r2, r3
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	689b      	ldr	r3, [r3, #8]
 80115c0:	461a      	mov	r2, r3
 80115c2:	6879      	ldr	r1, [r7, #4]
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f000 ff21 	bl	801240c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115ca:	2300      	movs	r3, #0
 80115cc:	2200      	movs	r2, #0
 80115ce:	2100      	movs	r1, #0
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	f003 fef2 	bl	80153ba <USBD_LL_PrepareReceive>
 80115d6:	e03a      	b.n	801164e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	68da      	ldr	r2, [r3, #12]
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	689b      	ldr	r3, [r3, #8]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d11c      	bne.n	801161e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	685a      	ldr	r2, [r3, #4]
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d316      	bcc.n	801161e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	685a      	ldr	r2, [r3, #4]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d20f      	bcs.n	801161e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80115fe:	2200      	movs	r2, #0
 8011600:	2100      	movs	r1, #0
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f000 ff02 	bl	801240c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2200      	movs	r2, #0
 801160c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011610:	2300      	movs	r3, #0
 8011612:	2200      	movs	r2, #0
 8011614:	2100      	movs	r1, #0
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f003 fecf 	bl	80153ba <USBD_LL_PrepareReceive>
 801161c:	e017      	b.n	801164e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011624:	68db      	ldr	r3, [r3, #12]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d00a      	beq.n	8011640 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011630:	2b03      	cmp	r3, #3
 8011632:	d105      	bne.n	8011640 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801163a:	68db      	ldr	r3, [r3, #12]
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011640:	2180      	movs	r1, #128	; 0x80
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f003 fe0f 	bl	8015266 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011648:	68f8      	ldr	r0, [r7, #12]
 801164a:	f000 ff14 	bl	8012476 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011654:	2b01      	cmp	r3, #1
 8011656:	d123      	bne.n	80116a0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011658:	68f8      	ldr	r0, [r7, #12]
 801165a:	f7ff fe9b 	bl	8011394 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2200      	movs	r2, #0
 8011662:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011666:	e01b      	b.n	80116a0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801166e:	695b      	ldr	r3, [r3, #20]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d013      	beq.n	801169c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801167a:	2b03      	cmp	r3, #3
 801167c:	d10e      	bne.n	801169c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011684:	695b      	ldr	r3, [r3, #20]
 8011686:	7afa      	ldrb	r2, [r7, #11]
 8011688:	4611      	mov	r1, r2
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	4798      	blx	r3
 801168e:	4603      	mov	r3, r0
 8011690:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011692:	7dfb      	ldrb	r3, [r7, #23]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d003      	beq.n	80116a0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011698:	7dfb      	ldrb	r3, [r7, #23]
 801169a:	e002      	b.n	80116a2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801169c:	2303      	movs	r3, #3
 801169e:	e000      	b.n	80116a2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80116a0:	2300      	movs	r3, #0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3718      	adds	r7, #24
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b082      	sub	sp, #8
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2201      	movs	r2, #1
 80116b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2200      	movs	r2, #0
 80116be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d009      	beq.n	80116ee <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	6852      	ldr	r2, [r2, #4]
 80116e6:	b2d2      	uxtb	r2, r2
 80116e8:	4611      	mov	r1, r2
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116ee:	2340      	movs	r3, #64	; 0x40
 80116f0:	2200      	movs	r2, #0
 80116f2:	2100      	movs	r1, #0
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f003 fd52 	bl	801519e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2201      	movs	r2, #1
 80116fe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2240      	movs	r2, #64	; 0x40
 8011706:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801170a:	2340      	movs	r3, #64	; 0x40
 801170c:	2200      	movs	r2, #0
 801170e:	2180      	movs	r1, #128	; 0x80
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f003 fd44 	bl	801519e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2201      	movs	r2, #1
 801171a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2240      	movs	r2, #64	; 0x40
 8011720:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	78fa      	ldrb	r2, [r7, #3]
 801173c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801173e:	2300      	movs	r3, #0
}
 8011740:	4618      	mov	r0, r3
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2204      	movs	r2, #4
 8011764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011768:	2300      	movs	r3, #0
}
 801176a:	4618      	mov	r0, r3
 801176c:	370c      	adds	r7, #12
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr

08011776 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011776:	b480      	push	{r7}
 8011778:	b083      	sub	sp, #12
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011784:	2b04      	cmp	r3, #4
 8011786:	d105      	bne.n	8011794 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011794:	2300      	movs	r3, #0
}
 8011796:	4618      	mov	r0, r3
 8011798:	370c      	adds	r7, #12
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr

080117a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80117a2:	b580      	push	{r7, lr}
 80117a4:	b082      	sub	sp, #8
 80117a6:	af00      	add	r7, sp, #0
 80117a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117b0:	2b03      	cmp	r3, #3
 80117b2:	d10b      	bne.n	80117cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ba:	69db      	ldr	r3, [r3, #28]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d005      	beq.n	80117cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117c6:	69db      	ldr	r3, [r3, #28]
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80117cc:	2300      	movs	r3, #0
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3708      	adds	r7, #8
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}

080117d6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80117d6:	b480      	push	{r7}
 80117d8:	b083      	sub	sp, #12
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
 80117de:	460b      	mov	r3, r1
 80117e0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	370c      	adds	r7, #12
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80117fc:	2300      	movs	r3, #0
}
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr

0801180a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801180a:	b480      	push	{r7}
 801180c:	b083      	sub	sp, #12
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011812:	2300      	movs	r3, #0
}
 8011814:	4618      	mov	r0, r3
 8011816:	370c      	adds	r7, #12
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr

08011820 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2201      	movs	r2, #1
 801182c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011836:	2b00      	cmp	r3, #0
 8011838:	d009      	beq.n	801184e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	6852      	ldr	r2, [r2, #4]
 8011846:	b2d2      	uxtb	r2, r2
 8011848:	4611      	mov	r1, r2
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	4798      	blx	r3
  }

  return USBD_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011858:	b480      	push	{r7}
 801185a:	b087      	sub	sp, #28
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	3301      	adds	r3, #1
 801186e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011876:	8a3b      	ldrh	r3, [r7, #16]
 8011878:	021b      	lsls	r3, r3, #8
 801187a:	b21a      	sxth	r2, r3
 801187c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011880:	4313      	orrs	r3, r2
 8011882:	b21b      	sxth	r3, r3
 8011884:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011886:	89fb      	ldrh	r3, [r7, #14]
}
 8011888:	4618      	mov	r0, r3
 801188a:	371c      	adds	r7, #28
 801188c:	46bd      	mov	sp, r7
 801188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011892:	4770      	bx	lr

08011894 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b084      	sub	sp, #16
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801189e:	2300      	movs	r3, #0
 80118a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80118aa:	2b20      	cmp	r3, #32
 80118ac:	d004      	beq.n	80118b8 <USBD_StdDevReq+0x24>
 80118ae:	2b40      	cmp	r3, #64	; 0x40
 80118b0:	d002      	beq.n	80118b8 <USBD_StdDevReq+0x24>
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00a      	beq.n	80118cc <USBD_StdDevReq+0x38>
 80118b6:	e050      	b.n	801195a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118be:	689b      	ldr	r3, [r3, #8]
 80118c0:	6839      	ldr	r1, [r7, #0]
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	4798      	blx	r3
 80118c6:	4603      	mov	r3, r0
 80118c8:	73fb      	strb	r3, [r7, #15]
    break;
 80118ca:	e04b      	b.n	8011964 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	785b      	ldrb	r3, [r3, #1]
 80118d0:	2b09      	cmp	r3, #9
 80118d2:	d83c      	bhi.n	801194e <USBD_StdDevReq+0xba>
 80118d4:	a201      	add	r2, pc, #4	; (adr r2, 80118dc <USBD_StdDevReq+0x48>)
 80118d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118da:	bf00      	nop
 80118dc:	08011931 	.word	0x08011931
 80118e0:	08011945 	.word	0x08011945
 80118e4:	0801194f 	.word	0x0801194f
 80118e8:	0801193b 	.word	0x0801193b
 80118ec:	0801194f 	.word	0x0801194f
 80118f0:	0801190f 	.word	0x0801190f
 80118f4:	08011905 	.word	0x08011905
 80118f8:	0801194f 	.word	0x0801194f
 80118fc:	08011927 	.word	0x08011927
 8011900:	08011919 	.word	0x08011919
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011904:	6839      	ldr	r1, [r7, #0]
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 f9ce 	bl	8011ca8 <USBD_GetDescriptor>
      break;
 801190c:	e024      	b.n	8011958 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801190e:	6839      	ldr	r1, [r7, #0]
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 fb33 	bl	8011f7c <USBD_SetAddress>
      break;
 8011916:	e01f      	b.n	8011958 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011918:	6839      	ldr	r1, [r7, #0]
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 fb70 	bl	8012000 <USBD_SetConfig>
 8011920:	4603      	mov	r3, r0
 8011922:	73fb      	strb	r3, [r7, #15]
      break;
 8011924:	e018      	b.n	8011958 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011926:	6839      	ldr	r1, [r7, #0]
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f000 fc0d 	bl	8012148 <USBD_GetConfig>
      break;
 801192e:	e013      	b.n	8011958 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011930:	6839      	ldr	r1, [r7, #0]
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f000 fc3c 	bl	80121b0 <USBD_GetStatus>
      break;
 8011938:	e00e      	b.n	8011958 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801193a:	6839      	ldr	r1, [r7, #0]
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 fc6a 	bl	8012216 <USBD_SetFeature>
      break;
 8011942:	e009      	b.n	8011958 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 fc79 	bl	801223e <USBD_ClrFeature>
      break;
 801194c:	e004      	b.n	8011958 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801194e:	6839      	ldr	r1, [r7, #0]
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f000 fccf 	bl	80122f4 <USBD_CtlError>
      break;
 8011956:	bf00      	nop
    }
    break;
 8011958:	e004      	b.n	8011964 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801195a:	6839      	ldr	r1, [r7, #0]
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f000 fcc9 	bl	80122f4 <USBD_CtlError>
    break;
 8011962:	bf00      	nop
  }

  return ret;
 8011964:	7bfb      	ldrb	r3, [r7, #15]
}
 8011966:	4618      	mov	r0, r3
 8011968:	3710      	adds	r7, #16
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
 801196e:	bf00      	nop

08011970 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801197a:	2300      	movs	r3, #0
 801197c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011986:	2b20      	cmp	r3, #32
 8011988:	d003      	beq.n	8011992 <USBD_StdItfReq+0x22>
 801198a:	2b40      	cmp	r3, #64	; 0x40
 801198c:	d001      	beq.n	8011992 <USBD_StdItfReq+0x22>
 801198e:	2b00      	cmp	r3, #0
 8011990:	d12a      	bne.n	80119e8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011998:	3b01      	subs	r3, #1
 801199a:	2b02      	cmp	r3, #2
 801199c:	d81d      	bhi.n	80119da <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	889b      	ldrh	r3, [r3, #4]
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d813      	bhi.n	80119d0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119ae:	689b      	ldr	r3, [r3, #8]
 80119b0:	6839      	ldr	r1, [r7, #0]
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	4798      	blx	r3
 80119b6:	4603      	mov	r3, r0
 80119b8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	88db      	ldrh	r3, [r3, #6]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d110      	bne.n	80119e4 <USBD_StdItfReq+0x74>
 80119c2:	7bfb      	ldrb	r3, [r7, #15]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d10d      	bne.n	80119e4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f000 fd41 	bl	8012450 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80119ce:	e009      	b.n	80119e4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80119d0:	6839      	ldr	r1, [r7, #0]
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f000 fc8e 	bl	80122f4 <USBD_CtlError>
      break;
 80119d8:	e004      	b.n	80119e4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80119da:	6839      	ldr	r1, [r7, #0]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f000 fc89 	bl	80122f4 <USBD_CtlError>
      break;
 80119e2:	e000      	b.n	80119e6 <USBD_StdItfReq+0x76>
      break;
 80119e4:	bf00      	nop
    }
    break;
 80119e6:	e004      	b.n	80119f2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f000 fc82 	bl	80122f4 <USBD_CtlError>
    break;
 80119f0:	bf00      	nop
  }

  return ret;
 80119f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3710      	adds	r7, #16
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011a06:	2300      	movs	r3, #0
 8011a08:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	889b      	ldrh	r3, [r3, #4]
 8011a0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a18:	2b20      	cmp	r3, #32
 8011a1a:	d004      	beq.n	8011a26 <USBD_StdEPReq+0x2a>
 8011a1c:	2b40      	cmp	r3, #64	; 0x40
 8011a1e:	d002      	beq.n	8011a26 <USBD_StdEPReq+0x2a>
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00a      	beq.n	8011a3a <USBD_StdEPReq+0x3e>
 8011a24:	e135      	b.n	8011c92 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	6839      	ldr	r1, [r7, #0]
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	4798      	blx	r3
 8011a34:	4603      	mov	r3, r0
 8011a36:	73fb      	strb	r3, [r7, #15]
    break;
 8011a38:	e130      	b.n	8011c9c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	785b      	ldrb	r3, [r3, #1]
 8011a3e:	2b01      	cmp	r3, #1
 8011a40:	d03e      	beq.n	8011ac0 <USBD_StdEPReq+0xc4>
 8011a42:	2b03      	cmp	r3, #3
 8011a44:	d002      	beq.n	8011a4c <USBD_StdEPReq+0x50>
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d077      	beq.n	8011b3a <USBD_StdEPReq+0x13e>
 8011a4a:	e11c      	b.n	8011c86 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a52:	2b02      	cmp	r3, #2
 8011a54:	d002      	beq.n	8011a5c <USBD_StdEPReq+0x60>
 8011a56:	2b03      	cmp	r3, #3
 8011a58:	d015      	beq.n	8011a86 <USBD_StdEPReq+0x8a>
 8011a5a:	e02b      	b.n	8011ab4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a5c:	7bbb      	ldrb	r3, [r7, #14]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00c      	beq.n	8011a7c <USBD_StdEPReq+0x80>
 8011a62:	7bbb      	ldrb	r3, [r7, #14]
 8011a64:	2b80      	cmp	r3, #128	; 0x80
 8011a66:	d009      	beq.n	8011a7c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a68:	7bbb      	ldrb	r3, [r7, #14]
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f003 fbfa 	bl	8015266 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a72:	2180      	movs	r1, #128	; 0x80
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f003 fbf6 	bl	8015266 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011a7a:	e020      	b.n	8011abe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 fc38 	bl	80122f4 <USBD_CtlError>
        break;
 8011a84:	e01b      	b.n	8011abe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	885b      	ldrh	r3, [r3, #2]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d10e      	bne.n	8011aac <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011a8e:	7bbb      	ldrb	r3, [r7, #14]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00b      	beq.n	8011aac <USBD_StdEPReq+0xb0>
 8011a94:	7bbb      	ldrb	r3, [r7, #14]
 8011a96:	2b80      	cmp	r3, #128	; 0x80
 8011a98:	d008      	beq.n	8011aac <USBD_StdEPReq+0xb0>
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	88db      	ldrh	r3, [r3, #6]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d104      	bne.n	8011aac <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011aa2:	7bbb      	ldrb	r3, [r7, #14]
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f003 fbdd 	bl	8015266 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 fccf 	bl	8012450 <USBD_CtlSendStatus>

        break;
 8011ab2:	e004      	b.n	8011abe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8011ab4:	6839      	ldr	r1, [r7, #0]
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f000 fc1c 	bl	80122f4 <USBD_CtlError>
        break;
 8011abc:	bf00      	nop
      }
      break;
 8011abe:	e0e7      	b.n	8011c90 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ac6:	2b02      	cmp	r3, #2
 8011ac8:	d002      	beq.n	8011ad0 <USBD_StdEPReq+0xd4>
 8011aca:	2b03      	cmp	r3, #3
 8011acc:	d015      	beq.n	8011afa <USBD_StdEPReq+0xfe>
 8011ace:	e02d      	b.n	8011b2c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ad0:	7bbb      	ldrb	r3, [r7, #14]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d00c      	beq.n	8011af0 <USBD_StdEPReq+0xf4>
 8011ad6:	7bbb      	ldrb	r3, [r7, #14]
 8011ad8:	2b80      	cmp	r3, #128	; 0x80
 8011ada:	d009      	beq.n	8011af0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011adc:	7bbb      	ldrb	r3, [r7, #14]
 8011ade:	4619      	mov	r1, r3
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f003 fbc0 	bl	8015266 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ae6:	2180      	movs	r1, #128	; 0x80
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f003 fbbc 	bl	8015266 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011aee:	e023      	b.n	8011b38 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011af0:	6839      	ldr	r1, [r7, #0]
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 fbfe 	bl	80122f4 <USBD_CtlError>
        break;
 8011af8:	e01e      	b.n	8011b38 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	885b      	ldrh	r3, [r3, #2]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d119      	bne.n	8011b36 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011b02:	7bbb      	ldrb	r3, [r7, #14]
 8011b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d004      	beq.n	8011b16 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011b0c:	7bbb      	ldrb	r3, [r7, #14]
 8011b0e:	4619      	mov	r1, r3
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f003 fbc7 	bl	80152a4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f000 fc9a 	bl	8012450 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	6839      	ldr	r1, [r7, #0]
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	4798      	blx	r3
        }
        break;
 8011b2a:	e004      	b.n	8011b36 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011b2c:	6839      	ldr	r1, [r7, #0]
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f000 fbe0 	bl	80122f4 <USBD_CtlError>
        break;
 8011b34:	e000      	b.n	8011b38 <USBD_StdEPReq+0x13c>
        break;
 8011b36:	bf00      	nop
      }
      break;
 8011b38:	e0aa      	b.n	8011c90 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b40:	2b02      	cmp	r3, #2
 8011b42:	d002      	beq.n	8011b4a <USBD_StdEPReq+0x14e>
 8011b44:	2b03      	cmp	r3, #3
 8011b46:	d032      	beq.n	8011bae <USBD_StdEPReq+0x1b2>
 8011b48:	e097      	b.n	8011c7a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b4a:	7bbb      	ldrb	r3, [r7, #14]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d007      	beq.n	8011b60 <USBD_StdEPReq+0x164>
 8011b50:	7bbb      	ldrb	r3, [r7, #14]
 8011b52:	2b80      	cmp	r3, #128	; 0x80
 8011b54:	d004      	beq.n	8011b60 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011b56:	6839      	ldr	r1, [r7, #0]
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 fbcb 	bl	80122f4 <USBD_CtlError>
          break;
 8011b5e:	e091      	b.n	8011c84 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	da0b      	bge.n	8011b80 <USBD_StdEPReq+0x184>
 8011b68:	7bbb      	ldrb	r3, [r7, #14]
 8011b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b6e:	4613      	mov	r3, r2
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	4413      	add	r3, r2
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	3310      	adds	r3, #16
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	4413      	add	r3, r2
 8011b7c:	3304      	adds	r3, #4
 8011b7e:	e00b      	b.n	8011b98 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011b80:	7bbb      	ldrb	r3, [r7, #14]
 8011b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b86:	4613      	mov	r3, r2
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	4413      	add	r3, r2
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	4413      	add	r3, r2
 8011b96:	3304      	adds	r3, #4
 8011b98:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	2202      	movs	r2, #2
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 fc15 	bl	80123d6 <USBD_CtlSendData>
        break;
 8011bac:	e06a      	b.n	8011c84 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	da11      	bge.n	8011bda <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011bb6:	7bbb      	ldrb	r3, [r7, #14]
 8011bb8:	f003 020f 	and.w	r2, r3, #15
 8011bbc:	6879      	ldr	r1, [r7, #4]
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	4413      	add	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	440b      	add	r3, r1
 8011bc8:	3324      	adds	r3, #36	; 0x24
 8011bca:	881b      	ldrh	r3, [r3, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d117      	bne.n	8011c00 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011bd0:	6839      	ldr	r1, [r7, #0]
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f000 fb8e 	bl	80122f4 <USBD_CtlError>
            break;
 8011bd8:	e054      	b.n	8011c84 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011bda:	7bbb      	ldrb	r3, [r7, #14]
 8011bdc:	f003 020f 	and.w	r2, r3, #15
 8011be0:	6879      	ldr	r1, [r7, #4]
 8011be2:	4613      	mov	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	4413      	add	r3, r2
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	440b      	add	r3, r1
 8011bec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011bf0:	881b      	ldrh	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d104      	bne.n	8011c00 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011bf6:	6839      	ldr	r1, [r7, #0]
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f000 fb7b 	bl	80122f4 <USBD_CtlError>
            break;
 8011bfe:	e041      	b.n	8011c84 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	da0b      	bge.n	8011c20 <USBD_StdEPReq+0x224>
 8011c08:	7bbb      	ldrb	r3, [r7, #14]
 8011c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c0e:	4613      	mov	r3, r2
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	4413      	add	r3, r2
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	3310      	adds	r3, #16
 8011c18:	687a      	ldr	r2, [r7, #4]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	e00b      	b.n	8011c38 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011c20:	7bbb      	ldrb	r3, [r7, #14]
 8011c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c26:	4613      	mov	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	4413      	add	r3, r2
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	4413      	add	r3, r2
 8011c36:	3304      	adds	r3, #4
 8011c38:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011c3a:	7bbb      	ldrb	r3, [r7, #14]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d002      	beq.n	8011c46 <USBD_StdEPReq+0x24a>
 8011c40:	7bbb      	ldrb	r3, [r7, #14]
 8011c42:	2b80      	cmp	r3, #128	; 0x80
 8011c44:	d103      	bne.n	8011c4e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	601a      	str	r2, [r3, #0]
 8011c4c:	e00e      	b.n	8011c6c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011c4e:	7bbb      	ldrb	r3, [r7, #14]
 8011c50:	4619      	mov	r1, r3
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f003 fb45 	bl	80152e2 <USBD_LL_IsStallEP>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d003      	beq.n	8011c66 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	2201      	movs	r2, #1
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	e002      	b.n	8011c6c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	2202      	movs	r2, #2
 8011c70:	4619      	mov	r1, r3
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f000 fbaf 	bl	80123d6 <USBD_CtlSendData>
          break;
 8011c78:	e004      	b.n	8011c84 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011c7a:	6839      	ldr	r1, [r7, #0]
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 fb39 	bl	80122f4 <USBD_CtlError>
        break;
 8011c82:	bf00      	nop
      }
      break;
 8011c84:	e004      	b.n	8011c90 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011c86:	6839      	ldr	r1, [r7, #0]
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 fb33 	bl	80122f4 <USBD_CtlError>
      break;
 8011c8e:	bf00      	nop
    }
    break;
 8011c90:	e004      	b.n	8011c9c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fb2d 	bl	80122f4 <USBD_CtlError>
    break;
 8011c9a:	bf00      	nop
  }

  return ret;
 8011c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3710      	adds	r7, #16
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
	...

08011ca8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b084      	sub	sp, #16
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	885b      	ldrh	r3, [r3, #2]
 8011cc2:	0a1b      	lsrs	r3, r3, #8
 8011cc4:	b29b      	uxth	r3, r3
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	2b06      	cmp	r3, #6
 8011cca:	f200 8128 	bhi.w	8011f1e <USBD_GetDescriptor+0x276>
 8011cce:	a201      	add	r2, pc, #4	; (adr r2, 8011cd4 <USBD_GetDescriptor+0x2c>)
 8011cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd4:	08011cf1 	.word	0x08011cf1
 8011cd8:	08011d09 	.word	0x08011d09
 8011cdc:	08011d49 	.word	0x08011d49
 8011ce0:	08011f1f 	.word	0x08011f1f
 8011ce4:	08011f1f 	.word	0x08011f1f
 8011ce8:	08011ebf 	.word	0x08011ebf
 8011cec:	08011eeb 	.word	0x08011eeb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	7c12      	ldrb	r2, [r2, #16]
 8011cfc:	f107 0108 	add.w	r1, r7, #8
 8011d00:	4610      	mov	r0, r2
 8011d02:	4798      	blx	r3
 8011d04:	60f8      	str	r0, [r7, #12]
    break;
 8011d06:	e112      	b.n	8011f2e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	7c1b      	ldrb	r3, [r3, #16]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d10d      	bne.n	8011d2c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d18:	f107 0208 	add.w	r2, r7, #8
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	4798      	blx	r3
 8011d20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	3301      	adds	r3, #1
 8011d26:	2202      	movs	r2, #2
 8011d28:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011d2a:	e100      	b.n	8011f2e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d34:	f107 0208 	add.w	r2, r7, #8
 8011d38:	4610      	mov	r0, r2
 8011d3a:	4798      	blx	r3
 8011d3c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	3301      	adds	r3, #1
 8011d42:	2202      	movs	r2, #2
 8011d44:	701a      	strb	r2, [r3, #0]
    break;
 8011d46:	e0f2      	b.n	8011f2e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	885b      	ldrh	r3, [r3, #2]
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	2b05      	cmp	r3, #5
 8011d50:	f200 80ac 	bhi.w	8011eac <USBD_GetDescriptor+0x204>
 8011d54:	a201      	add	r2, pc, #4	; (adr r2, 8011d5c <USBD_GetDescriptor+0xb4>)
 8011d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5a:	bf00      	nop
 8011d5c:	08011d75 	.word	0x08011d75
 8011d60:	08011da9 	.word	0x08011da9
 8011d64:	08011ddd 	.word	0x08011ddd
 8011d68:	08011e11 	.word	0x08011e11
 8011d6c:	08011e45 	.word	0x08011e45
 8011d70:	08011e79 	.word	0x08011e79
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d7a:	685b      	ldr	r3, [r3, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d00b      	beq.n	8011d98 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	7c12      	ldrb	r2, [r2, #16]
 8011d8c:	f107 0108 	add.w	r1, r7, #8
 8011d90:	4610      	mov	r0, r2
 8011d92:	4798      	blx	r3
 8011d94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d96:	e091      	b.n	8011ebc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011d98:	6839      	ldr	r1, [r7, #0]
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f000 faaa 	bl	80122f4 <USBD_CtlError>
        err++;
 8011da0:	7afb      	ldrb	r3, [r7, #11]
 8011da2:	3301      	adds	r3, #1
 8011da4:	72fb      	strb	r3, [r7, #11]
      break;
 8011da6:	e089      	b.n	8011ebc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dae:	689b      	ldr	r3, [r3, #8]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00b      	beq.n	8011dcc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dba:	689b      	ldr	r3, [r3, #8]
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	7c12      	ldrb	r2, [r2, #16]
 8011dc0:	f107 0108 	add.w	r1, r7, #8
 8011dc4:	4610      	mov	r0, r2
 8011dc6:	4798      	blx	r3
 8011dc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011dca:	e077      	b.n	8011ebc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011dcc:	6839      	ldr	r1, [r7, #0]
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 fa90 	bl	80122f4 <USBD_CtlError>
        err++;
 8011dd4:	7afb      	ldrb	r3, [r7, #11]
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	72fb      	strb	r3, [r7, #11]
      break;
 8011dda:	e06f      	b.n	8011ebc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d00b      	beq.n	8011e00 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	7c12      	ldrb	r2, [r2, #16]
 8011df4:	f107 0108 	add.w	r1, r7, #8
 8011df8:	4610      	mov	r0, r2
 8011dfa:	4798      	blx	r3
 8011dfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011dfe:	e05d      	b.n	8011ebc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e00:	6839      	ldr	r1, [r7, #0]
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f000 fa76 	bl	80122f4 <USBD_CtlError>
        err++;
 8011e08:	7afb      	ldrb	r3, [r7, #11]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8011e0e:	e055      	b.n	8011ebc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e16:	691b      	ldr	r3, [r3, #16]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00b      	beq.n	8011e34 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e22:	691b      	ldr	r3, [r3, #16]
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	7c12      	ldrb	r2, [r2, #16]
 8011e28:	f107 0108 	add.w	r1, r7, #8
 8011e2c:	4610      	mov	r0, r2
 8011e2e:	4798      	blx	r3
 8011e30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e32:	e043      	b.n	8011ebc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e34:	6839      	ldr	r1, [r7, #0]
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 fa5c 	bl	80122f4 <USBD_CtlError>
        err++;
 8011e3c:	7afb      	ldrb	r3, [r7, #11]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	72fb      	strb	r3, [r7, #11]
      break;
 8011e42:	e03b      	b.n	8011ebc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e4a:	695b      	ldr	r3, [r3, #20]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00b      	beq.n	8011e68 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e56:	695b      	ldr	r3, [r3, #20]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	7c12      	ldrb	r2, [r2, #16]
 8011e5c:	f107 0108 	add.w	r1, r7, #8
 8011e60:	4610      	mov	r0, r2
 8011e62:	4798      	blx	r3
 8011e64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e66:	e029      	b.n	8011ebc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e68:	6839      	ldr	r1, [r7, #0]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 fa42 	bl	80122f4 <USBD_CtlError>
        err++;
 8011e70:	7afb      	ldrb	r3, [r7, #11]
 8011e72:	3301      	adds	r3, #1
 8011e74:	72fb      	strb	r3, [r7, #11]
      break;
 8011e76:	e021      	b.n	8011ebc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d00b      	beq.n	8011e9c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e8a:	699b      	ldr	r3, [r3, #24]
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	7c12      	ldrb	r2, [r2, #16]
 8011e90:	f107 0108 	add.w	r1, r7, #8
 8011e94:	4610      	mov	r0, r2
 8011e96:	4798      	blx	r3
 8011e98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e9a:	e00f      	b.n	8011ebc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011e9c:	6839      	ldr	r1, [r7, #0]
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 fa28 	bl	80122f4 <USBD_CtlError>
        err++;
 8011ea4:	7afb      	ldrb	r3, [r7, #11]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	72fb      	strb	r3, [r7, #11]
      break;
 8011eaa:	e007      	b.n	8011ebc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011eac:	6839      	ldr	r1, [r7, #0]
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 fa20 	bl	80122f4 <USBD_CtlError>
      err++;
 8011eb4:	7afb      	ldrb	r3, [r7, #11]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011eba:	bf00      	nop
    }
    break;
 8011ebc:	e037      	b.n	8011f2e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	7c1b      	ldrb	r3, [r3, #16]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d109      	bne.n	8011eda <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ece:	f107 0208 	add.w	r2, r7, #8
 8011ed2:	4610      	mov	r0, r2
 8011ed4:	4798      	blx	r3
 8011ed6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011ed8:	e029      	b.n	8011f2e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011eda:	6839      	ldr	r1, [r7, #0]
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f000 fa09 	bl	80122f4 <USBD_CtlError>
      err++;
 8011ee2:	7afb      	ldrb	r3, [r7, #11]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	72fb      	strb	r3, [r7, #11]
    break;
 8011ee8:	e021      	b.n	8011f2e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	7c1b      	ldrb	r3, [r3, #16]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d10d      	bne.n	8011f0e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011efa:	f107 0208 	add.w	r2, r7, #8
 8011efe:	4610      	mov	r0, r2
 8011f00:	4798      	blx	r3
 8011f02:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	3301      	adds	r3, #1
 8011f08:	2207      	movs	r2, #7
 8011f0a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011f0c:	e00f      	b.n	8011f2e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011f0e:	6839      	ldr	r1, [r7, #0]
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 f9ef 	bl	80122f4 <USBD_CtlError>
      err++;
 8011f16:	7afb      	ldrb	r3, [r7, #11]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	72fb      	strb	r3, [r7, #11]
    break;
 8011f1c:	e007      	b.n	8011f2e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011f1e:	6839      	ldr	r1, [r7, #0]
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f000 f9e7 	bl	80122f4 <USBD_CtlError>
    err++;
 8011f26:	7afb      	ldrb	r3, [r7, #11]
 8011f28:	3301      	adds	r3, #1
 8011f2a:	72fb      	strb	r3, [r7, #11]
    break;
 8011f2c:	bf00      	nop
  }

  if (err != 0U)
 8011f2e:	7afb      	ldrb	r3, [r7, #11]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d11e      	bne.n	8011f72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	88db      	ldrh	r3, [r3, #6]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d016      	beq.n	8011f6a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011f3c:	893b      	ldrh	r3, [r7, #8]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d00e      	beq.n	8011f60 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	88da      	ldrh	r2, [r3, #6]
 8011f46:	893b      	ldrh	r3, [r7, #8]
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	bf28      	it	cs
 8011f4c:	4613      	movcs	r3, r2
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011f52:	893b      	ldrh	r3, [r7, #8]
 8011f54:	461a      	mov	r2, r3
 8011f56:	68f9      	ldr	r1, [r7, #12]
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 fa3c 	bl	80123d6 <USBD_CtlSendData>
 8011f5e:	e009      	b.n	8011f74 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011f60:	6839      	ldr	r1, [r7, #0]
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f000 f9c6 	bl	80122f4 <USBD_CtlError>
 8011f68:	e004      	b.n	8011f74 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 fa70 	bl	8012450 <USBD_CtlSendStatus>
 8011f70:	e000      	b.n	8011f74 <USBD_GetDescriptor+0x2cc>
    return;
 8011f72:	bf00      	nop
    }
  }
}
 8011f74:	3710      	adds	r7, #16
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop

08011f7c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b084      	sub	sp, #16
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	889b      	ldrh	r3, [r3, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d130      	bne.n	8011ff0 <USBD_SetAddress+0x74>
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	88db      	ldrh	r3, [r3, #6]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d12c      	bne.n	8011ff0 <USBD_SetAddress+0x74>
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	885b      	ldrh	r3, [r3, #2]
 8011f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8011f9c:	d828      	bhi.n	8011ff0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	885b      	ldrh	r3, [r3, #2]
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fa8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fb0:	2b03      	cmp	r3, #3
 8011fb2:	d104      	bne.n	8011fbe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011fb4:	6839      	ldr	r1, [r7, #0]
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 f99c 	bl	80122f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fbc:	e01c      	b.n	8011ff8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	7bfa      	ldrb	r2, [r7, #15]
 8011fc2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011fc6:	7bfb      	ldrb	r3, [r7, #15]
 8011fc8:	4619      	mov	r1, r3
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f003 f9b5 	bl	801533a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 fa3d 	bl	8012450 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011fd6:	7bfb      	ldrb	r3, [r7, #15]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d004      	beq.n	8011fe6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2202      	movs	r2, #2
 8011fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fe4:	e008      	b.n	8011ff8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2201      	movs	r2, #1
 8011fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fee:	e003      	b.n	8011ff8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011ff0:	6839      	ldr	r1, [r7, #0]
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f000 f97e 	bl	80122f4 <USBD_CtlError>
  }
}
 8011ff8:	bf00      	nop
 8011ffa:	3710      	adds	r7, #16
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	885b      	ldrh	r3, [r3, #2]
 8012012:	b2da      	uxtb	r2, r3
 8012014:	4b4b      	ldr	r3, [pc, #300]	; (8012144 <USBD_SetConfig+0x144>)
 8012016:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012018:	4b4a      	ldr	r3, [pc, #296]	; (8012144 <USBD_SetConfig+0x144>)
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d905      	bls.n	801202c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012020:	6839      	ldr	r1, [r7, #0]
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 f966 	bl	80122f4 <USBD_CtlError>
    return USBD_FAIL;
 8012028:	2303      	movs	r3, #3
 801202a:	e087      	b.n	801213c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012032:	2b02      	cmp	r3, #2
 8012034:	d002      	beq.n	801203c <USBD_SetConfig+0x3c>
 8012036:	2b03      	cmp	r3, #3
 8012038:	d025      	beq.n	8012086 <USBD_SetConfig+0x86>
 801203a:	e071      	b.n	8012120 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801203c:	4b41      	ldr	r3, [pc, #260]	; (8012144 <USBD_SetConfig+0x144>)
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d01c      	beq.n	801207e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012044:	4b3f      	ldr	r3, [pc, #252]	; (8012144 <USBD_SetConfig+0x144>)
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	461a      	mov	r2, r3
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801204e:	4b3d      	ldr	r3, [pc, #244]	; (8012144 <USBD_SetConfig+0x144>)
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	4619      	mov	r1, r3
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff f9a8 	bl	80113aa <USBD_SetClassConfig>
 801205a:	4603      	mov	r3, r0
 801205c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801205e:	7bfb      	ldrb	r3, [r7, #15]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d004      	beq.n	801206e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012064:	6839      	ldr	r1, [r7, #0]
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 f944 	bl	80122f4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801206c:	e065      	b.n	801213a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f000 f9ee 	bl	8012450 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2203      	movs	r2, #3
 8012078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801207c:	e05d      	b.n	801213a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f000 f9e6 	bl	8012450 <USBD_CtlSendStatus>
    break;
 8012084:	e059      	b.n	801213a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012086:	4b2f      	ldr	r3, [pc, #188]	; (8012144 <USBD_SetConfig+0x144>)
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d112      	bne.n	80120b4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2202      	movs	r2, #2
 8012092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012096:	4b2b      	ldr	r3, [pc, #172]	; (8012144 <USBD_SetConfig+0x144>)
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	461a      	mov	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80120a0:	4b28      	ldr	r3, [pc, #160]	; (8012144 <USBD_SetConfig+0x144>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	4619      	mov	r1, r3
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7ff f99b 	bl	80113e2 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 f9cf 	bl	8012450 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80120b2:	e042      	b.n	801213a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80120b4:	4b23      	ldr	r3, [pc, #140]	; (8012144 <USBD_SetConfig+0x144>)
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	461a      	mov	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d02a      	beq.n	8012118 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	4619      	mov	r1, r3
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff f989 	bl	80113e2 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80120d0:	4b1c      	ldr	r3, [pc, #112]	; (8012144 <USBD_SetConfig+0x144>)
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	461a      	mov	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80120da:	4b1a      	ldr	r3, [pc, #104]	; (8012144 <USBD_SetConfig+0x144>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	4619      	mov	r1, r3
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7ff f962 	bl	80113aa <USBD_SetClassConfig>
 80120e6:	4603      	mov	r3, r0
 80120e8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80120ea:	7bfb      	ldrb	r3, [r7, #15]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00f      	beq.n	8012110 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 f8fe 	bl	80122f4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	4619      	mov	r1, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff f96e 	bl	80113e2 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2202      	movs	r2, #2
 801210a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801210e:	e014      	b.n	801213a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 f99d 	bl	8012450 <USBD_CtlSendStatus>
    break;
 8012116:	e010      	b.n	801213a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 f999 	bl	8012450 <USBD_CtlSendStatus>
    break;
 801211e:	e00c      	b.n	801213a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 f8e6 	bl	80122f4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012128:	4b06      	ldr	r3, [pc, #24]	; (8012144 <USBD_SetConfig+0x144>)
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	4619      	mov	r1, r3
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff f957 	bl	80113e2 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012134:	2303      	movs	r3, #3
 8012136:	73fb      	strb	r3, [r7, #15]
    break;
 8012138:	bf00      	nop
  }

  return ret;
 801213a:	7bfb      	ldrb	r3, [r7, #15]
}
 801213c:	4618      	mov	r0, r3
 801213e:	3710      	adds	r7, #16
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	24040200 	.word	0x24040200

08012148 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	88db      	ldrh	r3, [r3, #6]
 8012156:	2b01      	cmp	r3, #1
 8012158:	d004      	beq.n	8012164 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801215a:	6839      	ldr	r1, [r7, #0]
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f000 f8c9 	bl	80122f4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012162:	e021      	b.n	80121a8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801216a:	2b01      	cmp	r3, #1
 801216c:	db17      	blt.n	801219e <USBD_GetConfig+0x56>
 801216e:	2b02      	cmp	r3, #2
 8012170:	dd02      	ble.n	8012178 <USBD_GetConfig+0x30>
 8012172:	2b03      	cmp	r3, #3
 8012174:	d00b      	beq.n	801218e <USBD_GetConfig+0x46>
 8012176:	e012      	b.n	801219e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	3308      	adds	r3, #8
 8012182:	2201      	movs	r2, #1
 8012184:	4619      	mov	r1, r3
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 f925 	bl	80123d6 <USBD_CtlSendData>
      break;
 801218c:	e00c      	b.n	80121a8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	3304      	adds	r3, #4
 8012192:	2201      	movs	r2, #1
 8012194:	4619      	mov	r1, r3
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f000 f91d 	bl	80123d6 <USBD_CtlSendData>
      break;
 801219c:	e004      	b.n	80121a8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801219e:	6839      	ldr	r1, [r7, #0]
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 f8a7 	bl	80122f4 <USBD_CtlError>
      break;
 80121a6:	bf00      	nop
}
 80121a8:	bf00      	nop
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121c0:	3b01      	subs	r3, #1
 80121c2:	2b02      	cmp	r3, #2
 80121c4:	d81e      	bhi.n	8012204 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	88db      	ldrh	r3, [r3, #6]
 80121ca:	2b02      	cmp	r3, #2
 80121cc:	d004      	beq.n	80121d8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80121ce:	6839      	ldr	r1, [r7, #0]
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f000 f88f 	bl	80122f4 <USBD_CtlError>
      break;
 80121d6:	e01a      	b.n	801220e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2201      	movs	r2, #1
 80121dc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d005      	beq.n	80121f4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	f043 0202 	orr.w	r2, r3, #2
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	330c      	adds	r3, #12
 80121f8:	2202      	movs	r2, #2
 80121fa:	4619      	mov	r1, r3
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f000 f8ea 	bl	80123d6 <USBD_CtlSendData>
    break;
 8012202:	e004      	b.n	801220e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012204:	6839      	ldr	r1, [r7, #0]
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 f874 	bl	80122f4 <USBD_CtlError>
    break;
 801220c:	bf00      	nop
  }
}
 801220e:	bf00      	nop
 8012210:	3708      	adds	r7, #8
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}

08012216 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012216:	b580      	push	{r7, lr}
 8012218:	b082      	sub	sp, #8
 801221a:	af00      	add	r7, sp, #0
 801221c:	6078      	str	r0, [r7, #4]
 801221e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	885b      	ldrh	r3, [r3, #2]
 8012224:	2b01      	cmp	r3, #1
 8012226:	d106      	bne.n	8012236 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2201      	movs	r2, #1
 801222c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 f90d 	bl	8012450 <USBD_CtlSendStatus>
  }
}
 8012236:	bf00      	nop
 8012238:	3708      	adds	r7, #8
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}

0801223e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801223e:	b580      	push	{r7, lr}
 8012240:	b082      	sub	sp, #8
 8012242:	af00      	add	r7, sp, #0
 8012244:	6078      	str	r0, [r7, #4]
 8012246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801224e:	3b01      	subs	r3, #1
 8012250:	2b02      	cmp	r3, #2
 8012252:	d80b      	bhi.n	801226c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	885b      	ldrh	r3, [r3, #2]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d10c      	bne.n	8012276 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2200      	movs	r2, #0
 8012260:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 f8f3 	bl	8012450 <USBD_CtlSendStatus>
      }
      break;
 801226a:	e004      	b.n	8012276 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801226c:	6839      	ldr	r1, [r7, #0]
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 f840 	bl	80122f4 <USBD_CtlError>
      break;
 8012274:	e000      	b.n	8012278 <USBD_ClrFeature+0x3a>
      break;
 8012276:	bf00      	nop
  }
}
 8012278:	bf00      	nop
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	781a      	ldrb	r2, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	3301      	adds	r3, #1
 801229a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	781a      	ldrb	r2, [r3, #0]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	3301      	adds	r3, #1
 80122a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	f7ff fad4 	bl	8011858 <SWAPBYTE>
 80122b0:	4603      	mov	r3, r0
 80122b2:	461a      	mov	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	3301      	adds	r3, #1
 80122bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	3301      	adds	r3, #1
 80122c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f7ff fac7 	bl	8011858 <SWAPBYTE>
 80122ca:	4603      	mov	r3, r0
 80122cc:	461a      	mov	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	3301      	adds	r3, #1
 80122d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	3301      	adds	r3, #1
 80122dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f7ff faba 	bl	8011858 <SWAPBYTE>
 80122e4:	4603      	mov	r3, r0
 80122e6:	461a      	mov	r2, r3
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	80da      	strh	r2, [r3, #6]
}
 80122ec:	bf00      	nop
 80122ee:	3710      	adds	r7, #16
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80122fe:	2180      	movs	r1, #128	; 0x80
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f002 ffb0 	bl	8015266 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012306:	2100      	movs	r1, #0
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f002 ffac 	bl	8015266 <USBD_LL_StallEP>
}
 801230e:	bf00      	nop
 8012310:	3708      	adds	r7, #8
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}

08012316 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012316:	b580      	push	{r7, lr}
 8012318:	b086      	sub	sp, #24
 801231a:	af00      	add	r7, sp, #0
 801231c:	60f8      	str	r0, [r7, #12]
 801231e:	60b9      	str	r1, [r7, #8]
 8012320:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012322:	2300      	movs	r3, #0
 8012324:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d036      	beq.n	801239a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012330:	6938      	ldr	r0, [r7, #16]
 8012332:	f000 f836 	bl	80123a2 <USBD_GetLen>
 8012336:	4603      	mov	r3, r0
 8012338:	3301      	adds	r3, #1
 801233a:	b29b      	uxth	r3, r3
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	b29a      	uxth	r2, r3
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012344:	7dfb      	ldrb	r3, [r7, #23]
 8012346:	68ba      	ldr	r2, [r7, #8]
 8012348:	4413      	add	r3, r2
 801234a:	687a      	ldr	r2, [r7, #4]
 801234c:	7812      	ldrb	r2, [r2, #0]
 801234e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012350:	7dfb      	ldrb	r3, [r7, #23]
 8012352:	3301      	adds	r3, #1
 8012354:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012356:	7dfb      	ldrb	r3, [r7, #23]
 8012358:	68ba      	ldr	r2, [r7, #8]
 801235a:	4413      	add	r3, r2
 801235c:	2203      	movs	r2, #3
 801235e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012360:	7dfb      	ldrb	r3, [r7, #23]
 8012362:	3301      	adds	r3, #1
 8012364:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012366:	e013      	b.n	8012390 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012368:	7dfb      	ldrb	r3, [r7, #23]
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	4413      	add	r3, r2
 801236e:	693a      	ldr	r2, [r7, #16]
 8012370:	7812      	ldrb	r2, [r2, #0]
 8012372:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	3301      	adds	r3, #1
 8012378:	613b      	str	r3, [r7, #16]
    idx++;
 801237a:	7dfb      	ldrb	r3, [r7, #23]
 801237c:	3301      	adds	r3, #1
 801237e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012380:	7dfb      	ldrb	r3, [r7, #23]
 8012382:	68ba      	ldr	r2, [r7, #8]
 8012384:	4413      	add	r3, r2
 8012386:	2200      	movs	r2, #0
 8012388:	701a      	strb	r2, [r3, #0]
    idx++;
 801238a:	7dfb      	ldrb	r3, [r7, #23]
 801238c:	3301      	adds	r3, #1
 801238e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d1e7      	bne.n	8012368 <USBD_GetString+0x52>
 8012398:	e000      	b.n	801239c <USBD_GetString+0x86>
    return;
 801239a:	bf00      	nop
  }
}
 801239c:	3718      	adds	r7, #24
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80123a2:	b480      	push	{r7}
 80123a4:	b085      	sub	sp, #20
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80123aa:	2300      	movs	r3, #0
 80123ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80123b2:	e005      	b.n	80123c0 <USBD_GetLen+0x1e>
  {
    len++;
 80123b4:	7bfb      	ldrb	r3, [r7, #15]
 80123b6:	3301      	adds	r3, #1
 80123b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	3301      	adds	r3, #1
 80123be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d1f5      	bne.n	80123b4 <USBD_GetLen+0x12>
  }

  return len;
 80123c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3714      	adds	r7, #20
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr

080123d6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80123d6:	b580      	push	{r7, lr}
 80123d8:	b084      	sub	sp, #16
 80123da:	af00      	add	r7, sp, #0
 80123dc:	60f8      	str	r0, [r7, #12]
 80123de:	60b9      	str	r1, [r7, #8]
 80123e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	2202      	movs	r2, #2
 80123e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	687a      	ldr	r2, [r7, #4]
 80123f4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	68ba      	ldr	r2, [r7, #8]
 80123fa:	2100      	movs	r1, #0
 80123fc:	68f8      	ldr	r0, [r7, #12]
 80123fe:	f002 ffbb 	bl	8015378 <USBD_LL_Transmit>

  return USBD_OK;
 8012402:	2300      	movs	r3, #0
}
 8012404:	4618      	mov	r0, r3
 8012406:	3710      	adds	r7, #16
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	60b9      	str	r1, [r7, #8]
 8012416:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	68ba      	ldr	r2, [r7, #8]
 801241c:	2100      	movs	r1, #0
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f002 ffaa 	bl	8015378 <USBD_LL_Transmit>

  return USBD_OK;
 8012424:	2300      	movs	r3, #0
}
 8012426:	4618      	mov	r0, r3
 8012428:	3710      	adds	r7, #16
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b084      	sub	sp, #16
 8012432:	af00      	add	r7, sp, #0
 8012434:	60f8      	str	r0, [r7, #12]
 8012436:	60b9      	str	r1, [r7, #8]
 8012438:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	68ba      	ldr	r2, [r7, #8]
 801243e:	2100      	movs	r1, #0
 8012440:	68f8      	ldr	r0, [r7, #12]
 8012442:	f002 ffba 	bl	80153ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012446:	2300      	movs	r3, #0
}
 8012448:	4618      	mov	r0, r3
 801244a:	3710      	adds	r7, #16
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2204      	movs	r2, #4
 801245c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012460:	2300      	movs	r3, #0
 8012462:	2200      	movs	r2, #0
 8012464:	2100      	movs	r1, #0
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f002 ff86 	bl	8015378 <USBD_LL_Transmit>

  return USBD_OK;
 801246c:	2300      	movs	r3, #0
}
 801246e:	4618      	mov	r0, r3
 8012470:	3708      	adds	r7, #8
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}

08012476 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012476:	b580      	push	{r7, lr}
 8012478:	b082      	sub	sp, #8
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2205      	movs	r2, #5
 8012482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012486:	2300      	movs	r3, #0
 8012488:	2200      	movs	r2, #0
 801248a:	2100      	movs	r1, #0
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f002 ff94 	bl	80153ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012492:	2300      	movs	r3, #0
}
 8012494:	4618      	mov	r0, r3
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	4603      	mov	r3, r0
 80124a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80124a6:	79fb      	ldrb	r3, [r7, #7]
 80124a8:	4a08      	ldr	r2, [pc, #32]	; (80124cc <disk_status+0x30>)
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	4413      	add	r3, r2
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	79fa      	ldrb	r2, [r7, #7]
 80124b4:	4905      	ldr	r1, [pc, #20]	; (80124cc <disk_status+0x30>)
 80124b6:	440a      	add	r2, r1
 80124b8:	7a12      	ldrb	r2, [r2, #8]
 80124ba:	4610      	mov	r0, r2
 80124bc:	4798      	blx	r3
 80124be:	4603      	mov	r3, r0
 80124c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80124c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3710      	adds	r7, #16
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	2404022c 	.word	0x2404022c

080124d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b084      	sub	sp, #16
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	4603      	mov	r3, r0
 80124d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80124da:	2300      	movs	r3, #0
 80124dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80124de:	79fb      	ldrb	r3, [r7, #7]
 80124e0:	4a0d      	ldr	r2, [pc, #52]	; (8012518 <disk_initialize+0x48>)
 80124e2:	5cd3      	ldrb	r3, [r2, r3]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d111      	bne.n	801250c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80124e8:	79fb      	ldrb	r3, [r7, #7]
 80124ea:	4a0b      	ldr	r2, [pc, #44]	; (8012518 <disk_initialize+0x48>)
 80124ec:	2101      	movs	r1, #1
 80124ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80124f0:	79fb      	ldrb	r3, [r7, #7]
 80124f2:	4a09      	ldr	r2, [pc, #36]	; (8012518 <disk_initialize+0x48>)
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	79fa      	ldrb	r2, [r7, #7]
 80124fe:	4906      	ldr	r1, [pc, #24]	; (8012518 <disk_initialize+0x48>)
 8012500:	440a      	add	r2, r1
 8012502:	7a12      	ldrb	r2, [r2, #8]
 8012504:	4610      	mov	r0, r2
 8012506:	4798      	blx	r3
 8012508:	4603      	mov	r3, r0
 801250a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801250c:	7bfb      	ldrb	r3, [r7, #15]
}
 801250e:	4618      	mov	r0, r3
 8012510:	3710      	adds	r7, #16
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	2404022c 	.word	0x2404022c

0801251c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801251c:	b590      	push	{r4, r7, lr}
 801251e:	b087      	sub	sp, #28
 8012520:	af00      	add	r7, sp, #0
 8012522:	60b9      	str	r1, [r7, #8]
 8012524:	607a      	str	r2, [r7, #4]
 8012526:	603b      	str	r3, [r7, #0]
 8012528:	4603      	mov	r3, r0
 801252a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801252c:	7bfb      	ldrb	r3, [r7, #15]
 801252e:	4a0a      	ldr	r2, [pc, #40]	; (8012558 <disk_read+0x3c>)
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4413      	add	r3, r2
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	689c      	ldr	r4, [r3, #8]
 8012538:	7bfb      	ldrb	r3, [r7, #15]
 801253a:	4a07      	ldr	r2, [pc, #28]	; (8012558 <disk_read+0x3c>)
 801253c:	4413      	add	r3, r2
 801253e:	7a18      	ldrb	r0, [r3, #8]
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	68b9      	ldr	r1, [r7, #8]
 8012546:	47a0      	blx	r4
 8012548:	4603      	mov	r3, r0
 801254a:	75fb      	strb	r3, [r7, #23]
  return res;
 801254c:	7dfb      	ldrb	r3, [r7, #23]
}
 801254e:	4618      	mov	r0, r3
 8012550:	371c      	adds	r7, #28
 8012552:	46bd      	mov	sp, r7
 8012554:	bd90      	pop	{r4, r7, pc}
 8012556:	bf00      	nop
 8012558:	2404022c 	.word	0x2404022c

0801255c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801255c:	b590      	push	{r4, r7, lr}
 801255e:	b087      	sub	sp, #28
 8012560:	af00      	add	r7, sp, #0
 8012562:	60b9      	str	r1, [r7, #8]
 8012564:	607a      	str	r2, [r7, #4]
 8012566:	603b      	str	r3, [r7, #0]
 8012568:	4603      	mov	r3, r0
 801256a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801256c:	7bfb      	ldrb	r3, [r7, #15]
 801256e:	4a0a      	ldr	r2, [pc, #40]	; (8012598 <disk_write+0x3c>)
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	4413      	add	r3, r2
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	68dc      	ldr	r4, [r3, #12]
 8012578:	7bfb      	ldrb	r3, [r7, #15]
 801257a:	4a07      	ldr	r2, [pc, #28]	; (8012598 <disk_write+0x3c>)
 801257c:	4413      	add	r3, r2
 801257e:	7a18      	ldrb	r0, [r3, #8]
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	68b9      	ldr	r1, [r7, #8]
 8012586:	47a0      	blx	r4
 8012588:	4603      	mov	r3, r0
 801258a:	75fb      	strb	r3, [r7, #23]
  return res;
 801258c:	7dfb      	ldrb	r3, [r7, #23]
}
 801258e:	4618      	mov	r0, r3
 8012590:	371c      	adds	r7, #28
 8012592:	46bd      	mov	sp, r7
 8012594:	bd90      	pop	{r4, r7, pc}
 8012596:	bf00      	nop
 8012598:	2404022c 	.word	0x2404022c

0801259c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	4603      	mov	r3, r0
 80125a4:	603a      	str	r2, [r7, #0]
 80125a6:	71fb      	strb	r3, [r7, #7]
 80125a8:	460b      	mov	r3, r1
 80125aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80125ac:	79fb      	ldrb	r3, [r7, #7]
 80125ae:	4a09      	ldr	r2, [pc, #36]	; (80125d4 <disk_ioctl+0x38>)
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	4413      	add	r3, r2
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	691b      	ldr	r3, [r3, #16]
 80125b8:	79fa      	ldrb	r2, [r7, #7]
 80125ba:	4906      	ldr	r1, [pc, #24]	; (80125d4 <disk_ioctl+0x38>)
 80125bc:	440a      	add	r2, r1
 80125be:	7a10      	ldrb	r0, [r2, #8]
 80125c0:	79b9      	ldrb	r1, [r7, #6]
 80125c2:	683a      	ldr	r2, [r7, #0]
 80125c4:	4798      	blx	r3
 80125c6:	4603      	mov	r3, r0
 80125c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80125ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3710      	adds	r7, #16
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	2404022c 	.word	0x2404022c

080125d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80125d8:	b480      	push	{r7}
 80125da:	b085      	sub	sp, #20
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	3301      	adds	r3, #1
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80125e8:	89fb      	ldrh	r3, [r7, #14]
 80125ea:	021b      	lsls	r3, r3, #8
 80125ec:	b21a      	sxth	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	b21b      	sxth	r3, r3
 80125f4:	4313      	orrs	r3, r2
 80125f6:	b21b      	sxth	r3, r3
 80125f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80125fa:	89fb      	ldrh	r3, [r7, #14]
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3714      	adds	r7, #20
 8012600:	46bd      	mov	sp, r7
 8012602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012606:	4770      	bx	lr

08012608 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012608:	b480      	push	{r7}
 801260a:	b085      	sub	sp, #20
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	3303      	adds	r3, #3
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	021b      	lsls	r3, r3, #8
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	3202      	adds	r2, #2
 8012620:	7812      	ldrb	r2, [r2, #0]
 8012622:	4313      	orrs	r3, r2
 8012624:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	021b      	lsls	r3, r3, #8
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	3201      	adds	r2, #1
 801262e:	7812      	ldrb	r2, [r2, #0]
 8012630:	4313      	orrs	r3, r2
 8012632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	021b      	lsls	r3, r3, #8
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	7812      	ldrb	r2, [r2, #0]
 801263c:	4313      	orrs	r3, r2
 801263e:	60fb      	str	r3, [r7, #12]
	return rv;
 8012640:	68fb      	ldr	r3, [r7, #12]
}
 8012642:	4618      	mov	r0, r3
 8012644:	3714      	adds	r7, #20
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr

0801264e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801264e:	b480      	push	{r7}
 8012650:	b083      	sub	sp, #12
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
 8012656:	460b      	mov	r3, r1
 8012658:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	1c5a      	adds	r2, r3, #1
 801265e:	607a      	str	r2, [r7, #4]
 8012660:	887a      	ldrh	r2, [r7, #2]
 8012662:	b2d2      	uxtb	r2, r2
 8012664:	701a      	strb	r2, [r3, #0]
 8012666:	887b      	ldrh	r3, [r7, #2]
 8012668:	0a1b      	lsrs	r3, r3, #8
 801266a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	1c5a      	adds	r2, r3, #1
 8012670:	607a      	str	r2, [r7, #4]
 8012672:	887a      	ldrh	r2, [r7, #2]
 8012674:	b2d2      	uxtb	r2, r2
 8012676:	701a      	strb	r2, [r3, #0]
}
 8012678:	bf00      	nop
 801267a:	370c      	adds	r7, #12
 801267c:	46bd      	mov	sp, r7
 801267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012682:	4770      	bx	lr

08012684 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012684:	b480      	push	{r7}
 8012686:	b083      	sub	sp, #12
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	1c5a      	adds	r2, r3, #1
 8012692:	607a      	str	r2, [r7, #4]
 8012694:	683a      	ldr	r2, [r7, #0]
 8012696:	b2d2      	uxtb	r2, r2
 8012698:	701a      	strb	r2, [r3, #0]
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	0a1b      	lsrs	r3, r3, #8
 801269e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	1c5a      	adds	r2, r3, #1
 80126a4:	607a      	str	r2, [r7, #4]
 80126a6:	683a      	ldr	r2, [r7, #0]
 80126a8:	b2d2      	uxtb	r2, r2
 80126aa:	701a      	strb	r2, [r3, #0]
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	0a1b      	lsrs	r3, r3, #8
 80126b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	1c5a      	adds	r2, r3, #1
 80126b6:	607a      	str	r2, [r7, #4]
 80126b8:	683a      	ldr	r2, [r7, #0]
 80126ba:	b2d2      	uxtb	r2, r2
 80126bc:	701a      	strb	r2, [r3, #0]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	0a1b      	lsrs	r3, r3, #8
 80126c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	1c5a      	adds	r2, r3, #1
 80126c8:	607a      	str	r2, [r7, #4]
 80126ca:	683a      	ldr	r2, [r7, #0]
 80126cc:	b2d2      	uxtb	r2, r2
 80126ce:	701a      	strb	r2, [r3, #0]
}
 80126d0:	bf00      	nop
 80126d2:	370c      	adds	r7, #12
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr

080126dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80126dc:	b480      	push	{r7}
 80126de:	b087      	sub	sp, #28
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d00d      	beq.n	8012712 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80126f6:	693a      	ldr	r2, [r7, #16]
 80126f8:	1c53      	adds	r3, r2, #1
 80126fa:	613b      	str	r3, [r7, #16]
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	1c59      	adds	r1, r3, #1
 8012700:	6179      	str	r1, [r7, #20]
 8012702:	7812      	ldrb	r2, [r2, #0]
 8012704:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	3b01      	subs	r3, #1
 801270a:	607b      	str	r3, [r7, #4]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d1f1      	bne.n	80126f6 <mem_cpy+0x1a>
	}
}
 8012712:	bf00      	nop
 8012714:	371c      	adds	r7, #28
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr

0801271e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801271e:	b480      	push	{r7}
 8012720:	b087      	sub	sp, #28
 8012722:	af00      	add	r7, sp, #0
 8012724:	60f8      	str	r0, [r7, #12]
 8012726:	60b9      	str	r1, [r7, #8]
 8012728:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	1c5a      	adds	r2, r3, #1
 8012732:	617a      	str	r2, [r7, #20]
 8012734:	68ba      	ldr	r2, [r7, #8]
 8012736:	b2d2      	uxtb	r2, r2
 8012738:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	3b01      	subs	r3, #1
 801273e:	607b      	str	r3, [r7, #4]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d1f3      	bne.n	801272e <mem_set+0x10>
}
 8012746:	bf00      	nop
 8012748:	371c      	adds	r7, #28
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr

08012752 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012752:	b480      	push	{r7}
 8012754:	b089      	sub	sp, #36	; 0x24
 8012756:	af00      	add	r7, sp, #0
 8012758:	60f8      	str	r0, [r7, #12]
 801275a:	60b9      	str	r1, [r7, #8]
 801275c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	61fb      	str	r3, [r7, #28]
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012766:	2300      	movs	r3, #0
 8012768:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801276a:	69fb      	ldr	r3, [r7, #28]
 801276c:	1c5a      	adds	r2, r3, #1
 801276e:	61fa      	str	r2, [r7, #28]
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	4619      	mov	r1, r3
 8012774:	69bb      	ldr	r3, [r7, #24]
 8012776:	1c5a      	adds	r2, r3, #1
 8012778:	61ba      	str	r2, [r7, #24]
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	1acb      	subs	r3, r1, r3
 801277e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	3b01      	subs	r3, #1
 8012784:	607b      	str	r3, [r7, #4]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d002      	beq.n	8012792 <mem_cmp+0x40>
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d0eb      	beq.n	801276a <mem_cmp+0x18>

	return r;
 8012792:	697b      	ldr	r3, [r7, #20]
}
 8012794:	4618      	mov	r0, r3
 8012796:	3724      	adds	r7, #36	; 0x24
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr

080127a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80127a0:	b480      	push	{r7}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80127aa:	e002      	b.n	80127b2 <chk_chr+0x12>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	3301      	adds	r3, #1
 80127b0:	607b      	str	r3, [r7, #4]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d005      	beq.n	80127c6 <chk_chr+0x26>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	461a      	mov	r2, r3
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d1f2      	bne.n	80127ac <chk_chr+0xc>
	return *str;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	781b      	ldrb	r3, [r3, #0]
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	370c      	adds	r7, #12
 80127ce:	46bd      	mov	sp, r7
 80127d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d4:	4770      	bx	lr
	...

080127d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80127d8:	b480      	push	{r7}
 80127da:	b085      	sub	sp, #20
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80127e2:	2300      	movs	r3, #0
 80127e4:	60bb      	str	r3, [r7, #8]
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	60fb      	str	r3, [r7, #12]
 80127ea:	e029      	b.n	8012840 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80127ec:	4a27      	ldr	r2, [pc, #156]	; (801288c <chk_lock+0xb4>)
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	011b      	lsls	r3, r3, #4
 80127f2:	4413      	add	r3, r2
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d01d      	beq.n	8012836 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80127fa:	4a24      	ldr	r2, [pc, #144]	; (801288c <chk_lock+0xb4>)
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	011b      	lsls	r3, r3, #4
 8012800:	4413      	add	r3, r2
 8012802:	681a      	ldr	r2, [r3, #0]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	429a      	cmp	r2, r3
 801280a:	d116      	bne.n	801283a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801280c:	4a1f      	ldr	r2, [pc, #124]	; (801288c <chk_lock+0xb4>)
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	011b      	lsls	r3, r3, #4
 8012812:	4413      	add	r3, r2
 8012814:	3304      	adds	r3, #4
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801281c:	429a      	cmp	r2, r3
 801281e:	d10c      	bne.n	801283a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012820:	4a1a      	ldr	r2, [pc, #104]	; (801288c <chk_lock+0xb4>)
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	011b      	lsls	r3, r3, #4
 8012826:	4413      	add	r3, r2
 8012828:	3308      	adds	r3, #8
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012830:	429a      	cmp	r2, r3
 8012832:	d102      	bne.n	801283a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012834:	e007      	b.n	8012846 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012836:	2301      	movs	r3, #1
 8012838:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	3301      	adds	r3, #1
 801283e:	60fb      	str	r3, [r7, #12]
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2b01      	cmp	r3, #1
 8012844:	d9d2      	bls.n	80127ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2b02      	cmp	r3, #2
 801284a:	d109      	bne.n	8012860 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d102      	bne.n	8012858 <chk_lock+0x80>
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	2b02      	cmp	r3, #2
 8012856:	d101      	bne.n	801285c <chk_lock+0x84>
 8012858:	2300      	movs	r3, #0
 801285a:	e010      	b.n	801287e <chk_lock+0xa6>
 801285c:	2312      	movs	r3, #18
 801285e:	e00e      	b.n	801287e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d108      	bne.n	8012878 <chk_lock+0xa0>
 8012866:	4a09      	ldr	r2, [pc, #36]	; (801288c <chk_lock+0xb4>)
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	011b      	lsls	r3, r3, #4
 801286c:	4413      	add	r3, r2
 801286e:	330c      	adds	r3, #12
 8012870:	881b      	ldrh	r3, [r3, #0]
 8012872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012876:	d101      	bne.n	801287c <chk_lock+0xa4>
 8012878:	2310      	movs	r3, #16
 801287a:	e000      	b.n	801287e <chk_lock+0xa6>
 801287c:	2300      	movs	r3, #0
}
 801287e:	4618      	mov	r0, r3
 8012880:	3714      	adds	r7, #20
 8012882:	46bd      	mov	sp, r7
 8012884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012888:	4770      	bx	lr
 801288a:	bf00      	nop
 801288c:	2404020c 	.word	0x2404020c

08012890 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012890:	b480      	push	{r7}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012896:	2300      	movs	r3, #0
 8012898:	607b      	str	r3, [r7, #4]
 801289a:	e002      	b.n	80128a2 <enq_lock+0x12>
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	3301      	adds	r3, #1
 80128a0:	607b      	str	r3, [r7, #4]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d806      	bhi.n	80128b6 <enq_lock+0x26>
 80128a8:	4a09      	ldr	r2, [pc, #36]	; (80128d0 <enq_lock+0x40>)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	011b      	lsls	r3, r3, #4
 80128ae:	4413      	add	r3, r2
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d1f2      	bne.n	801289c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2b02      	cmp	r3, #2
 80128ba:	bf14      	ite	ne
 80128bc:	2301      	movne	r3, #1
 80128be:	2300      	moveq	r3, #0
 80128c0:	b2db      	uxtb	r3, r3
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	370c      	adds	r7, #12
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	2404020c 	.word	0x2404020c

080128d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b085      	sub	sp, #20
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80128de:	2300      	movs	r3, #0
 80128e0:	60fb      	str	r3, [r7, #12]
 80128e2:	e01f      	b.n	8012924 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80128e4:	4a41      	ldr	r2, [pc, #260]	; (80129ec <inc_lock+0x118>)
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	011b      	lsls	r3, r3, #4
 80128ea:	4413      	add	r3, r2
 80128ec:	681a      	ldr	r2, [r3, #0]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d113      	bne.n	801291e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80128f6:	4a3d      	ldr	r2, [pc, #244]	; (80129ec <inc_lock+0x118>)
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	011b      	lsls	r3, r3, #4
 80128fc:	4413      	add	r3, r2
 80128fe:	3304      	adds	r3, #4
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012906:	429a      	cmp	r2, r3
 8012908:	d109      	bne.n	801291e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801290a:	4a38      	ldr	r2, [pc, #224]	; (80129ec <inc_lock+0x118>)
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	011b      	lsls	r3, r3, #4
 8012910:	4413      	add	r3, r2
 8012912:	3308      	adds	r3, #8
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801291a:	429a      	cmp	r2, r3
 801291c:	d006      	beq.n	801292c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	3301      	adds	r3, #1
 8012922:	60fb      	str	r3, [r7, #12]
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2b01      	cmp	r3, #1
 8012928:	d9dc      	bls.n	80128e4 <inc_lock+0x10>
 801292a:	e000      	b.n	801292e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801292c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2b02      	cmp	r3, #2
 8012932:	d132      	bne.n	801299a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012934:	2300      	movs	r3, #0
 8012936:	60fb      	str	r3, [r7, #12]
 8012938:	e002      	b.n	8012940 <inc_lock+0x6c>
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	3301      	adds	r3, #1
 801293e:	60fb      	str	r3, [r7, #12]
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2b01      	cmp	r3, #1
 8012944:	d806      	bhi.n	8012954 <inc_lock+0x80>
 8012946:	4a29      	ldr	r2, [pc, #164]	; (80129ec <inc_lock+0x118>)
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	011b      	lsls	r3, r3, #4
 801294c:	4413      	add	r3, r2
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d1f2      	bne.n	801293a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2b02      	cmp	r3, #2
 8012958:	d101      	bne.n	801295e <inc_lock+0x8a>
 801295a:	2300      	movs	r3, #0
 801295c:	e040      	b.n	80129e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	4922      	ldr	r1, [pc, #136]	; (80129ec <inc_lock+0x118>)
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	011b      	lsls	r3, r3, #4
 8012968:	440b      	add	r3, r1
 801296a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	689a      	ldr	r2, [r3, #8]
 8012970:	491e      	ldr	r1, [pc, #120]	; (80129ec <inc_lock+0x118>)
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	011b      	lsls	r3, r3, #4
 8012976:	440b      	add	r3, r1
 8012978:	3304      	adds	r3, #4
 801297a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	695a      	ldr	r2, [r3, #20]
 8012980:	491a      	ldr	r1, [pc, #104]	; (80129ec <inc_lock+0x118>)
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	011b      	lsls	r3, r3, #4
 8012986:	440b      	add	r3, r1
 8012988:	3308      	adds	r3, #8
 801298a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801298c:	4a17      	ldr	r2, [pc, #92]	; (80129ec <inc_lock+0x118>)
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	011b      	lsls	r3, r3, #4
 8012992:	4413      	add	r3, r2
 8012994:	330c      	adds	r3, #12
 8012996:	2200      	movs	r2, #0
 8012998:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d009      	beq.n	80129b4 <inc_lock+0xe0>
 80129a0:	4a12      	ldr	r2, [pc, #72]	; (80129ec <inc_lock+0x118>)
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	011b      	lsls	r3, r3, #4
 80129a6:	4413      	add	r3, r2
 80129a8:	330c      	adds	r3, #12
 80129aa:	881b      	ldrh	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d001      	beq.n	80129b4 <inc_lock+0xe0>
 80129b0:	2300      	movs	r3, #0
 80129b2:	e015      	b.n	80129e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d108      	bne.n	80129cc <inc_lock+0xf8>
 80129ba:	4a0c      	ldr	r2, [pc, #48]	; (80129ec <inc_lock+0x118>)
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	011b      	lsls	r3, r3, #4
 80129c0:	4413      	add	r3, r2
 80129c2:	330c      	adds	r3, #12
 80129c4:	881b      	ldrh	r3, [r3, #0]
 80129c6:	3301      	adds	r3, #1
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	e001      	b.n	80129d0 <inc_lock+0xfc>
 80129cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80129d0:	4906      	ldr	r1, [pc, #24]	; (80129ec <inc_lock+0x118>)
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	011b      	lsls	r3, r3, #4
 80129d6:	440b      	add	r3, r1
 80129d8:	330c      	adds	r3, #12
 80129da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	3301      	adds	r3, #1
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3714      	adds	r7, #20
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr
 80129ec:	2404020c 	.word	0x2404020c

080129f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80129f0:	b480      	push	{r7}
 80129f2:	b085      	sub	sp, #20
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	3b01      	subs	r3, #1
 80129fc:	607b      	str	r3, [r7, #4]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d825      	bhi.n	8012a50 <dec_lock+0x60>
		n = Files[i].ctr;
 8012a04:	4a17      	ldr	r2, [pc, #92]	; (8012a64 <dec_lock+0x74>)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	011b      	lsls	r3, r3, #4
 8012a0a:	4413      	add	r3, r2
 8012a0c:	330c      	adds	r3, #12
 8012a0e:	881b      	ldrh	r3, [r3, #0]
 8012a10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012a12:	89fb      	ldrh	r3, [r7, #14]
 8012a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a18:	d101      	bne.n	8012a1e <dec_lock+0x2e>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012a1e:	89fb      	ldrh	r3, [r7, #14]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d002      	beq.n	8012a2a <dec_lock+0x3a>
 8012a24:	89fb      	ldrh	r3, [r7, #14]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012a2a:	4a0e      	ldr	r2, [pc, #56]	; (8012a64 <dec_lock+0x74>)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	011b      	lsls	r3, r3, #4
 8012a30:	4413      	add	r3, r2
 8012a32:	330c      	adds	r3, #12
 8012a34:	89fa      	ldrh	r2, [r7, #14]
 8012a36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012a38:	89fb      	ldrh	r3, [r7, #14]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d105      	bne.n	8012a4a <dec_lock+0x5a>
 8012a3e:	4a09      	ldr	r2, [pc, #36]	; (8012a64 <dec_lock+0x74>)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	011b      	lsls	r3, r3, #4
 8012a44:	4413      	add	r3, r2
 8012a46:	2200      	movs	r2, #0
 8012a48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	737b      	strb	r3, [r7, #13]
 8012a4e:	e001      	b.n	8012a54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012a50:	2302      	movs	r3, #2
 8012a52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012a54:	7b7b      	ldrb	r3, [r7, #13]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3714      	adds	r7, #20
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr
 8012a62:	bf00      	nop
 8012a64:	2404020c 	.word	0x2404020c

08012a68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b085      	sub	sp, #20
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012a70:	2300      	movs	r3, #0
 8012a72:	60fb      	str	r3, [r7, #12]
 8012a74:	e010      	b.n	8012a98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012a76:	4a0d      	ldr	r2, [pc, #52]	; (8012aac <clear_lock+0x44>)
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	011b      	lsls	r3, r3, #4
 8012a7c:	4413      	add	r3, r2
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d105      	bne.n	8012a92 <clear_lock+0x2a>
 8012a86:	4a09      	ldr	r2, [pc, #36]	; (8012aac <clear_lock+0x44>)
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	011b      	lsls	r3, r3, #4
 8012a8c:	4413      	add	r3, r2
 8012a8e:	2200      	movs	r2, #0
 8012a90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	3301      	adds	r3, #1
 8012a96:	60fb      	str	r3, [r7, #12]
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d9eb      	bls.n	8012a76 <clear_lock+0xe>
	}
}
 8012a9e:	bf00      	nop
 8012aa0:	3714      	adds	r7, #20
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	2404020c 	.word	0x2404020c

08012ab0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b086      	sub	sp, #24
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	78db      	ldrb	r3, [r3, #3]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d034      	beq.n	8012b2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	7858      	ldrb	r0, [r3, #1]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	697a      	ldr	r2, [r7, #20]
 8012ad8:	f7ff fd40 	bl	801255c <disk_write>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d002      	beq.n	8012ae8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	73fb      	strb	r3, [r7, #15]
 8012ae6:	e022      	b.n	8012b2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2200      	movs	r2, #0
 8012aec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6a1b      	ldr	r3, [r3, #32]
 8012af2:	697a      	ldr	r2, [r7, #20]
 8012af4:	1ad2      	subs	r2, r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	699b      	ldr	r3, [r3, #24]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d217      	bcs.n	8012b2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	789b      	ldrb	r3, [r3, #2]
 8012b02:	613b      	str	r3, [r7, #16]
 8012b04:	e010      	b.n	8012b28 <sync_window+0x78>
					wsect += fs->fsize;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	699b      	ldr	r3, [r3, #24]
 8012b0a:	697a      	ldr	r2, [r7, #20]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	7858      	ldrb	r0, [r3, #1]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	697a      	ldr	r2, [r7, #20]
 8012b1e:	f7ff fd1d 	bl	801255c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012b22:	693b      	ldr	r3, [r7, #16]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	613b      	str	r3, [r7, #16]
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	d8eb      	bhi.n	8012b06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3718      	adds	r7, #24
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012b42:	2300      	movs	r3, #0
 8012b44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b4a:	683a      	ldr	r2, [r7, #0]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d01b      	beq.n	8012b88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f7ff ffad 	bl	8012ab0 <sync_window>
 8012b56:	4603      	mov	r3, r0
 8012b58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012b5a:	7bfb      	ldrb	r3, [r7, #15]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d113      	bne.n	8012b88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	7858      	ldrb	r0, [r3, #1]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	683a      	ldr	r2, [r7, #0]
 8012b6e:	f7ff fcd5 	bl	801251c <disk_read>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d004      	beq.n	8012b82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012b78:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012b7e:	2301      	movs	r3, #1
 8012b80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	683a      	ldr	r2, [r7, #0]
 8012b86:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8012b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
	...

08012b94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f7ff ff87 	bl	8012ab0 <sync_window>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012ba6:	7bfb      	ldrb	r3, [r7, #15]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d158      	bne.n	8012c5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b03      	cmp	r3, #3
 8012bb2:	d148      	bne.n	8012c46 <sync_fs+0xb2>
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	791b      	ldrb	r3, [r3, #4]
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	d144      	bne.n	8012c46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	3330      	adds	r3, #48	; 0x30
 8012bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bc4:	2100      	movs	r1, #0
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff fda9 	bl	801271e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	3330      	adds	r3, #48	; 0x30
 8012bd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012bd4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7ff fd38 	bl	801264e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	3330      	adds	r3, #48	; 0x30
 8012be2:	4921      	ldr	r1, [pc, #132]	; (8012c68 <sync_fs+0xd4>)
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7ff fd4d 	bl	8012684 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	3330      	adds	r3, #48	; 0x30
 8012bee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012bf2:	491e      	ldr	r1, [pc, #120]	; (8012c6c <sync_fs+0xd8>)
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7ff fd45 	bl	8012684 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	3330      	adds	r3, #48	; 0x30
 8012bfe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	691b      	ldr	r3, [r3, #16]
 8012c06:	4619      	mov	r1, r3
 8012c08:	4610      	mov	r0, r2
 8012c0a:	f7ff fd3b 	bl	8012684 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	3330      	adds	r3, #48	; 0x30
 8012c12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	4610      	mov	r0, r2
 8012c1e:	f7ff fd31 	bl	8012684 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	69db      	ldr	r3, [r3, #28]
 8012c26:	1c5a      	adds	r2, r3, #1
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	7858      	ldrb	r0, [r3, #1]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	f7ff fc8e 	bl	801255c <disk_write>
			fs->fsi_flag = 0;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2200      	movs	r2, #0
 8012c44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	785b      	ldrb	r3, [r3, #1]
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7ff fca4 	bl	801259c <disk_ioctl>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d001      	beq.n	8012c5e <sync_fs+0xca>
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	41615252 	.word	0x41615252
 8012c6c:	61417272 	.word	0x61417272

08012c70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	3b02      	subs	r3, #2
 8012c7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	695b      	ldr	r3, [r3, #20]
 8012c84:	3b02      	subs	r3, #2
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d301      	bcc.n	8012c90 <clust2sect+0x20>
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	e008      	b.n	8012ca2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	895b      	ldrh	r3, [r3, #10]
 8012c94:	461a      	mov	r2, r3
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	fb03 f202 	mul.w	r2, r3, r2
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ca0:	4413      	add	r3, r2
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	370c      	adds	r7, #12
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cac:	4770      	bx	lr

08012cae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012cae:	b580      	push	{r7, lr}
 8012cb0:	b086      	sub	sp, #24
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	6078      	str	r0, [r7, #4]
 8012cb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	2b01      	cmp	r3, #1
 8012cc2:	d904      	bls.n	8012cce <get_fat+0x20>
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	695b      	ldr	r3, [r3, #20]
 8012cc8:	683a      	ldr	r2, [r7, #0]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d302      	bcc.n	8012cd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012cce:	2301      	movs	r3, #1
 8012cd0:	617b      	str	r3, [r7, #20]
 8012cd2:	e08c      	b.n	8012dee <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012cd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	2b02      	cmp	r3, #2
 8012ce0:	d045      	beq.n	8012d6e <get_fat+0xc0>
 8012ce2:	2b03      	cmp	r3, #3
 8012ce4:	d05d      	beq.n	8012da2 <get_fat+0xf4>
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d177      	bne.n	8012dda <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	60fb      	str	r3, [r7, #12]
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	085b      	lsrs	r3, r3, #1
 8012cf2:	68fa      	ldr	r2, [r7, #12]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	6a1a      	ldr	r2, [r3, #32]
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	0a5b      	lsrs	r3, r3, #9
 8012d00:	4413      	add	r3, r2
 8012d02:	4619      	mov	r1, r3
 8012d04:	6938      	ldr	r0, [r7, #16]
 8012d06:	f7ff ff17 	bl	8012b38 <move_window>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d167      	bne.n	8012de0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	1c5a      	adds	r2, r3, #1
 8012d14:	60fa      	str	r2, [r7, #12]
 8012d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d1a:	693a      	ldr	r2, [r7, #16]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d22:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	6a1a      	ldr	r2, [r3, #32]
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	0a5b      	lsrs	r3, r3, #9
 8012d2c:	4413      	add	r3, r2
 8012d2e:	4619      	mov	r1, r3
 8012d30:	6938      	ldr	r0, [r7, #16]
 8012d32:	f7ff ff01 	bl	8012b38 <move_window>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d153      	bne.n	8012de4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d42:	693a      	ldr	r2, [r7, #16]
 8012d44:	4413      	add	r3, r2
 8012d46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d4a:	021b      	lsls	r3, r3, #8
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	4313      	orrs	r3, r2
 8012d52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	f003 0301 	and.w	r3, r3, #1
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d002      	beq.n	8012d64 <get_fat+0xb6>
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	091b      	lsrs	r3, r3, #4
 8012d62:	e002      	b.n	8012d6a <get_fat+0xbc>
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d6a:	617b      	str	r3, [r7, #20]
			break;
 8012d6c:	e03f      	b.n	8012dee <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	6a1a      	ldr	r2, [r3, #32]
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	0a1b      	lsrs	r3, r3, #8
 8012d76:	4413      	add	r3, r2
 8012d78:	4619      	mov	r1, r3
 8012d7a:	6938      	ldr	r0, [r7, #16]
 8012d7c:	f7ff fedc 	bl	8012b38 <move_window>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d130      	bne.n	8012de8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	005b      	lsls	r3, r3, #1
 8012d90:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012d94:	4413      	add	r3, r2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff fc1e 	bl	80125d8 <ld_word>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	617b      	str	r3, [r7, #20]
			break;
 8012da0:	e025      	b.n	8012dee <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	6a1a      	ldr	r2, [r3, #32]
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	09db      	lsrs	r3, r3, #7
 8012daa:	4413      	add	r3, r2
 8012dac:	4619      	mov	r1, r3
 8012dae:	6938      	ldr	r0, [r7, #16]
 8012db0:	f7ff fec2 	bl	8012b38 <move_window>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d118      	bne.n	8012dec <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012dc8:	4413      	add	r3, r2
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7ff fc1c 	bl	8012608 <ld_dword>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012dd6:	617b      	str	r3, [r7, #20]
			break;
 8012dd8:	e009      	b.n	8012dee <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012dda:	2301      	movs	r3, #1
 8012ddc:	617b      	str	r3, [r7, #20]
 8012dde:	e006      	b.n	8012dee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012de0:	bf00      	nop
 8012de2:	e004      	b.n	8012dee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012de4:	bf00      	nop
 8012de6:	e002      	b.n	8012dee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012de8:	bf00      	nop
 8012dea:	e000      	b.n	8012dee <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012dec:	bf00      	nop
		}
	}

	return val;
 8012dee:	697b      	ldr	r3, [r7, #20]
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3718      	adds	r7, #24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012df8:	b590      	push	{r4, r7, lr}
 8012dfa:	b089      	sub	sp, #36	; 0x24
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	60f8      	str	r0, [r7, #12]
 8012e00:	60b9      	str	r1, [r7, #8]
 8012e02:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012e04:	2302      	movs	r3, #2
 8012e06:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	f240 80d6 	bls.w	8012fbc <put_fat+0x1c4>
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	695b      	ldr	r3, [r3, #20]
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	f080 80d0 	bcs.w	8012fbc <put_fat+0x1c4>
		switch (fs->fs_type) {
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	2b02      	cmp	r3, #2
 8012e22:	d073      	beq.n	8012f0c <put_fat+0x114>
 8012e24:	2b03      	cmp	r3, #3
 8012e26:	f000 8091 	beq.w	8012f4c <put_fat+0x154>
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	f040 80c6 	bne.w	8012fbc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	61bb      	str	r3, [r7, #24]
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	085b      	lsrs	r3, r3, #1
 8012e38:	69ba      	ldr	r2, [r7, #24]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	6a1a      	ldr	r2, [r3, #32]
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	0a5b      	lsrs	r3, r3, #9
 8012e46:	4413      	add	r3, r2
 8012e48:	4619      	mov	r1, r3
 8012e4a:	68f8      	ldr	r0, [r7, #12]
 8012e4c:	f7ff fe74 	bl	8012b38 <move_window>
 8012e50:	4603      	mov	r3, r0
 8012e52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012e54:	7ffb      	ldrb	r3, [r7, #31]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	f040 80a9 	bne.w	8012fae <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012e62:	69bb      	ldr	r3, [r7, #24]
 8012e64:	1c59      	adds	r1, r3, #1
 8012e66:	61b9      	str	r1, [r7, #24]
 8012e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e6c:	4413      	add	r3, r2
 8012e6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	f003 0301 	and.w	r3, r3, #1
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00d      	beq.n	8012e96 <put_fat+0x9e>
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	b25b      	sxtb	r3, r3
 8012e80:	f003 030f 	and.w	r3, r3, #15
 8012e84:	b25a      	sxtb	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	011b      	lsls	r3, r3, #4
 8012e8c:	b25b      	sxtb	r3, r3
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	b25b      	sxtb	r3, r3
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	e001      	b.n	8012e9a <put_fat+0xa2>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	697a      	ldr	r2, [r7, #20]
 8012e9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	6a1a      	ldr	r2, [r3, #32]
 8012ea8:	69bb      	ldr	r3, [r7, #24]
 8012eaa:	0a5b      	lsrs	r3, r3, #9
 8012eac:	4413      	add	r3, r2
 8012eae:	4619      	mov	r1, r3
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f7ff fe41 	bl	8012b38 <move_window>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012eba:	7ffb      	ldrb	r3, [r7, #31]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d178      	bne.n	8012fb2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ec6:	69bb      	ldr	r3, [r7, #24]
 8012ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ecc:	4413      	add	r3, r2
 8012ece:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	f003 0301 	and.w	r3, r3, #1
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d003      	beq.n	8012ee2 <put_fat+0xea>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	091b      	lsrs	r3, r3, #4
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	e00e      	b.n	8012f00 <put_fat+0x108>
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	b25b      	sxtb	r3, r3
 8012ee8:	f023 030f 	bic.w	r3, r3, #15
 8012eec:	b25a      	sxtb	r2, r3
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	0a1b      	lsrs	r3, r3, #8
 8012ef2:	b25b      	sxtb	r3, r3
 8012ef4:	f003 030f 	and.w	r3, r3, #15
 8012ef8:	b25b      	sxtb	r3, r3
 8012efa:	4313      	orrs	r3, r2
 8012efc:	b25b      	sxtb	r3, r3
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	697a      	ldr	r2, [r7, #20]
 8012f02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2201      	movs	r2, #1
 8012f08:	70da      	strb	r2, [r3, #3]
			break;
 8012f0a:	e057      	b.n	8012fbc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6a1a      	ldr	r2, [r3, #32]
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	0a1b      	lsrs	r3, r3, #8
 8012f14:	4413      	add	r3, r2
 8012f16:	4619      	mov	r1, r3
 8012f18:	68f8      	ldr	r0, [r7, #12]
 8012f1a:	f7ff fe0d 	bl	8012b38 <move_window>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f22:	7ffb      	ldrb	r3, [r7, #31]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d146      	bne.n	8012fb6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	005b      	lsls	r3, r3, #1
 8012f32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012f36:	4413      	add	r3, r2
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	b292      	uxth	r2, r2
 8012f3c:	4611      	mov	r1, r2
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7ff fb85 	bl	801264e <st_word>
			fs->wflag = 1;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2201      	movs	r2, #1
 8012f48:	70da      	strb	r2, [r3, #3]
			break;
 8012f4a:	e037      	b.n	8012fbc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	6a1a      	ldr	r2, [r3, #32]
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	09db      	lsrs	r3, r3, #7
 8012f54:	4413      	add	r3, r2
 8012f56:	4619      	mov	r1, r3
 8012f58:	68f8      	ldr	r0, [r7, #12]
 8012f5a:	f7ff fded 	bl	8012b38 <move_window>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f62:	7ffb      	ldrb	r3, [r7, #31]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d128      	bne.n	8012fba <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012f7c:	4413      	add	r3, r2
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7ff fb42 	bl	8012608 <ld_dword>
 8012f84:	4603      	mov	r3, r0
 8012f86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012f8a:	4323      	orrs	r3, r4
 8012f8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012f9c:	4413      	add	r3, r2
 8012f9e:	6879      	ldr	r1, [r7, #4]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7ff fb6f 	bl	8012684 <st_dword>
			fs->wflag = 1;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2201      	movs	r2, #1
 8012faa:	70da      	strb	r2, [r3, #3]
			break;
 8012fac:	e006      	b.n	8012fbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012fae:	bf00      	nop
 8012fb0:	e004      	b.n	8012fbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012fb2:	bf00      	nop
 8012fb4:	e002      	b.n	8012fbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012fb6:	bf00      	nop
 8012fb8:	e000      	b.n	8012fbc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012fba:	bf00      	nop
		}
	}
	return res;
 8012fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3724      	adds	r7, #36	; 0x24
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd90      	pop	{r4, r7, pc}

08012fc6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012fc6:	b580      	push	{r7, lr}
 8012fc8:	b088      	sub	sp, #32
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	60f8      	str	r0, [r7, #12]
 8012fce:	60b9      	str	r1, [r7, #8]
 8012fd0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	2b01      	cmp	r3, #1
 8012fe0:	d904      	bls.n	8012fec <remove_chain+0x26>
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	695b      	ldr	r3, [r3, #20]
 8012fe6:	68ba      	ldr	r2, [r7, #8]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d301      	bcc.n	8012ff0 <remove_chain+0x2a>
 8012fec:	2302      	movs	r3, #2
 8012fee:	e04b      	b.n	8013088 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d00c      	beq.n	8013010 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffa:	6879      	ldr	r1, [r7, #4]
 8012ffc:	69b8      	ldr	r0, [r7, #24]
 8012ffe:	f7ff fefb 	bl	8012df8 <put_fat>
 8013002:	4603      	mov	r3, r0
 8013004:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013006:	7ffb      	ldrb	r3, [r7, #31]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d001      	beq.n	8013010 <remove_chain+0x4a>
 801300c:	7ffb      	ldrb	r3, [r7, #31]
 801300e:	e03b      	b.n	8013088 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013010:	68b9      	ldr	r1, [r7, #8]
 8013012:	68f8      	ldr	r0, [r7, #12]
 8013014:	f7ff fe4b 	bl	8012cae <get_fat>
 8013018:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d031      	beq.n	8013084 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	2b01      	cmp	r3, #1
 8013024:	d101      	bne.n	801302a <remove_chain+0x64>
 8013026:	2302      	movs	r3, #2
 8013028:	e02e      	b.n	8013088 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013030:	d101      	bne.n	8013036 <remove_chain+0x70>
 8013032:	2301      	movs	r3, #1
 8013034:	e028      	b.n	8013088 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013036:	2200      	movs	r2, #0
 8013038:	68b9      	ldr	r1, [r7, #8]
 801303a:	69b8      	ldr	r0, [r7, #24]
 801303c:	f7ff fedc 	bl	8012df8 <put_fat>
 8013040:	4603      	mov	r3, r0
 8013042:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013044:	7ffb      	ldrb	r3, [r7, #31]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d001      	beq.n	801304e <remove_chain+0x88>
 801304a:	7ffb      	ldrb	r3, [r7, #31]
 801304c:	e01c      	b.n	8013088 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	691a      	ldr	r2, [r3, #16]
 8013052:	69bb      	ldr	r3, [r7, #24]
 8013054:	695b      	ldr	r3, [r3, #20]
 8013056:	3b02      	subs	r3, #2
 8013058:	429a      	cmp	r2, r3
 801305a:	d20b      	bcs.n	8013074 <remove_chain+0xae>
			fs->free_clst++;
 801305c:	69bb      	ldr	r3, [r7, #24]
 801305e:	691b      	ldr	r3, [r3, #16]
 8013060:	1c5a      	adds	r2, r3, #1
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013066:	69bb      	ldr	r3, [r7, #24]
 8013068:	791b      	ldrb	r3, [r3, #4]
 801306a:	f043 0301 	orr.w	r3, r3, #1
 801306e:	b2da      	uxtb	r2, r3
 8013070:	69bb      	ldr	r3, [r7, #24]
 8013072:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	695b      	ldr	r3, [r3, #20]
 801307c:	68ba      	ldr	r2, [r7, #8]
 801307e:	429a      	cmp	r2, r3
 8013080:	d3c6      	bcc.n	8013010 <remove_chain+0x4a>
 8013082:	e000      	b.n	8013086 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013084:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013086:	2300      	movs	r3, #0
}
 8013088:	4618      	mov	r0, r3
 801308a:	3720      	adds	r7, #32
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b088      	sub	sp, #32
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d10d      	bne.n	80130c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	68db      	ldr	r3, [r3, #12]
 80130aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80130ac:	69bb      	ldr	r3, [r7, #24]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d004      	beq.n	80130bc <create_chain+0x2c>
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	695b      	ldr	r3, [r3, #20]
 80130b6:	69ba      	ldr	r2, [r7, #24]
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d31b      	bcc.n	80130f4 <create_chain+0x64>
 80130bc:	2301      	movs	r3, #1
 80130be:	61bb      	str	r3, [r7, #24]
 80130c0:	e018      	b.n	80130f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80130c2:	6839      	ldr	r1, [r7, #0]
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f7ff fdf2 	bl	8012cae <get_fat>
 80130ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	d801      	bhi.n	80130d6 <create_chain+0x46>
 80130d2:	2301      	movs	r3, #1
 80130d4:	e070      	b.n	80131b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130dc:	d101      	bne.n	80130e2 <create_chain+0x52>
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	e06a      	b.n	80131b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	695b      	ldr	r3, [r3, #20]
 80130e6:	68fa      	ldr	r2, [r7, #12]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d201      	bcs.n	80130f0 <create_chain+0x60>
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	e063      	b.n	80131b8 <create_chain+0x128>
		scl = clst;
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80130f4:	69bb      	ldr	r3, [r7, #24]
 80130f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	3301      	adds	r3, #1
 80130fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	695b      	ldr	r3, [r3, #20]
 8013102:	69fa      	ldr	r2, [r7, #28]
 8013104:	429a      	cmp	r2, r3
 8013106:	d307      	bcc.n	8013118 <create_chain+0x88>
				ncl = 2;
 8013108:	2302      	movs	r3, #2
 801310a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801310c:	69fa      	ldr	r2, [r7, #28]
 801310e:	69bb      	ldr	r3, [r7, #24]
 8013110:	429a      	cmp	r2, r3
 8013112:	d901      	bls.n	8013118 <create_chain+0x88>
 8013114:	2300      	movs	r3, #0
 8013116:	e04f      	b.n	80131b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013118:	69f9      	ldr	r1, [r7, #28]
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f7ff fdc7 	bl	8012cae <get_fat>
 8013120:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d00e      	beq.n	8013146 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2b01      	cmp	r3, #1
 801312c:	d003      	beq.n	8013136 <create_chain+0xa6>
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013134:	d101      	bne.n	801313a <create_chain+0xaa>
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	e03e      	b.n	80131b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801313a:	69fa      	ldr	r2, [r7, #28]
 801313c:	69bb      	ldr	r3, [r7, #24]
 801313e:	429a      	cmp	r2, r3
 8013140:	d1da      	bne.n	80130f8 <create_chain+0x68>
 8013142:	2300      	movs	r3, #0
 8013144:	e038      	b.n	80131b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013146:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013148:	f04f 32ff 	mov.w	r2, #4294967295
 801314c:	69f9      	ldr	r1, [r7, #28]
 801314e:	6938      	ldr	r0, [r7, #16]
 8013150:	f7ff fe52 	bl	8012df8 <put_fat>
 8013154:	4603      	mov	r3, r0
 8013156:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013158:	7dfb      	ldrb	r3, [r7, #23]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d109      	bne.n	8013172 <create_chain+0xe2>
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d006      	beq.n	8013172 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013164:	69fa      	ldr	r2, [r7, #28]
 8013166:	6839      	ldr	r1, [r7, #0]
 8013168:	6938      	ldr	r0, [r7, #16]
 801316a:	f7ff fe45 	bl	8012df8 <put_fat>
 801316e:	4603      	mov	r3, r0
 8013170:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013172:	7dfb      	ldrb	r3, [r7, #23]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d116      	bne.n	80131a6 <create_chain+0x116>
		fs->last_clst = ncl;
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	69fa      	ldr	r2, [r7, #28]
 801317c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	691a      	ldr	r2, [r3, #16]
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	695b      	ldr	r3, [r3, #20]
 8013186:	3b02      	subs	r3, #2
 8013188:	429a      	cmp	r2, r3
 801318a:	d804      	bhi.n	8013196 <create_chain+0x106>
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	691b      	ldr	r3, [r3, #16]
 8013190:	1e5a      	subs	r2, r3, #1
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8013196:	693b      	ldr	r3, [r7, #16]
 8013198:	791b      	ldrb	r3, [r3, #4]
 801319a:	f043 0301 	orr.w	r3, r3, #1
 801319e:	b2da      	uxtb	r2, r3
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	711a      	strb	r2, [r3, #4]
 80131a4:	e007      	b.n	80131b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80131a6:	7dfb      	ldrb	r3, [r7, #23]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d102      	bne.n	80131b2 <create_chain+0x122>
 80131ac:	f04f 33ff 	mov.w	r3, #4294967295
 80131b0:	e000      	b.n	80131b4 <create_chain+0x124>
 80131b2:	2301      	movs	r3, #1
 80131b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80131b6:	69fb      	ldr	r3, [r7, #28]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3720      	adds	r7, #32
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b087      	sub	sp, #28
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131d4:	3304      	adds	r3, #4
 80131d6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	0a5b      	lsrs	r3, r3, #9
 80131dc:	68fa      	ldr	r2, [r7, #12]
 80131de:	8952      	ldrh	r2, [r2, #10]
 80131e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80131e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	1d1a      	adds	r2, r3, #4
 80131ea:	613a      	str	r2, [r7, #16]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d101      	bne.n	80131fa <clmt_clust+0x3a>
 80131f6:	2300      	movs	r3, #0
 80131f8:	e010      	b.n	801321c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80131fa:	697a      	ldr	r2, [r7, #20]
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d307      	bcc.n	8013212 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013202:	697a      	ldr	r2, [r7, #20]
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	1ad3      	subs	r3, r2, r3
 8013208:	617b      	str	r3, [r7, #20]
 801320a:	693b      	ldr	r3, [r7, #16]
 801320c:	3304      	adds	r3, #4
 801320e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013210:	e7e9      	b.n	80131e6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013212:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	681a      	ldr	r2, [r3, #0]
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	4413      	add	r3, r2
}
 801321c:	4618      	mov	r0, r3
 801321e:	371c      	adds	r7, #28
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr

08013228 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b086      	sub	sp, #24
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801323e:	d204      	bcs.n	801324a <dir_sdi+0x22>
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	f003 031f 	and.w	r3, r3, #31
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <dir_sdi+0x26>
		return FR_INT_ERR;
 801324a:	2302      	movs	r3, #2
 801324c:	e063      	b.n	8013316 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	683a      	ldr	r2, [r7, #0]
 8013252:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d106      	bne.n	801326e <dir_sdi+0x46>
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	2b02      	cmp	r3, #2
 8013266:	d902      	bls.n	801326e <dir_sdi+0x46>
		clst = fs->dirbase;
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801326c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d10c      	bne.n	801328e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	095b      	lsrs	r3, r3, #5
 8013278:	693a      	ldr	r2, [r7, #16]
 801327a:	8912      	ldrh	r2, [r2, #8]
 801327c:	4293      	cmp	r3, r2
 801327e:	d301      	bcc.n	8013284 <dir_sdi+0x5c>
 8013280:	2302      	movs	r3, #2
 8013282:	e048      	b.n	8013316 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	61da      	str	r2, [r3, #28]
 801328c:	e029      	b.n	80132e2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	895b      	ldrh	r3, [r3, #10]
 8013292:	025b      	lsls	r3, r3, #9
 8013294:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013296:	e019      	b.n	80132cc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6979      	ldr	r1, [r7, #20]
 801329c:	4618      	mov	r0, r3
 801329e:	f7ff fd06 	bl	8012cae <get_fat>
 80132a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132aa:	d101      	bne.n	80132b0 <dir_sdi+0x88>
 80132ac:	2301      	movs	r3, #1
 80132ae:	e032      	b.n	8013316 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	2b01      	cmp	r3, #1
 80132b4:	d904      	bls.n	80132c0 <dir_sdi+0x98>
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	695b      	ldr	r3, [r3, #20]
 80132ba:	697a      	ldr	r2, [r7, #20]
 80132bc:	429a      	cmp	r2, r3
 80132be:	d301      	bcc.n	80132c4 <dir_sdi+0x9c>
 80132c0:	2302      	movs	r3, #2
 80132c2:	e028      	b.n	8013316 <dir_sdi+0xee>
			ofs -= csz;
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	1ad3      	subs	r3, r2, r3
 80132ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80132cc:	683a      	ldr	r2, [r7, #0]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d2e1      	bcs.n	8013298 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80132d4:	6979      	ldr	r1, [r7, #20]
 80132d6:	6938      	ldr	r0, [r7, #16]
 80132d8:	f7ff fcca 	bl	8012c70 <clust2sect>
 80132dc:	4602      	mov	r2, r0
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	697a      	ldr	r2, [r7, #20]
 80132e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	69db      	ldr	r3, [r3, #28]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d101      	bne.n	80132f4 <dir_sdi+0xcc>
 80132f0:	2302      	movs	r3, #2
 80132f2:	e010      	b.n	8013316 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	69da      	ldr	r2, [r3, #28]
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	0a5b      	lsrs	r3, r3, #9
 80132fc:	441a      	add	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801330e:	441a      	add	r2, r3
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013314:	2300      	movs	r3, #0
}
 8013316:	4618      	mov	r0, r3
 8013318:	3718      	adds	r7, #24
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}

0801331e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801331e:	b580      	push	{r7, lr}
 8013320:	b086      	sub	sp, #24
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]
 8013326:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	695b      	ldr	r3, [r3, #20]
 8013332:	3320      	adds	r3, #32
 8013334:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	69db      	ldr	r3, [r3, #28]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d003      	beq.n	8013346 <dir_next+0x28>
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013344:	d301      	bcc.n	801334a <dir_next+0x2c>
 8013346:	2304      	movs	r3, #4
 8013348:	e0aa      	b.n	80134a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013350:	2b00      	cmp	r3, #0
 8013352:	f040 8098 	bne.w	8013486 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	69db      	ldr	r3, [r3, #28]
 801335a:	1c5a      	adds	r2, r3, #1
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	699b      	ldr	r3, [r3, #24]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d10b      	bne.n	8013380 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	095b      	lsrs	r3, r3, #5
 801336c:	68fa      	ldr	r2, [r7, #12]
 801336e:	8912      	ldrh	r2, [r2, #8]
 8013370:	4293      	cmp	r3, r2
 8013372:	f0c0 8088 	bcc.w	8013486 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	61da      	str	r2, [r3, #28]
 801337c:	2304      	movs	r3, #4
 801337e:	e08f      	b.n	80134a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	0a5b      	lsrs	r3, r3, #9
 8013384:	68fa      	ldr	r2, [r7, #12]
 8013386:	8952      	ldrh	r2, [r2, #10]
 8013388:	3a01      	subs	r2, #1
 801338a:	4013      	ands	r3, r2
 801338c:	2b00      	cmp	r3, #0
 801338e:	d17a      	bne.n	8013486 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	699b      	ldr	r3, [r3, #24]
 8013396:	4619      	mov	r1, r3
 8013398:	4610      	mov	r0, r2
 801339a:	f7ff fc88 	bl	8012cae <get_fat>
 801339e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	2b01      	cmp	r3, #1
 80133a4:	d801      	bhi.n	80133aa <dir_next+0x8c>
 80133a6:	2302      	movs	r3, #2
 80133a8:	e07a      	b.n	80134a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b0:	d101      	bne.n	80133b6 <dir_next+0x98>
 80133b2:	2301      	movs	r3, #1
 80133b4:	e074      	b.n	80134a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	695b      	ldr	r3, [r3, #20]
 80133ba:	697a      	ldr	r2, [r7, #20]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d358      	bcc.n	8013472 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d104      	bne.n	80133d0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2200      	movs	r2, #0
 80133ca:	61da      	str	r2, [r3, #28]
 80133cc:	2304      	movs	r3, #4
 80133ce:	e067      	b.n	80134a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	699b      	ldr	r3, [r3, #24]
 80133d6:	4619      	mov	r1, r3
 80133d8:	4610      	mov	r0, r2
 80133da:	f7ff fe59 	bl	8013090 <create_chain>
 80133de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d101      	bne.n	80133ea <dir_next+0xcc>
 80133e6:	2307      	movs	r3, #7
 80133e8:	e05a      	b.n	80134a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d101      	bne.n	80133f4 <dir_next+0xd6>
 80133f0:	2302      	movs	r3, #2
 80133f2:	e055      	b.n	80134a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133fa:	d101      	bne.n	8013400 <dir_next+0xe2>
 80133fc:	2301      	movs	r3, #1
 80133fe:	e04f      	b.n	80134a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013400:	68f8      	ldr	r0, [r7, #12]
 8013402:	f7ff fb55 	bl	8012ab0 <sync_window>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d001      	beq.n	8013410 <dir_next+0xf2>
 801340c:	2301      	movs	r3, #1
 801340e:	e047      	b.n	80134a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	3330      	adds	r3, #48	; 0x30
 8013414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013418:	2100      	movs	r1, #0
 801341a:	4618      	mov	r0, r3
 801341c:	f7ff f97f 	bl	801271e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013420:	2300      	movs	r3, #0
 8013422:	613b      	str	r3, [r7, #16]
 8013424:	6979      	ldr	r1, [r7, #20]
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f7ff fc22 	bl	8012c70 <clust2sect>
 801342c:	4602      	mov	r2, r0
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	62da      	str	r2, [r3, #44]	; 0x2c
 8013432:	e012      	b.n	801345a <dir_next+0x13c>
						fs->wflag = 1;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2201      	movs	r2, #1
 8013438:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801343a:	68f8      	ldr	r0, [r7, #12]
 801343c:	f7ff fb38 	bl	8012ab0 <sync_window>
 8013440:	4603      	mov	r3, r0
 8013442:	2b00      	cmp	r3, #0
 8013444:	d001      	beq.n	801344a <dir_next+0x12c>
 8013446:	2301      	movs	r3, #1
 8013448:	e02a      	b.n	80134a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	3301      	adds	r3, #1
 801344e:	613b      	str	r3, [r7, #16]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013454:	1c5a      	adds	r2, r3, #1
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	62da      	str	r2, [r3, #44]	; 0x2c
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	895b      	ldrh	r3, [r3, #10]
 801345e:	461a      	mov	r2, r3
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	4293      	cmp	r3, r2
 8013464:	d3e6      	bcc.n	8013434 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	1ad2      	subs	r2, r2, r3
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	697a      	ldr	r2, [r7, #20]
 8013476:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013478:	6979      	ldr	r1, [r7, #20]
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	f7ff fbf8 	bl	8012c70 <clust2sect>
 8013480:	4602      	mov	r2, r0
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	68ba      	ldr	r2, [r7, #8]
 801348a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013498:	441a      	add	r2, r3
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801349e:	2300      	movs	r3, #0
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3718      	adds	r7, #24
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}

080134a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b086      	sub	sp, #24
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80134b8:	2100      	movs	r1, #0
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7ff feb4 	bl	8013228 <dir_sdi>
 80134c0:	4603      	mov	r3, r0
 80134c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80134c4:	7dfb      	ldrb	r3, [r7, #23]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d12b      	bne.n	8013522 <dir_alloc+0x7a>
		n = 0;
 80134ca:	2300      	movs	r3, #0
 80134cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	69db      	ldr	r3, [r3, #28]
 80134d2:	4619      	mov	r1, r3
 80134d4:	68f8      	ldr	r0, [r7, #12]
 80134d6:	f7ff fb2f 	bl	8012b38 <move_window>
 80134da:	4603      	mov	r3, r0
 80134dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80134de:	7dfb      	ldrb	r3, [r7, #23]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d11d      	bne.n	8013520 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6a1b      	ldr	r3, [r3, #32]
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	2be5      	cmp	r3, #229	; 0xe5
 80134ec:	d004      	beq.n	80134f8 <dir_alloc+0x50>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6a1b      	ldr	r3, [r3, #32]
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d107      	bne.n	8013508 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	3301      	adds	r3, #1
 80134fc:	613b      	str	r3, [r7, #16]
 80134fe:	693a      	ldr	r2, [r7, #16]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	429a      	cmp	r2, r3
 8013504:	d102      	bne.n	801350c <dir_alloc+0x64>
 8013506:	e00c      	b.n	8013522 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013508:	2300      	movs	r3, #0
 801350a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801350c:	2101      	movs	r1, #1
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f7ff ff05 	bl	801331e <dir_next>
 8013514:	4603      	mov	r3, r0
 8013516:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013518:	7dfb      	ldrb	r3, [r7, #23]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d0d7      	beq.n	80134ce <dir_alloc+0x26>
 801351e:	e000      	b.n	8013522 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013520:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013522:	7dfb      	ldrb	r3, [r7, #23]
 8013524:	2b04      	cmp	r3, #4
 8013526:	d101      	bne.n	801352c <dir_alloc+0x84>
 8013528:	2307      	movs	r3, #7
 801352a:	75fb      	strb	r3, [r7, #23]
	return res;
 801352c:	7dfb      	ldrb	r3, [r7, #23]
}
 801352e:	4618      	mov	r0, r3
 8013530:	3718      	adds	r7, #24
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}

08013536 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013536:	b580      	push	{r7, lr}
 8013538:	b084      	sub	sp, #16
 801353a:	af00      	add	r7, sp, #0
 801353c:	6078      	str	r0, [r7, #4]
 801353e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	331a      	adds	r3, #26
 8013544:	4618      	mov	r0, r3
 8013546:	f7ff f847 	bl	80125d8 <ld_word>
 801354a:	4603      	mov	r3, r0
 801354c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	2b03      	cmp	r3, #3
 8013554:	d109      	bne.n	801356a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	3314      	adds	r3, #20
 801355a:	4618      	mov	r0, r3
 801355c:	f7ff f83c 	bl	80125d8 <ld_word>
 8013560:	4603      	mov	r3, r0
 8013562:	041b      	lsls	r3, r3, #16
 8013564:	68fa      	ldr	r2, [r7, #12]
 8013566:	4313      	orrs	r3, r2
 8013568:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801356a:	68fb      	ldr	r3, [r7, #12]
}
 801356c:	4618      	mov	r0, r3
 801356e:	3710      	adds	r7, #16
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}

08013574 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	60f8      	str	r0, [r7, #12]
 801357c:	60b9      	str	r1, [r7, #8]
 801357e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	331a      	adds	r3, #26
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	b292      	uxth	r2, r2
 8013588:	4611      	mov	r1, r2
 801358a:	4618      	mov	r0, r3
 801358c:	f7ff f85f 	bl	801264e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	2b03      	cmp	r3, #3
 8013596:	d109      	bne.n	80135ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	f103 0214 	add.w	r2, r3, #20
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	0c1b      	lsrs	r3, r3, #16
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	4619      	mov	r1, r3
 80135a6:	4610      	mov	r0, r2
 80135a8:	f7ff f851 	bl	801264e <st_word>
	}
}
 80135ac:	bf00      	nop
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b086      	sub	sp, #24
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80135c2:	2100      	movs	r1, #0
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f7ff fe2f 	bl	8013228 <dir_sdi>
 80135ca:	4603      	mov	r3, r0
 80135cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80135ce:	7dfb      	ldrb	r3, [r7, #23]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d001      	beq.n	80135d8 <dir_find+0x24>
 80135d4:	7dfb      	ldrb	r3, [r7, #23]
 80135d6:	e03e      	b.n	8013656 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	69db      	ldr	r3, [r3, #28]
 80135dc:	4619      	mov	r1, r3
 80135de:	6938      	ldr	r0, [r7, #16]
 80135e0:	f7ff faaa 	bl	8012b38 <move_window>
 80135e4:	4603      	mov	r3, r0
 80135e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80135e8:	7dfb      	ldrb	r3, [r7, #23]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d12f      	bne.n	801364e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6a1b      	ldr	r3, [r3, #32]
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80135f6:	7bfb      	ldrb	r3, [r7, #15]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d102      	bne.n	8013602 <dir_find+0x4e>
 80135fc:	2304      	movs	r3, #4
 80135fe:	75fb      	strb	r3, [r7, #23]
 8013600:	e028      	b.n	8013654 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a1b      	ldr	r3, [r3, #32]
 8013606:	330b      	adds	r3, #11
 8013608:	781b      	ldrb	r3, [r3, #0]
 801360a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801360e:	b2da      	uxtb	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6a1b      	ldr	r3, [r3, #32]
 8013618:	330b      	adds	r3, #11
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	f003 0308 	and.w	r3, r3, #8
 8013620:	2b00      	cmp	r3, #0
 8013622:	d10a      	bne.n	801363a <dir_find+0x86>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6a18      	ldr	r0, [r3, #32]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	3324      	adds	r3, #36	; 0x24
 801362c:	220b      	movs	r2, #11
 801362e:	4619      	mov	r1, r3
 8013630:	f7ff f88f 	bl	8012752 <mem_cmp>
 8013634:	4603      	mov	r3, r0
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00b      	beq.n	8013652 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801363a:	2100      	movs	r1, #0
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f7ff fe6e 	bl	801331e <dir_next>
 8013642:	4603      	mov	r3, r0
 8013644:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013646:	7dfb      	ldrb	r3, [r7, #23]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d0c5      	beq.n	80135d8 <dir_find+0x24>
 801364c:	e002      	b.n	8013654 <dir_find+0xa0>
		if (res != FR_OK) break;
 801364e:	bf00      	nop
 8013650:	e000      	b.n	8013654 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013652:	bf00      	nop

	return res;
 8013654:	7dfb      	ldrb	r3, [r7, #23]
}
 8013656:	4618      	mov	r0, r3
 8013658:	3718      	adds	r7, #24
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}

0801365e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801365e:	b580      	push	{r7, lr}
 8013660:	b084      	sub	sp, #16
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801366c:	2101      	movs	r1, #1
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f7ff ff1a 	bl	80134a8 <dir_alloc>
 8013674:	4603      	mov	r3, r0
 8013676:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013678:	7bfb      	ldrb	r3, [r7, #15]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d11c      	bne.n	80136b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	69db      	ldr	r3, [r3, #28]
 8013682:	4619      	mov	r1, r3
 8013684:	68b8      	ldr	r0, [r7, #8]
 8013686:	f7ff fa57 	bl	8012b38 <move_window>
 801368a:	4603      	mov	r3, r0
 801368c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801368e:	7bfb      	ldrb	r3, [r7, #15]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d111      	bne.n	80136b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6a1b      	ldr	r3, [r3, #32]
 8013698:	2220      	movs	r2, #32
 801369a:	2100      	movs	r1, #0
 801369c:	4618      	mov	r0, r3
 801369e:	f7ff f83e 	bl	801271e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6a18      	ldr	r0, [r3, #32]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	3324      	adds	r3, #36	; 0x24
 80136aa:	220b      	movs	r2, #11
 80136ac:	4619      	mov	r1, r3
 80136ae:	f7ff f815 	bl	80126dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	2201      	movs	r2, #1
 80136b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80136b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3710      	adds	r7, #16
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
	...

080136c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b088      	sub	sp, #32
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	60fb      	str	r3, [r7, #12]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	3324      	adds	r3, #36	; 0x24
 80136d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80136da:	220b      	movs	r2, #11
 80136dc:	2120      	movs	r1, #32
 80136de:	68b8      	ldr	r0, [r7, #8]
 80136e0:	f7ff f81d 	bl	801271e <mem_set>
	si = i = 0; ni = 8;
 80136e4:	2300      	movs	r3, #0
 80136e6:	613b      	str	r3, [r7, #16]
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	617b      	str	r3, [r7, #20]
 80136ec:	2308      	movs	r3, #8
 80136ee:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	1c5a      	adds	r2, r3, #1
 80136f4:	617a      	str	r2, [r7, #20]
 80136f6:	68fa      	ldr	r2, [r7, #12]
 80136f8:	4413      	add	r3, r2
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80136fe:	7ffb      	ldrb	r3, [r7, #31]
 8013700:	2b20      	cmp	r3, #32
 8013702:	d94e      	bls.n	80137a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013704:	7ffb      	ldrb	r3, [r7, #31]
 8013706:	2b2f      	cmp	r3, #47	; 0x2f
 8013708:	d006      	beq.n	8013718 <create_name+0x54>
 801370a:	7ffb      	ldrb	r3, [r7, #31]
 801370c:	2b5c      	cmp	r3, #92	; 0x5c
 801370e:	d110      	bne.n	8013732 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013710:	e002      	b.n	8013718 <create_name+0x54>
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	3301      	adds	r3, #1
 8013716:	617b      	str	r3, [r7, #20]
 8013718:	68fa      	ldr	r2, [r7, #12]
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	4413      	add	r3, r2
 801371e:	781b      	ldrb	r3, [r3, #0]
 8013720:	2b2f      	cmp	r3, #47	; 0x2f
 8013722:	d0f6      	beq.n	8013712 <create_name+0x4e>
 8013724:	68fa      	ldr	r2, [r7, #12]
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	4413      	add	r3, r2
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	2b5c      	cmp	r3, #92	; 0x5c
 801372e:	d0f0      	beq.n	8013712 <create_name+0x4e>
			break;
 8013730:	e038      	b.n	80137a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013732:	7ffb      	ldrb	r3, [r7, #31]
 8013734:	2b2e      	cmp	r3, #46	; 0x2e
 8013736:	d003      	beq.n	8013740 <create_name+0x7c>
 8013738:	693a      	ldr	r2, [r7, #16]
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	429a      	cmp	r2, r3
 801373e:	d30c      	bcc.n	801375a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	2b0b      	cmp	r3, #11
 8013744:	d002      	beq.n	801374c <create_name+0x88>
 8013746:	7ffb      	ldrb	r3, [r7, #31]
 8013748:	2b2e      	cmp	r3, #46	; 0x2e
 801374a:	d001      	beq.n	8013750 <create_name+0x8c>
 801374c:	2306      	movs	r3, #6
 801374e:	e044      	b.n	80137da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013750:	2308      	movs	r3, #8
 8013752:	613b      	str	r3, [r7, #16]
 8013754:	230b      	movs	r3, #11
 8013756:	61bb      	str	r3, [r7, #24]
			continue;
 8013758:	e022      	b.n	80137a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801375a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801375e:	2b00      	cmp	r3, #0
 8013760:	da04      	bge.n	801376c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013762:	7ffb      	ldrb	r3, [r7, #31]
 8013764:	3b80      	subs	r3, #128	; 0x80
 8013766:	4a1f      	ldr	r2, [pc, #124]	; (80137e4 <create_name+0x120>)
 8013768:	5cd3      	ldrb	r3, [r2, r3]
 801376a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801376c:	7ffb      	ldrb	r3, [r7, #31]
 801376e:	4619      	mov	r1, r3
 8013770:	481d      	ldr	r0, [pc, #116]	; (80137e8 <create_name+0x124>)
 8013772:	f7ff f815 	bl	80127a0 <chk_chr>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	d001      	beq.n	8013780 <create_name+0xbc>
 801377c:	2306      	movs	r3, #6
 801377e:	e02c      	b.n	80137da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013780:	7ffb      	ldrb	r3, [r7, #31]
 8013782:	2b60      	cmp	r3, #96	; 0x60
 8013784:	d905      	bls.n	8013792 <create_name+0xce>
 8013786:	7ffb      	ldrb	r3, [r7, #31]
 8013788:	2b7a      	cmp	r3, #122	; 0x7a
 801378a:	d802      	bhi.n	8013792 <create_name+0xce>
 801378c:	7ffb      	ldrb	r3, [r7, #31]
 801378e:	3b20      	subs	r3, #32
 8013790:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	1c5a      	adds	r2, r3, #1
 8013796:	613a      	str	r2, [r7, #16]
 8013798:	68ba      	ldr	r2, [r7, #8]
 801379a:	4413      	add	r3, r2
 801379c:	7ffa      	ldrb	r2, [r7, #31]
 801379e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80137a0:	e7a6      	b.n	80136f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80137a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80137a4:	68fa      	ldr	r2, [r7, #12]
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	441a      	add	r2, r3
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d101      	bne.n	80137b8 <create_name+0xf4>
 80137b4:	2306      	movs	r3, #6
 80137b6:	e010      	b.n	80137da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	2be5      	cmp	r3, #229	; 0xe5
 80137be:	d102      	bne.n	80137c6 <create_name+0x102>
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	2205      	movs	r2, #5
 80137c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80137c6:	7ffb      	ldrb	r3, [r7, #31]
 80137c8:	2b20      	cmp	r3, #32
 80137ca:	d801      	bhi.n	80137d0 <create_name+0x10c>
 80137cc:	2204      	movs	r2, #4
 80137ce:	e000      	b.n	80137d2 <create_name+0x10e>
 80137d0:	2200      	movs	r2, #0
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	330b      	adds	r3, #11
 80137d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80137d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3720      	adds	r7, #32
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
 80137e2:	bf00      	nop
 80137e4:	08016a3c 	.word	0x08016a3c
 80137e8:	08016960 	.word	0x08016960

080137ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b086      	sub	sp, #24
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013800:	e002      	b.n	8013808 <follow_path+0x1c>
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	3301      	adds	r3, #1
 8013806:	603b      	str	r3, [r7, #0]
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	2b2f      	cmp	r3, #47	; 0x2f
 801380e:	d0f8      	beq.n	8013802 <follow_path+0x16>
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	2b5c      	cmp	r3, #92	; 0x5c
 8013816:	d0f4      	beq.n	8013802 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	2200      	movs	r2, #0
 801381c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	781b      	ldrb	r3, [r3, #0]
 8013822:	2b1f      	cmp	r3, #31
 8013824:	d80a      	bhi.n	801383c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2280      	movs	r2, #128	; 0x80
 801382a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801382e:	2100      	movs	r1, #0
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f7ff fcf9 	bl	8013228 <dir_sdi>
 8013836:	4603      	mov	r3, r0
 8013838:	75fb      	strb	r3, [r7, #23]
 801383a:	e043      	b.n	80138c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801383c:	463b      	mov	r3, r7
 801383e:	4619      	mov	r1, r3
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f7ff ff3f 	bl	80136c4 <create_name>
 8013846:	4603      	mov	r3, r0
 8013848:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801384a:	7dfb      	ldrb	r3, [r7, #23]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d134      	bne.n	80138ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7ff feaf 	bl	80135b4 <dir_find>
 8013856:	4603      	mov	r3, r0
 8013858:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013860:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013862:	7dfb      	ldrb	r3, [r7, #23]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d00a      	beq.n	801387e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013868:	7dfb      	ldrb	r3, [r7, #23]
 801386a:	2b04      	cmp	r3, #4
 801386c:	d127      	bne.n	80138be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801386e:	7afb      	ldrb	r3, [r7, #11]
 8013870:	f003 0304 	and.w	r3, r3, #4
 8013874:	2b00      	cmp	r3, #0
 8013876:	d122      	bne.n	80138be <follow_path+0xd2>
 8013878:	2305      	movs	r3, #5
 801387a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801387c:	e01f      	b.n	80138be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801387e:	7afb      	ldrb	r3, [r7, #11]
 8013880:	f003 0304 	and.w	r3, r3, #4
 8013884:	2b00      	cmp	r3, #0
 8013886:	d11c      	bne.n	80138c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	799b      	ldrb	r3, [r3, #6]
 801388c:	f003 0310 	and.w	r3, r3, #16
 8013890:	2b00      	cmp	r3, #0
 8013892:	d102      	bne.n	801389a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013894:	2305      	movs	r3, #5
 8013896:	75fb      	strb	r3, [r7, #23]
 8013898:	e014      	b.n	80138c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	695b      	ldr	r3, [r3, #20]
 80138a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138a8:	4413      	add	r3, r2
 80138aa:	4619      	mov	r1, r3
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	f7ff fe42 	bl	8013536 <ld_clust>
 80138b2:	4602      	mov	r2, r0
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80138b8:	e7c0      	b.n	801383c <follow_path+0x50>
			if (res != FR_OK) break;
 80138ba:	bf00      	nop
 80138bc:	e002      	b.n	80138c4 <follow_path+0xd8>
				break;
 80138be:	bf00      	nop
 80138c0:	e000      	b.n	80138c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80138c2:	bf00      	nop
			}
		}
	}

	return res;
 80138c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3718      	adds	r7, #24
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}

080138ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80138ce:	b480      	push	{r7}
 80138d0:	b087      	sub	sp, #28
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80138d6:	f04f 33ff 	mov.w	r3, #4294967295
 80138da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d031      	beq.n	8013948 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	617b      	str	r3, [r7, #20]
 80138ea:	e002      	b.n	80138f2 <get_ldnumber+0x24>
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	3301      	adds	r3, #1
 80138f0:	617b      	str	r3, [r7, #20]
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	2b20      	cmp	r3, #32
 80138f8:	d903      	bls.n	8013902 <get_ldnumber+0x34>
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	2b3a      	cmp	r3, #58	; 0x3a
 8013900:	d1f4      	bne.n	80138ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	2b3a      	cmp	r3, #58	; 0x3a
 8013908:	d11c      	bne.n	8013944 <get_ldnumber+0x76>
			tp = *path;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	60fa      	str	r2, [r7, #12]
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	3b30      	subs	r3, #48	; 0x30
 801391a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2b09      	cmp	r3, #9
 8013920:	d80e      	bhi.n	8013940 <get_ldnumber+0x72>
 8013922:	68fa      	ldr	r2, [r7, #12]
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	429a      	cmp	r2, r3
 8013928:	d10a      	bne.n	8013940 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d107      	bne.n	8013940 <get_ldnumber+0x72>
					vol = (int)i;
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	3301      	adds	r3, #1
 8013938:	617b      	str	r3, [r7, #20]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	697a      	ldr	r2, [r7, #20]
 801393e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	e002      	b.n	801394a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013944:	2300      	movs	r3, #0
 8013946:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013948:	693b      	ldr	r3, [r7, #16]
}
 801394a:	4618      	mov	r0, r3
 801394c:	371c      	adds	r7, #28
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr
	...

08013958 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2200      	movs	r2, #0
 8013966:	70da      	strb	r2, [r3, #3]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f04f 32ff 	mov.w	r2, #4294967295
 801396e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013970:	6839      	ldr	r1, [r7, #0]
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7ff f8e0 	bl	8012b38 <move_window>
 8013978:	4603      	mov	r3, r0
 801397a:	2b00      	cmp	r3, #0
 801397c:	d001      	beq.n	8013982 <check_fs+0x2a>
 801397e:	2304      	movs	r3, #4
 8013980:	e038      	b.n	80139f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	3330      	adds	r3, #48	; 0x30
 8013986:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801398a:	4618      	mov	r0, r3
 801398c:	f7fe fe24 	bl	80125d8 <ld_word>
 8013990:	4603      	mov	r3, r0
 8013992:	461a      	mov	r2, r3
 8013994:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013998:	429a      	cmp	r2, r3
 801399a:	d001      	beq.n	80139a0 <check_fs+0x48>
 801399c:	2303      	movs	r3, #3
 801399e:	e029      	b.n	80139f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139a6:	2be9      	cmp	r3, #233	; 0xe9
 80139a8:	d009      	beq.n	80139be <check_fs+0x66>
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139b0:	2beb      	cmp	r3, #235	; 0xeb
 80139b2:	d11e      	bne.n	80139f2 <check_fs+0x9a>
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80139ba:	2b90      	cmp	r3, #144	; 0x90
 80139bc:	d119      	bne.n	80139f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	3330      	adds	r3, #48	; 0x30
 80139c2:	3336      	adds	r3, #54	; 0x36
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7fe fe1f 	bl	8012608 <ld_dword>
 80139ca:	4603      	mov	r3, r0
 80139cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80139d0:	4a0a      	ldr	r2, [pc, #40]	; (80139fc <check_fs+0xa4>)
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d101      	bne.n	80139da <check_fs+0x82>
 80139d6:	2300      	movs	r3, #0
 80139d8:	e00c      	b.n	80139f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	3330      	adds	r3, #48	; 0x30
 80139de:	3352      	adds	r3, #82	; 0x52
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7fe fe11 	bl	8012608 <ld_dword>
 80139e6:	4602      	mov	r2, r0
 80139e8:	4b05      	ldr	r3, [pc, #20]	; (8013a00 <check_fs+0xa8>)
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d101      	bne.n	80139f2 <check_fs+0x9a>
 80139ee:	2300      	movs	r3, #0
 80139f0:	e000      	b.n	80139f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80139f2:	2302      	movs	r3, #2
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3708      	adds	r7, #8
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}
 80139fc:	00544146 	.word	0x00544146
 8013a00:	33544146 	.word	0x33544146

08013a04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b096      	sub	sp, #88	; 0x58
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	4613      	mov	r3, r2
 8013a10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	2200      	movs	r2, #0
 8013a16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013a18:	68f8      	ldr	r0, [r7, #12]
 8013a1a:	f7ff ff58 	bl	80138ce <get_ldnumber>
 8013a1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	da01      	bge.n	8013a2a <find_volume+0x26>
 8013a26:	230b      	movs	r3, #11
 8013a28:	e22e      	b.n	8013e88 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013a2a:	4aa8      	ldr	r2, [pc, #672]	; (8013ccc <find_volume+0x2c8>)
 8013a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d101      	bne.n	8013a3e <find_volume+0x3a>
 8013a3a:	230c      	movs	r3, #12
 8013a3c:	e224      	b.n	8013e88 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013a44:	79fb      	ldrb	r3, [r7, #7]
 8013a46:	f023 0301 	bic.w	r3, r3, #1
 8013a4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d01a      	beq.n	8013a8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a56:	785b      	ldrb	r3, [r3, #1]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7fe fd1f 	bl	801249c <disk_status>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a68:	f003 0301 	and.w	r3, r3, #1
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d10c      	bne.n	8013a8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013a70:	79fb      	ldrb	r3, [r7, #7]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d007      	beq.n	8013a86 <find_volume+0x82>
 8013a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a7a:	f003 0304 	and.w	r3, r3, #4
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d001      	beq.n	8013a86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013a82:	230a      	movs	r3, #10
 8013a84:	e200      	b.n	8013e88 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8013a86:	2300      	movs	r3, #0
 8013a88:	e1fe      	b.n	8013e88 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a92:	b2da      	uxtb	r2, r3
 8013a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a9a:	785b      	ldrb	r3, [r3, #1]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7fe fd17 	bl	80124d0 <disk_initialize>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013aac:	f003 0301 	and.w	r3, r3, #1
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013ab4:	2303      	movs	r3, #3
 8013ab6:	e1e7      	b.n	8013e88 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013ab8:	79fb      	ldrb	r3, [r7, #7]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d007      	beq.n	8013ace <find_volume+0xca>
 8013abe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ac2:	f003 0304 	and.w	r3, r3, #4
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d001      	beq.n	8013ace <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013aca:	230a      	movs	r3, #10
 8013acc:	e1dc      	b.n	8013e88 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013ad2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ad6:	f7ff ff3f 	bl	8013958 <check_fs>
 8013ada:	4603      	mov	r3, r0
 8013adc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ae4:	2b02      	cmp	r3, #2
 8013ae6:	d14b      	bne.n	8013b80 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013ae8:	2300      	movs	r3, #0
 8013aea:	643b      	str	r3, [r7, #64]	; 0x40
 8013aec:	e01f      	b.n	8013b2e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013af6:	011b      	lsls	r3, r3, #4
 8013af8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013afc:	4413      	add	r3, r2
 8013afe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b02:	3304      	adds	r3, #4
 8013b04:	781b      	ldrb	r3, [r3, #0]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d006      	beq.n	8013b18 <find_volume+0x114>
 8013b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0c:	3308      	adds	r3, #8
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7fe fd7a 	bl	8012608 <ld_dword>
 8013b14:	4602      	mov	r2, r0
 8013b16:	e000      	b.n	8013b1a <find_volume+0x116>
 8013b18:	2200      	movs	r2, #0
 8013b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b1c:	009b      	lsls	r3, r3, #2
 8013b1e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013b22:	440b      	add	r3, r1
 8013b24:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b2a:	3301      	adds	r3, #1
 8013b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8013b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b30:	2b03      	cmp	r3, #3
 8013b32:	d9dc      	bls.n	8013aee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013b34:	2300      	movs	r3, #0
 8013b36:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d002      	beq.n	8013b44 <find_volume+0x140>
 8013b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b40:	3b01      	subs	r3, #1
 8013b42:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013b4c:	4413      	add	r3, r2
 8013b4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013b52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d005      	beq.n	8013b66 <find_volume+0x162>
 8013b5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b5e:	f7ff fefb 	bl	8013958 <check_fs>
 8013b62:	4603      	mov	r3, r0
 8013b64:	e000      	b.n	8013b68 <find_volume+0x164>
 8013b66:	2303      	movs	r3, #3
 8013b68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b70:	2b01      	cmp	r3, #1
 8013b72:	d905      	bls.n	8013b80 <find_volume+0x17c>
 8013b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b76:	3301      	adds	r3, #1
 8013b78:	643b      	str	r3, [r7, #64]	; 0x40
 8013b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	d9e1      	bls.n	8013b44 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b84:	2b04      	cmp	r3, #4
 8013b86:	d101      	bne.n	8013b8c <find_volume+0x188>
 8013b88:	2301      	movs	r3, #1
 8013b8a:	e17d      	b.n	8013e88 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013b8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d901      	bls.n	8013b98 <find_volume+0x194>
 8013b94:	230d      	movs	r3, #13
 8013b96:	e177      	b.n	8013e88 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b9a:	3330      	adds	r3, #48	; 0x30
 8013b9c:	330b      	adds	r3, #11
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fe fd1a 	bl	80125d8 <ld_word>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013baa:	d001      	beq.n	8013bb0 <find_volume+0x1ac>
 8013bac:	230d      	movs	r3, #13
 8013bae:	e16b      	b.n	8013e88 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb2:	3330      	adds	r3, #48	; 0x30
 8013bb4:	3316      	adds	r3, #22
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7fe fd0e 	bl	80125d8 <ld_word>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d106      	bne.n	8013bd4 <find_volume+0x1d0>
 8013bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc8:	3330      	adds	r3, #48	; 0x30
 8013bca:	3324      	adds	r3, #36	; 0x24
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7fe fd1b 	bl	8012608 <ld_dword>
 8013bd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013bd8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bdc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8013be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be6:	789b      	ldrb	r3, [r3, #2]
 8013be8:	2b01      	cmp	r3, #1
 8013bea:	d005      	beq.n	8013bf8 <find_volume+0x1f4>
 8013bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bee:	789b      	ldrb	r3, [r3, #2]
 8013bf0:	2b02      	cmp	r3, #2
 8013bf2:	d001      	beq.n	8013bf8 <find_volume+0x1f4>
 8013bf4:	230d      	movs	r3, #13
 8013bf6:	e147      	b.n	8013e88 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfa:	789b      	ldrb	r3, [r3, #2]
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c00:	fb02 f303 	mul.w	r3, r2, r3
 8013c04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c14:	895b      	ldrh	r3, [r3, #10]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d008      	beq.n	8013c2c <find_volume+0x228>
 8013c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c1c:	895b      	ldrh	r3, [r3, #10]
 8013c1e:	461a      	mov	r2, r3
 8013c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c22:	895b      	ldrh	r3, [r3, #10]
 8013c24:	3b01      	subs	r3, #1
 8013c26:	4013      	ands	r3, r2
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d001      	beq.n	8013c30 <find_volume+0x22c>
 8013c2c:	230d      	movs	r3, #13
 8013c2e:	e12b      	b.n	8013e88 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c32:	3330      	adds	r3, #48	; 0x30
 8013c34:	3311      	adds	r3, #17
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fe fcce 	bl	80125d8 <ld_word>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	461a      	mov	r2, r3
 8013c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c46:	891b      	ldrh	r3, [r3, #8]
 8013c48:	f003 030f 	and.w	r3, r3, #15
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d001      	beq.n	8013c56 <find_volume+0x252>
 8013c52:	230d      	movs	r3, #13
 8013c54:	e118      	b.n	8013e88 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c58:	3330      	adds	r3, #48	; 0x30
 8013c5a:	3313      	adds	r3, #19
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7fe fcbb 	bl	80125d8 <ld_word>
 8013c62:	4603      	mov	r3, r0
 8013c64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d106      	bne.n	8013c7a <find_volume+0x276>
 8013c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c6e:	3330      	adds	r3, #48	; 0x30
 8013c70:	3320      	adds	r3, #32
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7fe fcc8 	bl	8012608 <ld_dword>
 8013c78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c7c:	3330      	adds	r3, #48	; 0x30
 8013c7e:	330e      	adds	r3, #14
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7fe fca9 	bl	80125d8 <ld_word>
 8013c86:	4603      	mov	r3, r0
 8013c88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d101      	bne.n	8013c94 <find_volume+0x290>
 8013c90:	230d      	movs	r3, #13
 8013c92:	e0f9      	b.n	8013e88 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013c94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c98:	4413      	add	r3, r2
 8013c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c9c:	8912      	ldrh	r2, [r2, #8]
 8013c9e:	0912      	lsrs	r2, r2, #4
 8013ca0:	b292      	uxth	r2, r2
 8013ca2:	4413      	add	r3, r2
 8013ca4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d201      	bcs.n	8013cb2 <find_volume+0x2ae>
 8013cae:	230d      	movs	r3, #13
 8013cb0:	e0ea      	b.n	8013e88 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb6:	1ad3      	subs	r3, r2, r3
 8013cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cba:	8952      	ldrh	r2, [r2, #10]
 8013cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013cc0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d103      	bne.n	8013cd0 <find_volume+0x2cc>
 8013cc8:	230d      	movs	r3, #13
 8013cca:	e0dd      	b.n	8013e88 <find_volume+0x484>
 8013ccc:	24040204 	.word	0x24040204
		fmt = FS_FAT32;
 8013cd0:	2303      	movs	r3, #3
 8013cd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013cdc:	4293      	cmp	r3, r2
 8013cde:	d802      	bhi.n	8013ce6 <find_volume+0x2e2>
 8013ce0:	2302      	movs	r3, #2
 8013ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d802      	bhi.n	8013cf6 <find_volume+0x2f2>
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf8:	1c9a      	adds	r2, r3, #2
 8013cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cfc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d02:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013d04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d08:	441a      	add	r2, r3
 8013d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d0c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013d0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d12:	441a      	add	r2, r3
 8013d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d16:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8013d18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d1c:	2b03      	cmp	r3, #3
 8013d1e:	d11e      	bne.n	8013d5e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d22:	3330      	adds	r3, #48	; 0x30
 8013d24:	332a      	adds	r3, #42	; 0x2a
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fe fc56 	bl	80125d8 <ld_word>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d001      	beq.n	8013d36 <find_volume+0x332>
 8013d32:	230d      	movs	r3, #13
 8013d34:	e0a8      	b.n	8013e88 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d38:	891b      	ldrh	r3, [r3, #8]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d001      	beq.n	8013d42 <find_volume+0x33e>
 8013d3e:	230d      	movs	r3, #13
 8013d40:	e0a2      	b.n	8013e88 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d44:	3330      	adds	r3, #48	; 0x30
 8013d46:	332c      	adds	r3, #44	; 0x2c
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fe fc5d 	bl	8012608 <ld_dword>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d52:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d56:	695b      	ldr	r3, [r3, #20]
 8013d58:	009b      	lsls	r3, r3, #2
 8013d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8013d5c:	e01f      	b.n	8013d9e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d60:	891b      	ldrh	r3, [r3, #8]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d101      	bne.n	8013d6a <find_volume+0x366>
 8013d66:	230d      	movs	r3, #13
 8013d68:	e08e      	b.n	8013e88 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d6c:	6a1a      	ldr	r2, [r3, #32]
 8013d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d70:	441a      	add	r2, r3
 8013d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d74:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013d76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d7a:	2b02      	cmp	r3, #2
 8013d7c:	d103      	bne.n	8013d86 <find_volume+0x382>
 8013d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d80:	695b      	ldr	r3, [r3, #20]
 8013d82:	005b      	lsls	r3, r3, #1
 8013d84:	e00a      	b.n	8013d9c <find_volume+0x398>
 8013d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d88:	695a      	ldr	r2, [r3, #20]
 8013d8a:	4613      	mov	r3, r2
 8013d8c:	005b      	lsls	r3, r3, #1
 8013d8e:	4413      	add	r3, r2
 8013d90:	085a      	lsrs	r2, r3, #1
 8013d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d94:	695b      	ldr	r3, [r3, #20]
 8013d96:	f003 0301 	and.w	r3, r3, #1
 8013d9a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013d9c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da0:	699a      	ldr	r2, [r3, #24]
 8013da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013da4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013da8:	0a5b      	lsrs	r3, r3, #9
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d201      	bcs.n	8013db2 <find_volume+0x3ae>
 8013dae:	230d      	movs	r3, #13
 8013db0:	e06a      	b.n	8013e88 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db4:	f04f 32ff 	mov.w	r2, #4294967295
 8013db8:	611a      	str	r2, [r3, #16]
 8013dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dbc:	691a      	ldr	r2, [r3, #16]
 8013dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc4:	2280      	movs	r2, #128	; 0x80
 8013dc6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dcc:	2b03      	cmp	r3, #3
 8013dce:	d149      	bne.n	8013e64 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd2:	3330      	adds	r3, #48	; 0x30
 8013dd4:	3330      	adds	r3, #48	; 0x30
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7fe fbfe 	bl	80125d8 <ld_word>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b01      	cmp	r3, #1
 8013de0:	d140      	bne.n	8013e64 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013de4:	3301      	adds	r3, #1
 8013de6:	4619      	mov	r1, r3
 8013de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013dea:	f7fe fea5 	bl	8012b38 <move_window>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d137      	bne.n	8013e64 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8013df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df6:	2200      	movs	r2, #0
 8013df8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dfc:	3330      	adds	r3, #48	; 0x30
 8013dfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe fbe8 	bl	80125d8 <ld_word>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d127      	bne.n	8013e64 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e16:	3330      	adds	r3, #48	; 0x30
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7fe fbf5 	bl	8012608 <ld_dword>
 8013e1e:	4602      	mov	r2, r0
 8013e20:	4b1b      	ldr	r3, [pc, #108]	; (8013e90 <find_volume+0x48c>)
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d11e      	bne.n	8013e64 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e28:	3330      	adds	r3, #48	; 0x30
 8013e2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7fe fbea 	bl	8012608 <ld_dword>
 8013e34:	4602      	mov	r2, r0
 8013e36:	4b17      	ldr	r3, [pc, #92]	; (8013e94 <find_volume+0x490>)
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d113      	bne.n	8013e64 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e3e:	3330      	adds	r3, #48	; 0x30
 8013e40:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7fe fbdf 	bl	8012608 <ld_dword>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e4e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e52:	3330      	adds	r3, #48	; 0x30
 8013e54:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fe fbd5 	bl	8012608 <ld_dword>
 8013e5e:	4602      	mov	r2, r0
 8013e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e62:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013e6a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013e6c:	4b0a      	ldr	r3, [pc, #40]	; (8013e98 <find_volume+0x494>)
 8013e6e:	881b      	ldrh	r3, [r3, #0]
 8013e70:	3301      	adds	r3, #1
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	4b08      	ldr	r3, [pc, #32]	; (8013e98 <find_volume+0x494>)
 8013e76:	801a      	strh	r2, [r3, #0]
 8013e78:	4b07      	ldr	r3, [pc, #28]	; (8013e98 <find_volume+0x494>)
 8013e7a:	881a      	ldrh	r2, [r3, #0]
 8013e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e7e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013e80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e82:	f7fe fdf1 	bl	8012a68 <clear_lock>
#endif
	return FR_OK;
 8013e86:	2300      	movs	r3, #0
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3758      	adds	r7, #88	; 0x58
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	41615252 	.word	0x41615252
 8013e94:	61417272 	.word	0x61417272
 8013e98:	24040208 	.word	0x24040208

08013e9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013ea6:	2309      	movs	r3, #9
 8013ea8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d01c      	beq.n	8013eea <validate+0x4e>
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d018      	beq.n	8013eea <validate+0x4e>
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d013      	beq.n	8013eea <validate+0x4e>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	889a      	ldrh	r2, [r3, #4]
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	88db      	ldrh	r3, [r3, #6]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d10c      	bne.n	8013eea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	785b      	ldrb	r3, [r3, #1]
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7fe fae0 	bl	801249c <disk_status>
 8013edc:	4603      	mov	r3, r0
 8013ede:	f003 0301 	and.w	r3, r3, #1
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d101      	bne.n	8013eea <validate+0x4e>
			res = FR_OK;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013eea:	7bfb      	ldrb	r3, [r7, #15]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d102      	bne.n	8013ef6 <validate+0x5a>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	e000      	b.n	8013ef8 <validate+0x5c>
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	683a      	ldr	r2, [r7, #0]
 8013efa:	6013      	str	r3, [r2, #0]
	return res;
 8013efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3710      	adds	r7, #16
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
	...

08013f08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b088      	sub	sp, #32
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	4613      	mov	r3, r2
 8013f14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013f1a:	f107 0310 	add.w	r3, r7, #16
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7ff fcd5 	bl	80138ce <get_ldnumber>
 8013f24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	da01      	bge.n	8013f30 <f_mount+0x28>
 8013f2c:	230b      	movs	r3, #11
 8013f2e:	e02b      	b.n	8013f88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013f30:	4a17      	ldr	r2, [pc, #92]	; (8013f90 <f_mount+0x88>)
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013f3a:	69bb      	ldr	r3, [r7, #24]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d005      	beq.n	8013f4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013f40:	69b8      	ldr	r0, [r7, #24]
 8013f42:	f7fe fd91 	bl	8012a68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013f46:	69bb      	ldr	r3, [r7, #24]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d002      	beq.n	8013f58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	2200      	movs	r2, #0
 8013f56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013f58:	68fa      	ldr	r2, [r7, #12]
 8013f5a:	490d      	ldr	r1, [pc, #52]	; (8013f90 <f_mount+0x88>)
 8013f5c:	69fb      	ldr	r3, [r7, #28]
 8013f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d002      	beq.n	8013f6e <f_mount+0x66>
 8013f68:	79fb      	ldrb	r3, [r7, #7]
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d001      	beq.n	8013f72 <f_mount+0x6a>
 8013f6e:	2300      	movs	r3, #0
 8013f70:	e00a      	b.n	8013f88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013f72:	f107 010c 	add.w	r1, r7, #12
 8013f76:	f107 0308 	add.w	r3, r7, #8
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7ff fd41 	bl	8013a04 <find_volume>
 8013f82:	4603      	mov	r3, r0
 8013f84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3720      	adds	r7, #32
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	24040204 	.word	0x24040204

08013f94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b098      	sub	sp, #96	; 0x60
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d101      	bne.n	8013fac <f_open+0x18>
 8013fa8:	2309      	movs	r3, #9
 8013faa:	e1ad      	b.n	8014308 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013fac:	79fb      	ldrb	r3, [r7, #7]
 8013fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013fb4:	79fa      	ldrb	r2, [r7, #7]
 8013fb6:	f107 0110 	add.w	r1, r7, #16
 8013fba:	f107 0308 	add.w	r3, r7, #8
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7ff fd20 	bl	8013a04 <find_volume>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f040 8191 	bne.w	80142f6 <f_open+0x362>
		dj.obj.fs = fs;
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013fd8:	68ba      	ldr	r2, [r7, #8]
 8013fda:	f107 0314 	add.w	r3, r7, #20
 8013fde:	4611      	mov	r1, r2
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7ff fc03 	bl	80137ec <follow_path>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d11a      	bne.n	801402a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013ff4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013ff8:	b25b      	sxtb	r3, r3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	da03      	bge.n	8014006 <f_open+0x72>
				res = FR_INVALID_NAME;
 8013ffe:	2306      	movs	r3, #6
 8014000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014004:	e011      	b.n	801402a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014006:	79fb      	ldrb	r3, [r7, #7]
 8014008:	f023 0301 	bic.w	r3, r3, #1
 801400c:	2b00      	cmp	r3, #0
 801400e:	bf14      	ite	ne
 8014010:	2301      	movne	r3, #1
 8014012:	2300      	moveq	r3, #0
 8014014:	b2db      	uxtb	r3, r3
 8014016:	461a      	mov	r2, r3
 8014018:	f107 0314 	add.w	r3, r7, #20
 801401c:	4611      	mov	r1, r2
 801401e:	4618      	mov	r0, r3
 8014020:	f7fe fbda 	bl	80127d8 <chk_lock>
 8014024:	4603      	mov	r3, r0
 8014026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801402a:	79fb      	ldrb	r3, [r7, #7]
 801402c:	f003 031c 	and.w	r3, r3, #28
 8014030:	2b00      	cmp	r3, #0
 8014032:	d07f      	beq.n	8014134 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014038:	2b00      	cmp	r3, #0
 801403a:	d017      	beq.n	801406c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801403c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014040:	2b04      	cmp	r3, #4
 8014042:	d10e      	bne.n	8014062 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014044:	f7fe fc24 	bl	8012890 <enq_lock>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d006      	beq.n	801405c <f_open+0xc8>
 801404e:	f107 0314 	add.w	r3, r7, #20
 8014052:	4618      	mov	r0, r3
 8014054:	f7ff fb03 	bl	801365e <dir_register>
 8014058:	4603      	mov	r3, r0
 801405a:	e000      	b.n	801405e <f_open+0xca>
 801405c:	2312      	movs	r3, #18
 801405e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014062:	79fb      	ldrb	r3, [r7, #7]
 8014064:	f043 0308 	orr.w	r3, r3, #8
 8014068:	71fb      	strb	r3, [r7, #7]
 801406a:	e010      	b.n	801408e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801406c:	7ebb      	ldrb	r3, [r7, #26]
 801406e:	f003 0311 	and.w	r3, r3, #17
 8014072:	2b00      	cmp	r3, #0
 8014074:	d003      	beq.n	801407e <f_open+0xea>
					res = FR_DENIED;
 8014076:	2307      	movs	r3, #7
 8014078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801407c:	e007      	b.n	801408e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801407e:	79fb      	ldrb	r3, [r7, #7]
 8014080:	f003 0304 	and.w	r3, r3, #4
 8014084:	2b00      	cmp	r3, #0
 8014086:	d002      	beq.n	801408e <f_open+0xfa>
 8014088:	2308      	movs	r3, #8
 801408a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801408e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014092:	2b00      	cmp	r3, #0
 8014094:	d168      	bne.n	8014168 <f_open+0x1d4>
 8014096:	79fb      	ldrb	r3, [r7, #7]
 8014098:	f003 0308 	and.w	r3, r3, #8
 801409c:	2b00      	cmp	r3, #0
 801409e:	d063      	beq.n	8014168 <f_open+0x1d4>
				dw = GET_FATTIME();
 80140a0:	f7fb f8fe 	bl	800f2a0 <get_fattime>
 80140a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80140a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140a8:	330e      	adds	r3, #14
 80140aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7fe fae9 	bl	8012684 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80140b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b4:	3316      	adds	r3, #22
 80140b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7fe fae3 	bl	8012684 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80140be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140c0:	330b      	adds	r3, #11
 80140c2:	2220      	movs	r2, #32
 80140c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140ca:	4611      	mov	r1, r2
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7ff fa32 	bl	8013536 <ld_clust>
 80140d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80140d8:	2200      	movs	r2, #0
 80140da:	4618      	mov	r0, r3
 80140dc:	f7ff fa4a 	bl	8013574 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80140e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140e2:	331c      	adds	r3, #28
 80140e4:	2100      	movs	r1, #0
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fe facc 	bl	8012684 <st_dword>
					fs->wflag = 1;
 80140ec:	693b      	ldr	r3, [r7, #16]
 80140ee:	2201      	movs	r2, #1
 80140f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80140f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d037      	beq.n	8014168 <f_open+0x1d4>
						dw = fs->winsect;
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80140fe:	f107 0314 	add.w	r3, r7, #20
 8014102:	2200      	movs	r2, #0
 8014104:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014106:	4618      	mov	r0, r3
 8014108:	f7fe ff5d 	bl	8012fc6 <remove_chain>
 801410c:	4603      	mov	r3, r0
 801410e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014116:	2b00      	cmp	r3, #0
 8014118:	d126      	bne.n	8014168 <f_open+0x1d4>
							res = move_window(fs, dw);
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801411e:	4618      	mov	r0, r3
 8014120:	f7fe fd0a 	bl	8012b38 <move_window>
 8014124:	4603      	mov	r3, r0
 8014126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801412e:	3a01      	subs	r2, #1
 8014130:	60da      	str	r2, [r3, #12]
 8014132:	e019      	b.n	8014168 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014138:	2b00      	cmp	r3, #0
 801413a:	d115      	bne.n	8014168 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801413c:	7ebb      	ldrb	r3, [r7, #26]
 801413e:	f003 0310 	and.w	r3, r3, #16
 8014142:	2b00      	cmp	r3, #0
 8014144:	d003      	beq.n	801414e <f_open+0x1ba>
					res = FR_NO_FILE;
 8014146:	2304      	movs	r3, #4
 8014148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801414c:	e00c      	b.n	8014168 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801414e:	79fb      	ldrb	r3, [r7, #7]
 8014150:	f003 0302 	and.w	r3, r3, #2
 8014154:	2b00      	cmp	r3, #0
 8014156:	d007      	beq.n	8014168 <f_open+0x1d4>
 8014158:	7ebb      	ldrb	r3, [r7, #26]
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	d002      	beq.n	8014168 <f_open+0x1d4>
						res = FR_DENIED;
 8014162:	2307      	movs	r3, #7
 8014164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801416c:	2b00      	cmp	r3, #0
 801416e:	d128      	bne.n	80141c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014170:	79fb      	ldrb	r3, [r7, #7]
 8014172:	f003 0308 	and.w	r3, r3, #8
 8014176:	2b00      	cmp	r3, #0
 8014178:	d003      	beq.n	8014182 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801417a:	79fb      	ldrb	r3, [r7, #7]
 801417c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014180:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801418a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014190:	79fb      	ldrb	r3, [r7, #7]
 8014192:	f023 0301 	bic.w	r3, r3, #1
 8014196:	2b00      	cmp	r3, #0
 8014198:	bf14      	ite	ne
 801419a:	2301      	movne	r3, #1
 801419c:	2300      	moveq	r3, #0
 801419e:	b2db      	uxtb	r3, r3
 80141a0:	461a      	mov	r2, r3
 80141a2:	f107 0314 	add.w	r3, r7, #20
 80141a6:	4611      	mov	r1, r2
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7fe fb93 	bl	80128d4 <inc_lock>
 80141ae:	4602      	mov	r2, r0
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	691b      	ldr	r3, [r3, #16]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d102      	bne.n	80141c2 <f_open+0x22e>
 80141bc:	2302      	movs	r3, #2
 80141be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80141c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	f040 8095 	bne.w	80142f6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141d0:	4611      	mov	r1, r2
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7ff f9af 	bl	8013536 <ld_clust>
 80141d8:	4602      	mov	r2, r0
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80141de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141e0:	331c      	adds	r3, #28
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7fe fa10 	bl	8012608 <ld_dword>
 80141e8:	4602      	mov	r2, r0
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2200      	movs	r2, #0
 80141f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80141f4:	693a      	ldr	r2, [r7, #16]
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	88da      	ldrh	r2, [r3, #6]
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	79fa      	ldrb	r2, [r7, #7]
 8014206:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	2200      	movs	r2, #0
 801420c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	2200      	movs	r2, #0
 8014212:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	2200      	movs	r2, #0
 8014218:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	3330      	adds	r3, #48	; 0x30
 801421e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014222:	2100      	movs	r1, #0
 8014224:	4618      	mov	r0, r3
 8014226:	f7fe fa7a 	bl	801271e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801422a:	79fb      	ldrb	r3, [r7, #7]
 801422c:	f003 0320 	and.w	r3, r3, #32
 8014230:	2b00      	cmp	r3, #0
 8014232:	d060      	beq.n	80142f6 <f_open+0x362>
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	68db      	ldr	r3, [r3, #12]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d05c      	beq.n	80142f6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	68da      	ldr	r2, [r3, #12]
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	895b      	ldrh	r3, [r3, #10]
 8014248:	025b      	lsls	r3, r3, #9
 801424a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	689b      	ldr	r3, [r3, #8]
 8014250:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	68db      	ldr	r3, [r3, #12]
 8014256:	657b      	str	r3, [r7, #84]	; 0x54
 8014258:	e016      	b.n	8014288 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801425e:	4618      	mov	r0, r3
 8014260:	f7fe fd25 	bl	8012cae <get_fat>
 8014264:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014268:	2b01      	cmp	r3, #1
 801426a:	d802      	bhi.n	8014272 <f_open+0x2de>
 801426c:	2302      	movs	r3, #2
 801426e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014278:	d102      	bne.n	8014280 <f_open+0x2ec>
 801427a:	2301      	movs	r3, #1
 801427c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014280:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	657b      	str	r3, [r7, #84]	; 0x54
 8014288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801428c:	2b00      	cmp	r3, #0
 801428e:	d103      	bne.n	8014298 <f_open+0x304>
 8014290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014294:	429a      	cmp	r2, r3
 8014296:	d8e0      	bhi.n	801425a <f_open+0x2c6>
				}
				fp->clust = clst;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801429c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801429e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d127      	bne.n	80142f6 <f_open+0x362>
 80142a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d022      	beq.n	80142f6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7fe fcdb 	bl	8012c70 <clust2sect>
 80142ba:	6478      	str	r0, [r7, #68]	; 0x44
 80142bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d103      	bne.n	80142ca <f_open+0x336>
						res = FR_INT_ERR;
 80142c2:	2302      	movs	r3, #2
 80142c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80142c8:	e015      	b.n	80142f6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80142ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142cc:	0a5a      	lsrs	r2, r3, #9
 80142ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142d0:	441a      	add	r2, r3
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	7858      	ldrb	r0, [r3, #1]
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	6a1a      	ldr	r2, [r3, #32]
 80142e4:	2301      	movs	r3, #1
 80142e6:	f7fe f919 	bl	801251c <disk_read>
 80142ea:	4603      	mov	r3, r0
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d002      	beq.n	80142f6 <f_open+0x362>
 80142f0:	2301      	movs	r3, #1
 80142f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80142f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d002      	beq.n	8014304 <f_open+0x370>
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	2200      	movs	r2, #0
 8014302:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014308:	4618      	mov	r0, r3
 801430a:	3760      	adds	r7, #96	; 0x60
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b08e      	sub	sp, #56	; 0x38
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	607a      	str	r2, [r7, #4]
 801431c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	2200      	movs	r2, #0
 8014326:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	f107 0214 	add.w	r2, r7, #20
 801432e:	4611      	mov	r1, r2
 8014330:	4618      	mov	r0, r3
 8014332:	f7ff fdb3 	bl	8013e9c <validate>
 8014336:	4603      	mov	r3, r0
 8014338:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801433c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014340:	2b00      	cmp	r3, #0
 8014342:	d107      	bne.n	8014354 <f_read+0x44>
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	7d5b      	ldrb	r3, [r3, #21]
 8014348:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801434c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014350:	2b00      	cmp	r3, #0
 8014352:	d002      	beq.n	801435a <f_read+0x4a>
 8014354:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014358:	e115      	b.n	8014586 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	7d1b      	ldrb	r3, [r3, #20]
 801435e:	f003 0301 	and.w	r3, r3, #1
 8014362:	2b00      	cmp	r3, #0
 8014364:	d101      	bne.n	801436a <f_read+0x5a>
 8014366:	2307      	movs	r3, #7
 8014368:	e10d      	b.n	8014586 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	68da      	ldr	r2, [r3, #12]
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	699b      	ldr	r3, [r3, #24]
 8014372:	1ad3      	subs	r3, r2, r3
 8014374:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014376:	687a      	ldr	r2, [r7, #4]
 8014378:	6a3b      	ldr	r3, [r7, #32]
 801437a:	429a      	cmp	r2, r3
 801437c:	f240 80fe 	bls.w	801457c <f_read+0x26c>
 8014380:	6a3b      	ldr	r3, [r7, #32]
 8014382:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014384:	e0fa      	b.n	801457c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	699b      	ldr	r3, [r3, #24]
 801438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801438e:	2b00      	cmp	r3, #0
 8014390:	f040 80c6 	bne.w	8014520 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	699b      	ldr	r3, [r3, #24]
 8014398:	0a5b      	lsrs	r3, r3, #9
 801439a:	697a      	ldr	r2, [r7, #20]
 801439c:	8952      	ldrh	r2, [r2, #10]
 801439e:	3a01      	subs	r2, #1
 80143a0:	4013      	ands	r3, r2
 80143a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d12f      	bne.n	801440a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	699b      	ldr	r3, [r3, #24]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d103      	bne.n	80143ba <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	689b      	ldr	r3, [r3, #8]
 80143b6:	633b      	str	r3, [r7, #48]	; 0x30
 80143b8:	e013      	b.n	80143e2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d007      	beq.n	80143d2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	699b      	ldr	r3, [r3, #24]
 80143c6:	4619      	mov	r1, r3
 80143c8:	68f8      	ldr	r0, [r7, #12]
 80143ca:	f7fe fef9 	bl	80131c0 <clmt_clust>
 80143ce:	6338      	str	r0, [r7, #48]	; 0x30
 80143d0:	e007      	b.n	80143e2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	69db      	ldr	r3, [r3, #28]
 80143d8:	4619      	mov	r1, r3
 80143da:	4610      	mov	r0, r2
 80143dc:	f7fe fc67 	bl	8012cae <get_fat>
 80143e0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80143e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	d804      	bhi.n	80143f2 <f_read+0xe2>
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2202      	movs	r2, #2
 80143ec:	755a      	strb	r2, [r3, #21]
 80143ee:	2302      	movs	r3, #2
 80143f0:	e0c9      	b.n	8014586 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80143f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143f8:	d104      	bne.n	8014404 <f_read+0xf4>
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2201      	movs	r2, #1
 80143fe:	755a      	strb	r2, [r3, #21]
 8014400:	2301      	movs	r3, #1
 8014402:	e0c0      	b.n	8014586 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014408:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801440a:	697a      	ldr	r2, [r7, #20]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	69db      	ldr	r3, [r3, #28]
 8014410:	4619      	mov	r1, r3
 8014412:	4610      	mov	r0, r2
 8014414:	f7fe fc2c 	bl	8012c70 <clust2sect>
 8014418:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801441a:	69bb      	ldr	r3, [r7, #24]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d104      	bne.n	801442a <f_read+0x11a>
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2202      	movs	r2, #2
 8014424:	755a      	strb	r2, [r3, #21]
 8014426:	2302      	movs	r3, #2
 8014428:	e0ad      	b.n	8014586 <f_read+0x276>
			sect += csect;
 801442a:	69ba      	ldr	r2, [r7, #24]
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	4413      	add	r3, r2
 8014430:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	0a5b      	lsrs	r3, r3, #9
 8014436:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801443a:	2b00      	cmp	r3, #0
 801443c:	d039      	beq.n	80144b2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801443e:	69fa      	ldr	r2, [r7, #28]
 8014440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014442:	4413      	add	r3, r2
 8014444:	697a      	ldr	r2, [r7, #20]
 8014446:	8952      	ldrh	r2, [r2, #10]
 8014448:	4293      	cmp	r3, r2
 801444a:	d905      	bls.n	8014458 <f_read+0x148>
					cc = fs->csize - csect;
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	895b      	ldrh	r3, [r3, #10]
 8014450:	461a      	mov	r2, r3
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	1ad3      	subs	r3, r2, r3
 8014456:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	7858      	ldrb	r0, [r3, #1]
 801445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801445e:	69ba      	ldr	r2, [r7, #24]
 8014460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014462:	f7fe f85b 	bl	801251c <disk_read>
 8014466:	4603      	mov	r3, r0
 8014468:	2b00      	cmp	r3, #0
 801446a:	d004      	beq.n	8014476 <f_read+0x166>
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	2201      	movs	r2, #1
 8014470:	755a      	strb	r2, [r3, #21]
 8014472:	2301      	movs	r3, #1
 8014474:	e087      	b.n	8014586 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	7d1b      	ldrb	r3, [r3, #20]
 801447a:	b25b      	sxtb	r3, r3
 801447c:	2b00      	cmp	r3, #0
 801447e:	da14      	bge.n	80144aa <f_read+0x19a>
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	6a1a      	ldr	r2, [r3, #32]
 8014484:	69bb      	ldr	r3, [r7, #24]
 8014486:	1ad3      	subs	r3, r2, r3
 8014488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801448a:	429a      	cmp	r2, r3
 801448c:	d90d      	bls.n	80144aa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	6a1a      	ldr	r2, [r3, #32]
 8014492:	69bb      	ldr	r3, [r7, #24]
 8014494:	1ad3      	subs	r3, r2, r3
 8014496:	025b      	lsls	r3, r3, #9
 8014498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801449a:	18d0      	adds	r0, r2, r3
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	3330      	adds	r3, #48	; 0x30
 80144a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144a4:	4619      	mov	r1, r3
 80144a6:	f7fe f919 	bl	80126dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80144aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144ac:	025b      	lsls	r3, r3, #9
 80144ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80144b0:	e050      	b.n	8014554 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6a1b      	ldr	r3, [r3, #32]
 80144b6:	69ba      	ldr	r2, [r7, #24]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d02e      	beq.n	801451a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	7d1b      	ldrb	r3, [r3, #20]
 80144c0:	b25b      	sxtb	r3, r3
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	da18      	bge.n	80144f8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	7858      	ldrb	r0, [r3, #1]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	6a1a      	ldr	r2, [r3, #32]
 80144d4:	2301      	movs	r3, #1
 80144d6:	f7fe f841 	bl	801255c <disk_write>
 80144da:	4603      	mov	r3, r0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d004      	beq.n	80144ea <f_read+0x1da>
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2201      	movs	r2, #1
 80144e4:	755a      	strb	r2, [r3, #21]
 80144e6:	2301      	movs	r3, #1
 80144e8:	e04d      	b.n	8014586 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	7d1b      	ldrb	r3, [r3, #20]
 80144ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144f2:	b2da      	uxtb	r2, r3
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	7858      	ldrb	r0, [r3, #1]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014502:	2301      	movs	r3, #1
 8014504:	69ba      	ldr	r2, [r7, #24]
 8014506:	f7fe f809 	bl	801251c <disk_read>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d004      	beq.n	801451a <f_read+0x20a>
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2201      	movs	r2, #1
 8014514:	755a      	strb	r2, [r3, #21]
 8014516:	2301      	movs	r3, #1
 8014518:	e035      	b.n	8014586 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	69ba      	ldr	r2, [r7, #24]
 801451e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	699b      	ldr	r3, [r3, #24]
 8014524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014528:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801452c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801452e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	429a      	cmp	r2, r3
 8014534:	d901      	bls.n	801453a <f_read+0x22a>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	699b      	ldr	r3, [r3, #24]
 8014544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014548:	4413      	add	r3, r2
 801454a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801454c:	4619      	mov	r1, r3
 801454e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014550:	f7fe f8c4 	bl	80126dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014558:	4413      	add	r3, r2
 801455a:	627b      	str	r3, [r7, #36]	; 0x24
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	699a      	ldr	r2, [r3, #24]
 8014560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014562:	441a      	add	r2, r3
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	619a      	str	r2, [r3, #24]
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801456e:	441a      	add	r2, r3
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	601a      	str	r2, [r3, #0]
 8014574:	687a      	ldr	r2, [r7, #4]
 8014576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014578:	1ad3      	subs	r3, r2, r3
 801457a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	f47f af01 	bne.w	8014386 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014584:	2300      	movs	r3, #0
}
 8014586:	4618      	mov	r0, r3
 8014588:	3738      	adds	r7, #56	; 0x38
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}

0801458e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801458e:	b580      	push	{r7, lr}
 8014590:	b08c      	sub	sp, #48	; 0x30
 8014592:	af00      	add	r7, sp, #0
 8014594:	60f8      	str	r0, [r7, #12]
 8014596:	60b9      	str	r1, [r7, #8]
 8014598:	607a      	str	r2, [r7, #4]
 801459a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	2200      	movs	r2, #0
 80145a4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	f107 0210 	add.w	r2, r7, #16
 80145ac:	4611      	mov	r1, r2
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7ff fc74 	bl	8013e9c <validate>
 80145b4:	4603      	mov	r3, r0
 80145b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80145ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d107      	bne.n	80145d2 <f_write+0x44>
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	7d5b      	ldrb	r3, [r3, #21]
 80145c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80145ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d002      	beq.n	80145d8 <f_write+0x4a>
 80145d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145d6:	e14b      	b.n	8014870 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	7d1b      	ldrb	r3, [r3, #20]
 80145dc:	f003 0302 	and.w	r3, r3, #2
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d101      	bne.n	80145e8 <f_write+0x5a>
 80145e4:	2307      	movs	r3, #7
 80145e6:	e143      	b.n	8014870 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	699a      	ldr	r2, [r3, #24]
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	441a      	add	r2, r3
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	699b      	ldr	r3, [r3, #24]
 80145f4:	429a      	cmp	r2, r3
 80145f6:	f080 812d 	bcs.w	8014854 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	699b      	ldr	r3, [r3, #24]
 80145fe:	43db      	mvns	r3, r3
 8014600:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014602:	e127      	b.n	8014854 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	699b      	ldr	r3, [r3, #24]
 8014608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801460c:	2b00      	cmp	r3, #0
 801460e:	f040 80e3 	bne.w	80147d8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	699b      	ldr	r3, [r3, #24]
 8014616:	0a5b      	lsrs	r3, r3, #9
 8014618:	693a      	ldr	r2, [r7, #16]
 801461a:	8952      	ldrh	r2, [r2, #10]
 801461c:	3a01      	subs	r2, #1
 801461e:	4013      	ands	r3, r2
 8014620:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d143      	bne.n	80146b0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	699b      	ldr	r3, [r3, #24]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d10c      	bne.n	801464a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	689b      	ldr	r3, [r3, #8]
 8014634:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014638:	2b00      	cmp	r3, #0
 801463a:	d11a      	bne.n	8014672 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2100      	movs	r1, #0
 8014640:	4618      	mov	r0, r3
 8014642:	f7fe fd25 	bl	8013090 <create_chain>
 8014646:	62b8      	str	r0, [r7, #40]	; 0x28
 8014648:	e013      	b.n	8014672 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801464e:	2b00      	cmp	r3, #0
 8014650:	d007      	beq.n	8014662 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	699b      	ldr	r3, [r3, #24]
 8014656:	4619      	mov	r1, r3
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f7fe fdb1 	bl	80131c0 <clmt_clust>
 801465e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014660:	e007      	b.n	8014672 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014662:	68fa      	ldr	r2, [r7, #12]
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	69db      	ldr	r3, [r3, #28]
 8014668:	4619      	mov	r1, r3
 801466a:	4610      	mov	r0, r2
 801466c:	f7fe fd10 	bl	8013090 <create_chain>
 8014670:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014674:	2b00      	cmp	r3, #0
 8014676:	f000 80f2 	beq.w	801485e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801467c:	2b01      	cmp	r3, #1
 801467e:	d104      	bne.n	801468a <f_write+0xfc>
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	2202      	movs	r2, #2
 8014684:	755a      	strb	r2, [r3, #21]
 8014686:	2302      	movs	r3, #2
 8014688:	e0f2      	b.n	8014870 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014690:	d104      	bne.n	801469c <f_write+0x10e>
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	2201      	movs	r2, #1
 8014696:	755a      	strb	r2, [r3, #21]
 8014698:	2301      	movs	r3, #1
 801469a:	e0e9      	b.n	8014870 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	689b      	ldr	r3, [r3, #8]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d102      	bne.n	80146b0 <f_write+0x122>
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	7d1b      	ldrb	r3, [r3, #20]
 80146b4:	b25b      	sxtb	r3, r3
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	da18      	bge.n	80146ec <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	7858      	ldrb	r0, [r3, #1]
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	6a1a      	ldr	r2, [r3, #32]
 80146c8:	2301      	movs	r3, #1
 80146ca:	f7fd ff47 	bl	801255c <disk_write>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d004      	beq.n	80146de <f_write+0x150>
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	2201      	movs	r2, #1
 80146d8:	755a      	strb	r2, [r3, #21]
 80146da:	2301      	movs	r3, #1
 80146dc:	e0c8      	b.n	8014870 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	7d1b      	ldrb	r3, [r3, #20]
 80146e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146e6:	b2da      	uxtb	r2, r3
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80146ec:	693a      	ldr	r2, [r7, #16]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	69db      	ldr	r3, [r3, #28]
 80146f2:	4619      	mov	r1, r3
 80146f4:	4610      	mov	r0, r2
 80146f6:	f7fe fabb 	bl	8012c70 <clust2sect>
 80146fa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d104      	bne.n	801470c <f_write+0x17e>
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	2202      	movs	r2, #2
 8014706:	755a      	strb	r2, [r3, #21]
 8014708:	2302      	movs	r3, #2
 801470a:	e0b1      	b.n	8014870 <f_write+0x2e2>
			sect += csect;
 801470c:	697a      	ldr	r2, [r7, #20]
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	4413      	add	r3, r2
 8014712:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	0a5b      	lsrs	r3, r3, #9
 8014718:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801471a:	6a3b      	ldr	r3, [r7, #32]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d03c      	beq.n	801479a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014720:	69ba      	ldr	r2, [r7, #24]
 8014722:	6a3b      	ldr	r3, [r7, #32]
 8014724:	4413      	add	r3, r2
 8014726:	693a      	ldr	r2, [r7, #16]
 8014728:	8952      	ldrh	r2, [r2, #10]
 801472a:	4293      	cmp	r3, r2
 801472c:	d905      	bls.n	801473a <f_write+0x1ac>
					cc = fs->csize - csect;
 801472e:	693b      	ldr	r3, [r7, #16]
 8014730:	895b      	ldrh	r3, [r3, #10]
 8014732:	461a      	mov	r2, r3
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	1ad3      	subs	r3, r2, r3
 8014738:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	7858      	ldrb	r0, [r3, #1]
 801473e:	6a3b      	ldr	r3, [r7, #32]
 8014740:	697a      	ldr	r2, [r7, #20]
 8014742:	69f9      	ldr	r1, [r7, #28]
 8014744:	f7fd ff0a 	bl	801255c <disk_write>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d004      	beq.n	8014758 <f_write+0x1ca>
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2201      	movs	r2, #1
 8014752:	755a      	strb	r2, [r3, #21]
 8014754:	2301      	movs	r3, #1
 8014756:	e08b      	b.n	8014870 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	6a1a      	ldr	r2, [r3, #32]
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	1ad3      	subs	r3, r2, r3
 8014760:	6a3a      	ldr	r2, [r7, #32]
 8014762:	429a      	cmp	r2, r3
 8014764:	d915      	bls.n	8014792 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	6a1a      	ldr	r2, [r3, #32]
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	1ad3      	subs	r3, r2, r3
 8014774:	025b      	lsls	r3, r3, #9
 8014776:	69fa      	ldr	r2, [r7, #28]
 8014778:	4413      	add	r3, r2
 801477a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801477e:	4619      	mov	r1, r3
 8014780:	f7fd ffac 	bl	80126dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	7d1b      	ldrb	r3, [r3, #20]
 8014788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801478c:	b2da      	uxtb	r2, r3
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014792:	6a3b      	ldr	r3, [r7, #32]
 8014794:	025b      	lsls	r3, r3, #9
 8014796:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014798:	e03f      	b.n	801481a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	6a1b      	ldr	r3, [r3, #32]
 801479e:	697a      	ldr	r2, [r7, #20]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d016      	beq.n	80147d2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	699a      	ldr	r2, [r3, #24]
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d210      	bcs.n	80147d2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	7858      	ldrb	r0, [r3, #1]
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80147ba:	2301      	movs	r3, #1
 80147bc:	697a      	ldr	r2, [r7, #20]
 80147be:	f7fd fead 	bl	801251c <disk_read>
 80147c2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d004      	beq.n	80147d2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2201      	movs	r2, #1
 80147cc:	755a      	strb	r2, [r3, #21]
 80147ce:	2301      	movs	r3, #1
 80147d0:	e04e      	b.n	8014870 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	697a      	ldr	r2, [r7, #20]
 80147d6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	699b      	ldr	r3, [r3, #24]
 80147dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80147e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80147e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d901      	bls.n	80147f2 <f_write+0x264>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	699b      	ldr	r3, [r3, #24]
 80147fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014800:	4413      	add	r3, r2
 8014802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014804:	69f9      	ldr	r1, [r7, #28]
 8014806:	4618      	mov	r0, r3
 8014808:	f7fd ff68 	bl	80126dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	7d1b      	ldrb	r3, [r3, #20]
 8014810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014814:	b2da      	uxtb	r2, r3
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801481a:	69fa      	ldr	r2, [r7, #28]
 801481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481e:	4413      	add	r3, r2
 8014820:	61fb      	str	r3, [r7, #28]
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	699a      	ldr	r2, [r3, #24]
 8014826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014828:	441a      	add	r2, r3
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	619a      	str	r2, [r3, #24]
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	68da      	ldr	r2, [r3, #12]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	699b      	ldr	r3, [r3, #24]
 8014836:	429a      	cmp	r2, r3
 8014838:	bf38      	it	cc
 801483a:	461a      	movcc	r2, r3
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	60da      	str	r2, [r3, #12]
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014846:	441a      	add	r2, r3
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	601a      	str	r2, [r3, #0]
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014850:	1ad3      	subs	r3, r2, r3
 8014852:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2b00      	cmp	r3, #0
 8014858:	f47f aed4 	bne.w	8014604 <f_write+0x76>
 801485c:	e000      	b.n	8014860 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801485e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	7d1b      	ldrb	r3, [r3, #20]
 8014864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014868:	b2da      	uxtb	r2, r3
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801486e:	2300      	movs	r3, #0
}
 8014870:	4618      	mov	r0, r3
 8014872:	3730      	adds	r7, #48	; 0x30
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f107 0208 	add.w	r2, r7, #8
 8014886:	4611      	mov	r1, r2
 8014888:	4618      	mov	r0, r3
 801488a:	f7ff fb07 	bl	8013e9c <validate>
 801488e:	4603      	mov	r3, r0
 8014890:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014892:	7dfb      	ldrb	r3, [r7, #23]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d168      	bne.n	801496a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	7d1b      	ldrb	r3, [r3, #20]
 801489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d062      	beq.n	801496a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	7d1b      	ldrb	r3, [r3, #20]
 80148a8:	b25b      	sxtb	r3, r3
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	da15      	bge.n	80148da <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	7858      	ldrb	r0, [r3, #1]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6a1a      	ldr	r2, [r3, #32]
 80148bc:	2301      	movs	r3, #1
 80148be:	f7fd fe4d 	bl	801255c <disk_write>
 80148c2:	4603      	mov	r3, r0
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d001      	beq.n	80148cc <f_sync+0x54>
 80148c8:	2301      	movs	r3, #1
 80148ca:	e04f      	b.n	801496c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	7d1b      	ldrb	r3, [r3, #20]
 80148d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148d4:	b2da      	uxtb	r2, r3
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80148da:	f7fa fce1 	bl	800f2a0 <get_fattime>
 80148de:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80148e0:	68ba      	ldr	r2, [r7, #8]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148e6:	4619      	mov	r1, r3
 80148e8:	4610      	mov	r0, r2
 80148ea:	f7fe f925 	bl	8012b38 <move_window>
 80148ee:	4603      	mov	r3, r0
 80148f0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80148f2:	7dfb      	ldrb	r3, [r7, #23]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d138      	bne.n	801496a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148fc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	330b      	adds	r3, #11
 8014902:	781a      	ldrb	r2, [r3, #0]
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	330b      	adds	r3, #11
 8014908:	f042 0220 	orr.w	r2, r2, #32
 801490c:	b2d2      	uxtb	r2, r2
 801490e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6818      	ldr	r0, [r3, #0]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	689b      	ldr	r3, [r3, #8]
 8014918:	461a      	mov	r2, r3
 801491a:	68f9      	ldr	r1, [r7, #12]
 801491c:	f7fe fe2a 	bl	8013574 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	f103 021c 	add.w	r2, r3, #28
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	68db      	ldr	r3, [r3, #12]
 801492a:	4619      	mov	r1, r3
 801492c:	4610      	mov	r0, r2
 801492e:	f7fd fea9 	bl	8012684 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	3316      	adds	r3, #22
 8014936:	6939      	ldr	r1, [r7, #16]
 8014938:	4618      	mov	r0, r3
 801493a:	f7fd fea3 	bl	8012684 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	3312      	adds	r3, #18
 8014942:	2100      	movs	r1, #0
 8014944:	4618      	mov	r0, r3
 8014946:	f7fd fe82 	bl	801264e <st_word>
					fs->wflag = 1;
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	2201      	movs	r2, #1
 801494e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	4618      	mov	r0, r3
 8014954:	f7fe f91e 	bl	8012b94 <sync_fs>
 8014958:	4603      	mov	r3, r0
 801495a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	7d1b      	ldrb	r3, [r3, #20]
 8014960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014964:	b2da      	uxtb	r2, r3
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801496a:	7dfb      	ldrb	r3, [r7, #23]
}
 801496c:	4618      	mov	r0, r3
 801496e:	3718      	adds	r7, #24
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}

08014974 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f7ff ff7b 	bl	8014878 <f_sync>
 8014982:	4603      	mov	r3, r0
 8014984:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014986:	7bfb      	ldrb	r3, [r7, #15]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d118      	bne.n	80149be <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f107 0208 	add.w	r2, r7, #8
 8014992:	4611      	mov	r1, r2
 8014994:	4618      	mov	r0, r3
 8014996:	f7ff fa81 	bl	8013e9c <validate>
 801499a:	4603      	mov	r3, r0
 801499c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801499e:	7bfb      	ldrb	r3, [r7, #15]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d10c      	bne.n	80149be <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	691b      	ldr	r3, [r3, #16]
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7fe f821 	bl	80129f0 <dec_lock>
 80149ae:	4603      	mov	r3, r0
 80149b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80149b2:	7bfb      	ldrb	r3, [r7, #15]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d102      	bne.n	80149be <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2200      	movs	r2, #0
 80149bc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80149be:	7bfb      	ldrb	r3, [r7, #15]
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	3710      	adds	r7, #16
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}

080149c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80149c8:	b480      	push	{r7}
 80149ca:	b087      	sub	sp, #28
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	4613      	mov	r3, r2
 80149d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80149d6:	2301      	movs	r3, #1
 80149d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80149da:	2300      	movs	r3, #0
 80149dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80149de:	4b1f      	ldr	r3, [pc, #124]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 80149e0:	7a5b      	ldrb	r3, [r3, #9]
 80149e2:	b2db      	uxtb	r3, r3
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d131      	bne.n	8014a4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80149e8:	4b1c      	ldr	r3, [pc, #112]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 80149ea:	7a5b      	ldrb	r3, [r3, #9]
 80149ec:	b2db      	uxtb	r3, r3
 80149ee:	461a      	mov	r2, r3
 80149f0:	4b1a      	ldr	r3, [pc, #104]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 80149f2:	2100      	movs	r1, #0
 80149f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80149f6:	4b19      	ldr	r3, [pc, #100]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 80149f8:	7a5b      	ldrb	r3, [r3, #9]
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	4a17      	ldr	r2, [pc, #92]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 80149fe:	009b      	lsls	r3, r3, #2
 8014a00:	4413      	add	r3, r2
 8014a02:	68fa      	ldr	r2, [r7, #12]
 8014a04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014a06:	4b15      	ldr	r3, [pc, #84]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 8014a08:	7a5b      	ldrb	r3, [r3, #9]
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	4b13      	ldr	r3, [pc, #76]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 8014a10:	4413      	add	r3, r2
 8014a12:	79fa      	ldrb	r2, [r7, #7]
 8014a14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014a16:	4b11      	ldr	r3, [pc, #68]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 8014a18:	7a5b      	ldrb	r3, [r3, #9]
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	1c5a      	adds	r2, r3, #1
 8014a1e:	b2d1      	uxtb	r1, r2
 8014a20:	4a0e      	ldr	r2, [pc, #56]	; (8014a5c <FATFS_LinkDriverEx+0x94>)
 8014a22:	7251      	strb	r1, [r2, #9]
 8014a24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014a26:	7dbb      	ldrb	r3, [r7, #22]
 8014a28:	3330      	adds	r3, #48	; 0x30
 8014a2a:	b2da      	uxtb	r2, r3
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	3301      	adds	r3, #1
 8014a34:	223a      	movs	r2, #58	; 0x3a
 8014a36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	3302      	adds	r3, #2
 8014a3c:	222f      	movs	r2, #47	; 0x2f
 8014a3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	3303      	adds	r3, #3
 8014a44:	2200      	movs	r2, #0
 8014a46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	371c      	adds	r7, #28
 8014a52:	46bd      	mov	sp, r7
 8014a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a58:	4770      	bx	lr
 8014a5a:	bf00      	nop
 8014a5c:	2404022c 	.word	0x2404022c

08014a60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b082      	sub	sp, #8
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	6839      	ldr	r1, [r7, #0]
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7ff ffaa 	bl	80149c8 <FATFS_LinkDriverEx>
 8014a74:	4603      	mov	r3, r0
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3708      	adds	r7, #8
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
	...

08014a80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014a84:	2200      	movs	r2, #0
 8014a86:	4913      	ldr	r1, [pc, #76]	; (8014ad4 <MX_USB_DEVICE_Init+0x54>)
 8014a88:	4813      	ldr	r0, [pc, #76]	; (8014ad8 <MX_USB_DEVICE_Init+0x58>)
 8014a8a:	f7fc fc20 	bl	80112ce <USBD_Init>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d001      	beq.n	8014a98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014a94:	f7ec fd20 	bl	80014d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8014a98:	4910      	ldr	r1, [pc, #64]	; (8014adc <MX_USB_DEVICE_Init+0x5c>)
 8014a9a:	480f      	ldr	r0, [pc, #60]	; (8014ad8 <MX_USB_DEVICE_Init+0x58>)
 8014a9c:	f7fc fc4d 	bl	801133a <USBD_RegisterClass>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d001      	beq.n	8014aaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014aa6:	f7ec fd17 	bl	80014d8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8014aaa:	490d      	ldr	r1, [pc, #52]	; (8014ae0 <MX_USB_DEVICE_Init+0x60>)
 8014aac:	480a      	ldr	r0, [pc, #40]	; (8014ad8 <MX_USB_DEVICE_Init+0x58>)
 8014aae:	f7fa fff7 	bl	800faa0 <USBD_MSC_RegisterStorage>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d001      	beq.n	8014abc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014ab8:	f7ec fd0e 	bl	80014d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014abc:	4806      	ldr	r0, [pc, #24]	; (8014ad8 <MX_USB_DEVICE_Init+0x58>)
 8014abe:	f7fc fc5d 	bl	801137c <USBD_Start>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d001      	beq.n	8014acc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014ac8:	f7ec fd06 	bl	80014d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014acc:	f7f2 f926 	bl	8006d1c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014ad0:	bf00      	nop
 8014ad2:	bd80      	pop	{r7, pc}
 8014ad4:	240000f8 	.word	0x240000f8
 8014ad8:	24041228 	.word	0x24041228
 8014adc:	24000010 	.word	0x24000010
 8014ae0:	24000148 	.word	0x24000148

08014ae4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	4603      	mov	r3, r0
 8014aec:	6039      	str	r1, [r7, #0]
 8014aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	2212      	movs	r2, #18
 8014af4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014af6:	4b03      	ldr	r3, [pc, #12]	; (8014b04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	370c      	adds	r7, #12
 8014afc:	46bd      	mov	sp, r7
 8014afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b02:	4770      	bx	lr
 8014b04:	24000114 	.word	0x24000114

08014b08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b08:	b480      	push	{r7}
 8014b0a:	b083      	sub	sp, #12
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	4603      	mov	r3, r0
 8014b10:	6039      	str	r1, [r7, #0]
 8014b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	2204      	movs	r2, #4
 8014b18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014b1a:	4b03      	ldr	r3, [pc, #12]	; (8014b28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	370c      	adds	r7, #12
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr
 8014b28:	24000128 	.word	0x24000128

08014b2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	4603      	mov	r3, r0
 8014b34:	6039      	str	r1, [r7, #0]
 8014b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014b38:	79fb      	ldrb	r3, [r7, #7]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d105      	bne.n	8014b4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014b3e:	683a      	ldr	r2, [r7, #0]
 8014b40:	4907      	ldr	r1, [pc, #28]	; (8014b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8014b42:	4808      	ldr	r0, [pc, #32]	; (8014b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8014b44:	f7fd fbe7 	bl	8012316 <USBD_GetString>
 8014b48:	e004      	b.n	8014b54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014b4a:	683a      	ldr	r2, [r7, #0]
 8014b4c:	4904      	ldr	r1, [pc, #16]	; (8014b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8014b4e:	4805      	ldr	r0, [pc, #20]	; (8014b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8014b50:	f7fd fbe1 	bl	8012316 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014b54:	4b02      	ldr	r3, [pc, #8]	; (8014b60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3708      	adds	r7, #8
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	240414f8 	.word	0x240414f8
 8014b64:	080169a4 	.word	0x080169a4

08014b68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	4603      	mov	r3, r0
 8014b70:	6039      	str	r1, [r7, #0]
 8014b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014b74:	683a      	ldr	r2, [r7, #0]
 8014b76:	4904      	ldr	r1, [pc, #16]	; (8014b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014b78:	4804      	ldr	r0, [pc, #16]	; (8014b8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014b7a:	f7fd fbcc 	bl	8012316 <USBD_GetString>
  return USBD_StrDesc;
 8014b7e:	4b02      	ldr	r3, [pc, #8]	; (8014b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3708      	adds	r7, #8
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	240414f8 	.word	0x240414f8
 8014b8c:	080169b8 	.word	0x080169b8

08014b90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	4603      	mov	r3, r0
 8014b98:	6039      	str	r1, [r7, #0]
 8014b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	221a      	movs	r2, #26
 8014ba0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014ba2:	f000 f843 	bl	8014c2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014ba6:	4b02      	ldr	r3, [pc, #8]	; (8014bb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3708      	adds	r7, #8
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}
 8014bb0:	2400012c 	.word	0x2400012c

08014bb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	4603      	mov	r3, r0
 8014bbc:	6039      	str	r1, [r7, #0]
 8014bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014bc0:	79fb      	ldrb	r3, [r7, #7]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d105      	bne.n	8014bd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014bc6:	683a      	ldr	r2, [r7, #0]
 8014bc8:	4907      	ldr	r1, [pc, #28]	; (8014be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014bca:	4808      	ldr	r0, [pc, #32]	; (8014bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8014bcc:	f7fd fba3 	bl	8012316 <USBD_GetString>
 8014bd0:	e004      	b.n	8014bdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014bd2:	683a      	ldr	r2, [r7, #0]
 8014bd4:	4904      	ldr	r1, [pc, #16]	; (8014be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014bd6:	4805      	ldr	r0, [pc, #20]	; (8014bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8014bd8:	f7fd fb9d 	bl	8012316 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014bdc:	4b02      	ldr	r3, [pc, #8]	; (8014be8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3708      	adds	r7, #8
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}
 8014be6:	bf00      	nop
 8014be8:	240414f8 	.word	0x240414f8
 8014bec:	080169cc 	.word	0x080169cc

08014bf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	6039      	str	r1, [r7, #0]
 8014bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014bfc:	79fb      	ldrb	r3, [r7, #7]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d105      	bne.n	8014c0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014c02:	683a      	ldr	r2, [r7, #0]
 8014c04:	4907      	ldr	r1, [pc, #28]	; (8014c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014c06:	4808      	ldr	r0, [pc, #32]	; (8014c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014c08:	f7fd fb85 	bl	8012316 <USBD_GetString>
 8014c0c:	e004      	b.n	8014c18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014c0e:	683a      	ldr	r2, [r7, #0]
 8014c10:	4904      	ldr	r1, [pc, #16]	; (8014c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014c12:	4805      	ldr	r0, [pc, #20]	; (8014c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014c14:	f7fd fb7f 	bl	8012316 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014c18:	4b02      	ldr	r3, [pc, #8]	; (8014c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3708      	adds	r7, #8
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop
 8014c24:	240414f8 	.word	0x240414f8
 8014c28:	080169d8 	.word	0x080169d8

08014c2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014c32:	4b0f      	ldr	r3, [pc, #60]	; (8014c70 <Get_SerialNum+0x44>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014c38:	4b0e      	ldr	r3, [pc, #56]	; (8014c74 <Get_SerialNum+0x48>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014c3e:	4b0e      	ldr	r3, [pc, #56]	; (8014c78 <Get_SerialNum+0x4c>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014c44:	68fa      	ldr	r2, [r7, #12]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4413      	add	r3, r2
 8014c4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d009      	beq.n	8014c66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014c52:	2208      	movs	r2, #8
 8014c54:	4909      	ldr	r1, [pc, #36]	; (8014c7c <Get_SerialNum+0x50>)
 8014c56:	68f8      	ldr	r0, [r7, #12]
 8014c58:	f000 f814 	bl	8014c84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014c5c:	2204      	movs	r2, #4
 8014c5e:	4908      	ldr	r1, [pc, #32]	; (8014c80 <Get_SerialNum+0x54>)
 8014c60:	68b8      	ldr	r0, [r7, #8]
 8014c62:	f000 f80f 	bl	8014c84 <IntToUnicode>
  }
}
 8014c66:	bf00      	nop
 8014c68:	3710      	adds	r7, #16
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	1ff1e800 	.word	0x1ff1e800
 8014c74:	1ff1e804 	.word	0x1ff1e804
 8014c78:	1ff1e808 	.word	0x1ff1e808
 8014c7c:	2400012e 	.word	0x2400012e
 8014c80:	2400013e 	.word	0x2400013e

08014c84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014c84:	b480      	push	{r7}
 8014c86:	b087      	sub	sp, #28
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	4613      	mov	r3, r2
 8014c90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014c92:	2300      	movs	r3, #0
 8014c94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014c96:	2300      	movs	r3, #0
 8014c98:	75fb      	strb	r3, [r7, #23]
 8014c9a:	e027      	b.n	8014cec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	0f1b      	lsrs	r3, r3, #28
 8014ca0:	2b09      	cmp	r3, #9
 8014ca2:	d80b      	bhi.n	8014cbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	0f1b      	lsrs	r3, r3, #28
 8014ca8:	b2da      	uxtb	r2, r3
 8014caa:	7dfb      	ldrb	r3, [r7, #23]
 8014cac:	005b      	lsls	r3, r3, #1
 8014cae:	4619      	mov	r1, r3
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	440b      	add	r3, r1
 8014cb4:	3230      	adds	r2, #48	; 0x30
 8014cb6:	b2d2      	uxtb	r2, r2
 8014cb8:	701a      	strb	r2, [r3, #0]
 8014cba:	e00a      	b.n	8014cd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	0f1b      	lsrs	r3, r3, #28
 8014cc0:	b2da      	uxtb	r2, r3
 8014cc2:	7dfb      	ldrb	r3, [r7, #23]
 8014cc4:	005b      	lsls	r3, r3, #1
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	440b      	add	r3, r1
 8014ccc:	3237      	adds	r2, #55	; 0x37
 8014cce:	b2d2      	uxtb	r2, r2
 8014cd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	011b      	lsls	r3, r3, #4
 8014cd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014cd8:	7dfb      	ldrb	r3, [r7, #23]
 8014cda:	005b      	lsls	r3, r3, #1
 8014cdc:	3301      	adds	r3, #1
 8014cde:	68ba      	ldr	r2, [r7, #8]
 8014ce0:	4413      	add	r3, r2
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014ce6:	7dfb      	ldrb	r3, [r7, #23]
 8014ce8:	3301      	adds	r3, #1
 8014cea:	75fb      	strb	r3, [r7, #23]
 8014cec:	7dfa      	ldrb	r2, [r7, #23]
 8014cee:	79fb      	ldrb	r3, [r7, #7]
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	d3d3      	bcc.n	8014c9c <IntToUnicode+0x18>
  }
}
 8014cf4:	bf00      	nop
 8014cf6:	371c      	adds	r7, #28
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfe:	4770      	bx	lr

08014d00 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8014d00:	b480      	push	{r7}
 8014d02:	b083      	sub	sp, #12
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	4603      	mov	r3, r0
 8014d08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8014d0a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	370c      	adds	r7, #12
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr

08014d18 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b08e      	sub	sp, #56	; 0x38
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	4603      	mov	r3, r0
 8014d20:	60b9      	str	r1, [r7, #8]
 8014d22:	607a      	str	r2, [r7, #4]
 8014d24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8014d26:	23ff      	movs	r3, #255	; 0xff
 8014d28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8014d2c:	f107 0310 	add.w	r3, r7, #16
 8014d30:	4619      	mov	r1, r3
 8014d32:	480a      	ldr	r0, [pc, #40]	; (8014d5c <STORAGE_GetCapacity_FS+0x44>)
 8014d34:	f7f6 f838 	bl	800ada8 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8014d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d3a:	1e5a      	subs	r2, r3, #1
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8014d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d42:	b29a      	uxth	r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8014d4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3738      	adds	r7, #56	; 0x38
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
 8014d5a:	bf00      	nop
 8014d5c:	24040574 	.word	0x24040574

08014d60 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	4603      	mov	r3, r0
 8014d68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014d6a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	370c      	adds	r7, #12
 8014d70:	46bd      	mov	sp, r7
 8014d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d76:	4770      	bx	lr

08014d78 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014d78:	b480      	push	{r7}
 8014d7a:	b083      	sub	sp, #12
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	4603      	mov	r3, r0
 8014d80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014d82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	370c      	adds	r7, #12
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr

08014d90 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b088      	sub	sp, #32
 8014d94:	af02      	add	r7, sp, #8
 8014d96:	60b9      	str	r1, [r7, #8]
 8014d98:	607a      	str	r2, [r7, #4]
 8014d9a:	461a      	mov	r2, r3
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	73fb      	strb	r3, [r7, #15]
 8014da0:	4613      	mov	r3, r2
 8014da2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8014da4:	23ff      	movs	r3, #255	; 0xff
 8014da6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8014da8:	89ba      	ldrh	r2, [r7, #12]
 8014daa:	f04f 33ff 	mov.w	r3, #4294967295
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	4613      	mov	r3, r2
 8014db2:	687a      	ldr	r2, [r7, #4]
 8014db4:	68b9      	ldr	r1, [r7, #8]
 8014db6:	4809      	ldr	r0, [pc, #36]	; (8014ddc <STORAGE_Read_FS+0x4c>)
 8014db8:	f7f4 ff68 	bl	8009c8c <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8014dbc:	bf00      	nop
 8014dbe:	4807      	ldr	r0, [pc, #28]	; (8014ddc <STORAGE_Read_FS+0x4c>)
 8014dc0:	f7f6 f8c8 	bl	800af54 <HAL_SD_GetCardState>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	2b04      	cmp	r3, #4
 8014dc8:	d1f9      	bne.n	8014dbe <STORAGE_Read_FS+0x2e>
	ret = 0;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	75fb      	strb	r3, [r7, #23]
	return ret;
 8014dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	3718      	adds	r7, #24
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	bd80      	pop	{r7, pc}
 8014dda:	bf00      	nop
 8014ddc:	24040574 	.word	0x24040574

08014de0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b088      	sub	sp, #32
 8014de4:	af02      	add	r7, sp, #8
 8014de6:	60b9      	str	r1, [r7, #8]
 8014de8:	607a      	str	r2, [r7, #4]
 8014dea:	461a      	mov	r2, r3
 8014dec:	4603      	mov	r3, r0
 8014dee:	73fb      	strb	r3, [r7, #15]
 8014df0:	4613      	mov	r3, r2
 8014df2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8014df4:	23ff      	movs	r3, #255	; 0xff
 8014df6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8014df8:	89ba      	ldrh	r2, [r7, #12]
 8014dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8014dfe:	9300      	str	r3, [sp, #0]
 8014e00:	4613      	mov	r3, r2
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	68b9      	ldr	r1, [r7, #8]
 8014e06:	4809      	ldr	r0, [pc, #36]	; (8014e2c <STORAGE_Write_FS+0x4c>)
 8014e08:	f7f5 f8ca 	bl	8009fa0 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8014e0c:	bf00      	nop
 8014e0e:	4807      	ldr	r0, [pc, #28]	; (8014e2c <STORAGE_Write_FS+0x4c>)
 8014e10:	f7f6 f8a0 	bl	800af54 <HAL_SD_GetCardState>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b04      	cmp	r3, #4
 8014e18:	d1f9      	bne.n	8014e0e <STORAGE_Write_FS+0x2e>
	ret = 0;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	75fb      	strb	r3, [r7, #23]
	return ret;
 8014e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3718      	adds	r7, #24
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	24040574 	.word	0x24040574

08014e30 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8014e30:	b480      	push	{r7}
 8014e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8014e34:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3e:	4770      	bx	lr

08014e40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b08a      	sub	sp, #40	; 0x28
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e48:	f107 0314 	add.w	r3, r7, #20
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	601a      	str	r2, [r3, #0]
 8014e50:	605a      	str	r2, [r3, #4]
 8014e52:	609a      	str	r2, [r3, #8]
 8014e54:	60da      	str	r2, [r3, #12]
 8014e56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	4a1e      	ldr	r2, [pc, #120]	; (8014ed8 <HAL_PCD_MspInit+0x98>)
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	d136      	bne.n	8014ed0 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e62:	4b1e      	ldr	r3, [pc, #120]	; (8014edc <HAL_PCD_MspInit+0x9c>)
 8014e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e68:	4a1c      	ldr	r2, [pc, #112]	; (8014edc <HAL_PCD_MspInit+0x9c>)
 8014e6a:	f043 0301 	orr.w	r3, r3, #1
 8014e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014e72:	4b1a      	ldr	r3, [pc, #104]	; (8014edc <HAL_PCD_MspInit+0x9c>)
 8014e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e78:	f003 0301 	and.w	r3, r3, #1
 8014e7c:	613b      	str	r3, [r7, #16]
 8014e7e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014e80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e86:	2302      	movs	r3, #2
 8014e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014e92:	230a      	movs	r3, #10
 8014e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014e96:	f107 0314 	add.w	r3, r7, #20
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	4810      	ldr	r0, [pc, #64]	; (8014ee0 <HAL_PCD_MspInit+0xa0>)
 8014e9e:	f7f0 fadb 	bl	8005458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014ea2:	4b0e      	ldr	r3, [pc, #56]	; (8014edc <HAL_PCD_MspInit+0x9c>)
 8014ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014ea8:	4a0c      	ldr	r2, [pc, #48]	; (8014edc <HAL_PCD_MspInit+0x9c>)
 8014eaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014eae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014eb2:	4b0a      	ldr	r3, [pc, #40]	; (8014edc <HAL_PCD_MspInit+0x9c>)
 8014eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014ebc:	60fb      	str	r3, [r7, #12]
 8014ebe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	2100      	movs	r1, #0
 8014ec4:	2065      	movs	r0, #101	; 0x65
 8014ec6:	f7ed f87e 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014eca:	2065      	movs	r0, #101	; 0x65
 8014ecc:	f7ed f895 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014ed0:	bf00      	nop
 8014ed2:	3728      	adds	r7, #40	; 0x28
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	40080000 	.word	0x40080000
 8014edc:	58024400 	.word	0x58024400
 8014ee0:	58020000 	.word	0x58020000

08014ee4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014ef8:	4619      	mov	r1, r3
 8014efa:	4610      	mov	r0, r2
 8014efc:	f7fc fa89 	bl	8011412 <USBD_LL_SetupStage>
}
 8014f00:	bf00      	nop
 8014f02:	3708      	adds	r7, #8
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}

08014f08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	460b      	mov	r3, r1
 8014f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014f1a:	78fa      	ldrb	r2, [r7, #3]
 8014f1c:	6879      	ldr	r1, [r7, #4]
 8014f1e:	4613      	mov	r3, r2
 8014f20:	00db      	lsls	r3, r3, #3
 8014f22:	1a9b      	subs	r3, r3, r2
 8014f24:	009b      	lsls	r3, r3, #2
 8014f26:	440b      	add	r3, r1
 8014f28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014f2c:	681a      	ldr	r2, [r3, #0]
 8014f2e:	78fb      	ldrb	r3, [r7, #3]
 8014f30:	4619      	mov	r1, r3
 8014f32:	f7fc fac1 	bl	80114b8 <USBD_LL_DataOutStage>
}
 8014f36:	bf00      	nop
 8014f38:	3708      	adds	r7, #8
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}

08014f3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f3e:	b580      	push	{r7, lr}
 8014f40:	b082      	sub	sp, #8
 8014f42:	af00      	add	r7, sp, #0
 8014f44:	6078      	str	r0, [r7, #4]
 8014f46:	460b      	mov	r3, r1
 8014f48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014f50:	78fa      	ldrb	r2, [r7, #3]
 8014f52:	6879      	ldr	r1, [r7, #4]
 8014f54:	4613      	mov	r3, r2
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	1a9b      	subs	r3, r3, r2
 8014f5a:	009b      	lsls	r3, r3, #2
 8014f5c:	440b      	add	r3, r1
 8014f5e:	3348      	adds	r3, #72	; 0x48
 8014f60:	681a      	ldr	r2, [r3, #0]
 8014f62:	78fb      	ldrb	r3, [r7, #3]
 8014f64:	4619      	mov	r1, r3
 8014f66:	f7fc fb0a 	bl	801157e <USBD_LL_DataInStage>
}
 8014f6a:	bf00      	nop
 8014f6c:	3708      	adds	r7, #8
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}

08014f72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f72:	b580      	push	{r7, lr}
 8014f74:	b082      	sub	sp, #8
 8014f76:	af00      	add	r7, sp, #0
 8014f78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7fc fc0e 	bl	80117a2 <USBD_LL_SOF>
}
 8014f86:	bf00      	nop
 8014f88:	3708      	adds	r7, #8
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}

08014f8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f8e:	b580      	push	{r7, lr}
 8014f90:	b084      	sub	sp, #16
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014f96:	2301      	movs	r3, #1
 8014f98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d102      	bne.n	8014fa8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	73fb      	strb	r3, [r7, #15]
 8014fa6:	e008      	b.n	8014fba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	2b02      	cmp	r3, #2
 8014fae:	d102      	bne.n	8014fb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	73fb      	strb	r3, [r7, #15]
 8014fb4:	e001      	b.n	8014fba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014fb6:	f7ec fa8f 	bl	80014d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014fc0:	7bfa      	ldrb	r2, [r7, #15]
 8014fc2:	4611      	mov	r1, r2
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7fc fbb1 	bl	801172c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7fc fb6a 	bl	80116aa <USBD_LL_Reset>
}
 8014fd6:	bf00      	nop
 8014fd8:	3710      	adds	r7, #16
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
	...

08014fe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f7fc fbac 	bl	801174c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	6812      	ldr	r2, [r2, #0]
 8015002:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015006:	f043 0301 	orr.w	r3, r3, #1
 801500a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6a1b      	ldr	r3, [r3, #32]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d005      	beq.n	8015020 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015014:	4b04      	ldr	r3, [pc, #16]	; (8015028 <HAL_PCD_SuspendCallback+0x48>)
 8015016:	691b      	ldr	r3, [r3, #16]
 8015018:	4a03      	ldr	r2, [pc, #12]	; (8015028 <HAL_PCD_SuspendCallback+0x48>)
 801501a:	f043 0306 	orr.w	r3, r3, #6
 801501e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015020:	bf00      	nop
 8015022:	3708      	adds	r7, #8
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}
 8015028:	e000ed00 	.word	0xe000ed00

0801502c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801503a:	4618      	mov	r0, r3
 801503c:	f7fc fb9b 	bl	8011776 <USBD_LL_Resume>
}
 8015040:	bf00      	nop
 8015042:	3708      	adds	r7, #8
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b082      	sub	sp, #8
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
 8015050:	460b      	mov	r3, r1
 8015052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801505a:	78fa      	ldrb	r2, [r7, #3]
 801505c:	4611      	mov	r1, r2
 801505e:	4618      	mov	r0, r3
 8015060:	f7fc fbc6 	bl	80117f0 <USBD_LL_IsoOUTIncomplete>
}
 8015064:	bf00      	nop
 8015066:	3708      	adds	r7, #8
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	460b      	mov	r3, r1
 8015076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801507e:	78fa      	ldrb	r2, [r7, #3]
 8015080:	4611      	mov	r1, r2
 8015082:	4618      	mov	r0, r3
 8015084:	f7fc fba7 	bl	80117d6 <USBD_LL_IsoINIncomplete>
}
 8015088:	bf00      	nop
 801508a:	3708      	adds	r7, #8
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fc fbb3 	bl	801180a <USBD_LL_DevConnected>
}
 80150a4:	bf00      	nop
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7fc fbb0 	bl	8011820 <USBD_LL_DevDisconnected>
}
 80150c0:	bf00      	nop
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d13e      	bne.n	8015156 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80150d8:	4a21      	ldr	r2, [pc, #132]	; (8015160 <USBD_LL_Init+0x98>)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	4a1f      	ldr	r2, [pc, #124]	; (8015160 <USBD_LL_Init+0x98>)
 80150e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80150e8:	4b1d      	ldr	r3, [pc, #116]	; (8015160 <USBD_LL_Init+0x98>)
 80150ea:	4a1e      	ldr	r2, [pc, #120]	; (8015164 <USBD_LL_Init+0x9c>)
 80150ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80150ee:	4b1c      	ldr	r3, [pc, #112]	; (8015160 <USBD_LL_Init+0x98>)
 80150f0:	2209      	movs	r2, #9
 80150f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80150f4:	4b1a      	ldr	r3, [pc, #104]	; (8015160 <USBD_LL_Init+0x98>)
 80150f6:	2202      	movs	r2, #2
 80150f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80150fa:	4b19      	ldr	r3, [pc, #100]	; (8015160 <USBD_LL_Init+0x98>)
 80150fc:	2200      	movs	r2, #0
 80150fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015100:	4b17      	ldr	r3, [pc, #92]	; (8015160 <USBD_LL_Init+0x98>)
 8015102:	2202      	movs	r2, #2
 8015104:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015106:	4b16      	ldr	r3, [pc, #88]	; (8015160 <USBD_LL_Init+0x98>)
 8015108:	2200      	movs	r2, #0
 801510a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801510c:	4b14      	ldr	r3, [pc, #80]	; (8015160 <USBD_LL_Init+0x98>)
 801510e:	2200      	movs	r2, #0
 8015110:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015112:	4b13      	ldr	r3, [pc, #76]	; (8015160 <USBD_LL_Init+0x98>)
 8015114:	2200      	movs	r2, #0
 8015116:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015118:	4b11      	ldr	r3, [pc, #68]	; (8015160 <USBD_LL_Init+0x98>)
 801511a:	2200      	movs	r2, #0
 801511c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801511e:	4b10      	ldr	r3, [pc, #64]	; (8015160 <USBD_LL_Init+0x98>)
 8015120:	2200      	movs	r2, #0
 8015122:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015124:	4b0e      	ldr	r3, [pc, #56]	; (8015160 <USBD_LL_Init+0x98>)
 8015126:	2200      	movs	r2, #0
 8015128:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801512a:	480d      	ldr	r0, [pc, #52]	; (8015160 <USBD_LL_Init+0x98>)
 801512c:	f7f0 fbb4 	bl	8005898 <HAL_PCD_Init>
 8015130:	4603      	mov	r3, r0
 8015132:	2b00      	cmp	r3, #0
 8015134:	d001      	beq.n	801513a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015136:	f7ec f9cf 	bl	80014d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801513a:	2180      	movs	r1, #128	; 0x80
 801513c:	4808      	ldr	r0, [pc, #32]	; (8015160 <USBD_LL_Init+0x98>)
 801513e:	f7f1 fd72 	bl	8006c26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015142:	2240      	movs	r2, #64	; 0x40
 8015144:	2100      	movs	r1, #0
 8015146:	4806      	ldr	r0, [pc, #24]	; (8015160 <USBD_LL_Init+0x98>)
 8015148:	f7f1 fd26 	bl	8006b98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801514c:	2280      	movs	r2, #128	; 0x80
 801514e:	2101      	movs	r1, #1
 8015150:	4803      	ldr	r0, [pc, #12]	; (8015160 <USBD_LL_Init+0x98>)
 8015152:	f7f1 fd21 	bl	8006b98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015156:	2300      	movs	r3, #0
}
 8015158:	4618      	mov	r0, r3
 801515a:	3708      	adds	r7, #8
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}
 8015160:	240416f8 	.word	0x240416f8
 8015164:	40080000 	.word	0x40080000

08015168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b084      	sub	sp, #16
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015170:	2300      	movs	r3, #0
 8015172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015174:	2300      	movs	r3, #0
 8015176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801517e:	4618      	mov	r0, r3
 8015180:	f7f0 fcae 	bl	8005ae0 <HAL_PCD_Start>
 8015184:	4603      	mov	r3, r0
 8015186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015188:	7bfb      	ldrb	r3, [r7, #15]
 801518a:	4618      	mov	r0, r3
 801518c:	f000 f94a 	bl	8015424 <USBD_Get_USB_Status>
 8015190:	4603      	mov	r3, r0
 8015192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015194:	7bbb      	ldrb	r3, [r7, #14]
}
 8015196:	4618      	mov	r0, r3
 8015198:	3710      	adds	r7, #16
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}

0801519e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801519e:	b580      	push	{r7, lr}
 80151a0:	b084      	sub	sp, #16
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	6078      	str	r0, [r7, #4]
 80151a6:	4608      	mov	r0, r1
 80151a8:	4611      	mov	r1, r2
 80151aa:	461a      	mov	r2, r3
 80151ac:	4603      	mov	r3, r0
 80151ae:	70fb      	strb	r3, [r7, #3]
 80151b0:	460b      	mov	r3, r1
 80151b2:	70bb      	strb	r3, [r7, #2]
 80151b4:	4613      	mov	r3, r2
 80151b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151b8:	2300      	movs	r3, #0
 80151ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151bc:	2300      	movs	r3, #0
 80151be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80151c6:	78bb      	ldrb	r3, [r7, #2]
 80151c8:	883a      	ldrh	r2, [r7, #0]
 80151ca:	78f9      	ldrb	r1, [r7, #3]
 80151cc:	f7f1 f8bf 	bl	800634e <HAL_PCD_EP_Open>
 80151d0:	4603      	mov	r3, r0
 80151d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151d4:	7bfb      	ldrb	r3, [r7, #15]
 80151d6:	4618      	mov	r0, r3
 80151d8:	f000 f924 	bl	8015424 <USBD_Get_USB_Status>
 80151dc:	4603      	mov	r3, r0
 80151de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}

080151ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80151ea:	b580      	push	{r7, lr}
 80151ec:	b084      	sub	sp, #16
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	6078      	str	r0, [r7, #4]
 80151f2:	460b      	mov	r3, r1
 80151f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151f6:	2300      	movs	r3, #0
 80151f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151fa:	2300      	movs	r3, #0
 80151fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015204:	78fa      	ldrb	r2, [r7, #3]
 8015206:	4611      	mov	r1, r2
 8015208:	4618      	mov	r0, r3
 801520a:	f7f1 f908 	bl	800641e <HAL_PCD_EP_Close>
 801520e:	4603      	mov	r3, r0
 8015210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015212:	7bfb      	ldrb	r3, [r7, #15]
 8015214:	4618      	mov	r0, r3
 8015216:	f000 f905 	bl	8015424 <USBD_Get_USB_Status>
 801521a:	4603      	mov	r3, r0
 801521c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801521e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015220:	4618      	mov	r0, r3
 8015222:	3710      	adds	r7, #16
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	460b      	mov	r3, r1
 8015232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015234:	2300      	movs	r3, #0
 8015236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015238:	2300      	movs	r3, #0
 801523a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015242:	78fa      	ldrb	r2, [r7, #3]
 8015244:	4611      	mov	r1, r2
 8015246:	4618      	mov	r0, r3
 8015248:	f7f1 fa9a 	bl	8006780 <HAL_PCD_EP_Flush>
 801524c:	4603      	mov	r3, r0
 801524e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015250:	7bfb      	ldrb	r3, [r7, #15]
 8015252:	4618      	mov	r0, r3
 8015254:	f000 f8e6 	bl	8015424 <USBD_Get_USB_Status>
 8015258:	4603      	mov	r3, r0
 801525a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801525c:	7bbb      	ldrb	r3, [r7, #14]
}
 801525e:	4618      	mov	r0, r3
 8015260:	3710      	adds	r7, #16
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}

08015266 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015266:	b580      	push	{r7, lr}
 8015268:	b084      	sub	sp, #16
 801526a:	af00      	add	r7, sp, #0
 801526c:	6078      	str	r0, [r7, #4]
 801526e:	460b      	mov	r3, r1
 8015270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015272:	2300      	movs	r3, #0
 8015274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015276:	2300      	movs	r3, #0
 8015278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015280:	78fa      	ldrb	r2, [r7, #3]
 8015282:	4611      	mov	r1, r2
 8015284:	4618      	mov	r0, r3
 8015286:	f7f1 f9c1 	bl	800660c <HAL_PCD_EP_SetStall>
 801528a:	4603      	mov	r3, r0
 801528c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801528e:	7bfb      	ldrb	r3, [r7, #15]
 8015290:	4618      	mov	r0, r3
 8015292:	f000 f8c7 	bl	8015424 <USBD_Get_USB_Status>
 8015296:	4603      	mov	r3, r0
 8015298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801529a:	7bbb      	ldrb	r3, [r7, #14]
}
 801529c:	4618      	mov	r0, r3
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	460b      	mov	r3, r1
 80152ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152b0:	2300      	movs	r3, #0
 80152b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152b4:	2300      	movs	r3, #0
 80152b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80152be:	78fa      	ldrb	r2, [r7, #3]
 80152c0:	4611      	mov	r1, r2
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7f1 fa06 	bl	80066d4 <HAL_PCD_EP_ClrStall>
 80152c8:	4603      	mov	r3, r0
 80152ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152cc:	7bfb      	ldrb	r3, [r7, #15]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 f8a8 	bl	8015424 <USBD_Get_USB_Status>
 80152d4:	4603      	mov	r3, r0
 80152d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3710      	adds	r7, #16
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152e2:	b480      	push	{r7}
 80152e4:	b085      	sub	sp, #20
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	460b      	mov	r3, r1
 80152ec:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80152f4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80152f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	da0b      	bge.n	8015316 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80152fe:	78fb      	ldrb	r3, [r7, #3]
 8015300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015304:	68f9      	ldr	r1, [r7, #12]
 8015306:	4613      	mov	r3, r2
 8015308:	00db      	lsls	r3, r3, #3
 801530a:	1a9b      	subs	r3, r3, r2
 801530c:	009b      	lsls	r3, r3, #2
 801530e:	440b      	add	r3, r1
 8015310:	333e      	adds	r3, #62	; 0x3e
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	e00b      	b.n	801532e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015316:	78fb      	ldrb	r3, [r7, #3]
 8015318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801531c:	68f9      	ldr	r1, [r7, #12]
 801531e:	4613      	mov	r3, r2
 8015320:	00db      	lsls	r3, r3, #3
 8015322:	1a9b      	subs	r3, r3, r2
 8015324:	009b      	lsls	r3, r3, #2
 8015326:	440b      	add	r3, r1
 8015328:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801532c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801532e:	4618      	mov	r0, r3
 8015330:	3714      	adds	r7, #20
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr

0801533a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801533a:	b580      	push	{r7, lr}
 801533c:	b084      	sub	sp, #16
 801533e:	af00      	add	r7, sp, #0
 8015340:	6078      	str	r0, [r7, #4]
 8015342:	460b      	mov	r3, r1
 8015344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015346:	2300      	movs	r3, #0
 8015348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801534a:	2300      	movs	r3, #0
 801534c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015354:	78fa      	ldrb	r2, [r7, #3]
 8015356:	4611      	mov	r1, r2
 8015358:	4618      	mov	r0, r3
 801535a:	f7f0 ffd3 	bl	8006304 <HAL_PCD_SetAddress>
 801535e:	4603      	mov	r3, r0
 8015360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015362:	7bfb      	ldrb	r3, [r7, #15]
 8015364:	4618      	mov	r0, r3
 8015366:	f000 f85d 	bl	8015424 <USBD_Get_USB_Status>
 801536a:	4603      	mov	r3, r0
 801536c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801536e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015370:	4618      	mov	r0, r3
 8015372:	3710      	adds	r7, #16
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}

08015378 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b086      	sub	sp, #24
 801537c:	af00      	add	r7, sp, #0
 801537e:	60f8      	str	r0, [r7, #12]
 8015380:	607a      	str	r2, [r7, #4]
 8015382:	603b      	str	r3, [r7, #0]
 8015384:	460b      	mov	r3, r1
 8015386:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015388:	2300      	movs	r3, #0
 801538a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801538c:	2300      	movs	r3, #0
 801538e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015396:	7af9      	ldrb	r1, [r7, #11]
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	f7f1 f8ec 	bl	8006578 <HAL_PCD_EP_Transmit>
 80153a0:	4603      	mov	r3, r0
 80153a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153a4:	7dfb      	ldrb	r3, [r7, #23]
 80153a6:	4618      	mov	r0, r3
 80153a8:	f000 f83c 	bl	8015424 <USBD_Get_USB_Status>
 80153ac:	4603      	mov	r3, r0
 80153ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80153b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3718      	adds	r7, #24
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}

080153ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80153ba:	b580      	push	{r7, lr}
 80153bc:	b086      	sub	sp, #24
 80153be:	af00      	add	r7, sp, #0
 80153c0:	60f8      	str	r0, [r7, #12]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	603b      	str	r3, [r7, #0]
 80153c6:	460b      	mov	r3, r1
 80153c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153ca:	2300      	movs	r3, #0
 80153cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153ce:	2300      	movs	r3, #0
 80153d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80153d8:	7af9      	ldrb	r1, [r7, #11]
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	687a      	ldr	r2, [r7, #4]
 80153de:	f7f1 f868 	bl	80064b2 <HAL_PCD_EP_Receive>
 80153e2:	4603      	mov	r3, r0
 80153e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153e6:	7dfb      	ldrb	r3, [r7, #23]
 80153e8:	4618      	mov	r0, r3
 80153ea:	f000 f81b 	bl	8015424 <USBD_Get_USB_Status>
 80153ee:	4603      	mov	r3, r0
 80153f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80153f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3718      	adds	r7, #24
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}

080153fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	460b      	mov	r3, r1
 8015406:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801540e:	78fa      	ldrb	r2, [r7, #3]
 8015410:	4611      	mov	r1, r2
 8015412:	4618      	mov	r0, r3
 8015414:	f7f1 f898 	bl	8006548 <HAL_PCD_EP_GetRxCount>
 8015418:	4603      	mov	r3, r0
}
 801541a:	4618      	mov	r0, r3
 801541c:	3708      	adds	r7, #8
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
	...

08015424 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015424:	b480      	push	{r7}
 8015426:	b085      	sub	sp, #20
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801542e:	2300      	movs	r3, #0
 8015430:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015432:	79fb      	ldrb	r3, [r7, #7]
 8015434:	2b03      	cmp	r3, #3
 8015436:	d817      	bhi.n	8015468 <USBD_Get_USB_Status+0x44>
 8015438:	a201      	add	r2, pc, #4	; (adr r2, 8015440 <USBD_Get_USB_Status+0x1c>)
 801543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801543e:	bf00      	nop
 8015440:	08015451 	.word	0x08015451
 8015444:	08015457 	.word	0x08015457
 8015448:	0801545d 	.word	0x0801545d
 801544c:	08015463 	.word	0x08015463
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015450:	2300      	movs	r3, #0
 8015452:	73fb      	strb	r3, [r7, #15]
    break;
 8015454:	e00b      	b.n	801546e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015456:	2303      	movs	r3, #3
 8015458:	73fb      	strb	r3, [r7, #15]
    break;
 801545a:	e008      	b.n	801546e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801545c:	2301      	movs	r3, #1
 801545e:	73fb      	strb	r3, [r7, #15]
    break;
 8015460:	e005      	b.n	801546e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015462:	2303      	movs	r3, #3
 8015464:	73fb      	strb	r3, [r7, #15]
    break;
 8015466:	e002      	b.n	801546e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015468:	2303      	movs	r3, #3
 801546a:	73fb      	strb	r3, [r7, #15]
    break;
 801546c:	bf00      	nop
  }
  return usb_status;
 801546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015470:	4618      	mov	r0, r3
 8015472:	3714      	adds	r7, #20
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr

0801547c <__errno>:
 801547c:	4b01      	ldr	r3, [pc, #4]	; (8015484 <__errno+0x8>)
 801547e:	6818      	ldr	r0, [r3, #0]
 8015480:	4770      	bx	lr
 8015482:	bf00      	nop
 8015484:	24000168 	.word	0x24000168

08015488 <__libc_init_array>:
 8015488:	b570      	push	{r4, r5, r6, lr}
 801548a:	4e0d      	ldr	r6, [pc, #52]	; (80154c0 <__libc_init_array+0x38>)
 801548c:	4c0d      	ldr	r4, [pc, #52]	; (80154c4 <__libc_init_array+0x3c>)
 801548e:	1ba4      	subs	r4, r4, r6
 8015490:	10a4      	asrs	r4, r4, #2
 8015492:	2500      	movs	r5, #0
 8015494:	42a5      	cmp	r5, r4
 8015496:	d109      	bne.n	80154ac <__libc_init_array+0x24>
 8015498:	4e0b      	ldr	r6, [pc, #44]	; (80154c8 <__libc_init_array+0x40>)
 801549a:	4c0c      	ldr	r4, [pc, #48]	; (80154cc <__libc_init_array+0x44>)
 801549c:	f001 f972 	bl	8016784 <_init>
 80154a0:	1ba4      	subs	r4, r4, r6
 80154a2:	10a4      	asrs	r4, r4, #2
 80154a4:	2500      	movs	r5, #0
 80154a6:	42a5      	cmp	r5, r4
 80154a8:	d105      	bne.n	80154b6 <__libc_init_array+0x2e>
 80154aa:	bd70      	pop	{r4, r5, r6, pc}
 80154ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80154b0:	4798      	blx	r3
 80154b2:	3501      	adds	r5, #1
 80154b4:	e7ee      	b.n	8015494 <__libc_init_array+0xc>
 80154b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80154ba:	4798      	blx	r3
 80154bc:	3501      	adds	r5, #1
 80154be:	e7f2      	b.n	80154a6 <__libc_init_array+0x1e>
 80154c0:	08016b80 	.word	0x08016b80
 80154c4:	08016b80 	.word	0x08016b80
 80154c8:	08016b80 	.word	0x08016b80
 80154cc:	08016b84 	.word	0x08016b84

080154d0 <malloc>:
 80154d0:	4b02      	ldr	r3, [pc, #8]	; (80154dc <malloc+0xc>)
 80154d2:	4601      	mov	r1, r0
 80154d4:	6818      	ldr	r0, [r3, #0]
 80154d6:	f000 b86d 	b.w	80155b4 <_malloc_r>
 80154da:	bf00      	nop
 80154dc:	24000168 	.word	0x24000168

080154e0 <free>:
 80154e0:	4b02      	ldr	r3, [pc, #8]	; (80154ec <free+0xc>)
 80154e2:	4601      	mov	r1, r0
 80154e4:	6818      	ldr	r0, [r3, #0]
 80154e6:	f000 b817 	b.w	8015518 <_free_r>
 80154ea:	bf00      	nop
 80154ec:	24000168 	.word	0x24000168

080154f0 <memcpy>:
 80154f0:	b510      	push	{r4, lr}
 80154f2:	1e43      	subs	r3, r0, #1
 80154f4:	440a      	add	r2, r1
 80154f6:	4291      	cmp	r1, r2
 80154f8:	d100      	bne.n	80154fc <memcpy+0xc>
 80154fa:	bd10      	pop	{r4, pc}
 80154fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015500:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015504:	e7f7      	b.n	80154f6 <memcpy+0x6>

08015506 <memset>:
 8015506:	4402      	add	r2, r0
 8015508:	4603      	mov	r3, r0
 801550a:	4293      	cmp	r3, r2
 801550c:	d100      	bne.n	8015510 <memset+0xa>
 801550e:	4770      	bx	lr
 8015510:	f803 1b01 	strb.w	r1, [r3], #1
 8015514:	e7f9      	b.n	801550a <memset+0x4>
	...

08015518 <_free_r>:
 8015518:	b538      	push	{r3, r4, r5, lr}
 801551a:	4605      	mov	r5, r0
 801551c:	2900      	cmp	r1, #0
 801551e:	d045      	beq.n	80155ac <_free_r+0x94>
 8015520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015524:	1f0c      	subs	r4, r1, #4
 8015526:	2b00      	cmp	r3, #0
 8015528:	bfb8      	it	lt
 801552a:	18e4      	addlt	r4, r4, r3
 801552c:	f000 fc1a 	bl	8015d64 <__malloc_lock>
 8015530:	4a1f      	ldr	r2, [pc, #124]	; (80155b0 <_free_r+0x98>)
 8015532:	6813      	ldr	r3, [r2, #0]
 8015534:	4610      	mov	r0, r2
 8015536:	b933      	cbnz	r3, 8015546 <_free_r+0x2e>
 8015538:	6063      	str	r3, [r4, #4]
 801553a:	6014      	str	r4, [r2, #0]
 801553c:	4628      	mov	r0, r5
 801553e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015542:	f000 bc10 	b.w	8015d66 <__malloc_unlock>
 8015546:	42a3      	cmp	r3, r4
 8015548:	d90c      	bls.n	8015564 <_free_r+0x4c>
 801554a:	6821      	ldr	r1, [r4, #0]
 801554c:	1862      	adds	r2, r4, r1
 801554e:	4293      	cmp	r3, r2
 8015550:	bf04      	itt	eq
 8015552:	681a      	ldreq	r2, [r3, #0]
 8015554:	685b      	ldreq	r3, [r3, #4]
 8015556:	6063      	str	r3, [r4, #4]
 8015558:	bf04      	itt	eq
 801555a:	1852      	addeq	r2, r2, r1
 801555c:	6022      	streq	r2, [r4, #0]
 801555e:	6004      	str	r4, [r0, #0]
 8015560:	e7ec      	b.n	801553c <_free_r+0x24>
 8015562:	4613      	mov	r3, r2
 8015564:	685a      	ldr	r2, [r3, #4]
 8015566:	b10a      	cbz	r2, 801556c <_free_r+0x54>
 8015568:	42a2      	cmp	r2, r4
 801556a:	d9fa      	bls.n	8015562 <_free_r+0x4a>
 801556c:	6819      	ldr	r1, [r3, #0]
 801556e:	1858      	adds	r0, r3, r1
 8015570:	42a0      	cmp	r0, r4
 8015572:	d10b      	bne.n	801558c <_free_r+0x74>
 8015574:	6820      	ldr	r0, [r4, #0]
 8015576:	4401      	add	r1, r0
 8015578:	1858      	adds	r0, r3, r1
 801557a:	4282      	cmp	r2, r0
 801557c:	6019      	str	r1, [r3, #0]
 801557e:	d1dd      	bne.n	801553c <_free_r+0x24>
 8015580:	6810      	ldr	r0, [r2, #0]
 8015582:	6852      	ldr	r2, [r2, #4]
 8015584:	605a      	str	r2, [r3, #4]
 8015586:	4401      	add	r1, r0
 8015588:	6019      	str	r1, [r3, #0]
 801558a:	e7d7      	b.n	801553c <_free_r+0x24>
 801558c:	d902      	bls.n	8015594 <_free_r+0x7c>
 801558e:	230c      	movs	r3, #12
 8015590:	602b      	str	r3, [r5, #0]
 8015592:	e7d3      	b.n	801553c <_free_r+0x24>
 8015594:	6820      	ldr	r0, [r4, #0]
 8015596:	1821      	adds	r1, r4, r0
 8015598:	428a      	cmp	r2, r1
 801559a:	bf04      	itt	eq
 801559c:	6811      	ldreq	r1, [r2, #0]
 801559e:	6852      	ldreq	r2, [r2, #4]
 80155a0:	6062      	str	r2, [r4, #4]
 80155a2:	bf04      	itt	eq
 80155a4:	1809      	addeq	r1, r1, r0
 80155a6:	6021      	streq	r1, [r4, #0]
 80155a8:	605c      	str	r4, [r3, #4]
 80155aa:	e7c7      	b.n	801553c <_free_r+0x24>
 80155ac:	bd38      	pop	{r3, r4, r5, pc}
 80155ae:	bf00      	nop
 80155b0:	24040238 	.word	0x24040238

080155b4 <_malloc_r>:
 80155b4:	b570      	push	{r4, r5, r6, lr}
 80155b6:	1ccd      	adds	r5, r1, #3
 80155b8:	f025 0503 	bic.w	r5, r5, #3
 80155bc:	3508      	adds	r5, #8
 80155be:	2d0c      	cmp	r5, #12
 80155c0:	bf38      	it	cc
 80155c2:	250c      	movcc	r5, #12
 80155c4:	2d00      	cmp	r5, #0
 80155c6:	4606      	mov	r6, r0
 80155c8:	db01      	blt.n	80155ce <_malloc_r+0x1a>
 80155ca:	42a9      	cmp	r1, r5
 80155cc:	d903      	bls.n	80155d6 <_malloc_r+0x22>
 80155ce:	230c      	movs	r3, #12
 80155d0:	6033      	str	r3, [r6, #0]
 80155d2:	2000      	movs	r0, #0
 80155d4:	bd70      	pop	{r4, r5, r6, pc}
 80155d6:	f000 fbc5 	bl	8015d64 <__malloc_lock>
 80155da:	4a21      	ldr	r2, [pc, #132]	; (8015660 <_malloc_r+0xac>)
 80155dc:	6814      	ldr	r4, [r2, #0]
 80155de:	4621      	mov	r1, r4
 80155e0:	b991      	cbnz	r1, 8015608 <_malloc_r+0x54>
 80155e2:	4c20      	ldr	r4, [pc, #128]	; (8015664 <_malloc_r+0xb0>)
 80155e4:	6823      	ldr	r3, [r4, #0]
 80155e6:	b91b      	cbnz	r3, 80155f0 <_malloc_r+0x3c>
 80155e8:	4630      	mov	r0, r6
 80155ea:	f000 f8b9 	bl	8015760 <_sbrk_r>
 80155ee:	6020      	str	r0, [r4, #0]
 80155f0:	4629      	mov	r1, r5
 80155f2:	4630      	mov	r0, r6
 80155f4:	f000 f8b4 	bl	8015760 <_sbrk_r>
 80155f8:	1c43      	adds	r3, r0, #1
 80155fa:	d124      	bne.n	8015646 <_malloc_r+0x92>
 80155fc:	230c      	movs	r3, #12
 80155fe:	6033      	str	r3, [r6, #0]
 8015600:	4630      	mov	r0, r6
 8015602:	f000 fbb0 	bl	8015d66 <__malloc_unlock>
 8015606:	e7e4      	b.n	80155d2 <_malloc_r+0x1e>
 8015608:	680b      	ldr	r3, [r1, #0]
 801560a:	1b5b      	subs	r3, r3, r5
 801560c:	d418      	bmi.n	8015640 <_malloc_r+0x8c>
 801560e:	2b0b      	cmp	r3, #11
 8015610:	d90f      	bls.n	8015632 <_malloc_r+0x7e>
 8015612:	600b      	str	r3, [r1, #0]
 8015614:	50cd      	str	r5, [r1, r3]
 8015616:	18cc      	adds	r4, r1, r3
 8015618:	4630      	mov	r0, r6
 801561a:	f000 fba4 	bl	8015d66 <__malloc_unlock>
 801561e:	f104 000b 	add.w	r0, r4, #11
 8015622:	1d23      	adds	r3, r4, #4
 8015624:	f020 0007 	bic.w	r0, r0, #7
 8015628:	1ac3      	subs	r3, r0, r3
 801562a:	d0d3      	beq.n	80155d4 <_malloc_r+0x20>
 801562c:	425a      	negs	r2, r3
 801562e:	50e2      	str	r2, [r4, r3]
 8015630:	e7d0      	b.n	80155d4 <_malloc_r+0x20>
 8015632:	428c      	cmp	r4, r1
 8015634:	684b      	ldr	r3, [r1, #4]
 8015636:	bf16      	itet	ne
 8015638:	6063      	strne	r3, [r4, #4]
 801563a:	6013      	streq	r3, [r2, #0]
 801563c:	460c      	movne	r4, r1
 801563e:	e7eb      	b.n	8015618 <_malloc_r+0x64>
 8015640:	460c      	mov	r4, r1
 8015642:	6849      	ldr	r1, [r1, #4]
 8015644:	e7cc      	b.n	80155e0 <_malloc_r+0x2c>
 8015646:	1cc4      	adds	r4, r0, #3
 8015648:	f024 0403 	bic.w	r4, r4, #3
 801564c:	42a0      	cmp	r0, r4
 801564e:	d005      	beq.n	801565c <_malloc_r+0xa8>
 8015650:	1a21      	subs	r1, r4, r0
 8015652:	4630      	mov	r0, r6
 8015654:	f000 f884 	bl	8015760 <_sbrk_r>
 8015658:	3001      	adds	r0, #1
 801565a:	d0cf      	beq.n	80155fc <_malloc_r+0x48>
 801565c:	6025      	str	r5, [r4, #0]
 801565e:	e7db      	b.n	8015618 <_malloc_r+0x64>
 8015660:	24040238 	.word	0x24040238
 8015664:	2404023c 	.word	0x2404023c

08015668 <iprintf>:
 8015668:	b40f      	push	{r0, r1, r2, r3}
 801566a:	4b0a      	ldr	r3, [pc, #40]	; (8015694 <iprintf+0x2c>)
 801566c:	b513      	push	{r0, r1, r4, lr}
 801566e:	681c      	ldr	r4, [r3, #0]
 8015670:	b124      	cbz	r4, 801567c <iprintf+0x14>
 8015672:	69a3      	ldr	r3, [r4, #24]
 8015674:	b913      	cbnz	r3, 801567c <iprintf+0x14>
 8015676:	4620      	mov	r0, r4
 8015678:	f000 fa86 	bl	8015b88 <__sinit>
 801567c:	ab05      	add	r3, sp, #20
 801567e:	9a04      	ldr	r2, [sp, #16]
 8015680:	68a1      	ldr	r1, [r4, #8]
 8015682:	9301      	str	r3, [sp, #4]
 8015684:	4620      	mov	r0, r4
 8015686:	f000 fceb 	bl	8016060 <_vfiprintf_r>
 801568a:	b002      	add	sp, #8
 801568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015690:	b004      	add	sp, #16
 8015692:	4770      	bx	lr
 8015694:	24000168 	.word	0x24000168

08015698 <_puts_r>:
 8015698:	b570      	push	{r4, r5, r6, lr}
 801569a:	460e      	mov	r6, r1
 801569c:	4605      	mov	r5, r0
 801569e:	b118      	cbz	r0, 80156a8 <_puts_r+0x10>
 80156a0:	6983      	ldr	r3, [r0, #24]
 80156a2:	b90b      	cbnz	r3, 80156a8 <_puts_r+0x10>
 80156a4:	f000 fa70 	bl	8015b88 <__sinit>
 80156a8:	69ab      	ldr	r3, [r5, #24]
 80156aa:	68ac      	ldr	r4, [r5, #8]
 80156ac:	b913      	cbnz	r3, 80156b4 <_puts_r+0x1c>
 80156ae:	4628      	mov	r0, r5
 80156b0:	f000 fa6a 	bl	8015b88 <__sinit>
 80156b4:	4b23      	ldr	r3, [pc, #140]	; (8015744 <_puts_r+0xac>)
 80156b6:	429c      	cmp	r4, r3
 80156b8:	d117      	bne.n	80156ea <_puts_r+0x52>
 80156ba:	686c      	ldr	r4, [r5, #4]
 80156bc:	89a3      	ldrh	r3, [r4, #12]
 80156be:	071b      	lsls	r3, r3, #28
 80156c0:	d51d      	bpl.n	80156fe <_puts_r+0x66>
 80156c2:	6923      	ldr	r3, [r4, #16]
 80156c4:	b1db      	cbz	r3, 80156fe <_puts_r+0x66>
 80156c6:	3e01      	subs	r6, #1
 80156c8:	68a3      	ldr	r3, [r4, #8]
 80156ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80156ce:	3b01      	subs	r3, #1
 80156d0:	60a3      	str	r3, [r4, #8]
 80156d2:	b9e9      	cbnz	r1, 8015710 <_puts_r+0x78>
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	da2e      	bge.n	8015736 <_puts_r+0x9e>
 80156d8:	4622      	mov	r2, r4
 80156da:	210a      	movs	r1, #10
 80156dc:	4628      	mov	r0, r5
 80156de:	f000 f8a3 	bl	8015828 <__swbuf_r>
 80156e2:	3001      	adds	r0, #1
 80156e4:	d011      	beq.n	801570a <_puts_r+0x72>
 80156e6:	200a      	movs	r0, #10
 80156e8:	e011      	b.n	801570e <_puts_r+0x76>
 80156ea:	4b17      	ldr	r3, [pc, #92]	; (8015748 <_puts_r+0xb0>)
 80156ec:	429c      	cmp	r4, r3
 80156ee:	d101      	bne.n	80156f4 <_puts_r+0x5c>
 80156f0:	68ac      	ldr	r4, [r5, #8]
 80156f2:	e7e3      	b.n	80156bc <_puts_r+0x24>
 80156f4:	4b15      	ldr	r3, [pc, #84]	; (801574c <_puts_r+0xb4>)
 80156f6:	429c      	cmp	r4, r3
 80156f8:	bf08      	it	eq
 80156fa:	68ec      	ldreq	r4, [r5, #12]
 80156fc:	e7de      	b.n	80156bc <_puts_r+0x24>
 80156fe:	4621      	mov	r1, r4
 8015700:	4628      	mov	r0, r5
 8015702:	f000 f8e3 	bl	80158cc <__swsetup_r>
 8015706:	2800      	cmp	r0, #0
 8015708:	d0dd      	beq.n	80156c6 <_puts_r+0x2e>
 801570a:	f04f 30ff 	mov.w	r0, #4294967295
 801570e:	bd70      	pop	{r4, r5, r6, pc}
 8015710:	2b00      	cmp	r3, #0
 8015712:	da04      	bge.n	801571e <_puts_r+0x86>
 8015714:	69a2      	ldr	r2, [r4, #24]
 8015716:	429a      	cmp	r2, r3
 8015718:	dc06      	bgt.n	8015728 <_puts_r+0x90>
 801571a:	290a      	cmp	r1, #10
 801571c:	d004      	beq.n	8015728 <_puts_r+0x90>
 801571e:	6823      	ldr	r3, [r4, #0]
 8015720:	1c5a      	adds	r2, r3, #1
 8015722:	6022      	str	r2, [r4, #0]
 8015724:	7019      	strb	r1, [r3, #0]
 8015726:	e7cf      	b.n	80156c8 <_puts_r+0x30>
 8015728:	4622      	mov	r2, r4
 801572a:	4628      	mov	r0, r5
 801572c:	f000 f87c 	bl	8015828 <__swbuf_r>
 8015730:	3001      	adds	r0, #1
 8015732:	d1c9      	bne.n	80156c8 <_puts_r+0x30>
 8015734:	e7e9      	b.n	801570a <_puts_r+0x72>
 8015736:	6823      	ldr	r3, [r4, #0]
 8015738:	200a      	movs	r0, #10
 801573a:	1c5a      	adds	r2, r3, #1
 801573c:	6022      	str	r2, [r4, #0]
 801573e:	7018      	strb	r0, [r3, #0]
 8015740:	e7e5      	b.n	801570e <_puts_r+0x76>
 8015742:	bf00      	nop
 8015744:	08016b04 	.word	0x08016b04
 8015748:	08016b24 	.word	0x08016b24
 801574c:	08016ae4 	.word	0x08016ae4

08015750 <puts>:
 8015750:	4b02      	ldr	r3, [pc, #8]	; (801575c <puts+0xc>)
 8015752:	4601      	mov	r1, r0
 8015754:	6818      	ldr	r0, [r3, #0]
 8015756:	f7ff bf9f 	b.w	8015698 <_puts_r>
 801575a:	bf00      	nop
 801575c:	24000168 	.word	0x24000168

08015760 <_sbrk_r>:
 8015760:	b538      	push	{r3, r4, r5, lr}
 8015762:	4c06      	ldr	r4, [pc, #24]	; (801577c <_sbrk_r+0x1c>)
 8015764:	2300      	movs	r3, #0
 8015766:	4605      	mov	r5, r0
 8015768:	4608      	mov	r0, r1
 801576a:	6023      	str	r3, [r4, #0]
 801576c:	f7ec f9a4 	bl	8001ab8 <_sbrk>
 8015770:	1c43      	adds	r3, r0, #1
 8015772:	d102      	bne.n	801577a <_sbrk_r+0x1a>
 8015774:	6823      	ldr	r3, [r4, #0]
 8015776:	b103      	cbz	r3, 801577a <_sbrk_r+0x1a>
 8015778:	602b      	str	r3, [r5, #0]
 801577a:	bd38      	pop	{r3, r4, r5, pc}
 801577c:	24041b00 	.word	0x24041b00

08015780 <sniprintf>:
 8015780:	b40c      	push	{r2, r3}
 8015782:	b530      	push	{r4, r5, lr}
 8015784:	4b17      	ldr	r3, [pc, #92]	; (80157e4 <sniprintf+0x64>)
 8015786:	1e0c      	subs	r4, r1, #0
 8015788:	b09d      	sub	sp, #116	; 0x74
 801578a:	681d      	ldr	r5, [r3, #0]
 801578c:	da08      	bge.n	80157a0 <sniprintf+0x20>
 801578e:	238b      	movs	r3, #139	; 0x8b
 8015790:	602b      	str	r3, [r5, #0]
 8015792:	f04f 30ff 	mov.w	r0, #4294967295
 8015796:	b01d      	add	sp, #116	; 0x74
 8015798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801579c:	b002      	add	sp, #8
 801579e:	4770      	bx	lr
 80157a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80157a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80157a8:	bf14      	ite	ne
 80157aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80157ae:	4623      	moveq	r3, r4
 80157b0:	9304      	str	r3, [sp, #16]
 80157b2:	9307      	str	r3, [sp, #28]
 80157b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80157b8:	9002      	str	r0, [sp, #8]
 80157ba:	9006      	str	r0, [sp, #24]
 80157bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80157c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80157c2:	ab21      	add	r3, sp, #132	; 0x84
 80157c4:	a902      	add	r1, sp, #8
 80157c6:	4628      	mov	r0, r5
 80157c8:	9301      	str	r3, [sp, #4]
 80157ca:	f000 fb27 	bl	8015e1c <_svfiprintf_r>
 80157ce:	1c43      	adds	r3, r0, #1
 80157d0:	bfbc      	itt	lt
 80157d2:	238b      	movlt	r3, #139	; 0x8b
 80157d4:	602b      	strlt	r3, [r5, #0]
 80157d6:	2c00      	cmp	r4, #0
 80157d8:	d0dd      	beq.n	8015796 <sniprintf+0x16>
 80157da:	9b02      	ldr	r3, [sp, #8]
 80157dc:	2200      	movs	r2, #0
 80157de:	701a      	strb	r2, [r3, #0]
 80157e0:	e7d9      	b.n	8015796 <sniprintf+0x16>
 80157e2:	bf00      	nop
 80157e4:	24000168 	.word	0x24000168

080157e8 <siprintf>:
 80157e8:	b40e      	push	{r1, r2, r3}
 80157ea:	b500      	push	{lr}
 80157ec:	b09c      	sub	sp, #112	; 0x70
 80157ee:	ab1d      	add	r3, sp, #116	; 0x74
 80157f0:	9002      	str	r0, [sp, #8]
 80157f2:	9006      	str	r0, [sp, #24]
 80157f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80157f8:	4809      	ldr	r0, [pc, #36]	; (8015820 <siprintf+0x38>)
 80157fa:	9107      	str	r1, [sp, #28]
 80157fc:	9104      	str	r1, [sp, #16]
 80157fe:	4909      	ldr	r1, [pc, #36]	; (8015824 <siprintf+0x3c>)
 8015800:	f853 2b04 	ldr.w	r2, [r3], #4
 8015804:	9105      	str	r1, [sp, #20]
 8015806:	6800      	ldr	r0, [r0, #0]
 8015808:	9301      	str	r3, [sp, #4]
 801580a:	a902      	add	r1, sp, #8
 801580c:	f000 fb06 	bl	8015e1c <_svfiprintf_r>
 8015810:	9b02      	ldr	r3, [sp, #8]
 8015812:	2200      	movs	r2, #0
 8015814:	701a      	strb	r2, [r3, #0]
 8015816:	b01c      	add	sp, #112	; 0x70
 8015818:	f85d eb04 	ldr.w	lr, [sp], #4
 801581c:	b003      	add	sp, #12
 801581e:	4770      	bx	lr
 8015820:	24000168 	.word	0x24000168
 8015824:	ffff0208 	.word	0xffff0208

08015828 <__swbuf_r>:
 8015828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582a:	460e      	mov	r6, r1
 801582c:	4614      	mov	r4, r2
 801582e:	4605      	mov	r5, r0
 8015830:	b118      	cbz	r0, 801583a <__swbuf_r+0x12>
 8015832:	6983      	ldr	r3, [r0, #24]
 8015834:	b90b      	cbnz	r3, 801583a <__swbuf_r+0x12>
 8015836:	f000 f9a7 	bl	8015b88 <__sinit>
 801583a:	4b21      	ldr	r3, [pc, #132]	; (80158c0 <__swbuf_r+0x98>)
 801583c:	429c      	cmp	r4, r3
 801583e:	d12a      	bne.n	8015896 <__swbuf_r+0x6e>
 8015840:	686c      	ldr	r4, [r5, #4]
 8015842:	69a3      	ldr	r3, [r4, #24]
 8015844:	60a3      	str	r3, [r4, #8]
 8015846:	89a3      	ldrh	r3, [r4, #12]
 8015848:	071a      	lsls	r2, r3, #28
 801584a:	d52e      	bpl.n	80158aa <__swbuf_r+0x82>
 801584c:	6923      	ldr	r3, [r4, #16]
 801584e:	b363      	cbz	r3, 80158aa <__swbuf_r+0x82>
 8015850:	6923      	ldr	r3, [r4, #16]
 8015852:	6820      	ldr	r0, [r4, #0]
 8015854:	1ac0      	subs	r0, r0, r3
 8015856:	6963      	ldr	r3, [r4, #20]
 8015858:	b2f6      	uxtb	r6, r6
 801585a:	4283      	cmp	r3, r0
 801585c:	4637      	mov	r7, r6
 801585e:	dc04      	bgt.n	801586a <__swbuf_r+0x42>
 8015860:	4621      	mov	r1, r4
 8015862:	4628      	mov	r0, r5
 8015864:	f000 f926 	bl	8015ab4 <_fflush_r>
 8015868:	bb28      	cbnz	r0, 80158b6 <__swbuf_r+0x8e>
 801586a:	68a3      	ldr	r3, [r4, #8]
 801586c:	3b01      	subs	r3, #1
 801586e:	60a3      	str	r3, [r4, #8]
 8015870:	6823      	ldr	r3, [r4, #0]
 8015872:	1c5a      	adds	r2, r3, #1
 8015874:	6022      	str	r2, [r4, #0]
 8015876:	701e      	strb	r6, [r3, #0]
 8015878:	6963      	ldr	r3, [r4, #20]
 801587a:	3001      	adds	r0, #1
 801587c:	4283      	cmp	r3, r0
 801587e:	d004      	beq.n	801588a <__swbuf_r+0x62>
 8015880:	89a3      	ldrh	r3, [r4, #12]
 8015882:	07db      	lsls	r3, r3, #31
 8015884:	d519      	bpl.n	80158ba <__swbuf_r+0x92>
 8015886:	2e0a      	cmp	r6, #10
 8015888:	d117      	bne.n	80158ba <__swbuf_r+0x92>
 801588a:	4621      	mov	r1, r4
 801588c:	4628      	mov	r0, r5
 801588e:	f000 f911 	bl	8015ab4 <_fflush_r>
 8015892:	b190      	cbz	r0, 80158ba <__swbuf_r+0x92>
 8015894:	e00f      	b.n	80158b6 <__swbuf_r+0x8e>
 8015896:	4b0b      	ldr	r3, [pc, #44]	; (80158c4 <__swbuf_r+0x9c>)
 8015898:	429c      	cmp	r4, r3
 801589a:	d101      	bne.n	80158a0 <__swbuf_r+0x78>
 801589c:	68ac      	ldr	r4, [r5, #8]
 801589e:	e7d0      	b.n	8015842 <__swbuf_r+0x1a>
 80158a0:	4b09      	ldr	r3, [pc, #36]	; (80158c8 <__swbuf_r+0xa0>)
 80158a2:	429c      	cmp	r4, r3
 80158a4:	bf08      	it	eq
 80158a6:	68ec      	ldreq	r4, [r5, #12]
 80158a8:	e7cb      	b.n	8015842 <__swbuf_r+0x1a>
 80158aa:	4621      	mov	r1, r4
 80158ac:	4628      	mov	r0, r5
 80158ae:	f000 f80d 	bl	80158cc <__swsetup_r>
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d0cc      	beq.n	8015850 <__swbuf_r+0x28>
 80158b6:	f04f 37ff 	mov.w	r7, #4294967295
 80158ba:	4638      	mov	r0, r7
 80158bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158be:	bf00      	nop
 80158c0:	08016b04 	.word	0x08016b04
 80158c4:	08016b24 	.word	0x08016b24
 80158c8:	08016ae4 	.word	0x08016ae4

080158cc <__swsetup_r>:
 80158cc:	4b32      	ldr	r3, [pc, #200]	; (8015998 <__swsetup_r+0xcc>)
 80158ce:	b570      	push	{r4, r5, r6, lr}
 80158d0:	681d      	ldr	r5, [r3, #0]
 80158d2:	4606      	mov	r6, r0
 80158d4:	460c      	mov	r4, r1
 80158d6:	b125      	cbz	r5, 80158e2 <__swsetup_r+0x16>
 80158d8:	69ab      	ldr	r3, [r5, #24]
 80158da:	b913      	cbnz	r3, 80158e2 <__swsetup_r+0x16>
 80158dc:	4628      	mov	r0, r5
 80158de:	f000 f953 	bl	8015b88 <__sinit>
 80158e2:	4b2e      	ldr	r3, [pc, #184]	; (801599c <__swsetup_r+0xd0>)
 80158e4:	429c      	cmp	r4, r3
 80158e6:	d10f      	bne.n	8015908 <__swsetup_r+0x3c>
 80158e8:	686c      	ldr	r4, [r5, #4]
 80158ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158ee:	b29a      	uxth	r2, r3
 80158f0:	0715      	lsls	r5, r2, #28
 80158f2:	d42c      	bmi.n	801594e <__swsetup_r+0x82>
 80158f4:	06d0      	lsls	r0, r2, #27
 80158f6:	d411      	bmi.n	801591c <__swsetup_r+0x50>
 80158f8:	2209      	movs	r2, #9
 80158fa:	6032      	str	r2, [r6, #0]
 80158fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015900:	81a3      	strh	r3, [r4, #12]
 8015902:	f04f 30ff 	mov.w	r0, #4294967295
 8015906:	e03e      	b.n	8015986 <__swsetup_r+0xba>
 8015908:	4b25      	ldr	r3, [pc, #148]	; (80159a0 <__swsetup_r+0xd4>)
 801590a:	429c      	cmp	r4, r3
 801590c:	d101      	bne.n	8015912 <__swsetup_r+0x46>
 801590e:	68ac      	ldr	r4, [r5, #8]
 8015910:	e7eb      	b.n	80158ea <__swsetup_r+0x1e>
 8015912:	4b24      	ldr	r3, [pc, #144]	; (80159a4 <__swsetup_r+0xd8>)
 8015914:	429c      	cmp	r4, r3
 8015916:	bf08      	it	eq
 8015918:	68ec      	ldreq	r4, [r5, #12]
 801591a:	e7e6      	b.n	80158ea <__swsetup_r+0x1e>
 801591c:	0751      	lsls	r1, r2, #29
 801591e:	d512      	bpl.n	8015946 <__swsetup_r+0x7a>
 8015920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015922:	b141      	cbz	r1, 8015936 <__swsetup_r+0x6a>
 8015924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015928:	4299      	cmp	r1, r3
 801592a:	d002      	beq.n	8015932 <__swsetup_r+0x66>
 801592c:	4630      	mov	r0, r6
 801592e:	f7ff fdf3 	bl	8015518 <_free_r>
 8015932:	2300      	movs	r3, #0
 8015934:	6363      	str	r3, [r4, #52]	; 0x34
 8015936:	89a3      	ldrh	r3, [r4, #12]
 8015938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801593c:	81a3      	strh	r3, [r4, #12]
 801593e:	2300      	movs	r3, #0
 8015940:	6063      	str	r3, [r4, #4]
 8015942:	6923      	ldr	r3, [r4, #16]
 8015944:	6023      	str	r3, [r4, #0]
 8015946:	89a3      	ldrh	r3, [r4, #12]
 8015948:	f043 0308 	orr.w	r3, r3, #8
 801594c:	81a3      	strh	r3, [r4, #12]
 801594e:	6923      	ldr	r3, [r4, #16]
 8015950:	b94b      	cbnz	r3, 8015966 <__swsetup_r+0x9a>
 8015952:	89a3      	ldrh	r3, [r4, #12]
 8015954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801595c:	d003      	beq.n	8015966 <__swsetup_r+0x9a>
 801595e:	4621      	mov	r1, r4
 8015960:	4630      	mov	r0, r6
 8015962:	f000 f9bf 	bl	8015ce4 <__smakebuf_r>
 8015966:	89a2      	ldrh	r2, [r4, #12]
 8015968:	f012 0301 	ands.w	r3, r2, #1
 801596c:	d00c      	beq.n	8015988 <__swsetup_r+0xbc>
 801596e:	2300      	movs	r3, #0
 8015970:	60a3      	str	r3, [r4, #8]
 8015972:	6963      	ldr	r3, [r4, #20]
 8015974:	425b      	negs	r3, r3
 8015976:	61a3      	str	r3, [r4, #24]
 8015978:	6923      	ldr	r3, [r4, #16]
 801597a:	b953      	cbnz	r3, 8015992 <__swsetup_r+0xc6>
 801597c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015980:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015984:	d1ba      	bne.n	80158fc <__swsetup_r+0x30>
 8015986:	bd70      	pop	{r4, r5, r6, pc}
 8015988:	0792      	lsls	r2, r2, #30
 801598a:	bf58      	it	pl
 801598c:	6963      	ldrpl	r3, [r4, #20]
 801598e:	60a3      	str	r3, [r4, #8]
 8015990:	e7f2      	b.n	8015978 <__swsetup_r+0xac>
 8015992:	2000      	movs	r0, #0
 8015994:	e7f7      	b.n	8015986 <__swsetup_r+0xba>
 8015996:	bf00      	nop
 8015998:	24000168 	.word	0x24000168
 801599c:	08016b04 	.word	0x08016b04
 80159a0:	08016b24 	.word	0x08016b24
 80159a4:	08016ae4 	.word	0x08016ae4

080159a8 <__sflush_r>:
 80159a8:	898a      	ldrh	r2, [r1, #12]
 80159aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ae:	4605      	mov	r5, r0
 80159b0:	0710      	lsls	r0, r2, #28
 80159b2:	460c      	mov	r4, r1
 80159b4:	d458      	bmi.n	8015a68 <__sflush_r+0xc0>
 80159b6:	684b      	ldr	r3, [r1, #4]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	dc05      	bgt.n	80159c8 <__sflush_r+0x20>
 80159bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80159be:	2b00      	cmp	r3, #0
 80159c0:	dc02      	bgt.n	80159c8 <__sflush_r+0x20>
 80159c2:	2000      	movs	r0, #0
 80159c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159ca:	2e00      	cmp	r6, #0
 80159cc:	d0f9      	beq.n	80159c2 <__sflush_r+0x1a>
 80159ce:	2300      	movs	r3, #0
 80159d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159d4:	682f      	ldr	r7, [r5, #0]
 80159d6:	6a21      	ldr	r1, [r4, #32]
 80159d8:	602b      	str	r3, [r5, #0]
 80159da:	d032      	beq.n	8015a42 <__sflush_r+0x9a>
 80159dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159de:	89a3      	ldrh	r3, [r4, #12]
 80159e0:	075a      	lsls	r2, r3, #29
 80159e2:	d505      	bpl.n	80159f0 <__sflush_r+0x48>
 80159e4:	6863      	ldr	r3, [r4, #4]
 80159e6:	1ac0      	subs	r0, r0, r3
 80159e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159ea:	b10b      	cbz	r3, 80159f0 <__sflush_r+0x48>
 80159ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159ee:	1ac0      	subs	r0, r0, r3
 80159f0:	2300      	movs	r3, #0
 80159f2:	4602      	mov	r2, r0
 80159f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159f6:	6a21      	ldr	r1, [r4, #32]
 80159f8:	4628      	mov	r0, r5
 80159fa:	47b0      	blx	r6
 80159fc:	1c43      	adds	r3, r0, #1
 80159fe:	89a3      	ldrh	r3, [r4, #12]
 8015a00:	d106      	bne.n	8015a10 <__sflush_r+0x68>
 8015a02:	6829      	ldr	r1, [r5, #0]
 8015a04:	291d      	cmp	r1, #29
 8015a06:	d848      	bhi.n	8015a9a <__sflush_r+0xf2>
 8015a08:	4a29      	ldr	r2, [pc, #164]	; (8015ab0 <__sflush_r+0x108>)
 8015a0a:	40ca      	lsrs	r2, r1
 8015a0c:	07d6      	lsls	r6, r2, #31
 8015a0e:	d544      	bpl.n	8015a9a <__sflush_r+0xf2>
 8015a10:	2200      	movs	r2, #0
 8015a12:	6062      	str	r2, [r4, #4]
 8015a14:	04d9      	lsls	r1, r3, #19
 8015a16:	6922      	ldr	r2, [r4, #16]
 8015a18:	6022      	str	r2, [r4, #0]
 8015a1a:	d504      	bpl.n	8015a26 <__sflush_r+0x7e>
 8015a1c:	1c42      	adds	r2, r0, #1
 8015a1e:	d101      	bne.n	8015a24 <__sflush_r+0x7c>
 8015a20:	682b      	ldr	r3, [r5, #0]
 8015a22:	b903      	cbnz	r3, 8015a26 <__sflush_r+0x7e>
 8015a24:	6560      	str	r0, [r4, #84]	; 0x54
 8015a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a28:	602f      	str	r7, [r5, #0]
 8015a2a:	2900      	cmp	r1, #0
 8015a2c:	d0c9      	beq.n	80159c2 <__sflush_r+0x1a>
 8015a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a32:	4299      	cmp	r1, r3
 8015a34:	d002      	beq.n	8015a3c <__sflush_r+0x94>
 8015a36:	4628      	mov	r0, r5
 8015a38:	f7ff fd6e 	bl	8015518 <_free_r>
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8015a40:	e7c0      	b.n	80159c4 <__sflush_r+0x1c>
 8015a42:	2301      	movs	r3, #1
 8015a44:	4628      	mov	r0, r5
 8015a46:	47b0      	blx	r6
 8015a48:	1c41      	adds	r1, r0, #1
 8015a4a:	d1c8      	bne.n	80159de <__sflush_r+0x36>
 8015a4c:	682b      	ldr	r3, [r5, #0]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d0c5      	beq.n	80159de <__sflush_r+0x36>
 8015a52:	2b1d      	cmp	r3, #29
 8015a54:	d001      	beq.n	8015a5a <__sflush_r+0xb2>
 8015a56:	2b16      	cmp	r3, #22
 8015a58:	d101      	bne.n	8015a5e <__sflush_r+0xb6>
 8015a5a:	602f      	str	r7, [r5, #0]
 8015a5c:	e7b1      	b.n	80159c2 <__sflush_r+0x1a>
 8015a5e:	89a3      	ldrh	r3, [r4, #12]
 8015a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a64:	81a3      	strh	r3, [r4, #12]
 8015a66:	e7ad      	b.n	80159c4 <__sflush_r+0x1c>
 8015a68:	690f      	ldr	r7, [r1, #16]
 8015a6a:	2f00      	cmp	r7, #0
 8015a6c:	d0a9      	beq.n	80159c2 <__sflush_r+0x1a>
 8015a6e:	0793      	lsls	r3, r2, #30
 8015a70:	680e      	ldr	r6, [r1, #0]
 8015a72:	bf08      	it	eq
 8015a74:	694b      	ldreq	r3, [r1, #20]
 8015a76:	600f      	str	r7, [r1, #0]
 8015a78:	bf18      	it	ne
 8015a7a:	2300      	movne	r3, #0
 8015a7c:	eba6 0807 	sub.w	r8, r6, r7
 8015a80:	608b      	str	r3, [r1, #8]
 8015a82:	f1b8 0f00 	cmp.w	r8, #0
 8015a86:	dd9c      	ble.n	80159c2 <__sflush_r+0x1a>
 8015a88:	4643      	mov	r3, r8
 8015a8a:	463a      	mov	r2, r7
 8015a8c:	6a21      	ldr	r1, [r4, #32]
 8015a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a90:	4628      	mov	r0, r5
 8015a92:	47b0      	blx	r6
 8015a94:	2800      	cmp	r0, #0
 8015a96:	dc06      	bgt.n	8015aa6 <__sflush_r+0xfe>
 8015a98:	89a3      	ldrh	r3, [r4, #12]
 8015a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a9e:	81a3      	strh	r3, [r4, #12]
 8015aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8015aa4:	e78e      	b.n	80159c4 <__sflush_r+0x1c>
 8015aa6:	4407      	add	r7, r0
 8015aa8:	eba8 0800 	sub.w	r8, r8, r0
 8015aac:	e7e9      	b.n	8015a82 <__sflush_r+0xda>
 8015aae:	bf00      	nop
 8015ab0:	20400001 	.word	0x20400001

08015ab4 <_fflush_r>:
 8015ab4:	b538      	push	{r3, r4, r5, lr}
 8015ab6:	690b      	ldr	r3, [r1, #16]
 8015ab8:	4605      	mov	r5, r0
 8015aba:	460c      	mov	r4, r1
 8015abc:	b1db      	cbz	r3, 8015af6 <_fflush_r+0x42>
 8015abe:	b118      	cbz	r0, 8015ac8 <_fflush_r+0x14>
 8015ac0:	6983      	ldr	r3, [r0, #24]
 8015ac2:	b90b      	cbnz	r3, 8015ac8 <_fflush_r+0x14>
 8015ac4:	f000 f860 	bl	8015b88 <__sinit>
 8015ac8:	4b0c      	ldr	r3, [pc, #48]	; (8015afc <_fflush_r+0x48>)
 8015aca:	429c      	cmp	r4, r3
 8015acc:	d109      	bne.n	8015ae2 <_fflush_r+0x2e>
 8015ace:	686c      	ldr	r4, [r5, #4]
 8015ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ad4:	b17b      	cbz	r3, 8015af6 <_fflush_r+0x42>
 8015ad6:	4621      	mov	r1, r4
 8015ad8:	4628      	mov	r0, r5
 8015ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ade:	f7ff bf63 	b.w	80159a8 <__sflush_r>
 8015ae2:	4b07      	ldr	r3, [pc, #28]	; (8015b00 <_fflush_r+0x4c>)
 8015ae4:	429c      	cmp	r4, r3
 8015ae6:	d101      	bne.n	8015aec <_fflush_r+0x38>
 8015ae8:	68ac      	ldr	r4, [r5, #8]
 8015aea:	e7f1      	b.n	8015ad0 <_fflush_r+0x1c>
 8015aec:	4b05      	ldr	r3, [pc, #20]	; (8015b04 <_fflush_r+0x50>)
 8015aee:	429c      	cmp	r4, r3
 8015af0:	bf08      	it	eq
 8015af2:	68ec      	ldreq	r4, [r5, #12]
 8015af4:	e7ec      	b.n	8015ad0 <_fflush_r+0x1c>
 8015af6:	2000      	movs	r0, #0
 8015af8:	bd38      	pop	{r3, r4, r5, pc}
 8015afa:	bf00      	nop
 8015afc:	08016b04 	.word	0x08016b04
 8015b00:	08016b24 	.word	0x08016b24
 8015b04:	08016ae4 	.word	0x08016ae4

08015b08 <std>:
 8015b08:	2300      	movs	r3, #0
 8015b0a:	b510      	push	{r4, lr}
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8015b12:	6083      	str	r3, [r0, #8]
 8015b14:	8181      	strh	r1, [r0, #12]
 8015b16:	6643      	str	r3, [r0, #100]	; 0x64
 8015b18:	81c2      	strh	r2, [r0, #14]
 8015b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015b1e:	6183      	str	r3, [r0, #24]
 8015b20:	4619      	mov	r1, r3
 8015b22:	2208      	movs	r2, #8
 8015b24:	305c      	adds	r0, #92	; 0x5c
 8015b26:	f7ff fcee 	bl	8015506 <memset>
 8015b2a:	4b05      	ldr	r3, [pc, #20]	; (8015b40 <std+0x38>)
 8015b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8015b2e:	4b05      	ldr	r3, [pc, #20]	; (8015b44 <std+0x3c>)
 8015b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8015b32:	4b05      	ldr	r3, [pc, #20]	; (8015b48 <std+0x40>)
 8015b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015b36:	4b05      	ldr	r3, [pc, #20]	; (8015b4c <std+0x44>)
 8015b38:	6224      	str	r4, [r4, #32]
 8015b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8015b3c:	bd10      	pop	{r4, pc}
 8015b3e:	bf00      	nop
 8015b40:	0801659d 	.word	0x0801659d
 8015b44:	080165bf 	.word	0x080165bf
 8015b48:	080165f7 	.word	0x080165f7
 8015b4c:	0801661b 	.word	0x0801661b

08015b50 <_cleanup_r>:
 8015b50:	4901      	ldr	r1, [pc, #4]	; (8015b58 <_cleanup_r+0x8>)
 8015b52:	f000 b885 	b.w	8015c60 <_fwalk_reent>
 8015b56:	bf00      	nop
 8015b58:	08015ab5 	.word	0x08015ab5

08015b5c <__sfmoreglue>:
 8015b5c:	b570      	push	{r4, r5, r6, lr}
 8015b5e:	1e4a      	subs	r2, r1, #1
 8015b60:	2568      	movs	r5, #104	; 0x68
 8015b62:	4355      	muls	r5, r2
 8015b64:	460e      	mov	r6, r1
 8015b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b6a:	f7ff fd23 	bl	80155b4 <_malloc_r>
 8015b6e:	4604      	mov	r4, r0
 8015b70:	b140      	cbz	r0, 8015b84 <__sfmoreglue+0x28>
 8015b72:	2100      	movs	r1, #0
 8015b74:	e9c0 1600 	strd	r1, r6, [r0]
 8015b78:	300c      	adds	r0, #12
 8015b7a:	60a0      	str	r0, [r4, #8]
 8015b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b80:	f7ff fcc1 	bl	8015506 <memset>
 8015b84:	4620      	mov	r0, r4
 8015b86:	bd70      	pop	{r4, r5, r6, pc}

08015b88 <__sinit>:
 8015b88:	6983      	ldr	r3, [r0, #24]
 8015b8a:	b510      	push	{r4, lr}
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	bb33      	cbnz	r3, 8015bde <__sinit+0x56>
 8015b90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015b94:	6503      	str	r3, [r0, #80]	; 0x50
 8015b96:	4b12      	ldr	r3, [pc, #72]	; (8015be0 <__sinit+0x58>)
 8015b98:	4a12      	ldr	r2, [pc, #72]	; (8015be4 <__sinit+0x5c>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	6282      	str	r2, [r0, #40]	; 0x28
 8015b9e:	4298      	cmp	r0, r3
 8015ba0:	bf04      	itt	eq
 8015ba2:	2301      	moveq	r3, #1
 8015ba4:	6183      	streq	r3, [r0, #24]
 8015ba6:	f000 f81f 	bl	8015be8 <__sfp>
 8015baa:	6060      	str	r0, [r4, #4]
 8015bac:	4620      	mov	r0, r4
 8015bae:	f000 f81b 	bl	8015be8 <__sfp>
 8015bb2:	60a0      	str	r0, [r4, #8]
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f000 f817 	bl	8015be8 <__sfp>
 8015bba:	2200      	movs	r2, #0
 8015bbc:	60e0      	str	r0, [r4, #12]
 8015bbe:	2104      	movs	r1, #4
 8015bc0:	6860      	ldr	r0, [r4, #4]
 8015bc2:	f7ff ffa1 	bl	8015b08 <std>
 8015bc6:	2201      	movs	r2, #1
 8015bc8:	2109      	movs	r1, #9
 8015bca:	68a0      	ldr	r0, [r4, #8]
 8015bcc:	f7ff ff9c 	bl	8015b08 <std>
 8015bd0:	2202      	movs	r2, #2
 8015bd2:	2112      	movs	r1, #18
 8015bd4:	68e0      	ldr	r0, [r4, #12]
 8015bd6:	f7ff ff97 	bl	8015b08 <std>
 8015bda:	2301      	movs	r3, #1
 8015bdc:	61a3      	str	r3, [r4, #24]
 8015bde:	bd10      	pop	{r4, pc}
 8015be0:	08016ae0 	.word	0x08016ae0
 8015be4:	08015b51 	.word	0x08015b51

08015be8 <__sfp>:
 8015be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bea:	4b1b      	ldr	r3, [pc, #108]	; (8015c58 <__sfp+0x70>)
 8015bec:	681e      	ldr	r6, [r3, #0]
 8015bee:	69b3      	ldr	r3, [r6, #24]
 8015bf0:	4607      	mov	r7, r0
 8015bf2:	b913      	cbnz	r3, 8015bfa <__sfp+0x12>
 8015bf4:	4630      	mov	r0, r6
 8015bf6:	f7ff ffc7 	bl	8015b88 <__sinit>
 8015bfa:	3648      	adds	r6, #72	; 0x48
 8015bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015c00:	3b01      	subs	r3, #1
 8015c02:	d503      	bpl.n	8015c0c <__sfp+0x24>
 8015c04:	6833      	ldr	r3, [r6, #0]
 8015c06:	b133      	cbz	r3, 8015c16 <__sfp+0x2e>
 8015c08:	6836      	ldr	r6, [r6, #0]
 8015c0a:	e7f7      	b.n	8015bfc <__sfp+0x14>
 8015c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015c10:	b16d      	cbz	r5, 8015c2e <__sfp+0x46>
 8015c12:	3468      	adds	r4, #104	; 0x68
 8015c14:	e7f4      	b.n	8015c00 <__sfp+0x18>
 8015c16:	2104      	movs	r1, #4
 8015c18:	4638      	mov	r0, r7
 8015c1a:	f7ff ff9f 	bl	8015b5c <__sfmoreglue>
 8015c1e:	6030      	str	r0, [r6, #0]
 8015c20:	2800      	cmp	r0, #0
 8015c22:	d1f1      	bne.n	8015c08 <__sfp+0x20>
 8015c24:	230c      	movs	r3, #12
 8015c26:	603b      	str	r3, [r7, #0]
 8015c28:	4604      	mov	r4, r0
 8015c2a:	4620      	mov	r0, r4
 8015c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c2e:	4b0b      	ldr	r3, [pc, #44]	; (8015c5c <__sfp+0x74>)
 8015c30:	6665      	str	r5, [r4, #100]	; 0x64
 8015c32:	e9c4 5500 	strd	r5, r5, [r4]
 8015c36:	60a5      	str	r5, [r4, #8]
 8015c38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015c3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015c40:	2208      	movs	r2, #8
 8015c42:	4629      	mov	r1, r5
 8015c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c48:	f7ff fc5d 	bl	8015506 <memset>
 8015c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c54:	e7e9      	b.n	8015c2a <__sfp+0x42>
 8015c56:	bf00      	nop
 8015c58:	08016ae0 	.word	0x08016ae0
 8015c5c:	ffff0001 	.word	0xffff0001

08015c60 <_fwalk_reent>:
 8015c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c64:	4680      	mov	r8, r0
 8015c66:	4689      	mov	r9, r1
 8015c68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015c6c:	2600      	movs	r6, #0
 8015c6e:	b914      	cbnz	r4, 8015c76 <_fwalk_reent+0x16>
 8015c70:	4630      	mov	r0, r6
 8015c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015c7a:	3f01      	subs	r7, #1
 8015c7c:	d501      	bpl.n	8015c82 <_fwalk_reent+0x22>
 8015c7e:	6824      	ldr	r4, [r4, #0]
 8015c80:	e7f5      	b.n	8015c6e <_fwalk_reent+0xe>
 8015c82:	89ab      	ldrh	r3, [r5, #12]
 8015c84:	2b01      	cmp	r3, #1
 8015c86:	d907      	bls.n	8015c98 <_fwalk_reent+0x38>
 8015c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c8c:	3301      	adds	r3, #1
 8015c8e:	d003      	beq.n	8015c98 <_fwalk_reent+0x38>
 8015c90:	4629      	mov	r1, r5
 8015c92:	4640      	mov	r0, r8
 8015c94:	47c8      	blx	r9
 8015c96:	4306      	orrs	r6, r0
 8015c98:	3568      	adds	r5, #104	; 0x68
 8015c9a:	e7ee      	b.n	8015c7a <_fwalk_reent+0x1a>

08015c9c <__swhatbuf_r>:
 8015c9c:	b570      	push	{r4, r5, r6, lr}
 8015c9e:	460e      	mov	r6, r1
 8015ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ca4:	2900      	cmp	r1, #0
 8015ca6:	b096      	sub	sp, #88	; 0x58
 8015ca8:	4614      	mov	r4, r2
 8015caa:	461d      	mov	r5, r3
 8015cac:	da07      	bge.n	8015cbe <__swhatbuf_r+0x22>
 8015cae:	2300      	movs	r3, #0
 8015cb0:	602b      	str	r3, [r5, #0]
 8015cb2:	89b3      	ldrh	r3, [r6, #12]
 8015cb4:	061a      	lsls	r2, r3, #24
 8015cb6:	d410      	bmi.n	8015cda <__swhatbuf_r+0x3e>
 8015cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015cbc:	e00e      	b.n	8015cdc <__swhatbuf_r+0x40>
 8015cbe:	466a      	mov	r2, sp
 8015cc0:	f000 fcd2 	bl	8016668 <_fstat_r>
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	dbf2      	blt.n	8015cae <__swhatbuf_r+0x12>
 8015cc8:	9a01      	ldr	r2, [sp, #4]
 8015cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015cd2:	425a      	negs	r2, r3
 8015cd4:	415a      	adcs	r2, r3
 8015cd6:	602a      	str	r2, [r5, #0]
 8015cd8:	e7ee      	b.n	8015cb8 <__swhatbuf_r+0x1c>
 8015cda:	2340      	movs	r3, #64	; 0x40
 8015cdc:	2000      	movs	r0, #0
 8015cde:	6023      	str	r3, [r4, #0]
 8015ce0:	b016      	add	sp, #88	; 0x58
 8015ce2:	bd70      	pop	{r4, r5, r6, pc}

08015ce4 <__smakebuf_r>:
 8015ce4:	898b      	ldrh	r3, [r1, #12]
 8015ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ce8:	079d      	lsls	r5, r3, #30
 8015cea:	4606      	mov	r6, r0
 8015cec:	460c      	mov	r4, r1
 8015cee:	d507      	bpl.n	8015d00 <__smakebuf_r+0x1c>
 8015cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015cf4:	6023      	str	r3, [r4, #0]
 8015cf6:	6123      	str	r3, [r4, #16]
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	6163      	str	r3, [r4, #20]
 8015cfc:	b002      	add	sp, #8
 8015cfe:	bd70      	pop	{r4, r5, r6, pc}
 8015d00:	ab01      	add	r3, sp, #4
 8015d02:	466a      	mov	r2, sp
 8015d04:	f7ff ffca 	bl	8015c9c <__swhatbuf_r>
 8015d08:	9900      	ldr	r1, [sp, #0]
 8015d0a:	4605      	mov	r5, r0
 8015d0c:	4630      	mov	r0, r6
 8015d0e:	f7ff fc51 	bl	80155b4 <_malloc_r>
 8015d12:	b948      	cbnz	r0, 8015d28 <__smakebuf_r+0x44>
 8015d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d18:	059a      	lsls	r2, r3, #22
 8015d1a:	d4ef      	bmi.n	8015cfc <__smakebuf_r+0x18>
 8015d1c:	f023 0303 	bic.w	r3, r3, #3
 8015d20:	f043 0302 	orr.w	r3, r3, #2
 8015d24:	81a3      	strh	r3, [r4, #12]
 8015d26:	e7e3      	b.n	8015cf0 <__smakebuf_r+0xc>
 8015d28:	4b0d      	ldr	r3, [pc, #52]	; (8015d60 <__smakebuf_r+0x7c>)
 8015d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d2c:	89a3      	ldrh	r3, [r4, #12]
 8015d2e:	6020      	str	r0, [r4, #0]
 8015d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d34:	81a3      	strh	r3, [r4, #12]
 8015d36:	9b00      	ldr	r3, [sp, #0]
 8015d38:	6163      	str	r3, [r4, #20]
 8015d3a:	9b01      	ldr	r3, [sp, #4]
 8015d3c:	6120      	str	r0, [r4, #16]
 8015d3e:	b15b      	cbz	r3, 8015d58 <__smakebuf_r+0x74>
 8015d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d44:	4630      	mov	r0, r6
 8015d46:	f000 fca1 	bl	801668c <_isatty_r>
 8015d4a:	b128      	cbz	r0, 8015d58 <__smakebuf_r+0x74>
 8015d4c:	89a3      	ldrh	r3, [r4, #12]
 8015d4e:	f023 0303 	bic.w	r3, r3, #3
 8015d52:	f043 0301 	orr.w	r3, r3, #1
 8015d56:	81a3      	strh	r3, [r4, #12]
 8015d58:	89a3      	ldrh	r3, [r4, #12]
 8015d5a:	431d      	orrs	r5, r3
 8015d5c:	81a5      	strh	r5, [r4, #12]
 8015d5e:	e7cd      	b.n	8015cfc <__smakebuf_r+0x18>
 8015d60:	08015b51 	.word	0x08015b51

08015d64 <__malloc_lock>:
 8015d64:	4770      	bx	lr

08015d66 <__malloc_unlock>:
 8015d66:	4770      	bx	lr

08015d68 <__ssputs_r>:
 8015d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d6c:	688e      	ldr	r6, [r1, #8]
 8015d6e:	429e      	cmp	r6, r3
 8015d70:	4682      	mov	sl, r0
 8015d72:	460c      	mov	r4, r1
 8015d74:	4690      	mov	r8, r2
 8015d76:	4699      	mov	r9, r3
 8015d78:	d837      	bhi.n	8015dea <__ssputs_r+0x82>
 8015d7a:	898a      	ldrh	r2, [r1, #12]
 8015d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015d80:	d031      	beq.n	8015de6 <__ssputs_r+0x7e>
 8015d82:	6825      	ldr	r5, [r4, #0]
 8015d84:	6909      	ldr	r1, [r1, #16]
 8015d86:	1a6f      	subs	r7, r5, r1
 8015d88:	6965      	ldr	r5, [r4, #20]
 8015d8a:	2302      	movs	r3, #2
 8015d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d90:	fb95 f5f3 	sdiv	r5, r5, r3
 8015d94:	f109 0301 	add.w	r3, r9, #1
 8015d98:	443b      	add	r3, r7
 8015d9a:	429d      	cmp	r5, r3
 8015d9c:	bf38      	it	cc
 8015d9e:	461d      	movcc	r5, r3
 8015da0:	0553      	lsls	r3, r2, #21
 8015da2:	d530      	bpl.n	8015e06 <__ssputs_r+0x9e>
 8015da4:	4629      	mov	r1, r5
 8015da6:	f7ff fc05 	bl	80155b4 <_malloc_r>
 8015daa:	4606      	mov	r6, r0
 8015dac:	b950      	cbnz	r0, 8015dc4 <__ssputs_r+0x5c>
 8015dae:	230c      	movs	r3, #12
 8015db0:	f8ca 3000 	str.w	r3, [sl]
 8015db4:	89a3      	ldrh	r3, [r4, #12]
 8015db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dba:	81a3      	strh	r3, [r4, #12]
 8015dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8015dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dc4:	463a      	mov	r2, r7
 8015dc6:	6921      	ldr	r1, [r4, #16]
 8015dc8:	f7ff fb92 	bl	80154f0 <memcpy>
 8015dcc:	89a3      	ldrh	r3, [r4, #12]
 8015dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dd6:	81a3      	strh	r3, [r4, #12]
 8015dd8:	6126      	str	r6, [r4, #16]
 8015dda:	6165      	str	r5, [r4, #20]
 8015ddc:	443e      	add	r6, r7
 8015dde:	1bed      	subs	r5, r5, r7
 8015de0:	6026      	str	r6, [r4, #0]
 8015de2:	60a5      	str	r5, [r4, #8]
 8015de4:	464e      	mov	r6, r9
 8015de6:	454e      	cmp	r6, r9
 8015de8:	d900      	bls.n	8015dec <__ssputs_r+0x84>
 8015dea:	464e      	mov	r6, r9
 8015dec:	4632      	mov	r2, r6
 8015dee:	4641      	mov	r1, r8
 8015df0:	6820      	ldr	r0, [r4, #0]
 8015df2:	f000 fc6d 	bl	80166d0 <memmove>
 8015df6:	68a3      	ldr	r3, [r4, #8]
 8015df8:	1b9b      	subs	r3, r3, r6
 8015dfa:	60a3      	str	r3, [r4, #8]
 8015dfc:	6823      	ldr	r3, [r4, #0]
 8015dfe:	441e      	add	r6, r3
 8015e00:	6026      	str	r6, [r4, #0]
 8015e02:	2000      	movs	r0, #0
 8015e04:	e7dc      	b.n	8015dc0 <__ssputs_r+0x58>
 8015e06:	462a      	mov	r2, r5
 8015e08:	f000 fc7b 	bl	8016702 <_realloc_r>
 8015e0c:	4606      	mov	r6, r0
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	d1e2      	bne.n	8015dd8 <__ssputs_r+0x70>
 8015e12:	6921      	ldr	r1, [r4, #16]
 8015e14:	4650      	mov	r0, sl
 8015e16:	f7ff fb7f 	bl	8015518 <_free_r>
 8015e1a:	e7c8      	b.n	8015dae <__ssputs_r+0x46>

08015e1c <_svfiprintf_r>:
 8015e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e20:	461d      	mov	r5, r3
 8015e22:	898b      	ldrh	r3, [r1, #12]
 8015e24:	061f      	lsls	r7, r3, #24
 8015e26:	b09d      	sub	sp, #116	; 0x74
 8015e28:	4680      	mov	r8, r0
 8015e2a:	460c      	mov	r4, r1
 8015e2c:	4616      	mov	r6, r2
 8015e2e:	d50f      	bpl.n	8015e50 <_svfiprintf_r+0x34>
 8015e30:	690b      	ldr	r3, [r1, #16]
 8015e32:	b96b      	cbnz	r3, 8015e50 <_svfiprintf_r+0x34>
 8015e34:	2140      	movs	r1, #64	; 0x40
 8015e36:	f7ff fbbd 	bl	80155b4 <_malloc_r>
 8015e3a:	6020      	str	r0, [r4, #0]
 8015e3c:	6120      	str	r0, [r4, #16]
 8015e3e:	b928      	cbnz	r0, 8015e4c <_svfiprintf_r+0x30>
 8015e40:	230c      	movs	r3, #12
 8015e42:	f8c8 3000 	str.w	r3, [r8]
 8015e46:	f04f 30ff 	mov.w	r0, #4294967295
 8015e4a:	e0c8      	b.n	8015fde <_svfiprintf_r+0x1c2>
 8015e4c:	2340      	movs	r3, #64	; 0x40
 8015e4e:	6163      	str	r3, [r4, #20]
 8015e50:	2300      	movs	r3, #0
 8015e52:	9309      	str	r3, [sp, #36]	; 0x24
 8015e54:	2320      	movs	r3, #32
 8015e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e5a:	2330      	movs	r3, #48	; 0x30
 8015e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e60:	9503      	str	r5, [sp, #12]
 8015e62:	f04f 0b01 	mov.w	fp, #1
 8015e66:	4637      	mov	r7, r6
 8015e68:	463d      	mov	r5, r7
 8015e6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015e6e:	b10b      	cbz	r3, 8015e74 <_svfiprintf_r+0x58>
 8015e70:	2b25      	cmp	r3, #37	; 0x25
 8015e72:	d13e      	bne.n	8015ef2 <_svfiprintf_r+0xd6>
 8015e74:	ebb7 0a06 	subs.w	sl, r7, r6
 8015e78:	d00b      	beq.n	8015e92 <_svfiprintf_r+0x76>
 8015e7a:	4653      	mov	r3, sl
 8015e7c:	4632      	mov	r2, r6
 8015e7e:	4621      	mov	r1, r4
 8015e80:	4640      	mov	r0, r8
 8015e82:	f7ff ff71 	bl	8015d68 <__ssputs_r>
 8015e86:	3001      	adds	r0, #1
 8015e88:	f000 80a4 	beq.w	8015fd4 <_svfiprintf_r+0x1b8>
 8015e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e8e:	4453      	add	r3, sl
 8015e90:	9309      	str	r3, [sp, #36]	; 0x24
 8015e92:	783b      	ldrb	r3, [r7, #0]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f000 809d 	beq.w	8015fd4 <_svfiprintf_r+0x1b8>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8015ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ea4:	9304      	str	r3, [sp, #16]
 8015ea6:	9307      	str	r3, [sp, #28]
 8015ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015eac:	931a      	str	r3, [sp, #104]	; 0x68
 8015eae:	462f      	mov	r7, r5
 8015eb0:	2205      	movs	r2, #5
 8015eb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015eb6:	4850      	ldr	r0, [pc, #320]	; (8015ff8 <_svfiprintf_r+0x1dc>)
 8015eb8:	f7ea fa1a 	bl	80002f0 <memchr>
 8015ebc:	9b04      	ldr	r3, [sp, #16]
 8015ebe:	b9d0      	cbnz	r0, 8015ef6 <_svfiprintf_r+0xda>
 8015ec0:	06d9      	lsls	r1, r3, #27
 8015ec2:	bf44      	itt	mi
 8015ec4:	2220      	movmi	r2, #32
 8015ec6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015eca:	071a      	lsls	r2, r3, #28
 8015ecc:	bf44      	itt	mi
 8015ece:	222b      	movmi	r2, #43	; 0x2b
 8015ed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015ed4:	782a      	ldrb	r2, [r5, #0]
 8015ed6:	2a2a      	cmp	r2, #42	; 0x2a
 8015ed8:	d015      	beq.n	8015f06 <_svfiprintf_r+0xea>
 8015eda:	9a07      	ldr	r2, [sp, #28]
 8015edc:	462f      	mov	r7, r5
 8015ede:	2000      	movs	r0, #0
 8015ee0:	250a      	movs	r5, #10
 8015ee2:	4639      	mov	r1, r7
 8015ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ee8:	3b30      	subs	r3, #48	; 0x30
 8015eea:	2b09      	cmp	r3, #9
 8015eec:	d94d      	bls.n	8015f8a <_svfiprintf_r+0x16e>
 8015eee:	b1b8      	cbz	r0, 8015f20 <_svfiprintf_r+0x104>
 8015ef0:	e00f      	b.n	8015f12 <_svfiprintf_r+0xf6>
 8015ef2:	462f      	mov	r7, r5
 8015ef4:	e7b8      	b.n	8015e68 <_svfiprintf_r+0x4c>
 8015ef6:	4a40      	ldr	r2, [pc, #256]	; (8015ff8 <_svfiprintf_r+0x1dc>)
 8015ef8:	1a80      	subs	r0, r0, r2
 8015efa:	fa0b f000 	lsl.w	r0, fp, r0
 8015efe:	4318      	orrs	r0, r3
 8015f00:	9004      	str	r0, [sp, #16]
 8015f02:	463d      	mov	r5, r7
 8015f04:	e7d3      	b.n	8015eae <_svfiprintf_r+0x92>
 8015f06:	9a03      	ldr	r2, [sp, #12]
 8015f08:	1d11      	adds	r1, r2, #4
 8015f0a:	6812      	ldr	r2, [r2, #0]
 8015f0c:	9103      	str	r1, [sp, #12]
 8015f0e:	2a00      	cmp	r2, #0
 8015f10:	db01      	blt.n	8015f16 <_svfiprintf_r+0xfa>
 8015f12:	9207      	str	r2, [sp, #28]
 8015f14:	e004      	b.n	8015f20 <_svfiprintf_r+0x104>
 8015f16:	4252      	negs	r2, r2
 8015f18:	f043 0302 	orr.w	r3, r3, #2
 8015f1c:	9207      	str	r2, [sp, #28]
 8015f1e:	9304      	str	r3, [sp, #16]
 8015f20:	783b      	ldrb	r3, [r7, #0]
 8015f22:	2b2e      	cmp	r3, #46	; 0x2e
 8015f24:	d10c      	bne.n	8015f40 <_svfiprintf_r+0x124>
 8015f26:	787b      	ldrb	r3, [r7, #1]
 8015f28:	2b2a      	cmp	r3, #42	; 0x2a
 8015f2a:	d133      	bne.n	8015f94 <_svfiprintf_r+0x178>
 8015f2c:	9b03      	ldr	r3, [sp, #12]
 8015f2e:	1d1a      	adds	r2, r3, #4
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	9203      	str	r2, [sp, #12]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	bfb8      	it	lt
 8015f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8015f3c:	3702      	adds	r7, #2
 8015f3e:	9305      	str	r3, [sp, #20]
 8015f40:	4d2e      	ldr	r5, [pc, #184]	; (8015ffc <_svfiprintf_r+0x1e0>)
 8015f42:	7839      	ldrb	r1, [r7, #0]
 8015f44:	2203      	movs	r2, #3
 8015f46:	4628      	mov	r0, r5
 8015f48:	f7ea f9d2 	bl	80002f0 <memchr>
 8015f4c:	b138      	cbz	r0, 8015f5e <_svfiprintf_r+0x142>
 8015f4e:	2340      	movs	r3, #64	; 0x40
 8015f50:	1b40      	subs	r0, r0, r5
 8015f52:	fa03 f000 	lsl.w	r0, r3, r0
 8015f56:	9b04      	ldr	r3, [sp, #16]
 8015f58:	4303      	orrs	r3, r0
 8015f5a:	3701      	adds	r7, #1
 8015f5c:	9304      	str	r3, [sp, #16]
 8015f5e:	7839      	ldrb	r1, [r7, #0]
 8015f60:	4827      	ldr	r0, [pc, #156]	; (8016000 <_svfiprintf_r+0x1e4>)
 8015f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f66:	2206      	movs	r2, #6
 8015f68:	1c7e      	adds	r6, r7, #1
 8015f6a:	f7ea f9c1 	bl	80002f0 <memchr>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	d038      	beq.n	8015fe4 <_svfiprintf_r+0x1c8>
 8015f72:	4b24      	ldr	r3, [pc, #144]	; (8016004 <_svfiprintf_r+0x1e8>)
 8015f74:	bb13      	cbnz	r3, 8015fbc <_svfiprintf_r+0x1a0>
 8015f76:	9b03      	ldr	r3, [sp, #12]
 8015f78:	3307      	adds	r3, #7
 8015f7a:	f023 0307 	bic.w	r3, r3, #7
 8015f7e:	3308      	adds	r3, #8
 8015f80:	9303      	str	r3, [sp, #12]
 8015f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f84:	444b      	add	r3, r9
 8015f86:	9309      	str	r3, [sp, #36]	; 0x24
 8015f88:	e76d      	b.n	8015e66 <_svfiprintf_r+0x4a>
 8015f8a:	fb05 3202 	mla	r2, r5, r2, r3
 8015f8e:	2001      	movs	r0, #1
 8015f90:	460f      	mov	r7, r1
 8015f92:	e7a6      	b.n	8015ee2 <_svfiprintf_r+0xc6>
 8015f94:	2300      	movs	r3, #0
 8015f96:	3701      	adds	r7, #1
 8015f98:	9305      	str	r3, [sp, #20]
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	250a      	movs	r5, #10
 8015f9e:	4638      	mov	r0, r7
 8015fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fa4:	3a30      	subs	r2, #48	; 0x30
 8015fa6:	2a09      	cmp	r2, #9
 8015fa8:	d903      	bls.n	8015fb2 <_svfiprintf_r+0x196>
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d0c8      	beq.n	8015f40 <_svfiprintf_r+0x124>
 8015fae:	9105      	str	r1, [sp, #20]
 8015fb0:	e7c6      	b.n	8015f40 <_svfiprintf_r+0x124>
 8015fb2:	fb05 2101 	mla	r1, r5, r1, r2
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	4607      	mov	r7, r0
 8015fba:	e7f0      	b.n	8015f9e <_svfiprintf_r+0x182>
 8015fbc:	ab03      	add	r3, sp, #12
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	4622      	mov	r2, r4
 8015fc2:	4b11      	ldr	r3, [pc, #68]	; (8016008 <_svfiprintf_r+0x1ec>)
 8015fc4:	a904      	add	r1, sp, #16
 8015fc6:	4640      	mov	r0, r8
 8015fc8:	f3af 8000 	nop.w
 8015fcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015fd0:	4681      	mov	r9, r0
 8015fd2:	d1d6      	bne.n	8015f82 <_svfiprintf_r+0x166>
 8015fd4:	89a3      	ldrh	r3, [r4, #12]
 8015fd6:	065b      	lsls	r3, r3, #25
 8015fd8:	f53f af35 	bmi.w	8015e46 <_svfiprintf_r+0x2a>
 8015fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fde:	b01d      	add	sp, #116	; 0x74
 8015fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fe4:	ab03      	add	r3, sp, #12
 8015fe6:	9300      	str	r3, [sp, #0]
 8015fe8:	4622      	mov	r2, r4
 8015fea:	4b07      	ldr	r3, [pc, #28]	; (8016008 <_svfiprintf_r+0x1ec>)
 8015fec:	a904      	add	r1, sp, #16
 8015fee:	4640      	mov	r0, r8
 8015ff0:	f000 f9c2 	bl	8016378 <_printf_i>
 8015ff4:	e7ea      	b.n	8015fcc <_svfiprintf_r+0x1b0>
 8015ff6:	bf00      	nop
 8015ff8:	08016b44 	.word	0x08016b44
 8015ffc:	08016b4a 	.word	0x08016b4a
 8016000:	08016b4e 	.word	0x08016b4e
 8016004:	00000000 	.word	0x00000000
 8016008:	08015d69 	.word	0x08015d69

0801600c <__sfputc_r>:
 801600c:	6893      	ldr	r3, [r2, #8]
 801600e:	3b01      	subs	r3, #1
 8016010:	2b00      	cmp	r3, #0
 8016012:	b410      	push	{r4}
 8016014:	6093      	str	r3, [r2, #8]
 8016016:	da08      	bge.n	801602a <__sfputc_r+0x1e>
 8016018:	6994      	ldr	r4, [r2, #24]
 801601a:	42a3      	cmp	r3, r4
 801601c:	db01      	blt.n	8016022 <__sfputc_r+0x16>
 801601e:	290a      	cmp	r1, #10
 8016020:	d103      	bne.n	801602a <__sfputc_r+0x1e>
 8016022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016026:	f7ff bbff 	b.w	8015828 <__swbuf_r>
 801602a:	6813      	ldr	r3, [r2, #0]
 801602c:	1c58      	adds	r0, r3, #1
 801602e:	6010      	str	r0, [r2, #0]
 8016030:	7019      	strb	r1, [r3, #0]
 8016032:	4608      	mov	r0, r1
 8016034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016038:	4770      	bx	lr

0801603a <__sfputs_r>:
 801603a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801603c:	4606      	mov	r6, r0
 801603e:	460f      	mov	r7, r1
 8016040:	4614      	mov	r4, r2
 8016042:	18d5      	adds	r5, r2, r3
 8016044:	42ac      	cmp	r4, r5
 8016046:	d101      	bne.n	801604c <__sfputs_r+0x12>
 8016048:	2000      	movs	r0, #0
 801604a:	e007      	b.n	801605c <__sfputs_r+0x22>
 801604c:	463a      	mov	r2, r7
 801604e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016052:	4630      	mov	r0, r6
 8016054:	f7ff ffda 	bl	801600c <__sfputc_r>
 8016058:	1c43      	adds	r3, r0, #1
 801605a:	d1f3      	bne.n	8016044 <__sfputs_r+0xa>
 801605c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016060 <_vfiprintf_r>:
 8016060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016064:	460c      	mov	r4, r1
 8016066:	b09d      	sub	sp, #116	; 0x74
 8016068:	4617      	mov	r7, r2
 801606a:	461d      	mov	r5, r3
 801606c:	4606      	mov	r6, r0
 801606e:	b118      	cbz	r0, 8016078 <_vfiprintf_r+0x18>
 8016070:	6983      	ldr	r3, [r0, #24]
 8016072:	b90b      	cbnz	r3, 8016078 <_vfiprintf_r+0x18>
 8016074:	f7ff fd88 	bl	8015b88 <__sinit>
 8016078:	4b7c      	ldr	r3, [pc, #496]	; (801626c <_vfiprintf_r+0x20c>)
 801607a:	429c      	cmp	r4, r3
 801607c:	d158      	bne.n	8016130 <_vfiprintf_r+0xd0>
 801607e:	6874      	ldr	r4, [r6, #4]
 8016080:	89a3      	ldrh	r3, [r4, #12]
 8016082:	0718      	lsls	r0, r3, #28
 8016084:	d55e      	bpl.n	8016144 <_vfiprintf_r+0xe4>
 8016086:	6923      	ldr	r3, [r4, #16]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d05b      	beq.n	8016144 <_vfiprintf_r+0xe4>
 801608c:	2300      	movs	r3, #0
 801608e:	9309      	str	r3, [sp, #36]	; 0x24
 8016090:	2320      	movs	r3, #32
 8016092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016096:	2330      	movs	r3, #48	; 0x30
 8016098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801609c:	9503      	str	r5, [sp, #12]
 801609e:	f04f 0b01 	mov.w	fp, #1
 80160a2:	46b8      	mov	r8, r7
 80160a4:	4645      	mov	r5, r8
 80160a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80160aa:	b10b      	cbz	r3, 80160b0 <_vfiprintf_r+0x50>
 80160ac:	2b25      	cmp	r3, #37	; 0x25
 80160ae:	d154      	bne.n	801615a <_vfiprintf_r+0xfa>
 80160b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80160b4:	d00b      	beq.n	80160ce <_vfiprintf_r+0x6e>
 80160b6:	4653      	mov	r3, sl
 80160b8:	463a      	mov	r2, r7
 80160ba:	4621      	mov	r1, r4
 80160bc:	4630      	mov	r0, r6
 80160be:	f7ff ffbc 	bl	801603a <__sfputs_r>
 80160c2:	3001      	adds	r0, #1
 80160c4:	f000 80c2 	beq.w	801624c <_vfiprintf_r+0x1ec>
 80160c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160ca:	4453      	add	r3, sl
 80160cc:	9309      	str	r3, [sp, #36]	; 0x24
 80160ce:	f898 3000 	ldrb.w	r3, [r8]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	f000 80ba 	beq.w	801624c <_vfiprintf_r+0x1ec>
 80160d8:	2300      	movs	r3, #0
 80160da:	f04f 32ff 	mov.w	r2, #4294967295
 80160de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80160e2:	9304      	str	r3, [sp, #16]
 80160e4:	9307      	str	r3, [sp, #28]
 80160e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80160ea:	931a      	str	r3, [sp, #104]	; 0x68
 80160ec:	46a8      	mov	r8, r5
 80160ee:	2205      	movs	r2, #5
 80160f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80160f4:	485e      	ldr	r0, [pc, #376]	; (8016270 <_vfiprintf_r+0x210>)
 80160f6:	f7ea f8fb 	bl	80002f0 <memchr>
 80160fa:	9b04      	ldr	r3, [sp, #16]
 80160fc:	bb78      	cbnz	r0, 801615e <_vfiprintf_r+0xfe>
 80160fe:	06d9      	lsls	r1, r3, #27
 8016100:	bf44      	itt	mi
 8016102:	2220      	movmi	r2, #32
 8016104:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016108:	071a      	lsls	r2, r3, #28
 801610a:	bf44      	itt	mi
 801610c:	222b      	movmi	r2, #43	; 0x2b
 801610e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016112:	782a      	ldrb	r2, [r5, #0]
 8016114:	2a2a      	cmp	r2, #42	; 0x2a
 8016116:	d02a      	beq.n	801616e <_vfiprintf_r+0x10e>
 8016118:	9a07      	ldr	r2, [sp, #28]
 801611a:	46a8      	mov	r8, r5
 801611c:	2000      	movs	r0, #0
 801611e:	250a      	movs	r5, #10
 8016120:	4641      	mov	r1, r8
 8016122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016126:	3b30      	subs	r3, #48	; 0x30
 8016128:	2b09      	cmp	r3, #9
 801612a:	d969      	bls.n	8016200 <_vfiprintf_r+0x1a0>
 801612c:	b360      	cbz	r0, 8016188 <_vfiprintf_r+0x128>
 801612e:	e024      	b.n	801617a <_vfiprintf_r+0x11a>
 8016130:	4b50      	ldr	r3, [pc, #320]	; (8016274 <_vfiprintf_r+0x214>)
 8016132:	429c      	cmp	r4, r3
 8016134:	d101      	bne.n	801613a <_vfiprintf_r+0xda>
 8016136:	68b4      	ldr	r4, [r6, #8]
 8016138:	e7a2      	b.n	8016080 <_vfiprintf_r+0x20>
 801613a:	4b4f      	ldr	r3, [pc, #316]	; (8016278 <_vfiprintf_r+0x218>)
 801613c:	429c      	cmp	r4, r3
 801613e:	bf08      	it	eq
 8016140:	68f4      	ldreq	r4, [r6, #12]
 8016142:	e79d      	b.n	8016080 <_vfiprintf_r+0x20>
 8016144:	4621      	mov	r1, r4
 8016146:	4630      	mov	r0, r6
 8016148:	f7ff fbc0 	bl	80158cc <__swsetup_r>
 801614c:	2800      	cmp	r0, #0
 801614e:	d09d      	beq.n	801608c <_vfiprintf_r+0x2c>
 8016150:	f04f 30ff 	mov.w	r0, #4294967295
 8016154:	b01d      	add	sp, #116	; 0x74
 8016156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801615a:	46a8      	mov	r8, r5
 801615c:	e7a2      	b.n	80160a4 <_vfiprintf_r+0x44>
 801615e:	4a44      	ldr	r2, [pc, #272]	; (8016270 <_vfiprintf_r+0x210>)
 8016160:	1a80      	subs	r0, r0, r2
 8016162:	fa0b f000 	lsl.w	r0, fp, r0
 8016166:	4318      	orrs	r0, r3
 8016168:	9004      	str	r0, [sp, #16]
 801616a:	4645      	mov	r5, r8
 801616c:	e7be      	b.n	80160ec <_vfiprintf_r+0x8c>
 801616e:	9a03      	ldr	r2, [sp, #12]
 8016170:	1d11      	adds	r1, r2, #4
 8016172:	6812      	ldr	r2, [r2, #0]
 8016174:	9103      	str	r1, [sp, #12]
 8016176:	2a00      	cmp	r2, #0
 8016178:	db01      	blt.n	801617e <_vfiprintf_r+0x11e>
 801617a:	9207      	str	r2, [sp, #28]
 801617c:	e004      	b.n	8016188 <_vfiprintf_r+0x128>
 801617e:	4252      	negs	r2, r2
 8016180:	f043 0302 	orr.w	r3, r3, #2
 8016184:	9207      	str	r2, [sp, #28]
 8016186:	9304      	str	r3, [sp, #16]
 8016188:	f898 3000 	ldrb.w	r3, [r8]
 801618c:	2b2e      	cmp	r3, #46	; 0x2e
 801618e:	d10e      	bne.n	80161ae <_vfiprintf_r+0x14e>
 8016190:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016194:	2b2a      	cmp	r3, #42	; 0x2a
 8016196:	d138      	bne.n	801620a <_vfiprintf_r+0x1aa>
 8016198:	9b03      	ldr	r3, [sp, #12]
 801619a:	1d1a      	adds	r2, r3, #4
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	9203      	str	r2, [sp, #12]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	bfb8      	it	lt
 80161a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80161a8:	f108 0802 	add.w	r8, r8, #2
 80161ac:	9305      	str	r3, [sp, #20]
 80161ae:	4d33      	ldr	r5, [pc, #204]	; (801627c <_vfiprintf_r+0x21c>)
 80161b0:	f898 1000 	ldrb.w	r1, [r8]
 80161b4:	2203      	movs	r2, #3
 80161b6:	4628      	mov	r0, r5
 80161b8:	f7ea f89a 	bl	80002f0 <memchr>
 80161bc:	b140      	cbz	r0, 80161d0 <_vfiprintf_r+0x170>
 80161be:	2340      	movs	r3, #64	; 0x40
 80161c0:	1b40      	subs	r0, r0, r5
 80161c2:	fa03 f000 	lsl.w	r0, r3, r0
 80161c6:	9b04      	ldr	r3, [sp, #16]
 80161c8:	4303      	orrs	r3, r0
 80161ca:	f108 0801 	add.w	r8, r8, #1
 80161ce:	9304      	str	r3, [sp, #16]
 80161d0:	f898 1000 	ldrb.w	r1, [r8]
 80161d4:	482a      	ldr	r0, [pc, #168]	; (8016280 <_vfiprintf_r+0x220>)
 80161d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161da:	2206      	movs	r2, #6
 80161dc:	f108 0701 	add.w	r7, r8, #1
 80161e0:	f7ea f886 	bl	80002f0 <memchr>
 80161e4:	2800      	cmp	r0, #0
 80161e6:	d037      	beq.n	8016258 <_vfiprintf_r+0x1f8>
 80161e8:	4b26      	ldr	r3, [pc, #152]	; (8016284 <_vfiprintf_r+0x224>)
 80161ea:	bb1b      	cbnz	r3, 8016234 <_vfiprintf_r+0x1d4>
 80161ec:	9b03      	ldr	r3, [sp, #12]
 80161ee:	3307      	adds	r3, #7
 80161f0:	f023 0307 	bic.w	r3, r3, #7
 80161f4:	3308      	adds	r3, #8
 80161f6:	9303      	str	r3, [sp, #12]
 80161f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161fa:	444b      	add	r3, r9
 80161fc:	9309      	str	r3, [sp, #36]	; 0x24
 80161fe:	e750      	b.n	80160a2 <_vfiprintf_r+0x42>
 8016200:	fb05 3202 	mla	r2, r5, r2, r3
 8016204:	2001      	movs	r0, #1
 8016206:	4688      	mov	r8, r1
 8016208:	e78a      	b.n	8016120 <_vfiprintf_r+0xc0>
 801620a:	2300      	movs	r3, #0
 801620c:	f108 0801 	add.w	r8, r8, #1
 8016210:	9305      	str	r3, [sp, #20]
 8016212:	4619      	mov	r1, r3
 8016214:	250a      	movs	r5, #10
 8016216:	4640      	mov	r0, r8
 8016218:	f810 2b01 	ldrb.w	r2, [r0], #1
 801621c:	3a30      	subs	r2, #48	; 0x30
 801621e:	2a09      	cmp	r2, #9
 8016220:	d903      	bls.n	801622a <_vfiprintf_r+0x1ca>
 8016222:	2b00      	cmp	r3, #0
 8016224:	d0c3      	beq.n	80161ae <_vfiprintf_r+0x14e>
 8016226:	9105      	str	r1, [sp, #20]
 8016228:	e7c1      	b.n	80161ae <_vfiprintf_r+0x14e>
 801622a:	fb05 2101 	mla	r1, r5, r1, r2
 801622e:	2301      	movs	r3, #1
 8016230:	4680      	mov	r8, r0
 8016232:	e7f0      	b.n	8016216 <_vfiprintf_r+0x1b6>
 8016234:	ab03      	add	r3, sp, #12
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	4622      	mov	r2, r4
 801623a:	4b13      	ldr	r3, [pc, #76]	; (8016288 <_vfiprintf_r+0x228>)
 801623c:	a904      	add	r1, sp, #16
 801623e:	4630      	mov	r0, r6
 8016240:	f3af 8000 	nop.w
 8016244:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016248:	4681      	mov	r9, r0
 801624a:	d1d5      	bne.n	80161f8 <_vfiprintf_r+0x198>
 801624c:	89a3      	ldrh	r3, [r4, #12]
 801624e:	065b      	lsls	r3, r3, #25
 8016250:	f53f af7e 	bmi.w	8016150 <_vfiprintf_r+0xf0>
 8016254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016256:	e77d      	b.n	8016154 <_vfiprintf_r+0xf4>
 8016258:	ab03      	add	r3, sp, #12
 801625a:	9300      	str	r3, [sp, #0]
 801625c:	4622      	mov	r2, r4
 801625e:	4b0a      	ldr	r3, [pc, #40]	; (8016288 <_vfiprintf_r+0x228>)
 8016260:	a904      	add	r1, sp, #16
 8016262:	4630      	mov	r0, r6
 8016264:	f000 f888 	bl	8016378 <_printf_i>
 8016268:	e7ec      	b.n	8016244 <_vfiprintf_r+0x1e4>
 801626a:	bf00      	nop
 801626c:	08016b04 	.word	0x08016b04
 8016270:	08016b44 	.word	0x08016b44
 8016274:	08016b24 	.word	0x08016b24
 8016278:	08016ae4 	.word	0x08016ae4
 801627c:	08016b4a 	.word	0x08016b4a
 8016280:	08016b4e 	.word	0x08016b4e
 8016284:	00000000 	.word	0x00000000
 8016288:	0801603b 	.word	0x0801603b

0801628c <_printf_common>:
 801628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016290:	4691      	mov	r9, r2
 8016292:	461f      	mov	r7, r3
 8016294:	688a      	ldr	r2, [r1, #8]
 8016296:	690b      	ldr	r3, [r1, #16]
 8016298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801629c:	4293      	cmp	r3, r2
 801629e:	bfb8      	it	lt
 80162a0:	4613      	movlt	r3, r2
 80162a2:	f8c9 3000 	str.w	r3, [r9]
 80162a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80162aa:	4606      	mov	r6, r0
 80162ac:	460c      	mov	r4, r1
 80162ae:	b112      	cbz	r2, 80162b6 <_printf_common+0x2a>
 80162b0:	3301      	adds	r3, #1
 80162b2:	f8c9 3000 	str.w	r3, [r9]
 80162b6:	6823      	ldr	r3, [r4, #0]
 80162b8:	0699      	lsls	r1, r3, #26
 80162ba:	bf42      	ittt	mi
 80162bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80162c0:	3302      	addmi	r3, #2
 80162c2:	f8c9 3000 	strmi.w	r3, [r9]
 80162c6:	6825      	ldr	r5, [r4, #0]
 80162c8:	f015 0506 	ands.w	r5, r5, #6
 80162cc:	d107      	bne.n	80162de <_printf_common+0x52>
 80162ce:	f104 0a19 	add.w	sl, r4, #25
 80162d2:	68e3      	ldr	r3, [r4, #12]
 80162d4:	f8d9 2000 	ldr.w	r2, [r9]
 80162d8:	1a9b      	subs	r3, r3, r2
 80162da:	42ab      	cmp	r3, r5
 80162dc:	dc28      	bgt.n	8016330 <_printf_common+0xa4>
 80162de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80162e2:	6822      	ldr	r2, [r4, #0]
 80162e4:	3300      	adds	r3, #0
 80162e6:	bf18      	it	ne
 80162e8:	2301      	movne	r3, #1
 80162ea:	0692      	lsls	r2, r2, #26
 80162ec:	d42d      	bmi.n	801634a <_printf_common+0xbe>
 80162ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80162f2:	4639      	mov	r1, r7
 80162f4:	4630      	mov	r0, r6
 80162f6:	47c0      	blx	r8
 80162f8:	3001      	adds	r0, #1
 80162fa:	d020      	beq.n	801633e <_printf_common+0xb2>
 80162fc:	6823      	ldr	r3, [r4, #0]
 80162fe:	68e5      	ldr	r5, [r4, #12]
 8016300:	f8d9 2000 	ldr.w	r2, [r9]
 8016304:	f003 0306 	and.w	r3, r3, #6
 8016308:	2b04      	cmp	r3, #4
 801630a:	bf08      	it	eq
 801630c:	1aad      	subeq	r5, r5, r2
 801630e:	68a3      	ldr	r3, [r4, #8]
 8016310:	6922      	ldr	r2, [r4, #16]
 8016312:	bf0c      	ite	eq
 8016314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016318:	2500      	movne	r5, #0
 801631a:	4293      	cmp	r3, r2
 801631c:	bfc4      	itt	gt
 801631e:	1a9b      	subgt	r3, r3, r2
 8016320:	18ed      	addgt	r5, r5, r3
 8016322:	f04f 0900 	mov.w	r9, #0
 8016326:	341a      	adds	r4, #26
 8016328:	454d      	cmp	r5, r9
 801632a:	d11a      	bne.n	8016362 <_printf_common+0xd6>
 801632c:	2000      	movs	r0, #0
 801632e:	e008      	b.n	8016342 <_printf_common+0xb6>
 8016330:	2301      	movs	r3, #1
 8016332:	4652      	mov	r2, sl
 8016334:	4639      	mov	r1, r7
 8016336:	4630      	mov	r0, r6
 8016338:	47c0      	blx	r8
 801633a:	3001      	adds	r0, #1
 801633c:	d103      	bne.n	8016346 <_printf_common+0xba>
 801633e:	f04f 30ff 	mov.w	r0, #4294967295
 8016342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016346:	3501      	adds	r5, #1
 8016348:	e7c3      	b.n	80162d2 <_printf_common+0x46>
 801634a:	18e1      	adds	r1, r4, r3
 801634c:	1c5a      	adds	r2, r3, #1
 801634e:	2030      	movs	r0, #48	; 0x30
 8016350:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016354:	4422      	add	r2, r4
 8016356:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801635a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801635e:	3302      	adds	r3, #2
 8016360:	e7c5      	b.n	80162ee <_printf_common+0x62>
 8016362:	2301      	movs	r3, #1
 8016364:	4622      	mov	r2, r4
 8016366:	4639      	mov	r1, r7
 8016368:	4630      	mov	r0, r6
 801636a:	47c0      	blx	r8
 801636c:	3001      	adds	r0, #1
 801636e:	d0e6      	beq.n	801633e <_printf_common+0xb2>
 8016370:	f109 0901 	add.w	r9, r9, #1
 8016374:	e7d8      	b.n	8016328 <_printf_common+0x9c>
	...

08016378 <_printf_i>:
 8016378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801637c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016380:	460c      	mov	r4, r1
 8016382:	7e09      	ldrb	r1, [r1, #24]
 8016384:	b085      	sub	sp, #20
 8016386:	296e      	cmp	r1, #110	; 0x6e
 8016388:	4617      	mov	r7, r2
 801638a:	4606      	mov	r6, r0
 801638c:	4698      	mov	r8, r3
 801638e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016390:	f000 80b3 	beq.w	80164fa <_printf_i+0x182>
 8016394:	d822      	bhi.n	80163dc <_printf_i+0x64>
 8016396:	2963      	cmp	r1, #99	; 0x63
 8016398:	d036      	beq.n	8016408 <_printf_i+0x90>
 801639a:	d80a      	bhi.n	80163b2 <_printf_i+0x3a>
 801639c:	2900      	cmp	r1, #0
 801639e:	f000 80b9 	beq.w	8016514 <_printf_i+0x19c>
 80163a2:	2958      	cmp	r1, #88	; 0x58
 80163a4:	f000 8083 	beq.w	80164ae <_printf_i+0x136>
 80163a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80163ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80163b0:	e032      	b.n	8016418 <_printf_i+0xa0>
 80163b2:	2964      	cmp	r1, #100	; 0x64
 80163b4:	d001      	beq.n	80163ba <_printf_i+0x42>
 80163b6:	2969      	cmp	r1, #105	; 0x69
 80163b8:	d1f6      	bne.n	80163a8 <_printf_i+0x30>
 80163ba:	6820      	ldr	r0, [r4, #0]
 80163bc:	6813      	ldr	r3, [r2, #0]
 80163be:	0605      	lsls	r5, r0, #24
 80163c0:	f103 0104 	add.w	r1, r3, #4
 80163c4:	d52a      	bpl.n	801641c <_printf_i+0xa4>
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	6011      	str	r1, [r2, #0]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	da03      	bge.n	80163d6 <_printf_i+0x5e>
 80163ce:	222d      	movs	r2, #45	; 0x2d
 80163d0:	425b      	negs	r3, r3
 80163d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80163d6:	486f      	ldr	r0, [pc, #444]	; (8016594 <_printf_i+0x21c>)
 80163d8:	220a      	movs	r2, #10
 80163da:	e039      	b.n	8016450 <_printf_i+0xd8>
 80163dc:	2973      	cmp	r1, #115	; 0x73
 80163de:	f000 809d 	beq.w	801651c <_printf_i+0x1a4>
 80163e2:	d808      	bhi.n	80163f6 <_printf_i+0x7e>
 80163e4:	296f      	cmp	r1, #111	; 0x6f
 80163e6:	d020      	beq.n	801642a <_printf_i+0xb2>
 80163e8:	2970      	cmp	r1, #112	; 0x70
 80163ea:	d1dd      	bne.n	80163a8 <_printf_i+0x30>
 80163ec:	6823      	ldr	r3, [r4, #0]
 80163ee:	f043 0320 	orr.w	r3, r3, #32
 80163f2:	6023      	str	r3, [r4, #0]
 80163f4:	e003      	b.n	80163fe <_printf_i+0x86>
 80163f6:	2975      	cmp	r1, #117	; 0x75
 80163f8:	d017      	beq.n	801642a <_printf_i+0xb2>
 80163fa:	2978      	cmp	r1, #120	; 0x78
 80163fc:	d1d4      	bne.n	80163a8 <_printf_i+0x30>
 80163fe:	2378      	movs	r3, #120	; 0x78
 8016400:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016404:	4864      	ldr	r0, [pc, #400]	; (8016598 <_printf_i+0x220>)
 8016406:	e055      	b.n	80164b4 <_printf_i+0x13c>
 8016408:	6813      	ldr	r3, [r2, #0]
 801640a:	1d19      	adds	r1, r3, #4
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	6011      	str	r1, [r2, #0]
 8016410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016418:	2301      	movs	r3, #1
 801641a:	e08c      	b.n	8016536 <_printf_i+0x1be>
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	6011      	str	r1, [r2, #0]
 8016420:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016424:	bf18      	it	ne
 8016426:	b21b      	sxthne	r3, r3
 8016428:	e7cf      	b.n	80163ca <_printf_i+0x52>
 801642a:	6813      	ldr	r3, [r2, #0]
 801642c:	6825      	ldr	r5, [r4, #0]
 801642e:	1d18      	adds	r0, r3, #4
 8016430:	6010      	str	r0, [r2, #0]
 8016432:	0628      	lsls	r0, r5, #24
 8016434:	d501      	bpl.n	801643a <_printf_i+0xc2>
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	e002      	b.n	8016440 <_printf_i+0xc8>
 801643a:	0668      	lsls	r0, r5, #25
 801643c:	d5fb      	bpl.n	8016436 <_printf_i+0xbe>
 801643e:	881b      	ldrh	r3, [r3, #0]
 8016440:	4854      	ldr	r0, [pc, #336]	; (8016594 <_printf_i+0x21c>)
 8016442:	296f      	cmp	r1, #111	; 0x6f
 8016444:	bf14      	ite	ne
 8016446:	220a      	movne	r2, #10
 8016448:	2208      	moveq	r2, #8
 801644a:	2100      	movs	r1, #0
 801644c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016450:	6865      	ldr	r5, [r4, #4]
 8016452:	60a5      	str	r5, [r4, #8]
 8016454:	2d00      	cmp	r5, #0
 8016456:	f2c0 8095 	blt.w	8016584 <_printf_i+0x20c>
 801645a:	6821      	ldr	r1, [r4, #0]
 801645c:	f021 0104 	bic.w	r1, r1, #4
 8016460:	6021      	str	r1, [r4, #0]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d13d      	bne.n	80164e2 <_printf_i+0x16a>
 8016466:	2d00      	cmp	r5, #0
 8016468:	f040 808e 	bne.w	8016588 <_printf_i+0x210>
 801646c:	4665      	mov	r5, ip
 801646e:	2a08      	cmp	r2, #8
 8016470:	d10b      	bne.n	801648a <_printf_i+0x112>
 8016472:	6823      	ldr	r3, [r4, #0]
 8016474:	07db      	lsls	r3, r3, #31
 8016476:	d508      	bpl.n	801648a <_printf_i+0x112>
 8016478:	6923      	ldr	r3, [r4, #16]
 801647a:	6862      	ldr	r2, [r4, #4]
 801647c:	429a      	cmp	r2, r3
 801647e:	bfde      	ittt	le
 8016480:	2330      	movle	r3, #48	; 0x30
 8016482:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016486:	f105 35ff 	addle.w	r5, r5, #4294967295
 801648a:	ebac 0305 	sub.w	r3, ip, r5
 801648e:	6123      	str	r3, [r4, #16]
 8016490:	f8cd 8000 	str.w	r8, [sp]
 8016494:	463b      	mov	r3, r7
 8016496:	aa03      	add	r2, sp, #12
 8016498:	4621      	mov	r1, r4
 801649a:	4630      	mov	r0, r6
 801649c:	f7ff fef6 	bl	801628c <_printf_common>
 80164a0:	3001      	adds	r0, #1
 80164a2:	d14d      	bne.n	8016540 <_printf_i+0x1c8>
 80164a4:	f04f 30ff 	mov.w	r0, #4294967295
 80164a8:	b005      	add	sp, #20
 80164aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164ae:	4839      	ldr	r0, [pc, #228]	; (8016594 <_printf_i+0x21c>)
 80164b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80164b4:	6813      	ldr	r3, [r2, #0]
 80164b6:	6821      	ldr	r1, [r4, #0]
 80164b8:	1d1d      	adds	r5, r3, #4
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	6015      	str	r5, [r2, #0]
 80164be:	060a      	lsls	r2, r1, #24
 80164c0:	d50b      	bpl.n	80164da <_printf_i+0x162>
 80164c2:	07ca      	lsls	r2, r1, #31
 80164c4:	bf44      	itt	mi
 80164c6:	f041 0120 	orrmi.w	r1, r1, #32
 80164ca:	6021      	strmi	r1, [r4, #0]
 80164cc:	b91b      	cbnz	r3, 80164d6 <_printf_i+0x15e>
 80164ce:	6822      	ldr	r2, [r4, #0]
 80164d0:	f022 0220 	bic.w	r2, r2, #32
 80164d4:	6022      	str	r2, [r4, #0]
 80164d6:	2210      	movs	r2, #16
 80164d8:	e7b7      	b.n	801644a <_printf_i+0xd2>
 80164da:	064d      	lsls	r5, r1, #25
 80164dc:	bf48      	it	mi
 80164de:	b29b      	uxthmi	r3, r3
 80164e0:	e7ef      	b.n	80164c2 <_printf_i+0x14a>
 80164e2:	4665      	mov	r5, ip
 80164e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80164e8:	fb02 3311 	mls	r3, r2, r1, r3
 80164ec:	5cc3      	ldrb	r3, [r0, r3]
 80164ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80164f2:	460b      	mov	r3, r1
 80164f4:	2900      	cmp	r1, #0
 80164f6:	d1f5      	bne.n	80164e4 <_printf_i+0x16c>
 80164f8:	e7b9      	b.n	801646e <_printf_i+0xf6>
 80164fa:	6813      	ldr	r3, [r2, #0]
 80164fc:	6825      	ldr	r5, [r4, #0]
 80164fe:	6961      	ldr	r1, [r4, #20]
 8016500:	1d18      	adds	r0, r3, #4
 8016502:	6010      	str	r0, [r2, #0]
 8016504:	0628      	lsls	r0, r5, #24
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	d501      	bpl.n	801650e <_printf_i+0x196>
 801650a:	6019      	str	r1, [r3, #0]
 801650c:	e002      	b.n	8016514 <_printf_i+0x19c>
 801650e:	066a      	lsls	r2, r5, #25
 8016510:	d5fb      	bpl.n	801650a <_printf_i+0x192>
 8016512:	8019      	strh	r1, [r3, #0]
 8016514:	2300      	movs	r3, #0
 8016516:	6123      	str	r3, [r4, #16]
 8016518:	4665      	mov	r5, ip
 801651a:	e7b9      	b.n	8016490 <_printf_i+0x118>
 801651c:	6813      	ldr	r3, [r2, #0]
 801651e:	1d19      	adds	r1, r3, #4
 8016520:	6011      	str	r1, [r2, #0]
 8016522:	681d      	ldr	r5, [r3, #0]
 8016524:	6862      	ldr	r2, [r4, #4]
 8016526:	2100      	movs	r1, #0
 8016528:	4628      	mov	r0, r5
 801652a:	f7e9 fee1 	bl	80002f0 <memchr>
 801652e:	b108      	cbz	r0, 8016534 <_printf_i+0x1bc>
 8016530:	1b40      	subs	r0, r0, r5
 8016532:	6060      	str	r0, [r4, #4]
 8016534:	6863      	ldr	r3, [r4, #4]
 8016536:	6123      	str	r3, [r4, #16]
 8016538:	2300      	movs	r3, #0
 801653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801653e:	e7a7      	b.n	8016490 <_printf_i+0x118>
 8016540:	6923      	ldr	r3, [r4, #16]
 8016542:	462a      	mov	r2, r5
 8016544:	4639      	mov	r1, r7
 8016546:	4630      	mov	r0, r6
 8016548:	47c0      	blx	r8
 801654a:	3001      	adds	r0, #1
 801654c:	d0aa      	beq.n	80164a4 <_printf_i+0x12c>
 801654e:	6823      	ldr	r3, [r4, #0]
 8016550:	079b      	lsls	r3, r3, #30
 8016552:	d413      	bmi.n	801657c <_printf_i+0x204>
 8016554:	68e0      	ldr	r0, [r4, #12]
 8016556:	9b03      	ldr	r3, [sp, #12]
 8016558:	4298      	cmp	r0, r3
 801655a:	bfb8      	it	lt
 801655c:	4618      	movlt	r0, r3
 801655e:	e7a3      	b.n	80164a8 <_printf_i+0x130>
 8016560:	2301      	movs	r3, #1
 8016562:	464a      	mov	r2, r9
 8016564:	4639      	mov	r1, r7
 8016566:	4630      	mov	r0, r6
 8016568:	47c0      	blx	r8
 801656a:	3001      	adds	r0, #1
 801656c:	d09a      	beq.n	80164a4 <_printf_i+0x12c>
 801656e:	3501      	adds	r5, #1
 8016570:	68e3      	ldr	r3, [r4, #12]
 8016572:	9a03      	ldr	r2, [sp, #12]
 8016574:	1a9b      	subs	r3, r3, r2
 8016576:	42ab      	cmp	r3, r5
 8016578:	dcf2      	bgt.n	8016560 <_printf_i+0x1e8>
 801657a:	e7eb      	b.n	8016554 <_printf_i+0x1dc>
 801657c:	2500      	movs	r5, #0
 801657e:	f104 0919 	add.w	r9, r4, #25
 8016582:	e7f5      	b.n	8016570 <_printf_i+0x1f8>
 8016584:	2b00      	cmp	r3, #0
 8016586:	d1ac      	bne.n	80164e2 <_printf_i+0x16a>
 8016588:	7803      	ldrb	r3, [r0, #0]
 801658a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801658e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016592:	e76c      	b.n	801646e <_printf_i+0xf6>
 8016594:	08016b55 	.word	0x08016b55
 8016598:	08016b66 	.word	0x08016b66

0801659c <__sread>:
 801659c:	b510      	push	{r4, lr}
 801659e:	460c      	mov	r4, r1
 80165a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165a4:	f000 f8d4 	bl	8016750 <_read_r>
 80165a8:	2800      	cmp	r0, #0
 80165aa:	bfab      	itete	ge
 80165ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80165ae:	89a3      	ldrhlt	r3, [r4, #12]
 80165b0:	181b      	addge	r3, r3, r0
 80165b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80165b6:	bfac      	ite	ge
 80165b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80165ba:	81a3      	strhlt	r3, [r4, #12]
 80165bc:	bd10      	pop	{r4, pc}

080165be <__swrite>:
 80165be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165c2:	461f      	mov	r7, r3
 80165c4:	898b      	ldrh	r3, [r1, #12]
 80165c6:	05db      	lsls	r3, r3, #23
 80165c8:	4605      	mov	r5, r0
 80165ca:	460c      	mov	r4, r1
 80165cc:	4616      	mov	r6, r2
 80165ce:	d505      	bpl.n	80165dc <__swrite+0x1e>
 80165d0:	2302      	movs	r3, #2
 80165d2:	2200      	movs	r2, #0
 80165d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165d8:	f000 f868 	bl	80166ac <_lseek_r>
 80165dc:	89a3      	ldrh	r3, [r4, #12]
 80165de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80165e6:	81a3      	strh	r3, [r4, #12]
 80165e8:	4632      	mov	r2, r6
 80165ea:	463b      	mov	r3, r7
 80165ec:	4628      	mov	r0, r5
 80165ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165f2:	f000 b817 	b.w	8016624 <_write_r>

080165f6 <__sseek>:
 80165f6:	b510      	push	{r4, lr}
 80165f8:	460c      	mov	r4, r1
 80165fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165fe:	f000 f855 	bl	80166ac <_lseek_r>
 8016602:	1c43      	adds	r3, r0, #1
 8016604:	89a3      	ldrh	r3, [r4, #12]
 8016606:	bf15      	itete	ne
 8016608:	6560      	strne	r0, [r4, #84]	; 0x54
 801660a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801660e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016612:	81a3      	strheq	r3, [r4, #12]
 8016614:	bf18      	it	ne
 8016616:	81a3      	strhne	r3, [r4, #12]
 8016618:	bd10      	pop	{r4, pc}

0801661a <__sclose>:
 801661a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801661e:	f000 b813 	b.w	8016648 <_close_r>
	...

08016624 <_write_r>:
 8016624:	b538      	push	{r3, r4, r5, lr}
 8016626:	4c07      	ldr	r4, [pc, #28]	; (8016644 <_write_r+0x20>)
 8016628:	4605      	mov	r5, r0
 801662a:	4608      	mov	r0, r1
 801662c:	4611      	mov	r1, r2
 801662e:	2200      	movs	r2, #0
 8016630:	6022      	str	r2, [r4, #0]
 8016632:	461a      	mov	r2, r3
 8016634:	f7ea f927 	bl	8000886 <_write>
 8016638:	1c43      	adds	r3, r0, #1
 801663a:	d102      	bne.n	8016642 <_write_r+0x1e>
 801663c:	6823      	ldr	r3, [r4, #0]
 801663e:	b103      	cbz	r3, 8016642 <_write_r+0x1e>
 8016640:	602b      	str	r3, [r5, #0]
 8016642:	bd38      	pop	{r3, r4, r5, pc}
 8016644:	24041b00 	.word	0x24041b00

08016648 <_close_r>:
 8016648:	b538      	push	{r3, r4, r5, lr}
 801664a:	4c06      	ldr	r4, [pc, #24]	; (8016664 <_close_r+0x1c>)
 801664c:	2300      	movs	r3, #0
 801664e:	4605      	mov	r5, r0
 8016650:	4608      	mov	r0, r1
 8016652:	6023      	str	r3, [r4, #0]
 8016654:	f7eb f9fb 	bl	8001a4e <_close>
 8016658:	1c43      	adds	r3, r0, #1
 801665a:	d102      	bne.n	8016662 <_close_r+0x1a>
 801665c:	6823      	ldr	r3, [r4, #0]
 801665e:	b103      	cbz	r3, 8016662 <_close_r+0x1a>
 8016660:	602b      	str	r3, [r5, #0]
 8016662:	bd38      	pop	{r3, r4, r5, pc}
 8016664:	24041b00 	.word	0x24041b00

08016668 <_fstat_r>:
 8016668:	b538      	push	{r3, r4, r5, lr}
 801666a:	4c07      	ldr	r4, [pc, #28]	; (8016688 <_fstat_r+0x20>)
 801666c:	2300      	movs	r3, #0
 801666e:	4605      	mov	r5, r0
 8016670:	4608      	mov	r0, r1
 8016672:	4611      	mov	r1, r2
 8016674:	6023      	str	r3, [r4, #0]
 8016676:	f7eb f9f6 	bl	8001a66 <_fstat>
 801667a:	1c43      	adds	r3, r0, #1
 801667c:	d102      	bne.n	8016684 <_fstat_r+0x1c>
 801667e:	6823      	ldr	r3, [r4, #0]
 8016680:	b103      	cbz	r3, 8016684 <_fstat_r+0x1c>
 8016682:	602b      	str	r3, [r5, #0]
 8016684:	bd38      	pop	{r3, r4, r5, pc}
 8016686:	bf00      	nop
 8016688:	24041b00 	.word	0x24041b00

0801668c <_isatty_r>:
 801668c:	b538      	push	{r3, r4, r5, lr}
 801668e:	4c06      	ldr	r4, [pc, #24]	; (80166a8 <_isatty_r+0x1c>)
 8016690:	2300      	movs	r3, #0
 8016692:	4605      	mov	r5, r0
 8016694:	4608      	mov	r0, r1
 8016696:	6023      	str	r3, [r4, #0]
 8016698:	f7eb f9f5 	bl	8001a86 <_isatty>
 801669c:	1c43      	adds	r3, r0, #1
 801669e:	d102      	bne.n	80166a6 <_isatty_r+0x1a>
 80166a0:	6823      	ldr	r3, [r4, #0]
 80166a2:	b103      	cbz	r3, 80166a6 <_isatty_r+0x1a>
 80166a4:	602b      	str	r3, [r5, #0]
 80166a6:	bd38      	pop	{r3, r4, r5, pc}
 80166a8:	24041b00 	.word	0x24041b00

080166ac <_lseek_r>:
 80166ac:	b538      	push	{r3, r4, r5, lr}
 80166ae:	4c07      	ldr	r4, [pc, #28]	; (80166cc <_lseek_r+0x20>)
 80166b0:	4605      	mov	r5, r0
 80166b2:	4608      	mov	r0, r1
 80166b4:	4611      	mov	r1, r2
 80166b6:	2200      	movs	r2, #0
 80166b8:	6022      	str	r2, [r4, #0]
 80166ba:	461a      	mov	r2, r3
 80166bc:	f7eb f9ee 	bl	8001a9c <_lseek>
 80166c0:	1c43      	adds	r3, r0, #1
 80166c2:	d102      	bne.n	80166ca <_lseek_r+0x1e>
 80166c4:	6823      	ldr	r3, [r4, #0]
 80166c6:	b103      	cbz	r3, 80166ca <_lseek_r+0x1e>
 80166c8:	602b      	str	r3, [r5, #0]
 80166ca:	bd38      	pop	{r3, r4, r5, pc}
 80166cc:	24041b00 	.word	0x24041b00

080166d0 <memmove>:
 80166d0:	4288      	cmp	r0, r1
 80166d2:	b510      	push	{r4, lr}
 80166d4:	eb01 0302 	add.w	r3, r1, r2
 80166d8:	d807      	bhi.n	80166ea <memmove+0x1a>
 80166da:	1e42      	subs	r2, r0, #1
 80166dc:	4299      	cmp	r1, r3
 80166de:	d00a      	beq.n	80166f6 <memmove+0x26>
 80166e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80166e8:	e7f8      	b.n	80166dc <memmove+0xc>
 80166ea:	4283      	cmp	r3, r0
 80166ec:	d9f5      	bls.n	80166da <memmove+0xa>
 80166ee:	1881      	adds	r1, r0, r2
 80166f0:	1ad2      	subs	r2, r2, r3
 80166f2:	42d3      	cmn	r3, r2
 80166f4:	d100      	bne.n	80166f8 <memmove+0x28>
 80166f6:	bd10      	pop	{r4, pc}
 80166f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80166fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016700:	e7f7      	b.n	80166f2 <memmove+0x22>

08016702 <_realloc_r>:
 8016702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016704:	4607      	mov	r7, r0
 8016706:	4614      	mov	r4, r2
 8016708:	460e      	mov	r6, r1
 801670a:	b921      	cbnz	r1, 8016716 <_realloc_r+0x14>
 801670c:	4611      	mov	r1, r2
 801670e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016712:	f7fe bf4f 	b.w	80155b4 <_malloc_r>
 8016716:	b922      	cbnz	r2, 8016722 <_realloc_r+0x20>
 8016718:	f7fe fefe 	bl	8015518 <_free_r>
 801671c:	4625      	mov	r5, r4
 801671e:	4628      	mov	r0, r5
 8016720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016722:	f000 f827 	bl	8016774 <_malloc_usable_size_r>
 8016726:	42a0      	cmp	r0, r4
 8016728:	d20f      	bcs.n	801674a <_realloc_r+0x48>
 801672a:	4621      	mov	r1, r4
 801672c:	4638      	mov	r0, r7
 801672e:	f7fe ff41 	bl	80155b4 <_malloc_r>
 8016732:	4605      	mov	r5, r0
 8016734:	2800      	cmp	r0, #0
 8016736:	d0f2      	beq.n	801671e <_realloc_r+0x1c>
 8016738:	4631      	mov	r1, r6
 801673a:	4622      	mov	r2, r4
 801673c:	f7fe fed8 	bl	80154f0 <memcpy>
 8016740:	4631      	mov	r1, r6
 8016742:	4638      	mov	r0, r7
 8016744:	f7fe fee8 	bl	8015518 <_free_r>
 8016748:	e7e9      	b.n	801671e <_realloc_r+0x1c>
 801674a:	4635      	mov	r5, r6
 801674c:	e7e7      	b.n	801671e <_realloc_r+0x1c>
	...

08016750 <_read_r>:
 8016750:	b538      	push	{r3, r4, r5, lr}
 8016752:	4c07      	ldr	r4, [pc, #28]	; (8016770 <_read_r+0x20>)
 8016754:	4605      	mov	r5, r0
 8016756:	4608      	mov	r0, r1
 8016758:	4611      	mov	r1, r2
 801675a:	2200      	movs	r2, #0
 801675c:	6022      	str	r2, [r4, #0]
 801675e:	461a      	mov	r2, r3
 8016760:	f7eb f958 	bl	8001a14 <_read>
 8016764:	1c43      	adds	r3, r0, #1
 8016766:	d102      	bne.n	801676e <_read_r+0x1e>
 8016768:	6823      	ldr	r3, [r4, #0]
 801676a:	b103      	cbz	r3, 801676e <_read_r+0x1e>
 801676c:	602b      	str	r3, [r5, #0]
 801676e:	bd38      	pop	{r3, r4, r5, pc}
 8016770:	24041b00 	.word	0x24041b00

08016774 <_malloc_usable_size_r>:
 8016774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016778:	1f18      	subs	r0, r3, #4
 801677a:	2b00      	cmp	r3, #0
 801677c:	bfbc      	itt	lt
 801677e:	580b      	ldrlt	r3, [r1, r0]
 8016780:	18c0      	addlt	r0, r0, r3
 8016782:	4770      	bx	lr

08016784 <_init>:
 8016784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016786:	bf00      	nop
 8016788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801678a:	bc08      	pop	{r3}
 801678c:	469e      	mov	lr, r3
 801678e:	4770      	bx	lr

08016790 <_fini>:
 8016790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016792:	bf00      	nop
 8016794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016796:	bc08      	pop	{r3}
 8016798:	469e      	mov	lr, r3
 801679a:	4770      	bx	lr

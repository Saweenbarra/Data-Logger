
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001106c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0801130c  0801130c  0002130c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801151c  0801151c  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801151c  0801151c  0002151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011524  08011524  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011524  08011524  00021524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011528  08011528  00021528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0801152c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a4  240001e8  08011714  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400238c  08011714  0003238c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000371bc  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005d2f  00000000  00000000  000673d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c70  00000000  00000000  0006d108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a28  00000000  00000000  0006ed78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003e696  00000000  00000000  000707a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d660  00000000  00000000  000aee36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016e6a7  00000000  00000000  000cc496  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0023ab3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008094  00000000  00000000  0023abb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080112f4 	.word	0x080112f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	080112f4 	.word	0x080112f4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <gps_msg_config>:
#include <string.h>
#include <stdint.h>
#include <GPS.h>
#include "main.h"

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	; 0x78
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f7ff fe1f 	bl	80002e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d001      	beq.n	80006ac <gps_msg_config+0x1c>
 80006a8:	2301      	movs	r3, #1
 80006aa:	e052      	b.n	8000752 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80006ac:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <gps_msg_config+0xcc>)
 80006b8:	211f      	movs	r1, #31
 80006ba:	f00f fe03 	bl	80102c4 <sniprintf>

	int checksum_int = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80006c6:	e00b      	b.n	80006e0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80006c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d6:	4053      	eors	r3, r2
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006dc:	3301      	adds	r3, #1
 80006de:	66bb      	str	r3, [r7, #104]	; 0x68
 80006e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <gps_msg_config+0x64>
 80006ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dde9      	ble.n	80006c8 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80006f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80006f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <gps_msg_config+0xd0>)
 80006fc:	2107      	movs	r1, #7
 80006fe:	f00f fde1 	bl	80102c4 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000702:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000706:	f107 0014 	add.w	r0, r7, #20
 800070a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <gps_msg_config+0xd4>)
 8000714:	2129      	movs	r1, #41	; 0x29
 8000716:	f00f fdd5 	bl	80102c4 <sniprintf>
	printf("\n\rSending: ");
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <gps_msg_config+0xd8>)
 800071c:	f00f fd96 	bl	801024c <iprintf>
	printf("%s", messagetosend);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <gps_msg_config+0xdc>)
 8000728:	f00f fd90 	bl	801024c <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd5 	bl	80002e0 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 0114 	add.w	r1, r7, #20
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f009 fea4 	bl	800a48e <HAL_UART_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <gps_msg_config+0xc0>
		Error_Handler();
 800074c:	f000 fd5e 	bl	800120c <Error_Handler>
	}
	return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3770      	adds	r7, #112	; 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	0801130c 	.word	0x0801130c
 8000760:	08011324 	.word	0x08011324
 8000764:	0801132c 	.word	0x0801132c
 8000768:	08011334 	.word	0x08011334
 800076c:	08011340 	.word	0x08011340

08000770 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	817b      	strh	r3, [r7, #10]
 8000782:	460b      	mov	r3, r1
 8000784:	813b      	strh	r3, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800078a:	2306      	movs	r3, #6
 800078c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800078e:	23b5      	movs	r3, #181	; 0xb5
 8000790:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000792:	2362      	movs	r3, #98	; 0x62
 8000794:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000796:	2306      	movs	r3, #6
 8000798:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800079a:	2308      	movs	r3, #8
 800079c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800079e:	8bfb      	ldrh	r3, [r7, #30]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 80007a8:	897b      	ldrh	r3, [r7, #10]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 80007b2:	893b      	ldrh	r3, [r7, #8]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	e013      	b.n	8000800 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	4413      	add	r3, r2
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80007ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f4:	4413      	add	r3, r2
 80007f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	3301      	adds	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	dde8      	ble.n	80007d8 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800080a:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 800080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000810:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000812:	f107 0110 	add.w	r1, r7, #16
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	220e      	movs	r2, #14
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f009 fe37 	bl	800a48e <HAL_UART_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <gps_rate_config+0xbe>
				Error_Handler();
 8000826:	f000 fcf1 	bl	800120c <Error_Handler>
				return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <gps_rate_config+0xc0>
			}
		return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000844:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d013      	beq.n	8000878 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000850:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000854:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000858:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00b      	beq.n	8000878 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000860:	e000      	b.n	8000864 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000862:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000864:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f9      	beq.n	8000862 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800086e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_write>:
static void MX_UART8_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ffc7 	bl	8000838 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x16>
  return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f001 f837 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f8cf 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 fb91 	bl	8000ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d6:	f000 fb6f 	bl	8000fb8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80008da:	f000 fa5d 	bl	8000d98 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008de:	f00d f90b 	bl	800daf8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80008e2:	f00e fedf 	bl	800f6a4 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80008e6:	f000 f98f 	bl	8000c08 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008ea:	f000 f9f1 	bl	8000cd0 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80008ee:	f000 facb 	bl	8000e88 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80008f2:	f000 fb15 	bl	8000f20 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80008f6:	f000 fa71 	bl	8000ddc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <main+0x14c>)
 8000902:	f003 fff3 	bl	80048ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_INT_GPIO_Port, GPS_INT_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090c:	4840      	ldr	r0, [pc, #256]	; (8000a10 <main+0x14c>)
 800090e:	f003 ffed 	bl	80048ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2101      	movs	r1, #1
 8000916:	483f      	ldr	r0, [pc, #252]	; (8000a14 <main+0x150>)
 8000918:	f003 ffe8 	bl	80048ec <HAL_GPIO_WritePin>


  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 800091c:	2246      	movs	r2, #70	; 0x46
 800091e:	493e      	ldr	r1, [pc, #248]	; (8000a18 <main+0x154>)
 8000920:	483e      	ldr	r0, [pc, #248]	; (8000a1c <main+0x158>)
 8000922:	f009 fe4b 	bl	800a5bc <HAL_UART_Receive_DMA>
  HAL_Delay(1000);
 8000926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092a:	f001 f899 	bl	8001a60 <HAL_Delay>
  uint16_t measRate = 100;
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	80fb      	strh	r3, [r7, #6]
  uint16_t navRate = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	80bb      	strh	r3, [r7, #4]
  uint16_t timeRef = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	807b      	strh	r3, [r7, #2]

  gps_rate_config(&huart3, measRate, navRate, timeRef);
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	88ba      	ldrh	r2, [r7, #4]
 800093e:	88f9      	ldrh	r1, [r7, #6]
 8000940:	4836      	ldr	r0, [pc, #216]	; (8000a1c <main+0x158>)
 8000942:	f7ff ff15 	bl	8000770 <gps_rate_config>

    gps_msg_config(&huart3, "DTM", 0);//ERROR
 8000946:	2200      	movs	r2, #0
 8000948:	4935      	ldr	r1, [pc, #212]	; (8000a20 <main+0x15c>)
 800094a:	4834      	ldr	r0, [pc, #208]	; (8000a1c <main+0x158>)
 800094c:	f7ff fea0 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GAQ", 0);
 8000950:	2200      	movs	r2, #0
 8000952:	4934      	ldr	r1, [pc, #208]	; (8000a24 <main+0x160>)
 8000954:	4831      	ldr	r0, [pc, #196]	; (8000a1c <main+0x158>)
 8000956:	f7ff fe9b 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GBQ", 0);
 800095a:	2200      	movs	r2, #0
 800095c:	4932      	ldr	r1, [pc, #200]	; (8000a28 <main+0x164>)
 800095e:	482f      	ldr	r0, [pc, #188]	; (8000a1c <main+0x158>)
 8000960:	f7ff fe96 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GBS", 0);//ERROR
 8000964:	2200      	movs	r2, #0
 8000966:	4931      	ldr	r1, [pc, #196]	; (8000a2c <main+0x168>)
 8000968:	482c      	ldr	r0, [pc, #176]	; (8000a1c <main+0x158>)
 800096a:	f7ff fe91 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GGA", 0);//ERROR
 800096e:	2200      	movs	r2, #0
 8000970:	492f      	ldr	r1, [pc, #188]	; (8000a30 <main+0x16c>)
 8000972:	482a      	ldr	r0, [pc, #168]	; (8000a1c <main+0x158>)
 8000974:	f7ff fe8c 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GLL", 0);//ERROR
 8000978:	2200      	movs	r2, #0
 800097a:	492e      	ldr	r1, [pc, #184]	; (8000a34 <main+0x170>)
 800097c:	4827      	ldr	r0, [pc, #156]	; (8000a1c <main+0x158>)
 800097e:	f7ff fe87 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GLQ", 0);
 8000982:	2200      	movs	r2, #0
 8000984:	492c      	ldr	r1, [pc, #176]	; (8000a38 <main+0x174>)
 8000986:	4825      	ldr	r0, [pc, #148]	; (8000a1c <main+0x158>)
 8000988:	f7ff fe82 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GNQ", 0);
 800098c:	2200      	movs	r2, #0
 800098e:	492b      	ldr	r1, [pc, #172]	; (8000a3c <main+0x178>)
 8000990:	4822      	ldr	r0, [pc, #136]	; (8000a1c <main+0x158>)
 8000992:	f7ff fe7d 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GNS", 0);//ERROR
 8000996:	2200      	movs	r2, #0
 8000998:	4929      	ldr	r1, [pc, #164]	; (8000a40 <main+0x17c>)
 800099a:	4820      	ldr	r0, [pc, #128]	; (8000a1c <main+0x158>)
 800099c:	f7ff fe78 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GPQ", 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	4928      	ldr	r1, [pc, #160]	; (8000a44 <main+0x180>)
 80009a4:	481d      	ldr	r0, [pc, #116]	; (8000a1c <main+0x158>)
 80009a6:	f7ff fe73 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GRS", 0);//ERROR
 80009aa:	2200      	movs	r2, #0
 80009ac:	4926      	ldr	r1, [pc, #152]	; (8000a48 <main+0x184>)
 80009ae:	481b      	ldr	r0, [pc, #108]	; (8000a1c <main+0x158>)
 80009b0:	f7ff fe6e 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GSA", 0);//ERROR
 80009b4:	2200      	movs	r2, #0
 80009b6:	4925      	ldr	r1, [pc, #148]	; (8000a4c <main+0x188>)
 80009b8:	4818      	ldr	r0, [pc, #96]	; (8000a1c <main+0x158>)
 80009ba:	f7ff fe69 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GST", 0);//ERROR
 80009be:	2200      	movs	r2, #0
 80009c0:	4923      	ldr	r1, [pc, #140]	; (8000a50 <main+0x18c>)
 80009c2:	4816      	ldr	r0, [pc, #88]	; (8000a1c <main+0x158>)
 80009c4:	f7ff fe64 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GSV", 0);//ERROR
 80009c8:	2200      	movs	r2, #0
 80009ca:	4922      	ldr	r1, [pc, #136]	; (8000a54 <main+0x190>)
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <main+0x158>)
 80009ce:	f7ff fe5f 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "RLM", 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	4920      	ldr	r1, [pc, #128]	; (8000a58 <main+0x194>)
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <main+0x158>)
 80009d8:	f7ff fe5a 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "RMC", 1);//ERROR
 80009dc:	2201      	movs	r2, #1
 80009de:	491f      	ldr	r1, [pc, #124]	; (8000a5c <main+0x198>)
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <main+0x158>)
 80009e2:	f7ff fe55 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "TXT", 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	491d      	ldr	r1, [pc, #116]	; (8000a60 <main+0x19c>)
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <main+0x158>)
 80009ec:	f7ff fe50 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "VLW", 0);//ERROR
 80009f0:	2200      	movs	r2, #0
 80009f2:	491c      	ldr	r1, [pc, #112]	; (8000a64 <main+0x1a0>)
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <main+0x158>)
 80009f6:	f7ff fe4b 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "VTG", 0);//ERROR
 80009fa:	2200      	movs	r2, #0
 80009fc:	491a      	ldr	r1, [pc, #104]	; (8000a68 <main+0x1a4>)
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <main+0x158>)
 8000a00:	f7ff fe46 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8000a04:	2200      	movs	r2, #0
 8000a06:	4919      	ldr	r1, [pc, #100]	; (8000a6c <main+0x1a8>)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <main+0x158>)
 8000a0a:	f7ff fe41 	bl	8000690 <gps_msg_config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <main+0x14a>
 8000a10:	58020c00 	.word	0x58020c00
 8000a14:	58020400 	.word	0x58020400
 8000a18:	240003a8 	.word	0x240003a8
 8000a1c:	2400029c 	.word	0x2400029c
 8000a20:	0801134c 	.word	0x0801134c
 8000a24:	08011350 	.word	0x08011350
 8000a28:	08011354 	.word	0x08011354
 8000a2c:	08011358 	.word	0x08011358
 8000a30:	0801135c 	.word	0x0801135c
 8000a34:	08011360 	.word	0x08011360
 8000a38:	08011364 	.word	0x08011364
 8000a3c:	08011368 	.word	0x08011368
 8000a40:	0801136c 	.word	0x0801136c
 8000a44:	08011370 	.word	0x08011370
 8000a48:	08011374 	.word	0x08011374
 8000a4c:	08011378 	.word	0x08011378
 8000a50:	0801137c 	.word	0x0801137c
 8000a54:	08011380 	.word	0x08011380
 8000a58:	08011384 	.word	0x08011384
 8000a5c:	08011388 	.word	0x08011388
 8000a60:	0801138c 	.word	0x0801138c
 8000a64:	08011390 	.word	0x08011390
 8000a68:	08011394 	.word	0x08011394
 8000a6c:	08011398 	.word	0x08011398

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0cc      	sub	sp, #304	; 0x130
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a7a:	224c      	movs	r2, #76	; 0x4c
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00f fb33 	bl	80100ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a88:	2220      	movs	r2, #32
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00f fb2c 	bl	80100ea <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4618      	mov	r0, r3
 8000a98:	23bc      	movs	r3, #188	; 0xbc
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f00f fb24 	bl	80100ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f005 f932 	bl	8005d0c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	4b53      	ldr	r3, [pc, #332]	; (8000bfc <SystemClock_Config+0x18c>)
 8000ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab2:	4a52      	ldr	r2, [pc, #328]	; (8000bfc <SystemClock_Config+0x18c>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aba:	4b50      	ldr	r3, [pc, #320]	; (8000bfc <SystemClock_Config+0x18c>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	f003 0201 	and.w	r2, r3, #1
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	4b4e      	ldr	r3, [pc, #312]	; (8000c00 <SystemClock_Config+0x190>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ace:	4a4c      	ldr	r2, [pc, #304]	; (8000c00 <SystemClock_Config+0x190>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6193      	str	r3, [r2, #24]
 8000ad6:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <SystemClock_Config+0x190>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae6:	bf00      	nop
 8000ae8:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <SystemClock_Config+0x190>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af4:	d1f8      	bne.n	8000ae8 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000af6:	2303      	movs	r3, #3
 8000af8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000b22:	2330      	movs	r3, #48	; 0x30
 8000b24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f005 f925 	bl	8005da0 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000b5c:	f000 fb56 	bl	800120c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	233f      	movs	r3, #63	; 0x3f
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 fd12 	bl	80065c0 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000ba2:	f000 fb33 	bl	800120c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <SystemClock_Config+0x194>)
 8000bac:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2200      	movs	r2, #0
 8000bcc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 f872 	bl	8006cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x17e>
  {
    Error_Handler();
 8000bea:	f000 fb0f 	bl	800120c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000bee:	f005 f8c7 	bl	8005d80 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000bf2:	bf00      	nop
 8000bf4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	58000400 	.word	0x58000400
 8000c00:	58024800 	.word	0x58024800
 8000c04:	00059002 	.word	0x00059002

08000c08 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <MX_FDCAN1_Init+0xc4>)
 8000c10:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c92:	2204      	movs	r2, #4
 8000c94:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000cb6:	f003 f8e9 	bl	8003e8c <HAL_FDCAN_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000cc0:	f000 faa4 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	240003f0 	.word	0x240003f0
 8000ccc:	4000a000 	.word	0x4000a000

08000cd0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000cd4:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <MX_FDCAN2_Init+0xc4>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000cf2:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d7e:	f003 f885 	bl	8003e8c <HAL_FDCAN_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000d88:	f000 fa40 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	240005a4 	.word	0x240005a4
 8000d94:	4000a400 	.word	0x4000a400

08000d98 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <MX_SDMMC1_SD_Init+0x40>)
 8000da0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000db0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	24000328 	.word	0x24000328
 8000dd8:	52007000 	.word	0x52007000

08000ddc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <MX_SPI1_Init+0xa8>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000de8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e6c:	f009 f9ac 	bl	800a1c8 <HAL_SPI_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e76:	f000 f9c9 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2400051c 	.word	0x2400051c
 8000e84:	40013000 	.word	0x40013000

08000e88 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_UART8_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_UART8_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_UART8_Init+0x90>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_UART8_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_UART8_Init+0x90>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_UART8_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_UART8_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ed2:	f009 fa8c 	bl	800a3ee <HAL_UART_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000edc:	f000 f996 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ee4:	f00a fc1c 	bl	800b720 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f000 f98d 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ef6:	f00a fc51 	bl	800b79c <HAL_UARTEx_SetRxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f000 f984 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_UART8_Init+0x90>)
 8000f06:	f00a fbd2 	bl	800b6ae <HAL_UARTEx_DisableFifoMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f000 f97c 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24000490 	.word	0x24000490
 8000f1c:	40007c00 	.word	0x40007c00

08000f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <MX_USART3_UART_Init+0x94>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f2c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f6a:	f009 fa40 	bl	800a3ee <HAL_UART_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f74:	f000 f94a 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f7c:	f00a fbd0 	bl	800b720 <HAL_UARTEx_SetTxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f86:	f000 f941 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f8e:	f00a fc05 	bl	800b79c <HAL_UARTEx_SetRxFifoThreshold>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f000 f938 	bl	800120c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f9e:	f00a fb86 	bl	800b6ae <HAL_UARTEx_DisableFifoMode>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f000 f930 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2400029c 	.word	0x2400029c
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	200b      	movs	r0, #11
 8000fe2:	f000 fe46 	bl	8001c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fe6:	200b      	movs	r0, #11
 8000fe8:	f000 fe5d 	bl	8001ca6 <HAL_NVIC_EnableIRQ>

}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	58024400 	.word	0x58024400

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a67      	ldr	r2, [pc, #412]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b61      	ldr	r3, [pc, #388]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a60      	ldr	r2, [pc, #384]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b5d      	ldr	r3, [pc, #372]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 8001052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 800108e:	f043 0302 	orr.w	r3, r3, #2
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <MX_GPIO_Init+0x1bc>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	210c      	movs	r1, #12
 80010c6:	483c      	ldr	r0, [pc, #240]	; (80011b8 <MX_GPIO_Init+0x1c0>)
 80010c8:	f003 fc10 	bl	80048ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2103      	movs	r1, #3
 80010d0:	483a      	ldr	r0, [pc, #232]	; (80011bc <MX_GPIO_Init+0x1c4>)
 80010d2:	f003 fc0b 	bl	80048ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2101      	movs	r1, #1
 80010da:	4839      	ldr	r0, [pc, #228]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 80010dc:	f003 fc06 	bl	80048ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPS_RST_Pin|GPS_INT_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80010e6:	4837      	ldr	r0, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x1cc>)
 80010e8:	f003 fc00 	bl	80048ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 80010ec:	230c      	movs	r3, #12
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	482d      	ldr	r0, [pc, #180]	; (80011b8 <MX_GPIO_Init+0x1c0>)
 8001104:	f003 fa2a 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8001108:	2303      	movs	r3, #3
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4827      	ldr	r0, [pc, #156]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001120:	f003 fa1c 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8001124:	2304      	movs	r3, #4
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <MX_GPIO_Init+0x1d0>)
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4821      	ldr	r0, [pc, #132]	; (80011bc <MX_GPIO_Init+0x1c4>)
 8001138:	f003 fa10 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800113c:	2301      	movs	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	481b      	ldr	r0, [pc, #108]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001154:	f003 fa02 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8001158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_GPIO_Init+0x1d0>)
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4812      	ldr	r0, [pc, #72]	; (80011b8 <MX_GPIO_Init+0x1c0>)
 800116e:	f003 f9f5 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_RST_Pin GPS_INT_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|GPS_INT_Pin;
 8001172:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <MX_GPIO_Init+0x1cc>)
 800118c:	f003 f9e6 	bl	800455c <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8001190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_GPIO_Init+0x1c4>)
 80011a6:	f003 f9d9 	bl	800455c <HAL_GPIO_Init>

}
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58021000 	.word	0x58021000
 80011bc:	58020000 	.word	0x58020000
 80011c0:	58020400 	.word	0x58020400
 80011c4:	58020c00 	.word	0x58020c00
 80011c8:	11110000 	.word	0x11110000

080011cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011d4:	2101      	movs	r1, #1
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <HAL_UART_RxCpltCallback+0x38>)
 80011d8:	f003 fba1 	bl	800491e <HAL_GPIO_TogglePin>
  //CDC_Transmit_FS(rxBuf, sizeof(rxBuf));
  for(int i=0; i<BUFFLENGTH; i++){
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e009      	b.n	80011f6 <HAL_UART_RxCpltCallback+0x2a>
	  printf("%c",rxBuf[i]);
 80011e2:	4a09      	ldr	r2, [pc, #36]	; (8001208 <HAL_UART_RxCpltCallback+0x3c>)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00f f846 	bl	801027c <putchar>
  for(int i=0; i<BUFFLENGTH; i++){
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b45      	cmp	r3, #69	; 0x45
 80011fa:	ddf2      	ble.n	80011e2 <HAL_UART_RxCpltCallback+0x16>
  /*
  for(int i=0; i<BUFFLENGTH; i++){
	  printf("%c", rxBuf[i]);
  }
	*/
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	58020400 	.word	0x58020400
 8001208:	240003a8 	.word	0x240003a8

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001212:	e7fe      	b.n	8001212 <Error_Handler+0x6>

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_MspInit+0x30>)
 800121c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x30>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x30>)
 800122c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	58024400 	.word	0x58024400

08001248 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a3d      	ldr	r2, [pc, #244]	; (800135c <HAL_FDCAN_MspInit+0x114>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d138      	bne.n	80012dc <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_FDCAN_MspInit+0x118>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <HAL_FDCAN_MspInit+0x118>)
 8001272:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001274:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_FDCAN_MspInit+0x118>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d10e      	bne.n	800129a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800127c:	4b39      	ldr	r3, [pc, #228]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 800127e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001282:	4a38      	ldr	r2, [pc, #224]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800128c:	4b35      	ldr	r3, [pc, #212]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 800128e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a30      	ldr	r2, [pc, #192]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80012ca:	2309      	movs	r3, #9
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <HAL_FDCAN_MspInit+0x120>)
 80012d6:	f003 f941 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80012da:	e03b      	b.n	8001354 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a22      	ldr	r2, [pc, #136]	; (800136c <HAL_FDCAN_MspInit+0x124>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d136      	bne.n	8001354 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_FDCAN_MspInit+0x118>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_FDCAN_MspInit+0x118>)
 80012ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_FDCAN_MspInit+0x118>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d10e      	bne.n	8001316 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 80012fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012fe:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 800130a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_FDCAN_MspInit+0x11c>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001344:	2309      	movs	r3, #9
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <HAL_FDCAN_MspInit+0x120>)
 8001350:	f003 f904 	bl	800455c <HAL_GPIO_Init>
}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	4000a000 	.word	0x4000a000
 8001360:	24000204 	.word	0x24000204
 8001364:	58024400 	.word	0x58024400
 8001368:	58020400 	.word	0x58020400
 800136c:	4000a400 	.word	0x4000a400

08001370 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2a      	ldr	r2, [pc, #168]	; (8001438 <HAL_SD_MspInit+0xc8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d14d      	bne.n	800142e <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_SD_MspInit+0xcc>)
 8001394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001398:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_SD_MspInit+0xcc>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_SD_MspInit+0xcc>)
 80013a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_SD_MspInit+0xcc>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	4a21      	ldr	r2, [pc, #132]	; (800143c <HAL_SD_MspInit+0xcc>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <HAL_SD_MspInit+0xcc>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_SD_MspInit+0xcc>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_SD_MspInit+0xcc>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_SD_MspInit+0xcc>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013fe:	230c      	movs	r3, #12
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <HAL_SD_MspInit+0xd0>)
 800140a:	f003 f8a7 	bl	800455c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800140e:	2304      	movs	r3, #4
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800141e:	230c      	movs	r3, #12
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <HAL_SD_MspInit+0xd4>)
 800142a:	f003 f897 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	52007000 	.word	0x52007000
 800143c:	58024400 	.word	0x58024400
 8001440:	58020800 	.word	0x58020800
 8001444:	58020c00 	.word	0x58020c00

08001448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1a      	ldr	r2, [pc, #104]	; (80014d0 <HAL_SPI_MspInit+0x88>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12d      	bne.n	80014c6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HAL_SPI_MspInit+0x8c>)
 800146c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001470:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <HAL_SPI_MspInit+0x8c>)
 8001472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001476:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_SPI_MspInit+0x8c>)
 800147c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_SPI_MspInit+0x8c>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_SPI_MspInit+0x8c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_SPI_MspInit+0x8c>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014a6:	23e0      	movs	r3, #224	; 0xe0
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b6:	2305      	movs	r3, #5
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <HAL_SPI_MspInit+0x90>)
 80014c2:	f003 f84b 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40013000 	.word	0x40013000
 80014d4:	58024400 	.word	0x58024400
 80014d8:	58020000 	.word	0x58020000

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_UART_MspInit+0x14c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12e      	bne.n	800155c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80014fe:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_UART_MspInit+0x150>)
 8001500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001504:	4a49      	ldr	r2, [pc, #292]	; (800162c <HAL_UART_MspInit+0x150>)
 8001506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800150a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_UART_MspInit+0x150>)
 8001510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <HAL_UART_MspInit+0x150>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	4a42      	ldr	r2, [pc, #264]	; (800162c <HAL_UART_MspInit+0x150>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152c:	4b3f      	ldr	r3, [pc, #252]	; (800162c <HAL_UART_MspInit+0x150>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800153a:	2303      	movs	r3, #3
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800154a:	2308      	movs	r3, #8
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4836      	ldr	r0, [pc, #216]	; (8001630 <HAL_UART_MspInit+0x154>)
 8001556:	f003 f801 	bl	800455c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800155a:	e061      	b.n	8001620 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a34      	ldr	r2, [pc, #208]	; (8001634 <HAL_UART_MspInit+0x158>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d15c      	bne.n	8001620 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <HAL_UART_MspInit+0x150>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800156c:	4a2f      	ldr	r2, [pc, #188]	; (800162c <HAL_UART_MspInit+0x150>)
 800156e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001572:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_UART_MspInit+0x150>)
 8001578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800157c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <HAL_UART_MspInit+0x150>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	4a28      	ldr	r2, [pc, #160]	; (800162c <HAL_UART_MspInit+0x150>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_UART_MspInit+0x150>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b4:	2307      	movs	r3, #7
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	481e      	ldr	r0, [pc, #120]	; (8001638 <HAL_UART_MspInit+0x15c>)
 80015c0:	f002 ffcc 	bl	800455c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_UART_MspInit+0x160>)
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_UART_MspInit+0x164>)
 80015c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_UART_MspInit+0x160>)
 80015cc:	222d      	movs	r2, #45	; 0x2d
 80015ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_UART_MspInit+0x160>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_UART_MspInit+0x160>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_UART_MspInit+0x160>)
 80015de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_UART_MspInit+0x160>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_UART_MspInit+0x160>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_UART_MspInit+0x160>)
 80015f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_UART_MspInit+0x160>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_UART_MspInit+0x160>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <HAL_UART_MspInit+0x160>)
 8001606:	f000 fb69 	bl	8001cdc <HAL_DMA_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001610:	f7ff fdfc 	bl	800120c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_UART_MspInit+0x160>)
 8001618:	679a      	str	r2, [r3, #120]	; 0x78
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_UART_MspInit+0x160>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001620:	bf00      	nop
 8001622:	3730      	adds	r7, #48	; 0x30
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40007c00 	.word	0x40007c00
 800162c:	58024400 	.word	0x58024400
 8001630:	58021000 	.word	0x58021000
 8001634:	40004800 	.word	0x40004800
 8001638:	58020c00 	.word	0x58020c00
 800163c:	24000224 	.word	0x24000224
 8001640:	40020010 	.word	0x40020010

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f000 f9c6 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA1_Stream0_IRQHandler+0x10>)
 800169e:	f001 f8e3 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000224 	.word	0x24000224

080016ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <OTG_FS_IRQHandler+0x10>)
 80016b2:	f003 faa6 	bl	8004c02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24001f80 	.word	0x24001f80

080016c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e00a      	b.n	80016e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016d2:	f3af 8000 	nop.w
 80016d6:	4601      	mov	r1, r0
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60ba      	str	r2, [r7, #8]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dbf0      	blt.n	80016d2 <_read+0x12>
	}

return len;
 80016f0:	687b      	ldr	r3, [r7, #4]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_isatty>:

int _isatty(int file)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
	return 1;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
	return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f00e fc64 	bl	8010060 <__errno>
 8001798:	4602      	mov	r2, r0
 800179a:	230c      	movs	r3, #12
 800179c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	24080000 	.word	0x24080000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	24000208 	.word	0x24000208
 80017cc:	24002390 	.word	0x24002390

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <SystemInit+0xec>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a38      	ldr	r2, [pc, #224]	; (80018bc <SystemInit+0xec>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017e4:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <SystemInit+0xf0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	2b06      	cmp	r3, #6
 80017ee:	d807      	bhi.n	8001800 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <SystemInit+0xf0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 030f 	bic.w	r3, r3, #15
 80017f8:	4a31      	ldr	r2, [pc, #196]	; (80018c0 <SystemInit+0xf0>)
 80017fa:	f043 0307 	orr.w	r3, r3, #7
 80017fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001800:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <SystemInit+0xf4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <SystemInit+0xf4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <SystemInit+0xf4>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <SystemInit+0xf4>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	492b      	ldr	r1, [pc, #172]	; (80018c4 <SystemInit+0xf4>)
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <SystemInit+0xf8>)
 800181a:	4013      	ands	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <SystemInit+0xf0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	2b07      	cmp	r3, #7
 8001828:	d907      	bls.n	800183a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <SystemInit+0xf0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 030f 	bic.w	r3, r3, #15
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <SystemInit+0xf0>)
 8001834:	f043 0307 	orr.w	r3, r3, #7
 8001838:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <SystemInit+0xf4>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <SystemInit+0xf4>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <SystemInit+0xf4>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <SystemInit+0xf4>)
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <SystemInit+0xfc>)
 8001850:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001852:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <SystemInit+0xf4>)
 8001854:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <SystemInit+0x100>)
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <SystemInit+0xf4>)
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <SystemInit+0x104>)
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <SystemInit+0xf4>)
 8001860:	2200      	movs	r2, #0
 8001862:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <SystemInit+0xf4>)
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <SystemInit+0x104>)
 8001868:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <SystemInit+0xf4>)
 800186c:	2200      	movs	r2, #0
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <SystemInit+0xf4>)
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <SystemInit+0x104>)
 8001874:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <SystemInit+0xf4>)
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <SystemInit+0xf4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <SystemInit+0xf4>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <SystemInit+0xf4>)
 800188a:	2200      	movs	r2, #0
 800188c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <SystemInit+0x108>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <SystemInit+0x10c>)
 8001894:	4013      	ands	r3, r2
 8001896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800189a:	d202      	bcs.n	80018a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <SystemInit+0x110>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <SystemInit+0x114>)
 80018a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <SystemInit+0xec>)
 80018ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00
 80018c0:	52002000 	.word	0x52002000
 80018c4:	58024400 	.word	0x58024400
 80018c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80018cc:	02020200 	.word	0x02020200
 80018d0:	01ff0000 	.word	0x01ff0000
 80018d4:	01010280 	.word	0x01010280
 80018d8:	5c001000 	.word	0x5c001000
 80018dc:	ffff0000 	.word	0xffff0000
 80018e0:	51008108 	.word	0x51008108
 80018e4:	52004000 	.word	0x52004000

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018ec:	f7ff ff70 	bl	80017d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018f2:	e003      	b.n	80018fc <LoopCopyDataInit>

080018f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80018f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018fa:	3104      	adds	r1, #4

080018fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001900:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001902:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001904:	d3f6      	bcc.n	80018f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001908:	e002      	b.n	8001910 <LoopFillZerobss>

0800190a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800190a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800190c:	f842 3b04 	str.w	r3, [r2], #4

08001910 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001912:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001914:	d3f9      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f00e fba9 	bl	801006c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7fe ffd3 	bl	80008c4 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001924:	0801152c 	.word	0x0801152c
  ldr  r0, =_sdata
 8001928:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800192c:	240001e8 	.word	0x240001e8
  ldr  r2, =_sbss
 8001930:	240001e8 	.word	0x240001e8
  ldr  r3, = _ebss
 8001934:	2400238c 	.word	0x2400238c

08001938 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC3_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001942:	2003      	movs	r0, #3
 8001944:	f000 f98a 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001948:	f004 fff0 	bl	800692c <HAL_RCC_GetSysClockFreq>
 800194c:	4601      	mov	r1, r0
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_Init+0x68>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <HAL_Init+0x6c>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa21 f303 	lsr.w	r3, r1, r3
 8001964:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_Init+0x68>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_Init+0x6c>)
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_Init+0x70>)
 800197e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_Init+0x74>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001986:	2000      	movs	r0, #0
 8001988:	f000 f814 	bl	80019b4 <HAL_InitTick>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e002      	b.n	800199c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001996:	f7ff fc3d 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	58024400 	.word	0x58024400
 80019a8:	08011440 	.word	0x08011440
 80019ac:	24000004 	.word	0x24000004
 80019b0:	24000000 	.word	0x24000000

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019bc:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_InitTick+0x60>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e021      	b.n	8001a0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_InitTick+0x64>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_InitTick+0x60>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f96f 	bl	8001cc2 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 f939 	bl	8001c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x68>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2400000c 	.word	0x2400000c
 8001a18:	24000000 	.word	0x24000000
 8001a1c:	24000008 	.word	0x24000008

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2400000c 	.word	0x2400000c
 8001a44:	24000644 	.word	0x24000644

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	24000644 	.word	0x24000644

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_Delay+0x40>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	2400000c 	.word	0x2400000c

08001aa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetREVID+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0c1b      	lsrs	r3, r3, #16
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	5c001000 	.word	0x5c001000

08001abc <__NVIC_SetPriorityGrouping>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	05fa0000 	.word	0x05fa0000

08001b04 <__NVIC_GetPriorityGrouping>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff40 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff90 	bl	8001bb0 <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff33 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa4 	bl	8001c18 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff feb0 	bl	8001a48 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e316      	b.n	8002322 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a66      	ldr	r2, [pc, #408]	; (8001e94 <HAL_DMA_Init+0x1b8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d04a      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <HAL_DMA_Init+0x1bc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d045      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <HAL_DMA_Init+0x1c0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d040      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a62      	ldr	r2, [pc, #392]	; (8001ea0 <HAL_DMA_Init+0x1c4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d03b      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a60      	ldr	r2, [pc, #384]	; (8001ea4 <HAL_DMA_Init+0x1c8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d036      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ea8 <HAL_DMA_Init+0x1cc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d031      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_DMA_Init+0x1d0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d02c      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <HAL_DMA_Init+0x1d4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d027      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a5a      	ldr	r2, [pc, #360]	; (8001eb4 <HAL_DMA_Init+0x1d8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d022      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a59      	ldr	r2, [pc, #356]	; (8001eb8 <HAL_DMA_Init+0x1dc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01d      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a57      	ldr	r2, [pc, #348]	; (8001ebc <HAL_DMA_Init+0x1e0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d018      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a56      	ldr	r2, [pc, #344]	; (8001ec0 <HAL_DMA_Init+0x1e4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <HAL_DMA_Init+0x1e8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a53      	ldr	r2, [pc, #332]	; (8001ec8 <HAL_DMA_Init+0x1ec>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_DMA_Init+0x1f0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_DMA_Init+0xb8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <HAL_DMA_Init+0x1f4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_DMA_Init+0xbc>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_DMA_Init+0xbe>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 813b 	beq.w	8002016 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a37      	ldr	r2, [pc, #220]	; (8001e94 <HAL_DMA_Init+0x1b8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d04a      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a36      	ldr	r2, [pc, #216]	; (8001e98 <HAL_DMA_Init+0x1bc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d045      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a34      	ldr	r2, [pc, #208]	; (8001e9c <HAL_DMA_Init+0x1c0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d040      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a33      	ldr	r2, [pc, #204]	; (8001ea0 <HAL_DMA_Init+0x1c4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d03b      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <HAL_DMA_Init+0x1c8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d036      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a30      	ldr	r2, [pc, #192]	; (8001ea8 <HAL_DMA_Init+0x1cc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d031      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2e      	ldr	r2, [pc, #184]	; (8001eac <HAL_DMA_Init+0x1d0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d02c      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <HAL_DMA_Init+0x1d4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d027      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2b      	ldr	r2, [pc, #172]	; (8001eb4 <HAL_DMA_Init+0x1d8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d022      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <HAL_DMA_Init+0x1dc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d01d      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <HAL_DMA_Init+0x1e0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d018      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <HAL_DMA_Init+0x1e4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <HAL_DMA_Init+0x1e8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00e      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <HAL_DMA_Init+0x1ec>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <HAL_DMA_Init+0x1f0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d004      	beq.n	8001e50 <HAL_DMA_Init+0x174>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <HAL_DMA_Init+0x1f4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d108      	bne.n	8001e62 <HAL_DMA_Init+0x186>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e007      	b.n	8001e72 <HAL_DMA_Init+0x196>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e72:	e02f      	b.n	8001ed4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e74:	f7ff fde8 	bl	8001a48 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d928      	bls.n	8001ed4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2220      	movs	r2, #32
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e246      	b.n	8002322 <HAL_DMA_Init+0x646>
 8001e94:	40020010 	.word	0x40020010
 8001e98:	40020028 	.word	0x40020028
 8001e9c:	40020040 	.word	0x40020040
 8001ea0:	40020058 	.word	0x40020058
 8001ea4:	40020070 	.word	0x40020070
 8001ea8:	40020088 	.word	0x40020088
 8001eac:	400200a0 	.word	0x400200a0
 8001eb0:	400200b8 	.word	0x400200b8
 8001eb4:	40020410 	.word	0x40020410
 8001eb8:	40020428 	.word	0x40020428
 8001ebc:	40020440 	.word	0x40020440
 8001ec0:	40020458 	.word	0x40020458
 8001ec4:	40020470 	.word	0x40020470
 8001ec8:	40020488 	.word	0x40020488
 8001ecc:	400204a0 	.word	0x400204a0
 8001ed0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1c8      	bne.n	8001e74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4b83      	ldr	r3, [pc, #524]	; (80020fc <HAL_DMA_Init+0x420>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001efa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d107      	bne.n	8001f38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	4313      	orrs	r3, r2
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f38:	4b71      	ldr	r3, [pc, #452]	; (8002100 <HAL_DMA_Init+0x424>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b71      	ldr	r3, [pc, #452]	; (8002104 <HAL_DMA_Init+0x428>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f44:	d328      	bcc.n	8001f98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b28      	cmp	r3, #40	; 0x28
 8001f4c:	d903      	bls.n	8001f56 <HAL_DMA_Init+0x27a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b2e      	cmp	r3, #46	; 0x2e
 8001f54:	d917      	bls.n	8001f86 <HAL_DMA_Init+0x2aa>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8001f5c:	d903      	bls.n	8001f66 <HAL_DMA_Init+0x28a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d90f      	bls.n	8001f86 <HAL_DMA_Init+0x2aa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b46      	cmp	r3, #70	; 0x46
 8001f6c:	d903      	bls.n	8001f76 <HAL_DMA_Init+0x29a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b48      	cmp	r3, #72	; 0x48
 8001f74:	d907      	bls.n	8001f86 <HAL_DMA_Init+0x2aa>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b4e      	cmp	r3, #78	; 0x4e
 8001f7c:	d905      	bls.n	8001f8a <HAL_DMA_Init+0x2ae>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b52      	cmp	r3, #82	; 0x52
 8001f84:	d801      	bhi.n	8001f8a <HAL_DMA_Init+0x2ae>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_DMA_Init+0x2b0>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f023 0307 	bic.w	r3, r3, #7
 8001fae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d117      	bne.n	8001ff2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f001 fdcf 	bl	8003b78 <DMA_CheckFifoParam>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e197      	b.n	8002322 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f001 fd0a 	bl	8003a14 <DMA_CalcBaseAndBitshift>
 8002000:	4603      	mov	r3, r0
 8002002:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	223f      	movs	r2, #63	; 0x3f
 800200e:	409a      	lsls	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	e0cd      	b.n	80021b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_DMA_Init+0x42c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_Init+0x38a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a39      	ldr	r2, [pc, #228]	; (800210c <HAL_DMA_Init+0x430>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01d      	beq.n	8002066 <HAL_DMA_Init+0x38a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_DMA_Init+0x434>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d018      	beq.n	8002066 <HAL_DMA_Init+0x38a>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a36      	ldr	r2, [pc, #216]	; (8002114 <HAL_DMA_Init+0x438>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_DMA_Init+0x38a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a35      	ldr	r2, [pc, #212]	; (8002118 <HAL_DMA_Init+0x43c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00e      	beq.n	8002066 <HAL_DMA_Init+0x38a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a33      	ldr	r2, [pc, #204]	; (800211c <HAL_DMA_Init+0x440>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_DMA_Init+0x38a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a32      	ldr	r2, [pc, #200]	; (8002120 <HAL_DMA_Init+0x444>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_DMA_Init+0x38a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a30      	ldr	r2, [pc, #192]	; (8002124 <HAL_DMA_Init+0x448>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_DMA_Init+0x38e>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_DMA_Init+0x390>
 800206a:	2300      	movs	r3, #0
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8097 	beq.w	80021a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_DMA_Init+0x42c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d021      	beq.n	80020c0 <HAL_DMA_Init+0x3e4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMA_Init+0x430>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01c      	beq.n	80020c0 <HAL_DMA_Init+0x3e4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <HAL_DMA_Init+0x434>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d017      	beq.n	80020c0 <HAL_DMA_Init+0x3e4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_DMA_Init+0x438>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d012      	beq.n	80020c0 <HAL_DMA_Init+0x3e4>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_DMA_Init+0x43c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00d      	beq.n	80020c0 <HAL_DMA_Init+0x3e4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_DMA_Init+0x440>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d008      	beq.n	80020c0 <HAL_DMA_Init+0x3e4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_DMA_Init+0x444>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <HAL_DMA_Init+0x3e4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_DMA_Init+0x448>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_DMA_Init+0x44c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b40      	cmp	r3, #64	; 0x40
 80020e8:	d020      	beq.n	800212c <HAL_DMA_Init+0x450>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d102      	bne.n	80020f8 <HAL_DMA_Init+0x41c>
 80020f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020f6:	e01a      	b.n	800212e <HAL_DMA_Init+0x452>
 80020f8:	2300      	movs	r3, #0
 80020fa:	e018      	b.n	800212e <HAL_DMA_Init+0x452>
 80020fc:	fe10803f 	.word	0xfe10803f
 8002100:	5c001000 	.word	0x5c001000
 8002104:	ffff0000 	.word	0xffff0000
 8002108:	58025408 	.word	0x58025408
 800210c:	5802541c 	.word	0x5802541c
 8002110:	58025430 	.word	0x58025430
 8002114:	58025444 	.word	0x58025444
 8002118:	58025458 	.word	0x58025458
 800211c:	5802546c 	.word	0x5802546c
 8002120:	58025480 	.word	0x58025480
 8002124:	58025494 	.word	0x58025494
 8002128:	fffe000f 	.word	0xfffe000f
 800212c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68d2      	ldr	r2, [r2, #12]
 8002132:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800213c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800214c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800215c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b6e      	ldr	r3, [pc, #440]	; (800232c <HAL_DMA_Init+0x650>)
 8002174:	4413      	add	r3, r2
 8002176:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <HAL_DMA_Init+0x654>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	009a      	lsls	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f001 fc45 	bl	8003a14 <DMA_CalcBaseAndBitshift>
 800218a:	4603      	mov	r3, r0
 800218c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2201      	movs	r2, #1
 8002198:	409a      	lsls	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	e008      	b.n	80021b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0b7      	b.n	8002322 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5f      	ldr	r2, [pc, #380]	; (8002334 <HAL_DMA_Init+0x658>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d072      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5d      	ldr	r2, [pc, #372]	; (8002338 <HAL_DMA_Init+0x65c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d06d      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5c      	ldr	r2, [pc, #368]	; (800233c <HAL_DMA_Init+0x660>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d068      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5a      	ldr	r2, [pc, #360]	; (8002340 <HAL_DMA_Init+0x664>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d063      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a59      	ldr	r2, [pc, #356]	; (8002344 <HAL_DMA_Init+0x668>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d05e      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a57      	ldr	r2, [pc, #348]	; (8002348 <HAL_DMA_Init+0x66c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d059      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a56      	ldr	r2, [pc, #344]	; (800234c <HAL_DMA_Init+0x670>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d054      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a54      	ldr	r2, [pc, #336]	; (8002350 <HAL_DMA_Init+0x674>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d04f      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a53      	ldr	r2, [pc, #332]	; (8002354 <HAL_DMA_Init+0x678>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04a      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a51      	ldr	r2, [pc, #324]	; (8002358 <HAL_DMA_Init+0x67c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d045      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a50      	ldr	r2, [pc, #320]	; (800235c <HAL_DMA_Init+0x680>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d040      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a4e      	ldr	r2, [pc, #312]	; (8002360 <HAL_DMA_Init+0x684>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d03b      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a4d      	ldr	r2, [pc, #308]	; (8002364 <HAL_DMA_Init+0x688>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d036      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a4b      	ldr	r2, [pc, #300]	; (8002368 <HAL_DMA_Init+0x68c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d031      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a4a      	ldr	r2, [pc, #296]	; (800236c <HAL_DMA_Init+0x690>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d02c      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a48      	ldr	r2, [pc, #288]	; (8002370 <HAL_DMA_Init+0x694>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d027      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a47      	ldr	r2, [pc, #284]	; (8002374 <HAL_DMA_Init+0x698>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d022      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a45      	ldr	r2, [pc, #276]	; (8002378 <HAL_DMA_Init+0x69c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01d      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a44      	ldr	r2, [pc, #272]	; (800237c <HAL_DMA_Init+0x6a0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d018      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <HAL_DMA_Init+0x6a4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a41      	ldr	r2, [pc, #260]	; (8002384 <HAL_DMA_Init+0x6a8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00e      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a3f      	ldr	r2, [pc, #252]	; (8002388 <HAL_DMA_Init+0x6ac>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a3e      	ldr	r2, [pc, #248]	; (800238c <HAL_DMA_Init+0x6b0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_DMA_Init+0x5c6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3c      	ldr	r2, [pc, #240]	; (8002390 <HAL_DMA_Init+0x6b4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_DMA_Init+0x5ca>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_DMA_Init+0x5cc>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d032      	beq.n	8002312 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f001 fcdf 	bl	8003c70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b80      	cmp	r3, #128	; 0x80
 80022b8:	d102      	bne.n	80022c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <HAL_DMA_Init+0x624>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d80c      	bhi.n	8002300 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f001 fd5c 	bl	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	e008      	b.n	8002312 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	a7fdabf8 	.word	0xa7fdabf8
 8002330:	cccccccd 	.word	0xcccccccd
 8002334:	40020010 	.word	0x40020010
 8002338:	40020028 	.word	0x40020028
 800233c:	40020040 	.word	0x40020040
 8002340:	40020058 	.word	0x40020058
 8002344:	40020070 	.word	0x40020070
 8002348:	40020088 	.word	0x40020088
 800234c:	400200a0 	.word	0x400200a0
 8002350:	400200b8 	.word	0x400200b8
 8002354:	40020410 	.word	0x40020410
 8002358:	40020428 	.word	0x40020428
 800235c:	40020440 	.word	0x40020440
 8002360:	40020458 	.word	0x40020458
 8002364:	40020470 	.word	0x40020470
 8002368:	40020488 	.word	0x40020488
 800236c:	400204a0 	.word	0x400204a0
 8002370:	400204b8 	.word	0x400204b8
 8002374:	58025408 	.word	0x58025408
 8002378:	5802541c 	.word	0x5802541c
 800237c:	58025430 	.word	0x58025430
 8002380:	58025444 	.word	0x58025444
 8002384:	58025458 	.word	0x58025458
 8002388:	5802546c 	.word	0x5802546c
 800238c:	58025480 	.word	0x58025480
 8002390:	58025494 	.word	0x58025494

08002394 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e226      	b.n	80027fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_DMA_Start_IT+0x2a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e21f      	b.n	80027fe <HAL_DMA_Start_IT+0x46a>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	f040 820a 	bne.w	80027e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a68      	ldr	r2, [pc, #416]	; (8002588 <HAL_DMA_Start_IT+0x1f4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d04a      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a66      	ldr	r2, [pc, #408]	; (800258c <HAL_DMA_Start_IT+0x1f8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d045      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a65      	ldr	r2, [pc, #404]	; (8002590 <HAL_DMA_Start_IT+0x1fc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d040      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a63      	ldr	r2, [pc, #396]	; (8002594 <HAL_DMA_Start_IT+0x200>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d03b      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a62      	ldr	r2, [pc, #392]	; (8002598 <HAL_DMA_Start_IT+0x204>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d036      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a60      	ldr	r2, [pc, #384]	; (800259c <HAL_DMA_Start_IT+0x208>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d031      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5f      	ldr	r2, [pc, #380]	; (80025a0 <HAL_DMA_Start_IT+0x20c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d02c      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a5d      	ldr	r2, [pc, #372]	; (80025a4 <HAL_DMA_Start_IT+0x210>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d027      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a5c      	ldr	r2, [pc, #368]	; (80025a8 <HAL_DMA_Start_IT+0x214>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a5a      	ldr	r2, [pc, #360]	; (80025ac <HAL_DMA_Start_IT+0x218>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01d      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a59      	ldr	r2, [pc, #356]	; (80025b0 <HAL_DMA_Start_IT+0x21c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d018      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a57      	ldr	r2, [pc, #348]	; (80025b4 <HAL_DMA_Start_IT+0x220>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a56      	ldr	r2, [pc, #344]	; (80025b8 <HAL_DMA_Start_IT+0x224>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00e      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a54      	ldr	r2, [pc, #336]	; (80025bc <HAL_DMA_Start_IT+0x228>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a53      	ldr	r2, [pc, #332]	; (80025c0 <HAL_DMA_Start_IT+0x22c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_DMA_Start_IT+0xee>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <HAL_DMA_Start_IT+0x230>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d108      	bne.n	8002494 <HAL_DMA_Start_IT+0x100>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_DMA_Start_IT+0x110>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f001 f906 	bl	80036bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a34      	ldr	r2, [pc, #208]	; (8002588 <HAL_DMA_Start_IT+0x1f4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d04a      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a33      	ldr	r2, [pc, #204]	; (800258c <HAL_DMA_Start_IT+0x1f8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d045      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a31      	ldr	r2, [pc, #196]	; (8002590 <HAL_DMA_Start_IT+0x1fc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d040      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a30      	ldr	r2, [pc, #192]	; (8002594 <HAL_DMA_Start_IT+0x200>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d03b      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2e      	ldr	r2, [pc, #184]	; (8002598 <HAL_DMA_Start_IT+0x204>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d036      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2d      	ldr	r2, [pc, #180]	; (800259c <HAL_DMA_Start_IT+0x208>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d031      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_DMA_Start_IT+0x20c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d02c      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <HAL_DMA_Start_IT+0x210>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d027      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a28      	ldr	r2, [pc, #160]	; (80025a8 <HAL_DMA_Start_IT+0x214>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d022      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a27      	ldr	r2, [pc, #156]	; (80025ac <HAL_DMA_Start_IT+0x218>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d01d      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <HAL_DMA_Start_IT+0x21c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d018      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <HAL_DMA_Start_IT+0x220>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a22      	ldr	r2, [pc, #136]	; (80025b8 <HAL_DMA_Start_IT+0x224>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00e      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_DMA_Start_IT+0x228>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d009      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_DMA_Start_IT+0x22c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_DMA_Start_IT+0x1bc>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <HAL_DMA_Start_IT+0x230>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Start_IT+0x1c0>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_DMA_Start_IT+0x1c2>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d036      	beq.n	80025c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 021e 	bic.w	r2, r3, #30
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0216 	orr.w	r2, r2, #22
 800256c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03e      	beq.n	80025f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0208 	orr.w	r2, r2, #8
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e035      	b.n	80025f4 <HAL_DMA_Start_IT+0x260>
 8002588:	40020010 	.word	0x40020010
 800258c:	40020028 	.word	0x40020028
 8002590:	40020040 	.word	0x40020040
 8002594:	40020058 	.word	0x40020058
 8002598:	40020070 	.word	0x40020070
 800259c:	40020088 	.word	0x40020088
 80025a0:	400200a0 	.word	0x400200a0
 80025a4:	400200b8 	.word	0x400200b8
 80025a8:	40020410 	.word	0x40020410
 80025ac:	40020428 	.word	0x40020428
 80025b0:	40020440 	.word	0x40020440
 80025b4:	40020458 	.word	0x40020458
 80025b8:	40020470 	.word	0x40020470
 80025bc:	40020488 	.word	0x40020488
 80025c0:	400204a0 	.word	0x400204a0
 80025c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 020e 	bic.w	r2, r3, #14
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 020a 	orr.w	r2, r2, #10
 80025da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0204 	orr.w	r2, r2, #4
 80025f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a83      	ldr	r2, [pc, #524]	; (8002808 <HAL_DMA_Start_IT+0x474>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d072      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a82      	ldr	r2, [pc, #520]	; (800280c <HAL_DMA_Start_IT+0x478>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d06d      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a80      	ldr	r2, [pc, #512]	; (8002810 <HAL_DMA_Start_IT+0x47c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d068      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7f      	ldr	r2, [pc, #508]	; (8002814 <HAL_DMA_Start_IT+0x480>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d063      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7d      	ldr	r2, [pc, #500]	; (8002818 <HAL_DMA_Start_IT+0x484>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d05e      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7c      	ldr	r2, [pc, #496]	; (800281c <HAL_DMA_Start_IT+0x488>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d059      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a7a      	ldr	r2, [pc, #488]	; (8002820 <HAL_DMA_Start_IT+0x48c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d054      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a79      	ldr	r2, [pc, #484]	; (8002824 <HAL_DMA_Start_IT+0x490>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d04f      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a77      	ldr	r2, [pc, #476]	; (8002828 <HAL_DMA_Start_IT+0x494>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d04a      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a76      	ldr	r2, [pc, #472]	; (800282c <HAL_DMA_Start_IT+0x498>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d045      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a74      	ldr	r2, [pc, #464]	; (8002830 <HAL_DMA_Start_IT+0x49c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d040      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a73      	ldr	r2, [pc, #460]	; (8002834 <HAL_DMA_Start_IT+0x4a0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d03b      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a71      	ldr	r2, [pc, #452]	; (8002838 <HAL_DMA_Start_IT+0x4a4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d036      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a70      	ldr	r2, [pc, #448]	; (800283c <HAL_DMA_Start_IT+0x4a8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d031      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6e      	ldr	r2, [pc, #440]	; (8002840 <HAL_DMA_Start_IT+0x4ac>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02c      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6d      	ldr	r2, [pc, #436]	; (8002844 <HAL_DMA_Start_IT+0x4b0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d027      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6b      	ldr	r2, [pc, #428]	; (8002848 <HAL_DMA_Start_IT+0x4b4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d022      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6a      	ldr	r2, [pc, #424]	; (800284c <HAL_DMA_Start_IT+0x4b8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01d      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a68      	ldr	r2, [pc, #416]	; (8002850 <HAL_DMA_Start_IT+0x4bc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d018      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a67      	ldr	r2, [pc, #412]	; (8002854 <HAL_DMA_Start_IT+0x4c0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_DMA_Start_IT+0x4c4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00e      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a64      	ldr	r2, [pc, #400]	; (800285c <HAL_DMA_Start_IT+0x4c8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a62      	ldr	r2, [pc, #392]	; (8002860 <HAL_DMA_Start_IT+0x4cc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_DMA_Start_IT+0x350>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a61      	ldr	r2, [pc, #388]	; (8002864 <HAL_DMA_Start_IT+0x4d0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_DMA_Start_IT+0x354>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_DMA_Start_IT+0x356>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002722:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a37      	ldr	r2, [pc, #220]	; (8002808 <HAL_DMA_Start_IT+0x474>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d04a      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a36      	ldr	r2, [pc, #216]	; (800280c <HAL_DMA_Start_IT+0x478>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d045      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_DMA_Start_IT+0x47c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d040      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a33      	ldr	r2, [pc, #204]	; (8002814 <HAL_DMA_Start_IT+0x480>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d03b      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a31      	ldr	r2, [pc, #196]	; (8002818 <HAL_DMA_Start_IT+0x484>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d036      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a30      	ldr	r2, [pc, #192]	; (800281c <HAL_DMA_Start_IT+0x488>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d031      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2e      	ldr	r2, [pc, #184]	; (8002820 <HAL_DMA_Start_IT+0x48c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d02c      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2d      	ldr	r2, [pc, #180]	; (8002824 <HAL_DMA_Start_IT+0x490>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d027      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2b      	ldr	r2, [pc, #172]	; (8002828 <HAL_DMA_Start_IT+0x494>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d022      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2a      	ldr	r2, [pc, #168]	; (800282c <HAL_DMA_Start_IT+0x498>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d01d      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a28      	ldr	r2, [pc, #160]	; (8002830 <HAL_DMA_Start_IT+0x49c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d018      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a27      	ldr	r2, [pc, #156]	; (8002834 <HAL_DMA_Start_IT+0x4a0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a25      	ldr	r2, [pc, #148]	; (8002838 <HAL_DMA_Start_IT+0x4a4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00e      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a24      	ldr	r2, [pc, #144]	; (800283c <HAL_DMA_Start_IT+0x4a8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a22      	ldr	r2, [pc, #136]	; (8002840 <HAL_DMA_Start_IT+0x4ac>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_DMA_Start_IT+0x430>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <HAL_DMA_Start_IT+0x4b0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d108      	bne.n	80027d6 <HAL_DMA_Start_IT+0x442>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e012      	b.n	80027fc <HAL_DMA_Start_IT+0x468>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e009      	b.n	80027fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40020010 	.word	0x40020010
 800280c:	40020028 	.word	0x40020028
 8002810:	40020040 	.word	0x40020040
 8002814:	40020058 	.word	0x40020058
 8002818:	40020070 	.word	0x40020070
 800281c:	40020088 	.word	0x40020088
 8002820:	400200a0 	.word	0x400200a0
 8002824:	400200b8 	.word	0x400200b8
 8002828:	40020410 	.word	0x40020410
 800282c:	40020428 	.word	0x40020428
 8002830:	40020440 	.word	0x40020440
 8002834:	40020458 	.word	0x40020458
 8002838:	40020470 	.word	0x40020470
 800283c:	40020488 	.word	0x40020488
 8002840:	400204a0 	.word	0x400204a0
 8002844:	400204b8 	.word	0x400204b8
 8002848:	58025408 	.word	0x58025408
 800284c:	5802541c 	.word	0x5802541c
 8002850:	58025430 	.word	0x58025430
 8002854:	58025444 	.word	0x58025444
 8002858:	58025458 	.word	0x58025458
 800285c:	5802546c 	.word	0x5802546c
 8002860:	58025480 	.word	0x58025480
 8002864:	58025494 	.word	0x58025494

08002868 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002874:	4b67      	ldr	r3, [pc, #412]	; (8002a14 <HAL_DMA_IRQHandler+0x1ac>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a67      	ldr	r2, [pc, #412]	; (8002a18 <HAL_DMA_IRQHandler+0x1b0>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a5f      	ldr	r2, [pc, #380]	; (8002a1c <HAL_DMA_IRQHandler+0x1b4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04a      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a5d      	ldr	r2, [pc, #372]	; (8002a20 <HAL_DMA_IRQHandler+0x1b8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d045      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <HAL_DMA_IRQHandler+0x1bc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d040      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5a      	ldr	r2, [pc, #360]	; (8002a28 <HAL_DMA_IRQHandler+0x1c0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03b      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a59      	ldr	r2, [pc, #356]	; (8002a2c <HAL_DMA_IRQHandler+0x1c4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d036      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a57      	ldr	r2, [pc, #348]	; (8002a30 <HAL_DMA_IRQHandler+0x1c8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a56      	ldr	r2, [pc, #344]	; (8002a34 <HAL_DMA_IRQHandler+0x1cc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02c      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a54      	ldr	r2, [pc, #336]	; (8002a38 <HAL_DMA_IRQHandler+0x1d0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d027      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a53      	ldr	r2, [pc, #332]	; (8002a3c <HAL_DMA_IRQHandler+0x1d4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a51      	ldr	r2, [pc, #324]	; (8002a40 <HAL_DMA_IRQHandler+0x1d8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a50      	ldr	r2, [pc, #320]	; (8002a44 <HAL_DMA_IRQHandler+0x1dc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a4e      	ldr	r2, [pc, #312]	; (8002a48 <HAL_DMA_IRQHandler+0x1e0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a4d      	ldr	r2, [pc, #308]	; (8002a4c <HAL_DMA_IRQHandler+0x1e4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4b      	ldr	r2, [pc, #300]	; (8002a50 <HAL_DMA_IRQHandler+0x1e8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <HAL_DMA_IRQHandler+0x1ec>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_DMA_IRQHandler+0xd2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a48      	ldr	r2, [pc, #288]	; (8002a58 <HAL_DMA_IRQHandler+0x1f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_DMA_IRQHandler+0xd6>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_DMA_IRQHandler+0xd8>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 842b 	beq.w	800319c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2208      	movs	r2, #8
 8002950:	409a      	lsls	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80a2 	beq.w	8002aa0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2e      	ldr	r2, [pc, #184]	; (8002a1c <HAL_DMA_IRQHandler+0x1b4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d04a      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_DMA_IRQHandler+0x1b8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d045      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_DMA_IRQHandler+0x1bc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d040      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <HAL_DMA_IRQHandler+0x1c0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d03b      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <HAL_DMA_IRQHandler+0x1c4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d036      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_DMA_IRQHandler+0x1c8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d031      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <HAL_DMA_IRQHandler+0x1cc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02c      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <HAL_DMA_IRQHandler+0x1d0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d027      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <HAL_DMA_IRQHandler+0x1d4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d022      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_DMA_IRQHandler+0x1d8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d01d      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_DMA_IRQHandler+0x1dc>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d018      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <HAL_DMA_IRQHandler+0x1e0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_DMA_IRQHandler+0x1e4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_DMA_IRQHandler+0x1e8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d009      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_DMA_IRQHandler+0x1ec>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_IRQHandler+0x194>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_DMA_IRQHandler+0x1f0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d12f      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x1f4>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	e02e      	b.n	8002a70 <HAL_DMA_IRQHandler+0x208>
 8002a12:	bf00      	nop
 8002a14:	24000000 	.word	0x24000000
 8002a18:	1b4e81b5 	.word	0x1b4e81b5
 8002a1c:	40020010 	.word	0x40020010
 8002a20:	40020028 	.word	0x40020028
 8002a24:	40020040 	.word	0x40020040
 8002a28:	40020058 	.word	0x40020058
 8002a2c:	40020070 	.word	0x40020070
 8002a30:	40020088 	.word	0x40020088
 8002a34:	400200a0 	.word	0x400200a0
 8002a38:	400200b8 	.word	0x400200b8
 8002a3c:	40020410 	.word	0x40020410
 8002a40:	40020428 	.word	0x40020428
 8002a44:	40020440 	.word	0x40020440
 8002a48:	40020458 	.word	0x40020458
 8002a4c:	40020470 	.word	0x40020470
 8002a50:	40020488 	.word	0x40020488
 8002a54:	400204a0 	.word	0x400204a0
 8002a58:	400204b8 	.word	0x400204b8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d06e      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a69      	ldr	r2, [pc, #420]	; (8002c60 <HAL_DMA_IRQHandler+0x3f8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d04a      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <HAL_DMA_IRQHandler+0x3fc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d045      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a66      	ldr	r2, [pc, #408]	; (8002c68 <HAL_DMA_IRQHandler+0x400>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d040      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a64      	ldr	r2, [pc, #400]	; (8002c6c <HAL_DMA_IRQHandler+0x404>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d03b      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a63      	ldr	r2, [pc, #396]	; (8002c70 <HAL_DMA_IRQHandler+0x408>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d036      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a61      	ldr	r2, [pc, #388]	; (8002c74 <HAL_DMA_IRQHandler+0x40c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d031      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a60      	ldr	r2, [pc, #384]	; (8002c78 <HAL_DMA_IRQHandler+0x410>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d02c      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a5e      	ldr	r2, [pc, #376]	; (8002c7c <HAL_DMA_IRQHandler+0x414>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d027      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a5d      	ldr	r2, [pc, #372]	; (8002c80 <HAL_DMA_IRQHandler+0x418>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_DMA_IRQHandler+0x41c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01d      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <HAL_DMA_IRQHandler+0x420>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d018      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_DMA_IRQHandler+0x424>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a57      	ldr	r2, [pc, #348]	; (8002c90 <HAL_DMA_IRQHandler+0x428>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a55      	ldr	r2, [pc, #340]	; (8002c94 <HAL_DMA_IRQHandler+0x42c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a54      	ldr	r2, [pc, #336]	; (8002c98 <HAL_DMA_IRQHandler+0x430>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2ee>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_DMA_IRQHandler+0x434>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10a      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x304>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e003      	b.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2300      	movs	r3, #0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2201      	movs	r2, #1
 8002b82:	409a      	lsls	r2, r3
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f043 0202 	orr.w	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 808f 	beq.w	8002cc8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <HAL_DMA_IRQHandler+0x3f8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d04a      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <HAL_DMA_IRQHandler+0x3fc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d045      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <HAL_DMA_IRQHandler+0x400>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d040      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_DMA_IRQHandler+0x404>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d03b      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <HAL_DMA_IRQHandler+0x408>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d036      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <HAL_DMA_IRQHandler+0x40c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d031      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <HAL_DMA_IRQHandler+0x410>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d02c      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_DMA_IRQHandler+0x414>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d027      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <HAL_DMA_IRQHandler+0x418>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <HAL_DMA_IRQHandler+0x41c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01d      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_DMA_IRQHandler+0x420>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_DMA_IRQHandler+0x424>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_DMA_IRQHandler+0x428>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_DMA_IRQHandler+0x42c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_DMA_IRQHandler+0x430>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x3e2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <HAL_DMA_IRQHandler+0x434>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d12a      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x438>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e023      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x440>
 8002c60:	40020010 	.word	0x40020010
 8002c64:	40020028 	.word	0x40020028
 8002c68:	40020040 	.word	0x40020040
 8002c6c:	40020058 	.word	0x40020058
 8002c70:	40020070 	.word	0x40020070
 8002c74:	40020088 	.word	0x40020088
 8002c78:	400200a0 	.word	0x400200a0
 8002c7c:	400200b8 	.word	0x400200b8
 8002c80:	40020410 	.word	0x40020410
 8002c84:	40020428 	.word	0x40020428
 8002c88:	40020440 	.word	0x40020440
 8002c8c:	40020458 	.word	0x40020458
 8002c90:	40020470 	.word	0x40020470
 8002c94:	40020488 	.word	0x40020488
 8002c98:	400204a0 	.word	0x400204a0
 8002c9c:	400204b8 	.word	0x400204b8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	f043 0204 	orr.w	r2, r3, #4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a6 	beq.w	8002e2a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a85      	ldr	r2, [pc, #532]	; (8002ef8 <HAL_DMA_IRQHandler+0x690>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04a      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a83      	ldr	r2, [pc, #524]	; (8002efc <HAL_DMA_IRQHandler+0x694>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d045      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a82      	ldr	r2, [pc, #520]	; (8002f00 <HAL_DMA_IRQHandler+0x698>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d040      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_DMA_IRQHandler+0x69c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d03b      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7f      	ldr	r2, [pc, #508]	; (8002f08 <HAL_DMA_IRQHandler+0x6a0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d036      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a7d      	ldr	r2, [pc, #500]	; (8002f0c <HAL_DMA_IRQHandler+0x6a4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d031      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7c      	ldr	r2, [pc, #496]	; (8002f10 <HAL_DMA_IRQHandler+0x6a8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d02c      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7a      	ldr	r2, [pc, #488]	; (8002f14 <HAL_DMA_IRQHandler+0x6ac>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d027      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a79      	ldr	r2, [pc, #484]	; (8002f18 <HAL_DMA_IRQHandler+0x6b0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a77      	ldr	r2, [pc, #476]	; (8002f1c <HAL_DMA_IRQHandler+0x6b4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01d      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a76      	ldr	r2, [pc, #472]	; (8002f20 <HAL_DMA_IRQHandler+0x6b8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a74      	ldr	r2, [pc, #464]	; (8002f24 <HAL_DMA_IRQHandler+0x6bc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a73      	ldr	r2, [pc, #460]	; (8002f28 <HAL_DMA_IRQHandler+0x6c0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00e      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a71      	ldr	r2, [pc, #452]	; (8002f2c <HAL_DMA_IRQHandler+0x6c4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a70      	ldr	r2, [pc, #448]	; (8002f30 <HAL_DMA_IRQHandler+0x6c8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x516>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_DMA_IRQHandler+0x6cc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10a      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x52c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e009      	b.n	8002da8 <HAL_DMA_IRQHandler+0x540>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d03e      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2210      	movs	r2, #16
 8002db6:	409a      	lsls	r2, r3
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d108      	bne.n	8002dea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d024      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
 8002de8:	e01f      	b.n	8002e2a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01b      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
 8002dfa:	e016      	b.n	8002e2a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d107      	bne.n	8002e1a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0208 	bic.w	r2, r2, #8
 8002e18:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2220      	movs	r2, #32
 8002e34:	409a      	lsls	r2, r3
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8110 	beq.w	8003060 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <HAL_DMA_IRQHandler+0x690>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d04a      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <HAL_DMA_IRQHandler+0x694>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d045      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <HAL_DMA_IRQHandler+0x698>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d040      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <HAL_DMA_IRQHandler+0x69c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d03b      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <HAL_DMA_IRQHandler+0x6a0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d036      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <HAL_DMA_IRQHandler+0x6a4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d031      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <HAL_DMA_IRQHandler+0x6a8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d02c      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <HAL_DMA_IRQHandler+0x6ac>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d027      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_DMA_IRQHandler+0x6b0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d022      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_DMA_IRQHandler+0x6b4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d01d      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <HAL_DMA_IRQHandler+0x6b8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d018      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <HAL_DMA_IRQHandler+0x6bc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <HAL_DMA_IRQHandler+0x6c0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_DMA_IRQHandler+0x6c4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_DMA_IRQHandler+0x6c8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x678>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_DMA_IRQHandler+0x6cc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d12b      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x6d0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf14      	ite	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2300      	moveq	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	e02a      	b.n	8002f4c <HAL_DMA_IRQHandler+0x6e4>
 8002ef6:	bf00      	nop
 8002ef8:	40020010 	.word	0x40020010
 8002efc:	40020028 	.word	0x40020028
 8002f00:	40020040 	.word	0x40020040
 8002f04:	40020058 	.word	0x40020058
 8002f08:	40020070 	.word	0x40020070
 8002f0c:	40020088 	.word	0x40020088
 8002f10:	400200a0 	.word	0x400200a0
 8002f14:	400200b8 	.word	0x400200b8
 8002f18:	40020410 	.word	0x40020410
 8002f1c:	40020428 	.word	0x40020428
 8002f20:	40020440 	.word	0x40020440
 8002f24:	40020458 	.word	0x40020458
 8002f28:	40020470 	.word	0x40020470
 8002f2c:	40020488 	.word	0x40020488
 8002f30:	400204a0 	.word	0x400204a0
 8002f34:	400204b8 	.word	0x400204b8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8087 	beq.w	8003060 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d139      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0216 	bic.w	r2, r2, #22
 8002f7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x736>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0208 	bic.w	r2, r2, #8
 8002fac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	223f      	movs	r2, #63	; 0x3f
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 834a 	beq.w	800366c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4798      	blx	r3
          }
          return;
 8002fe0:	e344      	b.n	800366c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d018      	beq.n	8003022 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	2b00      	cmp	r3, #0
 8003004:	d02c      	beq.n	8003060 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4798      	blx	r3
 800300e:	e027      	b.n	8003060 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d023      	beq.n	8003060 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
 8003020:	e01e      	b.n	8003060 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10f      	bne.n	8003050 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0210 	bic.w	r2, r2, #16
 800303e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8306 	beq.w	8003676 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8088 	beq.w	8003188 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2204      	movs	r2, #4
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a7a      	ldr	r2, [pc, #488]	; (8003270 <HAL_DMA_IRQHandler+0xa08>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d04a      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a79      	ldr	r2, [pc, #484]	; (8003274 <HAL_DMA_IRQHandler+0xa0c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d045      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a77      	ldr	r2, [pc, #476]	; (8003278 <HAL_DMA_IRQHandler+0xa10>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d040      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a76      	ldr	r2, [pc, #472]	; (800327c <HAL_DMA_IRQHandler+0xa14>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d03b      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a74      	ldr	r2, [pc, #464]	; (8003280 <HAL_DMA_IRQHandler+0xa18>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d036      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a73      	ldr	r2, [pc, #460]	; (8003284 <HAL_DMA_IRQHandler+0xa1c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d031      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a71      	ldr	r2, [pc, #452]	; (8003288 <HAL_DMA_IRQHandler+0xa20>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d02c      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a70      	ldr	r2, [pc, #448]	; (800328c <HAL_DMA_IRQHandler+0xa24>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d027      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <HAL_DMA_IRQHandler+0xa28>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d022      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6d      	ldr	r2, [pc, #436]	; (8003294 <HAL_DMA_IRQHandler+0xa2c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d01d      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6b      	ldr	r2, [pc, #428]	; (8003298 <HAL_DMA_IRQHandler+0xa30>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d018      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_DMA_IRQHandler+0xa34>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d013      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a68      	ldr	r2, [pc, #416]	; (80032a0 <HAL_DMA_IRQHandler+0xa38>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00e      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <HAL_DMA_IRQHandler+0xa3c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d009      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_DMA_IRQHandler+0xa40>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d004      	beq.n	8003120 <HAL_DMA_IRQHandler+0x8b8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a64      	ldr	r2, [pc, #400]	; (80032ac <HAL_DMA_IRQHandler+0xa44>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d108      	bne.n	8003132 <HAL_DMA_IRQHandler+0x8ca>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e007      	b.n	8003142 <HAL_DMA_IRQHandler+0x8da>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314a:	429a      	cmp	r2, r3
 800314c:	d307      	bcc.n	800315e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f2      	bne.n	8003142 <HAL_DMA_IRQHandler+0x8da>
 800315c:	e000      	b.n	8003160 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800315e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2203      	movs	r2, #3
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800317e:	e003      	b.n	8003188 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8272 	beq.w	8003676 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
 800319a:	e26c      	b.n	8003676 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a43      	ldr	r2, [pc, #268]	; (80032b0 <HAL_DMA_IRQHandler+0xa48>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d022      	beq.n	80031ec <HAL_DMA_IRQHandler+0x984>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a42      	ldr	r2, [pc, #264]	; (80032b4 <HAL_DMA_IRQHandler+0xa4c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d01d      	beq.n	80031ec <HAL_DMA_IRQHandler+0x984>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a40      	ldr	r2, [pc, #256]	; (80032b8 <HAL_DMA_IRQHandler+0xa50>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d018      	beq.n	80031ec <HAL_DMA_IRQHandler+0x984>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a3f      	ldr	r2, [pc, #252]	; (80032bc <HAL_DMA_IRQHandler+0xa54>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_DMA_IRQHandler+0x984>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3d      	ldr	r2, [pc, #244]	; (80032c0 <HAL_DMA_IRQHandler+0xa58>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00e      	beq.n	80031ec <HAL_DMA_IRQHandler+0x984>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <HAL_DMA_IRQHandler+0xa5c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_DMA_IRQHandler+0x984>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3a      	ldr	r2, [pc, #232]	; (80032c8 <HAL_DMA_IRQHandler+0xa60>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_DMA_IRQHandler+0x984>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a39      	ldr	r2, [pc, #228]	; (80032cc <HAL_DMA_IRQHandler+0xa64>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x988>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_DMA_IRQHandler+0x98a>
 80031f0:	2300      	movs	r3, #0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 823f 	beq.w	8003676 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80cd 	beq.w	80033b0 <HAL_DMA_IRQHandler+0xb48>
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80c7 	beq.w	80033b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2204      	movs	r2, #4
 800322c:	409a      	lsls	r2, r3
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d049      	beq.n	80032d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8210 	beq.w	8003670 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003258:	e20a      	b.n	8003670 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8206 	beq.w	8003670 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800326c:	e200      	b.n	8003670 <HAL_DMA_IRQHandler+0xe08>
 800326e:	bf00      	nop
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	58025408 	.word	0x58025408
 80032b4:	5802541c 	.word	0x5802541c
 80032b8:	58025430 	.word	0x58025430
 80032bc:	58025444 	.word	0x58025444
 80032c0:	58025458 	.word	0x58025458
 80032c4:	5802546c 	.word	0x5802546c
 80032c8:	58025480 	.word	0x58025480
 80032cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d160      	bne.n	800339c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a8c      	ldr	r2, [pc, #560]	; (8003510 <HAL_DMA_IRQHandler+0xca8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d04a      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a8a      	ldr	r2, [pc, #552]	; (8003514 <HAL_DMA_IRQHandler+0xcac>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d045      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a89      	ldr	r2, [pc, #548]	; (8003518 <HAL_DMA_IRQHandler+0xcb0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d040      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a87      	ldr	r2, [pc, #540]	; (800351c <HAL_DMA_IRQHandler+0xcb4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d03b      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a86      	ldr	r2, [pc, #536]	; (8003520 <HAL_DMA_IRQHandler+0xcb8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d036      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a84      	ldr	r2, [pc, #528]	; (8003524 <HAL_DMA_IRQHandler+0xcbc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d031      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a83      	ldr	r2, [pc, #524]	; (8003528 <HAL_DMA_IRQHandler+0xcc0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d02c      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a81      	ldr	r2, [pc, #516]	; (800352c <HAL_DMA_IRQHandler+0xcc4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d027      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a80      	ldr	r2, [pc, #512]	; (8003530 <HAL_DMA_IRQHandler+0xcc8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a7e      	ldr	r2, [pc, #504]	; (8003534 <HAL_DMA_IRQHandler+0xccc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01d      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7d      	ldr	r2, [pc, #500]	; (8003538 <HAL_DMA_IRQHandler+0xcd0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d018      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a7b      	ldr	r2, [pc, #492]	; (800353c <HAL_DMA_IRQHandler+0xcd4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7a      	ldr	r2, [pc, #488]	; (8003540 <HAL_DMA_IRQHandler+0xcd8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a78      	ldr	r2, [pc, #480]	; (8003544 <HAL_DMA_IRQHandler+0xcdc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a77      	ldr	r2, [pc, #476]	; (8003548 <HAL_DMA_IRQHandler+0xce0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_DMA_IRQHandler+0xb12>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a75      	ldr	r2, [pc, #468]	; (800354c <HAL_DMA_IRQHandler+0xce4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d108      	bne.n	800338c <HAL_DMA_IRQHandler+0xb24>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0208 	bic.w	r2, r2, #8
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e007      	b.n	800339c <HAL_DMA_IRQHandler+0xb34>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0204 	bic.w	r2, r2, #4
 800339a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8165 	beq.w	8003670 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ae:	e15f      	b.n	8003670 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2202      	movs	r2, #2
 80033ba:	409a      	lsls	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80c5 	beq.w	8003550 <HAL_DMA_IRQHandler+0xce8>
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80bf 	beq.w	8003550 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2202      	movs	r2, #2
 80033dc:	409a      	lsls	r2, r3
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d018      	beq.n	800341e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 813a 	beq.w	8003674 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003408:	e134      	b.n	8003674 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8130 	beq.w	8003674 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800341c:	e12a      	b.n	8003674 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d168      	bne.n	80034fa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a38      	ldr	r2, [pc, #224]	; (8003510 <HAL_DMA_IRQHandler+0xca8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d04a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a37      	ldr	r2, [pc, #220]	; (8003514 <HAL_DMA_IRQHandler+0xcac>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d045      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a35      	ldr	r2, [pc, #212]	; (8003518 <HAL_DMA_IRQHandler+0xcb0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d040      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a34      	ldr	r2, [pc, #208]	; (800351c <HAL_DMA_IRQHandler+0xcb4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d03b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a32      	ldr	r2, [pc, #200]	; (8003520 <HAL_DMA_IRQHandler+0xcb8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d036      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a31      	ldr	r2, [pc, #196]	; (8003524 <HAL_DMA_IRQHandler+0xcbc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d031      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2f      	ldr	r2, [pc, #188]	; (8003528 <HAL_DMA_IRQHandler+0xcc0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2e      	ldr	r2, [pc, #184]	; (800352c <HAL_DMA_IRQHandler+0xcc4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d027      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <HAL_DMA_IRQHandler+0xcc8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d022      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_DMA_IRQHandler+0xccc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d01d      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a29      	ldr	r2, [pc, #164]	; (8003538 <HAL_DMA_IRQHandler+0xcd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a28      	ldr	r2, [pc, #160]	; (800353c <HAL_DMA_IRQHandler+0xcd4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <HAL_DMA_IRQHandler+0xcd8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a25      	ldr	r2, [pc, #148]	; (8003544 <HAL_DMA_IRQHandler+0xcdc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a23      	ldr	r2, [pc, #140]	; (8003548 <HAL_DMA_IRQHandler+0xce0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xc60>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a22      	ldr	r2, [pc, #136]	; (800354c <HAL_DMA_IRQHandler+0xce4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <HAL_DMA_IRQHandler+0xc72>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0214 	bic.w	r2, r2, #20
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e007      	b.n	80034ea <HAL_DMA_IRQHandler+0xc82>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 020a 	bic.w	r2, r2, #10
 80034e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80b8 	beq.w	8003674 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800350c:	e0b2      	b.n	8003674 <HAL_DMA_IRQHandler+0xe0c>
 800350e:	bf00      	nop
 8003510:	40020010 	.word	0x40020010
 8003514:	40020028 	.word	0x40020028
 8003518:	40020040 	.word	0x40020040
 800351c:	40020058 	.word	0x40020058
 8003520:	40020070 	.word	0x40020070
 8003524:	40020088 	.word	0x40020088
 8003528:	400200a0 	.word	0x400200a0
 800352c:	400200b8 	.word	0x400200b8
 8003530:	40020410 	.word	0x40020410
 8003534:	40020428 	.word	0x40020428
 8003538:	40020440 	.word	0x40020440
 800353c:	40020458 	.word	0x40020458
 8003540:	40020470 	.word	0x40020470
 8003544:	40020488 	.word	0x40020488
 8003548:	400204a0 	.word	0x400204a0
 800354c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2208      	movs	r2, #8
 800355a:	409a      	lsls	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8088 	beq.w	8003676 <HAL_DMA_IRQHandler+0xe0e>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8082 	beq.w	8003676 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a41      	ldr	r2, [pc, #260]	; (800367c <HAL_DMA_IRQHandler+0xe14>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d04a      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a3f      	ldr	r2, [pc, #252]	; (8003680 <HAL_DMA_IRQHandler+0xe18>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d045      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a3e      	ldr	r2, [pc, #248]	; (8003684 <HAL_DMA_IRQHandler+0xe1c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d040      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3c      	ldr	r2, [pc, #240]	; (8003688 <HAL_DMA_IRQHandler+0xe20>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d03b      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a3b      	ldr	r2, [pc, #236]	; (800368c <HAL_DMA_IRQHandler+0xe24>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d036      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a39      	ldr	r2, [pc, #228]	; (8003690 <HAL_DMA_IRQHandler+0xe28>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d031      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a38      	ldr	r2, [pc, #224]	; (8003694 <HAL_DMA_IRQHandler+0xe2c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d02c      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a36      	ldr	r2, [pc, #216]	; (8003698 <HAL_DMA_IRQHandler+0xe30>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d027      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a35      	ldr	r2, [pc, #212]	; (800369c <HAL_DMA_IRQHandler+0xe34>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a33      	ldr	r2, [pc, #204]	; (80036a0 <HAL_DMA_IRQHandler+0xe38>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01d      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a32      	ldr	r2, [pc, #200]	; (80036a4 <HAL_DMA_IRQHandler+0xe3c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d018      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a30      	ldr	r2, [pc, #192]	; (80036a8 <HAL_DMA_IRQHandler+0xe40>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <HAL_DMA_IRQHandler+0xe44>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <HAL_DMA_IRQHandler+0xe48>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2c      	ldr	r2, [pc, #176]	; (80036b4 <HAL_DMA_IRQHandler+0xe4c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_DMA_IRQHandler+0xdaa>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2a      	ldr	r2, [pc, #168]	; (80036b8 <HAL_DMA_IRQHandler+0xe50>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <HAL_DMA_IRQHandler+0xdbc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 021c 	bic.w	r2, r2, #28
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e007      	b.n	8003634 <HAL_DMA_IRQHandler+0xdcc>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 020e 	bic.w	r2, r2, #14
 8003632:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2201      	movs	r2, #1
 800363e:	409a      	lsls	r2, r3
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	e004      	b.n	8003676 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800366c:	bf00      	nop
 800366e:	e002      	b.n	8003676 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003674:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003676:	3728      	adds	r7, #40	; 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40020010 	.word	0x40020010
 8003680:	40020028 	.word	0x40020028
 8003684:	40020040 	.word	0x40020040
 8003688:	40020058 	.word	0x40020058
 800368c:	40020070 	.word	0x40020070
 8003690:	40020088 	.word	0x40020088
 8003694:	400200a0 	.word	0x400200a0
 8003698:	400200b8 	.word	0x400200b8
 800369c:	40020410 	.word	0x40020410
 80036a0:	40020428 	.word	0x40020428
 80036a4:	40020440 	.word	0x40020440
 80036a8:	40020458 	.word	0x40020458
 80036ac:	40020470 	.word	0x40020470
 80036b0:	40020488 	.word	0x40020488
 80036b4:	400204a0 	.word	0x400204a0
 80036b8:	400204b8 	.word	0x400204b8

080036bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a84      	ldr	r2, [pc, #528]	; (80038ec <DMA_SetConfig+0x230>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d072      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a82      	ldr	r2, [pc, #520]	; (80038f0 <DMA_SetConfig+0x234>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d06d      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a81      	ldr	r2, [pc, #516]	; (80038f4 <DMA_SetConfig+0x238>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d068      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a7f      	ldr	r2, [pc, #508]	; (80038f8 <DMA_SetConfig+0x23c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d063      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7e      	ldr	r2, [pc, #504]	; (80038fc <DMA_SetConfig+0x240>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d05e      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7c      	ldr	r2, [pc, #496]	; (8003900 <DMA_SetConfig+0x244>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d059      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7b      	ldr	r2, [pc, #492]	; (8003904 <DMA_SetConfig+0x248>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d054      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a79      	ldr	r2, [pc, #484]	; (8003908 <DMA_SetConfig+0x24c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d04f      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a78      	ldr	r2, [pc, #480]	; (800390c <DMA_SetConfig+0x250>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d04a      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a76      	ldr	r2, [pc, #472]	; (8003910 <DMA_SetConfig+0x254>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d045      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a75      	ldr	r2, [pc, #468]	; (8003914 <DMA_SetConfig+0x258>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d040      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a73      	ldr	r2, [pc, #460]	; (8003918 <DMA_SetConfig+0x25c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d03b      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a72      	ldr	r2, [pc, #456]	; (800391c <DMA_SetConfig+0x260>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d036      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a70      	ldr	r2, [pc, #448]	; (8003920 <DMA_SetConfig+0x264>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d031      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6f      	ldr	r2, [pc, #444]	; (8003924 <DMA_SetConfig+0x268>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d02c      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6d      	ldr	r2, [pc, #436]	; (8003928 <DMA_SetConfig+0x26c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d027      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6c      	ldr	r2, [pc, #432]	; (800392c <DMA_SetConfig+0x270>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d022      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6a      	ldr	r2, [pc, #424]	; (8003930 <DMA_SetConfig+0x274>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01d      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a69      	ldr	r2, [pc, #420]	; (8003934 <DMA_SetConfig+0x278>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d018      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a67      	ldr	r2, [pc, #412]	; (8003938 <DMA_SetConfig+0x27c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a66      	ldr	r2, [pc, #408]	; (800393c <DMA_SetConfig+0x280>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a64      	ldr	r2, [pc, #400]	; (8003940 <DMA_SetConfig+0x284>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a63      	ldr	r2, [pc, #396]	; (8003944 <DMA_SetConfig+0x288>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <DMA_SetConfig+0x10a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a61      	ldr	r2, [pc, #388]	; (8003948 <DMA_SetConfig+0x28c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <DMA_SetConfig+0x10e>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <DMA_SetConfig+0x110>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00d      	beq.n	80037ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a3e      	ldr	r2, [pc, #248]	; (80038ec <DMA_SetConfig+0x230>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d04a      	beq.n	800388c <DMA_SetConfig+0x1d0>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a3d      	ldr	r2, [pc, #244]	; (80038f0 <DMA_SetConfig+0x234>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d045      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <DMA_SetConfig+0x238>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d040      	beq.n	800388c <DMA_SetConfig+0x1d0>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3a      	ldr	r2, [pc, #232]	; (80038f8 <DMA_SetConfig+0x23c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d03b      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a38      	ldr	r2, [pc, #224]	; (80038fc <DMA_SetConfig+0x240>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d036      	beq.n	800388c <DMA_SetConfig+0x1d0>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a37      	ldr	r2, [pc, #220]	; (8003900 <DMA_SetConfig+0x244>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d031      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a35      	ldr	r2, [pc, #212]	; (8003904 <DMA_SetConfig+0x248>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d02c      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a34      	ldr	r2, [pc, #208]	; (8003908 <DMA_SetConfig+0x24c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d027      	beq.n	800388c <DMA_SetConfig+0x1d0>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a32      	ldr	r2, [pc, #200]	; (800390c <DMA_SetConfig+0x250>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d022      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a31      	ldr	r2, [pc, #196]	; (8003910 <DMA_SetConfig+0x254>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d01d      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2f      	ldr	r2, [pc, #188]	; (8003914 <DMA_SetConfig+0x258>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d018      	beq.n	800388c <DMA_SetConfig+0x1d0>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2e      	ldr	r2, [pc, #184]	; (8003918 <DMA_SetConfig+0x25c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2c      	ldr	r2, [pc, #176]	; (800391c <DMA_SetConfig+0x260>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00e      	beq.n	800388c <DMA_SetConfig+0x1d0>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2b      	ldr	r2, [pc, #172]	; (8003920 <DMA_SetConfig+0x264>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d009      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a29      	ldr	r2, [pc, #164]	; (8003924 <DMA_SetConfig+0x268>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <DMA_SetConfig+0x1d0>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a28      	ldr	r2, [pc, #160]	; (8003928 <DMA_SetConfig+0x26c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <DMA_SetConfig+0x1d4>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <DMA_SetConfig+0x1d6>
 8003890:	2300      	movs	r3, #0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d05a      	beq.n	800394c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	223f      	movs	r2, #63	; 0x3f
 80038a0:	409a      	lsls	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d108      	bne.n	80038d8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038d6:	e087      	b.n	80039e8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]
}
 80038e8:	e07e      	b.n	80039e8 <DMA_SetConfig+0x32c>
 80038ea:	bf00      	nop
 80038ec:	40020010 	.word	0x40020010
 80038f0:	40020028 	.word	0x40020028
 80038f4:	40020040 	.word	0x40020040
 80038f8:	40020058 	.word	0x40020058
 80038fc:	40020070 	.word	0x40020070
 8003900:	40020088 	.word	0x40020088
 8003904:	400200a0 	.word	0x400200a0
 8003908:	400200b8 	.word	0x400200b8
 800390c:	40020410 	.word	0x40020410
 8003910:	40020428 	.word	0x40020428
 8003914:	40020440 	.word	0x40020440
 8003918:	40020458 	.word	0x40020458
 800391c:	40020470 	.word	0x40020470
 8003920:	40020488 	.word	0x40020488
 8003924:	400204a0 	.word	0x400204a0
 8003928:	400204b8 	.word	0x400204b8
 800392c:	58025408 	.word	0x58025408
 8003930:	5802541c 	.word	0x5802541c
 8003934:	58025430 	.word	0x58025430
 8003938:	58025444 	.word	0x58025444
 800393c:	58025458 	.word	0x58025458
 8003940:	5802546c 	.word	0x5802546c
 8003944:	58025480 	.word	0x58025480
 8003948:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <DMA_SetConfig+0x338>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d022      	beq.n	800399c <DMA_SetConfig+0x2e0>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <DMA_SetConfig+0x33c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01d      	beq.n	800399c <DMA_SetConfig+0x2e0>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <DMA_SetConfig+0x340>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d018      	beq.n	800399c <DMA_SetConfig+0x2e0>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a24      	ldr	r2, [pc, #144]	; (8003a00 <DMA_SetConfig+0x344>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <DMA_SetConfig+0x2e0>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <DMA_SetConfig+0x348>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00e      	beq.n	800399c <DMA_SetConfig+0x2e0>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <DMA_SetConfig+0x34c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d009      	beq.n	800399c <DMA_SetConfig+0x2e0>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <DMA_SetConfig+0x350>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <DMA_SetConfig+0x2e0>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <DMA_SetConfig+0x354>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <DMA_SetConfig+0x2e4>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <DMA_SetConfig+0x2e6>
 80039a0:	2300      	movs	r3, #0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d020      	beq.n	80039e8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2201      	movs	r2, #1
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d108      	bne.n	80039d8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	60da      	str	r2, [r3, #12]
}
 80039d6:	e007      	b.n	80039e8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	58025408 	.word	0x58025408
 80039f8:	5802541c 	.word	0x5802541c
 80039fc:	58025430 	.word	0x58025430
 8003a00:	58025444 	.word	0x58025444
 8003a04:	58025458 	.word	0x58025458
 8003a08:	5802546c 	.word	0x5802546c
 8003a0c:	58025480 	.word	0x58025480
 8003a10:	58025494 	.word	0x58025494

08003a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <DMA_CalcBaseAndBitshift+0x118>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d04a      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a41      	ldr	r2, [pc, #260]	; (8003b30 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d045      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3f      	ldr	r2, [pc, #252]	; (8003b34 <DMA_CalcBaseAndBitshift+0x120>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d040      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a3e      	ldr	r2, [pc, #248]	; (8003b38 <DMA_CalcBaseAndBitshift+0x124>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d03b      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a3c      	ldr	r2, [pc, #240]	; (8003b3c <DMA_CalcBaseAndBitshift+0x128>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d036      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <DMA_CalcBaseAndBitshift+0x12c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d031      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a39      	ldr	r2, [pc, #228]	; (8003b44 <DMA_CalcBaseAndBitshift+0x130>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02c      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <DMA_CalcBaseAndBitshift+0x134>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d027      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <DMA_CalcBaseAndBitshift+0x138>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d022      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d01d      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a33      	ldr	r2, [pc, #204]	; (8003b54 <DMA_CalcBaseAndBitshift+0x140>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a32      	ldr	r2, [pc, #200]	; (8003b58 <DMA_CalcBaseAndBitshift+0x144>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a30      	ldr	r2, [pc, #192]	; (8003b5c <DMA_CalcBaseAndBitshift+0x148>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2f      	ldr	r2, [pc, #188]	; (8003b60 <DMA_CalcBaseAndBitshift+0x14c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <DMA_CalcBaseAndBitshift+0x150>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <DMA_CalcBaseAndBitshift+0xa8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <DMA_CalcBaseAndBitshift+0x154>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d101      	bne.n	8003ac0 <DMA_CalcBaseAndBitshift+0xac>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <DMA_CalcBaseAndBitshift+0xae>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d024      	beq.n	8003b10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3b10      	subs	r3, #16
 8003ace:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <DMA_CalcBaseAndBitshift+0x158>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <DMA_CalcBaseAndBitshift+0x15c>)
 8003ae0:	5cd3      	ldrb	r3, [r2, r3]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d908      	bls.n	8003b00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <DMA_CalcBaseAndBitshift+0x160>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	1d1a      	adds	r2, r3, #4
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	659a      	str	r2, [r3, #88]	; 0x58
 8003afe:	e00d      	b.n	8003b1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <DMA_CalcBaseAndBitshift+0x160>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b0e:	e005      	b.n	8003b1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40020010 	.word	0x40020010
 8003b30:	40020028 	.word	0x40020028
 8003b34:	40020040 	.word	0x40020040
 8003b38:	40020058 	.word	0x40020058
 8003b3c:	40020070 	.word	0x40020070
 8003b40:	40020088 	.word	0x40020088
 8003b44:	400200a0 	.word	0x400200a0
 8003b48:	400200b8 	.word	0x400200b8
 8003b4c:	40020410 	.word	0x40020410
 8003b50:	40020428 	.word	0x40020428
 8003b54:	40020440 	.word	0x40020440
 8003b58:	40020458 	.word	0x40020458
 8003b5c:	40020470 	.word	0x40020470
 8003b60:	40020488 	.word	0x40020488
 8003b64:	400204a0 	.word	0x400204a0
 8003b68:	400204b8 	.word	0x400204b8
 8003b6c:	aaaaaaab 	.word	0xaaaaaaab
 8003b70:	08011450 	.word	0x08011450
 8003b74:	fffffc00 	.word	0xfffffc00

08003b78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d120      	bne.n	8003bce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d858      	bhi.n	8003c46 <DMA_CheckFifoParam+0xce>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <DMA_CheckFifoParam+0x24>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bbf 	.word	0x08003bbf
 8003ba4:	08003bad 	.word	0x08003bad
 8003ba8:	08003c47 	.word	0x08003c47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d048      	beq.n	8003c4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bbc:	e045      	b.n	8003c4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc6:	d142      	bne.n	8003c4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bcc:	e03f      	b.n	8003c4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd6:	d123      	bne.n	8003c20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d838      	bhi.n	8003c52 <DMA_CheckFifoParam+0xda>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <DMA_CheckFifoParam+0x70>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003bf9 	.word	0x08003bf9
 8003bec:	08003bff 	.word	0x08003bff
 8003bf0:	08003bf9 	.word	0x08003bf9
 8003bf4:	08003c11 	.word	0x08003c11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
        break;
 8003bfc:	e030      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d025      	beq.n	8003c56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c0e:	e022      	b.n	8003c56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c18:	d11f      	bne.n	8003c5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c1e:	e01c      	b.n	8003c5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d902      	bls.n	8003c2e <DMA_CheckFifoParam+0xb6>
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d003      	beq.n	8003c34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c2c:	e018      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
        break;
 8003c32:	e015      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
    break;
 8003c44:	e00b      	b.n	8003c5e <DMA_CheckFifoParam+0xe6>
        break;
 8003c46:	bf00      	nop
 8003c48:	e00a      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>
        break;
 8003c4a:	bf00      	nop
 8003c4c:	e008      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>
        break;
 8003c4e:	bf00      	nop
 8003c50:	e006      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>
        break;
 8003c52:	bf00      	nop
 8003c54:	e004      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>
        break;
 8003c56:	bf00      	nop
 8003c58:	e002      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <DMA_CheckFifoParam+0xe8>
    break;
 8003c5e:	bf00      	nop
    }
  }

  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop

08003c70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a38      	ldr	r2, [pc, #224]	; (8003d64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d022      	beq.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a36      	ldr	r2, [pc, #216]	; (8003d68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01d      	beq.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a35      	ldr	r2, [pc, #212]	; (8003d6c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d018      	beq.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a32      	ldr	r2, [pc, #200]	; (8003d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00e      	beq.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a30      	ldr	r2, [pc, #192]	; (8003d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d009      	beq.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a2f      	ldr	r2, [pc, #188]	; (8003d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d004      	beq.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01a      	beq.n	8003d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	3b08      	subs	r3, #8
 8003ce0:	4a28      	ldr	r2, [pc, #160]	; (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a24      	ldr	r2, [pc, #144]	; (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003cfc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	2201      	movs	r2, #1
 8003d06:	409a      	lsls	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d0c:	e024      	b.n	8003d58 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	3b10      	subs	r3, #16
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d806      	bhi.n	8003d36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d902      	bls.n	8003d36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3308      	adds	r3, #8
 8003d34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2201      	movs	r2, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	58025408 	.word	0x58025408
 8003d68:	5802541c 	.word	0x5802541c
 8003d6c:	58025430 	.word	0x58025430
 8003d70:	58025444 	.word	0x58025444
 8003d74:	58025458 	.word	0x58025458
 8003d78:	5802546c 	.word	0x5802546c
 8003d7c:	58025480 	.word	0x58025480
 8003d80:	58025494 	.word	0x58025494
 8003d84:	cccccccd 	.word	0xcccccccd
 8003d88:	16009600 	.word	0x16009600
 8003d8c:	58025880 	.word	0x58025880
 8003d90:	aaaaaaab 	.word	0xaaaaaaab
 8003d94:	400204b8 	.word	0x400204b8
 8003d98:	4002040f 	.word	0x4002040f
 8003d9c:	10008200 	.word	0x10008200
 8003da0:	40020880 	.word	0x40020880

08003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d04a      	beq.n	8003e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d847      	bhi.n	8003e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a24      	ldr	r2, [pc, #144]	; (8003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01d      	beq.n	8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e2c:	671a      	str	r2, [r3, #112]	; 0x70
 8003e2e:	e009      	b.n	8003e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a11      	ldr	r2, [pc, #68]	; (8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e42:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	2201      	movs	r2, #1
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	58025408 	.word	0x58025408
 8003e60:	5802541c 	.word	0x5802541c
 8003e64:	58025430 	.word	0x58025430
 8003e68:	58025444 	.word	0x58025444
 8003e6c:	58025458 	.word	0x58025458
 8003e70:	5802546c 	.word	0x5802546c
 8003e74:	58025480 	.word	0x58025480
 8003e78:	58025494 	.word	0x58025494
 8003e7c:	1600963f 	.word	0x1600963f
 8003e80:	58025940 	.word	0x58025940
 8003e84:	1000823f 	.word	0x1000823f
 8003e88:	40020940 	.word	0x40020940

08003e8c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b098      	sub	sp, #96	; 0x60
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003e94:	4a84      	ldr	r2, [pc, #528]	; (80040a8 <HAL_FDCAN_Init+0x21c>)
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	224c      	movs	r2, #76	; 0x4c
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f00c f918 	bl	80100d4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e1ca      	b.n	8004244 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <HAL_FDCAN_Init+0x220>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d106      	bne.n	8003ec6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd f9b4 	bl	8001248 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0210 	bic.w	r2, r2, #16
 8003eee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ef0:	f7fd fdaa 	bl	8001a48 <HAL_GetTick>
 8003ef4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ef6:	e014      	b.n	8003f22 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ef8:	f7fd fda6 	bl	8001a48 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b0a      	cmp	r3, #10
 8003f04:	d90d      	bls.n	8003f22 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e190      	b.n	8004244 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d0e3      	beq.n	8003ef8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f40:	f7fd fd82 	bl	8001a48 <HAL_GetTick>
 8003f44:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f46:	e014      	b.n	8003f72 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f48:	f7fd fd7e 	bl	8001a48 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b0a      	cmp	r3, #10
 8003f54:	d90d      	bls.n	8003f72 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e168      	b.n	8004244 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0e3      	beq.n	8003f48 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0202 	orr.w	r2, r2, #2
 8003f8e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7c1b      	ldrb	r3, [r3, #16]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d108      	bne.n	8003faa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa6:	619a      	str	r2, [r3, #24]
 8003fa8:	e007      	b.n	8003fba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699a      	ldr	r2, [r3, #24]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7c5b      	ldrb	r3, [r3, #17]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d108      	bne.n	8003fd4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd0:	619a      	str	r2, [r3, #24]
 8003fd2:	e007      	b.n	8003fe4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fe2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7c9b      	ldrb	r3, [r3, #18]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d108      	bne.n	8003ffe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ffa:	619a      	str	r2, [r3, #24]
 8003ffc:	e007      	b.n	800400e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800400c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004032:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0210 	bic.w	r2, r2, #16
 8004042:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d108      	bne.n	800405e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0204 	orr.w	r2, r2, #4
 800405a:	619a      	str	r2, [r3, #24]
 800405c:	e030      	b.n	80040c0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d02c      	beq.n	80040c0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d020      	beq.n	80040b0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800407c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0210 	orr.w	r2, r2, #16
 800408c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d114      	bne.n	80040c0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0220 	orr.w	r2, r2, #32
 80040a4:	619a      	str	r2, [r3, #24]
 80040a6:	e00b      	b.n	80040c0 <HAL_FDCAN_Init+0x234>
 80040a8:	0801139c 	.word	0x0801139c
 80040ac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0220 	orr.w	r2, r2, #32
 80040be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040d8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f4:	d115      	bne.n	8004122 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	3b01      	subs	r3, #1
 8004102:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004104:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	3b01      	subs	r3, #1
 800410c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800410e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	3b01      	subs	r3, #1
 8004118:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800411e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004120:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004148:	4413      	add	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d012      	beq.n	8004174 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004156:	f023 0107 	bic.w	r1, r3, #7
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004164:	4413      	add	r3, r2
 8004166:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d012      	beq.n	80041a2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004184:	f023 0107 	bic.w	r1, r3, #7
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004192:	4413      	add	r3, r2
 8004194:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d013      	beq.n	80041d2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041b2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041c0:	4413      	add	r3, r2
 80041c2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80041c6:	011a      	lsls	r2, r3, #4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d013      	beq.n	8004202 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041e2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041f0:	4413      	add	r3, r2
 80041f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a11      	ldr	r2, [pc, #68]	; (800424c <HAL_FDCAN_Init+0x3c0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d107      	bne.n	800421c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f022 0203 	bic.w	r2, r2, #3
 800421a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f80b 	bl	8004250 <FDCAN_CalcultateRamBlockAddresses>
 800423a:	4603      	mov	r3, r0
 800423c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004240:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004244:	4618      	mov	r0, r3
 8004246:	3760      	adds	r7, #96	; 0x60
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	4000a000 	.word	0x4000a000

08004250 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004266:	4ba7      	ldr	r3, [pc, #668]	; (8004504 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004268:	4013      	ands	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	0091      	lsls	r1, r2, #2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	430b      	orrs	r3, r1
 8004274:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004280:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	4413      	add	r3, r2
 800429c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042a6:	4b97      	ldr	r3, [pc, #604]	; (8004504 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	0091      	lsls	r1, r2, #2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	041a      	lsls	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4413      	add	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80042e8:	4b86      	ldr	r3, [pc, #536]	; (8004504 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	0091      	lsls	r1, r2, #2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004302:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	041a      	lsls	r2, r3, #16
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4413      	add	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004330:	4b74      	ldr	r3, [pc, #464]	; (8004504 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	0091      	lsls	r1, r2, #2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800434a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	041a      	lsls	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004378:	4b62      	ldr	r3, [pc, #392]	; (8004504 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800437a:	4013      	ands	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	0091      	lsls	r1, r2, #2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	430b      	orrs	r3, r1
 8004386:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4413      	add	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80043a4:	4b57      	ldr	r3, [pc, #348]	; (8004504 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	0091      	lsls	r1, r2, #2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043be:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	041a      	lsls	r2, r3, #16
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	4413      	add	r3, r2
 80043dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	0091      	lsls	r1, r2, #2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004400:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	041a      	lsls	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800441c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	061a      	lsls	r2, r3, #24
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004436:	4413      	add	r3, r2
 8004438:	009a      	lsls	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	441a      	add	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a04      	ldr	r2, [pc, #16]	; (800450c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d915      	bls.n	800452c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004500:	e006      	b.n	8004510 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004502:	bf00      	nop
 8004504:	ffff0003 	.word	0xffff0003
 8004508:	10002b00 	.word	0x10002b00
 800450c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2203      	movs	r2, #3
 8004524:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e010      	b.n	800454e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e005      	b.n	8004540 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3304      	adds	r3, #4
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	429a      	cmp	r2, r3
 800454a:	d3f3      	bcc.n	8004534 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop

0800455c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800456a:	4b89      	ldr	r3, [pc, #548]	; (8004790 <HAL_GPIO_Init+0x234>)
 800456c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800456e:	e194      	b.n	800489a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8186 	beq.w	8004894 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d00b      	beq.n	80045a8 <HAL_GPIO_Init+0x4c>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d007      	beq.n	80045a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800459c:	2b11      	cmp	r3, #17
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b12      	cmp	r3, #18
 80045a6:	d130      	bne.n	800460a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	2203      	movs	r2, #3
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045de:	2201      	movs	r2, #1
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 0201 	and.w	r2, r3, #1
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	2203      	movs	r2, #3
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d003      	beq.n	800464a <HAL_GPIO_Init+0xee>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b12      	cmp	r3, #18
 8004648:	d123      	bne.n	8004692 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	08da      	lsrs	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3208      	adds	r2, #8
 8004652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	220f      	movs	r2, #15
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	08da      	lsrs	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3208      	adds	r2, #8
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0203 	and.w	r2, r3, #3
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80e0 	beq.w	8004894 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d4:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <HAL_GPIO_Init+0x238>)
 80046d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046da:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <HAL_GPIO_Init+0x238>)
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <HAL_GPIO_Init+0x238>)
 80046e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046f2:	4a29      	ldr	r2, [pc, #164]	; (8004798 <HAL_GPIO_Init+0x23c>)
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	3302      	adds	r3, #2
 80046fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	220f      	movs	r2, #15
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <HAL_GPIO_Init+0x240>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d052      	beq.n	80047c4 <HAL_GPIO_Init+0x268>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <HAL_GPIO_Init+0x244>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d031      	beq.n	800478a <HAL_GPIO_Init+0x22e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <HAL_GPIO_Init+0x248>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02b      	beq.n	8004786 <HAL_GPIO_Init+0x22a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_GPIO_Init+0x24c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d025      	beq.n	8004782 <HAL_GPIO_Init+0x226>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <HAL_GPIO_Init+0x250>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <HAL_GPIO_Init+0x222>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_GPIO_Init+0x254>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d019      	beq.n	800477a <HAL_GPIO_Init+0x21e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <HAL_GPIO_Init+0x258>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_GPIO_Init+0x21a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_GPIO_Init+0x25c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00d      	beq.n	8004772 <HAL_GPIO_Init+0x216>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a18      	ldr	r2, [pc, #96]	; (80047bc <HAL_GPIO_Init+0x260>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <HAL_GPIO_Init+0x212>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <HAL_GPIO_Init+0x264>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <HAL_GPIO_Init+0x20e>
 8004766:	2309      	movs	r3, #9
 8004768:	e02d      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 800476a:	230a      	movs	r3, #10
 800476c:	e02b      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 800476e:	2308      	movs	r3, #8
 8004770:	e029      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 8004772:	2307      	movs	r3, #7
 8004774:	e027      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 8004776:	2306      	movs	r3, #6
 8004778:	e025      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 800477a:	2305      	movs	r3, #5
 800477c:	e023      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 800477e:	2304      	movs	r3, #4
 8004780:	e021      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 8004782:	2303      	movs	r3, #3
 8004784:	e01f      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 8004786:	2302      	movs	r3, #2
 8004788:	e01d      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 800478a:	2301      	movs	r3, #1
 800478c:	e01b      	b.n	80047c6 <HAL_GPIO_Init+0x26a>
 800478e:	bf00      	nop
 8004790:	58000080 	.word	0x58000080
 8004794:	58024400 	.word	0x58024400
 8004798:	58000400 	.word	0x58000400
 800479c:	58020000 	.word	0x58020000
 80047a0:	58020400 	.word	0x58020400
 80047a4:	58020800 	.word	0x58020800
 80047a8:	58020c00 	.word	0x58020c00
 80047ac:	58021000 	.word	0x58021000
 80047b0:	58021400 	.word	0x58021400
 80047b4:	58021800 	.word	0x58021800
 80047b8:	58021c00 	.word	0x58021c00
 80047bc:	58022000 	.word	0x58022000
 80047c0:	58022400 	.word	0x58022400
 80047c4:	2300      	movs	r3, #0
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	f002 0203 	and.w	r2, r2, #3
 80047cc:	0092      	lsls	r2, r2, #2
 80047ce:	4093      	lsls	r3, r2
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047d6:	4938      	ldr	r1, [pc, #224]	; (80048b8 <HAL_GPIO_Init+0x35c>)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	3302      	adds	r3, #2
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800485e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	43db      	mvns	r3, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4013      	ands	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800488c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f47f ae63 	bne.w	8004570 <HAL_GPIO_Init+0x14>
  }
}
 80048aa:	bf00      	nop
 80048ac:	3724      	adds	r7, #36	; 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	58000400 	.word	0x58000400

080048bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	887b      	ldrh	r3, [r7, #2]
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
 80048d8:	e001      	b.n	80048de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048de:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
 80048f8:	4613      	mov	r3, r2
 80048fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048fc:	787b      	ldrb	r3, [r7, #1]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004902:	887a      	ldrh	r2, [r7, #2]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004908:	e003      	b.n	8004912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	041a      	lsls	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	619a      	str	r2, [r3, #24]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	887b      	ldrh	r3, [r7, #2]
 8004930:	401a      	ands	r2, r3
 8004932:	887b      	ldrh	r3, [r7, #2]
 8004934:	429a      	cmp	r2, r3
 8004936:	d104      	bne.n	8004942 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004938:	887b      	ldrh	r3, [r7, #2]
 800493a:	041a      	lsls	r2, r3, #16
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004940:	e002      	b.n	8004948 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	619a      	str	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004956:	b08f      	sub	sp, #60	; 0x3c
 8004958:	af0a      	add	r7, sp, #40	; 0x28
 800495a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e116      	b.n	8004b94 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f00b f86f 	bl	800fa64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2203      	movs	r2, #3
 800498a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f007 fea0 	bl	800c6ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	687e      	ldr	r6, [r7, #4]
 80049b2:	466d      	mov	r5, sp
 80049b4:	f106 0410 	add.w	r4, r6, #16
 80049b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80049c8:	1d33      	adds	r3, r6, #4
 80049ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049cc:	6838      	ldr	r0, [r7, #0]
 80049ce:	f007 fd77 	bl	800c4c0 <USB_CoreInit>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0d7      	b.n	8004b94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f007 fe8e 	bl	800c70c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	e04a      	b.n	8004a8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049f6:	7bfa      	ldrb	r2, [r7, #15]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	333d      	adds	r3, #61	; 0x3d
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	333c      	adds	r3, #60	; 0x3c
 8004a1a:	7bfa      	ldrb	r2, [r7, #15]
 8004a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	b298      	uxth	r0, r3
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	3342      	adds	r3, #66	; 0x42
 8004a32:	4602      	mov	r2, r0
 8004a34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a36:	7bfa      	ldrb	r2, [r7, #15]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	333f      	adds	r3, #63	; 0x3f
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3344      	adds	r3, #68	; 0x44
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a5e:	7bfa      	ldrb	r2, [r7, #15]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3348      	adds	r3, #72	; 0x48
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3350      	adds	r3, #80	; 0x50
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	7bfa      	ldrb	r2, [r7, #15]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d3af      	bcc.n	80049f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	e044      	b.n	8004b26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a9c:	7bfa      	ldrb	r2, [r7, #15]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ab2:	7bfa      	ldrb	r2, [r7, #15]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004ac4:	7bfa      	ldrb	r2, [r7, #15]
 8004ac6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ade:	7bfa      	ldrb	r2, [r7, #15]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004af4:	7bfa      	ldrb	r2, [r7, #15]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	3301      	adds	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d3b5      	bcc.n	8004a9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	687e      	ldr	r6, [r7, #4]
 8004b38:	466d      	mov	r5, sp
 8004b3a:	f106 0410 	add.w	r4, r6, #16
 8004b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b4e:	1d33      	adds	r3, r6, #4
 8004b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b52:	6838      	ldr	r0, [r7, #0]
 8004b54:	f007 fe04 	bl	800c760 <USB_DevInit>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e014      	b.n	8004b94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d102      	bne.n	8004b88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f001 f892 	bl	8005cac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f008 fe43 	bl	800d818 <USB_DevDisconnect>

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_PCD_Start+0x1c>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e020      	b.n	8004bfa <HAL_PCD_Start+0x5e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d109      	bne.n	8004bdc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d005      	beq.n	8004bdc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f008 fe01 	bl	800d7e8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f007 fd6c 	bl	800c6c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c02:	b590      	push	{r4, r7, lr}
 8004c04:	b08d      	sub	sp, #52	; 0x34
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f008 fea8 	bl	800d96e <USB_GetMode>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 83ca 	bne.w	80053ba <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f008 fe0c 	bl	800d848 <USB_ReadInterrupts>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 83c0 	beq.w	80053b8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f008 fe03 	bl	800d848 <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d107      	bne.n	8004c5c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f002 0202 	and.w	r2, r2, #2
 8004c5a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f008 fdf1 	bl	800d848 <USB_ReadInterrupts>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d161      	bne.n	8004d34 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0210 	bic.w	r2, r2, #16
 8004c7e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	0c5b      	lsrs	r3, r3, #17
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d124      	bne.n	8004cf6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d035      	beq.n	8004d24 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6a38      	ldr	r0, [r7, #32]
 8004ccc:	f008 fc69 	bl	800d5a2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cdc:	441a      	add	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cee:	441a      	add	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	619a      	str	r2, [r3, #24]
 8004cf4:	e016      	b.n	8004d24 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	0c5b      	lsrs	r3, r3, #17
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	2b06      	cmp	r3, #6
 8004d00:	d110      	bne.n	8004d24 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d08:	2208      	movs	r2, #8
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6a38      	ldr	r0, [r7, #32]
 8004d0e:	f008 fc48 	bl	800d5a2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d1e:	441a      	add	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0210 	orr.w	r2, r2, #16
 8004d32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f008 fd85 	bl	800d848 <USB_ReadInterrupts>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d48:	d16e      	bne.n	8004e28 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f008 fd8b 	bl	800d86e <USB_ReadDevAllOutEpInterrupt>
 8004d58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d5a:	e062      	b.n	8004e22 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d057      	beq.n	8004e16 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f008 fdb0 	bl	800d8d6 <USB_ReadDevOutEPInterrupt>
 8004d76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2301      	movs	r3, #1
 8004d92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fdde 	bl	8005958 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00c      	beq.n	8004dc0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	2308      	movs	r3, #8
 8004db6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fed8 	bl	8005b70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2310      	movs	r3, #16
 8004dda:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	461a      	mov	r2, r3
 8004df4:	2320      	movs	r3, #32
 8004df6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	3301      	adds	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d199      	bne.n	8004d5c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f008 fd0b 	bl	800d848 <USB_ReadInterrupts>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e3c:	f040 80c0 	bne.w	8004fc0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f008 fd2c 	bl	800d8a2 <USB_ReadDevAllInEpInterrupt>
 8004e4a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004e50:	e0b2      	b.n	8004fb8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80a7 	beq.w	8004fac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f008 fd52 	bl	800d912 <USB_ReadDevInEPInterrupt>
 8004e6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d057      	beq.n	8004f2a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	2201      	movs	r2, #1
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69f9      	ldr	r1, [r7, #28]
 8004e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2301      	movs	r3, #1
 8004eae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d132      	bne.n	8004f1e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3348      	adds	r3, #72	; 0x48
 8004ec8:	6819      	ldr	r1, [r3, #0]
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4403      	add	r3, r0
 8004ed8:	3344      	adds	r3, #68	; 0x44
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4419      	add	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4403      	add	r3, r0
 8004eec:	3348      	adds	r3, #72	; 0x48
 8004eee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d113      	bne.n	8004f1e <HAL_PCD_IRQHandler+0x31c>
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	4613      	mov	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	3350      	adds	r3, #80	; 0x50
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d108      	bne.n	8004f1e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f16:	461a      	mov	r2, r3
 8004f18:	2101      	movs	r1, #1
 8004f1a:	f008 fd5b 	bl	800d9d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f00a fe1c 	bl	800fb62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	461a      	mov	r2, r3
 8004f42:	2308      	movs	r3, #8
 8004f44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2310      	movs	r3, #16
 8004f60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2340      	movs	r3, #64	; 0x40
 8004f7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f94:	461a      	mov	r2, r3
 8004f96:	2302      	movs	r3, #2
 8004f98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fc48 	bl	800583c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	3301      	adds	r3, #1
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f47f af49 	bne.w	8004e52 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f008 fc3f 	bl	800d848 <USB_ReadInterrupts>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fd4:	d122      	bne.n	800501c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d108      	bne.n	8005006 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fe78 	bl	8005cf4 <HAL_PCDEx_LPM_Callback>
 8005004:	e002      	b.n	800500c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f00a fe22 	bl	800fc50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800501a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f008 fc11 	bl	800d848 <USB_ReadInterrupts>
 8005026:	4603      	mov	r3, r0
 8005028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005030:	d112      	bne.n	8005058 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d102      	bne.n	8005048 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f00a fdde 	bl	800fc04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005056:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f008 fbf3 	bl	800d848 <USB_ReadInterrupts>
 8005062:	4603      	mov	r3, r0
 8005064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800506c:	d121      	bne.n	80050b2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800507c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d111      	bne.n	80050ac <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	f003 020f 	and.w	r2, r3, #15
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050a2:	2101      	movs	r1, #1
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fe25 	bl	8005cf4 <HAL_PCDEx_LPM_Callback>
 80050aa:	e002      	b.n	80050b2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f00a fda9 	bl	800fc04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f008 fbc6 	bl	800d848 <USB_ReadInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c6:	f040 80c7 	bne.w	8005258 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2110      	movs	r1, #16
 80050e4:	4618      	mov	r0, r3
 80050e6:	f007 fc99 	bl	800ca1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ee:	e056      	b.n	800519e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fc:	461a      	mov	r2, r3
 80050fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005102:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005122:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005142:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005156:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005176:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005196:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519a:	3301      	adds	r3, #1
 800519c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3a3      	bcc.n	80050f0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80051ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d016      	beq.n	80051f2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d4:	f043 030b 	orr.w	r3, r3, #11
 80051d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ea:	f043 030b 	orr.w	r3, r3, #11
 80051ee:	6453      	str	r3, [r2, #68]	; 0x44
 80051f0:	e015      	b.n	800521e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	4619      	mov	r1, r3
 8005202:	f242 032b 	movw	r3, #8235	; 0x202b
 8005206:	4313      	orrs	r3, r2
 8005208:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005218:	f043 030b 	orr.w	r3, r3, #11
 800521c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005230:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005242:	461a      	mov	r2, r3
 8005244:	f008 fbc6 	bl	800d9d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f008 faf3 	bl	800d848 <USB_ReadInterrupts>
 8005262:	4603      	mov	r3, r0
 8005264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526c:	d124      	bne.n	80052b8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f008 fb8a 	bl	800d98c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f007 fc2e 	bl	800cade <USB_GetDevSpeed>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681c      	ldr	r4, [r3, #0]
 800528e:	f001 fcbf 	bl	8006c10 <HAL_RCC_GetHCLKFreq>
 8005292:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	4620      	mov	r0, r4
 800529e:	f007 f971 	bl	800c584 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f00a fc85 	bl	800fbb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80052b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f008 fac3 	bl	800d848 <USB_ReadInterrupts>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d10a      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f00a fc62 	bl	800fb96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f002 0208 	and.w	r2, r2, #8
 80052e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f008 faae 	bl	800d848 <USB_ReadInterrupts>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052f6:	d10f      	bne.n	8005318 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f00a fcc4 	bl	800fc90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005316:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f008 fa93 	bl	800d848 <USB_ReadInterrupts>
 8005322:	4603      	mov	r3, r0
 8005324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800532c:	d10f      	bne.n	800534e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	b2db      	uxtb	r3, r3
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f00a fc97 	bl	800fc6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800534c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f008 fa78 	bl	800d848 <USB_ReadInterrupts>
 8005358:	4603      	mov	r3, r0
 800535a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d10a      	bne.n	800537a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f00a fca5 	bl	800fcb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f008 fa62 	bl	800d848 <USB_ReadInterrupts>
 8005384:	4603      	mov	r3, r0
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b04      	cmp	r3, #4
 800538c:	d115      	bne.n	80053ba <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f00a fc95 	bl	800fcd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
 80053b6:	e000      	b.n	80053ba <HAL_PCD_IRQHandler+0x7b8>
      return;
 80053b8:	bf00      	nop
    }
  }
}
 80053ba:	3734      	adds	r7, #52	; 0x34
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}

080053c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_PCD_SetAddress+0x1a>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e013      	b.n	8005402 <HAL_PCD_SetAddress+0x42>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	78fa      	ldrb	r2, [r7, #3]
 80053e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f008 f9d2 	bl	800d79c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	4608      	mov	r0, r1
 8005414:	4611      	mov	r1, r2
 8005416:	461a      	mov	r2, r3
 8005418:	4603      	mov	r3, r0
 800541a:	70fb      	strb	r3, [r7, #3]
 800541c:	460b      	mov	r3, r1
 800541e:	803b      	strh	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800542c:	2b00      	cmp	r3, #0
 800542e:	da0f      	bge.n	8005450 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	f003 020f 	and.w	r2, r3, #15
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	3338      	adds	r3, #56	; 0x38
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	3304      	adds	r3, #4
 8005446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	705a      	strb	r2, [r3, #1]
 800544e:	e00f      	b.n	8005470 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	f003 020f 	and.w	r2, r3, #15
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4413      	add	r3, r2
 8005466:	3304      	adds	r3, #4
 8005468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	b2da      	uxtb	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800547c:	883a      	ldrh	r2, [r7, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	78ba      	ldrb	r2, [r7, #2]
 8005486:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800549a:	78bb      	ldrb	r3, [r7, #2]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d102      	bne.n	80054a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_PCD_EP_Open+0xaa>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e00e      	b.n	80054d2 <HAL_PCD_EP_Open+0xc8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f007 fb30 	bl	800cb28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80054d0:	7afb      	ldrb	r3, [r7, #11]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	da0f      	bge.n	800550e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	4613      	mov	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	3338      	adds	r3, #56	; 0x38
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	3304      	adds	r3, #4
 8005504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	705a      	strb	r2, [r3, #1]
 800550c:	e00f      	b.n	800552e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4413      	add	r3, r2
 8005524:	3304      	adds	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_PCD_EP_Close+0x6e>
 8005544:	2302      	movs	r3, #2
 8005546:	e00e      	b.n	8005566 <HAL_PCD_EP_Close+0x8c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	4618      	mov	r0, r3
 8005558:	f007 fb6e 	bl	800cc38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b086      	sub	sp, #24
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	460b      	mov	r3, r1
 800557c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	3304      	adds	r3, #4
 8005596:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2200      	movs	r2, #0
 80055a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055b0:	7afb      	ldrb	r3, [r7, #11]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055ca:	7afb      	ldrb	r3, [r7, #11]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d109      	bne.n	80055e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	6979      	ldr	r1, [r7, #20]
 80055e2:	f007 fe51 	bl	800d288 <USB_EP0StartXfer>
 80055e6:	e008      	b.n	80055fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6979      	ldr	r1, [r7, #20]
 80055f6:	f007 fbfb 	bl	800cdf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	460b      	mov	r3, r1
 8005642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005644:	7afb      	ldrb	r3, [r7, #11]
 8005646:	f003 020f 	and.w	r2, r3, #15
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	3338      	adds	r3, #56	; 0x38
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	3304      	adds	r3, #4
 800565a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2200      	movs	r2, #0
 800566c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2201      	movs	r2, #1
 8005672:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005674:	7afb      	ldrb	r3, [r7, #11]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	b2da      	uxtb	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800568e:	7afb      	ldrb	r3, [r7, #11]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	6979      	ldr	r1, [r7, #20]
 80056a6:	f007 fdef 	bl	800d288 <USB_EP0StartXfer>
 80056aa:	e008      	b.n	80056be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6979      	ldr	r1, [r7, #20]
 80056ba:	f007 fb99 	bl	800cdf0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 020f 	and.w	r2, r3, #15
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d901      	bls.n	80056e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e050      	b.n	8005788 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da0f      	bge.n	800570e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	f003 020f 	and.w	r2, r3, #15
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	3338      	adds	r3, #56	; 0x38
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	3304      	adds	r3, #4
 8005704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	705a      	strb	r2, [r3, #1]
 800570c:	e00d      	b.n	800572a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	4413      	add	r3, r2
 8005720:	3304      	adds	r3, #4
 8005722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_PCD_EP_SetStall+0x82>
 8005746:	2302      	movs	r3, #2
 8005748:	e01e      	b.n	8005788 <HAL_PCD_EP_SetStall+0xc0>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	4618      	mov	r0, r3
 800575a:	f007 ff4b 	bl	800d5f4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	b2d9      	uxtb	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005778:	461a      	mov	r2, r3
 800577a:	f008 f92b 	bl	800d9d4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	f003 020f 	and.w	r2, r3, #15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d901      	bls.n	80057ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e042      	b.n	8005834 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	da0f      	bge.n	80057d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	4613      	mov	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	3338      	adds	r3, #56	; 0x38
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	3304      	adds	r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	705a      	strb	r2, [r3, #1]
 80057d4:	e00f      	b.n	80057f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 020f 	and.w	r2, r3, #15
 80057dc:	4613      	mov	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	3304      	adds	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	b2da      	uxtb	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_PCD_EP_ClrStall+0x86>
 8005812:	2302      	movs	r3, #2
 8005814:	e00e      	b.n	8005834 <HAL_PCD_EP_ClrStall+0xa4>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	4618      	mov	r0, r3
 8005826:	f007 ff53 	bl	800d6d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af02      	add	r7, sp, #8
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	3338      	adds	r3, #56	; 0x38
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	4413      	add	r3, r2
 8005860:	3304      	adds	r3, #4
 8005862:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	429a      	cmp	r2, r3
 800586e:	d901      	bls.n	8005874 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e06c      	b.n	800594e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	429a      	cmp	r2, r3
 8005888:	d902      	bls.n	8005890 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3303      	adds	r3, #3
 8005894:	089b      	lsrs	r3, r3, #2
 8005896:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005898:	e02b      	b.n	80058f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d902      	bls.n	80058b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3303      	adds	r3, #3
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68d9      	ldr	r1, [r3, #12]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	4603      	mov	r3, r0
 80058d4:	6978      	ldr	r0, [r7, #20]
 80058d6:	f007 fe2f 	bl	800d538 <USB_WritePacket>

    ep->xfer_buff  += len;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	441a      	add	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	441a      	add	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	b29b      	uxth	r3, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	d809      	bhi.n	800591c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005910:	429a      	cmp	r2, r3
 8005912:	d203      	bcs.n	800591c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1be      	bne.n	800589a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	429a      	cmp	r2, r3
 8005926:	d811      	bhi.n	800594c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	2201      	movs	r2, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	43db      	mvns	r3, r3
 8005942:	6939      	ldr	r1, [r7, #16]
 8005944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005948:	4013      	ands	r3, r2
 800594a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	333c      	adds	r3, #60	; 0x3c
 8005970:	3304      	adds	r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b01      	cmp	r3, #1
 800598c:	f040 80a0 	bne.w	8005ad0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d015      	beq.n	80059c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a72      	ldr	r2, [pc, #456]	; (8005b68 <PCD_EP_OutXfrComplete_int+0x210>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	f240 80dd 	bls.w	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80d7 	beq.w	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	461a      	mov	r2, r3
 80059be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c2:	6093      	str	r3, [r2, #8]
 80059c4:	e0cb      	b.n	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	461a      	mov	r2, r3
 80059de:	2320      	movs	r3, #32
 80059e0:	6093      	str	r3, [r2, #8]
 80059e2:	e0bc      	b.n	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f040 80b7 	bne.w	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a5d      	ldr	r2, [pc, #372]	; (8005b68 <PCD_EP_OutXfrComplete_int+0x210>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d90f      	bls.n	8005a18 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a14:	6093      	str	r3, [r2, #8]
 8005a16:	e0a2      	b.n	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a2a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	0159      	lsls	r1, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	440b      	add	r3, r1
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005a3e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4403      	add	r3, r0
 8005a4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005a52:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a66:	6819      	ldr	r1, [r3, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4403      	add	r3, r0
 8005a76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4419      	add	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4403      	add	r3, r0
 8005a8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a90:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d114      	bne.n	8005ac2 <PCD_EP_OutXfrComplete_int+0x16a>
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005aba:	461a      	mov	r2, r3
 8005abc:	2101      	movs	r1, #1
 8005abe:	f007 ff89 	bl	800d9d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f00a f82f 	bl	800fb2c <HAL_PCD_DataOutStageCallback>
 8005ace:	e046      	b.n	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <PCD_EP_OutXfrComplete_int+0x214>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d124      	bne.n	8005b22 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	461a      	mov	r2, r3
 8005af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af4:	6093      	str	r3, [r2, #8]
 8005af6:	e032      	b.n	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2320      	movs	r3, #32
 8005b12:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f00a f806 	bl	800fb2c <HAL_PCD_DataOutStageCallback>
 8005b20:	e01d      	b.n	8005b5e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d114      	bne.n	8005b52 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d108      	bne.n	8005b52 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	f007 ff41 	bl	800d9d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f009 ffe7 	bl	800fb2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	4f54300a 	.word	0x4f54300a
 8005b6c:	4f54310a 	.word	0x4f54310a

08005b70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	333c      	adds	r3, #60	; 0x3c
 8005b88:	3304      	adds	r3, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d90e      	bls.n	8005bc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d009      	beq.n	8005bc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f009 ff9f 	bl	800fb08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d90c      	bls.n	8005bec <PCD_EP_OutSetupPacket_int+0x7c>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d108      	bne.n	8005bec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005be4:	461a      	mov	r2, r3
 8005be6:	2101      	movs	r1, #1
 8005be8:	f007 fef4 	bl	800d9d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	4f54300a 	.word	0x4f54300a

08005bfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d107      	bne.n	8005c2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c1a:	883b      	ldrh	r3, [r7, #0]
 8005c1c:	0419      	lsls	r1, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28
 8005c28:	e028      	b.n	8005c7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4413      	add	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]
 8005c3c:	e00d      	b.n	8005c5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	3340      	adds	r3, #64	; 0x40
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4413      	add	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	3301      	adds	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
 8005c5a:	7bfa      	ldrb	r2, [r7, #15]
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d3ec      	bcc.n	8005c3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c64:	883b      	ldrh	r3, [r7, #0]
 8005c66:	0418      	lsls	r0, r3, #16
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6819      	ldr	r1, [r3, #0]
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	4302      	orrs	r2, r0
 8005c74:	3340      	adds	r3, #64	; 0x40
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	10000003 	.word	0x10000003

08005cf4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d00a      	beq.n	8005d36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d001      	beq.n	8005d32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e01f      	b.n	8005d72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e01d      	b.n	8005d72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f023 0207 	bic.w	r2, r3, #7
 8005d3e:	490f      	ldr	r1, [pc, #60]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d46:	f7fb fe7f 	bl	8001a48 <HAL_GetTick>
 8005d4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d4c:	e009      	b.n	8005d62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d4e:	f7fb fe7b 	bl	8001a48 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d5c:	d901      	bls.n	8005d62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e007      	b.n	8005d72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6e:	d1ee      	bne.n	8005d4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	58024800 	.word	0x58024800

08005d80 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a04      	ldr	r2, [pc, #16]	; (8005d9c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d8e:	60d3      	str	r3, [r2, #12]
}
 8005d90:	bf00      	nop
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	58024800 	.word	0x58024800

08005da0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08c      	sub	sp, #48	; 0x30
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e3ff      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8087 	beq.w	8005ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc0:	4b99      	ldr	r3, [pc, #612]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dca:	4b97      	ldr	r3, [pc, #604]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d007      	beq.n	8005de6 <HAL_RCC_OscConfig+0x46>
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	2b18      	cmp	r3, #24
 8005dda:	d110      	bne.n	8005dfe <HAL_RCC_OscConfig+0x5e>
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d10b      	bne.n	8005dfe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de6:	4b90      	ldr	r3, [pc, #576]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d06c      	beq.n	8005ecc <HAL_RCC_OscConfig+0x12c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d168      	bne.n	8005ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e3d9      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e06:	d106      	bne.n	8005e16 <HAL_RCC_OscConfig+0x76>
 8005e08:	4b87      	ldr	r3, [pc, #540]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a86      	ldr	r2, [pc, #536]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e02e      	b.n	8005e74 <HAL_RCC_OscConfig+0xd4>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x98>
 8005e1e:	4b82      	ldr	r3, [pc, #520]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a81      	ldr	r2, [pc, #516]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b7f      	ldr	r3, [pc, #508]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a7e      	ldr	r2, [pc, #504]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e01d      	b.n	8005e74 <HAL_RCC_OscConfig+0xd4>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0xbc>
 8005e42:	4b79      	ldr	r3, [pc, #484]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a78      	ldr	r2, [pc, #480]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4b76      	ldr	r3, [pc, #472]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a75      	ldr	r2, [pc, #468]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e00b      	b.n	8005e74 <HAL_RCC_OscConfig+0xd4>
 8005e5c:	4b72      	ldr	r3, [pc, #456]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a71      	ldr	r2, [pc, #452]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	4b6f      	ldr	r3, [pc, #444]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a6e      	ldr	r2, [pc, #440]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d013      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fb fde4 	bl	8001a48 <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e84:	f7fb fde0 	bl	8001a48 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b64      	cmp	r3, #100	; 0x64
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e38d      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e96:	4b64      	ldr	r3, [pc, #400]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0xe4>
 8005ea2:	e014      	b.n	8005ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7fb fdd0 	bl	8001a48 <HAL_GetTick>
 8005ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eac:	f7fb fdcc 	bl	8001a48 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b64      	cmp	r3, #100	; 0x64
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e379      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ebe:	4b5a      	ldr	r3, [pc, #360]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <HAL_RCC_OscConfig+0x10c>
 8005eca:	e000      	b.n	8005ece <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80ae 	beq.w	8006038 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005edc:	4b52      	ldr	r3, [pc, #328]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ee6:	4b50      	ldr	r3, [pc, #320]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <HAL_RCC_OscConfig+0x162>
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	2b18      	cmp	r3, #24
 8005ef6:	d13a      	bne.n	8005f6e <HAL_RCC_OscConfig+0x1ce>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d135      	bne.n	8005f6e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f02:	4b49      	ldr	r3, [pc, #292]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d005      	beq.n	8005f1a <HAL_RCC_OscConfig+0x17a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e34b      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1a:	f7fb fdc3 	bl	8001aa4 <HAL_GetREVID>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d817      	bhi.n	8005f58 <HAL_RCC_OscConfig+0x1b8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d108      	bne.n	8005f42 <HAL_RCC_OscConfig+0x1a2>
 8005f30:	4b3d      	ldr	r3, [pc, #244]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f38:	4a3b      	ldr	r2, [pc, #236]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f3e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f40:	e07a      	b.n	8006038 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f42:	4b39      	ldr	r3, [pc, #228]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	031b      	lsls	r3, r3, #12
 8005f50:	4935      	ldr	r1, [pc, #212]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f56:	e06f      	b.n	8006038 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f58:	4b33      	ldr	r3, [pc, #204]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	4930      	ldr	r1, [pc, #192]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6c:	e064      	b.n	8006038 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d045      	beq.n	8006002 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f76:	4b2c      	ldr	r3, [pc, #176]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 0219 	bic.w	r2, r3, #25
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	4929      	ldr	r1, [pc, #164]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fb fd5e 	bl	8001a48 <HAL_GetTick>
 8005f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f90:	f7fb fd5a 	bl	8001a48 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e307      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa2:	4b21      	ldr	r3, [pc, #132]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fae:	f7fb fd79 	bl	8001aa4 <HAL_GetREVID>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d817      	bhi.n	8005fec <HAL_RCC_OscConfig+0x24c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d108      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x236>
 8005fc4:	4b18      	ldr	r3, [pc, #96]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fcc:	4a16      	ldr	r2, [pc, #88]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd2:	6053      	str	r3, [r2, #4]
 8005fd4:	e030      	b.n	8006038 <HAL_RCC_OscConfig+0x298>
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	031b      	lsls	r3, r3, #12
 8005fe4:	4910      	ldr	r1, [pc, #64]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	604b      	str	r3, [r1, #4]
 8005fea:	e025      	b.n	8006038 <HAL_RCC_OscConfig+0x298>
 8005fec:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	061b      	lsls	r3, r3, #24
 8005ffa:	490b      	ldr	r1, [pc, #44]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	604b      	str	r3, [r1, #4]
 8006000:	e01a      	b.n	8006038 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a08      	ldr	r2, [pc, #32]	; (8006028 <HAL_RCC_OscConfig+0x288>)
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600e:	f7fb fd1b 	bl	8001a48 <HAL_GetTick>
 8006012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006014:	e00a      	b.n	800602c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006016:	f7fb fd17 	bl	8001a48 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d903      	bls.n	800602c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e2c4      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
 8006028:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800602c:	4ba4      	ldr	r3, [pc, #656]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1ee      	bne.n	8006016 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80a9 	beq.w	8006198 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006046:	4b9e      	ldr	r3, [pc, #632]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800604e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006050:	4b9b      	ldr	r3, [pc, #620]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b08      	cmp	r3, #8
 800605a:	d007      	beq.n	800606c <HAL_RCC_OscConfig+0x2cc>
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b18      	cmp	r3, #24
 8006060:	d13a      	bne.n	80060d8 <HAL_RCC_OscConfig+0x338>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d135      	bne.n	80060d8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800606c:	4b94      	ldr	r3, [pc, #592]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_RCC_OscConfig+0x2e4>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	2b80      	cmp	r3, #128	; 0x80
 800607e:	d001      	beq.n	8006084 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e296      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006084:	f7fb fd0e 	bl	8001aa4 <HAL_GetREVID>
 8006088:	4602      	mov	r2, r0
 800608a:	f241 0303 	movw	r3, #4099	; 0x1003
 800608e:	429a      	cmp	r2, r3
 8006090:	d817      	bhi.n	80060c2 <HAL_RCC_OscConfig+0x322>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	2b20      	cmp	r3, #32
 8006098:	d108      	bne.n	80060ac <HAL_RCC_OscConfig+0x30c>
 800609a:	4b89      	ldr	r3, [pc, #548]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060a2:	4a87      	ldr	r2, [pc, #540]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80060a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060aa:	e075      	b.n	8006198 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060ac:	4b84      	ldr	r3, [pc, #528]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	069b      	lsls	r3, r3, #26
 80060ba:	4981      	ldr	r1, [pc, #516]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060c0:	e06a      	b.n	8006198 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060c2:	4b7f      	ldr	r3, [pc, #508]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	061b      	lsls	r3, r3, #24
 80060d0:	497b      	ldr	r1, [pc, #492]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060d6:	e05f      	b.n	8006198 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d042      	beq.n	8006166 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060e0:	4b77      	ldr	r3, [pc, #476]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a76      	ldr	r2, [pc, #472]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fb fcac 	bl	8001a48 <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060f4:	f7fb fca8 	bl	8001a48 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e255      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006106:	4b6e      	ldr	r3, [pc, #440]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006112:	f7fb fcc7 	bl	8001aa4 <HAL_GetREVID>
 8006116:	4602      	mov	r2, r0
 8006118:	f241 0303 	movw	r3, #4099	; 0x1003
 800611c:	429a      	cmp	r2, r3
 800611e:	d817      	bhi.n	8006150 <HAL_RCC_OscConfig+0x3b0>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	2b20      	cmp	r3, #32
 8006126:	d108      	bne.n	800613a <HAL_RCC_OscConfig+0x39a>
 8006128:	4b65      	ldr	r3, [pc, #404]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006130:	4a63      	ldr	r2, [pc, #396]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006136:	6053      	str	r3, [r2, #4]
 8006138:	e02e      	b.n	8006198 <HAL_RCC_OscConfig+0x3f8>
 800613a:	4b61      	ldr	r3, [pc, #388]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	069b      	lsls	r3, r3, #26
 8006148:	495d      	ldr	r1, [pc, #372]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800614a:	4313      	orrs	r3, r2
 800614c:	604b      	str	r3, [r1, #4]
 800614e:	e023      	b.n	8006198 <HAL_RCC_OscConfig+0x3f8>
 8006150:	4b5b      	ldr	r3, [pc, #364]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	061b      	lsls	r3, r3, #24
 800615e:	4958      	ldr	r1, [pc, #352]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006160:	4313      	orrs	r3, r2
 8006162:	60cb      	str	r3, [r1, #12]
 8006164:	e018      	b.n	8006198 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006166:	4b56      	ldr	r3, [pc, #344]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a55      	ldr	r2, [pc, #340]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800616c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006172:	f7fb fc69 	bl	8001a48 <HAL_GetTick>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800617a:	f7fb fc65 	bl	8001a48 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e212      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800618c:	4b4c      	ldr	r3, [pc, #304]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d036      	beq.n	8006212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d019      	beq.n	80061e0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ac:	4b44      	ldr	r3, [pc, #272]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80061ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b0:	4a43      	ldr	r2, [pc, #268]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b8:	f7fb fc46 	bl	8001a48 <HAL_GetTick>
 80061bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061c0:	f7fb fc42 	bl	8001a48 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e1ef      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061d2:	4b3b      	ldr	r3, [pc, #236]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80061d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x420>
 80061de:	e018      	b.n	8006212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061e0:	4b37      	ldr	r3, [pc, #220]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80061e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e4:	4a36      	ldr	r2, [pc, #216]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ec:	f7fb fc2c 	bl	8001a48 <HAL_GetTick>
 80061f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f4:	f7fb fc28 	bl	8001a48 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e1d5      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006206:	4b2e      	ldr	r3, [pc, #184]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d036      	beq.n	800628c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d019      	beq.n	800625a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006226:	4b26      	ldr	r3, [pc, #152]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800622c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006230:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006232:	f7fb fc09 	bl	8001a48 <HAL_GetTick>
 8006236:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800623a:	f7fb fc05 	bl	8001a48 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e1b2      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800624c:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0x49a>
 8006258:	e018      	b.n	800628c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800625a:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006264:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006266:	f7fb fbef 	bl	8001a48 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800626e:	f7fb fbeb 	bl	8001a48 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e198      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006280:	4b0f      	ldr	r3, [pc, #60]	; (80062c0 <HAL_RCC_OscConfig+0x520>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f0      	bne.n	800626e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 8085 	beq.w	80063a4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <HAL_RCC_OscConfig+0x524>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <HAL_RCC_OscConfig+0x524>)
 80062a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062a6:	f7fb fbcf 	bl	8001a48 <HAL_GetTick>
 80062aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ac:	e00c      	b.n	80062c8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062ae:	f7fb fbcb 	bl	8001a48 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b64      	cmp	r3, #100	; 0x64
 80062ba:	d905      	bls.n	80062c8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e178      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
 80062c0:	58024400 	.word	0x58024400
 80062c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c8:	4b96      	ldr	r3, [pc, #600]	; (8006524 <HAL_RCC_OscConfig+0x784>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0ec      	beq.n	80062ae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d106      	bne.n	80062ea <HAL_RCC_OscConfig+0x54a>
 80062dc:	4b92      	ldr	r3, [pc, #584]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	4a91      	ldr	r2, [pc, #580]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80062e2:	f043 0301 	orr.w	r3, r3, #1
 80062e6:	6713      	str	r3, [r2, #112]	; 0x70
 80062e8:	e02d      	b.n	8006346 <HAL_RCC_OscConfig+0x5a6>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10c      	bne.n	800630c <HAL_RCC_OscConfig+0x56c>
 80062f2:	4b8d      	ldr	r3, [pc, #564]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	4a8c      	ldr	r2, [pc, #560]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	6713      	str	r3, [r2, #112]	; 0x70
 80062fe:	4b8a      	ldr	r3, [pc, #552]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	4a89      	ldr	r2, [pc, #548]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006304:	f023 0304 	bic.w	r3, r3, #4
 8006308:	6713      	str	r3, [r2, #112]	; 0x70
 800630a:	e01c      	b.n	8006346 <HAL_RCC_OscConfig+0x5a6>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b05      	cmp	r3, #5
 8006312:	d10c      	bne.n	800632e <HAL_RCC_OscConfig+0x58e>
 8006314:	4b84      	ldr	r3, [pc, #528]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	4a83      	ldr	r2, [pc, #524]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800631a:	f043 0304 	orr.w	r3, r3, #4
 800631e:	6713      	str	r3, [r2, #112]	; 0x70
 8006320:	4b81      	ldr	r3, [pc, #516]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006324:	4a80      	ldr	r2, [pc, #512]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	6713      	str	r3, [r2, #112]	; 0x70
 800632c:	e00b      	b.n	8006346 <HAL_RCC_OscConfig+0x5a6>
 800632e:	4b7e      	ldr	r3, [pc, #504]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	4a7d      	ldr	r2, [pc, #500]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	6713      	str	r3, [r2, #112]	; 0x70
 800633a:	4b7b      	ldr	r3, [pc, #492]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	4a7a      	ldr	r2, [pc, #488]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006340:	f023 0304 	bic.w	r3, r3, #4
 8006344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d015      	beq.n	800637a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634e:	f7fb fb7b 	bl	8001a48 <HAL_GetTick>
 8006352:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006354:	e00a      	b.n	800636c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006356:	f7fb fb77 	bl	8001a48 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	f241 3288 	movw	r2, #5000	; 0x1388
 8006364:	4293      	cmp	r3, r2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e122      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800636c:	4b6e      	ldr	r3, [pc, #440]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800636e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0ee      	beq.n	8006356 <HAL_RCC_OscConfig+0x5b6>
 8006378:	e014      	b.n	80063a4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637a:	f7fb fb65 	bl	8001a48 <HAL_GetTick>
 800637e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006380:	e00a      	b.n	8006398 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006382:	f7fb fb61 	bl	8001a48 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006390:	4293      	cmp	r3, r2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e10c      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006398:	4b63      	ldr	r3, [pc, #396]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800639a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1ee      	bne.n	8006382 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8101 	beq.w	80065b0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063ae:	4b5e      	ldr	r3, [pc, #376]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063b6:	2b18      	cmp	r3, #24
 80063b8:	f000 80bc 	beq.w	8006534 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	f040 8095 	bne.w	80064f0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c6:	4b58      	ldr	r3, [pc, #352]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a57      	ldr	r2, [pc, #348]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80063cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d2:	f7fb fb39 	bl	8001a48 <HAL_GetTick>
 80063d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063da:	f7fb fb35 	bl	8001a48 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e0e2      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063ec:	4b4e      	ldr	r3, [pc, #312]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1f0      	bne.n	80063da <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063f8:	4b4b      	ldr	r3, [pc, #300]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80063fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063fc:	4b4b      	ldr	r3, [pc, #300]	; (800652c <HAL_RCC_OscConfig+0x78c>)
 80063fe:	4013      	ands	r3, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006408:	0112      	lsls	r2, r2, #4
 800640a:	430a      	orrs	r2, r1
 800640c:	4946      	ldr	r1, [pc, #280]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800640e:	4313      	orrs	r3, r2
 8006410:	628b      	str	r3, [r1, #40]	; 0x28
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	3b01      	subs	r3, #1
 8006418:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	3b01      	subs	r3, #1
 8006422:	025b      	lsls	r3, r3, #9
 8006424:	b29b      	uxth	r3, r3
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	3b01      	subs	r3, #1
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	3b01      	subs	r3, #1
 800643c:	061b      	lsls	r3, r3, #24
 800643e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006442:	4939      	ldr	r1, [pc, #228]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006444:	4313      	orrs	r3, r2
 8006446:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006448:	4b37      	ldr	r3, [pc, #220]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	4a36      	ldr	r2, [pc, #216]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006454:	4b34      	ldr	r3, [pc, #208]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006458:	4b35      	ldr	r3, [pc, #212]	; (8006530 <HAL_RCC_OscConfig+0x790>)
 800645a:	4013      	ands	r3, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006460:	00d2      	lsls	r2, r2, #3
 8006462:	4931      	ldr	r1, [pc, #196]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006464:	4313      	orrs	r3, r2
 8006466:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006468:	4b2f      	ldr	r3, [pc, #188]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	f023 020c 	bic.w	r2, r3, #12
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	492c      	ldr	r1, [pc, #176]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006476:	4313      	orrs	r3, r2
 8006478:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800647a:	4b2b      	ldr	r3, [pc, #172]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	f023 0202 	bic.w	r2, r3, #2
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	4928      	ldr	r1, [pc, #160]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006488:	4313      	orrs	r3, r2
 800648a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800648c:	4b26      	ldr	r3, [pc, #152]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	4a25      	ldr	r2, [pc, #148]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b23      	ldr	r3, [pc, #140]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	4a22      	ldr	r2, [pc, #136]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064a4:	4b20      	ldr	r3, [pc, #128]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80064b0:	4b1d      	ldr	r3, [pc, #116]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064bc:	4b1a      	ldr	r3, [pc, #104]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a19      	ldr	r2, [pc, #100]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7fb fabe 	bl	8001a48 <HAL_GetTick>
 80064cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d0:	f7fb faba 	bl	8001a48 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e067      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064e2:	4b11      	ldr	r3, [pc, #68]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0f0      	beq.n	80064d0 <HAL_RCC_OscConfig+0x730>
 80064ee:	e05f      	b.n	80065b0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f0:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a0c      	ldr	r2, [pc, #48]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 80064f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fb faa4 	bl	8001a48 <HAL_GetTick>
 8006500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006504:	f7fb faa0 	bl	8001a48 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e04d      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006516:	4b04      	ldr	r3, [pc, #16]	; (8006528 <HAL_RCC_OscConfig+0x788>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x764>
 8006522:	e045      	b.n	80065b0 <HAL_RCC_OscConfig+0x810>
 8006524:	58024800 	.word	0x58024800
 8006528:	58024400 	.word	0x58024400
 800652c:	fffffc0c 	.word	0xfffffc0c
 8006530:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006534:	4b21      	ldr	r3, [pc, #132]	; (80065bc <HAL_RCC_OscConfig+0x81c>)
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800653a:	4b20      	ldr	r3, [pc, #128]	; (80065bc <HAL_RCC_OscConfig+0x81c>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b01      	cmp	r3, #1
 8006546:	d031      	beq.n	80065ac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f003 0203 	and.w	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006552:	429a      	cmp	r2, r3
 8006554:	d12a      	bne.n	80065ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	091b      	lsrs	r3, r3, #4
 800655a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006562:	429a      	cmp	r2, r3
 8006564:	d122      	bne.n	80065ac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006572:	429a      	cmp	r2, r3
 8006574:	d11a      	bne.n	80065ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	0a5b      	lsrs	r3, r3, #9
 800657a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006582:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006584:	429a      	cmp	r2, r3
 8006586:	d111      	bne.n	80065ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	0c1b      	lsrs	r3, r3, #16
 800658c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d108      	bne.n	80065ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	0e1b      	lsrs	r3, r3, #24
 800659e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3730      	adds	r7, #48	; 0x30
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	58024400 	.word	0x58024400

080065c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e19c      	b.n	800690e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065d4:	4b8a      	ldr	r3, [pc, #552]	; (8006800 <HAL_RCC_ClockConfig+0x240>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d910      	bls.n	8006604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e2:	4b87      	ldr	r3, [pc, #540]	; (8006800 <HAL_RCC_ClockConfig+0x240>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 020f 	bic.w	r2, r3, #15
 80065ea:	4985      	ldr	r1, [pc, #532]	; (8006800 <HAL_RCC_ClockConfig+0x240>)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f2:	4b83      	ldr	r3, [pc, #524]	; (8006800 <HAL_RCC_ClockConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d001      	beq.n	8006604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e184      	b.n	800690e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d010      	beq.n	8006632 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	4b7b      	ldr	r3, [pc, #492]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800661c:	429a      	cmp	r2, r3
 800661e:	d908      	bls.n	8006632 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006620:	4b78      	ldr	r3, [pc, #480]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	4975      	ldr	r1, [pc, #468]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 800662e:	4313      	orrs	r3, r2
 8006630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	4b70      	ldr	r3, [pc, #448]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800664a:	429a      	cmp	r2, r3
 800664c:	d908      	bls.n	8006660 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800664e:	4b6d      	ldr	r3, [pc, #436]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	496a      	ldr	r1, [pc, #424]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 800665c:	4313      	orrs	r3, r2
 800665e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d010      	beq.n	800668e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	4b64      	ldr	r3, [pc, #400]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006678:	429a      	cmp	r2, r3
 800667a:	d908      	bls.n	800668e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800667c:	4b61      	ldr	r3, [pc, #388]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	495e      	ldr	r1, [pc, #376]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 800668a:	4313      	orrs	r3, r2
 800668c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	4b59      	ldr	r3, [pc, #356]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d908      	bls.n	80066bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80066aa:	4b56      	ldr	r3, [pc, #344]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4953      	ldr	r1, [pc, #332]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d010      	beq.n	80066ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	4b4d      	ldr	r3, [pc, #308]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d908      	bls.n	80066ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d8:	4b4a      	ldr	r3, [pc, #296]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	f023 020f 	bic.w	r2, r3, #15
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	4947      	ldr	r1, [pc, #284]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d055      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066f6:	4b43      	ldr	r3, [pc, #268]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	4940      	ldr	r1, [pc, #256]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006704:	4313      	orrs	r3, r2
 8006706:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d107      	bne.n	8006720 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006710:	4b3c      	ldr	r3, [pc, #240]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d121      	bne.n	8006760 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0f6      	b.n	800690e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d107      	bne.n	8006738 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006728:	4b36      	ldr	r3, [pc, #216]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d115      	bne.n	8006760 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e0ea      	b.n	800690e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d107      	bne.n	8006750 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006740:	4b30      	ldr	r3, [pc, #192]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e0de      	b.n	800690e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006750:	4b2c      	ldr	r3, [pc, #176]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0d6      	b.n	800690e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006760:	4b28      	ldr	r3, [pc, #160]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f023 0207 	bic.w	r2, r3, #7
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4925      	ldr	r1, [pc, #148]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 800676e:	4313      	orrs	r3, r2
 8006770:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006772:	f7fb f969 	bl	8001a48 <HAL_GetTick>
 8006776:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006778:	e00a      	b.n	8006790 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800677a:	f7fb f965 	bl	8001a48 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	f241 3288 	movw	r2, #5000	; 0x1388
 8006788:	4293      	cmp	r3, r2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e0be      	b.n	800690e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006790:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	429a      	cmp	r2, r3
 80067a0:	d1eb      	bne.n	800677a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d010      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d208      	bcs.n	80067d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f023 020f 	bic.w	r2, r3, #15
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	490e      	ldr	r1, [pc, #56]	; (8006804 <HAL_RCC_ClockConfig+0x244>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_ClockConfig+0x240>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d214      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_RCC_ClockConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 020f 	bic.w	r2, r3, #15
 80067e6:	4906      	ldr	r1, [pc, #24]	; (8006800 <HAL_RCC_ClockConfig+0x240>)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ee:	4b04      	ldr	r3, [pc, #16]	; (8006800 <HAL_RCC_ClockConfig+0x240>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d005      	beq.n	8006808 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e086      	b.n	800690e <HAL_RCC_ClockConfig+0x34e>
 8006800:	52002000 	.word	0x52002000
 8006804:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d010      	beq.n	8006836 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	4b3f      	ldr	r3, [pc, #252]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006820:	429a      	cmp	r2, r3
 8006822:	d208      	bcs.n	8006836 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006824:	4b3c      	ldr	r3, [pc, #240]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	4939      	ldr	r1, [pc, #228]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 8006832:	4313      	orrs	r3, r2
 8006834:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d010      	beq.n	8006864 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	4b34      	ldr	r3, [pc, #208]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800684e:	429a      	cmp	r2, r3
 8006850:	d208      	bcs.n	8006864 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006852:	4b31      	ldr	r3, [pc, #196]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	492e      	ldr	r1, [pc, #184]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 8006860:	4313      	orrs	r3, r2
 8006862:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	d010      	beq.n	8006892 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	4b28      	ldr	r3, [pc, #160]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800687c:	429a      	cmp	r2, r3
 800687e:	d208      	bcs.n	8006892 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	4922      	ldr	r1, [pc, #136]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 800688e:	4313      	orrs	r3, r2
 8006890:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69da      	ldr	r2, [r3, #28]
 80068a2:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d208      	bcs.n	80068c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068ae:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	4917      	ldr	r1, [pc, #92]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068c0:	f000 f834 	bl	800692c <HAL_RCC_GetSysClockFreq>
 80068c4:	4601      	mov	r1, r0
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	0a1b      	lsrs	r3, r3, #8
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	4a12      	ldr	r2, [pc, #72]	; (800691c <HAL_RCC_ClockConfig+0x35c>)
 80068d2:	5cd3      	ldrb	r3, [r2, r3]
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	fa21 f303 	lsr.w	r3, r1, r3
 80068dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <HAL_RCC_ClockConfig+0x358>)
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	4a0d      	ldr	r2, [pc, #52]	; (800691c <HAL_RCC_ClockConfig+0x35c>)
 80068e8:	5cd3      	ldrb	r3, [r2, r3]
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
 80068f4:	4a0a      	ldr	r2, [pc, #40]	; (8006920 <HAL_RCC_ClockConfig+0x360>)
 80068f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068f8:	4a0a      	ldr	r2, [pc, #40]	; (8006924 <HAL_RCC_ClockConfig+0x364>)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80068fe:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <HAL_RCC_ClockConfig+0x368>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fb f856 	bl	80019b4 <HAL_InitTick>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	58024400 	.word	0x58024400
 800691c:	08011440 	.word	0x08011440
 8006920:	24000004 	.word	0x24000004
 8006924:	24000000 	.word	0x24000000
 8006928:	24000008 	.word	0x24000008

0800692c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800692c:	b480      	push	{r7}
 800692e:	b089      	sub	sp, #36	; 0x24
 8006930:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006932:	4baf      	ldr	r3, [pc, #700]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800693a:	2b18      	cmp	r3, #24
 800693c:	f200 814e 	bhi.w	8006bdc <HAL_RCC_GetSysClockFreq+0x2b0>
 8006940:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	080069ad 	.word	0x080069ad
 800694c:	08006bdd 	.word	0x08006bdd
 8006950:	08006bdd 	.word	0x08006bdd
 8006954:	08006bdd 	.word	0x08006bdd
 8006958:	08006bdd 	.word	0x08006bdd
 800695c:	08006bdd 	.word	0x08006bdd
 8006960:	08006bdd 	.word	0x08006bdd
 8006964:	08006bdd 	.word	0x08006bdd
 8006968:	080069d3 	.word	0x080069d3
 800696c:	08006bdd 	.word	0x08006bdd
 8006970:	08006bdd 	.word	0x08006bdd
 8006974:	08006bdd 	.word	0x08006bdd
 8006978:	08006bdd 	.word	0x08006bdd
 800697c:	08006bdd 	.word	0x08006bdd
 8006980:	08006bdd 	.word	0x08006bdd
 8006984:	08006bdd 	.word	0x08006bdd
 8006988:	080069d9 	.word	0x080069d9
 800698c:	08006bdd 	.word	0x08006bdd
 8006990:	08006bdd 	.word	0x08006bdd
 8006994:	08006bdd 	.word	0x08006bdd
 8006998:	08006bdd 	.word	0x08006bdd
 800699c:	08006bdd 	.word	0x08006bdd
 80069a0:	08006bdd 	.word	0x08006bdd
 80069a4:	08006bdd 	.word	0x08006bdd
 80069a8:	080069df 	.word	0x080069df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ac:	4b90      	ldr	r3, [pc, #576]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069b8:	4b8d      	ldr	r3, [pc, #564]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	08db      	lsrs	r3, r3, #3
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	4a8c      	ldr	r2, [pc, #560]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
 80069c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80069ca:	e10a      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069cc:	4b89      	ldr	r3, [pc, #548]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80069ce:	61bb      	str	r3, [r7, #24]
    break;
 80069d0:	e107      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80069d2:	4b89      	ldr	r3, [pc, #548]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80069d4:	61bb      	str	r3, [r7, #24]
    break;
 80069d6:	e104      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80069d8:	4b88      	ldr	r3, [pc, #544]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80069da:	61bb      	str	r3, [r7, #24]
    break;
 80069dc:	e101      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069de:	4b84      	ldr	r3, [pc, #528]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80069e8:	4b81      	ldr	r3, [pc, #516]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	091b      	lsrs	r3, r3, #4
 80069ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069f4:	4b7e      	ldr	r3, [pc, #504]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80069fe:	4b7c      	ldr	r3, [pc, #496]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a02:	08db      	lsrs	r3, r3, #3
 8006a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80da 	beq.w	8006bd6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d05a      	beq.n	8006ade <HAL_RCC_GetSysClockFreq+0x1b2>
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d302      	bcc.n	8006a32 <HAL_RCC_GetSysClockFreq+0x106>
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d078      	beq.n	8006b22 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006a30:	e099      	b.n	8006b66 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a32:	4b6f      	ldr	r3, [pc, #444]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02d      	beq.n	8006a9a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a3e:	4b6c      	ldr	r3, [pc, #432]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	08db      	lsrs	r3, r3, #3
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	4a6a      	ldr	r2, [pc, #424]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	ee07 3a90 	vmov	s15, r3
 8006a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a68:	4b61      	ldr	r3, [pc, #388]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a78:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a7c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006c00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a94:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006a98:	e087      	b.n	8006baa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006c04 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aac:	4b50      	ldr	r3, [pc, #320]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ac0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006c00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006adc:	e065      	b.n	8006baa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006c08 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af0:	4b3f      	ldr	r3, [pc, #252]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b00:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b04:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006c00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b20:	e043      	b.n	8006baa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006c0c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b34:	4b2e      	ldr	r3, [pc, #184]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b44:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b48:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006c00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b64:	e021      	b.n	8006baa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b70:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006c08 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b78:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b88:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b8c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006c00 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ba8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006baa:	4b11      	ldr	r3, [pc, #68]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	0a5b      	lsrs	r3, r3, #9
 8006bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bce:	ee17 3a90 	vmov	r3, s15
 8006bd2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006bd4:	e005      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61bb      	str	r3, [r7, #24]
    break;
 8006bda:	e002      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006bde:	61bb      	str	r3, [r7, #24]
    break;
 8006be0:	bf00      	nop
  }

  return sysclockfreq;
 8006be2:	69bb      	ldr	r3, [r7, #24]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3724      	adds	r7, #36	; 0x24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	58024400 	.word	0x58024400
 8006bf4:	03d09000 	.word	0x03d09000
 8006bf8:	003d0900 	.word	0x003d0900
 8006bfc:	017d7840 	.word	0x017d7840
 8006c00:	46000000 	.word	0x46000000
 8006c04:	4c742400 	.word	0x4c742400
 8006c08:	4a742400 	.word	0x4a742400
 8006c0c:	4bbebc20 	.word	0x4bbebc20

08006c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c16:	f7ff fe89 	bl	800692c <HAL_RCC_GetSysClockFreq>
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	4a0f      	ldr	r2, [pc, #60]	; (8006c64 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c28:	5cd3      	ldrb	r3, [r2, r3]
 8006c2a:	f003 031f 	and.w	r3, r3, #31
 8006c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8006c32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	4a09      	ldr	r2, [pc, #36]	; (8006c64 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c3e:	5cd3      	ldrb	r3, [r2, r3]
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4a:	4a07      	ldr	r2, [pc, #28]	; (8006c68 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c4e:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c56:	681b      	ldr	r3, [r3, #0]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	58024400 	.word	0x58024400
 8006c64:	08011440 	.word	0x08011440
 8006c68:	24000004 	.word	0x24000004
 8006c6c:	24000000 	.word	0x24000000

08006c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c74:	f7ff ffcc 	bl	8006c10 <HAL_RCC_GetHCLKFreq>
 8006c78:	4601      	mov	r1, r0
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	091b      	lsrs	r3, r3, #4
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	4a04      	ldr	r2, [pc, #16]	; (8006c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c86:	5cd3      	ldrb	r3, [r2, r3]
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	58024400 	.word	0x58024400
 8006c98:	08011440 	.word	0x08011440

08006c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006ca0:	f7ff ffb6 	bl	8006c10 <HAL_RCC_GetHCLKFreq>
 8006ca4:	4601      	mov	r1, r0
 8006ca6:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	4a04      	ldr	r2, [pc, #16]	; (8006cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cb2:	5cd3      	ldrb	r3, [r2, r3]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	58024400 	.word	0x58024400
 8006cc4:	08011440 	.word	0x08011440

08006cc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d03d      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cec:	d013      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf2:	d802      	bhi.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006cf8:	e01f      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cfe:	d013      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006d00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d04:	d01c      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006d06:	e018      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d08:	4baf      	ldr	r3, [pc, #700]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	4aae      	ldr	r2, [pc, #696]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d14:	e015      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 fd33 	bl	8008788 <RCCEx_PLL2_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d26:	e00c      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3324      	adds	r3, #36	; 0x24
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fddc 	bl	80088ec <RCCEx_PLL3_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d38:	e003      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3e:	e000      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d48:	4b9f      	ldr	r3, [pc, #636]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d54:	499c      	ldr	r1, [pc, #624]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	650b      	str	r3, [r1, #80]	; 0x50
 8006d5a:	e001      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d03d      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d826      	bhi.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006d91 	.word	0x08006d91
 8006d80:	08006d9f 	.word	0x08006d9f
 8006d84:	08006db1 	.word	0x08006db1
 8006d88:	08006dc9 	.word	0x08006dc9
 8006d8c:	08006dc9 	.word	0x08006dc9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d90:	4b8d      	ldr	r3, [pc, #564]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	4a8c      	ldr	r2, [pc, #560]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d9c:	e015      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3304      	adds	r3, #4
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 fcef 	bl	8008788 <RCCEx_PLL2_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dae:	e00c      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3324      	adds	r3, #36	; 0x24
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 fd98 	bl	80088ec <RCCEx_PLL3_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dc0:	e003      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d109      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dd0:	4b7d      	ldr	r3, [pc, #500]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd4:	f023 0207 	bic.w	r2, r3, #7
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ddc:	497a      	ldr	r1, [pc, #488]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	650b      	str	r3, [r1, #80]	; 0x50
 8006de2:	e001      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d03e      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df8:	2b80      	cmp	r3, #128	; 0x80
 8006dfa:	d01c      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006dfc:	2b80      	cmp	r3, #128	; 0x80
 8006dfe:	d804      	bhi.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d00d      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006e08:	e01e      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e0c:	d01f      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e12:	d01e      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e14:	e018      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e16:	4b6c      	ldr	r3, [pc, #432]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	4a6b      	ldr	r2, [pc, #428]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e22:	e017      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fcac 	bl	8008788 <RCCEx_PLL2_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e34:	e00e      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3324      	adds	r3, #36	; 0x24
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 fd55 	bl	80088ec <RCCEx_PLL3_Config>
 8006e42:	4603      	mov	r3, r0
 8006e44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e46:	e005      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e4e:	bf00      	nop
 8006e50:	e000      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e5a:	4b5b      	ldr	r3, [pc, #364]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e66:	4958      	ldr	r1, [pc, #352]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	650b      	str	r3, [r1, #80]	; 0x50
 8006e6c:	e001      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d044      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e88:	d01f      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e8e:	d805      	bhi.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e98:	d00e      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006e9a:	e01f      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006e9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ea0:	d01f      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006ea2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ea6:	d01e      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006ea8:	e018      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eaa:	4b47      	ldr	r3, [pc, #284]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a46      	ldr	r2, [pc, #280]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eb6:	e017      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 fc62 	bl	8008788 <RCCEx_PLL2_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ec8:	e00e      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3324      	adds	r3, #36	; 0x24
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fd0b 	bl	80088ec <RCCEx_PLL3_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eda:	e005      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e000      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006eee:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006efc:	4932      	ldr	r1, [pc, #200]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	658b      	str	r3, [r1, #88]	; 0x58
 8006f02:	e001      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d044      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f1e:	d01f      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f24:	d805      	bhi.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006f2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f2e:	d00e      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f30:	e01f      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006f32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f36:	d01f      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f3c:	d01e      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f3e:	e018      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f40:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	4a20      	ldr	r2, [pc, #128]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f4c:	e017      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 fc17 	bl	8008788 <RCCEx_PLL2_Config>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f5e:	e00e      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3324      	adds	r3, #36	; 0x24
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 fcc0 	bl	80088ec <RCCEx_PLL3_Config>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f70:	e005      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
      break;
 8006f76:	e002      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f78:	bf00      	nop
 8006f7a:	e000      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f84:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f92:	490d      	ldr	r1, [pc, #52]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	658b      	str	r3, [r1, #88]	; 0x58
 8006f98:	e001      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d035      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d00c      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006fb2:	2b10      	cmp	r3, #16
 8006fb4:	d802      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01b      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006fba:	e017      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d00c      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006fc0:	2b30      	cmp	r3, #48	; 0x30
 8006fc2:	d018      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006fc4:	e012      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006fc6:	bf00      	nop
 8006fc8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fcc:	4baf      	ldr	r3, [pc, #700]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	4aae      	ldr	r2, [pc, #696]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006fd8:	e00e      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	2102      	movs	r1, #2
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 fbd1 	bl	8008788 <RCCEx_PLL2_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006fea:	e005      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff0:	e002      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ffe:	4ba3      	ldr	r3, [pc, #652]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007002:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700a:	49a0      	ldr	r1, [pc, #640]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800700c:	4313      	orrs	r3, r2
 800700e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007010:	e001      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d042      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702a:	d01f      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800702c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007030:	d805      	bhi.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703a:	d00e      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800703c:	e01f      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800703e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007042:	d01f      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007048:	d01e      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800704a:	e018      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800704c:	4b8f      	ldr	r3, [pc, #572]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	4a8e      	ldr	r2, [pc, #568]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007058:	e017      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3304      	adds	r3, #4
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f001 fb91 	bl	8008788 <RCCEx_PLL2_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800706a:	e00e      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	2100      	movs	r1, #0
 8007072:	4618      	mov	r0, r3
 8007074:	f001 fc3a 	bl	80088ec <RCCEx_PLL3_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800707c:	e005      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
      break;
 8007082:	e002      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007090:	4b7e      	ldr	r3, [pc, #504]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007094:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709c:	497b      	ldr	r1, [pc, #492]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	650b      	str	r3, [r1, #80]	; 0x50
 80070a2:	e001      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d042      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070bc:	d01b      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80070be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070c2:	d805      	bhi.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d022      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070cc:	d00a      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80070ce:	e01b      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80070d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070d4:	d01d      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80070d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070da:	d01c      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80070dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070e0:	d01b      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x452>
 80070e2:	e011      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3304      	adds	r3, #4
 80070e8:	2101      	movs	r1, #1
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 fb4c 	bl	8008788 <RCCEx_PLL2_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070f4:	e012      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3324      	adds	r3, #36	; 0x24
 80070fa:	2101      	movs	r1, #1
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 fbf5 	bl	80088ec <RCCEx_PLL3_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007106:	e009      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	75fb      	strb	r3, [r7, #23]
      break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800710e:	bf00      	nop
 8007110:	e004      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800711a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007122:	4b5a      	ldr	r3, [pc, #360]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007126:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712e:	4957      	ldr	r1, [pc, #348]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007130:	4313      	orrs	r3, r2
 8007132:	650b      	str	r3, [r1, #80]	; 0x50
 8007134:	e001      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d044      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800714c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007150:	d01b      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007156:	d805      	bhi.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d022      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800715c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007160:	d00a      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007162:	e01b      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007168:	d01d      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800716a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800716e:	d01c      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007170:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007174:	d01b      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007176:	e011      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	2101      	movs	r1, #1
 800717e:	4618      	mov	r0, r3
 8007180:	f001 fb02 	bl	8008788 <RCCEx_PLL2_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007188:	e012      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3324      	adds	r3, #36	; 0x24
 800718e:	2101      	movs	r1, #1
 8007190:	4618      	mov	r0, r3
 8007192:	f001 fbab 	bl	80088ec <RCCEx_PLL3_Config>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800719a:	e009      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	75fb      	strb	r3, [r7, #23]
      break;
 80071a0:	e006      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071a2:	bf00      	nop
 80071a4:	e004      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071a6:	bf00      	nop
 80071a8:	e002      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071b6:	4b35      	ldr	r3, [pc, #212]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071c4:	4931      	ldr	r1, [pc, #196]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	658b      	str	r3, [r1, #88]	; 0x58
 80071ca:	e001      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d02d      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071e4:	d005      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80071e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ea:	d009      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d013      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80071f0:	e00f      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f2:	4b26      	ldr	r3, [pc, #152]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	4a25      	ldr	r2, [pc, #148]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071fe:	e00c      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3304      	adds	r3, #4
 8007204:	2101      	movs	r1, #1
 8007206:	4618      	mov	r0, r3
 8007208:	f001 fabe 	bl	8008788 <RCCEx_PLL2_Config>
 800720c:	4603      	mov	r3, r0
 800720e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007210:	e003      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
      break;
 8007216:	e000      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007220:	4b1a      	ldr	r3, [pc, #104]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007224:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722c:	4917      	ldr	r1, [pc, #92]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800722e:	4313      	orrs	r3, r2
 8007230:	650b      	str	r3, [r1, #80]	; 0x50
 8007232:	e001      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d035      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007248:	2b03      	cmp	r3, #3
 800724a:	d81b      	bhi.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800724c:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007291 	.word	0x08007291
 8007258:	08007265 	.word	0x08007265
 800725c:	08007273 	.word	0x08007273
 8007260:	08007291 	.word	0x08007291
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007264:	4b09      	ldr	r3, [pc, #36]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	4a08      	ldr	r2, [pc, #32]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800726a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007270:	e00f      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3304      	adds	r3, #4
 8007276:	2102      	movs	r1, #2
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fa85 	bl	8008788 <RCCEx_PLL2_Config>
 800727e:	4603      	mov	r3, r0
 8007280:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007282:	e006      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
      break;
 8007288:	e003      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800728a:	bf00      	nop
 800728c:	58024400 	.word	0x58024400
      break;
 8007290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d109      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007298:	4bba      	ldr	r3, [pc, #744]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729c:	f023 0203 	bic.w	r2, r3, #3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a4:	49b7      	ldr	r1, [pc, #732]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072aa:	e001      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8086 	beq.w	80073ca <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072be:	4bb2      	ldr	r3, [pc, #712]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4ab1      	ldr	r2, [pc, #708]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80072c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072ca:	f7fa fbbd 	bl	8001a48 <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d0:	e009      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d2:	f7fa fbb9 	bl	8001a48 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b64      	cmp	r3, #100	; 0x64
 80072de:	d902      	bls.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	75fb      	strb	r3, [r7, #23]
        break;
 80072e4:	e005      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072e6:	4ba8      	ldr	r3, [pc, #672]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0ef      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d166      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072f8:	4ba2      	ldr	r3, [pc, #648]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007302:	4053      	eors	r3, r2
 8007304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007308:	2b00      	cmp	r3, #0
 800730a:	d013      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800730c:	4b9d      	ldr	r3, [pc, #628]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007314:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007316:	4b9b      	ldr	r3, [pc, #620]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731a:	4a9a      	ldr	r2, [pc, #616]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800731c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007320:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007322:	4b98      	ldr	r3, [pc, #608]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	4a97      	ldr	r2, [pc, #604]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800732e:	4a95      	ldr	r2, [pc, #596]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800733a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800733e:	d115      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007340:	f7fa fb82 	bl	8001a48 <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007346:	e00b      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007348:	f7fa fb7e 	bl	8001a48 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f241 3288 	movw	r2, #5000	; 0x1388
 8007356:	4293      	cmp	r3, r2
 8007358:	d902      	bls.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	75fb      	strb	r3, [r7, #23]
            break;
 800735e:	e005      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007360:	4b88      	ldr	r3, [pc, #544]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ed      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d126      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007380:	d10d      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007382:	4b80      	ldr	r3, [pc, #512]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007390:	0919      	lsrs	r1, r3, #4
 8007392:	4b7e      	ldr	r3, [pc, #504]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007394:	400b      	ands	r3, r1
 8007396:	497b      	ldr	r1, [pc, #492]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007398:	4313      	orrs	r3, r2
 800739a:	610b      	str	r3, [r1, #16]
 800739c:	e005      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800739e:	4b79      	ldr	r3, [pc, #484]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	4a78      	ldr	r2, [pc, #480]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80073a8:	6113      	str	r3, [r2, #16]
 80073aa:	4b76      	ldr	r3, [pc, #472]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073b8:	4972      	ldr	r1, [pc, #456]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	670b      	str	r3, [r1, #112]	; 0x70
 80073be:	e004      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	75bb      	strb	r3, [r7, #22]
 80073c4:	e001      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d07d      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073da:	2b28      	cmp	r3, #40	; 0x28
 80073dc:	d866      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	080074b3 	.word	0x080074b3
 80073e8:	080074ad 	.word	0x080074ad
 80073ec:	080074ad 	.word	0x080074ad
 80073f0:	080074ad 	.word	0x080074ad
 80073f4:	080074ad 	.word	0x080074ad
 80073f8:	080074ad 	.word	0x080074ad
 80073fc:	080074ad 	.word	0x080074ad
 8007400:	080074ad 	.word	0x080074ad
 8007404:	08007489 	.word	0x08007489
 8007408:	080074ad 	.word	0x080074ad
 800740c:	080074ad 	.word	0x080074ad
 8007410:	080074ad 	.word	0x080074ad
 8007414:	080074ad 	.word	0x080074ad
 8007418:	080074ad 	.word	0x080074ad
 800741c:	080074ad 	.word	0x080074ad
 8007420:	080074ad 	.word	0x080074ad
 8007424:	0800749b 	.word	0x0800749b
 8007428:	080074ad 	.word	0x080074ad
 800742c:	080074ad 	.word	0x080074ad
 8007430:	080074ad 	.word	0x080074ad
 8007434:	080074ad 	.word	0x080074ad
 8007438:	080074ad 	.word	0x080074ad
 800743c:	080074ad 	.word	0x080074ad
 8007440:	080074ad 	.word	0x080074ad
 8007444:	080074b3 	.word	0x080074b3
 8007448:	080074ad 	.word	0x080074ad
 800744c:	080074ad 	.word	0x080074ad
 8007450:	080074ad 	.word	0x080074ad
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074ad 	.word	0x080074ad
 800745c:	080074ad 	.word	0x080074ad
 8007460:	080074ad 	.word	0x080074ad
 8007464:	080074b3 	.word	0x080074b3
 8007468:	080074ad 	.word	0x080074ad
 800746c:	080074ad 	.word	0x080074ad
 8007470:	080074ad 	.word	0x080074ad
 8007474:	080074ad 	.word	0x080074ad
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074ad 	.word	0x080074ad
 8007480:	080074ad 	.word	0x080074ad
 8007484:	080074b3 	.word	0x080074b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	2101      	movs	r1, #1
 800748e:	4618      	mov	r0, r3
 8007490:	f001 f97a 	bl	8008788 <RCCEx_PLL2_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007498:	e00c      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3324      	adds	r3, #36	; 0x24
 800749e:	2101      	movs	r1, #1
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 fa23 	bl	80088ec <RCCEx_PLL3_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80074aa:	e003      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	75fb      	strb	r3, [r7, #23]
      break;
 80074b0:	e000      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80074b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80074ba:	4b32      	ldr	r3, [pc, #200]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c6:	492f      	ldr	r1, [pc, #188]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	654b      	str	r3, [r1, #84]	; 0x54
 80074cc:	e001      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d037      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e2:	2b05      	cmp	r3, #5
 80074e4:	d820      	bhi.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	0800752f 	.word	0x0800752f
 80074f0:	08007505 	.word	0x08007505
 80074f4:	08007517 	.word	0x08007517
 80074f8:	0800752f 	.word	0x0800752f
 80074fc:	0800752f 	.word	0x0800752f
 8007500:	0800752f 	.word	0x0800752f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3304      	adds	r3, #4
 8007508:	2101      	movs	r1, #1
 800750a:	4618      	mov	r0, r3
 800750c:	f001 f93c 	bl	8008788 <RCCEx_PLL2_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007514:	e00c      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3324      	adds	r3, #36	; 0x24
 800751a:	2101      	movs	r1, #1
 800751c:	4618      	mov	r0, r3
 800751e:	f001 f9e5 	bl	80088ec <RCCEx_PLL3_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007526:	e003      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	75fb      	strb	r3, [r7, #23]
      break;
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800752e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007536:	4b13      	ldr	r3, [pc, #76]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753a:	f023 0207 	bic.w	r2, r3, #7
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007542:	4910      	ldr	r1, [pc, #64]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007544:	4313      	orrs	r3, r2
 8007546:	654b      	str	r3, [r1, #84]	; 0x54
 8007548:	e001      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d040      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007560:	2b05      	cmp	r3, #5
 8007562:	d827      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007564:	a201      	add	r2, pc, #4	; (adr r2, 800756c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	080075bb 	.word	0x080075bb
 8007570:	08007591 	.word	0x08007591
 8007574:	080075a3 	.word	0x080075a3
 8007578:	080075bb 	.word	0x080075bb
 800757c:	080075bb 	.word	0x080075bb
 8007580:	080075bb 	.word	0x080075bb
 8007584:	58024400 	.word	0x58024400
 8007588:	58024800 	.word	0x58024800
 800758c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3304      	adds	r3, #4
 8007594:	2101      	movs	r1, #1
 8007596:	4618      	mov	r0, r3
 8007598:	f001 f8f6 	bl	8008788 <RCCEx_PLL2_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80075a0:	e00c      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3324      	adds	r3, #36	; 0x24
 80075a6:	2101      	movs	r1, #1
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 f99f 	bl	80088ec <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]
      break;
 80075b8:	e000      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80075ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075c2:	4bb2      	ldr	r3, [pc, #712]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c6:	f023 0207 	bic.w	r2, r3, #7
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d0:	49ae      	ldr	r1, [pc, #696]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	658b      	str	r3, [r1, #88]	; 0x58
 80075d6:	e001      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d044      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f2:	d01b      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x964>
 80075f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f8:	d805      	bhi.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d022      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80075fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007604:	e01b      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760a:	d01d      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800760c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007610:	d01c      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007612:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007616:	d01b      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007618:	e011      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3304      	adds	r3, #4
 800761e:	2100      	movs	r1, #0
 8007620:	4618      	mov	r0, r3
 8007622:	f001 f8b1 	bl	8008788 <RCCEx_PLL2_Config>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800762a:	e012      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3324      	adds	r3, #36	; 0x24
 8007630:	2102      	movs	r1, #2
 8007632:	4618      	mov	r0, r3
 8007634:	f001 f95a 	bl	80088ec <RCCEx_PLL3_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800763c:	e009      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	75fb      	strb	r3, [r7, #23]
      break;
 8007642:	e006      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007644:	bf00      	nop
 8007646:	e004      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007648:	bf00      	nop
 800764a:	e002      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800764c:	bf00      	nop
 800764e:	e000      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007658:	4b8c      	ldr	r3, [pc, #560]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800765a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007666:	4989      	ldr	r1, [pc, #548]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007668:	4313      	orrs	r3, r2
 800766a:	654b      	str	r3, [r1, #84]	; 0x54
 800766c:	e001      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d044      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007688:	d01b      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768e:	d805      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d022      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007698:	d00a      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800769a:	e01b      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800769c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a0:	d01d      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80076a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076a6:	d01c      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80076a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076ac:	d01b      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80076ae:	e011      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3304      	adds	r3, #4
 80076b4:	2100      	movs	r1, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 f866 	bl	8008788 <RCCEx_PLL2_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076c0:	e012      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3324      	adds	r3, #36	; 0x24
 80076c6:	2102      	movs	r1, #2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 f90f 	bl	80088ec <RCCEx_PLL3_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076d2:	e009      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]
      break;
 80076d8:	e006      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076da:	bf00      	nop
 80076dc:	e004      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076de:	bf00      	nop
 80076e0:	e002      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076e2:	bf00      	nop
 80076e4:	e000      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076ee:	4b67      	ldr	r3, [pc, #412]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076fc:	4963      	ldr	r1, [pc, #396]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	658b      	str	r3, [r1, #88]	; 0x58
 8007702:	e001      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007710:	2b00      	cmp	r3, #0
 8007712:	d044      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800771a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800771e:	d01b      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007724:	d805      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d022      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800772a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772e:	d00a      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007730:	e01b      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007736:	d01d      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007738:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800773c:	d01c      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800773e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007742:	d01b      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007744:	e011      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3304      	adds	r3, #4
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f001 f81b 	bl	8008788 <RCCEx_PLL2_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007756:	e012      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3324      	adds	r3, #36	; 0x24
 800775c:	2102      	movs	r1, #2
 800775e:	4618      	mov	r0, r3
 8007760:	f001 f8c4 	bl	80088ec <RCCEx_PLL3_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007768:	e009      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
      break;
 800776e:	e006      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007770:	bf00      	nop
 8007772:	e004      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007774:	bf00      	nop
 8007776:	e002      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007778:	bf00      	nop
 800777a:	e000      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800777c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007784:	4b41      	ldr	r3, [pc, #260]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007792:	493e      	ldr	r1, [pc, #248]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007794:	4313      	orrs	r3, r2
 8007796:	658b      	str	r3, [r1, #88]	; 0x58
 8007798:	e001      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01a      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b4:	d10a      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3324      	adds	r3, #36	; 0x24
 80077ba:	2102      	movs	r1, #2
 80077bc:	4618      	mov	r0, r3
 80077be:	f001 f895 	bl	80088ec <RCCEx_PLL3_Config>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077cc:	4b2f      	ldr	r3, [pc, #188]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077da:	492c      	ldr	r1, [pc, #176]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0310 	and.w	r3, r3, #16
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01a      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f6:	d10a      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3324      	adds	r3, #36	; 0x24
 80077fc:	2102      	movs	r1, #2
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 f874 	bl	80088ec <RCCEx_PLL3_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800780e:	4b1f      	ldr	r3, [pc, #124]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800781c:	491b      	ldr	r1, [pc, #108]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800781e:	4313      	orrs	r3, r2
 8007820:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d032      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007838:	d00d      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800783a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800783e:	d016      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d111      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	2100      	movs	r1, #0
 800784a:	4618      	mov	r0, r3
 800784c:	f000 ff9c 	bl	8008788 <RCCEx_PLL2_Config>
 8007850:	4603      	mov	r3, r0
 8007852:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007854:	e00c      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3324      	adds	r3, #36	; 0x24
 800785a:	2102      	movs	r1, #2
 800785c:	4618      	mov	r0, r3
 800785e:	f001 f845 	bl	80088ec <RCCEx_PLL3_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007866:	e003      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	75fb      	strb	r3, [r7, #23]
      break;
 800786c:	e000      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800786e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10c      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007884:	4901      	ldr	r1, [pc, #4]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007886:	4313      	orrs	r3, r2
 8007888:	658b      	str	r3, [r1, #88]	; 0x58
 800788a:	e003      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800788c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d02f      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078aa:	d00c      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80078ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078b0:	d015      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80078b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b6:	d10f      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b8:	4b79      	ldr	r3, [pc, #484]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	4a78      	ldr	r2, [pc, #480]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80078c4:	e00c      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3324      	adds	r3, #36	; 0x24
 80078ca:	2101      	movs	r1, #1
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 f80d 	bl	80088ec <RCCEx_PLL3_Config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80078d6:	e003      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
      break;
 80078dc:	e000      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80078de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10a      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078e6:	4b6e      	ldr	r3, [pc, #440]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f4:	496a      	ldr	r1, [pc, #424]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	654b      	str	r3, [r1, #84]	; 0x54
 80078fa:	e001      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d029      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007918:	d007      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800791a:	e00f      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791c:	4b60      	ldr	r3, [pc, #384]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	4a5f      	ldr	r2, [pc, #380]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007928:	e00b      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3304      	adds	r3, #4
 800792e:	2102      	movs	r1, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 ff29 	bl	8008788 <RCCEx_PLL2_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800793a:	e002      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	75fb      	strb	r3, [r7, #23]
      break;
 8007940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d109      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007948:	4b55      	ldr	r3, [pc, #340]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800794a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007954:	4952      	ldr	r1, [pc, #328]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007956:	4313      	orrs	r3, r2
 8007958:	64cb      	str	r3, [r1, #76]	; 0x4c
 800795a:	e001      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	2102      	movs	r1, #2
 8007972:	4618      	mov	r0, r3
 8007974:	f000 ffba 	bl	80088ec <RCCEx_PLL3_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d02f      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007996:	d00c      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799c:	d802      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d011      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80079a2:	e00d      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a8:	d00f      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80079aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ae:	d00e      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80079b0:	e006      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b2:	4b3b      	ldr	r3, [pc, #236]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	4a3a      	ldr	r2, [pc, #232]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80079be:	e007      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]
      break;
 80079c4:	e004      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80079c6:	bf00      	nop
 80079c8:	e002      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80079ca:	bf00      	nop
 80079cc:	e000      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80079ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079d6:	4b32      	ldr	r3, [pc, #200]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e2:	492f      	ldr	r1, [pc, #188]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	654b      	str	r3, [r1, #84]	; 0x54
 80079e8:	e001      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d008      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079fa:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	4926      	ldr	r1, [pc, #152]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a18:	4b21      	ldr	r3, [pc, #132]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a26:	491e      	ldr	r1, [pc, #120]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a38:	4b19      	ldr	r3, [pc, #100]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a44:	4916      	ldr	r1, [pc, #88]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a56:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	4a11      	ldr	r2, [pc, #68]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a60:	6113      	str	r3, [r2, #16]
 8007a62:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a64:	691a      	ldr	r2, [r3, #16]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a6c:	490c      	ldr	r1, [pc, #48]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da08      	bge.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a7a:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a86:	4906      	ldr	r1, [pc, #24]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007a8c:	7dbb      	ldrb	r3, [r7, #22]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	e000      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	58024400 	.word	0x58024400

08007aa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b090      	sub	sp, #64	; 0x40
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab2:	d150      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007ab4:	4ba1      	ldr	r3, [pc, #644]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d844      	bhi.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007ac4:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aca:	bf00      	nop
 8007acc:	08007ae1 	.word	0x08007ae1
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	08007b49 	.word	0x08007b49
 8007adc:	08007b11 	.word	0x08007b11
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 fd03 	bl	80084f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aee:	e241      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007af0:	f107 0318 	add.w	r3, r7, #24
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fa63 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007afe:	e239      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b00:	f107 030c 	add.w	r3, r7, #12
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fba7 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b0e:	e231      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b10:	4b8a      	ldr	r3, [pc, #552]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b20:	4b87      	ldr	r3, [pc, #540]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b24:	e226      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b2c:	d102      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007b2e:	4b85      	ldr	r3, [pc, #532]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b32:	e21f      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b3a:	d102      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007b3c:	4b82      	ldr	r3, [pc, #520]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b40:	e218      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b46:	e215      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b48:	4b80      	ldr	r3, [pc, #512]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b4c:	e212      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b52:	bf00      	nop
 8007b54:	e20e      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b5c:	d14f      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007b5e:	4b77      	ldr	r3, [pc, #476]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b62:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007b66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2b80      	cmp	r3, #128	; 0x80
 8007b6c:	d01c      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007b6e:	2b80      	cmp	r3, #128	; 0x80
 8007b70:	d804      	bhi.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d008      	beq.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d00e      	beq.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007b7a:	e03c      	b.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007b7c:	2bc0      	cmp	r3, #192	; 0xc0
 8007b7e:	d037      	beq.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b84:	d018      	beq.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007b86:	e036      	b.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fcaf 	bl	80084f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b96:	e1ed      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b98:	f107 0318 	add.w	r3, r7, #24
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fa0f 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ba6:	e1e5      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ba8:	f107 030c 	add.w	r3, r7, #12
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fb53 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb6:	e1dd      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bb8:	4b60      	ldr	r3, [pc, #384]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bc8:	4b5d      	ldr	r3, [pc, #372]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007bcc:	e1d2      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bd4:	d102      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007bd6:	4b5b      	ldr	r3, [pc, #364]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bda:	e1cb      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be2:	d102      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007be4:	4b58      	ldr	r3, [pc, #352]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be8:	e1c4      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bee:	e1c1      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bf0:	4b56      	ldr	r3, [pc, #344]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf4:	e1be      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bfa:	bf00      	nop
 8007bfc:	e1ba      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c04:	d153      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007c06:	4b4d      	ldr	r3, [pc, #308]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007c0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c16:	d01f      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c1c:	d805      	bhi.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c26:	d00f      	beq.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007c28:	e03d      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007c2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c2e:	d037      	beq.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c34:	d018      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007c36:	e036      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fc57 	bl	80084f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c46:	e195      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c48:	f107 0318 	add.w	r3, r7, #24
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f9b7 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c56:	e18d      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c58:	f107 030c 	add.w	r3, r7, #12
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fafb 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c66:	e185      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c68:	4b34      	ldr	r3, [pc, #208]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c70:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c78:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c7c:	e17a      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c84:	d102      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007c86:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c8a:	e173      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c92:	d102      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007c94:	4b2c      	ldr	r3, [pc, #176]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c98:	e16c      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c9e:	e169      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ca0:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca4:	e166      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007caa:	bf00      	nop
 8007cac:	e162      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb4:	d15d      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007cb6:	4b21      	ldr	r3, [pc, #132]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007cbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cc6:	d01f      	beq.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007cc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ccc:	d805      	bhi.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cd6:	d00f      	beq.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007cd8:	e047      	b.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007cda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cde:	d041      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007ce0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ce4:	d018      	beq.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007ce6:	e040      	b.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fbff 	bl	80084f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cf6:	e13d      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf8:	f107 0318 	add.w	r3, r7, #24
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f95f 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d06:	e135      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d08:	f107 030c 	add.w	r3, r7, #12
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 faa3 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d16:	e12d      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d18:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d28:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d2c:	e122      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007d36:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3a:	e11b      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007d3c:	58024400 	.word	0x58024400
 8007d40:	03d09000 	.word	0x03d09000
 8007d44:	003d0900 	.word	0x003d0900
 8007d48:	017d7840 	.word	0x017d7840
 8007d4c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d56:	d102      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007d58:	4b89      	ldr	r3, [pc, #548]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d5c:	e10a      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d62:	e107      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d64:	4b87      	ldr	r3, [pc, #540]	; (8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d68:	e104      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d6e:	bf00      	nop
 8007d70:	e100      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d78:	d153      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007d7a:	4b83      	ldr	r3, [pc, #524]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d8a:	d01f      	beq.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d90:	d805      	bhi.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d9a:	d00f      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007d9c:	e03d      	b.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007da2:	d037      	beq.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007da8:	d018      	beq.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007daa:	e036      	b.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fb9d 	bl	80084f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dba:	e0db      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dbc:	f107 0318 	add.w	r3, r7, #24
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 f8fd 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dca:	e0d3      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dcc:	f107 030c 	add.w	r3, r7, #12
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fa41 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dda:	e0cb      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ddc:	4b6a      	ldr	r3, [pc, #424]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007dec:	4b67      	ldr	r3, [pc, #412]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007df0:	e0c0      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007df8:	d102      	bne.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007dfa:	4b65      	ldr	r3, [pc, #404]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfe:	e0b9      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e06:	d102      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007e08:	4b5d      	ldr	r3, [pc, #372]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0c:	e0b2      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e12:	e0af      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e14:	4b5b      	ldr	r3, [pc, #364]	; (8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e18:	e0ac      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1e:	bf00      	nop
 8007e20:	e0a8      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e28:	d13d      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e2a:	4b57      	ldr	r3, [pc, #348]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e32:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3a:	d00c      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e40:	d011      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d12b      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e46:	f107 0318 	add.w	r3, r7, #24
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f8b8 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e54:	e08e      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e56:	f107 030c 	add.w	r3, r7, #12
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f9fc 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e64:	e086      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e66:	4b48      	ldr	r3, [pc, #288]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d102      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e76:	4b45      	ldr	r3, [pc, #276]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e7a:	e07b      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e82:	d102      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007e84:	4b42      	ldr	r3, [pc, #264]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e88:	e074      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e90:	d102      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007e92:	4b3b      	ldr	r3, [pc, #236]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e96:	e06d      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e9c:	e06a      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea2:	bf00      	nop
 8007ea4:	e066      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eac:	d11f      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007eae:	4b36      	ldr	r3, [pc, #216]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eb6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec2:	d008      	beq.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007ec4:	e00f      	b.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fb10 	bl	80084f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed4:	e04e      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ed6:	f107 0318 	add.w	r3, r7, #24
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f870 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee4:	e046      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eea:	bf00      	nop
 8007eec:	e042      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ef4:	d13c      	bne.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007ef6:	4b24      	ldr	r3, [pc, #144]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007efe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f06:	d01e      	beq.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f0c:	d805      	bhi.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00d      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f16:	d00e      	beq.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007f18:	e026      	b.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1e:	d01d      	beq.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f24:	d01d      	beq.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f2a:	d014      	beq.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007f2c:	e01c      	b.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007f2e:	f000 f831 	bl	8007f94 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f32:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007f34:	e01e      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f36:	f107 0318 	add.w	r3, r7, #24
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 f840 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f44:	e016      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f46:	f107 030c 	add.w	r3, r7, #12
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 f984 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f54:	e00e      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f5a:	e00b      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f60:	e008      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f66:	e005      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6c:	bf00      	nop
 8007f6e:	e001      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3740      	adds	r7, #64	; 0x40
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	017d7840 	.word	0x017d7840
 8007f84:	00bb8000 	.word	0x00bb8000
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	03d09000 	.word	0x03d09000
 8007f90:	003d0900 	.word	0x003d0900

08007f94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f98:	f7fe fe3a 	bl	8006c10 <HAL_RCC_GetHCLKFreq>
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	4a04      	ldr	r2, [pc, #16]	; (8007fbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007faa:	5cd3      	ldrb	r3, [r2, r3]
 8007fac:	f003 031f 	and.w	r3, r3, #31
 8007fb0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	08011440 	.word	0x08011440

08007fc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b089      	sub	sp, #36	; 0x24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fc8:	4b9d      	ldr	r3, [pc, #628]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007fd2:	4b9b      	ldr	r3, [pc, #620]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	0b1b      	lsrs	r3, r3, #12
 8007fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fde:	4b98      	ldr	r3, [pc, #608]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe2:	091b      	lsrs	r3, r3, #4
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007fea:	4b95      	ldr	r3, [pc, #596]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fee:	08db      	lsrs	r3, r3, #3
 8007ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	ee07 3a90 	vmov	s15, r3
 8007ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 810a 	beq.w	8008222 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d05a      	beq.n	80080ca <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008014:	2b01      	cmp	r3, #1
 8008016:	d302      	bcc.n	800801e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008018:	2b02      	cmp	r3, #2
 800801a:	d078      	beq.n	800810e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800801c:	e099      	b.n	8008152 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800801e:	4b88      	ldr	r3, [pc, #544]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d02d      	beq.n	8008086 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800802a:	4b85      	ldr	r3, [pc, #532]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	4a83      	ldr	r2, [pc, #524]	; (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	ee07 3a90 	vmov	s15, r3
 800804c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008054:	4b7a      	ldr	r3, [pc, #488]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805c:	ee07 3a90 	vmov	s15, r3
 8008060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008064:	ed97 6a03 	vldr	s12, [r7, #12]
 8008068:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800806c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008080:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008084:	e087      	b.n	8008196 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	ee07 3a90 	vmov	s15, r3
 800808c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008090:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008098:	4b69      	ldr	r3, [pc, #420]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a0:	ee07 3a90 	vmov	s15, r3
 80080a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080c8:	e065      	b.n	8008196 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80080d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080dc:	4b58      	ldr	r3, [pc, #352]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008108:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800810c:	e043      	b.n	8008196 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	ee07 3a90 	vmov	s15, r3
 8008114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008118:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800811c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008120:	4b47      	ldr	r3, [pc, #284]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008128:	ee07 3a90 	vmov	s15, r3
 800812c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008130:	ed97 6a03 	vldr	s12, [r7, #12]
 8008134:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008138:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008150:	e021      	b.n	8008196 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	ee07 3a90 	vmov	s15, r3
 8008158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008164:	4b36      	ldr	r3, [pc, #216]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816c:	ee07 3a90 	vmov	s15, r3
 8008170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008174:	ed97 6a03 	vldr	s12, [r7, #12]
 8008178:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800817c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008190:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008194:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008196:	4b2a      	ldr	r3, [pc, #168]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	0a5b      	lsrs	r3, r3, #9
 800819c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a0:	ee07 3a90 	vmov	s15, r3
 80081a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081bc:	ee17 2a90 	vmov	r2, s15
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80081c4:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081de:	edd7 6a07 	vldr	s13, [r7, #28]
 80081e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ea:	ee17 2a90 	vmov	r2, s15
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081f2:	4b13      	ldr	r3, [pc, #76]	; (8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	0e1b      	lsrs	r3, r3, #24
 80081f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800820c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008218:	ee17 2a90 	vmov	r2, s15
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008220:	e008      	b.n	8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	609a      	str	r2, [r3, #8]
}
 8008234:	bf00      	nop
 8008236:	3724      	adds	r7, #36	; 0x24
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	58024400 	.word	0x58024400
 8008244:	03d09000 	.word	0x03d09000
 8008248:	46000000 	.word	0x46000000
 800824c:	4c742400 	.word	0x4c742400
 8008250:	4a742400 	.word	0x4a742400
 8008254:	4bbebc20 	.word	0x4bbebc20

08008258 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008258:	b480      	push	{r7}
 800825a:	b089      	sub	sp, #36	; 0x24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008260:	4b9d      	ldr	r3, [pc, #628]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800826a:	4b9b      	ldr	r3, [pc, #620]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	0d1b      	lsrs	r3, r3, #20
 8008270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008274:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008276:	4b98      	ldr	r3, [pc, #608]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008282:	4b95      	ldr	r3, [pc, #596]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008286:	08db      	lsrs	r3, r3, #3
 8008288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	fb02 f303 	mul.w	r3, r2, r3
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 810a 	beq.w	80084ba <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d05a      	beq.n	8008362 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d302      	bcc.n	80082b6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d078      	beq.n	80083a6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80082b4:	e099      	b.n	80083ea <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082b6:	4b88      	ldr	r3, [pc, #544]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d02d      	beq.n	800831e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082c2:	4b85      	ldr	r3, [pc, #532]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	08db      	lsrs	r3, r3, #3
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	4a83      	ldr	r2, [pc, #524]	; (80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	ee07 3a90 	vmov	s15, r3
 80082e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ec:	4b7a      	ldr	r3, [pc, #488]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008300:	eddf 5a77 	vldr	s11, [pc, #476]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008318:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800831c:	e087      	b.n	800842e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008328:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800832c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008330:	4b69      	ldr	r3, [pc, #420]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008340:	ed97 6a03 	vldr	s12, [r7, #12]
 8008344:	eddf 5a66 	vldr	s11, [pc, #408]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800834c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008360:	e065      	b.n	800842e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	ee07 3a90 	vmov	s15, r3
 8008368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008374:	4b58      	ldr	r3, [pc, #352]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008384:	ed97 6a03 	vldr	s12, [r7, #12]
 8008388:	eddf 5a55 	vldr	s11, [pc, #340]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800838c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083a4:	e043      	b.n	800842e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	ee07 3a90 	vmov	s15, r3
 80083ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80083b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b8:	4b47      	ldr	r3, [pc, #284]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c0:	ee07 3a90 	vmov	s15, r3
 80083c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80083cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80083d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083e8:	e021      	b.n	800842e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	ee07 3a90 	vmov	s15, r3
 80083f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80083f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fc:	4b36      	ldr	r3, [pc, #216]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008404:	ee07 3a90 	vmov	s15, r3
 8008408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008410:	eddf 5a33 	vldr	s11, [pc, #204]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008428:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800842c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800842e:	4b2a      	ldr	r3, [pc, #168]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	0a5b      	lsrs	r3, r3, #9
 8008434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008444:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008448:	edd7 6a07 	vldr	s13, [r7, #28]
 800844c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008454:	ee17 2a90 	vmov	r2, s15
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800845c:	4b1e      	ldr	r3, [pc, #120]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800845e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008460:	0c1b      	lsrs	r3, r3, #16
 8008462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008472:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008476:	edd7 6a07 	vldr	s13, [r7, #28]
 800847a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800847e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008482:	ee17 2a90 	vmov	r2, s15
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800848a:	4b13      	ldr	r3, [pc, #76]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848e:	0e1b      	lsrs	r3, r3, #24
 8008490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084b0:	ee17 2a90 	vmov	r2, s15
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084b8:	e008      	b.n	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	609a      	str	r2, [r3, #8]
}
 80084cc:	bf00      	nop
 80084ce:	3724      	adds	r7, #36	; 0x24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	58024400 	.word	0x58024400
 80084dc:	03d09000 	.word	0x03d09000
 80084e0:	46000000 	.word	0x46000000
 80084e4:	4c742400 	.word	0x4c742400
 80084e8:	4a742400 	.word	0x4a742400
 80084ec:	4bbebc20 	.word	0x4bbebc20

080084f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b089      	sub	sp, #36	; 0x24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084f8:	4b9d      	ldr	r3, [pc, #628]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008502:	4b9b      	ldr	r3, [pc, #620]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	091b      	lsrs	r3, r3, #4
 8008508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800850c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800850e:	4b98      	ldr	r3, [pc, #608]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008518:	4b95      	ldr	r3, [pc, #596]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851c:	08db      	lsrs	r3, r3, #3
 800851e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	fb02 f303 	mul.w	r3, r2, r3
 8008528:	ee07 3a90 	vmov	s15, r3
 800852c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008530:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 810a 	beq.w	8008750 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d05a      	beq.n	80085f8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008542:	2b01      	cmp	r3, #1
 8008544:	d302      	bcc.n	800854c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008546:	2b02      	cmp	r3, #2
 8008548:	d078      	beq.n	800863c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800854a:	e099      	b.n	8008680 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800854c:	4b88      	ldr	r3, [pc, #544]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d02d      	beq.n	80085b4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008558:	4b85      	ldr	r3, [pc, #532]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	08db      	lsrs	r3, r3, #3
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	4a84      	ldr	r2, [pc, #528]	; (8008774 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
 8008568:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	ee07 3a90 	vmov	s15, r3
 8008570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008582:	4b7b      	ldr	r3, [pc, #492]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008592:	ed97 6a03 	vldr	s12, [r7, #12]
 8008596:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008778 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800859a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085b2:	e087      	b.n	80086c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800877c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80085c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c6:	4b6a      	ldr	r3, [pc, #424]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008778 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f6:	e065      	b.n	80086c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008602:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860a:	4b59      	ldr	r3, [pc, #356]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861a:	ed97 6a03 	vldr	s12, [r7, #12]
 800861e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008778 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800862e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800863a:	e043      	b.n	80086c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008784 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800864a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864e:	4b48      	ldr	r3, [pc, #288]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800865e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008662:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008778 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800866e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800867e:	e021      	b.n	80086c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800868e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008692:	4b37      	ldr	r3, [pc, #220]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008778 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80086aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086c2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80086c4:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	0a5b      	lsrs	r3, r3, #9
 80086ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086de:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ea:	ee17 2a90 	vmov	r2, s15
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80086f2:	4b1f      	ldr	r3, [pc, #124]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008718:	ee17 2a90 	vmov	r2, s15
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008720:	4b13      	ldr	r3, [pc, #76]	; (8008770 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	0e1b      	lsrs	r3, r3, #24
 8008726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800873a:	edd7 6a07 	vldr	s13, [r7, #28]
 800873e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008746:	ee17 2a90 	vmov	r2, s15
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800874e:	e008      	b.n	8008762 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	609a      	str	r2, [r3, #8]
}
 8008762:	bf00      	nop
 8008764:	3724      	adds	r7, #36	; 0x24
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	58024400 	.word	0x58024400
 8008774:	03d09000 	.word	0x03d09000
 8008778:	46000000 	.word	0x46000000
 800877c:	4c742400 	.word	0x4c742400
 8008780:	4a742400 	.word	0x4a742400
 8008784:	4bbebc20 	.word	0x4bbebc20

08008788 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008796:	4b53      	ldr	r3, [pc, #332]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d101      	bne.n	80087a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e099      	b.n	80088da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087a6:	4b4f      	ldr	r3, [pc, #316]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a4e      	ldr	r2, [pc, #312]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80087ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087b2:	f7f9 f949 	bl	8001a48 <HAL_GetTick>
 80087b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087b8:	e008      	b.n	80087cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087ba:	f7f9 f945 	bl	8001a48 <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d901      	bls.n	80087cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e086      	b.n	80088da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087cc:	4b45      	ldr	r3, [pc, #276]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1f0      	bne.n	80087ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087d8:	4b42      	ldr	r3, [pc, #264]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	031b      	lsls	r3, r3, #12
 80087e6:	493f      	ldr	r1, [pc, #252]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	628b      	str	r3, [r1, #40]	; 0x28
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	025b      	lsls	r3, r3, #9
 80087fe:	b29b      	uxth	r3, r3
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	3b01      	subs	r3, #1
 8008808:	041b      	lsls	r3, r3, #16
 800880a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	3b01      	subs	r3, #1
 8008816:	061b      	lsls	r3, r3, #24
 8008818:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800881c:	4931      	ldr	r1, [pc, #196]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 800881e:	4313      	orrs	r3, r2
 8008820:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008822:	4b30      	ldr	r3, [pc, #192]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008826:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	492d      	ldr	r1, [pc, #180]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008830:	4313      	orrs	r3, r2
 8008832:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008834:	4b2b      	ldr	r3, [pc, #172]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	f023 0220 	bic.w	r2, r3, #32
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	4928      	ldr	r1, [pc, #160]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008842:	4313      	orrs	r3, r2
 8008844:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008846:	4b27      	ldr	r3, [pc, #156]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	4a26      	ldr	r2, [pc, #152]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 800884c:	f023 0310 	bic.w	r3, r3, #16
 8008850:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008852:	4b24      	ldr	r3, [pc, #144]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <RCCEx_PLL2_Config+0x160>)
 8008858:	4013      	ands	r3, r2
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	69d2      	ldr	r2, [r2, #28]
 800885e:	00d2      	lsls	r2, r2, #3
 8008860:	4920      	ldr	r1, [pc, #128]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008862:	4313      	orrs	r3, r2
 8008864:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008866:	4b1f      	ldr	r3, [pc, #124]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	4a1e      	ldr	r2, [pc, #120]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 800886c:	f043 0310 	orr.w	r3, r3, #16
 8008870:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d106      	bne.n	8008886 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008878:	4b1a      	ldr	r3, [pc, #104]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	4a19      	ldr	r2, [pc, #100]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 800887e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008884:	e00f      	b.n	80088a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d106      	bne.n	800889a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800888c:	4b15      	ldr	r3, [pc, #84]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	4a14      	ldr	r2, [pc, #80]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 8008892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008896:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008898:	e005      	b.n	80088a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800889a:	4b12      	ldr	r3, [pc, #72]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 800889c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889e:	4a11      	ldr	r2, [pc, #68]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80088a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088a6:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a0e      	ldr	r2, [pc, #56]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80088ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b2:	f7f9 f8c9 	bl	8001a48 <HAL_GetTick>
 80088b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088b8:	e008      	b.n	80088cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088ba:	f7f9 f8c5 	bl	8001a48 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e006      	b.n	80088da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088cc:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <RCCEx_PLL2_Config+0x15c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0f0      	beq.n	80088ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	58024400 	.word	0x58024400
 80088e8:	ffff0007 	.word	0xffff0007

080088ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088fa:	4b53      	ldr	r3, [pc, #332]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	2b03      	cmp	r3, #3
 8008904:	d101      	bne.n	800890a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e099      	b.n	8008a3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800890a:	4b4f      	ldr	r3, [pc, #316]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a4e      	ldr	r2, [pc, #312]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008916:	f7f9 f897 	bl	8001a48 <HAL_GetTick>
 800891a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800891c:	e008      	b.n	8008930 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800891e:	f7f9 f893 	bl	8001a48 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e086      	b.n	8008a3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008930:	4b45      	ldr	r3, [pc, #276]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f0      	bne.n	800891e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800893c:	4b42      	ldr	r3, [pc, #264]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	051b      	lsls	r3, r3, #20
 800894a:	493f      	ldr	r1, [pc, #252]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 800894c:	4313      	orrs	r3, r2
 800894e:	628b      	str	r3, [r1, #40]	; 0x28
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	3b01      	subs	r3, #1
 8008960:	025b      	lsls	r3, r3, #9
 8008962:	b29b      	uxth	r3, r3
 8008964:	431a      	orrs	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	3b01      	subs	r3, #1
 800896c:	041b      	lsls	r3, r3, #16
 800896e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008972:	431a      	orrs	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	3b01      	subs	r3, #1
 800897a:	061b      	lsls	r3, r3, #24
 800897c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008980:	4931      	ldr	r1, [pc, #196]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008982:	4313      	orrs	r3, r2
 8008984:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008986:	4b30      	ldr	r3, [pc, #192]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	492d      	ldr	r1, [pc, #180]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008994:	4313      	orrs	r3, r2
 8008996:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008998:	4b2b      	ldr	r3, [pc, #172]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	4928      	ldr	r1, [pc, #160]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089aa:	4b27      	ldr	r3, [pc, #156]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ae:	4a26      	ldr	r2, [pc, #152]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089b6:	4b24      	ldr	r3, [pc, #144]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ba:	4b24      	ldr	r3, [pc, #144]	; (8008a4c <RCCEx_PLL3_Config+0x160>)
 80089bc:	4013      	ands	r3, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	69d2      	ldr	r2, [r2, #28]
 80089c2:	00d2      	lsls	r2, r2, #3
 80089c4:	4920      	ldr	r1, [pc, #128]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089ca:	4b1f      	ldr	r3, [pc, #124]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	4a1e      	ldr	r2, [pc, #120]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	4a19      	ldr	r2, [pc, #100]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089e8:	e00f      	b.n	8008a0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d106      	bne.n	80089fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089f0:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	4a14      	ldr	r2, [pc, #80]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 80089f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089fc:	e005      	b.n	8008a0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	4a11      	ldr	r2, [pc, #68]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a0e      	ldr	r2, [pc, #56]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a16:	f7f9 f817 	bl	8001a48 <HAL_GetTick>
 8008a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a1c:	e008      	b.n	8008a30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a1e:	f7f9 f813 	bl	8001a48 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e006      	b.n	8008a3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <RCCEx_PLL3_Config+0x15c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0f0      	beq.n	8008a1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	ffff0007 	.word	0xffff0007

08008a50 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e07c      	b.n	8008b5c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10c      	bne.n	8008a88 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7f8 fc74 	bl	8001370 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2203      	movs	r2, #3
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f867 	bl	8008b64 <HAL_SD_InitCard>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e05d      	b.n	8008b5c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008aa0:	f107 0308 	add.w	r3, r7, #8
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fdbe 	bl	8009628 <HAL_SD_GetCardStatus>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e052      	b.n	8008b5c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008ab6:	7e3b      	ldrb	r3, [r7, #24]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008abc:	7e7b      	ldrb	r3, [r7, #25]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d10a      	bne.n	8008ae0 <HAL_SD_Init+0x90>
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <HAL_SD_Init+0x86>
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008adc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ade:	e00b      	b.n	8008af8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d104      	bne.n	8008af2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008aee:	65da      	str	r2, [r3, #92]	; 0x5c
 8008af0:	e002      	b.n	8008af8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fe74 	bl	80097ec <HAL_SD_ConfigWideBusOperation>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e026      	b.n	8008b5c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008b0e:	f7f8 ff9b 	bl	8001a48 <HAL_GetTick>
 8008b12:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b14:	e011      	b.n	8008b3a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008b16:	f7f8 ff97 	bl	8001a48 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b24:	d109      	bne.n	8008b3a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e010      	b.n	8008b5c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 ff00 	bl	8009940 <HAL_SD_GetCardState>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d1e7      	bne.n	8008b16 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3728      	adds	r7, #40	; 0x28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b64:	b5b0      	push	{r4, r5, r7, lr}
 8008b66:	b08e      	sub	sp, #56	; 0x38
 8008b68:	af04      	add	r7, sp, #16
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008b74:	2300      	movs	r3, #0
 8008b76:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008b7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008b80:	f7fe ff90 	bl	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b84:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	0a1b      	lsrs	r3, r3, #8
 8008b8a:	4a40      	ldr	r2, [pc, #256]	; (8008c8c <HAL_SD_InitCard+0x128>)
 8008b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b90:	091b      	lsrs	r3, r3, #4
 8008b92:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d107      	bne.n	8008bac <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0210 	orr.w	r2, r2, #16
 8008baa:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681d      	ldr	r5, [r3, #0]
 8008bb0:	466c      	mov	r4, sp
 8008bb2:	f107 0314 	add.w	r3, r7, #20
 8008bb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f002 fe8f 	bl	800b8e8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f002 fed2 	bl	800b978 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008be6:	4a2a      	ldr	r2, [pc, #168]	; (8008c90 <HAL_SD_InitCard+0x12c>)
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bee:	3301      	adds	r3, #1
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7f8 ff35 	bl	8001a60 <HAL_Delay>
 8008bf6:	e002      	b.n	8008bfe <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008bf8:	2002      	movs	r0, #2
 8008bfa:	f7f8 ff31 	bl	8001a60 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 ff7c 	bl	8009afc <SD_PowerON>
 8008c04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00b      	beq.n	8008c24 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e02e      	b.n	8008c82 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 feab 	bl	8009980 <SD_InitCard>
 8008c2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00b      	beq.n	8008c4a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e01b      	b.n	8008c82 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c52:	4618      	mov	r0, r3
 8008c54:	f002 ff26 	bl	800baa4 <SDMMC_CmdBlockLength>
 8008c58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00f      	beq.n	8008c80 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a0b      	ldr	r2, [pc, #44]	; (8008c94 <HAL_SD_InitCard+0x130>)
 8008c66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e000      	b.n	8008c82 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3728      	adds	r7, #40	; 0x28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bdb0      	pop	{r4, r5, r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	014f8b59 	.word	0x014f8b59
 8008c90:	00012110 	.word	0x00012110
 8008c94:	1fe00fff 	.word	0x1fe00fff

08008c98 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b092      	sub	sp, #72	; 0x48
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ca6:	f7f8 fecf 	bl	8001a48 <HAL_GetTick>
 8008caa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d107      	bne.n	8008cca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e167      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	f040 815a 	bne.w	8008f8c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	441a      	add	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d907      	bls.n	8008cfc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e14e      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2203      	movs	r2, #3
 8008d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d002      	beq.n	8008d1a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	025b      	lsls	r3, r3, #9
 8008d18:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	025b      	lsls	r3, r3, #9
 8008d24:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d26:	2390      	movs	r3, #144	; 0x90
 8008d28:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f107 0214 	add.w	r2, r7, #20
 8008d3e:	4611      	mov	r1, r2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f002 fe83 	bl	800ba4c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d54:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d90a      	bls.n	8008d72 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f002 fee1 	bl	800bb30 <SDMMC_CmdReadMultiBlock>
 8008d6e:	6478      	str	r0, [r7, #68]	; 0x44
 8008d70:	e009      	b.n	8008d86 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f002 feb3 	bl	800baea <SDMMC_CmdReadSingleBlock>
 8008d84:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d012      	beq.n	8008db2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a84      	ldr	r2, [pc, #528]	; (8008fa4 <HAL_SD_ReadBlocks+0x30c>)
 8008d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0f3      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008db6:	e058      	b.n	8008e6a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d033      	beq.n	8008e2e <HAL_SD_ReadBlocks+0x196>
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc8:	2b1f      	cmp	r3, #31
 8008dca:	d930      	bls.n	8008e2e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008dcc:	2300      	movs	r3, #0
 8008dce:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd0:	e027      	b.n	8008e22 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f002 fdb0 	bl	800b93c <SDMMC_ReadFIFO>
 8008ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	3301      	adds	r3, #1
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	0a1b      	lsrs	r3, r3, #8
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df8:	3301      	adds	r3, #1
 8008dfa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	0c1b      	lsrs	r3, r3, #16
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e08:	3301      	adds	r3, #1
 8008e0a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	0e1b      	lsrs	r3, r3, #24
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	3301      	adds	r3, #1
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1e:	3301      	adds	r3, #1
 8008e20:	643b      	str	r3, [r7, #64]	; 0x40
 8008e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e24:	2b07      	cmp	r3, #7
 8008e26:	d9d4      	bls.n	8008dd2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2a:	3b20      	subs	r3, #32
 8008e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e2e:	f7f8 fe0b 	bl	8001a48 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d902      	bls.n	8008e44 <HAL_SD_ReadBlocks+0x1ac>
 8008e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d112      	bne.n	8008e6a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a56      	ldr	r2, [pc, #344]	; (8008fa4 <HAL_SD_ReadBlocks+0x30c>)
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e097      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e70:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d09f      	beq.n	8008db8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e86:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d022      	beq.n	8008edc <HAL_SD_ReadBlocks+0x244>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d91f      	bls.n	8008edc <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d01b      	beq.n	8008edc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f002 feab 	bl	800bc04 <SDMMC_CmdStopTransfer>
 8008eae:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d012      	beq.n	8008edc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a3a      	ldr	r2, [pc, #232]	; (8008fa4 <HAL_SD_ReadBlocks+0x30c>)
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e05e      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee2:	f003 0308 	and.w	r3, r3, #8
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d012      	beq.n	8008f10 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a2d      	ldr	r2, [pc, #180]	; (8008fa4 <HAL_SD_ReadBlocks+0x30c>)
 8008ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	f043 0208 	orr.w	r2, r3, #8
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e044      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d012      	beq.n	8008f44 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a20      	ldr	r2, [pc, #128]	; (8008fa4 <HAL_SD_ReadBlocks+0x30c>)
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	f043 0202 	orr.w	r2, r3, #2
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e02a      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d012      	beq.n	8008f78 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a13      	ldr	r2, [pc, #76]	; (8008fa4 <HAL_SD_ReadBlocks+0x30c>)
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	f043 0220 	orr.w	r2, r3, #32
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e010      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a0a      	ldr	r2, [pc, #40]	; (8008fa8 <HAL_SD_ReadBlocks+0x310>)
 8008f7e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e006      	b.n	8008f9a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
  }
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3748      	adds	r7, #72	; 0x48
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	1fe00fff 	.word	0x1fe00fff
 8008fa8:	18000f3a 	.word	0x18000f3a

08008fac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b092      	sub	sp, #72	; 0x48
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008fba:	f7f8 fd45 	bl	8001a48 <HAL_GetTick>
 8008fbe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d107      	bne.n	8008fde <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e16b      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	f040 815e 	bne.w	80092a8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	441a      	add	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d907      	bls.n	8009010 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e152      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2203      	movs	r2, #3
 8009014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d002      	beq.n	800902e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	025b      	lsls	r3, r3, #9
 800902c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800902e:	f04f 33ff 	mov.w	r3, #4294967295
 8009032:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	025b      	lsls	r3, r3, #9
 8009038:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800903a:	2390      	movs	r3, #144	; 0x90
 800903c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800903e:	2300      	movs	r3, #0
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009042:	2300      	movs	r3, #0
 8009044:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009046:	2300      	movs	r3, #0
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f107 0218 	add.w	r2, r7, #24
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f002 fcf9 	bl	800ba4c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009068:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d90a      	bls.n	8009086 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2220      	movs	r2, #32
 8009074:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800907c:	4618      	mov	r0, r3
 800907e:	f002 fd9d 	bl	800bbbc <SDMMC_CmdWriteMultiBlock>
 8009082:	6478      	str	r0, [r7, #68]	; 0x44
 8009084:	e009      	b.n	800909a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2210      	movs	r2, #16
 800908a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009092:	4618      	mov	r0, r3
 8009094:	f002 fd6f 	bl	800bb76 <SDMMC_CmdWriteSingleBlock>
 8009098:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800909a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800909c:	2b00      	cmp	r3, #0
 800909e:	d012      	beq.n	80090c6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a86      	ldr	r2, [pc, #536]	; (80092c0 <HAL_SD_WriteBlocks+0x314>)
 80090a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ae:	431a      	orrs	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e0f7      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80090ca:	e05c      	b.n	8009186 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d037      	beq.n	800914a <HAL_SD_WriteBlocks+0x19e>
 80090da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090dc:	2b1f      	cmp	r3, #31
 80090de:	d934      	bls.n	800914a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80090e0:	2300      	movs	r3, #0
 80090e2:	643b      	str	r3, [r7, #64]	; 0x40
 80090e4:	e02b      	b.n	800913e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80090e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80090ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ee:	3301      	adds	r3, #1
 80090f0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80090f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	021a      	lsls	r2, r3, #8
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80090fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009100:	3301      	adds	r3, #1
 8009102:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	041a      	lsls	r2, r3, #16
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	4313      	orrs	r3, r2
 800910e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009112:	3301      	adds	r3, #1
 8009114:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	061a      	lsls	r2, r3, #24
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	4313      	orrs	r3, r2
 8009120:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009124:	3301      	adds	r3, #1
 8009126:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f107 0214 	add.w	r2, r7, #20
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f002 fc0f 	bl	800b956 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913a:	3301      	adds	r3, #1
 800913c:	643b      	str	r3, [r7, #64]	; 0x40
 800913e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009140:	2b07      	cmp	r3, #7
 8009142:	d9d0      	bls.n	80090e6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009146:	3b20      	subs	r3, #32
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800914a:	f7f8 fc7d 	bl	8001a48 <HAL_GetTick>
 800914e:	4602      	mov	r2, r0
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009156:	429a      	cmp	r2, r3
 8009158:	d902      	bls.n	8009160 <HAL_SD_WriteBlocks+0x1b4>
 800915a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800915c:	2b00      	cmp	r3, #0
 800915e:	d112      	bne.n	8009186 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a56      	ldr	r2, [pc, #344]	; (80092c0 <HAL_SD_WriteBlocks+0x314>)
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800916c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916e:	431a      	orrs	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e097      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009190:	2b00      	cmp	r3, #0
 8009192:	d09b      	beq.n	80090cc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d022      	beq.n	80091f8 <HAL_SD_WriteBlocks+0x24c>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d91f      	bls.n	80091f8 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d01b      	beq.n	80091f8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f002 fd1d 	bl	800bc04 <SDMMC_CmdStopTransfer>
 80091ca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80091cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d012      	beq.n	80091f8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a3a      	ldr	r2, [pc, #232]	; (80092c0 <HAL_SD_WriteBlocks+0x314>)
 80091d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e0:	431a      	orrs	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e05e      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fe:	f003 0308 	and.w	r3, r3, #8
 8009202:	2b00      	cmp	r3, #0
 8009204:	d012      	beq.n	800922c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a2d      	ldr	r2, [pc, #180]	; (80092c0 <HAL_SD_WriteBlocks+0x314>)
 800920c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009212:	f043 0208 	orr.w	r2, r3, #8
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e044      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d012      	beq.n	8009260 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a20      	ldr	r2, [pc, #128]	; (80092c0 <HAL_SD_WriteBlocks+0x314>)
 8009240:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	f043 0202 	orr.w	r2, r3, #2
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e02a      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	f003 0310 	and.w	r3, r3, #16
 800926a:	2b00      	cmp	r3, #0
 800926c:	d012      	beq.n	8009294 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a13      	ldr	r2, [pc, #76]	; (80092c0 <HAL_SD_WriteBlocks+0x314>)
 8009274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	f043 0210 	orr.w	r2, r3, #16
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e010      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a0a      	ldr	r2, [pc, #40]	; (80092c4 <HAL_SD_WriteBlocks+0x318>)
 800929a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e006      	b.n	80092b6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
  }
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3748      	adds	r7, #72	; 0x48
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	1fe00fff 	.word	0x1fe00fff
 80092c4:	18000f3a 	.word	0x18000f3a

080092c8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ee:	0f9b      	lsrs	r3, r3, #30
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092fa:	0e9b      	lsrs	r3, r3, #26
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	f003 030f 	and.w	r3, r3, #15
 8009302:	b2da      	uxtb	r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800930c:	0e1b      	lsrs	r3, r3, #24
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 0303 	and.w	r3, r3, #3
 8009314:	b2da      	uxtb	r2, r3
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800931e:	0c1b      	lsrs	r3, r3, #16
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800932a:	0a1b      	lsrs	r3, r3, #8
 800932c:	b2da      	uxtb	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009336:	b2da      	uxtb	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009340:	0d1b      	lsrs	r3, r3, #20
 8009342:	b29a      	uxth	r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800934c:	0c1b      	lsrs	r3, r3, #16
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 030f 	and.w	r3, r3, #15
 8009354:	b2da      	uxtb	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935e:	0bdb      	lsrs	r3, r3, #15
 8009360:	b2db      	uxtb	r3, r3
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	b2da      	uxtb	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009370:	0b9b      	lsrs	r3, r3, #14
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009382:	0b5b      	lsrs	r3, r3, #13
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	b2da      	uxtb	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009394:	0b1b      	lsrs	r3, r3, #12
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	b2da      	uxtb	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2200      	movs	r2, #0
 80093a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d163      	bne.n	8009478 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b4:	009a      	lsls	r2, r3, #2
 80093b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093ba:	4013      	ands	r3, r2
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80093c0:	0f92      	lsrs	r2, r2, #30
 80093c2:	431a      	orrs	r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093cc:	0edb      	lsrs	r3, r3, #27
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	f003 0307 	and.w	r3, r3, #7
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093de:	0e1b      	lsrs	r3, r3, #24
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	f003 0307 	and.w	r3, r3, #7
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093f0:	0d5b      	lsrs	r3, r3, #21
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009402:	0c9b      	lsrs	r3, r3, #18
 8009404:	b2db      	uxtb	r3, r3
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	b2da      	uxtb	r2, r3
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009414:	0bdb      	lsrs	r3, r3, #15
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 0307 	and.w	r3, r3, #7
 800941c:	b2da      	uxtb	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	7e1b      	ldrb	r3, [r3, #24]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	3302      	adds	r3, #2
 8009438:	2201      	movs	r2, #1
 800943a:	fa02 f303 	lsl.w	r3, r2, r3
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009442:	fb02 f203 	mul.w	r2, r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	7a1b      	ldrb	r3, [r3, #8]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 030f 	and.w	r3, r3, #15
 8009454:	2201      	movs	r2, #1
 8009456:	409a      	lsls	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009464:	0a52      	lsrs	r2, r2, #9
 8009466:	fb02 f203 	mul.w	r2, r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009474:	659a      	str	r2, [r3, #88]	; 0x58
 8009476:	e031      	b.n	80094dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947c:	2b01      	cmp	r3, #1
 800947e:	d11d      	bne.n	80094bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009484:	041b      	lsls	r3, r3, #16
 8009486:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800948e:	0c1b      	lsrs	r3, r3, #16
 8009490:	431a      	orrs	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	3301      	adds	r3, #1
 800949c:	029a      	lsls	r2, r3, #10
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094b0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	659a      	str	r2, [r3, #88]	; 0x58
 80094ba:	e00f      	b.n	80094dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a58      	ldr	r2, [pc, #352]	; (8009624 <HAL_SD_GetCardCSD+0x344>)
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e09d      	b.n	8009618 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094e0:	0b9b      	lsrs	r3, r3, #14
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094f2:	09db      	lsrs	r3, r3, #7
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800950a:	b2da      	uxtb	r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009514:	0fdb      	lsrs	r3, r3, #31
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009520:	0f5b      	lsrs	r3, r3, #29
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 0303 	and.w	r3, r3, #3
 8009528:	b2da      	uxtb	r2, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009532:	0e9b      	lsrs	r3, r3, #26
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	b2da      	uxtb	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009544:	0d9b      	lsrs	r3, r3, #22
 8009546:	b2db      	uxtb	r3, r3
 8009548:	f003 030f 	and.w	r3, r3, #15
 800954c:	b2da      	uxtb	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009556:	0d5b      	lsrs	r3, r3, #21
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009572:	0c1b      	lsrs	r3, r3, #16
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009586:	0bdb      	lsrs	r3, r3, #15
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800959a:	0b9b      	lsrs	r3, r3, #14
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ae:	0b5b      	lsrs	r3, r3, #13
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095c2:	0b1b      	lsrs	r3, r3, #12
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d6:	0a9b      	lsrs	r3, r3, #10
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ea:	0a1b      	lsrs	r3, r3, #8
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0303 	and.w	r3, r3, #3
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	1fe00fff 	.word	0x1fe00fff

08009628 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b094      	sub	sp, #80	; 0x50
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009638:	f107 0308 	add.w	r3, r7, #8
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fb64 	bl	8009d0c <SD_SendSDStatus>
 8009644:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009648:	2b00      	cmp	r3, #0
 800964a:	d011      	beq.n	8009670 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a4f      	ldr	r2, [pc, #316]	; (8009790 <HAL_SD_GetCardStatus+0x168>)
 8009652:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800965a:	431a      	orrs	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800966e:	e070      	b.n	8009752 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	099b      	lsrs	r3, r3, #6
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	b2da      	uxtb	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	095b      	lsrs	r3, r3, #5
 8009684:	b2db      	uxtb	r3, r3
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	0a1b      	lsrs	r3, r3, #8
 8009694:	b29b      	uxth	r3, r3
 8009696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800969a:	b29a      	uxth	r2, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	0e1b      	lsrs	r3, r3, #24
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	4313      	orrs	r3, r2
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	061a      	lsls	r2, r3, #24
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096b6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096c0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	0e1b      	lsrs	r3, r3, #24
 80096c6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	0a1b      	lsrs	r3, r3, #8
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	0d1b      	lsrs	r3, r3, #20
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	0c1b      	lsrs	r3, r3, #16
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	b29a      	uxth	r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	0a9b      	lsrs	r3, r3, #10
 800970e:	b2db      	uxtb	r3, r3
 8009710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009714:	b2da      	uxtb	r2, r3
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	0a1b      	lsrs	r3, r3, #8
 800971e:	b2db      	uxtb	r3, r3
 8009720:	f003 0303 	and.w	r3, r3, #3
 8009724:	b2da      	uxtb	r2, r3
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	091b      	lsrs	r3, r3, #4
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f003 030f 	and.w	r3, r3, #15
 8009734:	b2da      	uxtb	r2, r3
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	f003 030f 	and.w	r3, r3, #15
 8009742:	b2da      	uxtb	r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	0e1b      	lsrs	r3, r3, #24
 800974c:	b2da      	uxtb	r2, r3
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800975a:	4618      	mov	r0, r3
 800975c:	f002 f9a2 	bl	800baa4 <SDMMC_CmdBlockLength>
 8009760:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00d      	beq.n	8009784 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a08      	ldr	r2, [pc, #32]	; (8009790 <HAL_SD_GetCardStatus+0x168>)
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009774:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009784:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009788:	4618      	mov	r0, r3
 800978a:	3750      	adds	r7, #80	; 0x50
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	1fe00fff 	.word	0x1fe00fff

08009794 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80097ec:	b5b0      	push	{r4, r5, r7, lr}
 80097ee:	b08e      	sub	sp, #56	; 0x38
 80097f0:	af04      	add	r7, sp, #16
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2203      	movs	r2, #3
 8009800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009808:	2b03      	cmp	r3, #3
 800980a:	d02e      	beq.n	800986a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009812:	d106      	bne.n	8009822 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
 8009820:	e029      	b.n	8009876 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009828:	d10a      	bne.n	8009840 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fb66 	bl	8009efc <SD_WideBus_Enable>
 8009830:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	431a      	orrs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	639a      	str	r2, [r3, #56]	; 0x38
 800983e:	e01a      	b.n	8009876 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fba3 	bl	8009f92 <SD_WideBus_Disable>
 800984c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	431a      	orrs	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	639a      	str	r2, [r3, #56]	; 0x38
 800985a:	e00c      	b.n	8009876 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	639a      	str	r2, [r3, #56]	; 0x38
 8009868:	e005      	b.n	8009876 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a2e      	ldr	r2, [pc, #184]	; (800993c <HAL_SD_ConfigWideBusOperation+0x150>)
 8009884:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800988c:	e034      	b.n	80098f8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d903      	bls.n	80098b4 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	e012      	b.n	80098da <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098bc:	d103      	bne.n	80098c6 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	61bb      	str	r3, [r7, #24]
 80098c4:	e009      	b.n	80098da <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ce:	d102      	bne.n	80098d6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80098d0:	2302      	movs	r3, #2
 80098d2:	61bb      	str	r3, [r7, #24]
 80098d4:	e001      	b.n	80098da <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80098d6:	2304      	movs	r3, #4
 80098d8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681d      	ldr	r5, [r3, #0]
 80098de:	466c      	mov	r4, sp
 80098e0:	f107 0314 	add.w	r3, r7, #20
 80098e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098f2:	4628      	mov	r0, r5
 80098f4:	f001 fff8 	bl	800b8e8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009900:	4618      	mov	r0, r3
 8009902:	f002 f8cf 	bl	800baa4 <SDMMC_CmdBlockLength>
 8009906:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00c      	beq.n	8009928 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a0a      	ldr	r2, [pc, #40]	; (800993c <HAL_SD_ConfigWideBusOperation+0x150>)
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009934:	4618      	mov	r0, r3
 8009936:	3728      	adds	r7, #40	; 0x28
 8009938:	46bd      	mov	sp, r7
 800993a:	bdb0      	pop	{r4, r5, r7, pc}
 800993c:	1fe00fff 	.word	0x1fe00fff

08009940 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800994c:	f107 030c 	add.w	r3, r7, #12
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 faaa 	bl	8009eac <SD_SendStatus>
 8009958:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	0a5b      	lsrs	r3, r3, #9
 8009970:	f003 030f 	and.w	r3, r3, #15
 8009974:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009976:	693b      	ldr	r3, [r7, #16]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009980:	b590      	push	{r4, r7, lr}
 8009982:	b091      	sub	sp, #68	; 0x44
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009988:	2301      	movs	r3, #1
 800998a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4618      	mov	r0, r3
 8009992:	f002 f802 	bl	800b99a <SDMMC_GetPowerState>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800999c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80099a0:	e0a8      	b.n	8009af4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d02e      	beq.n	8009a08 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f002 fa4e 	bl	800be50 <SDMMC_CmdSendCID>
 80099b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80099bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099be:	e099      	b.n	8009af4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2100      	movs	r1, #0
 80099c6:	4618      	mov	r0, r3
 80099c8:	f002 f82d 	bl	800ba26 <SDMMC_GetResponse>
 80099cc:	4602      	mov	r2, r0
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2104      	movs	r1, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	f002 f824 	bl	800ba26 <SDMMC_GetResponse>
 80099de:	4602      	mov	r2, r0
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2108      	movs	r1, #8
 80099ea:	4618      	mov	r0, r3
 80099ec:	f002 f81b 	bl	800ba26 <SDMMC_GetResponse>
 80099f0:	4602      	mov	r2, r0
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	210c      	movs	r1, #12
 80099fc:	4618      	mov	r0, r3
 80099fe:	f002 f812 	bl	800ba26 <SDMMC_GetResponse>
 8009a02:	4602      	mov	r2, r0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d00d      	beq.n	8009a2c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f107 020e 	add.w	r2, r7, #14
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f002 fa57 	bl	800bece <SDMMC_CmdSetRelAdd>
 8009a20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <SD_InitCard+0xac>
    {
      return errorstate;
 8009a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2a:	e063      	b.n	8009af4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d036      	beq.n	8009aa2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a34:	89fb      	ldrh	r3, [r7, #14]
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a44:	041b      	lsls	r3, r3, #16
 8009a46:	4619      	mov	r1, r3
 8009a48:	4610      	mov	r0, r2
 8009a4a:	f002 fa20 	bl	800be8e <SDMMC_CmdSendCSD>
 8009a4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <SD_InitCard+0xda>
    {
      return errorstate;
 8009a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a58:	e04c      	b.n	8009af4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4618      	mov	r0, r3
 8009a62:	f001 ffe0 	bl	800ba26 <SDMMC_GetResponse>
 8009a66:	4602      	mov	r2, r0
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2104      	movs	r1, #4
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 ffd7 	bl	800ba26 <SDMMC_GetResponse>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2108      	movs	r1, #8
 8009a84:	4618      	mov	r0, r3
 8009a86:	f001 ffce 	bl	800ba26 <SDMMC_GetResponse>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	210c      	movs	r1, #12
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 ffc5 	bl	800ba26 <SDMMC_GetResponse>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2104      	movs	r1, #4
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 ffbc 	bl	800ba26 <SDMMC_GetResponse>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	0d1a      	lsrs	r2, r3, #20
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ab6:	f107 0310 	add.w	r3, r7, #16
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fc0f 	bl	80092e0 <HAL_SD_GetCardCSD>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ac8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009acc:	e012      	b.n	8009af4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6819      	ldr	r1, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ad6:	041b      	lsls	r3, r3, #16
 8009ad8:	f04f 0400 	mov.w	r4, #0
 8009adc:	461a      	mov	r2, r3
 8009ade:	4623      	mov	r3, r4
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	f002 f8cb 	bl	800bc7c <SDMMC_CmdSelDesel>
 8009ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <SD_InitCard+0x172>
  {
    return errorstate;
 8009aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af0:	e000      	b.n	8009af4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3744      	adds	r7, #68	; 0x44
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd90      	pop	{r4, r7, pc}

08009afc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b088      	sub	sp, #32
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	61fb      	str	r3, [r7, #28]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009b10:	f7f7 ff9a 	bl	8001a48 <HAL_GetTick>
 8009b14:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f002 f8d2 	bl	800bcc4 <SDMMC_CmdGoIdleState>
 8009b20:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <SD_PowerON+0x30>
  {
    return errorstate;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	e0e9      	b.n	8009d00 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f002 f8e5 	bl	800bd00 <SDMMC_CmdOperCond>
 8009b36:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f002 f8bb 	bl	800bcc4 <SDMMC_CmdGoIdleState>
 8009b4e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d004      	beq.n	8009b60 <SD_PowerON+0x64>
    {
      return errorstate;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	e0d2      	b.n	8009d00 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d137      	bne.n	8009bd8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f002 f8e6 	bl	800bd40 <SDMMC_CmdAppCommand>
 8009b74:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d02d      	beq.n	8009bd8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b80:	e0be      	b.n	8009d00 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f002 f8d9 	bl	800bd40 <SDMMC_CmdAppCommand>
 8009b8e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <SD_PowerON+0x9e>
    {
      return errorstate;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	e0b2      	b.n	8009d00 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	495a      	ldr	r1, [pc, #360]	; (8009d08 <SD_PowerON+0x20c>)
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f002 f8f0 	bl	800bd86 <SDMMC_CmdAppOperCommand>
 8009ba6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bb2:	e0a5      	b.n	8009d00 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 ff33 	bl	800ba26 <SDMMC_GetResponse>
 8009bc0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	0fdb      	lsrs	r3, r3, #31
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d101      	bne.n	8009bce <SD_PowerON+0xd2>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <SD_PowerON+0xd4>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61bb      	str	r3, [r7, #24]

    count++;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d802      	bhi.n	8009be8 <SD_PowerON+0xec>
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0cc      	beq.n	8009b82 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d902      	bls.n	8009bf8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bf6:	e083      	b.n	8009d00 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d07d      	beq.n	8009cfe <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d176      	bne.n	8009cfe <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d071      	beq.n	8009cfe <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c20:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f042 0208 	orr.w	r2, r2, #8
 8009c30:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f002 f9b0 	bl	800bf9c <SDMMC_CmdVoltageSwitch>
 8009c3c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00c      	beq.n	8009c5e <SD_PowerON+0x162>
        {
          return errorstate;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	e05b      	b.n	8009d00 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c48:	f7f7 fefe 	bl	8001a48 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c56:	d102      	bne.n	8009c5e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009c58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c5c:	e050      	b.n	8009d00 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c6c:	d1ec      	bne.n	8009c48 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009c76:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c86:	d002      	beq.n	8009c8e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009c88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c8c:	e038      	b.n	8009d00 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009c8e:	2001      	movs	r0, #1
 8009c90:	f7ff fb1a 	bl	80092c8 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f042 0204 	orr.w	r2, r2, #4
 8009ca2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009ca4:	e00a      	b.n	8009cbc <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ca6:	f7f7 fecf 	bl	8001a48 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb4:	d102      	bne.n	8009cbc <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009cb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cba:	e021      	b.n	8009d00 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cca:	d1ec      	bne.n	8009ca6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cd4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce4:	d102      	bne.n	8009cec <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cea:	e009      	b.n	8009d00 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2213      	movs	r2, #19
 8009cf2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3720      	adds	r7, #32
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	c1100000 	.word	0xc1100000

08009d0c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08c      	sub	sp, #48	; 0x30
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d16:	f7f7 fe97 	bl	8001a48 <HAL_GetTick>
 8009d1a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f001 fe7d 	bl	800ba26 <SDMMC_GetResponse>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d36:	d102      	bne.n	8009d3e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d3c:	e0b0      	b.n	8009ea0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2140      	movs	r1, #64	; 0x40
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 fead 	bl	800baa4 <SDMMC_CmdBlockLength>
 8009d4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	e0a0      	b.n	8009ea0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d66:	041b      	lsls	r3, r3, #16
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	f001 ffe8 	bl	800bd40 <SDMMC_CmdAppCommand>
 8009d70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	e08d      	b.n	8009ea0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d84:	f04f 33ff 	mov.w	r3, #4294967295
 8009d88:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d8a:	2340      	movs	r3, #64	; 0x40
 8009d8c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d8e:	2360      	movs	r3, #96	; 0x60
 8009d90:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d92:	2302      	movs	r3, #2
 8009d94:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f107 0208 	add.w	r2, r7, #8
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 fe4f 	bl	800ba4c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f002 f8d0 	bl	800bf58 <SDMMC_CmdStatusRegister>
 8009db8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d02b      	beq.n	8009e18 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	e069      	b.n	8009ea0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d013      	beq.n	8009e02 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009dda:	2300      	movs	r3, #0
 8009ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dde:	e00d      	b.n	8009dfc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f001 fda9 	bl	800b93c <SDMMC_ReadFIFO>
 8009dea:	4602      	mov	r2, r0
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	601a      	str	r2, [r3, #0]
        pData++;
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	3304      	adds	r3, #4
 8009df4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	3301      	adds	r3, #1
 8009dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	2b07      	cmp	r3, #7
 8009e00:	d9ee      	bls.n	8009de0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e02:	f7f7 fe21 	bl	8001a48 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d102      	bne.n	8009e18 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e16:	e043      	b.n	8009ea0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0d2      	beq.n	8009dcc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	f003 0308 	and.w	r3, r3, #8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e34:	2308      	movs	r3, #8
 8009e36:	e033      	b.n	8009ea0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3e:	f003 0302 	and.w	r3, r3, #2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e46:	2302      	movs	r3, #2
 8009e48:	e02a      	b.n	8009ea0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e50:	f003 0320 	and.w	r3, r3, #32
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d017      	beq.n	8009e88 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009e58:	2320      	movs	r3, #32
 8009e5a:	e021      	b.n	8009ea0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f001 fd6b 	bl	800b93c <SDMMC_ReadFIFO>
 8009e66:	4602      	mov	r2, r0
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	601a      	str	r2, [r3, #0]
    pData++;
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	3304      	adds	r3, #4
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e72:	f7f7 fde9 	bl	8001a48 <HAL_GetTick>
 8009e76:	4602      	mov	r2, r0
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e80:	d102      	bne.n	8009e88 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e86:	e00b      	b.n	8009ea0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e2      	bne.n	8009e5c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a03      	ldr	r2, [pc, #12]	; (8009ea8 <SD_SendSDStatus+0x19c>)
 8009e9c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3730      	adds	r7, #48	; 0x30
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	18000f3a 	.word	0x18000f3a

08009eac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ec0:	e018      	b.n	8009ef4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eca:	041b      	lsls	r3, r3, #16
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f002 f81f 	bl	800bf12 <SDMMC_CmdSendStatus>
 8009ed4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	e009      	b.n	8009ef4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fd9d 	bl	800ba26 <SDMMC_GetResponse>
 8009eec:	4602      	mov	r2, r0
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2100      	movs	r1, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 fd87 	bl	800ba26 <SDMMC_GetResponse>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f22:	d102      	bne.n	8009f2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f28:	e02f      	b.n	8009f8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f2a:	f107 030c 	add.w	r3, r7, #12
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f879 	bl	800a028 <SD_FindSCR>
 8009f36:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	e023      	b.n	8009f8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d01c      	beq.n	8009f86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f54:	041b      	lsls	r3, r3, #16
 8009f56:	4619      	mov	r1, r3
 8009f58:	4610      	mov	r0, r2
 8009f5a:	f001 fef1 	bl	800bd40 <SDMMC_CmdAppCommand>
 8009f5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	e00f      	b.n	8009f8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2102      	movs	r1, #2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 ff28 	bl	800bdc6 <SDMMC_CmdBusWidth>
 8009f76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	e003      	b.n	8009f8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	e001      	b.n	8009f8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b086      	sub	sp, #24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f001 fd3c 	bl	800ba26 <SDMMC_GetResponse>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fb8:	d102      	bne.n	8009fc0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fbe:	e02f      	b.n	800a020 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fc0:	f107 030c 	add.w	r3, r7, #12
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f82e 	bl	800a028 <SD_FindSCR>
 8009fcc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	e023      	b.n	800a020 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d01c      	beq.n	800a01c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fea:	041b      	lsls	r3, r3, #16
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f001 fea6 	bl	800bd40 <SDMMC_CmdAppCommand>
 8009ff4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	e00f      	b.n	800a020 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f001 fedd 	bl	800bdc6 <SDMMC_CmdBusWidth>
 800a00c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	e003      	b.n	800a020 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a018:	2300      	movs	r3, #0
 800a01a:	e001      	b.n	800a020 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a01c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08e      	sub	sp, #56	; 0x38
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a032:	f7f7 fd09 	bl	8001a48 <HAL_GetTick>
 800a036:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a03c:	2300      	movs	r3, #0
 800a03e:	60bb      	str	r3, [r7, #8]
 800a040:	2300      	movs	r3, #0
 800a042:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2108      	movs	r1, #8
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 fd28 	bl	800baa4 <SDMMC_CmdBlockLength>
 800a054:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	e0ad      	b.n	800a1bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a068:	041b      	lsls	r3, r3, #16
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f001 fe67 	bl	800bd40 <SDMMC_CmdAppCommand>
 800a072:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	e09e      	b.n	800a1bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a07e:	f04f 33ff 	mov.w	r3, #4294967295
 800a082:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a084:	2308      	movs	r3, #8
 800a086:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a088:	2330      	movs	r3, #48	; 0x30
 800a08a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a08c:	2302      	movs	r3, #2
 800a08e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a090:	2300      	movs	r3, #0
 800a092:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a094:	2301      	movs	r3, #1
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f107 0210 	add.w	r2, r7, #16
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 fcd2 	bl	800ba4c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f001 fead 	bl	800be0c <SDMMC_CmdSendSCR>
 800a0b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d027      	beq.n	800a10a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	e07e      	b.n	800a1bc <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d113      	bne.n	800a0f4 <SD_FindSCR+0xcc>
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d110      	bne.n	800a0f4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 fc30 	bl	800b93c <SDMMC_ReadFIFO>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f001 fc29 	bl	800b93c <SDMMC_ReadFIFO>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	60fb      	str	r3, [r7, #12]
      index++;
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a0f4:	f7f7 fca8 	bl	8001a48 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a102:	d102      	bne.n	800a10a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a108:	e058      	b.n	800a1bc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a110:	f240 532a 	movw	r3, #1322	; 0x52a
 800a114:	4013      	ands	r3, r2
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0d1      	beq.n	800a0be <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a120:	f003 0308 	and.w	r3, r3, #8
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2208      	movs	r2, #8
 800a12e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a130:	2308      	movs	r3, #8
 800a132:	e043      	b.n	800a1bc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d005      	beq.n	800a14e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2202      	movs	r2, #2
 800a148:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a14a:	2302      	movs	r3, #2
 800a14c:	e036      	b.n	800a1bc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a154:	f003 0320 	and.w	r3, r3, #32
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2220      	movs	r2, #32
 800a162:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a164:	2320      	movs	r3, #32
 800a166:	e029      	b.n	800a1bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a15      	ldr	r2, [pc, #84]	; (800a1c4 <SD_FindSCR+0x19c>)
 800a16e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	061a      	lsls	r2, r3, #24
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a17c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	0a1b      	lsrs	r3, r3, #8
 800a182:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a186:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	0e1b      	lsrs	r3, r3, #24
 800a18c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a190:	601a      	str	r2, [r3, #0]
    scr++;
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	3304      	adds	r3, #4
 800a196:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	061a      	lsls	r2, r3, #24
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	0a1b      	lsrs	r3, r3, #8
 800a1aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a1ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	0e1b      	lsrs	r3, r3, #24
 800a1b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3738      	adds	r7, #56	; 0x38
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	18000f3a 	.word	0x18000f3a

0800a1c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e0e2      	b.n	800a3a4 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a70      	ldr	r2, [pc, #448]	; (800a3ac <HAL_SPI_Init+0x1e4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00f      	beq.n	800a20e <HAL_SPI_Init+0x46>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a6f      	ldr	r2, [pc, #444]	; (800a3b0 <HAL_SPI_Init+0x1e8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00a      	beq.n	800a20e <HAL_SPI_Init+0x46>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a6d      	ldr	r2, [pc, #436]	; (800a3b4 <HAL_SPI_Init+0x1ec>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d005      	beq.n	800a20e <HAL_SPI_Init+0x46>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	2b0f      	cmp	r3, #15
 800a208:	d901      	bls.n	800a20e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e0ca      	b.n	800a3a4 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f8d2 	bl	800a3b8 <SPI_GetPacketSize>
 800a214:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a64      	ldr	r2, [pc, #400]	; (800a3ac <HAL_SPI_Init+0x1e4>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00c      	beq.n	800a23a <HAL_SPI_Init+0x72>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a62      	ldr	r2, [pc, #392]	; (800a3b0 <HAL_SPI_Init+0x1e8>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d007      	beq.n	800a23a <HAL_SPI_Init+0x72>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a61      	ldr	r2, [pc, #388]	; (800a3b4 <HAL_SPI_Init+0x1ec>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d002      	beq.n	800a23a <HAL_SPI_Init+0x72>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b08      	cmp	r3, #8
 800a238:	d811      	bhi.n	800a25e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a23e:	4a5b      	ldr	r2, [pc, #364]	; (800a3ac <HAL_SPI_Init+0x1e4>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d009      	beq.n	800a258 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a59      	ldr	r2, [pc, #356]	; (800a3b0 <HAL_SPI_Init+0x1e8>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d004      	beq.n	800a258 <HAL_SPI_Init+0x90>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a58      	ldr	r2, [pc, #352]	; (800a3b4 <HAL_SPI_Init+0x1ec>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d104      	bne.n	800a262 <HAL_SPI_Init+0x9a>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2b10      	cmp	r3, #16
 800a25c:	d901      	bls.n	800a262 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e0a0      	b.n	800a3a4 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7f7 f8e6 	bl	8001448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f022 0201 	bic.w	r2, r2, #1
 800a292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a29c:	d110      	bne.n	800a2c0 <HAL_SPI_Init+0xf8>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2a6:	d10b      	bne.n	800a2c0 <HAL_SPI_Init+0xf8>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d107      	bne.n	800a2c0 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2be:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	69da      	ldr	r2, [r3, #28]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d2:	ea42 0103 	orr.w	r1, r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68da      	ldr	r2, [r3, #12]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	431a      	orrs	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a1b      	ldr	r3, [r3, #32]
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a314:	431a      	orrs	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	431a      	orrs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a320:	ea42 0103 	orr.w	r1, r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d113      	bne.n	800a360 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a34a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a35e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0201 	bic.w	r2, r2, #1
 800a36e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	40013000 	.word	0x40013000
 800a3b0:	40003800 	.word	0x40003800
 800a3b4:	40003c00 	.word	0x40003c00

0800a3b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c4:	095b      	lsrs	r3, r3, #5
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	3307      	adds	r3, #7
 800a3d6:	08db      	lsrs	r3, r3, #3
 800a3d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	fb02 f303 	mul.w	r3, r2, r3
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e042      	b.n	800a486 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7f7 f862 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2224      	movs	r2, #36	; 0x24
 800a41c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0201 	bic.w	r2, r2, #1
 800a42e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f95f 	bl	800a6f4 <UART_SetConfig>
 800a436:	4603      	mov	r3, r0
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d101      	bne.n	800a440 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e022      	b.n	800a486 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 ff03 	bl	800b254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a45c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689a      	ldr	r2, [r3, #8]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a46c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f042 0201 	orr.w	r2, r2, #1
 800a47c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 ff8a 	bl	800b398 <UART_CheckIdleState>
 800a484:	4603      	mov	r3, r0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b08a      	sub	sp, #40	; 0x28
 800a492:	af02      	add	r7, sp, #8
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	603b      	str	r3, [r7, #0]
 800a49a:	4613      	mov	r3, r2
 800a49c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a4:	2b20      	cmp	r3, #32
 800a4a6:	f040 8083 	bne.w	800a5b0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <HAL_UART_Transmit+0x28>
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e07b      	b.n	800a5b2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d101      	bne.n	800a4c8 <HAL_UART_Transmit+0x3a>
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	e074      	b.n	800a5b2 <HAL_UART_Transmit+0x124>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2221      	movs	r2, #33	; 0x21
 800a4dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a4e0:	f7f7 fab2 	bl	8001a48 <HAL_GetTick>
 800a4e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	88fa      	ldrh	r2, [r7, #6]
 800a4ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	88fa      	ldrh	r2, [r7, #6]
 800a4f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4fe:	d108      	bne.n	800a512 <HAL_UART_Transmit+0x84>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a508:	2300      	movs	r3, #0
 800a50a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	61bb      	str	r3, [r7, #24]
 800a510:	e003      	b.n	800a51a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800a522:	e02c      	b.n	800a57e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2200      	movs	r2, #0
 800a52c:	2180      	movs	r1, #128	; 0x80
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 ff7a 	bl	800b428 <UART_WaitOnFlagUntilTimeout>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e039      	b.n	800a5b2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10b      	bne.n	800a55c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a552:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	3302      	adds	r3, #2
 800a558:	61bb      	str	r3, [r7, #24]
 800a55a:	e007      	b.n	800a56c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	781a      	ldrb	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	3301      	adds	r3, #1
 800a56a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a572:	b29b      	uxth	r3, r3
 800a574:	3b01      	subs	r3, #1
 800a576:	b29a      	uxth	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a584:	b29b      	uxth	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1cc      	bne.n	800a524 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	2200      	movs	r2, #0
 800a592:	2140      	movs	r1, #64	; 0x40
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 ff47 	bl	800b428 <UART_WaitOnFlagUntilTimeout>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e006      	b.n	800a5b2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	e000      	b.n	800a5b2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a5b0:	2302      	movs	r3, #2
  }
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3720      	adds	r7, #32
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5d0:	2b20      	cmp	r3, #32
 800a5d2:	d170      	bne.n	800a6b6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <HAL_UART_Receive_DMA+0x24>
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e069      	b.n	800a6b8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d101      	bne.n	800a5f2 <HAL_UART_Receive_DMA+0x36>
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	e062      	b.n	800a6b8 <HAL_UART_Receive_DMA+0xfc>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	88fa      	ldrh	r2, [r7, #6]
 800a604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2222      	movs	r2, #34	; 0x22
 800a614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d02c      	beq.n	800a67a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a624:	4a26      	ldr	r2, [pc, #152]	; (800a6c0 <HAL_UART_Receive_DMA+0x104>)
 800a626:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a62c:	4a25      	ldr	r2, [pc, #148]	; (800a6c4 <HAL_UART_Receive_DMA+0x108>)
 800a62e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a634:	4a24      	ldr	r2, [pc, #144]	; (800a6c8 <HAL_UART_Receive_DMA+0x10c>)
 800a636:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a63c:	2200      	movs	r2, #0
 800a63e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3324      	adds	r3, #36	; 0x24
 800a64a:	4619      	mov	r1, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a650:	461a      	mov	r2, r3
 800a652:	88fb      	ldrh	r3, [r7, #6]
 800a654:	f7f7 fe9e 	bl	8002394 <HAL_DMA_Start_IT>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00d      	beq.n	800a67a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2210      	movs	r2, #16
 800a662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2220      	movs	r2, #32
 800a672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e01e      	b.n	800a6b8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a690:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f042 0201 	orr.w	r2, r2, #1
 800a6a0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6b0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e000      	b.n	800a6b8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800a6b6:	2302      	movs	r3, #2
  }
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	0800b5ad 	.word	0x0800b5ad
 800a6c4:	0800b613 	.word	0x0800b613
 800a6c8:	0800b62f 	.word	0x0800b62f

0800a6cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a6f8:	b08e      	sub	sp, #56	; 0x38
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	689a      	ldr	r2, [r3, #8]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	431a      	orrs	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	431a      	orrs	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	4313      	orrs	r3, r2
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a722:	4313      	orrs	r3, r2
 800a724:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	4bc1      	ldr	r3, [pc, #772]	; (800aa34 <UART_SetConfig+0x340>)
 800a72e:	4013      	ands	r3, r2
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	6812      	ldr	r2, [r2, #0]
 800a734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a736:	430b      	orrs	r3, r1
 800a738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	430a      	orrs	r2, r1
 800a74e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4ab7      	ldr	r2, [pc, #732]	; (800aa38 <UART_SetConfig+0x344>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d004      	beq.n	800a76a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a766:	4313      	orrs	r3, r2
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	4bb2      	ldr	r3, [pc, #712]	; (800aa3c <UART_SetConfig+0x348>)
 800a772:	4013      	ands	r3, r2
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	6812      	ldr	r2, [r2, #0]
 800a778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a77a:	430b      	orrs	r3, r1
 800a77c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	f023 010f 	bic.w	r1, r3, #15
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	430a      	orrs	r2, r1
 800a792:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4aa9      	ldr	r2, [pc, #676]	; (800aa40 <UART_SetConfig+0x34c>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d177      	bne.n	800a88e <UART_SetConfig+0x19a>
 800a79e:	4ba9      	ldr	r3, [pc, #676]	; (800aa44 <UART_SetConfig+0x350>)
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7a6:	2b28      	cmp	r3, #40	; 0x28
 800a7a8:	d86c      	bhi.n	800a884 <UART_SetConfig+0x190>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <UART_SetConfig+0xbc>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a855 	.word	0x0800a855
 800a7b4:	0800a885 	.word	0x0800a885
 800a7b8:	0800a885 	.word	0x0800a885
 800a7bc:	0800a885 	.word	0x0800a885
 800a7c0:	0800a885 	.word	0x0800a885
 800a7c4:	0800a885 	.word	0x0800a885
 800a7c8:	0800a885 	.word	0x0800a885
 800a7cc:	0800a885 	.word	0x0800a885
 800a7d0:	0800a85d 	.word	0x0800a85d
 800a7d4:	0800a885 	.word	0x0800a885
 800a7d8:	0800a885 	.word	0x0800a885
 800a7dc:	0800a885 	.word	0x0800a885
 800a7e0:	0800a885 	.word	0x0800a885
 800a7e4:	0800a885 	.word	0x0800a885
 800a7e8:	0800a885 	.word	0x0800a885
 800a7ec:	0800a885 	.word	0x0800a885
 800a7f0:	0800a865 	.word	0x0800a865
 800a7f4:	0800a885 	.word	0x0800a885
 800a7f8:	0800a885 	.word	0x0800a885
 800a7fc:	0800a885 	.word	0x0800a885
 800a800:	0800a885 	.word	0x0800a885
 800a804:	0800a885 	.word	0x0800a885
 800a808:	0800a885 	.word	0x0800a885
 800a80c:	0800a885 	.word	0x0800a885
 800a810:	0800a86d 	.word	0x0800a86d
 800a814:	0800a885 	.word	0x0800a885
 800a818:	0800a885 	.word	0x0800a885
 800a81c:	0800a885 	.word	0x0800a885
 800a820:	0800a885 	.word	0x0800a885
 800a824:	0800a885 	.word	0x0800a885
 800a828:	0800a885 	.word	0x0800a885
 800a82c:	0800a885 	.word	0x0800a885
 800a830:	0800a875 	.word	0x0800a875
 800a834:	0800a885 	.word	0x0800a885
 800a838:	0800a885 	.word	0x0800a885
 800a83c:	0800a885 	.word	0x0800a885
 800a840:	0800a885 	.word	0x0800a885
 800a844:	0800a885 	.word	0x0800a885
 800a848:	0800a885 	.word	0x0800a885
 800a84c:	0800a885 	.word	0x0800a885
 800a850:	0800a87d 	.word	0x0800a87d
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85a:	e233      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a85c:	2304      	movs	r3, #4
 800a85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a862:	e22f      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a864:	2308      	movs	r3, #8
 800a866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a86a:	e22b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a86c:	2310      	movs	r3, #16
 800a86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a872:	e227      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a874:	2320      	movs	r3, #32
 800a876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87a:	e223      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a87c:	2340      	movs	r3, #64	; 0x40
 800a87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a882:	e21f      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a884:	2380      	movs	r3, #128	; 0x80
 800a886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88a:	bf00      	nop
 800a88c:	e21a      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a6d      	ldr	r2, [pc, #436]	; (800aa48 <UART_SetConfig+0x354>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d132      	bne.n	800a8fe <UART_SetConfig+0x20a>
 800a898:	4b6a      	ldr	r3, [pc, #424]	; (800aa44 <UART_SetConfig+0x350>)
 800a89a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	2b05      	cmp	r3, #5
 800a8a2:	d827      	bhi.n	800a8f4 <UART_SetConfig+0x200>
 800a8a4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ac <UART_SetConfig+0x1b8>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a8c5 	.word	0x0800a8c5
 800a8b0:	0800a8cd 	.word	0x0800a8cd
 800a8b4:	0800a8d5 	.word	0x0800a8d5
 800a8b8:	0800a8dd 	.word	0x0800a8dd
 800a8bc:	0800a8e5 	.word	0x0800a8e5
 800a8c0:	0800a8ed 	.word	0x0800a8ed
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ca:	e1fb      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a8cc:	2304      	movs	r3, #4
 800a8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8d2:	e1f7      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a8d4:	2308      	movs	r3, #8
 800a8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8da:	e1f3      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a8dc:	2310      	movs	r3, #16
 800a8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8e2:	e1ef      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a8e4:	2320      	movs	r3, #32
 800a8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ea:	e1eb      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a8ec:	2340      	movs	r3, #64	; 0x40
 800a8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f2:	e1e7      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a8f4:	2380      	movs	r3, #128	; 0x80
 800a8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8fa:	bf00      	nop
 800a8fc:	e1e2      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a52      	ldr	r2, [pc, #328]	; (800aa4c <UART_SetConfig+0x358>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d132      	bne.n	800a96e <UART_SetConfig+0x27a>
 800a908:	4b4e      	ldr	r3, [pc, #312]	; (800aa44 <UART_SetConfig+0x350>)
 800a90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a90c:	f003 0307 	and.w	r3, r3, #7
 800a910:	2b05      	cmp	r3, #5
 800a912:	d827      	bhi.n	800a964 <UART_SetConfig+0x270>
 800a914:	a201      	add	r2, pc, #4	; (adr r2, 800a91c <UART_SetConfig+0x228>)
 800a916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91a:	bf00      	nop
 800a91c:	0800a935 	.word	0x0800a935
 800a920:	0800a93d 	.word	0x0800a93d
 800a924:	0800a945 	.word	0x0800a945
 800a928:	0800a94d 	.word	0x0800a94d
 800a92c:	0800a955 	.word	0x0800a955
 800a930:	0800a95d 	.word	0x0800a95d
 800a934:	2300      	movs	r3, #0
 800a936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93a:	e1c3      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a93c:	2304      	movs	r3, #4
 800a93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a942:	e1bf      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a944:	2308      	movs	r3, #8
 800a946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94a:	e1bb      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a94c:	2310      	movs	r3, #16
 800a94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a952:	e1b7      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a954:	2320      	movs	r3, #32
 800a956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95a:	e1b3      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a962:	e1af      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a964:	2380      	movs	r3, #128	; 0x80
 800a966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a96a:	bf00      	nop
 800a96c:	e1aa      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a37      	ldr	r2, [pc, #220]	; (800aa50 <UART_SetConfig+0x35c>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d132      	bne.n	800a9de <UART_SetConfig+0x2ea>
 800a978:	4b32      	ldr	r3, [pc, #200]	; (800aa44 <UART_SetConfig+0x350>)
 800a97a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a97c:	f003 0307 	and.w	r3, r3, #7
 800a980:	2b05      	cmp	r3, #5
 800a982:	d827      	bhi.n	800a9d4 <UART_SetConfig+0x2e0>
 800a984:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <UART_SetConfig+0x298>)
 800a986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800a9a5 	.word	0x0800a9a5
 800a990:	0800a9ad 	.word	0x0800a9ad
 800a994:	0800a9b5 	.word	0x0800a9b5
 800a998:	0800a9bd 	.word	0x0800a9bd
 800a99c:	0800a9c5 	.word	0x0800a9c5
 800a9a0:	0800a9cd 	.word	0x0800a9cd
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9aa:	e18b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a9ac:	2304      	movs	r3, #4
 800a9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b2:	e187      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a9b4:	2308      	movs	r3, #8
 800a9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ba:	e183      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a9bc:	2310      	movs	r3, #16
 800a9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c2:	e17f      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a9c4:	2320      	movs	r3, #32
 800a9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ca:	e17b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a9cc:	2340      	movs	r3, #64	; 0x40
 800a9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9d2:	e177      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a9d4:	2380      	movs	r3, #128	; 0x80
 800a9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9da:	bf00      	nop
 800a9dc:	e172      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a1c      	ldr	r2, [pc, #112]	; (800aa54 <UART_SetConfig+0x360>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d144      	bne.n	800aa72 <UART_SetConfig+0x37e>
 800a9e8:	4b16      	ldr	r3, [pc, #88]	; (800aa44 <UART_SetConfig+0x350>)
 800a9ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ec:	f003 0307 	and.w	r3, r3, #7
 800a9f0:	2b05      	cmp	r3, #5
 800a9f2:	d839      	bhi.n	800aa68 <UART_SetConfig+0x374>
 800a9f4:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <UART_SetConfig+0x308>)
 800a9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fa:	bf00      	nop
 800a9fc:	0800aa15 	.word	0x0800aa15
 800aa00:	0800aa1d 	.word	0x0800aa1d
 800aa04:	0800aa25 	.word	0x0800aa25
 800aa08:	0800aa2d 	.word	0x0800aa2d
 800aa0c:	0800aa59 	.word	0x0800aa59
 800aa10:	0800aa61 	.word	0x0800aa61
 800aa14:	2300      	movs	r3, #0
 800aa16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa1a:	e153      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa22:	e14f      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800aa24:	2308      	movs	r3, #8
 800aa26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2a:	e14b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800aa2c:	2310      	movs	r3, #16
 800aa2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa32:	e147      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800aa34:	cfff69f3 	.word	0xcfff69f3
 800aa38:	58000c00 	.word	0x58000c00
 800aa3c:	11fff4ff 	.word	0x11fff4ff
 800aa40:	40011000 	.word	0x40011000
 800aa44:	58024400 	.word	0x58024400
 800aa48:	40004400 	.word	0x40004400
 800aa4c:	40004800 	.word	0x40004800
 800aa50:	40004c00 	.word	0x40004c00
 800aa54:	40005000 	.word	0x40005000
 800aa58:	2320      	movs	r3, #32
 800aa5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa5e:	e131      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa66:	e12d      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800aa68:	2380      	movs	r3, #128	; 0x80
 800aa6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6e:	bf00      	nop
 800aa70:	e128      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4ab6      	ldr	r2, [pc, #728]	; (800ad50 <UART_SetConfig+0x65c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d178      	bne.n	800ab6e <UART_SetConfig+0x47a>
 800aa7c:	4bb5      	ldr	r3, [pc, #724]	; (800ad54 <UART_SetConfig+0x660>)
 800aa7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa84:	2b28      	cmp	r3, #40	; 0x28
 800aa86:	d86d      	bhi.n	800ab64 <UART_SetConfig+0x470>
 800aa88:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <UART_SetConfig+0x39c>)
 800aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8e:	bf00      	nop
 800aa90:	0800ab35 	.word	0x0800ab35
 800aa94:	0800ab65 	.word	0x0800ab65
 800aa98:	0800ab65 	.word	0x0800ab65
 800aa9c:	0800ab65 	.word	0x0800ab65
 800aaa0:	0800ab65 	.word	0x0800ab65
 800aaa4:	0800ab65 	.word	0x0800ab65
 800aaa8:	0800ab65 	.word	0x0800ab65
 800aaac:	0800ab65 	.word	0x0800ab65
 800aab0:	0800ab3d 	.word	0x0800ab3d
 800aab4:	0800ab65 	.word	0x0800ab65
 800aab8:	0800ab65 	.word	0x0800ab65
 800aabc:	0800ab65 	.word	0x0800ab65
 800aac0:	0800ab65 	.word	0x0800ab65
 800aac4:	0800ab65 	.word	0x0800ab65
 800aac8:	0800ab65 	.word	0x0800ab65
 800aacc:	0800ab65 	.word	0x0800ab65
 800aad0:	0800ab45 	.word	0x0800ab45
 800aad4:	0800ab65 	.word	0x0800ab65
 800aad8:	0800ab65 	.word	0x0800ab65
 800aadc:	0800ab65 	.word	0x0800ab65
 800aae0:	0800ab65 	.word	0x0800ab65
 800aae4:	0800ab65 	.word	0x0800ab65
 800aae8:	0800ab65 	.word	0x0800ab65
 800aaec:	0800ab65 	.word	0x0800ab65
 800aaf0:	0800ab4d 	.word	0x0800ab4d
 800aaf4:	0800ab65 	.word	0x0800ab65
 800aaf8:	0800ab65 	.word	0x0800ab65
 800aafc:	0800ab65 	.word	0x0800ab65
 800ab00:	0800ab65 	.word	0x0800ab65
 800ab04:	0800ab65 	.word	0x0800ab65
 800ab08:	0800ab65 	.word	0x0800ab65
 800ab0c:	0800ab65 	.word	0x0800ab65
 800ab10:	0800ab55 	.word	0x0800ab55
 800ab14:	0800ab65 	.word	0x0800ab65
 800ab18:	0800ab65 	.word	0x0800ab65
 800ab1c:	0800ab65 	.word	0x0800ab65
 800ab20:	0800ab65 	.word	0x0800ab65
 800ab24:	0800ab65 	.word	0x0800ab65
 800ab28:	0800ab65 	.word	0x0800ab65
 800ab2c:	0800ab65 	.word	0x0800ab65
 800ab30:	0800ab5d 	.word	0x0800ab5d
 800ab34:	2301      	movs	r3, #1
 800ab36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab3a:	e0c3      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ab3c:	2304      	movs	r3, #4
 800ab3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab42:	e0bf      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ab44:	2308      	movs	r3, #8
 800ab46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4a:	e0bb      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ab4c:	2310      	movs	r3, #16
 800ab4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab52:	e0b7      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ab54:	2320      	movs	r3, #32
 800ab56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab5a:	e0b3      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ab5c:	2340      	movs	r3, #64	; 0x40
 800ab5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab62:	e0af      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ab64:	2380      	movs	r3, #128	; 0x80
 800ab66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab6a:	bf00      	nop
 800ab6c:	e0aa      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a79      	ldr	r2, [pc, #484]	; (800ad58 <UART_SetConfig+0x664>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d132      	bne.n	800abde <UART_SetConfig+0x4ea>
 800ab78:	4b76      	ldr	r3, [pc, #472]	; (800ad54 <UART_SetConfig+0x660>)
 800ab7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab7c:	f003 0307 	and.w	r3, r3, #7
 800ab80:	2b05      	cmp	r3, #5
 800ab82:	d827      	bhi.n	800abd4 <UART_SetConfig+0x4e0>
 800ab84:	a201      	add	r2, pc, #4	; (adr r2, 800ab8c <UART_SetConfig+0x498>)
 800ab86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8a:	bf00      	nop
 800ab8c:	0800aba5 	.word	0x0800aba5
 800ab90:	0800abad 	.word	0x0800abad
 800ab94:	0800abb5 	.word	0x0800abb5
 800ab98:	0800abbd 	.word	0x0800abbd
 800ab9c:	0800abc5 	.word	0x0800abc5
 800aba0:	0800abcd 	.word	0x0800abcd
 800aba4:	2300      	movs	r3, #0
 800aba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abaa:	e08b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800abac:	2304      	movs	r3, #4
 800abae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb2:	e087      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800abb4:	2308      	movs	r3, #8
 800abb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abba:	e083      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800abbc:	2310      	movs	r3, #16
 800abbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abc2:	e07f      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800abc4:	2320      	movs	r3, #32
 800abc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abca:	e07b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800abcc:	2340      	movs	r3, #64	; 0x40
 800abce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abd2:	e077      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800abd4:	2380      	movs	r3, #128	; 0x80
 800abd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abda:	bf00      	nop
 800abdc:	e072      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a5e      	ldr	r2, [pc, #376]	; (800ad5c <UART_SetConfig+0x668>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d132      	bne.n	800ac4e <UART_SetConfig+0x55a>
 800abe8:	4b5a      	ldr	r3, [pc, #360]	; (800ad54 <UART_SetConfig+0x660>)
 800abea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abec:	f003 0307 	and.w	r3, r3, #7
 800abf0:	2b05      	cmp	r3, #5
 800abf2:	d827      	bhi.n	800ac44 <UART_SetConfig+0x550>
 800abf4:	a201      	add	r2, pc, #4	; (adr r2, 800abfc <UART_SetConfig+0x508>)
 800abf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfa:	bf00      	nop
 800abfc:	0800ac15 	.word	0x0800ac15
 800ac00:	0800ac1d 	.word	0x0800ac1d
 800ac04:	0800ac25 	.word	0x0800ac25
 800ac08:	0800ac2d 	.word	0x0800ac2d
 800ac0c:	0800ac35 	.word	0x0800ac35
 800ac10:	0800ac3d 	.word	0x0800ac3d
 800ac14:	2300      	movs	r3, #0
 800ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1a:	e053      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac22:	e04f      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac24:	2308      	movs	r3, #8
 800ac26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2a:	e04b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac32:	e047      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac34:	2320      	movs	r3, #32
 800ac36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac3a:	e043      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac3c:	2340      	movs	r3, #64	; 0x40
 800ac3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac42:	e03f      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac44:	2380      	movs	r3, #128	; 0x80
 800ac46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac4a:	bf00      	nop
 800ac4c:	e03a      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a43      	ldr	r2, [pc, #268]	; (800ad60 <UART_SetConfig+0x66c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d132      	bne.n	800acbe <UART_SetConfig+0x5ca>
 800ac58:	4b3e      	ldr	r3, [pc, #248]	; (800ad54 <UART_SetConfig+0x660>)
 800ac5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac5c:	f003 0307 	and.w	r3, r3, #7
 800ac60:	2b05      	cmp	r3, #5
 800ac62:	d827      	bhi.n	800acb4 <UART_SetConfig+0x5c0>
 800ac64:	a201      	add	r2, pc, #4	; (adr r2, 800ac6c <UART_SetConfig+0x578>)
 800ac66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6a:	bf00      	nop
 800ac6c:	0800ac85 	.word	0x0800ac85
 800ac70:	0800ac8d 	.word	0x0800ac8d
 800ac74:	0800ac95 	.word	0x0800ac95
 800ac78:	0800ac9d 	.word	0x0800ac9d
 800ac7c:	0800aca5 	.word	0x0800aca5
 800ac80:	0800acad 	.word	0x0800acad
 800ac84:	2302      	movs	r3, #2
 800ac86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8a:	e01b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac92:	e017      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac94:	2308      	movs	r3, #8
 800ac96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac9a:	e013      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800ac9c:	2310      	movs	r3, #16
 800ac9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aca2:	e00f      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800aca4:	2320      	movs	r3, #32
 800aca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acaa:	e00b      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800acac:	2340      	movs	r3, #64	; 0x40
 800acae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acb2:	e007      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800acb4:	2380      	movs	r3, #128	; 0x80
 800acb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acba:	bf00      	nop
 800acbc:	e002      	b.n	800acc4 <UART_SetConfig+0x5d0>
 800acbe:	2380      	movs	r3, #128	; 0x80
 800acc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a25      	ldr	r2, [pc, #148]	; (800ad60 <UART_SetConfig+0x66c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	f040 80b8 	bne.w	800ae40 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800acd4:	2b08      	cmp	r3, #8
 800acd6:	d019      	beq.n	800ad0c <UART_SetConfig+0x618>
 800acd8:	2b08      	cmp	r3, #8
 800acda:	dc04      	bgt.n	800ace6 <UART_SetConfig+0x5f2>
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d009      	beq.n	800acf4 <UART_SetConfig+0x600>
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d00b      	beq.n	800acfc <UART_SetConfig+0x608>
 800ace4:	e042      	b.n	800ad6c <UART_SetConfig+0x678>
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	d02b      	beq.n	800ad42 <UART_SetConfig+0x64e>
 800acea:	2b40      	cmp	r3, #64	; 0x40
 800acec:	d02c      	beq.n	800ad48 <UART_SetConfig+0x654>
 800acee:	2b10      	cmp	r3, #16
 800acf0:	d014      	beq.n	800ad1c <UART_SetConfig+0x628>
 800acf2:	e03b      	b.n	800ad6c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800acf4:	f7fd f94e 	bl	8007f94 <HAL_RCCEx_GetD3PCLK1Freq>
 800acf8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800acfa:	e03d      	b.n	800ad78 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acfc:	f107 0314 	add.w	r3, r7, #20
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd f95d 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad0a:	e035      	b.n	800ad78 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fd faa1 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad1a:	e02d      	b.n	800ad78 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad1c:	4b0d      	ldr	r3, [pc, #52]	; (800ad54 <UART_SetConfig+0x660>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0320 	and.w	r3, r3, #32
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d009      	beq.n	800ad3c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad28:	4b0a      	ldr	r3, [pc, #40]	; (800ad54 <UART_SetConfig+0x660>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	08db      	lsrs	r3, r3, #3
 800ad2e:	f003 0303 	and.w	r3, r3, #3
 800ad32:	4a0c      	ldr	r2, [pc, #48]	; (800ad64 <UART_SetConfig+0x670>)
 800ad34:	fa22 f303 	lsr.w	r3, r2, r3
 800ad38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad3a:	e01d      	b.n	800ad78 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800ad3c:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <UART_SetConfig+0x670>)
 800ad3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad40:	e01a      	b.n	800ad78 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad42:	4b09      	ldr	r3, [pc, #36]	; (800ad68 <UART_SetConfig+0x674>)
 800ad44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad46:	e017      	b.n	800ad78 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad4e:	e013      	b.n	800ad78 <UART_SetConfig+0x684>
 800ad50:	40011400 	.word	0x40011400
 800ad54:	58024400 	.word	0x58024400
 800ad58:	40007800 	.word	0x40007800
 800ad5c:	40007c00 	.word	0x40007c00
 800ad60:	58000c00 	.word	0x58000c00
 800ad64:	03d09000 	.word	0x03d09000
 800ad68:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 824d 	beq.w	800b21a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad84:	4aad      	ldr	r2, [pc, #692]	; (800b03c <UART_SetConfig+0x948>)
 800ad86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad92:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	4413      	add	r3, r2
 800ad9e:	6a3a      	ldr	r2, [r7, #32]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d305      	bcc.n	800adb0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adaa:	6a3a      	ldr	r2, [r7, #32]
 800adac:	429a      	cmp	r2, r3
 800adae:	d903      	bls.n	800adb8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800adb6:	e230      	b.n	800b21a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adba:	4618      	mov	r0, r3
 800adbc:	f04f 0100 	mov.w	r1, #0
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	4a9d      	ldr	r2, [pc, #628]	; (800b03c <UART_SetConfig+0x948>)
 800adc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adca:	b29b      	uxth	r3, r3
 800adcc:	f04f 0400 	mov.w	r4, #0
 800add0:	461a      	mov	r2, r3
 800add2:	4623      	mov	r3, r4
 800add4:	f7f5 fadc 	bl	8000390 <__aeabi_uldivmod>
 800add8:	4603      	mov	r3, r0
 800adda:	460c      	mov	r4, r1
 800addc:	4619      	mov	r1, r3
 800adde:	4622      	mov	r2, r4
 800ade0:	f04f 0300 	mov.w	r3, #0
 800ade4:	f04f 0400 	mov.w	r4, #0
 800ade8:	0214      	lsls	r4, r2, #8
 800adea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800adee:	020b      	lsls	r3, r1, #8
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	6852      	ldr	r2, [r2, #4]
 800adf4:	0852      	lsrs	r2, r2, #1
 800adf6:	4611      	mov	r1, r2
 800adf8:	f04f 0200 	mov.w	r2, #0
 800adfc:	eb13 0b01 	adds.w	fp, r3, r1
 800ae00:	eb44 0c02 	adc.w	ip, r4, r2
 800ae04:	4658      	mov	r0, fp
 800ae06:	4661      	mov	r1, ip
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f04f 0400 	mov.w	r4, #0
 800ae10:	461a      	mov	r2, r3
 800ae12:	4623      	mov	r3, r4
 800ae14:	f7f5 fabc 	bl	8000390 <__aeabi_uldivmod>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae24:	d308      	bcc.n	800ae38 <UART_SetConfig+0x744>
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae2c:	d204      	bcs.n	800ae38 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae34:	60da      	str	r2, [r3, #12]
 800ae36:	e1f0      	b.n	800b21a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae3e:	e1ec      	b.n	800b21a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	69db      	ldr	r3, [r3, #28]
 800ae44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae48:	f040 8100 	bne.w	800b04c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800ae4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae50:	2b40      	cmp	r3, #64	; 0x40
 800ae52:	f200 80b7 	bhi.w	800afc4 <UART_SetConfig+0x8d0>
 800ae56:	a201      	add	r2, pc, #4	; (adr r2, 800ae5c <UART_SetConfig+0x768>)
 800ae58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5c:	0800af61 	.word	0x0800af61
 800ae60:	0800af69 	.word	0x0800af69
 800ae64:	0800afc5 	.word	0x0800afc5
 800ae68:	0800afc5 	.word	0x0800afc5
 800ae6c:	0800af71 	.word	0x0800af71
 800ae70:	0800afc5 	.word	0x0800afc5
 800ae74:	0800afc5 	.word	0x0800afc5
 800ae78:	0800afc5 	.word	0x0800afc5
 800ae7c:	0800af81 	.word	0x0800af81
 800ae80:	0800afc5 	.word	0x0800afc5
 800ae84:	0800afc5 	.word	0x0800afc5
 800ae88:	0800afc5 	.word	0x0800afc5
 800ae8c:	0800afc5 	.word	0x0800afc5
 800ae90:	0800afc5 	.word	0x0800afc5
 800ae94:	0800afc5 	.word	0x0800afc5
 800ae98:	0800afc5 	.word	0x0800afc5
 800ae9c:	0800af91 	.word	0x0800af91
 800aea0:	0800afc5 	.word	0x0800afc5
 800aea4:	0800afc5 	.word	0x0800afc5
 800aea8:	0800afc5 	.word	0x0800afc5
 800aeac:	0800afc5 	.word	0x0800afc5
 800aeb0:	0800afc5 	.word	0x0800afc5
 800aeb4:	0800afc5 	.word	0x0800afc5
 800aeb8:	0800afc5 	.word	0x0800afc5
 800aebc:	0800afc5 	.word	0x0800afc5
 800aec0:	0800afc5 	.word	0x0800afc5
 800aec4:	0800afc5 	.word	0x0800afc5
 800aec8:	0800afc5 	.word	0x0800afc5
 800aecc:	0800afc5 	.word	0x0800afc5
 800aed0:	0800afc5 	.word	0x0800afc5
 800aed4:	0800afc5 	.word	0x0800afc5
 800aed8:	0800afc5 	.word	0x0800afc5
 800aedc:	0800afb7 	.word	0x0800afb7
 800aee0:	0800afc5 	.word	0x0800afc5
 800aee4:	0800afc5 	.word	0x0800afc5
 800aee8:	0800afc5 	.word	0x0800afc5
 800aeec:	0800afc5 	.word	0x0800afc5
 800aef0:	0800afc5 	.word	0x0800afc5
 800aef4:	0800afc5 	.word	0x0800afc5
 800aef8:	0800afc5 	.word	0x0800afc5
 800aefc:	0800afc5 	.word	0x0800afc5
 800af00:	0800afc5 	.word	0x0800afc5
 800af04:	0800afc5 	.word	0x0800afc5
 800af08:	0800afc5 	.word	0x0800afc5
 800af0c:	0800afc5 	.word	0x0800afc5
 800af10:	0800afc5 	.word	0x0800afc5
 800af14:	0800afc5 	.word	0x0800afc5
 800af18:	0800afc5 	.word	0x0800afc5
 800af1c:	0800afc5 	.word	0x0800afc5
 800af20:	0800afc5 	.word	0x0800afc5
 800af24:	0800afc5 	.word	0x0800afc5
 800af28:	0800afc5 	.word	0x0800afc5
 800af2c:	0800afc5 	.word	0x0800afc5
 800af30:	0800afc5 	.word	0x0800afc5
 800af34:	0800afc5 	.word	0x0800afc5
 800af38:	0800afc5 	.word	0x0800afc5
 800af3c:	0800afc5 	.word	0x0800afc5
 800af40:	0800afc5 	.word	0x0800afc5
 800af44:	0800afc5 	.word	0x0800afc5
 800af48:	0800afc5 	.word	0x0800afc5
 800af4c:	0800afc5 	.word	0x0800afc5
 800af50:	0800afc5 	.word	0x0800afc5
 800af54:	0800afc5 	.word	0x0800afc5
 800af58:	0800afc5 	.word	0x0800afc5
 800af5c:	0800afbd 	.word	0x0800afbd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af60:	f7fb fe86 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 800af64:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af66:	e033      	b.n	800afd0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af68:	f7fb fe98 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 800af6c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af6e:	e02f      	b.n	800afd0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af70:	f107 0314 	add.w	r3, r7, #20
 800af74:	4618      	mov	r0, r3
 800af76:	f7fd f823 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af7e:	e027      	b.n	800afd0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4618      	mov	r0, r3
 800af86:	f7fd f967 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af8e:	e01f      	b.n	800afd0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af90:	4b2b      	ldr	r3, [pc, #172]	; (800b040 <UART_SetConfig+0x94c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 0320 	and.w	r3, r3, #32
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d009      	beq.n	800afb0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af9c:	4b28      	ldr	r3, [pc, #160]	; (800b040 <UART_SetConfig+0x94c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	08db      	lsrs	r3, r3, #3
 800afa2:	f003 0303 	and.w	r3, r3, #3
 800afa6:	4a27      	ldr	r2, [pc, #156]	; (800b044 <UART_SetConfig+0x950>)
 800afa8:	fa22 f303 	lsr.w	r3, r2, r3
 800afac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afae:	e00f      	b.n	800afd0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800afb0:	4b24      	ldr	r3, [pc, #144]	; (800b044 <UART_SetConfig+0x950>)
 800afb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afb4:	e00c      	b.n	800afd0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afb6:	4b24      	ldr	r3, [pc, #144]	; (800b048 <UART_SetConfig+0x954>)
 800afb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afba:	e009      	b.n	800afd0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afc2:	e005      	b.n	800afd0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800afc4:	2300      	movs	r3, #0
 800afc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800afce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 8121 	beq.w	800b21a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	4a17      	ldr	r2, [pc, #92]	; (800b03c <UART_SetConfig+0x948>)
 800afde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afe2:	461a      	mov	r2, r3
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	fbb3 f3f2 	udiv	r3, r3, r2
 800afea:	005a      	lsls	r2, r3, #1
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	085b      	lsrs	r3, r3, #1
 800aff2:	441a      	add	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800affc:	b29b      	uxth	r3, r3
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	2b0f      	cmp	r3, #15
 800b004:	d916      	bls.n	800b034 <UART_SetConfig+0x940>
 800b006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b00c:	d212      	bcs.n	800b034 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	b29b      	uxth	r3, r3
 800b012:	f023 030f 	bic.w	r3, r3, #15
 800b016:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	085b      	lsrs	r3, r3, #1
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f003 0307 	and.w	r3, r3, #7
 800b022:	b29a      	uxth	r2, r3
 800b024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b026:	4313      	orrs	r3, r2
 800b028:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b030:	60da      	str	r2, [r3, #12]
 800b032:	e0f2      	b.n	800b21a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b03a:	e0ee      	b.n	800b21a <UART_SetConfig+0xb26>
 800b03c:	08011458 	.word	0x08011458
 800b040:	58024400 	.word	0x58024400
 800b044:	03d09000 	.word	0x03d09000
 800b048:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b04c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b050:	2b40      	cmp	r3, #64	; 0x40
 800b052:	f200 80b7 	bhi.w	800b1c4 <UART_SetConfig+0xad0>
 800b056:	a201      	add	r2, pc, #4	; (adr r2, 800b05c <UART_SetConfig+0x968>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b161 	.word	0x0800b161
 800b060:	0800b169 	.word	0x0800b169
 800b064:	0800b1c5 	.word	0x0800b1c5
 800b068:	0800b1c5 	.word	0x0800b1c5
 800b06c:	0800b171 	.word	0x0800b171
 800b070:	0800b1c5 	.word	0x0800b1c5
 800b074:	0800b1c5 	.word	0x0800b1c5
 800b078:	0800b1c5 	.word	0x0800b1c5
 800b07c:	0800b181 	.word	0x0800b181
 800b080:	0800b1c5 	.word	0x0800b1c5
 800b084:	0800b1c5 	.word	0x0800b1c5
 800b088:	0800b1c5 	.word	0x0800b1c5
 800b08c:	0800b1c5 	.word	0x0800b1c5
 800b090:	0800b1c5 	.word	0x0800b1c5
 800b094:	0800b1c5 	.word	0x0800b1c5
 800b098:	0800b1c5 	.word	0x0800b1c5
 800b09c:	0800b191 	.word	0x0800b191
 800b0a0:	0800b1c5 	.word	0x0800b1c5
 800b0a4:	0800b1c5 	.word	0x0800b1c5
 800b0a8:	0800b1c5 	.word	0x0800b1c5
 800b0ac:	0800b1c5 	.word	0x0800b1c5
 800b0b0:	0800b1c5 	.word	0x0800b1c5
 800b0b4:	0800b1c5 	.word	0x0800b1c5
 800b0b8:	0800b1c5 	.word	0x0800b1c5
 800b0bc:	0800b1c5 	.word	0x0800b1c5
 800b0c0:	0800b1c5 	.word	0x0800b1c5
 800b0c4:	0800b1c5 	.word	0x0800b1c5
 800b0c8:	0800b1c5 	.word	0x0800b1c5
 800b0cc:	0800b1c5 	.word	0x0800b1c5
 800b0d0:	0800b1c5 	.word	0x0800b1c5
 800b0d4:	0800b1c5 	.word	0x0800b1c5
 800b0d8:	0800b1c5 	.word	0x0800b1c5
 800b0dc:	0800b1b7 	.word	0x0800b1b7
 800b0e0:	0800b1c5 	.word	0x0800b1c5
 800b0e4:	0800b1c5 	.word	0x0800b1c5
 800b0e8:	0800b1c5 	.word	0x0800b1c5
 800b0ec:	0800b1c5 	.word	0x0800b1c5
 800b0f0:	0800b1c5 	.word	0x0800b1c5
 800b0f4:	0800b1c5 	.word	0x0800b1c5
 800b0f8:	0800b1c5 	.word	0x0800b1c5
 800b0fc:	0800b1c5 	.word	0x0800b1c5
 800b100:	0800b1c5 	.word	0x0800b1c5
 800b104:	0800b1c5 	.word	0x0800b1c5
 800b108:	0800b1c5 	.word	0x0800b1c5
 800b10c:	0800b1c5 	.word	0x0800b1c5
 800b110:	0800b1c5 	.word	0x0800b1c5
 800b114:	0800b1c5 	.word	0x0800b1c5
 800b118:	0800b1c5 	.word	0x0800b1c5
 800b11c:	0800b1c5 	.word	0x0800b1c5
 800b120:	0800b1c5 	.word	0x0800b1c5
 800b124:	0800b1c5 	.word	0x0800b1c5
 800b128:	0800b1c5 	.word	0x0800b1c5
 800b12c:	0800b1c5 	.word	0x0800b1c5
 800b130:	0800b1c5 	.word	0x0800b1c5
 800b134:	0800b1c5 	.word	0x0800b1c5
 800b138:	0800b1c5 	.word	0x0800b1c5
 800b13c:	0800b1c5 	.word	0x0800b1c5
 800b140:	0800b1c5 	.word	0x0800b1c5
 800b144:	0800b1c5 	.word	0x0800b1c5
 800b148:	0800b1c5 	.word	0x0800b1c5
 800b14c:	0800b1c5 	.word	0x0800b1c5
 800b150:	0800b1c5 	.word	0x0800b1c5
 800b154:	0800b1c5 	.word	0x0800b1c5
 800b158:	0800b1c5 	.word	0x0800b1c5
 800b15c:	0800b1bd 	.word	0x0800b1bd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b160:	f7fb fd86 	bl	8006c70 <HAL_RCC_GetPCLK1Freq>
 800b164:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b166:	e033      	b.n	800b1d0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b168:	f7fb fd98 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 800b16c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b16e:	e02f      	b.n	800b1d0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b170:	f107 0314 	add.w	r3, r7, #20
 800b174:	4618      	mov	r0, r3
 800b176:	f7fc ff23 	bl	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b17e:	e027      	b.n	800b1d0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b180:	f107 0308 	add.w	r3, r7, #8
 800b184:	4618      	mov	r0, r3
 800b186:	f7fd f867 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b18e:	e01f      	b.n	800b1d0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b190:	4b2c      	ldr	r3, [pc, #176]	; (800b244 <UART_SetConfig+0xb50>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0320 	and.w	r3, r3, #32
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d009      	beq.n	800b1b0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b19c:	4b29      	ldr	r3, [pc, #164]	; (800b244 <UART_SetConfig+0xb50>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	08db      	lsrs	r3, r3, #3
 800b1a2:	f003 0303 	and.w	r3, r3, #3
 800b1a6:	4a28      	ldr	r2, [pc, #160]	; (800b248 <UART_SetConfig+0xb54>)
 800b1a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1ae:	e00f      	b.n	800b1d0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b1b0:	4b25      	ldr	r3, [pc, #148]	; (800b248 <UART_SetConfig+0xb54>)
 800b1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1b4:	e00c      	b.n	800b1d0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1b6:	4b25      	ldr	r3, [pc, #148]	; (800b24c <UART_SetConfig+0xb58>)
 800b1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1ba:	e009      	b.n	800b1d0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1c2:	e005      	b.n	800b1d0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b1ce:	bf00      	nop
    }

    if (pclk != 0U)
 800b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d021      	beq.n	800b21a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	4a1d      	ldr	r2, [pc, #116]	; (800b250 <UART_SetConfig+0xb5c>)
 800b1dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	441a      	add	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	2b0f      	cmp	r3, #15
 800b200:	d908      	bls.n	800b214 <UART_SetConfig+0xb20>
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b208:	d204      	bcs.n	800b214 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b210:	60da      	str	r2, [r3, #12]
 800b212:	e002      	b.n	800b21a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b236:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3738      	adds	r7, #56	; 0x38
 800b23e:	46bd      	mov	sp, r7
 800b240:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b244:	58024400 	.word	0x58024400
 800b248:	03d09000 	.word	0x03d09000
 800b24c:	003d0900 	.word	0x003d0900
 800b250:	08011458 	.word	0x08011458

0800b254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00a      	beq.n	800b27e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	430a      	orrs	r2, r1
 800b27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00a      	beq.n	800b2a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	430a      	orrs	r2, r1
 800b29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00a      	beq.n	800b2c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c6:	f003 0308 	and.w	r3, r3, #8
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30a:	f003 0320 	and.w	r3, r3, #32
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00a      	beq.n	800b328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	430a      	orrs	r2, r1
 800b326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b330:	2b00      	cmp	r3, #0
 800b332:	d01a      	beq.n	800b36a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	430a      	orrs	r2, r1
 800b348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b352:	d10a      	bne.n	800b36a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	430a      	orrs	r2, r1
 800b368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	430a      	orrs	r2, r1
 800b38a:	605a      	str	r2, [r3, #4]
  }
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b3a8:	f7f6 fb4e 	bl	8001a48 <HAL_GetTick>
 800b3ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0308 	and.w	r3, r3, #8
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d10e      	bne.n	800b3da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f82c 	bl	800b428 <UART_WaitOnFlagUntilTimeout>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	e022      	b.n	800b420 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d10e      	bne.n	800b406 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f816 	bl	800b428 <UART_WaitOnFlagUntilTimeout>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e00c      	b.n	800b420 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2220      	movs	r2, #32
 800b40a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2220      	movs	r2, #32
 800b412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	603b      	str	r3, [r7, #0]
 800b434:	4613      	mov	r3, r2
 800b436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b438:	e062      	b.n	800b500 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b440:	d05e      	beq.n	800b500 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b442:	f7f6 fb01 	bl	8001a48 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d302      	bcc.n	800b458 <UART_WaitOnFlagUntilTimeout+0x30>
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d11d      	bne.n	800b494 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b466:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689a      	ldr	r2, [r3, #8]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0201 	bic.w	r2, r2, #1
 800b476:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2220      	movs	r2, #32
 800b47c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2220      	movs	r2, #32
 800b484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b490:	2303      	movs	r3, #3
 800b492:	e045      	b.n	800b520 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0304 	and.w	r3, r3, #4
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d02e      	beq.n	800b500 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4b0:	d126      	bne.n	800b500 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b4ca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689a      	ldr	r2, [r3, #8]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 0201 	bic.w	r2, r2, #1
 800b4da:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e00f      	b.n	800b520 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	69da      	ldr	r2, [r3, #28]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	4013      	ands	r3, r2
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	bf0c      	ite	eq
 800b510:	2301      	moveq	r3, #1
 800b512:	2300      	movne	r3, #0
 800b514:	b2db      	uxtb	r3, r3
 800b516:	461a      	mov	r2, r3
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d08d      	beq.n	800b43a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b53e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b54e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2220      	movs	r2, #32
 800b554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b57a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6899      	ldr	r1, [r3, #8]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	4b08      	ldr	r3, [pc, #32]	; (800b5a8 <UART_EndRxTransfer+0x44>)
 800b588:	400b      	ands	r3, r1
 800b58a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2220      	movs	r2, #32
 800b590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b59a:	bf00      	nop
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	effffffe 	.word	0xeffffffe

0800b5ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c2:	d01f      	beq.n	800b604 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5da:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f022 0201 	bic.w	r2, r2, #1
 800b5ea:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	689a      	ldr	r2, [r3, #8]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5fa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2220      	movs	r2, #32
 800b600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f7f5 fde1 	bl	80011cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b60a:	bf00      	nop
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f7ff f853 	bl	800a6cc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b626:	bf00      	nop
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b086      	sub	sp, #24
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b642:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b64a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b656:	2b80      	cmp	r3, #128	; 0x80
 800b658:	d109      	bne.n	800b66e <UART_DMAError+0x40>
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b21      	cmp	r3, #33	; 0x21
 800b65e:	d106      	bne.n	800b66e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2200      	movs	r2, #0
 800b664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b668:	6978      	ldr	r0, [r7, #20]
 800b66a:	f7ff ff5d 	bl	800b528 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b678:	2b40      	cmp	r3, #64	; 0x40
 800b67a:	d109      	bne.n	800b690 <UART_DMAError+0x62>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2b22      	cmp	r3, #34	; 0x22
 800b680:	d106      	bne.n	800b690 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2200      	movs	r2, #0
 800b686:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b68a:	6978      	ldr	r0, [r7, #20]
 800b68c:	f7ff ff6a 	bl	800b564 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b696:	f043 0210 	orr.w	r2, r3, #16
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6a0:	6978      	ldr	r0, [r7, #20]
 800b6a2:	f7ff f81d 	bl	800a6e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6a6:	bf00      	nop
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b085      	sub	sp, #20
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d101      	bne.n	800b6c4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	e027      	b.n	800b714 <HAL_UARTEx_DisableFifoMode+0x66>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2224      	movs	r2, #36	; 0x24
 800b6d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f022 0201 	bic.w	r2, r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b6f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b730:	2b01      	cmp	r3, #1
 800b732:	d101      	bne.n	800b738 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b734:	2302      	movs	r3, #2
 800b736:	e02d      	b.n	800b794 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2224      	movs	r2, #36	; 0x24
 800b744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f022 0201 	bic.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	430a      	orrs	r2, r1
 800b772:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f84f 	bl	800b818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2220      	movs	r2, #32
 800b786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d101      	bne.n	800b7b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	e02d      	b.n	800b810 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2224      	movs	r2, #36	; 0x24
 800b7c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f022 0201 	bic.w	r2, r2, #1
 800b7da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	430a      	orrs	r2, r1
 800b7ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f811 	bl	800b818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2220      	movs	r2, #32
 800b802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b818:	b480      	push	{r7}
 800b81a:	b089      	sub	sp, #36	; 0x24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b820:	4a2f      	ldr	r2, [pc, #188]	; (800b8e0 <UARTEx_SetNbDataToProcess+0xc8>)
 800b822:	f107 0314 	add.w	r3, r7, #20
 800b826:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b82a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b82e:	4a2d      	ldr	r2, [pc, #180]	; (800b8e4 <UARTEx_SetNbDataToProcess+0xcc>)
 800b830:	f107 030c 	add.w	r3, r7, #12
 800b834:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b838:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b840:	2b00      	cmp	r3, #0
 800b842:	d108      	bne.n	800b856 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b854:	e03d      	b.n	800b8d2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b856:	2310      	movs	r3, #16
 800b858:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b85a:	2310      	movs	r3, #16
 800b85c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	0e5b      	lsrs	r3, r3, #25
 800b866:	b2db      	uxtb	r3, r3
 800b868:	f003 0307 	and.w	r3, r3, #7
 800b86c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	0f5b      	lsrs	r3, r3, #29
 800b876:	b2db      	uxtb	r3, r3
 800b878:	f003 0307 	and.w	r3, r3, #7
 800b87c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b87e:	7fbb      	ldrb	r3, [r7, #30]
 800b880:	7f3a      	ldrb	r2, [r7, #28]
 800b882:	f107 0120 	add.w	r1, r7, #32
 800b886:	440a      	add	r2, r1
 800b888:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b88c:	fb02 f303 	mul.w	r3, r2, r3
 800b890:	7f3a      	ldrb	r2, [r7, #28]
 800b892:	f107 0120 	add.w	r1, r7, #32
 800b896:	440a      	add	r2, r1
 800b898:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b89c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b8a8:	7ffb      	ldrb	r3, [r7, #31]
 800b8aa:	7f7a      	ldrb	r2, [r7, #29]
 800b8ac:	f107 0120 	add.w	r1, r7, #32
 800b8b0:	440a      	add	r2, r1
 800b8b2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b8b6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ba:	7f7a      	ldrb	r2, [r7, #29]
 800b8bc:	f107 0120 	add.w	r1, r7, #32
 800b8c0:	440a      	add	r2, r1
 800b8c2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b8c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b8d2:	bf00      	nop
 800b8d4:	3724      	adds	r7, #36	; 0x24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	080113e8 	.word	0x080113e8
 800b8e4:	080113f0 	.word	0x080113f0

0800b8e8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	b480      	push	{r7}
 800b8ec:	b085      	sub	sp, #20
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	f107 001c 	add.w	r0, r7, #28
 800b8f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b8fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b900:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b902:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b906:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b90a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b90e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	4313      	orrs	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	4b07      	ldr	r3, [pc, #28]	; (800b938 <SDMMC_Init+0x50>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	431a      	orrs	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	b004      	add	sp, #16
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	ffc02c00 	.word	0xffc02c00

0800b93c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b956:	b480      	push	{r7}
 800b958:	b083      	sub	sp, #12
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f043 0203 	orr.w	r2, r3, #3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 0303 	and.w	r3, r3, #3
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
	...

0800b9b8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b9dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b9e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68da      	ldr	r2, [r3, #12]
 800b9ee:	4b06      	ldr	r3, [pc, #24]	; (800ba08 <SDMMC_SendCommand+0x50>)
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	fffee0c0 	.word	0xfffee0c0

0800ba0c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	b2db      	uxtb	r3, r3
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ba26:	b480      	push	{r7}
 800ba28:	b085      	sub	sp, #20
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	3314      	adds	r3, #20
 800ba34:	461a      	mov	r2, r3
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	4413      	add	r3, r2
 800ba3a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba72:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ba78:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ba7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	431a      	orrs	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0

}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bab2:	2310      	movs	r3, #16
 800bab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800babc:	2300      	movs	r3, #0
 800babe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bac4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bac6:	f107 0308 	add.w	r3, r7, #8
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7ff ff73 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bad2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bad6:	2110      	movs	r1, #16
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 faaf 	bl	800c03c <SDMMC_GetCmdResp1>
 800bade:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bae0:	69fb      	ldr	r3, [r7, #28]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b088      	sub	sp, #32
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800baf8:	2311      	movs	r3, #17
 800bafa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bafc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb0c:	f107 0308 	add.w	r3, r7, #8
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff ff50 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1c:	2111      	movs	r1, #17
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa8c 	bl	800c03c <SDMMC_GetCmdResp1>
 800bb24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb26:	69fb      	ldr	r3, [r7, #28]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3720      	adds	r7, #32
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bb3e:	2312      	movs	r3, #18
 800bb40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb52:	f107 0308 	add.w	r3, r7, #8
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff ff2d 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb62:	2112      	movs	r1, #18
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fa69 	bl	800c03c <SDMMC_GetCmdResp1>
 800bb6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb6c:	69fb      	ldr	r3, [r7, #28]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3720      	adds	r7, #32
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b088      	sub	sp, #32
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bb84:	2318      	movs	r3, #24
 800bb86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb98:	f107 0308 	add.w	r3, r7, #8
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7ff ff0a 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba8:	2118      	movs	r1, #24
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fa46 	bl	800c03c <SDMMC_GetCmdResp1>
 800bbb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbb2:	69fb      	ldr	r3, [r7, #28]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3720      	adds	r7, #32
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bbca:	2319      	movs	r3, #25
 800bbcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbde:	f107 0308 	add.w	r3, r7, #8
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff fee7 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bbea:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbee:	2119      	movs	r1, #25
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fa23 	bl	800c03c <SDMMC_GetCmdResp1>
 800bbf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbf8:	69fb      	ldr	r3, [r7, #28]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3720      	adds	r7, #32
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bc10:	230c      	movs	r3, #12
 800bc12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc22:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc3c:	f107 0308 	add.w	r3, r7, #8
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff feb8 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bc48:	4a0b      	ldr	r2, [pc, #44]	; (800bc78 <SDMMC_CmdStopTransfer+0x74>)
 800bc4a:	210c      	movs	r1, #12
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f9f5 	bl	800c03c <SDMMC_GetCmdResp1>
 800bc52:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc66:	d101      	bne.n	800bc6c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bc6c:	69fb      	ldr	r3, [r7, #28]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	05f5e100 	.word	0x05f5e100

0800bc7c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b08a      	sub	sp, #40	; 0x28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bc8c:	2307      	movs	r3, #7
 800bc8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc94:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc96:	2300      	movs	r3, #0
 800bc98:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc9e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bca0:	f107 0310 	add.w	r3, r7, #16
 800bca4:	4619      	mov	r1, r3
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7ff fe86 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bcac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcb0:	2107      	movs	r1, #7
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f000 f9c2 	bl	800c03c <SDMMC_GetCmdResp1>
 800bcb8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3728      	adds	r7, #40	; 0x28
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bce2:	f107 0308 	add.w	r3, r7, #8
 800bce6:	4619      	mov	r1, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7ff fe65 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f976 	bl	800bfe0 <SDMMC_GetCmdError>
 800bcf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcf6:	69fb      	ldr	r3, [r7, #28]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3720      	adds	r7, #32
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bd08:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bd0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bd0e:	2308      	movs	r3, #8
 800bd10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd22:	f107 0308 	add.w	r3, r7, #8
 800bd26:	4619      	mov	r1, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7ff fe45 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fb78 	bl	800c424 <SDMMC_GetCmdResp7>
 800bd34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd36:	69fb      	ldr	r3, [r7, #28]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3720      	adds	r7, #32
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b088      	sub	sp, #32
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bd4e:	2337      	movs	r3, #55	; 0x37
 800bd50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd62:	f107 0308 	add.w	r3, r7, #8
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fe25 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bd6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd72:	2137      	movs	r1, #55	; 0x37
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f961 	bl	800c03c <SDMMC_GetCmdResp1>
 800bd7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd7c:	69fb      	ldr	r3, [r7, #28]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3720      	adds	r7, #32
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b088      	sub	sp, #32
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bd94:	2329      	movs	r3, #41	; 0x29
 800bd96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bda2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bda6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bda8:	f107 0308 	add.w	r3, r7, #8
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7ff fe02 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fa7d 	bl	800c2b4 <SDMMC_GetCmdResp3>
 800bdba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdbc:	69fb      	ldr	r3, [r7, #28]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3720      	adds	r7, #32
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b088      	sub	sp, #32
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bdd4:	2306      	movs	r3, #6
 800bdd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdde:	2300      	movs	r3, #0
 800bde0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bde2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bde6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bde8:	f107 0308 	add.w	r3, r7, #8
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7ff fde2 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bdf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf8:	2106      	movs	r1, #6
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f91e 	bl	800c03c <SDMMC_GetCmdResp1>
 800be00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be02:	69fb      	ldr	r3, [r7, #28]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3720      	adds	r7, #32
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b088      	sub	sp, #32
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800be14:	2300      	movs	r3, #0
 800be16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800be18:	2333      	movs	r3, #51	; 0x33
 800be1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be2c:	f107 0308 	add.w	r3, r7, #8
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fdc0 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800be38:	f241 3288 	movw	r2, #5000	; 0x1388
 800be3c:	2133      	movs	r1, #51	; 0x33
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f8fc 	bl	800c03c <SDMMC_GetCmdResp1>
 800be44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be46:	69fb      	ldr	r3, [r7, #28]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3720      	adds	r7, #32
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800be58:	2300      	movs	r3, #0
 800be5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800be5c:	2302      	movs	r3, #2
 800be5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be60:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be70:	f107 0308 	add.w	r3, r7, #8
 800be74:	4619      	mov	r1, r3
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7ff fd9e 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f9cf 	bl	800c220 <SDMMC_GetCmdResp2>
 800be82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be84:	69fb      	ldr	r3, [r7, #28]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3720      	adds	r7, #32
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b088      	sub	sp, #32
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800be9c:	2309      	movs	r3, #9
 800be9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bea0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb0:	f107 0308 	add.w	r3, r7, #8
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff fd7e 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f9af 	bl	800c220 <SDMMC_GetCmdResp2>
 800bec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bec4:	69fb      	ldr	r3, [r7, #28]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3720      	adds	r7, #32
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b088      	sub	sp, #32
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bed8:	2300      	movs	r3, #0
 800beda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bedc:	2303      	movs	r3, #3
 800bede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee6:	2300      	movs	r3, #0
 800bee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef0:	f107 0308 	add.w	r3, r7, #8
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7ff fd5e 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	2103      	movs	r1, #3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fa17 	bl	800c334 <SDMMC_GetCmdResp6>
 800bf06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf08:	69fb      	ldr	r3, [r7, #28]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b088      	sub	sp, #32
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bf20:	230d      	movs	r3, #13
 800bf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf34:	f107 0308 	add.w	r3, r7, #8
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff fd3c 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bf40:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf44:	210d      	movs	r1, #13
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f878 	bl	800c03c <SDMMC_GetCmdResp1>
 800bf4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf4e:	69fb      	ldr	r3, [r7, #28]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf60:	2300      	movs	r3, #0
 800bf62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bf64:	230d      	movs	r3, #13
 800bf66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf78:	f107 0308 	add.w	r3, r7, #8
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff fd1a 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bf84:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf88:	210d      	movs	r1, #13
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f856 	bl	800c03c <SDMMC_GetCmdResp1>
 800bf90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf92:	69fb      	ldr	r3, [r7, #28]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3720      	adds	r7, #32
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800bfa8:	230b      	movs	r3, #11
 800bfaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfbc:	f107 0308 	add.w	r3, r7, #8
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff fcf8 	bl	800b9b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800bfc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfcc:	210b      	movs	r1, #11
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f834 	bl	800c03c <SDMMC_GetCmdResp1>
 800bfd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd6:	69fb      	ldr	r3, [r7, #28]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3720      	adds	r7, #32
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfe8:	4b11      	ldr	r3, [pc, #68]	; (800c030 <SDMMC_GetCmdError+0x50>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a11      	ldr	r2, [pc, #68]	; (800c034 <SDMMC_GetCmdError+0x54>)
 800bfee:	fba2 2303 	umull	r2, r3, r2, r3
 800bff2:	0a5b      	lsrs	r3, r3, #9
 800bff4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bff8:	fb02 f303 	mul.w	r3, r2, r3
 800bffc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	1e5a      	subs	r2, r3, #1
 800c002:	60fa      	str	r2, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d102      	bne.n	800c00e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c00c:	e009      	b.n	800c022 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0f1      	beq.n	800bffe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a06      	ldr	r2, [pc, #24]	; (800c038 <SDMMC_GetCmdError+0x58>)
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	24000000 	.word	0x24000000
 800c034:	10624dd3 	.word	0x10624dd3
 800c038:	002000c5 	.word	0x002000c5

0800c03c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b088      	sub	sp, #32
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	460b      	mov	r3, r1
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c04a:	4b70      	ldr	r3, [pc, #448]	; (800c20c <SDMMC_GetCmdResp1+0x1d0>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a70      	ldr	r2, [pc, #448]	; (800c210 <SDMMC_GetCmdResp1+0x1d4>)
 800c050:	fba2 2303 	umull	r2, r3, r2, r3
 800c054:	0a5a      	lsrs	r2, r3, #9
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	fb02 f303 	mul.w	r3, r2, r3
 800c05c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	1e5a      	subs	r2, r3, #1
 800c062:	61fa      	str	r2, [r7, #28]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d102      	bne.n	800c06e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c06c:	e0c9      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c074:	69ba      	ldr	r2, [r7, #24]
 800c076:	4b67      	ldr	r3, [pc, #412]	; (800c214 <SDMMC_GetCmdResp1+0x1d8>)
 800c078:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0ef      	beq.n	800c05e <SDMMC_GetCmdResp1+0x22>
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1ea      	bne.n	800c05e <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2204      	movs	r2, #4
 800c098:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c09a:	2304      	movs	r3, #4
 800c09c:	e0b1      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a2:	f003 0301 	and.w	r3, r3, #1
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d004      	beq.n	800c0b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e0a6      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4a58      	ldr	r2, [pc, #352]	; (800c218 <SDMMC_GetCmdResp1+0x1dc>)
 800c0b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f7ff fca6 	bl	800ba0c <SDMMC_GetCommandResponse>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	7afb      	ldrb	r3, [r7, #11]
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d001      	beq.n	800c0ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e099      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f7ff fca8 	bl	800ba26 <SDMMC_GetResponse>
 800c0d6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	4b50      	ldr	r3, [pc, #320]	; (800c21c <SDMMC_GetCmdResp1+0x1e0>)
 800c0dc:	4013      	ands	r3, r2
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d101      	bne.n	800c0e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e08d      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	da02      	bge.n	800c0f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c0ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0f0:	e087      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d001      	beq.n	800c100 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c0fc:	2340      	movs	r3, #64	; 0x40
 800c0fe:	e080      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c10a:	2380      	movs	r3, #128	; 0x80
 800c10c:	e079      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c11c:	e071      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c12c:	e069      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c13c:	e061      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c14c:	e059      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c15c:	e051      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c16c:	e049      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c17c:	e041      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c18c:	e039      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c19c:	e031      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c1a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1ac:	e029      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c1b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c1bc:	e021      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c1c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c1cc:	e019      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c1d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c1dc:	e011      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c1e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1ec:	e009      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f003 0308 	and.w	r3, r3, #8
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c1f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c1fc:	e001      	b.n	800c202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c1fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c202:	4618      	mov	r0, r3
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	24000000 	.word	0x24000000
 800c210:	10624dd3 	.word	0x10624dd3
 800c214:	00200045 	.word	0x00200045
 800c218:	002000c5 	.word	0x002000c5
 800c21c:	fdffe008 	.word	0xfdffe008

0800c220 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c228:	4b1f      	ldr	r3, [pc, #124]	; (800c2a8 <SDMMC_GetCmdResp2+0x88>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a1f      	ldr	r2, [pc, #124]	; (800c2ac <SDMMC_GetCmdResp2+0x8c>)
 800c22e:	fba2 2303 	umull	r2, r3, r2, r3
 800c232:	0a5b      	lsrs	r3, r3, #9
 800c234:	f241 3288 	movw	r2, #5000	; 0x1388
 800c238:	fb02 f303 	mul.w	r3, r2, r3
 800c23c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	1e5a      	subs	r2, r3, #1
 800c242:	60fa      	str	r2, [r7, #12]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d102      	bne.n	800c24e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c24c:	e026      	b.n	800c29c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c252:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d0ef      	beq.n	800c23e <SDMMC_GetCmdResp2+0x1e>
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1ea      	bne.n	800c23e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26c:	f003 0304 	and.w	r3, r3, #4
 800c270:	2b00      	cmp	r3, #0
 800c272:	d004      	beq.n	800c27e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2204      	movs	r2, #4
 800c278:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c27a:	2304      	movs	r3, #4
 800c27c:	e00e      	b.n	800c29c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d004      	beq.n	800c294 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c290:	2301      	movs	r3, #1
 800c292:	e003      	b.n	800c29c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a06      	ldr	r2, [pc, #24]	; (800c2b0 <SDMMC_GetCmdResp2+0x90>)
 800c298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3714      	adds	r7, #20
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr
 800c2a8:	24000000 	.word	0x24000000
 800c2ac:	10624dd3 	.word	0x10624dd3
 800c2b0:	002000c5 	.word	0x002000c5

0800c2b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2bc:	4b1a      	ldr	r3, [pc, #104]	; (800c328 <SDMMC_GetCmdResp3+0x74>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a1a      	ldr	r2, [pc, #104]	; (800c32c <SDMMC_GetCmdResp3+0x78>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	0a5b      	lsrs	r3, r3, #9
 800c2c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2cc:	fb02 f303 	mul.w	r3, r2, r3
 800c2d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	1e5a      	subs	r2, r3, #1
 800c2d6:	60fa      	str	r2, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2e0:	e01b      	b.n	800c31a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0ef      	beq.n	800c2d2 <SDMMC_GetCmdResp3+0x1e>
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1ea      	bne.n	800c2d2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c300:	f003 0304 	and.w	r3, r3, #4
 800c304:	2b00      	cmp	r3, #0
 800c306:	d004      	beq.n	800c312 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2204      	movs	r2, #4
 800c30c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c30e:	2304      	movs	r3, #4
 800c310:	e003      	b.n	800c31a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a06      	ldr	r2, [pc, #24]	; (800c330 <SDMMC_GetCmdResp3+0x7c>)
 800c316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3714      	adds	r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	24000000 	.word	0x24000000
 800c32c:	10624dd3 	.word	0x10624dd3
 800c330:	002000c5 	.word	0x002000c5

0800c334 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b088      	sub	sp, #32
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	460b      	mov	r3, r1
 800c33e:	607a      	str	r2, [r7, #4]
 800c340:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c342:	4b35      	ldr	r3, [pc, #212]	; (800c418 <SDMMC_GetCmdResp6+0xe4>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a35      	ldr	r2, [pc, #212]	; (800c41c <SDMMC_GetCmdResp6+0xe8>)
 800c348:	fba2 2303 	umull	r2, r3, r2, r3
 800c34c:	0a5b      	lsrs	r3, r3, #9
 800c34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c352:	fb02 f303 	mul.w	r3, r2, r3
 800c356:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	1e5a      	subs	r2, r3, #1
 800c35c:	61fa      	str	r2, [r7, #28]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d102      	bne.n	800c368 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c366:	e052      	b.n	800c40e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c36c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c374:	2b00      	cmp	r3, #0
 800c376:	d0ef      	beq.n	800c358 <SDMMC_GetCmdResp6+0x24>
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1ea      	bne.n	800c358 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c386:	f003 0304 	and.w	r3, r3, #4
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d004      	beq.n	800c398 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2204      	movs	r2, #4
 800c392:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c394:	2304      	movs	r3, #4
 800c396:	e03a      	b.n	800c40e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c39c:	f003 0301 	and.w	r3, r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d004      	beq.n	800c3ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e02f      	b.n	800c40e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f7ff fb2c 	bl	800ba0c <SDMMC_GetCommandResponse>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d001      	beq.n	800c3c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e025      	b.n	800c40e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	4a16      	ldr	r2, [pc, #88]	; (800c420 <SDMMC_GetCmdResp6+0xec>)
 800c3c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f7ff fb2b 	bl	800ba26 <SDMMC_GetResponse>
 800c3d0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d106      	bne.n	800c3ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	0c1b      	lsrs	r3, r3, #16
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e011      	b.n	800c40e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c3f8:	e009      	b.n	800c40e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c408:	e001      	b.n	800c40e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c40a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3720      	adds	r7, #32
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	24000000 	.word	0x24000000
 800c41c:	10624dd3 	.word	0x10624dd3
 800c420:	002000c5 	.word	0x002000c5

0800c424 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c42c:	4b22      	ldr	r3, [pc, #136]	; (800c4b8 <SDMMC_GetCmdResp7+0x94>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a22      	ldr	r2, [pc, #136]	; (800c4bc <SDMMC_GetCmdResp7+0x98>)
 800c432:	fba2 2303 	umull	r2, r3, r2, r3
 800c436:	0a5b      	lsrs	r3, r3, #9
 800c438:	f241 3288 	movw	r2, #5000	; 0x1388
 800c43c:	fb02 f303 	mul.w	r3, r2, r3
 800c440:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	1e5a      	subs	r2, r3, #1
 800c446:	60fa      	str	r2, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c44c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c450:	e02c      	b.n	800c4ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c456:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0ef      	beq.n	800c442 <SDMMC_GetCmdResp7+0x1e>
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1ea      	bne.n	800c442 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c470:	f003 0304 	and.w	r3, r3, #4
 800c474:	2b00      	cmp	r3, #0
 800c476:	d004      	beq.n	800c482 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2204      	movs	r2, #4
 800c47c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c47e:	2304      	movs	r3, #4
 800c480:	e014      	b.n	800c4ac <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c486:	f003 0301 	and.w	r3, r3, #1
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d004      	beq.n	800c498 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2201      	movs	r2, #1
 800c492:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c494:	2301      	movs	r3, #1
 800c496:	e009      	b.n	800c4ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2240      	movs	r2, #64	; 0x40
 800c4a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4aa:	2300      	movs	r3, #0

}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	24000000 	.word	0x24000000
 800c4bc:	10624dd3 	.word	0x10624dd3

0800c4c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b084      	sub	sp, #16
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	f107 001c 	add.w	r0, r7, #28
 800c4ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d120      	bne.n	800c51a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	68da      	ldr	r2, [r3, #12]
 800c4e8:	4b25      	ldr	r3, [pc, #148]	; (800c580 <USB_CoreInit+0xc0>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d105      	bne.n	800c50e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f001 fabe 	bl	800da90 <USB_CoreReset>
 800c514:	4603      	mov	r3, r0
 800c516:	73fb      	strb	r3, [r7, #15]
 800c518:	e01a      	b.n	800c550 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f001 fab2 	bl	800da90 <USB_CoreReset>
 800c52c:	4603      	mov	r3, r0
 800c52e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c532:	2b00      	cmp	r3, #0
 800c534:	d106      	bne.n	800c544 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	639a      	str	r2, [r3, #56]	; 0x38
 800c542:	e005      	b.n	800c550 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	2b01      	cmp	r3, #1
 800c554:	d10b      	bne.n	800c56e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	f043 0206 	orr.w	r2, r3, #6
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f043 0220 	orr.w	r2, r3, #32
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c57a:	b004      	add	sp, #16
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	ffbdffbf 	.word	0xffbdffbf

0800c584 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c584:	b480      	push	{r7}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	4613      	mov	r3, r2
 800c590:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d165      	bne.n	800c664 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	4a41      	ldr	r2, [pc, #260]	; (800c6a0 <USB_SetTurnaroundTime+0x11c>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d906      	bls.n	800c5ae <USB_SetTurnaroundTime+0x2a>
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	4a40      	ldr	r2, [pc, #256]	; (800c6a4 <USB_SetTurnaroundTime+0x120>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d802      	bhi.n	800c5ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c5a8:	230f      	movs	r3, #15
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	e062      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	4a3c      	ldr	r2, [pc, #240]	; (800c6a4 <USB_SetTurnaroundTime+0x120>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d906      	bls.n	800c5c4 <USB_SetTurnaroundTime+0x40>
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	4a3b      	ldr	r2, [pc, #236]	; (800c6a8 <USB_SetTurnaroundTime+0x124>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d802      	bhi.n	800c5c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c5be:	230e      	movs	r3, #14
 800c5c0:	617b      	str	r3, [r7, #20]
 800c5c2:	e057      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	4a38      	ldr	r2, [pc, #224]	; (800c6a8 <USB_SetTurnaroundTime+0x124>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d906      	bls.n	800c5da <USB_SetTurnaroundTime+0x56>
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	4a37      	ldr	r2, [pc, #220]	; (800c6ac <USB_SetTurnaroundTime+0x128>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d802      	bhi.n	800c5da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c5d4:	230d      	movs	r3, #13
 800c5d6:	617b      	str	r3, [r7, #20]
 800c5d8:	e04c      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	4a33      	ldr	r2, [pc, #204]	; (800c6ac <USB_SetTurnaroundTime+0x128>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d906      	bls.n	800c5f0 <USB_SetTurnaroundTime+0x6c>
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	4a32      	ldr	r2, [pc, #200]	; (800c6b0 <USB_SetTurnaroundTime+0x12c>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d802      	bhi.n	800c5f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c5ea:	230c      	movs	r3, #12
 800c5ec:	617b      	str	r3, [r7, #20]
 800c5ee:	e041      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	4a2f      	ldr	r2, [pc, #188]	; (800c6b0 <USB_SetTurnaroundTime+0x12c>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d906      	bls.n	800c606 <USB_SetTurnaroundTime+0x82>
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	4a2e      	ldr	r2, [pc, #184]	; (800c6b4 <USB_SetTurnaroundTime+0x130>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d802      	bhi.n	800c606 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c600:	230b      	movs	r3, #11
 800c602:	617b      	str	r3, [r7, #20]
 800c604:	e036      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	4a2a      	ldr	r2, [pc, #168]	; (800c6b4 <USB_SetTurnaroundTime+0x130>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d906      	bls.n	800c61c <USB_SetTurnaroundTime+0x98>
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	4a29      	ldr	r2, [pc, #164]	; (800c6b8 <USB_SetTurnaroundTime+0x134>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d802      	bhi.n	800c61c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c616:	230a      	movs	r3, #10
 800c618:	617b      	str	r3, [r7, #20]
 800c61a:	e02b      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	4a26      	ldr	r2, [pc, #152]	; (800c6b8 <USB_SetTurnaroundTime+0x134>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d906      	bls.n	800c632 <USB_SetTurnaroundTime+0xae>
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	4a25      	ldr	r2, [pc, #148]	; (800c6bc <USB_SetTurnaroundTime+0x138>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d802      	bhi.n	800c632 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c62c:	2309      	movs	r3, #9
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	e020      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	4a21      	ldr	r2, [pc, #132]	; (800c6bc <USB_SetTurnaroundTime+0x138>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d906      	bls.n	800c648 <USB_SetTurnaroundTime+0xc4>
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	4a20      	ldr	r2, [pc, #128]	; (800c6c0 <USB_SetTurnaroundTime+0x13c>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d802      	bhi.n	800c648 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c642:	2308      	movs	r3, #8
 800c644:	617b      	str	r3, [r7, #20]
 800c646:	e015      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	4a1d      	ldr	r2, [pc, #116]	; (800c6c0 <USB_SetTurnaroundTime+0x13c>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d906      	bls.n	800c65e <USB_SetTurnaroundTime+0xda>
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	4a1c      	ldr	r2, [pc, #112]	; (800c6c4 <USB_SetTurnaroundTime+0x140>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d802      	bhi.n	800c65e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c658:	2307      	movs	r3, #7
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	e00a      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c65e:	2306      	movs	r3, #6
 800c660:	617b      	str	r3, [r7, #20]
 800c662:	e007      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c66a:	2309      	movs	r3, #9
 800c66c:	617b      	str	r3, [r7, #20]
 800c66e:	e001      	b.n	800c674 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c670:	2309      	movs	r3, #9
 800c672:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	68da      	ldr	r2, [r3, #12]
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	029b      	lsls	r3, r3, #10
 800c688:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c68c:	431a      	orrs	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	371c      	adds	r7, #28
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	00d8acbf 	.word	0x00d8acbf
 800c6a4:	00e4e1bf 	.word	0x00e4e1bf
 800c6a8:	00f423ff 	.word	0x00f423ff
 800c6ac:	0106737f 	.word	0x0106737f
 800c6b0:	011a499f 	.word	0x011a499f
 800c6b4:	01312cff 	.word	0x01312cff
 800c6b8:	014ca43f 	.word	0x014ca43f
 800c6bc:	016e35ff 	.word	0x016e35ff
 800c6c0:	01a6ab1f 	.word	0x01a6ab1f
 800c6c4:	01e847ff 	.word	0x01e847ff

0800c6c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	f043 0201 	orr.w	r2, r3, #1
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	f023 0201 	bic.w	r2, r3, #1
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	460b      	mov	r3, r1
 800c716:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c724:	78fb      	ldrb	r3, [r7, #3]
 800c726:	2b01      	cmp	r3, #1
 800c728:	d106      	bne.n	800c738 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	60da      	str	r2, [r3, #12]
 800c736:	e00b      	b.n	800c750 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c738:	78fb      	ldrb	r3, [r7, #3]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	60da      	str	r2, [r3, #12]
 800c74a:	e001      	b.n	800c750 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c74c:	2301      	movs	r3, #1
 800c74e:	e003      	b.n	800c758 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c750:	2032      	movs	r0, #50	; 0x32
 800c752:	f7f5 f985 	bl	8001a60 <HAL_Delay>

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c760:	b084      	sub	sp, #16
 800c762:	b580      	push	{r7, lr}
 800c764:	b086      	sub	sp, #24
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c76e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c77a:	2300      	movs	r3, #0
 800c77c:	613b      	str	r3, [r7, #16]
 800c77e:	e009      	b.n	800c794 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	3340      	adds	r3, #64	; 0x40
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	2200      	movs	r2, #0
 800c78c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	3301      	adds	r3, #1
 800c792:	613b      	str	r3, [r7, #16]
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	2b0e      	cmp	r3, #14
 800c798:	d9f2      	bls.n	800c780 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d11c      	bne.n	800c7da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7ae:	f043 0302 	orr.w	r3, r3, #2
 800c7b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	e005      	b.n	800c7e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c800:	461a      	mov	r2, r3
 800c802:	680b      	ldr	r3, [r1, #0]
 800c804:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d10c      	bne.n	800c826 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d104      	bne.n	800c81c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c812:	2100      	movs	r1, #0
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f949 	bl	800caac <USB_SetDevSpeed>
 800c81a:	e008      	b.n	800c82e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c81c:	2101      	movs	r1, #1
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f944 	bl	800caac <USB_SetDevSpeed>
 800c824:	e003      	b.n	800c82e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c826:	2103      	movs	r1, #3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f93f 	bl	800caac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c82e:	2110      	movs	r1, #16
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 f8f3 	bl	800ca1c <USB_FlushTxFifo>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 f911 	bl	800ca68 <USB_FlushRxFifo>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d001      	beq.n	800c850 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c856:	461a      	mov	r2, r3
 800c858:	2300      	movs	r3, #0
 800c85a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c862:	461a      	mov	r2, r3
 800c864:	2300      	movs	r3, #0
 800c866:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86e:	461a      	mov	r2, r3
 800c870:	2300      	movs	r3, #0
 800c872:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c874:	2300      	movs	r3, #0
 800c876:	613b      	str	r3, [r7, #16]
 800c878:	e043      	b.n	800c902 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	015a      	lsls	r2, r3, #5
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	4413      	add	r3, r2
 800c882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c88c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c890:	d118      	bne.n	800c8c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	015a      	lsls	r2, r3, #5
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	e013      	b.n	800c8d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	e008      	b.n	800c8d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	015a      	lsls	r2, r3, #5
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	3301      	adds	r3, #1
 800c900:	613b      	str	r3, [r7, #16]
 800c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	429a      	cmp	r2, r3
 800c908:	d3b7      	bcc.n	800c87a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c90a:	2300      	movs	r3, #0
 800c90c:	613b      	str	r3, [r7, #16]
 800c90e:	e043      	b.n	800c998 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	015a      	lsls	r2, r3, #5
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	4413      	add	r3, r2
 800c918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c926:	d118      	bne.n	800c95a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	4413      	add	r3, r2
 800c936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c93a:	461a      	mov	r2, r3
 800c93c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c940:	6013      	str	r3, [r2, #0]
 800c942:	e013      	b.n	800c96c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	015a      	lsls	r2, r3, #5
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	4413      	add	r3, r2
 800c94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c950:	461a      	mov	r2, r3
 800c952:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	e008      	b.n	800c96c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	015a      	lsls	r2, r3, #5
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	4413      	add	r3, r2
 800c962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c966:	461a      	mov	r2, r3
 800c968:	2300      	movs	r3, #0
 800c96a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	015a      	lsls	r2, r3, #5
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	4413      	add	r3, r2
 800c974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c978:	461a      	mov	r2, r3
 800c97a:	2300      	movs	r3, #0
 800c97c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	015a      	lsls	r2, r3, #5
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	4413      	add	r3, r2
 800c986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c98a:	461a      	mov	r2, r3
 800c98c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c990:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	3301      	adds	r3, #1
 800c996:	613b      	str	r3, [r7, #16]
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d3b7      	bcc.n	800c910 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c9c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d105      	bne.n	800c9d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	699b      	ldr	r3, [r3, #24]
 800c9cc:	f043 0210 	orr.w	r2, r3, #16
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	699a      	ldr	r2, [r3, #24]
 800c9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ca14 <USB_DevInit+0x2b4>)
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d005      	beq.n	800c9f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	f043 0208 	orr.w	r2, r3, #8
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d105      	bne.n	800ca04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	699a      	ldr	r2, [r3, #24]
 800c9fc:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <USB_DevInit+0x2b8>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3718      	adds	r7, #24
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca10:	b004      	add	sp, #16
 800ca12:	4770      	bx	lr
 800ca14:	803c3800 	.word	0x803c3800
 800ca18:	40000004 	.word	0x40000004

0800ca1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ca26:	2300      	movs	r3, #0
 800ca28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	019b      	lsls	r3, r3, #6
 800ca2e:	f043 0220 	orr.w	r2, r3, #32
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4a09      	ldr	r2, [pc, #36]	; (800ca64 <USB_FlushTxFifo+0x48>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d901      	bls.n	800ca48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ca44:	2303      	movs	r3, #3
 800ca46:	e006      	b.n	800ca56 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	f003 0320 	and.w	r3, r3, #32
 800ca50:	2b20      	cmp	r3, #32
 800ca52:	d0f0      	beq.n	800ca36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	00030d40 	.word	0x00030d40

0800ca68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2210      	movs	r2, #16
 800ca78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4a09      	ldr	r2, [pc, #36]	; (800caa8 <USB_FlushRxFifo+0x40>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d901      	bls.n	800ca8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e006      	b.n	800ca9a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	f003 0310 	and.w	r3, r3, #16
 800ca94:	2b10      	cmp	r3, #16
 800ca96:	d0f0      	beq.n	800ca7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	00030d40 	.word	0x00030d40

0800caac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	460b      	mov	r3, r1
 800cab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	78fb      	ldrb	r3, [r7, #3]
 800cac6:	68f9      	ldr	r1, [r7, #12]
 800cac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cacc:	4313      	orrs	r3, r2
 800cace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cade:	b480      	push	{r7}
 800cae0:	b087      	sub	sp, #28
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	f003 0306 	and.w	r3, r3, #6
 800caf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d102      	bne.n	800cb04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cafe:	2300      	movs	r3, #0
 800cb00:	75fb      	strb	r3, [r7, #23]
 800cb02:	e00a      	b.n	800cb1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d002      	beq.n	800cb10 <USB_GetDevSpeed+0x32>
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2b06      	cmp	r3, #6
 800cb0e:	d102      	bne.n	800cb16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cb10:	2302      	movs	r3, #2
 800cb12:	75fb      	strb	r3, [r7, #23]
 800cb14:	e001      	b.n	800cb1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cb16:	230f      	movs	r3, #15
 800cb18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	371c      	adds	r7, #28
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	785b      	ldrb	r3, [r3, #1]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d139      	bne.n	800cbb8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb4a:	69da      	ldr	r2, [r3, #28]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	f003 030f 	and.w	r3, r3, #15
 800cb54:	2101      	movs	r1, #1
 800cb56:	fa01 f303 	lsl.w	r3, r1, r3
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb62:	4313      	orrs	r3, r2
 800cb64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d153      	bne.n	800cc24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	015a      	lsls	r2, r3, #5
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4413      	add	r3, r2
 800cb84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	78db      	ldrb	r3, [r3, #3]
 800cb96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	059b      	lsls	r3, r3, #22
 800cb9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cba0:	431a      	orrs	r2, r3
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	0159      	lsls	r1, r3, #5
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	440b      	add	r3, r1
 800cbaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbae:	4619      	mov	r1, r3
 800cbb0:	4b20      	ldr	r3, [pc, #128]	; (800cc34 <USB_ActivateEndpoint+0x10c>)
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	600b      	str	r3, [r1, #0]
 800cbb6:	e035      	b.n	800cc24 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbbe:	69da      	ldr	r2, [r3, #28]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	f003 030f 	and.w	r3, r3, #15
 800cbc8:	2101      	movs	r1, #1
 800cbca:	fa01 f303 	lsl.w	r3, r1, r3
 800cbce:	041b      	lsls	r3, r3, #16
 800cbd0:	68f9      	ldr	r1, [r7, #12]
 800cbd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d119      	bne.n	800cc24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	78db      	ldrb	r3, [r3, #3]
 800cc0a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cc0c:	430b      	orrs	r3, r1
 800cc0e:	431a      	orrs	r2, r3
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	0159      	lsls	r1, r3, #5
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	440b      	add	r3, r1
 800cc18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	4b05      	ldr	r3, [pc, #20]	; (800cc34 <USB_ActivateEndpoint+0x10c>)
 800cc20:	4313      	orrs	r3, r2
 800cc22:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3714      	adds	r7, #20
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	10008000 	.word	0x10008000

0800cc38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	785b      	ldrb	r3, [r3, #1]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d161      	bne.n	800cd18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	015a      	lsls	r2, r3, #5
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc6a:	d11f      	bne.n	800ccac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	015a      	lsls	r2, r3, #5
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	4413      	add	r3, r2
 800cc74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	0151      	lsls	r1, r2, #5
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	440a      	add	r2, r1
 800cc82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	015a      	lsls	r2, r3, #5
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4413      	add	r3, r2
 800cc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	0151      	lsls	r1, r2, #5
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	440a      	add	r2, r1
 800cca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	f003 030f 	and.w	r3, r3, #15
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	fa01 f303 	lsl.w	r3, r1, r3
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	43db      	mvns	r3, r3
 800ccc6:	68f9      	ldr	r1, [r7, #12]
 800ccc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cccc:	4013      	ands	r3, r2
 800ccce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd6:	69da      	ldr	r2, [r3, #28]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	f003 030f 	and.w	r3, r3, #15
 800cce0:	2101      	movs	r1, #1
 800cce2:	fa01 f303 	lsl.w	r3, r1, r3
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	43db      	mvns	r3, r3
 800ccea:	68f9      	ldr	r1, [r7, #12]
 800ccec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	015a      	lsls	r2, r3, #5
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	0159      	lsls	r1, r3, #5
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	440b      	add	r3, r1
 800cd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0e:	4619      	mov	r1, r3
 800cd10:	4b35      	ldr	r3, [pc, #212]	; (800cde8 <USB_DeactivateEndpoint+0x1b0>)
 800cd12:	4013      	ands	r3, r2
 800cd14:	600b      	str	r3, [r1, #0]
 800cd16:	e060      	b.n	800cdda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	015a      	lsls	r2, r3, #5
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	4413      	add	r3, r2
 800cd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd2e:	d11f      	bne.n	800cd70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	015a      	lsls	r2, r3, #5
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	4413      	add	r3, r2
 800cd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	0151      	lsls	r1, r2, #5
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	440a      	add	r2, r1
 800cd46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	015a      	lsls	r2, r3, #5
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	4413      	add	r3, r2
 800cd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	0151      	lsls	r1, r2, #5
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	440a      	add	r2, r1
 800cd66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	f003 030f 	and.w	r3, r3, #15
 800cd80:	2101      	movs	r1, #1
 800cd82:	fa01 f303 	lsl.w	r3, r1, r3
 800cd86:	041b      	lsls	r3, r3, #16
 800cd88:	43db      	mvns	r3, r3
 800cd8a:	68f9      	ldr	r1, [r7, #12]
 800cd8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd90:	4013      	ands	r3, r2
 800cd92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9a:	69da      	ldr	r2, [r3, #28]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	f003 030f 	and.w	r3, r3, #15
 800cda4:	2101      	movs	r1, #1
 800cda6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdaa:	041b      	lsls	r3, r3, #16
 800cdac:	43db      	mvns	r3, r3
 800cdae:	68f9      	ldr	r1, [r7, #12]
 800cdb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdb4:	4013      	ands	r3, r2
 800cdb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	015a      	lsls	r2, r3, #5
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc4:	681a      	ldr	r2, [r3, #0]
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	0159      	lsls	r1, r3, #5
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	440b      	add	r3, r1
 800cdce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	4b05      	ldr	r3, [pc, #20]	; (800cdec <USB_DeactivateEndpoint+0x1b4>)
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr
 800cde8:	ec337800 	.word	0xec337800
 800cdec:	eff37800 	.word	0xeff37800

0800cdf0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b08a      	sub	sp, #40	; 0x28
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	785b      	ldrb	r3, [r3, #1]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	f040 8163 	bne.w	800d0d8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d132      	bne.n	800ce80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	015a      	lsls	r2, r3, #5
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	4413      	add	r3, r2
 800ce22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce26:	691a      	ldr	r2, [r3, #16]
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	0159      	lsls	r1, r3, #5
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	440b      	add	r3, r1
 800ce30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce34:	4619      	mov	r1, r3
 800ce36:	4ba5      	ldr	r3, [pc, #660]	; (800d0cc <USB_EPStartXfer+0x2dc>)
 800ce38:	4013      	ands	r3, r2
 800ce3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	015a      	lsls	r2, r3, #5
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	4413      	add	r3, r2
 800ce44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	69ba      	ldr	r2, [r7, #24]
 800ce4c:	0151      	lsls	r1, r2, #5
 800ce4e:	69fa      	ldr	r2, [r7, #28]
 800ce50:	440a      	add	r2, r1
 800ce52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce68:	691a      	ldr	r2, [r3, #16]
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	0159      	lsls	r1, r3, #5
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	440b      	add	r3, r1
 800ce72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce76:	4619      	mov	r1, r3
 800ce78:	4b95      	ldr	r3, [pc, #596]	; (800d0d0 <USB_EPStartXfer+0x2e0>)
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	610b      	str	r3, [r1, #16]
 800ce7e:	e074      	b.n	800cf6a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce8c:	691a      	ldr	r2, [r3, #16]
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	0159      	lsls	r1, r3, #5
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	440b      	add	r3, r1
 800ce96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4b8c      	ldr	r3, [pc, #560]	; (800d0d0 <USB_EPStartXfer+0x2e0>)
 800ce9e:	4013      	ands	r3, r2
 800cea0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	015a      	lsls	r2, r3, #5
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	4413      	add	r3, r2
 800ceaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceae:	691a      	ldr	r2, [r3, #16]
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	0159      	lsls	r1, r3, #5
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	440b      	add	r3, r1
 800ceb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cebc:	4619      	mov	r1, r3
 800cebe:	4b83      	ldr	r3, [pc, #524]	; (800d0cc <USB_EPStartXfer+0x2dc>)
 800cec0:	4013      	ands	r3, r2
 800cec2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced0:	691a      	ldr	r2, [r3, #16]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	6959      	ldr	r1, [r3, #20]
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	440b      	add	r3, r1
 800cedc:	1e59      	subs	r1, r3, #1
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	fbb1 f3f3 	udiv	r3, r1, r3
 800cee6:	04d9      	lsls	r1, r3, #19
 800cee8:	4b7a      	ldr	r3, [pc, #488]	; (800d0d4 <USB_EPStartXfer+0x2e4>)
 800ceea:	400b      	ands	r3, r1
 800ceec:	69b9      	ldr	r1, [r7, #24]
 800ceee:	0148      	lsls	r0, r1, #5
 800cef0:	69f9      	ldr	r1, [r7, #28]
 800cef2:	4401      	add	r1, r0
 800cef4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cef8:	4313      	orrs	r3, r2
 800cefa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	015a      	lsls	r2, r3, #5
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	4413      	add	r3, r2
 800cf04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf08:	691a      	ldr	r2, [r3, #16]
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	695b      	ldr	r3, [r3, #20]
 800cf0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf12:	69b9      	ldr	r1, [r7, #24]
 800cf14:	0148      	lsls	r0, r1, #5
 800cf16:	69f9      	ldr	r1, [r7, #28]
 800cf18:	4401      	add	r1, r0
 800cf1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	78db      	ldrb	r3, [r3, #3]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d11f      	bne.n	800cf6a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	015a      	lsls	r2, r3, #5
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	4413      	add	r3, r2
 800cf32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	69ba      	ldr	r2, [r7, #24]
 800cf3a:	0151      	lsls	r1, r2, #5
 800cf3c:	69fa      	ldr	r2, [r7, #28]
 800cf3e:	440a      	add	r2, r1
 800cf40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cf48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	015a      	lsls	r2, r3, #5
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	4413      	add	r3, r2
 800cf52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	69ba      	ldr	r2, [r7, #24]
 800cf5a:	0151      	lsls	r1, r2, #5
 800cf5c:	69fa      	ldr	r2, [r7, #28]
 800cf5e:	440a      	add	r2, r1
 800cf60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf68:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf6a:	79fb      	ldrb	r3, [r7, #7]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d14b      	bne.n	800d008 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	691b      	ldr	r3, [r3, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d009      	beq.n	800cf8c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf84:	461a      	mov	r2, r3
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	691b      	ldr	r3, [r3, #16]
 800cf8a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	78db      	ldrb	r3, [r3, #3]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d128      	bne.n	800cfe6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d110      	bne.n	800cfc6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	015a      	lsls	r2, r3, #5
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	69ba      	ldr	r2, [r7, #24]
 800cfb4:	0151      	lsls	r1, r2, #5
 800cfb6:	69fa      	ldr	r2, [r7, #28]
 800cfb8:	440a      	add	r2, r1
 800cfba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	e00f      	b.n	800cfe6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	0151      	lsls	r1, r2, #5
 800cfd8:	69fa      	ldr	r2, [r7, #28]
 800cfda:	440a      	add	r2, r1
 800cfdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfe4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	69ba      	ldr	r2, [r7, #24]
 800cff6:	0151      	lsls	r1, r2, #5
 800cff8:	69fa      	ldr	r2, [r7, #28]
 800cffa:	440a      	add	r2, r1
 800cffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	e133      	b.n	800d270 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	015a      	lsls	r2, r3, #5
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	69ba      	ldr	r2, [r7, #24]
 800d018:	0151      	lsls	r1, r2, #5
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	440a      	add	r2, r1
 800d01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d022:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d026:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	78db      	ldrb	r3, [r3, #3]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d015      	beq.n	800d05c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 811b 	beq.w	800d270 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	f003 030f 	and.w	r3, r3, #15
 800d04a:	2101      	movs	r1, #1
 800d04c:	fa01 f303 	lsl.w	r3, r1, r3
 800d050:	69f9      	ldr	r1, [r7, #28]
 800d052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d056:	4313      	orrs	r3, r2
 800d058:	634b      	str	r3, [r1, #52]	; 0x34
 800d05a:	e109      	b.n	800d270 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d110      	bne.n	800d08e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	015a      	lsls	r2, r3, #5
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	4413      	add	r3, r2
 800d074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	69ba      	ldr	r2, [r7, #24]
 800d07c:	0151      	lsls	r1, r2, #5
 800d07e:	69fa      	ldr	r2, [r7, #28]
 800d080:	440a      	add	r2, r1
 800d082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d086:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d08a:	6013      	str	r3, [r2, #0]
 800d08c:	e00f      	b.n	800d0ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	015a      	lsls	r2, r3, #5
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	4413      	add	r3, r2
 800d096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	69ba      	ldr	r2, [r7, #24]
 800d09e:	0151      	lsls	r1, r2, #5
 800d0a0:	69fa      	ldr	r2, [r7, #28]
 800d0a2:	440a      	add	r2, r1
 800d0a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	68d9      	ldr	r1, [r3, #12]
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	781a      	ldrb	r2, [r3, #0]
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	695b      	ldr	r3, [r3, #20]
 800d0ba:	b298      	uxth	r0, r3
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f000 fa38 	bl	800d538 <USB_WritePacket>
 800d0c8:	e0d2      	b.n	800d270 <USB_EPStartXfer+0x480>
 800d0ca:	bf00      	nop
 800d0cc:	e007ffff 	.word	0xe007ffff
 800d0d0:	fff80000 	.word	0xfff80000
 800d0d4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	015a      	lsls	r2, r3, #5
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e4:	691a      	ldr	r2, [r3, #16]
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	0159      	lsls	r1, r3, #5
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	440b      	add	r3, r1
 800d0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4b61      	ldr	r3, [pc, #388]	; (800d27c <USB_EPStartXfer+0x48c>)
 800d0f6:	4013      	ands	r3, r2
 800d0f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	015a      	lsls	r2, r3, #5
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	4413      	add	r3, r2
 800d102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d106:	691a      	ldr	r2, [r3, #16]
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	0159      	lsls	r1, r3, #5
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	440b      	add	r3, r1
 800d110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d114:	4619      	mov	r1, r3
 800d116:	4b5a      	ldr	r3, [pc, #360]	; (800d280 <USB_EPStartXfer+0x490>)
 800d118:	4013      	ands	r3, r2
 800d11a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d123      	bne.n	800d16c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	015a      	lsls	r2, r3, #5
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	4413      	add	r3, r2
 800d12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d130:	691a      	ldr	r2, [r3, #16]
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d13a:	69b9      	ldr	r1, [r7, #24]
 800d13c:	0148      	lsls	r0, r1, #5
 800d13e:	69f9      	ldr	r1, [r7, #28]
 800d140:	4401      	add	r1, r0
 800d142:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d146:	4313      	orrs	r3, r2
 800d148:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d14a:	69bb      	ldr	r3, [r7, #24]
 800d14c:	015a      	lsls	r2, r3, #5
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	4413      	add	r3, r2
 800d152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	69ba      	ldr	r2, [r7, #24]
 800d15a:	0151      	lsls	r1, r2, #5
 800d15c:	69fa      	ldr	r2, [r7, #28]
 800d15e:	440a      	add	r2, r1
 800d160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d168:	6113      	str	r3, [r2, #16]
 800d16a:	e033      	b.n	800d1d4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	695a      	ldr	r2, [r3, #20]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	4413      	add	r3, r2
 800d176:	1e5a      	subs	r2, r3, #1
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d180:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	015a      	lsls	r2, r3, #5
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	4413      	add	r3, r2
 800d18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d18e:	691a      	ldr	r2, [r3, #16]
 800d190:	8afb      	ldrh	r3, [r7, #22]
 800d192:	04d9      	lsls	r1, r3, #19
 800d194:	4b3b      	ldr	r3, [pc, #236]	; (800d284 <USB_EPStartXfer+0x494>)
 800d196:	400b      	ands	r3, r1
 800d198:	69b9      	ldr	r1, [r7, #24]
 800d19a:	0148      	lsls	r0, r1, #5
 800d19c:	69f9      	ldr	r1, [r7, #28]
 800d19e:	4401      	add	r1, r0
 800d1a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	015a      	lsls	r2, r3, #5
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1b4:	691a      	ldr	r2, [r3, #16]
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	8af9      	ldrh	r1, [r7, #22]
 800d1bc:	fb01 f303 	mul.w	r3, r1, r3
 800d1c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1c4:	69b9      	ldr	r1, [r7, #24]
 800d1c6:	0148      	lsls	r0, r1, #5
 800d1c8:	69f9      	ldr	r1, [r7, #28]
 800d1ca:	4401      	add	r1, r0
 800d1cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d1d4:	79fb      	ldrb	r3, [r7, #7]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d10d      	bne.n	800d1f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d009      	beq.n	800d1f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	68d9      	ldr	r1, [r3, #12]
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	015a      	lsls	r2, r3, #5
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f2:	460a      	mov	r2, r1
 800d1f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	78db      	ldrb	r3, [r3, #3]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d128      	bne.n	800d250 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d110      	bne.n	800d230 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	015a      	lsls	r2, r3, #5
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	4413      	add	r3, r2
 800d216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	69ba      	ldr	r2, [r7, #24]
 800d21e:	0151      	lsls	r1, r2, #5
 800d220:	69fa      	ldr	r2, [r7, #28]
 800d222:	440a      	add	r2, r1
 800d224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	e00f      	b.n	800d250 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	015a      	lsls	r2, r3, #5
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	4413      	add	r3, r2
 800d238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	69ba      	ldr	r2, [r7, #24]
 800d240:	0151      	lsls	r1, r2, #5
 800d242:	69fa      	ldr	r2, [r7, #28]
 800d244:	440a      	add	r2, r1
 800d246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d24a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d24e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	015a      	lsls	r2, r3, #5
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	4413      	add	r3, r2
 800d258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	69ba      	ldr	r2, [r7, #24]
 800d260:	0151      	lsls	r1, r2, #5
 800d262:	69fa      	ldr	r2, [r7, #28]
 800d264:	440a      	add	r2, r1
 800d266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d26a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d26e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3720      	adds	r7, #32
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	fff80000 	.word	0xfff80000
 800d280:	e007ffff 	.word	0xe007ffff
 800d284:	1ff80000 	.word	0x1ff80000

0800d288 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d288:	b480      	push	{r7}
 800d28a:	b087      	sub	sp, #28
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	4613      	mov	r3, r2
 800d294:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	785b      	ldrb	r3, [r3, #1]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	f040 80cd 	bne.w	800d444 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d132      	bne.n	800d318 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	015a      	lsls	r2, r3, #5
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2be:	691a      	ldr	r2, [r3, #16]
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	0159      	lsls	r1, r3, #5
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	440b      	add	r3, r1
 800d2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	4b98      	ldr	r3, [pc, #608]	; (800d530 <USB_EP0StartXfer+0x2a8>)
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	015a      	lsls	r2, r3, #5
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	4413      	add	r3, r2
 800d2dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	0151      	lsls	r1, r2, #5
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	440a      	add	r2, r1
 800d2ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	015a      	lsls	r2, r3, #5
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d300:	691a      	ldr	r2, [r3, #16]
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	0159      	lsls	r1, r3, #5
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	440b      	add	r3, r1
 800d30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d30e:	4619      	mov	r1, r3
 800d310:	4b88      	ldr	r3, [pc, #544]	; (800d534 <USB_EP0StartXfer+0x2ac>)
 800d312:	4013      	ands	r3, r2
 800d314:	610b      	str	r3, [r1, #16]
 800d316:	e04e      	b.n	800d3b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	015a      	lsls	r2, r3, #5
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	4413      	add	r3, r2
 800d320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d324:	691a      	ldr	r2, [r3, #16]
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	0159      	lsls	r1, r3, #5
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	440b      	add	r3, r1
 800d32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d332:	4619      	mov	r1, r3
 800d334:	4b7f      	ldr	r3, [pc, #508]	; (800d534 <USB_EP0StartXfer+0x2ac>)
 800d336:	4013      	ands	r3, r2
 800d338:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	015a      	lsls	r2, r3, #5
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	4413      	add	r3, r2
 800d342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d346:	691a      	ldr	r2, [r3, #16]
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	0159      	lsls	r1, r3, #5
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	440b      	add	r3, r1
 800d350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d354:	4619      	mov	r1, r3
 800d356:	4b76      	ldr	r3, [pc, #472]	; (800d530 <USB_EP0StartXfer+0x2a8>)
 800d358:	4013      	ands	r3, r2
 800d35a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	695a      	ldr	r2, [r3, #20]
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	429a      	cmp	r2, r3
 800d366:	d903      	bls.n	800d370 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	689a      	ldr	r2, [r3, #8]
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	015a      	lsls	r2, r3, #5
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	4413      	add	r3, r2
 800d378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	0151      	lsls	r1, r2, #5
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	440a      	add	r2, r1
 800d386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d38a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d38e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	015a      	lsls	r2, r3, #5
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	4413      	add	r3, r2
 800d398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d39c:	691a      	ldr	r2, [r3, #16]
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d3a6:	6939      	ldr	r1, [r7, #16]
 800d3a8:	0148      	lsls	r0, r1, #5
 800d3aa:	6979      	ldr	r1, [r7, #20]
 800d3ac:	4401      	add	r1, r0
 800d3ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d3b6:	79fb      	ldrb	r3, [r7, #7]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d11e      	bne.n	800d3fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d009      	beq.n	800d3d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	015a      	lsls	r2, r3, #5
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	015a      	lsls	r2, r3, #5
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	4413      	add	r3, r2
 800d3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	0151      	lsls	r1, r2, #5
 800d3ea:	697a      	ldr	r2, [r7, #20]
 800d3ec:	440a      	add	r2, r1
 800d3ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	e092      	b.n	800d520 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	015a      	lsls	r2, r3, #5
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	4413      	add	r3, r2
 800d402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	0151      	lsls	r1, r2, #5
 800d40c:	697a      	ldr	r2, [r7, #20]
 800d40e:	440a      	add	r2, r1
 800d410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d414:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d418:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d07e      	beq.n	800d520 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	f003 030f 	and.w	r3, r3, #15
 800d432:	2101      	movs	r1, #1
 800d434:	fa01 f303 	lsl.w	r3, r1, r3
 800d438:	6979      	ldr	r1, [r7, #20]
 800d43a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d43e:	4313      	orrs	r3, r2
 800d440:	634b      	str	r3, [r1, #52]	; 0x34
 800d442:	e06d      	b.n	800d520 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d450:	691a      	ldr	r2, [r3, #16]
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	0159      	lsls	r1, r3, #5
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	440b      	add	r3, r1
 800d45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d45e:	4619      	mov	r1, r3
 800d460:	4b34      	ldr	r3, [pc, #208]	; (800d534 <USB_EP0StartXfer+0x2ac>)
 800d462:	4013      	ands	r3, r2
 800d464:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	015a      	lsls	r2, r3, #5
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	4413      	add	r3, r2
 800d46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d472:	691a      	ldr	r2, [r3, #16]
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	0159      	lsls	r1, r3, #5
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	440b      	add	r3, r1
 800d47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d480:	4619      	mov	r1, r3
 800d482:	4b2b      	ldr	r3, [pc, #172]	; (800d530 <USB_EP0StartXfer+0x2a8>)
 800d484:	4013      	ands	r3, r2
 800d486:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d003      	beq.n	800d498 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	689a      	ldr	r2, [r3, #8]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	015a      	lsls	r2, r3, #5
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	4413      	add	r3, r2
 800d4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	0151      	lsls	r1, r2, #5
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	440a      	add	r2, r1
 800d4ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	015a      	lsls	r2, r3, #5
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	4413      	add	r3, r2
 800d4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4c4:	691a      	ldr	r2, [r3, #16]
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4ce:	6939      	ldr	r1, [r7, #16]
 800d4d0:	0148      	lsls	r0, r1, #5
 800d4d2:	6979      	ldr	r1, [r7, #20]
 800d4d4:	4401      	add	r1, r0
 800d4d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d4de:	79fb      	ldrb	r3, [r7, #7]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d10d      	bne.n	800d500 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d009      	beq.n	800d500 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	68d9      	ldr	r1, [r3, #12]
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	015a      	lsls	r2, r3, #5
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4fc:	460a      	mov	r2, r1
 800d4fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	015a      	lsls	r2, r3, #5
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	4413      	add	r3, r2
 800d508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	0151      	lsls	r1, r2, #5
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	440a      	add	r2, r1
 800d516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d51a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d51e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	371c      	adds	r7, #28
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop
 800d530:	e007ffff 	.word	0xe007ffff
 800d534:	fff80000 	.word	0xfff80000

0800d538 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d538:	b480      	push	{r7}
 800d53a:	b089      	sub	sp, #36	; 0x24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	4611      	mov	r1, r2
 800d544:	461a      	mov	r2, r3
 800d546:	460b      	mov	r3, r1
 800d548:	71fb      	strb	r3, [r7, #7]
 800d54a:	4613      	mov	r3, r2
 800d54c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d556:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d11a      	bne.n	800d594 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d55e:	88bb      	ldrh	r3, [r7, #4]
 800d560:	3303      	adds	r3, #3
 800d562:	089b      	lsrs	r3, r3, #2
 800d564:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d566:	2300      	movs	r3, #0
 800d568:	61bb      	str	r3, [r7, #24]
 800d56a:	e00f      	b.n	800d58c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	031a      	lsls	r2, r3, #12
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	4413      	add	r3, r2
 800d574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d578:	461a      	mov	r2, r3
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	3304      	adds	r3, #4
 800d584:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	3301      	adds	r3, #1
 800d58a:	61bb      	str	r3, [r7, #24]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	429a      	cmp	r2, r3
 800d592:	d3eb      	bcc.n	800d56c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3724      	adds	r7, #36	; 0x24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d5a2:	b480      	push	{r7}
 800d5a4:	b089      	sub	sp, #36	; 0x24
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	60f8      	str	r0, [r7, #12]
 800d5aa:	60b9      	str	r1, [r7, #8]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d5b8:	88fb      	ldrh	r3, [r7, #6]
 800d5ba:	3303      	adds	r3, #3
 800d5bc:	089b      	lsrs	r3, r3, #2
 800d5be:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61bb      	str	r3, [r7, #24]
 800d5c4:	e00b      	b.n	800d5de <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	601a      	str	r2, [r3, #0]
    pDest++;
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	61bb      	str	r3, [r7, #24]
 800d5de:	69ba      	ldr	r2, [r7, #24]
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d3ef      	bcc.n	800d5c6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d5e6:	69fb      	ldr	r3, [r7, #28]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3724      	adds	r7, #36	; 0x24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b085      	sub	sp, #20
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	785b      	ldrb	r3, [r3, #1]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d12c      	bne.n	800d66a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	015a      	lsls	r2, r3, #5
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	4413      	add	r3, r2
 800d618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	db12      	blt.n	800d648 <USB_EPSetStall+0x54>
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00f      	beq.n	800d648 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	0151      	lsls	r1, r2, #5
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	440a      	add	r2, r1
 800d63e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d642:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d646:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	015a      	lsls	r2, r3, #5
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	4413      	add	r3, r2
 800d650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	68ba      	ldr	r2, [r7, #8]
 800d658:	0151      	lsls	r1, r2, #5
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	440a      	add	r2, r1
 800d65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	e02b      	b.n	800d6c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	015a      	lsls	r2, r3, #5
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	4413      	add	r3, r2
 800d672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	db12      	blt.n	800d6a2 <USB_EPSetStall+0xae>
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00f      	beq.n	800d6a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	015a      	lsls	r2, r3, #5
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	4413      	add	r3, r2
 800d68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	68ba      	ldr	r2, [r7, #8]
 800d692:	0151      	lsls	r1, r2, #5
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	440a      	add	r2, r1
 800d698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d69c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	015a      	lsls	r2, r3, #5
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	68ba      	ldr	r2, [r7, #8]
 800d6b2:	0151      	lsls	r1, r2, #5
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	440a      	add	r2, r1
 800d6b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	785b      	ldrb	r3, [r3, #1]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d128      	bne.n	800d73e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	0151      	lsls	r1, r2, #5
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	440a      	add	r2, r1
 800d702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d70a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	78db      	ldrb	r3, [r3, #3]
 800d710:	2b03      	cmp	r3, #3
 800d712:	d003      	beq.n	800d71c <USB_EPClearStall+0x4c>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	78db      	ldrb	r3, [r3, #3]
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d138      	bne.n	800d78e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	015a      	lsls	r2, r3, #5
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	4413      	add	r3, r2
 800d724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68ba      	ldr	r2, [r7, #8]
 800d72c:	0151      	lsls	r1, r2, #5
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	440a      	add	r2, r1
 800d732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d73a:	6013      	str	r3, [r2, #0]
 800d73c:	e027      	b.n	800d78e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	0151      	lsls	r1, r2, #5
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	440a      	add	r2, r1
 800d754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d758:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d75c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	78db      	ldrb	r3, [r3, #3]
 800d762:	2b03      	cmp	r3, #3
 800d764:	d003      	beq.n	800d76e <USB_EPClearStall+0x9e>
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	78db      	ldrb	r3, [r3, #3]
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d10f      	bne.n	800d78e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	015a      	lsls	r2, r3, #5
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	4413      	add	r3, r2
 800d776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	0151      	lsls	r1, r2, #5
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	440a      	add	r2, r1
 800d784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d78c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d7be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	78fb      	ldrb	r3, [r7, #3]
 800d7ca:	011b      	lsls	r3, r3, #4
 800d7cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d7d0:	68f9      	ldr	r1, [r7, #12]
 800d7d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d802:	f023 0302 	bic.w	r3, r3, #2
 800d806:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d808:	2003      	movs	r0, #3
 800d80a:	f7f4 f929 	bl	8001a60 <HAL_Delay>

  return HAL_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d832:	f043 0302 	orr.w	r3, r3, #2
 800d836:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d838:	2003      	movs	r0, #3
 800d83a:	f7f4 f911 	bl	8001a60 <HAL_Delay>

  return HAL_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	699b      	ldr	r3, [r3, #24]
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	4013      	ands	r3, r2
 800d85e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d860:	68fb      	ldr	r3, [r7, #12]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d86e:	b480      	push	{r7}
 800d870:	b085      	sub	sp, #20
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d88a:	69db      	ldr	r3, [r3, #28]
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	4013      	ands	r3, r2
 800d890:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	0c1b      	lsrs	r3, r3, #16
}
 800d896:	4618      	mov	r0, r3
 800d898:	3714      	adds	r7, #20
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b085      	sub	sp, #20
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8b4:	699b      	ldr	r3, [r3, #24]
 800d8b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8be:	69db      	ldr	r3, [r3, #28]
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	b29b      	uxth	r3, r3
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b085      	sub	sp, #20
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d8e6:	78fb      	ldrb	r3, [r7, #3]
 800d8e8:	015a      	lsls	r2, r3, #5
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	4013      	ands	r3, r2
 800d902:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d904:	68bb      	ldr	r3, [r7, #8]
}
 800d906:	4618      	mov	r0, r3
 800d908:	3714      	adds	r7, #20
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d912:	b480      	push	{r7}
 800d914:	b087      	sub	sp, #28
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	460b      	mov	r3, r1
 800d91c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d934:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d936:	78fb      	ldrb	r3, [r7, #3]
 800d938:	f003 030f 	and.w	r3, r3, #15
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	fa22 f303 	lsr.w	r3, r2, r3
 800d942:	01db      	lsls	r3, r3, #7
 800d944:	b2db      	uxtb	r3, r3
 800d946:	693a      	ldr	r2, [r7, #16]
 800d948:	4313      	orrs	r3, r2
 800d94a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d94c:	78fb      	ldrb	r3, [r7, #3]
 800d94e:	015a      	lsls	r2, r3, #5
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	4413      	add	r3, r2
 800d954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	693a      	ldr	r2, [r7, #16]
 800d95c:	4013      	ands	r3, r2
 800d95e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d960:	68bb      	ldr	r3, [r7, #8]
}
 800d962:	4618      	mov	r0, r3
 800d964:	371c      	adds	r7, #28
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d96e:	b480      	push	{r7}
 800d970:	b083      	sub	sp, #12
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	f003 0301 	and.w	r3, r3, #1
}
 800d97e:	4618      	mov	r0, r3
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
	...

0800d98c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b085      	sub	sp, #20
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	4b09      	ldr	r3, [pc, #36]	; (800d9d0 <USB_ActivateSetup+0x44>)
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	fffff800 	.word	0xfffff800

0800d9d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	607a      	str	r2, [r7, #4]
 800d9e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	333c      	adds	r3, #60	; 0x3c
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	4a26      	ldr	r2, [pc, #152]	; (800da8c <USB_EP0_OutStart+0xb8>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d90a      	bls.n	800da0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da08:	d101      	bne.n	800da0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	e037      	b.n	800da7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da14:	461a      	mov	r2, r3
 800da16:	2300      	movs	r3, #0
 800da18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da3c:	f043 0318 	orr.w	r3, r3, #24
 800da40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800da54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800da56:	7afb      	ldrb	r3, [r7, #11]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d10f      	bne.n	800da7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da62:	461a      	mov	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800da7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	371c      	adds	r7, #28
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	4f54300a 	.word	0x4f54300a

0800da90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800da98:	2300      	movs	r3, #0
 800da9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3301      	adds	r3, #1
 800daa0:	60fb      	str	r3, [r7, #12]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	4a13      	ldr	r2, [pc, #76]	; (800daf4 <USB_CoreReset+0x64>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d901      	bls.n	800daae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800daaa:	2303      	movs	r3, #3
 800daac:	e01b      	b.n	800dae6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	daf2      	bge.n	800da9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dab6:	2300      	movs	r3, #0
 800dab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	f043 0201 	orr.w	r2, r3, #1
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	3301      	adds	r3, #1
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	4a09      	ldr	r2, [pc, #36]	; (800daf4 <USB_CoreReset+0x64>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d901      	bls.n	800dad8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dad4:	2303      	movs	r3, #3
 800dad6:	e006      	b.n	800dae6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	f003 0301 	and.w	r3, r3, #1
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d0f0      	beq.n	800dac6 <USB_CoreReset+0x36>

  return HAL_OK;
 800dae4:	2300      	movs	r3, #0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3714      	adds	r7, #20
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	00030d40 	.word	0x00030d40

0800daf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dafc:	4904      	ldr	r1, [pc, #16]	; (800db10 <MX_FATFS_Init+0x18>)
 800dafe:	4805      	ldr	r0, [pc, #20]	; (800db14 <MX_FATFS_Init+0x1c>)
 800db00:	f001 fdc0 	bl	800f684 <FATFS_LinkDriver>
 800db04:	4603      	mov	r3, r0
 800db06:	461a      	mov	r2, r3
 800db08:	4b03      	ldr	r3, [pc, #12]	; (800db18 <MX_FATFS_Init+0x20>)
 800db0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800db0c:	bf00      	nop
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	2400064c 	.word	0x2400064c
 800db14:	08011470 	.word	0x08011470
 800db18:	24000648 	.word	0x24000648

0800db1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800db26:	f000 f879 	bl	800dc1c <BSP_SD_IsDetected>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d001      	beq.n	800db34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800db30:	2302      	movs	r3, #2
 800db32:	e012      	b.n	800db5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800db34:	480b      	ldr	r0, [pc, #44]	; (800db64 <BSP_SD_Init+0x48>)
 800db36:	f7fa ff8b 	bl	8008a50 <HAL_SD_Init>
 800db3a:	4603      	mov	r3, r0
 800db3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800db3e:	79fb      	ldrb	r3, [r7, #7]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d109      	bne.n	800db58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800db44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800db48:	4806      	ldr	r0, [pc, #24]	; (800db64 <BSP_SD_Init+0x48>)
 800db4a:	f7fb fe4f 	bl	80097ec <HAL_SD_ConfigWideBusOperation>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d001      	beq.n	800db58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800db58:	79fb      	ldrb	r3, [r7, #7]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	24000328 	.word	0x24000328

0800db68 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af02      	add	r7, sp, #8
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800db76:	2300      	movs	r3, #0
 800db78:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	68f9      	ldr	r1, [r7, #12]
 800db84:	4806      	ldr	r0, [pc, #24]	; (800dba0 <BSP_SD_ReadBlocks+0x38>)
 800db86:	f7fb f887 	bl	8008c98 <HAL_SD_ReadBlocks>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800db94:	7dfb      	ldrb	r3, [r7, #23]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3718      	adds	r7, #24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	24000328 	.word	0x24000328

0800dba4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af02      	add	r7, sp, #8
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	68f9      	ldr	r1, [r7, #12]
 800dbc0:	4806      	ldr	r0, [pc, #24]	; (800dbdc <BSP_SD_WriteBlocks+0x38>)
 800dbc2:	f7fb f9f3 	bl	8008fac <HAL_SD_WriteBlocks>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d001      	beq.n	800dbd0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dbd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3718      	adds	r7, #24
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	24000328 	.word	0x24000328

0800dbe0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dbe4:	4805      	ldr	r0, [pc, #20]	; (800dbfc <BSP_SD_GetCardState+0x1c>)
 800dbe6:	f7fb feab 	bl	8009940 <HAL_SD_GetCardState>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b04      	cmp	r3, #4
 800dbee:	bf14      	ite	ne
 800dbf0:	2301      	movne	r3, #1
 800dbf2:	2300      	moveq	r3, #0
 800dbf4:	b2db      	uxtb	r3, r3
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	24000328 	.word	0x24000328

0800dc00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dc08:	6879      	ldr	r1, [r7, #4]
 800dc0a:	4803      	ldr	r0, [pc, #12]	; (800dc18 <BSP_SD_GetCardInfo+0x18>)
 800dc0c:	f7fb fdc2 	bl	8009794 <HAL_SD_GetCardInfo>
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	24000328 	.word	0x24000328

0800dc1c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dc22:	2301      	movs	r3, #1
 800dc24:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dc26:	f000 f80b 	bl	800dc40 <BSP_PlatformIsDetected>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dc30:	2300      	movs	r3, #0
 800dc32:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dc34:	79fb      	ldrb	r3, [r7, #7]
 800dc36:	b2db      	uxtb	r3, r3
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dc46:	2301      	movs	r3, #1
 800dc48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dc4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dc4e:	4806      	ldr	r0, [pc, #24]	; (800dc68 <BSP_PlatformIsDetected+0x28>)
 800dc50:	f7f6 fe34 	bl	80048bc <HAL_GPIO_ReadPin>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dc5e:	79fb      	ldrb	r3, [r7, #7]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	58020000 	.word	0x58020000

0800dc6c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dc76:	4b0b      	ldr	r3, [pc, #44]	; (800dca4 <SD_CheckStatus+0x38>)
 800dc78:	2201      	movs	r2, #1
 800dc7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dc7c:	f7ff ffb0 	bl	800dbe0 <BSP_SD_GetCardState>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d107      	bne.n	800dc96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dc86:	4b07      	ldr	r3, [pc, #28]	; (800dca4 <SD_CheckStatus+0x38>)
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f023 0301 	bic.w	r3, r3, #1
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	4b04      	ldr	r3, [pc, #16]	; (800dca4 <SD_CheckStatus+0x38>)
 800dc94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dc96:	4b03      	ldr	r3, [pc, #12]	; (800dca4 <SD_CheckStatus+0x38>)
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	b2db      	uxtb	r3, r3
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	2400000d 	.word	0x2400000d

0800dca8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	4603      	mov	r3, r0
 800dcb0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dcb2:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <SD_initialize+0x38>)
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dcb8:	f7ff ff30 	bl	800db1c <BSP_SD_Init>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d107      	bne.n	800dcd2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff ffd1 	bl	800dc6c <SD_CheckStatus>
 800dcca:	4603      	mov	r3, r0
 800dccc:	461a      	mov	r2, r3
 800dcce:	4b04      	ldr	r3, [pc, #16]	; (800dce0 <SD_initialize+0x38>)
 800dcd0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dcd2:	4b03      	ldr	r3, [pc, #12]	; (800dce0 <SD_initialize+0x38>)
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	b2db      	uxtb	r3, r3
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	2400000d 	.word	0x2400000d

0800dce4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff ffbb 	bl	800dc6c <SD_CheckStatus>
 800dcf6:	4603      	mov	r3, r0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	607a      	str	r2, [r7, #4]
 800dd0a:	603b      	str	r3, [r7, #0]
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800dd14:	f04f 33ff 	mov.w	r3, #4294967295
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	6879      	ldr	r1, [r7, #4]
 800dd1c:	68b8      	ldr	r0, [r7, #8]
 800dd1e:	f7ff ff23 	bl	800db68 <BSP_SD_ReadBlocks>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d107      	bne.n	800dd38 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dd28:	bf00      	nop
 800dd2a:	f7ff ff59 	bl	800dbe0 <BSP_SD_GetCardState>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1fa      	bne.n	800dd2a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dd34:	2300      	movs	r3, #0
 800dd36:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3718      	adds	r7, #24
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b086      	sub	sp, #24
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
 800dd4c:	603b      	str	r3, [r7, #0]
 800dd4e:	4603      	mov	r3, r0
 800dd50:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800dd56:	f04f 33ff 	mov.w	r3, #4294967295
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	68b8      	ldr	r0, [r7, #8]
 800dd60:	f7ff ff20 	bl	800dba4 <BSP_SD_WriteBlocks>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d107      	bne.n	800dd7a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dd6a:	bf00      	nop
 800dd6c:	f7ff ff38 	bl	800dbe0 <BSP_SD_GetCardState>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1fa      	bne.n	800dd6c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800dd76:	2300      	movs	r3, #0
 800dd78:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b08c      	sub	sp, #48	; 0x30
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	603a      	str	r2, [r7, #0]
 800dd8e:	71fb      	strb	r3, [r7, #7]
 800dd90:	460b      	mov	r3, r1
 800dd92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dd94:	2301      	movs	r3, #1
 800dd96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dd9a:	4b25      	ldr	r3, [pc, #148]	; (800de30 <SD_ioctl+0xac>)
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	f003 0301 	and.w	r3, r3, #1
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d001      	beq.n	800ddac <SD_ioctl+0x28>
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e03c      	b.n	800de26 <SD_ioctl+0xa2>

  switch (cmd)
 800ddac:	79bb      	ldrb	r3, [r7, #6]
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d834      	bhi.n	800de1c <SD_ioctl+0x98>
 800ddb2:	a201      	add	r2, pc, #4	; (adr r2, 800ddb8 <SD_ioctl+0x34>)
 800ddb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb8:	0800ddc9 	.word	0x0800ddc9
 800ddbc:	0800ddd1 	.word	0x0800ddd1
 800ddc0:	0800dde9 	.word	0x0800dde9
 800ddc4:	0800de03 	.word	0x0800de03
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddce:	e028      	b.n	800de22 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddd0:	f107 0308 	add.w	r3, r7, #8
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7ff ff13 	bl	800dc00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ddda:	6a3a      	ldr	r2, [r7, #32]
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dde0:	2300      	movs	r3, #0
 800dde2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dde6:	e01c      	b.n	800de22 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dde8:	f107 0308 	add.w	r3, r7, #8
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7ff ff07 	bl	800dc00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de00:	e00f      	b.n	800de22 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de02:	f107 0308 	add.w	r3, r7, #8
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff fefa 	bl	800dc00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0e:	0a5a      	lsrs	r2, r3, #9
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de14:	2300      	movs	r3, #0
 800de16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de1a:	e002      	b.n	800de22 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800de1c:	2304      	movs	r3, #4
 800de1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800de22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800de26:	4618      	mov	r0, r3
 800de28:	3730      	adds	r7, #48	; 0x30
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	2400000d 	.word	0x2400000d

0800de34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800de44:	f002 f936 	bl	80100b4 <malloc>
 800de48:	4603      	mov	r3, r0
 800de4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d105      	bne.n	800de5e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800de5a:	2302      	movs	r3, #2
 800de5c:	e066      	b.n	800df2c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	7c1b      	ldrb	r3, [r3, #16]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d119      	bne.n	800dea2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800de6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de72:	2202      	movs	r2, #2
 800de74:	2181      	movs	r1, #129	; 0x81
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f001 ffa3 	bl	800fdc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2201      	movs	r2, #1
 800de80:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800de82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de86:	2202      	movs	r2, #2
 800de88:	2101      	movs	r1, #1
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f001 ff99 	bl	800fdc2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2210      	movs	r2, #16
 800de9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dea0:	e016      	b.n	800ded0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dea2:	2340      	movs	r3, #64	; 0x40
 800dea4:	2202      	movs	r2, #2
 800dea6:	2181      	movs	r1, #129	; 0x81
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f001 ff8a 	bl	800fdc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2201      	movs	r2, #1
 800deb2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800deb4:	2340      	movs	r3, #64	; 0x40
 800deb6:	2202      	movs	r2, #2
 800deb8:	2101      	movs	r1, #1
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f001 ff81 	bl	800fdc2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2210      	movs	r2, #16
 800decc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ded0:	2308      	movs	r3, #8
 800ded2:	2203      	movs	r2, #3
 800ded4:	2182      	movs	r1, #130	; 0x82
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f001 ff73 	bl	800fdc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2201      	movs	r2, #1
 800dee0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2200      	movs	r2, #0
 800def2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	7c1b      	ldrb	r3, [r3, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d109      	bne.n	800df1a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df10:	2101      	movs	r1, #1
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f002 f844 	bl	800ffa0 <USBD_LL_PrepareReceive>
 800df18:	e007      	b.n	800df2a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df20:	2340      	movs	r3, #64	; 0x40
 800df22:	2101      	movs	r1, #1
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f002 f83b 	bl	800ffa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800df40:	2300      	movs	r3, #0
 800df42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800df44:	2181      	movs	r1, #129	; 0x81
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f001 ff61 	bl	800fe0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800df52:	2101      	movs	r1, #1
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f001 ff5a 	bl	800fe0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800df62:	2182      	movs	r1, #130	; 0x82
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f001 ff52 	bl	800fe0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00e      	beq.n	800dfa2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df94:	4618      	mov	r0, r3
 800df96:	f002 f895 	bl	80100c4 <free>
    pdev->pClassData = NULL;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800dfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfbc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d03a      	beq.n	800e04c <USBD_CDC_Setup+0xa0>
 800dfd6:	2b20      	cmp	r3, #32
 800dfd8:	f040 8097 	bne.w	800e10a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	88db      	ldrh	r3, [r3, #6]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d029      	beq.n	800e038 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	b25b      	sxtb	r3, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	da11      	bge.n	800e012 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800dffa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dffc:	683a      	ldr	r2, [r7, #0]
 800dffe:	88d2      	ldrh	r2, [r2, #6]
 800e000:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e002:	6939      	ldr	r1, [r7, #16]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	88db      	ldrh	r3, [r3, #6]
 800e008:	461a      	mov	r2, r3
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f001 fa6d 	bl	800f4ea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e010:	e082      	b.n	800e118 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	785a      	ldrb	r2, [r3, #1]
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	88db      	ldrh	r3, [r3, #6]
 800e020:	b2da      	uxtb	r2, r3
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e028:	6939      	ldr	r1, [r7, #16]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	88db      	ldrh	r3, [r3, #6]
 800e02e:	461a      	mov	r2, r3
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f001 fa86 	bl	800f542 <USBD_CtlPrepareRx>
    break;
 800e036:	e06f      	b.n	800e118 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	7850      	ldrb	r0, [r2, #1]
 800e044:	2200      	movs	r2, #0
 800e046:	6839      	ldr	r1, [r7, #0]
 800e048:	4798      	blx	r3
    break;
 800e04a:	e065      	b.n	800e118 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	785b      	ldrb	r3, [r3, #1]
 800e050:	2b0b      	cmp	r3, #11
 800e052:	d84f      	bhi.n	800e0f4 <USBD_CDC_Setup+0x148>
 800e054:	a201      	add	r2, pc, #4	; (adr r2, 800e05c <USBD_CDC_Setup+0xb0>)
 800e056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e05a:	bf00      	nop
 800e05c:	0800e08d 	.word	0x0800e08d
 800e060:	0800e103 	.word	0x0800e103
 800e064:	0800e0f5 	.word	0x0800e0f5
 800e068:	0800e0f5 	.word	0x0800e0f5
 800e06c:	0800e0f5 	.word	0x0800e0f5
 800e070:	0800e0f5 	.word	0x0800e0f5
 800e074:	0800e0f5 	.word	0x0800e0f5
 800e078:	0800e0f5 	.word	0x0800e0f5
 800e07c:	0800e0f5 	.word	0x0800e0f5
 800e080:	0800e0f5 	.word	0x0800e0f5
 800e084:	0800e0b5 	.word	0x0800e0b5
 800e088:	0800e0dd 	.word	0x0800e0dd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e092:	2b03      	cmp	r3, #3
 800e094:	d107      	bne.n	800e0a6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e096:	f107 030c 	add.w	r3, r7, #12
 800e09a:	2202      	movs	r2, #2
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f001 fa23 	bl	800f4ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e0a4:	e030      	b.n	800e108 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f001 f9ad 	bl	800f408 <USBD_CtlError>
        ret = USBD_FAIL;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	75fb      	strb	r3, [r7, #23]
      break;
 800e0b2:	e029      	b.n	800e108 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d107      	bne.n	800e0ce <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e0be:	f107 030f 	add.w	r3, r7, #15
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f001 fa0f 	bl	800f4ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e0cc:	e01c      	b.n	800e108 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e0ce:	6839      	ldr	r1, [r7, #0]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f001 f999 	bl	800f408 <USBD_CtlError>
        ret = USBD_FAIL;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	75fb      	strb	r3, [r7, #23]
      break;
 800e0da:	e015      	b.n	800e108 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d00f      	beq.n	800e106 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e0e6:	6839      	ldr	r1, [r7, #0]
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f001 f98d 	bl	800f408 <USBD_CtlError>
        ret = USBD_FAIL;
 800e0ee:	2303      	movs	r3, #3
 800e0f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e0f2:	e008      	b.n	800e106 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f001 f986 	bl	800f408 <USBD_CtlError>
      ret = USBD_FAIL;
 800e0fc:	2303      	movs	r3, #3
 800e0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800e100:	e002      	b.n	800e108 <USBD_CDC_Setup+0x15c>
      break;
 800e102:	bf00      	nop
 800e104:	e008      	b.n	800e118 <USBD_CDC_Setup+0x16c>
      break;
 800e106:	bf00      	nop
    }
    break;
 800e108:	e006      	b.n	800e118 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e10a:	6839      	ldr	r1, [r7, #0]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f001 f97b 	bl	800f408 <USBD_CtlError>
    ret = USBD_FAIL;
 800e112:	2303      	movs	r3, #3
 800e114:	75fb      	strb	r3, [r7, #23]
    break;
 800e116:	bf00      	nop
  }

  return (uint8_t)ret;
 800e118:	7dfb      	ldrb	r3, [r7, #23]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3718      	adds	r7, #24
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop

0800e124 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e136:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e142:	2303      	movs	r3, #3
 800e144:	e049      	b.n	800e1da <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e14c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e14e:	78fa      	ldrb	r2, [r7, #3]
 800e150:	6879      	ldr	r1, [r7, #4]
 800e152:	4613      	mov	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	440b      	add	r3, r1
 800e15c:	3318      	adds	r3, #24
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d029      	beq.n	800e1b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e164:	78fa      	ldrb	r2, [r7, #3]
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	4613      	mov	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	440b      	add	r3, r1
 800e172:	3318      	adds	r3, #24
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	78f9      	ldrb	r1, [r7, #3]
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	460b      	mov	r3, r1
 800e17c:	00db      	lsls	r3, r3, #3
 800e17e:	1a5b      	subs	r3, r3, r1
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4403      	add	r3, r0
 800e184:	3344      	adds	r3, #68	; 0x44
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	fbb2 f1f3 	udiv	r1, r2, r3
 800e18c:	fb03 f301 	mul.w	r3, r3, r1
 800e190:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e192:	2b00      	cmp	r3, #0
 800e194:	d110      	bne.n	800e1b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e196:	78fa      	ldrb	r2, [r7, #3]
 800e198:	6879      	ldr	r1, [r7, #4]
 800e19a:	4613      	mov	r3, r2
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	440b      	add	r3, r1
 800e1a4:	3318      	adds	r3, #24
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e1aa:	78f9      	ldrb	r1, [r7, #3]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f001 fed4 	bl	800ff5e <USBD_LL_Transmit>
 800e1b6:	e00f      	b.n	800e1d8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	68ba      	ldr	r2, [r7, #8]
 800e1ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e1d4:	78fa      	ldrb	r2, [r7, #3]
 800e1d6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b084      	sub	sp, #16
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d101      	bne.n	800e204 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e200:	2303      	movs	r3, #3
 800e202:	e015      	b.n	800e230 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	4619      	mov	r1, r3
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f001 feea 	bl	800ffe2 <USBD_LL_GetRxDataSize>
 800e20e:	4602      	mov	r2, r0
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e22a:	4611      	mov	r1, r2
 800e22c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e246:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d015      	beq.n	800e27e <USBD_CDC_EP0_RxReady+0x46>
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e258:	2bff      	cmp	r3, #255	; 0xff
 800e25a:	d010      	beq.n	800e27e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e26a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e272:	b292      	uxth	r2, r2
 800e274:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	22ff      	movs	r2, #255	; 0xff
 800e27a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2243      	movs	r2, #67	; 0x43
 800e294:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e296:	4b03      	ldr	r3, [pc, #12]	; (800e2a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e298:	4618      	mov	r0, r3
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr
 800e2a4:	24000098 	.word	0x24000098

0800e2a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2243      	movs	r2, #67	; 0x43
 800e2b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e2b6:	4b03      	ldr	r3, [pc, #12]	; (800e2c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr
 800e2c4:	24000054 	.word	0x24000054

0800e2c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2243      	movs	r2, #67	; 0x43
 800e2d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e2d6:	4b03      	ldr	r3, [pc, #12]	; (800e2e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	240000dc 	.word	0x240000dc

0800e2e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	220a      	movs	r2, #10
 800e2f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e2f6:	4b03      	ldr	r3, [pc, #12]	; (800e304 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr
 800e304:	24000010 	.word	0x24000010

0800e308 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e318:	2303      	movs	r3, #3
 800e31a:	e004      	b.n	800e326 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e332:	b480      	push	{r7}
 800e334:	b087      	sub	sp, #28
 800e336:	af00      	add	r7, sp, #0
 800e338:	60f8      	str	r0, [r7, #12]
 800e33a:	60b9      	str	r1, [r7, #8]
 800e33c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e344:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	371c      	adds	r7, #28
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e374:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e37e:	2300      	movs	r3, #0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3714      	adds	r7, #20
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e39a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d101      	bne.n	800e3aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e3a6:	2303      	movs	r3, #3
 800e3a8:	e016      	b.n	800e3d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	7c1b      	ldrb	r3, [r3, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d109      	bne.n	800e3c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3bc:	2101      	movs	r1, #1
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f001 fdee 	bl	800ffa0 <USBD_LL_PrepareReceive>
 800e3c4:	e007      	b.n	800e3d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3cc:	2340      	movs	r3, #64	; 0x40
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f001 fde5 	bl	800ffa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e3f4:	2303      	movs	r3, #3
 800e3f6:	e025      	b.n	800e444 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d003      	beq.n	800e40a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e410:	2b00      	cmp	r3, #0
 800e412:	d003      	beq.n	800e41c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2200      	movs	r2, #0
 800e418:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	79fa      	ldrb	r2, [r7, #7]
 800e436:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f001 fc57 	bl	800fcec <USBD_LL_Init>
 800e43e:	4603      	mov	r3, r0
 800e440:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e442:	7dfb      	ldrb	r3, [r7, #23]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e456:	2300      	movs	r3, #0
 800e458:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d101      	bne.n	800e464 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e460:	2303      	movs	r3, #3
 800e462:	e010      	b.n	800e486 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	683a      	ldr	r2, [r7, #0]
 800e468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e474:	f107 020e 	add.w	r2, r7, #14
 800e478:	4610      	mov	r0, r2
 800e47a:	4798      	blx	r3
 800e47c:	4602      	mov	r2, r0
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b082      	sub	sp, #8
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 fc78 	bl	800fd8c <USBD_LL_Start>
 800e49c:	4603      	mov	r3, r0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	b083      	sub	sp, #12
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e4c8:	2303      	movs	r3, #3
 800e4ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d009      	beq.n	800e4ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	78fa      	ldrb	r2, [r7, #3]
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	4798      	blx	r3
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e506:	2b00      	cmp	r3, #0
 800e508:	d007      	beq.n	800e51a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	78fa      	ldrb	r2, [r7, #3]
 800e514:	4611      	mov	r1, r2
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	4798      	blx	r3
  }

  return USBD_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	4618      	mov	r0, r3
 800e538:	f000 ff2c 	bl	800f394 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e54a:	461a      	mov	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e558:	f003 031f 	and.w	r3, r3, #31
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d00e      	beq.n	800e57e <USBD_LL_SetupStage+0x5a>
 800e560:	2b01      	cmp	r3, #1
 800e562:	d302      	bcc.n	800e56a <USBD_LL_SetupStage+0x46>
 800e564:	2b02      	cmp	r3, #2
 800e566:	d014      	beq.n	800e592 <USBD_LL_SetupStage+0x6e>
 800e568:	e01d      	b.n	800e5a6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fa18 	bl	800e9a8 <USBD_StdDevReq>
 800e578:	4603      	mov	r3, r0
 800e57a:	73fb      	strb	r3, [r7, #15]
      break;
 800e57c:	e020      	b.n	800e5c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e584:	4619      	mov	r1, r3
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 fa7c 	bl	800ea84 <USBD_StdItfReq>
 800e58c:	4603      	mov	r3, r0
 800e58e:	73fb      	strb	r3, [r7, #15]
      break;
 800e590:	e016      	b.n	800e5c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e598:	4619      	mov	r1, r3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 fab8 	bl	800eb10 <USBD_StdEPReq>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e5a4:	e00c      	b.n	800e5c0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e5ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f001 fc49 	bl	800fe4c <USBD_LL_StallEP>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800e5be:	bf00      	nop
  }

  return ret;
 800e5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b086      	sub	sp, #24
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	60f8      	str	r0, [r7, #12]
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	607a      	str	r2, [r7, #4]
 800e5d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e5d8:	7afb      	ldrb	r3, [r7, #11]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d137      	bne.n	800e64e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e5e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e5ec:	2b03      	cmp	r3, #3
 800e5ee:	d14a      	bne.n	800e686 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	689a      	ldr	r2, [r3, #8]
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d913      	bls.n	800e624 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	689a      	ldr	r2, [r3, #8]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	1ad2      	subs	r2, r2, r3
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	68da      	ldr	r2, [r3, #12]
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	689b      	ldr	r3, [r3, #8]
 800e612:	4293      	cmp	r3, r2
 800e614:	bf28      	it	cs
 800e616:	4613      	movcs	r3, r2
 800e618:	461a      	mov	r2, r3
 800e61a:	6879      	ldr	r1, [r7, #4]
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f000 ffad 	bl	800f57c <USBD_CtlContinueRx>
 800e622:	e030      	b.n	800e686 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00a      	beq.n	800e646 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e636:	2b03      	cmp	r3, #3
 800e638:	d105      	bne.n	800e646 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f000 ffa9 	bl	800f59e <USBD_CtlSendStatus>
 800e64c:	e01b      	b.n	800e686 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e654:	699b      	ldr	r3, [r3, #24]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d013      	beq.n	800e682 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e660:	2b03      	cmp	r3, #3
 800e662:	d10e      	bne.n	800e682 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e66a:	699b      	ldr	r3, [r3, #24]
 800e66c:	7afa      	ldrb	r2, [r7, #11]
 800e66e:	4611      	mov	r1, r2
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	4798      	blx	r3
 800e674:	4603      	mov	r3, r0
 800e676:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e678:	7dfb      	ldrb	r3, [r7, #23]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d003      	beq.n	800e686 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e67e:	7dfb      	ldrb	r3, [r7, #23]
 800e680:	e002      	b.n	800e688 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e682:	2303      	movs	r3, #3
 800e684:	e000      	b.n	800e688 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3718      	adds	r7, #24
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	460b      	mov	r3, r1
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e69e:	7afb      	ldrb	r3, [r7, #11]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d16a      	bne.n	800e77a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3314      	adds	r3, #20
 800e6a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	d155      	bne.n	800e760 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	689a      	ldr	r2, [r3, #8]
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d914      	bls.n	800e6ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	689a      	ldr	r2, [r3, #8]
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	1ad2      	subs	r2, r2, r3
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	6879      	ldr	r1, [r7, #4]
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f000 ff22 	bl	800f520 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6dc:	2300      	movs	r3, #0
 800e6de:	2200      	movs	r2, #0
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f001 fc5c 	bl	800ffa0 <USBD_LL_PrepareReceive>
 800e6e8:	e03a      	b.n	800e760 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	68da      	ldr	r2, [r3, #12]
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d11c      	bne.n	800e730 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d316      	bcc.n	800e730 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	685a      	ldr	r2, [r3, #4]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d20f      	bcs.n	800e730 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e710:	2200      	movs	r2, #0
 800e712:	2100      	movs	r1, #0
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 ff03 	bl	800f520 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e722:	2300      	movs	r3, #0
 800e724:	2200      	movs	r2, #0
 800e726:	2100      	movs	r1, #0
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f001 fc39 	bl	800ffa0 <USBD_LL_PrepareReceive>
 800e72e:	e017      	b.n	800e760 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00a      	beq.n	800e752 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e742:	2b03      	cmp	r3, #3
 800e744:	d105      	bne.n	800e752 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e752:	2180      	movs	r1, #128	; 0x80
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f001 fb79 	bl	800fe4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f000 ff32 	bl	800f5c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e766:	2b01      	cmp	r3, #1
 800e768:	d123      	bne.n	800e7b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7ff fe9b 	bl	800e4a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e778:	e01b      	b.n	800e7b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d013      	beq.n	800e7ae <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e78c:	2b03      	cmp	r3, #3
 800e78e:	d10e      	bne.n	800e7ae <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e796:	695b      	ldr	r3, [r3, #20]
 800e798:	7afa      	ldrb	r2, [r7, #11]
 800e79a:	4611      	mov	r1, r2
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	4798      	blx	r3
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e7a4:	7dfb      	ldrb	r3, [r7, #23]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d003      	beq.n	800e7b2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e7aa:	7dfb      	ldrb	r3, [r7, #23]
 800e7ac:	e002      	b.n	800e7b4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	e000      	b.n	800e7b4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d009      	beq.n	800e800 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	6852      	ldr	r2, [r2, #4]
 800e7f8:	b2d2      	uxtb	r2, r2
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e800:	2340      	movs	r3, #64	; 0x40
 800e802:	2200      	movs	r2, #0
 800e804:	2100      	movs	r1, #0
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f001 fadb 	bl	800fdc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2201      	movs	r2, #1
 800e810:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2240      	movs	r2, #64	; 0x40
 800e818:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e81c:	2340      	movs	r3, #64	; 0x40
 800e81e:	2200      	movs	r2, #0
 800e820:	2180      	movs	r1, #128	; 0x80
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f001 facd 	bl	800fdc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2240      	movs	r2, #64	; 0x40
 800e832:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e83e:	b480      	push	{r7}
 800e840:	b083      	sub	sp, #12
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	460b      	mov	r3, r1
 800e848:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	78fa      	ldrb	r2, [r7, #3]
 800e84e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	370c      	adds	r7, #12
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e85e:	b480      	push	{r7}
 800e860:	b083      	sub	sp, #12
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2204      	movs	r2, #4
 800e876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e896:	2b04      	cmp	r3, #4
 800e898:	d105      	bne.n	800e8a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e8a6:	2300      	movs	r3, #0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d10b      	bne.n	800e8de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8cc:	69db      	ldr	r3, [r3, #28]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d005      	beq.n	800e8de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8d8:	69db      	ldr	r3, [r3, #28]
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr

0800e902 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e902:	b480      	push	{r7}
 800e904:	b083      	sub	sp, #12
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	460b      	mov	r3, r1
 800e90c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b082      	sub	sp, #8
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2201      	movs	r2, #1
 800e93e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d009      	beq.n	800e960 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	6852      	ldr	r2, [r2, #4]
 800e958:	b2d2      	uxtb	r2, r2
 800e95a:	4611      	mov	r1, r2
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	4798      	blx	r3
  }

  return USBD_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e96a:	b480      	push	{r7}
 800e96c:	b087      	sub	sp, #28
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	3301      	adds	r3, #1
 800e980:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e988:	8a3b      	ldrh	r3, [r7, #16]
 800e98a:	021b      	lsls	r3, r3, #8
 800e98c:	b21a      	sxth	r2, r3
 800e98e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e992:	4313      	orrs	r3, r2
 800e994:	b21b      	sxth	r3, r3
 800e996:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e998:	89fb      	ldrh	r3, [r7, #14]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	371c      	adds	r7, #28
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9be:	2b20      	cmp	r3, #32
 800e9c0:	d004      	beq.n	800e9cc <USBD_StdDevReq+0x24>
 800e9c2:	2b40      	cmp	r3, #64	; 0x40
 800e9c4:	d002      	beq.n	800e9cc <USBD_StdDevReq+0x24>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <USBD_StdDevReq+0x38>
 800e9ca:	e050      	b.n	800ea6e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	6839      	ldr	r1, [r7, #0]
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	4798      	blx	r3
 800e9da:	4603      	mov	r3, r0
 800e9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800e9de:	e04b      	b.n	800ea78 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	785b      	ldrb	r3, [r3, #1]
 800e9e4:	2b09      	cmp	r3, #9
 800e9e6:	d83c      	bhi.n	800ea62 <USBD_StdDevReq+0xba>
 800e9e8:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <USBD_StdDevReq+0x48>)
 800e9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ee:	bf00      	nop
 800e9f0:	0800ea45 	.word	0x0800ea45
 800e9f4:	0800ea59 	.word	0x0800ea59
 800e9f8:	0800ea63 	.word	0x0800ea63
 800e9fc:	0800ea4f 	.word	0x0800ea4f
 800ea00:	0800ea63 	.word	0x0800ea63
 800ea04:	0800ea23 	.word	0x0800ea23
 800ea08:	0800ea19 	.word	0x0800ea19
 800ea0c:	0800ea63 	.word	0x0800ea63
 800ea10:	0800ea3b 	.word	0x0800ea3b
 800ea14:	0800ea2d 	.word	0x0800ea2d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f9ce 	bl	800edbc <USBD_GetDescriptor>
      break;
 800ea20:	e024      	b.n	800ea6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 fb33 	bl	800f090 <USBD_SetAddress>
      break;
 800ea2a:	e01f      	b.n	800ea6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fb70 	bl	800f114 <USBD_SetConfig>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
      break;
 800ea38:	e018      	b.n	800ea6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ea3a:	6839      	ldr	r1, [r7, #0]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fc0d 	bl	800f25c <USBD_GetConfig>
      break;
 800ea42:	e013      	b.n	800ea6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ea44:	6839      	ldr	r1, [r7, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 fc3c 	bl	800f2c4 <USBD_GetStatus>
      break;
 800ea4c:	e00e      	b.n	800ea6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 fc6a 	bl	800f32a <USBD_SetFeature>
      break;
 800ea56:	e009      	b.n	800ea6c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 fc79 	bl	800f352 <USBD_ClrFeature>
      break;
 800ea60:	e004      	b.n	800ea6c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 fccf 	bl	800f408 <USBD_CtlError>
      break;
 800ea6a:	bf00      	nop
    }
    break;
 800ea6c:	e004      	b.n	800ea78 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 fcc9 	bl	800f408 <USBD_CtlError>
    break;
 800ea76:	bf00      	nop
  }

  return ret;
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop

0800ea84 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea9a:	2b20      	cmp	r3, #32
 800ea9c:	d003      	beq.n	800eaa6 <USBD_StdItfReq+0x22>
 800ea9e:	2b40      	cmp	r3, #64	; 0x40
 800eaa0:	d001      	beq.n	800eaa6 <USBD_StdItfReq+0x22>
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d12a      	bne.n	800eafc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaac:	3b01      	subs	r3, #1
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d81d      	bhi.n	800eaee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	889b      	ldrh	r3, [r3, #4]
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d813      	bhi.n	800eae4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	6839      	ldr	r1, [r7, #0]
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	4798      	blx	r3
 800eaca:	4603      	mov	r3, r0
 800eacc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	88db      	ldrh	r3, [r3, #6]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d110      	bne.n	800eaf8 <USBD_StdItfReq+0x74>
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10d      	bne.n	800eaf8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fd5e 	bl	800f59e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800eae2:	e009      	b.n	800eaf8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800eae4:	6839      	ldr	r1, [r7, #0]
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fc8e 	bl	800f408 <USBD_CtlError>
      break;
 800eaec:	e004      	b.n	800eaf8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800eaee:	6839      	ldr	r1, [r7, #0]
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fc89 	bl	800f408 <USBD_CtlError>
      break;
 800eaf6:	e000      	b.n	800eafa <USBD_StdItfReq+0x76>
      break;
 800eaf8:	bf00      	nop
    }
    break;
 800eafa:	e004      	b.n	800eb06 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800eafc:	6839      	ldr	r1, [r7, #0]
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 fc82 	bl	800f408 <USBD_CtlError>
    break;
 800eb04:	bf00      	nop
  }

  return ret;
 800eb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	889b      	ldrh	r3, [r3, #4]
 800eb22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb2c:	2b20      	cmp	r3, #32
 800eb2e:	d004      	beq.n	800eb3a <USBD_StdEPReq+0x2a>
 800eb30:	2b40      	cmp	r3, #64	; 0x40
 800eb32:	d002      	beq.n	800eb3a <USBD_StdEPReq+0x2a>
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00a      	beq.n	800eb4e <USBD_StdEPReq+0x3e>
 800eb38:	e135      	b.n	800eda6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	6839      	ldr	r1, [r7, #0]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	4798      	blx	r3
 800eb48:	4603      	mov	r3, r0
 800eb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb4c:	e130      	b.n	800edb0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	785b      	ldrb	r3, [r3, #1]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d03e      	beq.n	800ebd4 <USBD_StdEPReq+0xc4>
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	d002      	beq.n	800eb60 <USBD_StdEPReq+0x50>
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d077      	beq.n	800ec4e <USBD_StdEPReq+0x13e>
 800eb5e:	e11c      	b.n	800ed9a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d002      	beq.n	800eb70 <USBD_StdEPReq+0x60>
 800eb6a:	2b03      	cmp	r3, #3
 800eb6c:	d015      	beq.n	800eb9a <USBD_StdEPReq+0x8a>
 800eb6e:	e02b      	b.n	800ebc8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb70:	7bbb      	ldrb	r3, [r7, #14]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00c      	beq.n	800eb90 <USBD_StdEPReq+0x80>
 800eb76:	7bbb      	ldrb	r3, [r7, #14]
 800eb78:	2b80      	cmp	r3, #128	; 0x80
 800eb7a:	d009      	beq.n	800eb90 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb7c:	7bbb      	ldrb	r3, [r7, #14]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f001 f963 	bl	800fe4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb86:	2180      	movs	r1, #128	; 0x80
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f001 f95f 	bl	800fe4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800eb8e:	e020      	b.n	800ebd2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fc38 	bl	800f408 <USBD_CtlError>
        break;
 800eb98:	e01b      	b.n	800ebd2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	885b      	ldrh	r3, [r3, #2]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10e      	bne.n	800ebc0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eba2:	7bbb      	ldrb	r3, [r7, #14]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00b      	beq.n	800ebc0 <USBD_StdEPReq+0xb0>
 800eba8:	7bbb      	ldrb	r3, [r7, #14]
 800ebaa:	2b80      	cmp	r3, #128	; 0x80
 800ebac:	d008      	beq.n	800ebc0 <USBD_StdEPReq+0xb0>
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	88db      	ldrh	r3, [r3, #6]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d104      	bne.n	800ebc0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebb6:	7bbb      	ldrb	r3, [r7, #14]
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f001 f946 	bl	800fe4c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 fcec 	bl	800f59e <USBD_CtlSendStatus>

        break;
 800ebc6:	e004      	b.n	800ebd2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ebc8:	6839      	ldr	r1, [r7, #0]
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fc1c 	bl	800f408 <USBD_CtlError>
        break;
 800ebd0:	bf00      	nop
      }
      break;
 800ebd2:	e0e7      	b.n	800eda4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebda:	2b02      	cmp	r3, #2
 800ebdc:	d002      	beq.n	800ebe4 <USBD_StdEPReq+0xd4>
 800ebde:	2b03      	cmp	r3, #3
 800ebe0:	d015      	beq.n	800ec0e <USBD_StdEPReq+0xfe>
 800ebe2:	e02d      	b.n	800ec40 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebe4:	7bbb      	ldrb	r3, [r7, #14]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00c      	beq.n	800ec04 <USBD_StdEPReq+0xf4>
 800ebea:	7bbb      	ldrb	r3, [r7, #14]
 800ebec:	2b80      	cmp	r3, #128	; 0x80
 800ebee:	d009      	beq.n	800ec04 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebf0:	7bbb      	ldrb	r3, [r7, #14]
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f001 f929 	bl	800fe4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebfa:	2180      	movs	r1, #128	; 0x80
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f001 f925 	bl	800fe4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ec02:	e023      	b.n	800ec4c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 fbfe 	bl	800f408 <USBD_CtlError>
        break;
 800ec0c:	e01e      	b.n	800ec4c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	885b      	ldrh	r3, [r3, #2]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d119      	bne.n	800ec4a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ec16:	7bbb      	ldrb	r3, [r7, #14]
 800ec18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d004      	beq.n	800ec2a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec20:	7bbb      	ldrb	r3, [r7, #14]
 800ec22:	4619      	mov	r1, r3
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f001 f930 	bl	800fe8a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 fcb7 	bl	800f59e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	6839      	ldr	r1, [r7, #0]
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	4798      	blx	r3
        }
        break;
 800ec3e:	e004      	b.n	800ec4a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 fbe0 	bl	800f408 <USBD_CtlError>
        break;
 800ec48:	e000      	b.n	800ec4c <USBD_StdEPReq+0x13c>
        break;
 800ec4a:	bf00      	nop
      }
      break;
 800ec4c:	e0aa      	b.n	800eda4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d002      	beq.n	800ec5e <USBD_StdEPReq+0x14e>
 800ec58:	2b03      	cmp	r3, #3
 800ec5a:	d032      	beq.n	800ecc2 <USBD_StdEPReq+0x1b2>
 800ec5c:	e097      	b.n	800ed8e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec5e:	7bbb      	ldrb	r3, [r7, #14]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d007      	beq.n	800ec74 <USBD_StdEPReq+0x164>
 800ec64:	7bbb      	ldrb	r3, [r7, #14]
 800ec66:	2b80      	cmp	r3, #128	; 0x80
 800ec68:	d004      	beq.n	800ec74 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ec6a:	6839      	ldr	r1, [r7, #0]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 fbcb 	bl	800f408 <USBD_CtlError>
          break;
 800ec72:	e091      	b.n	800ed98 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	da0b      	bge.n	800ec94 <USBD_StdEPReq+0x184>
 800ec7c:	7bbb      	ldrb	r3, [r7, #14]
 800ec7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec82:	4613      	mov	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4413      	add	r3, r2
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	3310      	adds	r3, #16
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	4413      	add	r3, r2
 800ec90:	3304      	adds	r3, #4
 800ec92:	e00b      	b.n	800ecac <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ec94:	7bbb      	ldrb	r3, [r7, #14]
 800ec96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	009b      	lsls	r3, r3, #2
 800ec9e:	4413      	add	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	4413      	add	r3, r2
 800ecaa:	3304      	adds	r3, #4
 800ecac:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 fc15 	bl	800f4ea <USBD_CtlSendData>
        break;
 800ecc0:	e06a      	b.n	800ed98 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ecc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	da11      	bge.n	800ecee <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecca:	7bbb      	ldrb	r3, [r7, #14]
 800eccc:	f003 020f 	and.w	r2, r3, #15
 800ecd0:	6879      	ldr	r1, [r7, #4]
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	440b      	add	r3, r1
 800ecdc:	3324      	adds	r3, #36	; 0x24
 800ecde:	881b      	ldrh	r3, [r3, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d117      	bne.n	800ed14 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ece4:	6839      	ldr	r1, [r7, #0]
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 fb8e 	bl	800f408 <USBD_CtlError>
            break;
 800ecec:	e054      	b.n	800ed98 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ecee:	7bbb      	ldrb	r3, [r7, #14]
 800ecf0:	f003 020f 	and.w	r2, r3, #15
 800ecf4:	6879      	ldr	r1, [r7, #4]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	440b      	add	r3, r1
 800ed00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d104      	bne.n	800ed14 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fb7b 	bl	800f408 <USBD_CtlError>
            break;
 800ed12:	e041      	b.n	800ed98 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	da0b      	bge.n	800ed34 <USBD_StdEPReq+0x224>
 800ed1c:	7bbb      	ldrb	r3, [r7, #14]
 800ed1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed22:	4613      	mov	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	4413      	add	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	3310      	adds	r3, #16
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	4413      	add	r3, r2
 800ed30:	3304      	adds	r3, #4
 800ed32:	e00b      	b.n	800ed4c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ed34:	7bbb      	ldrb	r3, [r7, #14]
 800ed36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	4413      	add	r3, r2
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed4e:	7bbb      	ldrb	r3, [r7, #14]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d002      	beq.n	800ed5a <USBD_StdEPReq+0x24a>
 800ed54:	7bbb      	ldrb	r3, [r7, #14]
 800ed56:	2b80      	cmp	r3, #128	; 0x80
 800ed58:	d103      	bne.n	800ed62 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	601a      	str	r2, [r3, #0]
 800ed60:	e00e      	b.n	800ed80 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed62:	7bbb      	ldrb	r3, [r7, #14]
 800ed64:	4619      	mov	r1, r3
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f001 f8ae 	bl	800fec8 <USBD_LL_IsStallEP>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d003      	beq.n	800ed7a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	2201      	movs	r2, #1
 800ed76:	601a      	str	r2, [r3, #0]
 800ed78:	e002      	b.n	800ed80 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	2202      	movs	r2, #2
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 fbaf 	bl	800f4ea <USBD_CtlSendData>
          break;
 800ed8c:	e004      	b.n	800ed98 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ed8e:	6839      	ldr	r1, [r7, #0]
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fb39 	bl	800f408 <USBD_CtlError>
        break;
 800ed96:	bf00      	nop
      }
      break;
 800ed98:	e004      	b.n	800eda4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fb33 	bl	800f408 <USBD_CtlError>
      break;
 800eda2:	bf00      	nop
    }
    break;
 800eda4:	e004      	b.n	800edb0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800eda6:	6839      	ldr	r1, [r7, #0]
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 fb2d 	bl	800f408 <USBD_CtlError>
    break;
 800edae:	bf00      	nop
  }

  return ret;
 800edb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
	...

0800edbc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800edc6:	2300      	movs	r3, #0
 800edc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800edca:	2300      	movs	r3, #0
 800edcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800edce:	2300      	movs	r3, #0
 800edd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	885b      	ldrh	r3, [r3, #2]
 800edd6:	0a1b      	lsrs	r3, r3, #8
 800edd8:	b29b      	uxth	r3, r3
 800edda:	3b01      	subs	r3, #1
 800eddc:	2b06      	cmp	r3, #6
 800edde:	f200 8128 	bhi.w	800f032 <USBD_GetDescriptor+0x276>
 800ede2:	a201      	add	r2, pc, #4	; (adr r2, 800ede8 <USBD_GetDescriptor+0x2c>)
 800ede4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede8:	0800ee05 	.word	0x0800ee05
 800edec:	0800ee1d 	.word	0x0800ee1d
 800edf0:	0800ee5d 	.word	0x0800ee5d
 800edf4:	0800f033 	.word	0x0800f033
 800edf8:	0800f033 	.word	0x0800f033
 800edfc:	0800efd3 	.word	0x0800efd3
 800ee00:	0800efff 	.word	0x0800efff
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	7c12      	ldrb	r2, [r2, #16]
 800ee10:	f107 0108 	add.w	r1, r7, #8
 800ee14:	4610      	mov	r0, r2
 800ee16:	4798      	blx	r3
 800ee18:	60f8      	str	r0, [r7, #12]
    break;
 800ee1a:	e112      	b.n	800f042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	7c1b      	ldrb	r3, [r3, #16]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10d      	bne.n	800ee40 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2c:	f107 0208 	add.w	r2, r7, #8
 800ee30:	4610      	mov	r0, r2
 800ee32:	4798      	blx	r3
 800ee34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ee3e:	e100      	b.n	800f042 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee48:	f107 0208 	add.w	r2, r7, #8
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	4798      	blx	r3
 800ee50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	3301      	adds	r3, #1
 800ee56:	2202      	movs	r2, #2
 800ee58:	701a      	strb	r2, [r3, #0]
    break;
 800ee5a:	e0f2      	b.n	800f042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	885b      	ldrh	r3, [r3, #2]
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b05      	cmp	r3, #5
 800ee64:	f200 80ac 	bhi.w	800efc0 <USBD_GetDescriptor+0x204>
 800ee68:	a201      	add	r2, pc, #4	; (adr r2, 800ee70 <USBD_GetDescriptor+0xb4>)
 800ee6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6e:	bf00      	nop
 800ee70:	0800ee89 	.word	0x0800ee89
 800ee74:	0800eebd 	.word	0x0800eebd
 800ee78:	0800eef1 	.word	0x0800eef1
 800ee7c:	0800ef25 	.word	0x0800ef25
 800ee80:	0800ef59 	.word	0x0800ef59
 800ee84:	0800ef8d 	.word	0x0800ef8d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00b      	beq.n	800eeac <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	7c12      	ldrb	r2, [r2, #16]
 800eea0:	f107 0108 	add.w	r1, r7, #8
 800eea4:	4610      	mov	r0, r2
 800eea6:	4798      	blx	r3
 800eea8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eeaa:	e091      	b.n	800efd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eeac:	6839      	ldr	r1, [r7, #0]
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 faaa 	bl	800f408 <USBD_CtlError>
        err++;
 800eeb4:	7afb      	ldrb	r3, [r7, #11]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	72fb      	strb	r3, [r7, #11]
      break;
 800eeba:	e089      	b.n	800efd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00b      	beq.n	800eee0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	687a      	ldr	r2, [r7, #4]
 800eed2:	7c12      	ldrb	r2, [r2, #16]
 800eed4:	f107 0108 	add.w	r1, r7, #8
 800eed8:	4610      	mov	r0, r2
 800eeda:	4798      	blx	r3
 800eedc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eede:	e077      	b.n	800efd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eee0:	6839      	ldr	r1, [r7, #0]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fa90 	bl	800f408 <USBD_CtlError>
        err++;
 800eee8:	7afb      	ldrb	r3, [r7, #11]
 800eeea:	3301      	adds	r3, #1
 800eeec:	72fb      	strb	r3, [r7, #11]
      break;
 800eeee:	e06f      	b.n	800efd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00b      	beq.n	800ef14 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	7c12      	ldrb	r2, [r2, #16]
 800ef08:	f107 0108 	add.w	r1, r7, #8
 800ef0c:	4610      	mov	r0, r2
 800ef0e:	4798      	blx	r3
 800ef10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef12:	e05d      	b.n	800efd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ef14:	6839      	ldr	r1, [r7, #0]
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 fa76 	bl	800f408 <USBD_CtlError>
        err++;
 800ef1c:	7afb      	ldrb	r3, [r7, #11]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	72fb      	strb	r3, [r7, #11]
      break;
 800ef22:	e055      	b.n	800efd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef2a:	691b      	ldr	r3, [r3, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00b      	beq.n	800ef48 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	7c12      	ldrb	r2, [r2, #16]
 800ef3c:	f107 0108 	add.w	r1, r7, #8
 800ef40:	4610      	mov	r0, r2
 800ef42:	4798      	blx	r3
 800ef44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef46:	e043      	b.n	800efd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 fa5c 	bl	800f408 <USBD_CtlError>
        err++;
 800ef50:	7afb      	ldrb	r3, [r7, #11]
 800ef52:	3301      	adds	r3, #1
 800ef54:	72fb      	strb	r3, [r7, #11]
      break;
 800ef56:	e03b      	b.n	800efd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef5e:	695b      	ldr	r3, [r3, #20]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00b      	beq.n	800ef7c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	7c12      	ldrb	r2, [r2, #16]
 800ef70:	f107 0108 	add.w	r1, r7, #8
 800ef74:	4610      	mov	r0, r2
 800ef76:	4798      	blx	r3
 800ef78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef7a:	e029      	b.n	800efd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ef7c:	6839      	ldr	r1, [r7, #0]
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f000 fa42 	bl	800f408 <USBD_CtlError>
        err++;
 800ef84:	7afb      	ldrb	r3, [r7, #11]
 800ef86:	3301      	adds	r3, #1
 800ef88:	72fb      	strb	r3, [r7, #11]
      break;
 800ef8a:	e021      	b.n	800efd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00b      	beq.n	800efb0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef9e:	699b      	ldr	r3, [r3, #24]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	7c12      	ldrb	r2, [r2, #16]
 800efa4:	f107 0108 	add.w	r1, r7, #8
 800efa8:	4610      	mov	r0, r2
 800efaa:	4798      	blx	r3
 800efac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800efae:	e00f      	b.n	800efd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800efb0:	6839      	ldr	r1, [r7, #0]
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fa28 	bl	800f408 <USBD_CtlError>
        err++;
 800efb8:	7afb      	ldrb	r3, [r7, #11]
 800efba:	3301      	adds	r3, #1
 800efbc:	72fb      	strb	r3, [r7, #11]
      break;
 800efbe:	e007      	b.n	800efd0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800efc0:	6839      	ldr	r1, [r7, #0]
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 fa20 	bl	800f408 <USBD_CtlError>
      err++;
 800efc8:	7afb      	ldrb	r3, [r7, #11]
 800efca:	3301      	adds	r3, #1
 800efcc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800efce:	bf00      	nop
    }
    break;
 800efd0:	e037      	b.n	800f042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	7c1b      	ldrb	r3, [r3, #16]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d109      	bne.n	800efee <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efe2:	f107 0208 	add.w	r2, r7, #8
 800efe6:	4610      	mov	r0, r2
 800efe8:	4798      	blx	r3
 800efea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800efec:	e029      	b.n	800f042 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800efee:	6839      	ldr	r1, [r7, #0]
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fa09 	bl	800f408 <USBD_CtlError>
      err++;
 800eff6:	7afb      	ldrb	r3, [r7, #11]
 800eff8:	3301      	adds	r3, #1
 800effa:	72fb      	strb	r3, [r7, #11]
    break;
 800effc:	e021      	b.n	800f042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	7c1b      	ldrb	r3, [r3, #16]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d10d      	bne.n	800f022 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00e:	f107 0208 	add.w	r2, r7, #8
 800f012:	4610      	mov	r0, r2
 800f014:	4798      	blx	r3
 800f016:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	3301      	adds	r3, #1
 800f01c:	2207      	movs	r2, #7
 800f01e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f020:	e00f      	b.n	800f042 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f022:	6839      	ldr	r1, [r7, #0]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 f9ef 	bl	800f408 <USBD_CtlError>
      err++;
 800f02a:	7afb      	ldrb	r3, [r7, #11]
 800f02c:	3301      	adds	r3, #1
 800f02e:	72fb      	strb	r3, [r7, #11]
    break;
 800f030:	e007      	b.n	800f042 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f032:	6839      	ldr	r1, [r7, #0]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 f9e7 	bl	800f408 <USBD_CtlError>
    err++;
 800f03a:	7afb      	ldrb	r3, [r7, #11]
 800f03c:	3301      	adds	r3, #1
 800f03e:	72fb      	strb	r3, [r7, #11]
    break;
 800f040:	bf00      	nop
  }

  if (err != 0U)
 800f042:	7afb      	ldrb	r3, [r7, #11]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d11e      	bne.n	800f086 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	88db      	ldrh	r3, [r3, #6]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d016      	beq.n	800f07e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f050:	893b      	ldrh	r3, [r7, #8]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00e      	beq.n	800f074 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	88da      	ldrh	r2, [r3, #6]
 800f05a:	893b      	ldrh	r3, [r7, #8]
 800f05c:	4293      	cmp	r3, r2
 800f05e:	bf28      	it	cs
 800f060:	4613      	movcs	r3, r2
 800f062:	b29b      	uxth	r3, r3
 800f064:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f066:	893b      	ldrh	r3, [r7, #8]
 800f068:	461a      	mov	r2, r3
 800f06a:	68f9      	ldr	r1, [r7, #12]
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 fa3c 	bl	800f4ea <USBD_CtlSendData>
 800f072:	e009      	b.n	800f088 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f074:	6839      	ldr	r1, [r7, #0]
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 f9c6 	bl	800f408 <USBD_CtlError>
 800f07c:	e004      	b.n	800f088 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 fa8d 	bl	800f59e <USBD_CtlSendStatus>
 800f084:	e000      	b.n	800f088 <USBD_GetDescriptor+0x2cc>
    return;
 800f086:	bf00      	nop
    }
  }
}
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop

0800f090 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	889b      	ldrh	r3, [r3, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d130      	bne.n	800f104 <USBD_SetAddress+0x74>
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	88db      	ldrh	r3, [r3, #6]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d12c      	bne.n	800f104 <USBD_SetAddress+0x74>
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	885b      	ldrh	r3, [r3, #2]
 800f0ae:	2b7f      	cmp	r3, #127	; 0x7f
 800f0b0:	d828      	bhi.n	800f104 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	885b      	ldrh	r3, [r3, #2]
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0c4:	2b03      	cmp	r3, #3
 800f0c6:	d104      	bne.n	800f0d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f0c8:	6839      	ldr	r1, [r7, #0]
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 f99c 	bl	800f408 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0d0:	e01c      	b.n	800f10c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	7bfa      	ldrb	r2, [r7, #15]
 800f0d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 ff1e 	bl	800ff20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 fa5a 	bl	800f59e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d004      	beq.n	800f0fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0f8:	e008      	b.n	800f10c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f102:	e003      	b.n	800f10c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f104:	6839      	ldr	r1, [r7, #0]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 f97e 	bl	800f408 <USBD_CtlError>
  }
}
 800f10c:	bf00      	nop
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f11e:	2300      	movs	r3, #0
 800f120:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	885b      	ldrh	r3, [r3, #2]
 800f126:	b2da      	uxtb	r2, r3
 800f128:	4b4b      	ldr	r3, [pc, #300]	; (800f258 <USBD_SetConfig+0x144>)
 800f12a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f12c:	4b4a      	ldr	r3, [pc, #296]	; (800f258 <USBD_SetConfig+0x144>)
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d905      	bls.n	800f140 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f966 	bl	800f408 <USBD_CtlError>
    return USBD_FAIL;
 800f13c:	2303      	movs	r3, #3
 800f13e:	e087      	b.n	800f250 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f146:	2b02      	cmp	r3, #2
 800f148:	d002      	beq.n	800f150 <USBD_SetConfig+0x3c>
 800f14a:	2b03      	cmp	r3, #3
 800f14c:	d025      	beq.n	800f19a <USBD_SetConfig+0x86>
 800f14e:	e071      	b.n	800f234 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f150:	4b41      	ldr	r3, [pc, #260]	; (800f258 <USBD_SetConfig+0x144>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d01c      	beq.n	800f192 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f158:	4b3f      	ldr	r3, [pc, #252]	; (800f258 <USBD_SetConfig+0x144>)
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	461a      	mov	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f162:	4b3d      	ldr	r3, [pc, #244]	; (800f258 <USBD_SetConfig+0x144>)
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7ff f9a7 	bl	800e4bc <USBD_SetClassConfig>
 800f16e:	4603      	mov	r3, r0
 800f170:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f172:	7bfb      	ldrb	r3, [r7, #15]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d004      	beq.n	800f182 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f178:	6839      	ldr	r1, [r7, #0]
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f944 	bl	800f408 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f180:	e065      	b.n	800f24e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 fa0b 	bl	800f59e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2203      	movs	r2, #3
 800f18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f190:	e05d      	b.n	800f24e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 fa03 	bl	800f59e <USBD_CtlSendStatus>
    break;
 800f198:	e059      	b.n	800f24e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f19a:	4b2f      	ldr	r3, [pc, #188]	; (800f258 <USBD_SetConfig+0x144>)
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d112      	bne.n	800f1c8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2202      	movs	r2, #2
 800f1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f1aa:	4b2b      	ldr	r3, [pc, #172]	; (800f258 <USBD_SetConfig+0x144>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f1b4:	4b28      	ldr	r3, [pc, #160]	; (800f258 <USBD_SetConfig+0x144>)
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff f99a 	bl	800e4f4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 f9ec 	bl	800f59e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f1c6:	e042      	b.n	800f24e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f1c8:	4b23      	ldr	r3, [pc, #140]	; (800f258 <USBD_SetConfig+0x144>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d02a      	beq.n	800f22c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	4619      	mov	r1, r3
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f7ff f988 	bl	800e4f4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f1e4:	4b1c      	ldr	r3, [pc, #112]	; (800f258 <USBD_SetConfig+0x144>)
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f1ee:	4b1a      	ldr	r3, [pc, #104]	; (800f258 <USBD_SetConfig+0x144>)
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7ff f961 	bl	800e4bc <USBD_SetClassConfig>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f1fe:	7bfb      	ldrb	r3, [r7, #15]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00f      	beq.n	800f224 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 f8fe 	bl	800f408 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	b2db      	uxtb	r3, r3
 800f212:	4619      	mov	r1, r3
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7ff f96d 	bl	800e4f4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2202      	movs	r2, #2
 800f21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f222:	e014      	b.n	800f24e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 f9ba 	bl	800f59e <USBD_CtlSendStatus>
    break;
 800f22a:	e010      	b.n	800f24e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f9b6 	bl	800f59e <USBD_CtlSendStatus>
    break;
 800f232:	e00c      	b.n	800f24e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f234:	6839      	ldr	r1, [r7, #0]
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 f8e6 	bl	800f408 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f23c:	4b06      	ldr	r3, [pc, #24]	; (800f258 <USBD_SetConfig+0x144>)
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	4619      	mov	r1, r3
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7ff f956 	bl	800e4f4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f248:	2303      	movs	r3, #3
 800f24a:	73fb      	strb	r3, [r7, #15]
    break;
 800f24c:	bf00      	nop
  }

  return ret;
 800f24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	2400020c 	.word	0x2400020c

0800f25c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	88db      	ldrh	r3, [r3, #6]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d004      	beq.n	800f278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f26e:	6839      	ldr	r1, [r7, #0]
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f8c9 	bl	800f408 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f276:	e021      	b.n	800f2bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f27e:	2b01      	cmp	r3, #1
 800f280:	db17      	blt.n	800f2b2 <USBD_GetConfig+0x56>
 800f282:	2b02      	cmp	r3, #2
 800f284:	dd02      	ble.n	800f28c <USBD_GetConfig+0x30>
 800f286:	2b03      	cmp	r3, #3
 800f288:	d00b      	beq.n	800f2a2 <USBD_GetConfig+0x46>
 800f28a:	e012      	b.n	800f2b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	3308      	adds	r3, #8
 800f296:	2201      	movs	r2, #1
 800f298:	4619      	mov	r1, r3
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 f925 	bl	800f4ea <USBD_CtlSendData>
      break;
 800f2a0:	e00c      	b.n	800f2bc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f91d 	bl	800f4ea <USBD_CtlSendData>
      break;
 800f2b0:	e004      	b.n	800f2bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f2b2:	6839      	ldr	r1, [r7, #0]
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f8a7 	bl	800f408 <USBD_CtlError>
      break;
 800f2ba:	bf00      	nop
}
 800f2bc:	bf00      	nop
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	d81e      	bhi.n	800f318 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	88db      	ldrh	r3, [r3, #6]
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d004      	beq.n	800f2ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f2e2:	6839      	ldr	r1, [r7, #0]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f88f 	bl	800f408 <USBD_CtlError>
      break;
 800f2ea:	e01a      	b.n	800f322 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d005      	beq.n	800f308 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	f043 0202 	orr.w	r2, r3, #2
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	330c      	adds	r3, #12
 800f30c:	2202      	movs	r2, #2
 800f30e:	4619      	mov	r1, r3
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 f8ea 	bl	800f4ea <USBD_CtlSendData>
    break;
 800f316:	e004      	b.n	800f322 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 f874 	bl	800f408 <USBD_CtlError>
    break;
 800f320:	bf00      	nop
  }
}
 800f322:	bf00      	nop
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b082      	sub	sp, #8
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
 800f332:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	885b      	ldrh	r3, [r3, #2]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d106      	bne.n	800f34a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 f92a 	bl	800f59e <USBD_CtlSendStatus>
  }
}
 800f34a:	bf00      	nop
 800f34c:	3708      	adds	r7, #8
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f352:	b580      	push	{r7, lr}
 800f354:	b082      	sub	sp, #8
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
 800f35a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f362:	3b01      	subs	r3, #1
 800f364:	2b02      	cmp	r3, #2
 800f366:	d80b      	bhi.n	800f380 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	885b      	ldrh	r3, [r3, #2]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d10c      	bne.n	800f38a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f000 f910 	bl	800f59e <USBD_CtlSendStatus>
      }
      break;
 800f37e:	e004      	b.n	800f38a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f380:	6839      	ldr	r1, [r7, #0]
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f840 	bl	800f408 <USBD_CtlError>
      break;
 800f388:	e000      	b.n	800f38c <USBD_ClrFeature+0x3a>
      break;
 800f38a:	bf00      	nop
  }
}
 800f38c:	bf00      	nop
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	781a      	ldrb	r2, [r3, #0]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	781a      	ldrb	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f7ff fad3 	bl	800e96a <SWAPBYTE>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f7ff fac6 	bl	800e96a <SWAPBYTE>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f7ff fab9 	bl	800e96a <SWAPBYTE>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	80da      	strh	r2, [r3, #6]
}
 800f400:	bf00      	nop
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f412:	2180      	movs	r1, #128	; 0x80
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 fd19 	bl	800fe4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f41a:	2100      	movs	r1, #0
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 fd15 	bl	800fe4c <USBD_LL_StallEP>
}
 800f422:	bf00      	nop
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b086      	sub	sp, #24
 800f42e:	af00      	add	r7, sp, #0
 800f430:	60f8      	str	r0, [r7, #12]
 800f432:	60b9      	str	r1, [r7, #8]
 800f434:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f436:	2300      	movs	r3, #0
 800f438:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d036      	beq.n	800f4ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f444:	6938      	ldr	r0, [r7, #16]
 800f446:	f000 f836 	bl	800f4b6 <USBD_GetLen>
 800f44a:	4603      	mov	r3, r0
 800f44c:	3301      	adds	r3, #1
 800f44e:	b29b      	uxth	r3, r3
 800f450:	005b      	lsls	r3, r3, #1
 800f452:	b29a      	uxth	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f458:	7dfb      	ldrb	r3, [r7, #23]
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	4413      	add	r3, r2
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	7812      	ldrb	r2, [r2, #0]
 800f462:	701a      	strb	r2, [r3, #0]
  idx++;
 800f464:	7dfb      	ldrb	r3, [r7, #23]
 800f466:	3301      	adds	r3, #1
 800f468:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	4413      	add	r3, r2
 800f470:	2203      	movs	r2, #3
 800f472:	701a      	strb	r2, [r3, #0]
  idx++;
 800f474:	7dfb      	ldrb	r3, [r7, #23]
 800f476:	3301      	adds	r3, #1
 800f478:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f47a:	e013      	b.n	800f4a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f47c:	7dfb      	ldrb	r3, [r7, #23]
 800f47e:	68ba      	ldr	r2, [r7, #8]
 800f480:	4413      	add	r3, r2
 800f482:	693a      	ldr	r2, [r7, #16]
 800f484:	7812      	ldrb	r2, [r2, #0]
 800f486:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	3301      	adds	r3, #1
 800f48c:	613b      	str	r3, [r7, #16]
    idx++;
 800f48e:	7dfb      	ldrb	r3, [r7, #23]
 800f490:	3301      	adds	r3, #1
 800f492:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f494:	7dfb      	ldrb	r3, [r7, #23]
 800f496:	68ba      	ldr	r2, [r7, #8]
 800f498:	4413      	add	r3, r2
 800f49a:	2200      	movs	r2, #0
 800f49c:	701a      	strb	r2, [r3, #0]
    idx++;
 800f49e:	7dfb      	ldrb	r3, [r7, #23]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1e7      	bne.n	800f47c <USBD_GetString+0x52>
 800f4ac:	e000      	b.n	800f4b0 <USBD_GetString+0x86>
    return;
 800f4ae:	bf00      	nop
  }
}
 800f4b0:	3718      	adds	r7, #24
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}

0800f4b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f4b6:	b480      	push	{r7}
 800f4b8:	b085      	sub	sp, #20
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f4c6:	e005      	b.n	800f4d4 <USBD_GetLen+0x1e>
  {
    len++;
 800f4c8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1f5      	bne.n	800f4c8 <USBD_GetLen+0x12>
  }

  return len;
 800f4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3714      	adds	r7, #20
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr

0800f4ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b084      	sub	sp, #16
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	60f8      	str	r0, [r7, #12]
 800f4f2:	60b9      	str	r1, [r7, #8]
 800f4f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2202      	movs	r2, #2
 800f4fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	2100      	movs	r1, #0
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f000 fd24 	bl	800ff5e <USBD_LL_Transmit>

  return USBD_OK;
 800f516:	2300      	movs	r3, #0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	68ba      	ldr	r2, [r7, #8]
 800f530:	2100      	movs	r1, #0
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	f000 fd13 	bl	800ff5e <USBD_LL_Transmit>

  return USBD_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b084      	sub	sp, #16
 800f546:	af00      	add	r7, sp, #0
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	60b9      	str	r1, [r7, #8]
 800f54c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2203      	movs	r2, #3
 800f552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	2100      	movs	r1, #0
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f000 fd17 	bl	800ffa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	2100      	movs	r1, #0
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f000 fd06 	bl	800ffa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b082      	sub	sp, #8
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2204      	movs	r2, #4
 800f5aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 fcd2 	bl	800ff5e <USBD_LL_Transmit>

  return USBD_OK;
 800f5ba:	2300      	movs	r3, #0
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2205      	movs	r2, #5
 800f5d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	2100      	movs	r1, #0
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 fce0 	bl	800ffa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5e0:	2300      	movs	r3, #0
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3708      	adds	r7, #8
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
	...

0800f5ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b087      	sub	sp, #28
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f5fe:	2300      	movs	r3, #0
 800f600:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f602:	4b1f      	ldr	r3, [pc, #124]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f604:	7a5b      	ldrb	r3, [r3, #9]
 800f606:	b2db      	uxtb	r3, r3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d131      	bne.n	800f670 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f60c:	4b1c      	ldr	r3, [pc, #112]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f60e:	7a5b      	ldrb	r3, [r3, #9]
 800f610:	b2db      	uxtb	r3, r3
 800f612:	461a      	mov	r2, r3
 800f614:	4b1a      	ldr	r3, [pc, #104]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f616:	2100      	movs	r1, #0
 800f618:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f61a:	4b19      	ldr	r3, [pc, #100]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f61c:	7a5b      	ldrb	r3, [r3, #9]
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	4a17      	ldr	r2, [pc, #92]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	4413      	add	r3, r2
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f62a:	4b15      	ldr	r3, [pc, #84]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f62c:	7a5b      	ldrb	r3, [r3, #9]
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	461a      	mov	r2, r3
 800f632:	4b13      	ldr	r3, [pc, #76]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f634:	4413      	add	r3, r2
 800f636:	79fa      	ldrb	r2, [r7, #7]
 800f638:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f63a:	4b11      	ldr	r3, [pc, #68]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f63c:	7a5b      	ldrb	r3, [r3, #9]
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	1c5a      	adds	r2, r3, #1
 800f642:	b2d1      	uxtb	r1, r2
 800f644:	4a0e      	ldr	r2, [pc, #56]	; (800f680 <FATFS_LinkDriverEx+0x94>)
 800f646:	7251      	strb	r1, [r2, #9]
 800f648:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f64a:	7dbb      	ldrb	r3, [r7, #22]
 800f64c:	3330      	adds	r3, #48	; 0x30
 800f64e:	b2da      	uxtb	r2, r3
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	3301      	adds	r3, #1
 800f658:	223a      	movs	r2, #58	; 0x3a
 800f65a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	3302      	adds	r3, #2
 800f660:	222f      	movs	r2, #47	; 0x2f
 800f662:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	3303      	adds	r3, #3
 800f668:	2200      	movs	r2, #0
 800f66a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f66c:	2300      	movs	r3, #0
 800f66e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f670:	7dfb      	ldrb	r3, [r7, #23]
}
 800f672:	4618      	mov	r0, r3
 800f674:	371c      	adds	r7, #28
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	24000210 	.word	0x24000210

0800f684 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f68e:	2200      	movs	r2, #0
 800f690:	6839      	ldr	r1, [r7, #0]
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f7ff ffaa 	bl	800f5ec <FATFS_LinkDriverEx>
 800f698:	4603      	mov	r3, r0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3708      	adds	r7, #8
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
	...

0800f6a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	4913      	ldr	r1, [pc, #76]	; (800f6f8 <MX_USB_DEVICE_Init+0x54>)
 800f6ac:	4813      	ldr	r0, [pc, #76]	; (800f6fc <MX_USB_DEVICE_Init+0x58>)
 800f6ae:	f7fe fe97 	bl	800e3e0 <USBD_Init>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d001      	beq.n	800f6bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f6b8:	f7f1 fda8 	bl	800120c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f6bc:	4910      	ldr	r1, [pc, #64]	; (800f700 <MX_USB_DEVICE_Init+0x5c>)
 800f6be:	480f      	ldr	r0, [pc, #60]	; (800f6fc <MX_USB_DEVICE_Init+0x58>)
 800f6c0:	f7fe fec4 	bl	800e44c <USBD_RegisterClass>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d001      	beq.n	800f6ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f6ca:	f7f1 fd9f 	bl	800120c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f6ce:	490d      	ldr	r1, [pc, #52]	; (800f704 <MX_USB_DEVICE_Init+0x60>)
 800f6d0:	480a      	ldr	r0, [pc, #40]	; (800f6fc <MX_USB_DEVICE_Init+0x58>)
 800f6d2:	f7fe fe19 	bl	800e308 <USBD_CDC_RegisterInterface>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f6dc:	f7f1 fd96 	bl	800120c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f6e0:	4806      	ldr	r0, [pc, #24]	; (800f6fc <MX_USB_DEVICE_Init+0x58>)
 800f6e2:	f7fe fed4 	bl	800e48e <USBD_Start>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d001      	beq.n	800f6f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f6ec:	f7f1 fd8e 	bl	800120c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f6f0:	f7f6 fb46 	bl	8005d80 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f6f4:	bf00      	nop
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	24000134 	.word	0x24000134
 800f6fc:	24000ab0 	.word	0x24000ab0
 800f700:	2400001c 	.word	0x2400001c
 800f704:	24000120 	.word	0x24000120

0800f708 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f70c:	2200      	movs	r2, #0
 800f70e:	4905      	ldr	r1, [pc, #20]	; (800f724 <CDC_Init_FS+0x1c>)
 800f710:	4805      	ldr	r0, [pc, #20]	; (800f728 <CDC_Init_FS+0x20>)
 800f712:	f7fe fe0e 	bl	800e332 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f716:	4905      	ldr	r1, [pc, #20]	; (800f72c <CDC_Init_FS+0x24>)
 800f718:	4803      	ldr	r0, [pc, #12]	; (800f728 <CDC_Init_FS+0x20>)
 800f71a:	f7fe fe23 	bl	800e364 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f71e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f720:	4618      	mov	r0, r3
 800f722:	bd80      	pop	{r7, pc}
 800f724:	24001580 	.word	0x24001580
 800f728:	24000ab0 	.word	0x24000ab0
 800f72c:	24000d80 	.word	0x24000d80

0800f730 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f730:	b480      	push	{r7}
 800f732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f734:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f736:	4618      	mov	r0, r3
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	4603      	mov	r3, r0
 800f748:	6039      	str	r1, [r7, #0]
 800f74a:	71fb      	strb	r3, [r7, #7]
 800f74c:	4613      	mov	r3, r2
 800f74e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f750:	79fb      	ldrb	r3, [r7, #7]
 800f752:	2b23      	cmp	r3, #35	; 0x23
 800f754:	d84a      	bhi.n	800f7ec <CDC_Control_FS+0xac>
 800f756:	a201      	add	r2, pc, #4	; (adr r2, 800f75c <CDC_Control_FS+0x1c>)
 800f758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f75c:	0800f7ed 	.word	0x0800f7ed
 800f760:	0800f7ed 	.word	0x0800f7ed
 800f764:	0800f7ed 	.word	0x0800f7ed
 800f768:	0800f7ed 	.word	0x0800f7ed
 800f76c:	0800f7ed 	.word	0x0800f7ed
 800f770:	0800f7ed 	.word	0x0800f7ed
 800f774:	0800f7ed 	.word	0x0800f7ed
 800f778:	0800f7ed 	.word	0x0800f7ed
 800f77c:	0800f7ed 	.word	0x0800f7ed
 800f780:	0800f7ed 	.word	0x0800f7ed
 800f784:	0800f7ed 	.word	0x0800f7ed
 800f788:	0800f7ed 	.word	0x0800f7ed
 800f78c:	0800f7ed 	.word	0x0800f7ed
 800f790:	0800f7ed 	.word	0x0800f7ed
 800f794:	0800f7ed 	.word	0x0800f7ed
 800f798:	0800f7ed 	.word	0x0800f7ed
 800f79c:	0800f7ed 	.word	0x0800f7ed
 800f7a0:	0800f7ed 	.word	0x0800f7ed
 800f7a4:	0800f7ed 	.word	0x0800f7ed
 800f7a8:	0800f7ed 	.word	0x0800f7ed
 800f7ac:	0800f7ed 	.word	0x0800f7ed
 800f7b0:	0800f7ed 	.word	0x0800f7ed
 800f7b4:	0800f7ed 	.word	0x0800f7ed
 800f7b8:	0800f7ed 	.word	0x0800f7ed
 800f7bc:	0800f7ed 	.word	0x0800f7ed
 800f7c0:	0800f7ed 	.word	0x0800f7ed
 800f7c4:	0800f7ed 	.word	0x0800f7ed
 800f7c8:	0800f7ed 	.word	0x0800f7ed
 800f7cc:	0800f7ed 	.word	0x0800f7ed
 800f7d0:	0800f7ed 	.word	0x0800f7ed
 800f7d4:	0800f7ed 	.word	0x0800f7ed
 800f7d8:	0800f7ed 	.word	0x0800f7ed
 800f7dc:	0800f7ed 	.word	0x0800f7ed
 800f7e0:	0800f7ed 	.word	0x0800f7ed
 800f7e4:	0800f7ed 	.word	0x0800f7ed
 800f7e8:	0800f7ed 	.word	0x0800f7ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f7ec:	bf00      	nop
  }

  return (USBD_OK);
 800f7ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f806:	6879      	ldr	r1, [r7, #4]
 800f808:	4805      	ldr	r0, [pc, #20]	; (800f820 <CDC_Receive_FS+0x24>)
 800f80a:	f7fe fdab 	bl	800e364 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f80e:	4804      	ldr	r0, [pc, #16]	; (800f820 <CDC_Receive_FS+0x24>)
 800f810:	f7fe fdbc 	bl	800e38c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f814:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f816:	4618      	mov	r0, r3
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	24000ab0 	.word	0x24000ab0

0800f824 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	4613      	mov	r3, r2
 800f830:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f832:	2300      	movs	r3, #0
 800f834:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	371c      	adds	r7, #28
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr
	...

0800f848 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	4603      	mov	r3, r0
 800f850:	6039      	str	r1, [r7, #0]
 800f852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	2212      	movs	r2, #18
 800f858:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f85a:	4b03      	ldr	r3, [pc, #12]	; (800f868 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr
 800f868:	24000150 	.word	0x24000150

0800f86c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	4603      	mov	r3, r0
 800f874:	6039      	str	r1, [r7, #0]
 800f876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	2204      	movs	r2, #4
 800f87c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f87e:	4b03      	ldr	r3, [pc, #12]	; (800f88c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f880:	4618      	mov	r0, r3
 800f882:	370c      	adds	r7, #12
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr
 800f88c:	24000164 	.word	0x24000164

0800f890 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	4603      	mov	r3, r0
 800f898:	6039      	str	r1, [r7, #0]
 800f89a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d105      	bne.n	800f8ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f8a2:	683a      	ldr	r2, [r7, #0]
 800f8a4:	4907      	ldr	r1, [pc, #28]	; (800f8c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f8a6:	4808      	ldr	r0, [pc, #32]	; (800f8c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f8a8:	f7ff fdbf 	bl	800f42a <USBD_GetString>
 800f8ac:	e004      	b.n	800f8b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	4904      	ldr	r1, [pc, #16]	; (800f8c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f8b2:	4805      	ldr	r0, [pc, #20]	; (800f8c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f8b4:	f7ff fdb9 	bl	800f42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8b8:	4b02      	ldr	r3, [pc, #8]	; (800f8c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3708      	adds	r7, #8
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	24001d80 	.word	0x24001d80
 800f8c8:	080113f8 	.word	0x080113f8

0800f8cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	6039      	str	r1, [r7, #0]
 800f8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f8d8:	683a      	ldr	r2, [r7, #0]
 800f8da:	4904      	ldr	r1, [pc, #16]	; (800f8ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f8dc:	4804      	ldr	r0, [pc, #16]	; (800f8f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f8de:	f7ff fda4 	bl	800f42a <USBD_GetString>
  return USBD_StrDesc;
 800f8e2:	4b02      	ldr	r3, [pc, #8]	; (800f8ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3708      	adds	r7, #8
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	24001d80 	.word	0x24001d80
 800f8f0:	08011410 	.word	0x08011410

0800f8f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	6039      	str	r1, [r7, #0]
 800f8fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	221a      	movs	r2, #26
 800f904:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f906:	f000 f843 	bl	800f990 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f90a:	4b02      	ldr	r3, [pc, #8]	; (800f914 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	24000168 	.word	0x24000168

0800f918 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	4603      	mov	r3, r0
 800f920:	6039      	str	r1, [r7, #0]
 800f922:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f924:	79fb      	ldrb	r3, [r7, #7]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d105      	bne.n	800f936 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f92a:	683a      	ldr	r2, [r7, #0]
 800f92c:	4907      	ldr	r1, [pc, #28]	; (800f94c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f92e:	4808      	ldr	r0, [pc, #32]	; (800f950 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f930:	f7ff fd7b 	bl	800f42a <USBD_GetString>
 800f934:	e004      	b.n	800f940 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f936:	683a      	ldr	r2, [r7, #0]
 800f938:	4904      	ldr	r1, [pc, #16]	; (800f94c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f93a:	4805      	ldr	r0, [pc, #20]	; (800f950 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f93c:	f7ff fd75 	bl	800f42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f940:	4b02      	ldr	r3, [pc, #8]	; (800f94c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f942:	4618      	mov	r0, r3
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	24001d80 	.word	0x24001d80
 800f950:	08011424 	.word	0x08011424

0800f954 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	4603      	mov	r3, r0
 800f95c:	6039      	str	r1, [r7, #0]
 800f95e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f960:	79fb      	ldrb	r3, [r7, #7]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d105      	bne.n	800f972 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f966:	683a      	ldr	r2, [r7, #0]
 800f968:	4907      	ldr	r1, [pc, #28]	; (800f988 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f96a:	4808      	ldr	r0, [pc, #32]	; (800f98c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f96c:	f7ff fd5d 	bl	800f42a <USBD_GetString>
 800f970:	e004      	b.n	800f97c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f972:	683a      	ldr	r2, [r7, #0]
 800f974:	4904      	ldr	r1, [pc, #16]	; (800f988 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f976:	4805      	ldr	r0, [pc, #20]	; (800f98c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f978:	f7ff fd57 	bl	800f42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f97c:	4b02      	ldr	r3, [pc, #8]	; (800f988 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	24001d80 	.word	0x24001d80
 800f98c:	08011430 	.word	0x08011430

0800f990 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f996:	4b0f      	ldr	r3, [pc, #60]	; (800f9d4 <Get_SerialNum+0x44>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f99c:	4b0e      	ldr	r3, [pc, #56]	; (800f9d8 <Get_SerialNum+0x48>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f9a2:	4b0e      	ldr	r3, [pc, #56]	; (800f9dc <Get_SerialNum+0x4c>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d009      	beq.n	800f9ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f9b6:	2208      	movs	r2, #8
 800f9b8:	4909      	ldr	r1, [pc, #36]	; (800f9e0 <Get_SerialNum+0x50>)
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f000 f814 	bl	800f9e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f9c0:	2204      	movs	r2, #4
 800f9c2:	4908      	ldr	r1, [pc, #32]	; (800f9e4 <Get_SerialNum+0x54>)
 800f9c4:	68b8      	ldr	r0, [r7, #8]
 800f9c6:	f000 f80f 	bl	800f9e8 <IntToUnicode>
  }
}
 800f9ca:	bf00      	nop
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	1ff1e800 	.word	0x1ff1e800
 800f9d8:	1ff1e804 	.word	0x1ff1e804
 800f9dc:	1ff1e808 	.word	0x1ff1e808
 800f9e0:	2400016a 	.word	0x2400016a
 800f9e4:	2400017a 	.word	0x2400017a

0800f9e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	75fb      	strb	r3, [r7, #23]
 800f9fe:	e027      	b.n	800fa50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	0f1b      	lsrs	r3, r3, #28
 800fa04:	2b09      	cmp	r3, #9
 800fa06:	d80b      	bhi.n	800fa20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	0f1b      	lsrs	r3, r3, #28
 800fa0c:	b2da      	uxtb	r2, r3
 800fa0e:	7dfb      	ldrb	r3, [r7, #23]
 800fa10:	005b      	lsls	r3, r3, #1
 800fa12:	4619      	mov	r1, r3
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	440b      	add	r3, r1
 800fa18:	3230      	adds	r2, #48	; 0x30
 800fa1a:	b2d2      	uxtb	r2, r2
 800fa1c:	701a      	strb	r2, [r3, #0]
 800fa1e:	e00a      	b.n	800fa36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	0f1b      	lsrs	r3, r3, #28
 800fa24:	b2da      	uxtb	r2, r3
 800fa26:	7dfb      	ldrb	r3, [r7, #23]
 800fa28:	005b      	lsls	r3, r3, #1
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	440b      	add	r3, r1
 800fa30:	3237      	adds	r2, #55	; 0x37
 800fa32:	b2d2      	uxtb	r2, r2
 800fa34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	011b      	lsls	r3, r3, #4
 800fa3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fa3c:	7dfb      	ldrb	r3, [r7, #23]
 800fa3e:	005b      	lsls	r3, r3, #1
 800fa40:	3301      	adds	r3, #1
 800fa42:	68ba      	ldr	r2, [r7, #8]
 800fa44:	4413      	add	r3, r2
 800fa46:	2200      	movs	r2, #0
 800fa48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	75fb      	strb	r3, [r7, #23]
 800fa50:	7dfa      	ldrb	r2, [r7, #23]
 800fa52:	79fb      	ldrb	r3, [r7, #7]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d3d3      	bcc.n	800fa00 <IntToUnicode+0x18>
  }
}
 800fa58:	bf00      	nop
 800fa5a:	371c      	adds	r7, #28
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b08a      	sub	sp, #40	; 0x28
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa6c:	f107 0314 	add.w	r3, r7, #20
 800fa70:	2200      	movs	r2, #0
 800fa72:	601a      	str	r2, [r3, #0]
 800fa74:	605a      	str	r2, [r3, #4]
 800fa76:	609a      	str	r2, [r3, #8]
 800fa78:	60da      	str	r2, [r3, #12]
 800fa7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a1e      	ldr	r2, [pc, #120]	; (800fafc <HAL_PCD_MspInit+0x98>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d136      	bne.n	800faf4 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa86:	4b1e      	ldr	r3, [pc, #120]	; (800fb00 <HAL_PCD_MspInit+0x9c>)
 800fa88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa8c:	4a1c      	ldr	r2, [pc, #112]	; (800fb00 <HAL_PCD_MspInit+0x9c>)
 800fa8e:	f043 0301 	orr.w	r3, r3, #1
 800fa92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fa96:	4b1a      	ldr	r3, [pc, #104]	; (800fb00 <HAL_PCD_MspInit+0x9c>)
 800fa98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa9c:	f003 0301 	and.w	r3, r3, #1
 800faa0:	613b      	str	r3, [r7, #16]
 800faa2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800faa4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800faa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800faaa:	2302      	movs	r3, #2
 800faac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800faae:	2300      	movs	r3, #0
 800fab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fab2:	2300      	movs	r3, #0
 800fab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fab6:	230a      	movs	r3, #10
 800fab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800faba:	f107 0314 	add.w	r3, r7, #20
 800fabe:	4619      	mov	r1, r3
 800fac0:	4810      	ldr	r0, [pc, #64]	; (800fb04 <HAL_PCD_MspInit+0xa0>)
 800fac2:	f7f4 fd4b 	bl	800455c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fac6:	4b0e      	ldr	r3, [pc, #56]	; (800fb00 <HAL_PCD_MspInit+0x9c>)
 800fac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800facc:	4a0c      	ldr	r2, [pc, #48]	; (800fb00 <HAL_PCD_MspInit+0x9c>)
 800face:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fad2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fad6:	4b0a      	ldr	r3, [pc, #40]	; (800fb00 <HAL_PCD_MspInit+0x9c>)
 800fad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fadc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fae0:	60fb      	str	r3, [r7, #12]
 800fae2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fae4:	2200      	movs	r2, #0
 800fae6:	2100      	movs	r1, #0
 800fae8:	2065      	movs	r0, #101	; 0x65
 800faea:	f7f2 f8c2 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800faee:	2065      	movs	r0, #101	; 0x65
 800faf0:	f7f2 f8d9 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800faf4:	bf00      	nop
 800faf6:	3728      	adds	r7, #40	; 0x28
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	40080000 	.word	0x40080000
 800fb00:	58024400 	.word	0x58024400
 800fb04:	58020000 	.word	0x58020000

0800fb08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	4610      	mov	r0, r2
 800fb20:	f7fe fd00 	bl	800e524 <USBD_LL_SetupStage>
}
 800fb24:	bf00      	nop
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	460b      	mov	r3, r1
 800fb36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fb3e:	78fa      	ldrb	r2, [r7, #3]
 800fb40:	6879      	ldr	r1, [r7, #4]
 800fb42:	4613      	mov	r3, r2
 800fb44:	00db      	lsls	r3, r3, #3
 800fb46:	1a9b      	subs	r3, r3, r2
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	440b      	add	r3, r1
 800fb4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	78fb      	ldrb	r3, [r7, #3]
 800fb54:	4619      	mov	r1, r3
 800fb56:	f7fe fd38 	bl	800e5ca <USBD_LL_DataOutStage>
}
 800fb5a:	bf00      	nop
 800fb5c:	3708      	adds	r7, #8
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b082      	sub	sp, #8
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fb74:	78fa      	ldrb	r2, [r7, #3]
 800fb76:	6879      	ldr	r1, [r7, #4]
 800fb78:	4613      	mov	r3, r2
 800fb7a:	00db      	lsls	r3, r3, #3
 800fb7c:	1a9b      	subs	r3, r3, r2
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	440b      	add	r3, r1
 800fb82:	3348      	adds	r3, #72	; 0x48
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	78fb      	ldrb	r3, [r7, #3]
 800fb88:	4619      	mov	r1, r3
 800fb8a:	f7fe fd81 	bl	800e690 <USBD_LL_DataInStage>
}
 800fb8e:	bf00      	nop
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b082      	sub	sp, #8
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fe fe85 	bl	800e8b4 <USBD_LL_SOF>
}
 800fbaa:	bf00      	nop
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b084      	sub	sp, #16
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d102      	bne.n	800fbcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	73fb      	strb	r3, [r7, #15]
 800fbca:	e008      	b.n	800fbde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	2b02      	cmp	r3, #2
 800fbd2:	d102      	bne.n	800fbda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	73fb      	strb	r3, [r7, #15]
 800fbd8:	e001      	b.n	800fbde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fbda:	f7f1 fb17 	bl	800120c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fbe4:	7bfa      	ldrb	r2, [r7, #15]
 800fbe6:	4611      	mov	r1, r2
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7fe fe28 	bl	800e83e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe fde1 	bl	800e7bc <USBD_LL_Reset>
}
 800fbfa:	bf00      	nop
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
	...

0800fc04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fe fe23 	bl	800e85e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	6812      	ldr	r2, [r2, #0]
 800fc26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc2a:	f043 0301 	orr.w	r3, r3, #1
 800fc2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6a1b      	ldr	r3, [r3, #32]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d005      	beq.n	800fc44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc38:	4b04      	ldr	r3, [pc, #16]	; (800fc4c <HAL_PCD_SuspendCallback+0x48>)
 800fc3a:	691b      	ldr	r3, [r3, #16]
 800fc3c:	4a03      	ldr	r2, [pc, #12]	; (800fc4c <HAL_PCD_SuspendCallback+0x48>)
 800fc3e:	f043 0306 	orr.w	r3, r3, #6
 800fc42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fc44:	bf00      	nop
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	e000ed00 	.word	0xe000ed00

0800fc50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fe fe12 	bl	800e888 <USBD_LL_Resume>
}
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	460b      	mov	r3, r1
 800fc76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc7e:	78fa      	ldrb	r2, [r7, #3]
 800fc80:	4611      	mov	r1, r2
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fe fe3d 	bl	800e902 <USBD_LL_IsoOUTIncomplete>
}
 800fc88:	bf00      	nop
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fca2:	78fa      	ldrb	r2, [r7, #3]
 800fca4:	4611      	mov	r1, r2
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fe fe1e 	bl	800e8e8 <USBD_LL_IsoINIncomplete>
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe fe2a 	bl	800e91c <USBD_LL_DevConnected>
}
 800fcc8:	bf00      	nop
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe fe27 	bl	800e932 <USBD_LL_DevDisconnected>
}
 800fce4:	bf00      	nop
 800fce6:	3708      	adds	r7, #8
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d13e      	bne.n	800fd7a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fcfc:	4a21      	ldr	r2, [pc, #132]	; (800fd84 <USBD_LL_Init+0x98>)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4a1f      	ldr	r2, [pc, #124]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd0c:	4b1d      	ldr	r3, [pc, #116]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd0e:	4a1e      	ldr	r2, [pc, #120]	; (800fd88 <USBD_LL_Init+0x9c>)
 800fd10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fd12:	4b1c      	ldr	r3, [pc, #112]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd14:	2209      	movs	r2, #9
 800fd16:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fd18:	4b1a      	ldr	r3, [pc, #104]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd1a:	2202      	movs	r2, #2
 800fd1c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd1e:	4b19      	ldr	r3, [pc, #100]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd20:	2200      	movs	r2, #0
 800fd22:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fd24:	4b17      	ldr	r3, [pc, #92]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd26:	2202      	movs	r2, #2
 800fd28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd2a:	4b16      	ldr	r3, [pc, #88]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fd30:	4b14      	ldr	r3, [pc, #80]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd32:	2200      	movs	r2, #0
 800fd34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fd36:	4b13      	ldr	r3, [pc, #76]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fd3c:	4b11      	ldr	r3, [pc, #68]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fd42:	4b10      	ldr	r3, [pc, #64]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fd48:	4b0e      	ldr	r3, [pc, #56]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd4e:	480d      	ldr	r0, [pc, #52]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd50:	f7f4 fe00 	bl	8004954 <HAL_PCD_Init>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d001      	beq.n	800fd5e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fd5a:	f7f1 fa57 	bl	800120c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd5e:	2180      	movs	r1, #128	; 0x80
 800fd60:	4808      	ldr	r0, [pc, #32]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd62:	f7f5 ff92 	bl	8005c8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fd66:	2240      	movs	r2, #64	; 0x40
 800fd68:	2100      	movs	r1, #0
 800fd6a:	4806      	ldr	r0, [pc, #24]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd6c:	f7f5 ff46 	bl	8005bfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fd70:	2280      	movs	r2, #128	; 0x80
 800fd72:	2101      	movs	r1, #1
 800fd74:	4803      	ldr	r0, [pc, #12]	; (800fd84 <USBD_LL_Init+0x98>)
 800fd76:	f7f5 ff41 	bl	8005bfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fd7a:	2300      	movs	r3, #0
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	24001f80 	.word	0x24001f80
 800fd88:	40080000 	.word	0x40080000

0800fd8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd94:	2300      	movs	r3, #0
 800fd96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7f4 fefa 	bl	8004b9c <HAL_PCD_Start>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f000 f92a 	bl	8010008 <USBD_Get_USB_Status>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3710      	adds	r7, #16
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}

0800fdc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b084      	sub	sp, #16
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
 800fdca:	4608      	mov	r0, r1
 800fdcc:	4611      	mov	r1, r2
 800fdce:	461a      	mov	r2, r3
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	70fb      	strb	r3, [r7, #3]
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	70bb      	strb	r3, [r7, #2]
 800fdd8:	4613      	mov	r3, r2
 800fdda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fddc:	2300      	movs	r3, #0
 800fdde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fde0:	2300      	movs	r3, #0
 800fde2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fdea:	78bb      	ldrb	r3, [r7, #2]
 800fdec:	883a      	ldrh	r2, [r7, #0]
 800fdee:	78f9      	ldrb	r1, [r7, #3]
 800fdf0:	f7f5 fb0b 	bl	800540a <HAL_PCD_EP_Open>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f000 f904 	bl	8010008 <USBD_Get_USB_Status>
 800fe00:	4603      	mov	r3, r0
 800fe02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe04:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b084      	sub	sp, #16
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
 800fe16:	460b      	mov	r3, r1
 800fe18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe28:	78fa      	ldrb	r2, [r7, #3]
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7f5 fb54 	bl	80054da <HAL_PCD_EP_Close>
 800fe32:	4603      	mov	r3, r0
 800fe34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe36:	7bfb      	ldrb	r3, [r7, #15]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f000 f8e5 	bl	8010008 <USBD_Get_USB_Status>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe42:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3710      	adds	r7, #16
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	460b      	mov	r3, r1
 800fe56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe66:	78fa      	ldrb	r2, [r7, #3]
 800fe68:	4611      	mov	r1, r2
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7f5 fc2c 	bl	80056c8 <HAL_PCD_EP_SetStall>
 800fe70:	4603      	mov	r3, r0
 800fe72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe74:	7bfb      	ldrb	r3, [r7, #15]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f000 f8c6 	bl	8010008 <USBD_Get_USB_Status>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe80:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b084      	sub	sp, #16
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
 800fe92:	460b      	mov	r3, r1
 800fe94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe96:	2300      	movs	r3, #0
 800fe98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fea4:	78fa      	ldrb	r2, [r7, #3]
 800fea6:	4611      	mov	r1, r2
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7f5 fc71 	bl	8005790 <HAL_PCD_EP_ClrStall>
 800feae:	4603      	mov	r3, r0
 800feb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feb2:	7bfb      	ldrb	r3, [r7, #15]
 800feb4:	4618      	mov	r0, r3
 800feb6:	f000 f8a7 	bl	8010008 <USBD_Get_USB_Status>
 800feba:	4603      	mov	r3, r0
 800febc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800febe:	7bbb      	ldrb	r3, [r7, #14]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	460b      	mov	r3, r1
 800fed2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800feda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fedc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	da0b      	bge.n	800fefc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fee4:	78fb      	ldrb	r3, [r7, #3]
 800fee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800feea:	68f9      	ldr	r1, [r7, #12]
 800feec:	4613      	mov	r3, r2
 800feee:	00db      	lsls	r3, r3, #3
 800fef0:	1a9b      	subs	r3, r3, r2
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	440b      	add	r3, r1
 800fef6:	333e      	adds	r3, #62	; 0x3e
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	e00b      	b.n	800ff14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fefc:	78fb      	ldrb	r3, [r7, #3]
 800fefe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff02:	68f9      	ldr	r1, [r7, #12]
 800ff04:	4613      	mov	r3, r2
 800ff06:	00db      	lsls	r3, r3, #3
 800ff08:	1a9b      	subs	r3, r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	440b      	add	r3, r1
 800ff0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	460b      	mov	r3, r1
 800ff2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff30:	2300      	movs	r3, #0
 800ff32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff3a:	78fa      	ldrb	r2, [r7, #3]
 800ff3c:	4611      	mov	r1, r2
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f5 fa3e 	bl	80053c0 <HAL_PCD_SetAddress>
 800ff44:	4603      	mov	r3, r0
 800ff46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff48:	7bfb      	ldrb	r3, [r7, #15]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f000 f85c 	bl	8010008 <USBD_Get_USB_Status>
 800ff50:	4603      	mov	r3, r0
 800ff52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b086      	sub	sp, #24
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	60f8      	str	r0, [r7, #12]
 800ff66:	607a      	str	r2, [r7, #4]
 800ff68:	603b      	str	r3, [r7, #0]
 800ff6a:	460b      	mov	r3, r1
 800ff6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff72:	2300      	movs	r3, #0
 800ff74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff7c:	7af9      	ldrb	r1, [r7, #11]
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	f7f5 fb57 	bl	8005634 <HAL_PCD_EP_Transmit>
 800ff86:	4603      	mov	r3, r0
 800ff88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff8a:	7dfb      	ldrb	r3, [r7, #23]
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f000 f83b 	bl	8010008 <USBD_Get_USB_Status>
 800ff92:	4603      	mov	r3, r0
 800ff94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff96:	7dbb      	ldrb	r3, [r7, #22]
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3718      	adds	r7, #24
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	607a      	str	r2, [r7, #4]
 800ffaa:	603b      	str	r3, [r7, #0]
 800ffac:	460b      	mov	r3, r1
 800ffae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ffbe:	7af9      	ldrb	r1, [r7, #11]
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	f7f5 fad3 	bl	800556e <HAL_PCD_EP_Receive>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffcc:	7dfb      	ldrb	r3, [r7, #23]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 f81a 	bl	8010008 <USBD_Get_USB_Status>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3718      	adds	r7, #24
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b082      	sub	sp, #8
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	460b      	mov	r3, r1
 800ffec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fff4:	78fa      	ldrb	r2, [r7, #3]
 800fff6:	4611      	mov	r1, r2
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7f5 fb03 	bl	8005604 <HAL_PCD_EP_GetRxCount>
 800fffe:	4603      	mov	r3, r0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010008:	b480      	push	{r7}
 801000a:	b085      	sub	sp, #20
 801000c:	af00      	add	r7, sp, #0
 801000e:	4603      	mov	r3, r0
 8010010:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010012:	2300      	movs	r3, #0
 8010014:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010016:	79fb      	ldrb	r3, [r7, #7]
 8010018:	2b03      	cmp	r3, #3
 801001a:	d817      	bhi.n	801004c <USBD_Get_USB_Status+0x44>
 801001c:	a201      	add	r2, pc, #4	; (adr r2, 8010024 <USBD_Get_USB_Status+0x1c>)
 801001e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010022:	bf00      	nop
 8010024:	08010035 	.word	0x08010035
 8010028:	0801003b 	.word	0x0801003b
 801002c:	08010041 	.word	0x08010041
 8010030:	08010047 	.word	0x08010047
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010034:	2300      	movs	r3, #0
 8010036:	73fb      	strb	r3, [r7, #15]
    break;
 8010038:	e00b      	b.n	8010052 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801003a:	2303      	movs	r3, #3
 801003c:	73fb      	strb	r3, [r7, #15]
    break;
 801003e:	e008      	b.n	8010052 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010040:	2301      	movs	r3, #1
 8010042:	73fb      	strb	r3, [r7, #15]
    break;
 8010044:	e005      	b.n	8010052 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010046:	2303      	movs	r3, #3
 8010048:	73fb      	strb	r3, [r7, #15]
    break;
 801004a:	e002      	b.n	8010052 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801004c:	2303      	movs	r3, #3
 801004e:	73fb      	strb	r3, [r7, #15]
    break;
 8010050:	bf00      	nop
  }
  return usb_status;
 8010052:	7bfb      	ldrb	r3, [r7, #15]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <__errno>:
 8010060:	4b01      	ldr	r3, [pc, #4]	; (8010068 <__errno+0x8>)
 8010062:	6818      	ldr	r0, [r3, #0]
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop
 8010068:	24000184 	.word	0x24000184

0801006c <__libc_init_array>:
 801006c:	b570      	push	{r4, r5, r6, lr}
 801006e:	4e0d      	ldr	r6, [pc, #52]	; (80100a4 <__libc_init_array+0x38>)
 8010070:	4c0d      	ldr	r4, [pc, #52]	; (80100a8 <__libc_init_array+0x3c>)
 8010072:	1ba4      	subs	r4, r4, r6
 8010074:	10a4      	asrs	r4, r4, #2
 8010076:	2500      	movs	r5, #0
 8010078:	42a5      	cmp	r5, r4
 801007a:	d109      	bne.n	8010090 <__libc_init_array+0x24>
 801007c:	4e0b      	ldr	r6, [pc, #44]	; (80100ac <__libc_init_array+0x40>)
 801007e:	4c0c      	ldr	r4, [pc, #48]	; (80100b0 <__libc_init_array+0x44>)
 8010080:	f001 f938 	bl	80112f4 <_init>
 8010084:	1ba4      	subs	r4, r4, r6
 8010086:	10a4      	asrs	r4, r4, #2
 8010088:	2500      	movs	r5, #0
 801008a:	42a5      	cmp	r5, r4
 801008c:	d105      	bne.n	801009a <__libc_init_array+0x2e>
 801008e:	bd70      	pop	{r4, r5, r6, pc}
 8010090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010094:	4798      	blx	r3
 8010096:	3501      	adds	r5, #1
 8010098:	e7ee      	b.n	8010078 <__libc_init_array+0xc>
 801009a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801009e:	4798      	blx	r3
 80100a0:	3501      	adds	r5, #1
 80100a2:	e7f2      	b.n	801008a <__libc_init_array+0x1e>
 80100a4:	08011524 	.word	0x08011524
 80100a8:	08011524 	.word	0x08011524
 80100ac:	08011524 	.word	0x08011524
 80100b0:	08011528 	.word	0x08011528

080100b4 <malloc>:
 80100b4:	4b02      	ldr	r3, [pc, #8]	; (80100c0 <malloc+0xc>)
 80100b6:	4601      	mov	r1, r0
 80100b8:	6818      	ldr	r0, [r3, #0]
 80100ba:	f000 b86d 	b.w	8010198 <_malloc_r>
 80100be:	bf00      	nop
 80100c0:	24000184 	.word	0x24000184

080100c4 <free>:
 80100c4:	4b02      	ldr	r3, [pc, #8]	; (80100d0 <free+0xc>)
 80100c6:	4601      	mov	r1, r0
 80100c8:	6818      	ldr	r0, [r3, #0]
 80100ca:	f000 b817 	b.w	80100fc <_free_r>
 80100ce:	bf00      	nop
 80100d0:	24000184 	.word	0x24000184

080100d4 <memcpy>:
 80100d4:	b510      	push	{r4, lr}
 80100d6:	1e43      	subs	r3, r0, #1
 80100d8:	440a      	add	r2, r1
 80100da:	4291      	cmp	r1, r2
 80100dc:	d100      	bne.n	80100e0 <memcpy+0xc>
 80100de:	bd10      	pop	{r4, pc}
 80100e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100e8:	e7f7      	b.n	80100da <memcpy+0x6>

080100ea <memset>:
 80100ea:	4402      	add	r2, r0
 80100ec:	4603      	mov	r3, r0
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d100      	bne.n	80100f4 <memset+0xa>
 80100f2:	4770      	bx	lr
 80100f4:	f803 1b01 	strb.w	r1, [r3], #1
 80100f8:	e7f9      	b.n	80100ee <memset+0x4>
	...

080100fc <_free_r>:
 80100fc:	b538      	push	{r3, r4, r5, lr}
 80100fe:	4605      	mov	r5, r0
 8010100:	2900      	cmp	r1, #0
 8010102:	d045      	beq.n	8010190 <_free_r+0x94>
 8010104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010108:	1f0c      	subs	r4, r1, #4
 801010a:	2b00      	cmp	r3, #0
 801010c:	bfb8      	it	lt
 801010e:	18e4      	addlt	r4, r4, r3
 8010110:	f000 f9d6 	bl	80104c0 <__malloc_lock>
 8010114:	4a1f      	ldr	r2, [pc, #124]	; (8010194 <_free_r+0x98>)
 8010116:	6813      	ldr	r3, [r2, #0]
 8010118:	4610      	mov	r0, r2
 801011a:	b933      	cbnz	r3, 801012a <_free_r+0x2e>
 801011c:	6063      	str	r3, [r4, #4]
 801011e:	6014      	str	r4, [r2, #0]
 8010120:	4628      	mov	r0, r5
 8010122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010126:	f000 b9cc 	b.w	80104c2 <__malloc_unlock>
 801012a:	42a3      	cmp	r3, r4
 801012c:	d90c      	bls.n	8010148 <_free_r+0x4c>
 801012e:	6821      	ldr	r1, [r4, #0]
 8010130:	1862      	adds	r2, r4, r1
 8010132:	4293      	cmp	r3, r2
 8010134:	bf04      	itt	eq
 8010136:	681a      	ldreq	r2, [r3, #0]
 8010138:	685b      	ldreq	r3, [r3, #4]
 801013a:	6063      	str	r3, [r4, #4]
 801013c:	bf04      	itt	eq
 801013e:	1852      	addeq	r2, r2, r1
 8010140:	6022      	streq	r2, [r4, #0]
 8010142:	6004      	str	r4, [r0, #0]
 8010144:	e7ec      	b.n	8010120 <_free_r+0x24>
 8010146:	4613      	mov	r3, r2
 8010148:	685a      	ldr	r2, [r3, #4]
 801014a:	b10a      	cbz	r2, 8010150 <_free_r+0x54>
 801014c:	42a2      	cmp	r2, r4
 801014e:	d9fa      	bls.n	8010146 <_free_r+0x4a>
 8010150:	6819      	ldr	r1, [r3, #0]
 8010152:	1858      	adds	r0, r3, r1
 8010154:	42a0      	cmp	r0, r4
 8010156:	d10b      	bne.n	8010170 <_free_r+0x74>
 8010158:	6820      	ldr	r0, [r4, #0]
 801015a:	4401      	add	r1, r0
 801015c:	1858      	adds	r0, r3, r1
 801015e:	4282      	cmp	r2, r0
 8010160:	6019      	str	r1, [r3, #0]
 8010162:	d1dd      	bne.n	8010120 <_free_r+0x24>
 8010164:	6810      	ldr	r0, [r2, #0]
 8010166:	6852      	ldr	r2, [r2, #4]
 8010168:	605a      	str	r2, [r3, #4]
 801016a:	4401      	add	r1, r0
 801016c:	6019      	str	r1, [r3, #0]
 801016e:	e7d7      	b.n	8010120 <_free_r+0x24>
 8010170:	d902      	bls.n	8010178 <_free_r+0x7c>
 8010172:	230c      	movs	r3, #12
 8010174:	602b      	str	r3, [r5, #0]
 8010176:	e7d3      	b.n	8010120 <_free_r+0x24>
 8010178:	6820      	ldr	r0, [r4, #0]
 801017a:	1821      	adds	r1, r4, r0
 801017c:	428a      	cmp	r2, r1
 801017e:	bf04      	itt	eq
 8010180:	6811      	ldreq	r1, [r2, #0]
 8010182:	6852      	ldreq	r2, [r2, #4]
 8010184:	6062      	str	r2, [r4, #4]
 8010186:	bf04      	itt	eq
 8010188:	1809      	addeq	r1, r1, r0
 801018a:	6021      	streq	r1, [r4, #0]
 801018c:	605c      	str	r4, [r3, #4]
 801018e:	e7c7      	b.n	8010120 <_free_r+0x24>
 8010190:	bd38      	pop	{r3, r4, r5, pc}
 8010192:	bf00      	nop
 8010194:	2400021c 	.word	0x2400021c

08010198 <_malloc_r>:
 8010198:	b570      	push	{r4, r5, r6, lr}
 801019a:	1ccd      	adds	r5, r1, #3
 801019c:	f025 0503 	bic.w	r5, r5, #3
 80101a0:	3508      	adds	r5, #8
 80101a2:	2d0c      	cmp	r5, #12
 80101a4:	bf38      	it	cc
 80101a6:	250c      	movcc	r5, #12
 80101a8:	2d00      	cmp	r5, #0
 80101aa:	4606      	mov	r6, r0
 80101ac:	db01      	blt.n	80101b2 <_malloc_r+0x1a>
 80101ae:	42a9      	cmp	r1, r5
 80101b0:	d903      	bls.n	80101ba <_malloc_r+0x22>
 80101b2:	230c      	movs	r3, #12
 80101b4:	6033      	str	r3, [r6, #0]
 80101b6:	2000      	movs	r0, #0
 80101b8:	bd70      	pop	{r4, r5, r6, pc}
 80101ba:	f000 f981 	bl	80104c0 <__malloc_lock>
 80101be:	4a21      	ldr	r2, [pc, #132]	; (8010244 <_malloc_r+0xac>)
 80101c0:	6814      	ldr	r4, [r2, #0]
 80101c2:	4621      	mov	r1, r4
 80101c4:	b991      	cbnz	r1, 80101ec <_malloc_r+0x54>
 80101c6:	4c20      	ldr	r4, [pc, #128]	; (8010248 <_malloc_r+0xb0>)
 80101c8:	6823      	ldr	r3, [r4, #0]
 80101ca:	b91b      	cbnz	r3, 80101d4 <_malloc_r+0x3c>
 80101cc:	4630      	mov	r0, r6
 80101ce:	f000 f869 	bl	80102a4 <_sbrk_r>
 80101d2:	6020      	str	r0, [r4, #0]
 80101d4:	4629      	mov	r1, r5
 80101d6:	4630      	mov	r0, r6
 80101d8:	f000 f864 	bl	80102a4 <_sbrk_r>
 80101dc:	1c43      	adds	r3, r0, #1
 80101de:	d124      	bne.n	801022a <_malloc_r+0x92>
 80101e0:	230c      	movs	r3, #12
 80101e2:	6033      	str	r3, [r6, #0]
 80101e4:	4630      	mov	r0, r6
 80101e6:	f000 f96c 	bl	80104c2 <__malloc_unlock>
 80101ea:	e7e4      	b.n	80101b6 <_malloc_r+0x1e>
 80101ec:	680b      	ldr	r3, [r1, #0]
 80101ee:	1b5b      	subs	r3, r3, r5
 80101f0:	d418      	bmi.n	8010224 <_malloc_r+0x8c>
 80101f2:	2b0b      	cmp	r3, #11
 80101f4:	d90f      	bls.n	8010216 <_malloc_r+0x7e>
 80101f6:	600b      	str	r3, [r1, #0]
 80101f8:	50cd      	str	r5, [r1, r3]
 80101fa:	18cc      	adds	r4, r1, r3
 80101fc:	4630      	mov	r0, r6
 80101fe:	f000 f960 	bl	80104c2 <__malloc_unlock>
 8010202:	f104 000b 	add.w	r0, r4, #11
 8010206:	1d23      	adds	r3, r4, #4
 8010208:	f020 0007 	bic.w	r0, r0, #7
 801020c:	1ac3      	subs	r3, r0, r3
 801020e:	d0d3      	beq.n	80101b8 <_malloc_r+0x20>
 8010210:	425a      	negs	r2, r3
 8010212:	50e2      	str	r2, [r4, r3]
 8010214:	e7d0      	b.n	80101b8 <_malloc_r+0x20>
 8010216:	428c      	cmp	r4, r1
 8010218:	684b      	ldr	r3, [r1, #4]
 801021a:	bf16      	itet	ne
 801021c:	6063      	strne	r3, [r4, #4]
 801021e:	6013      	streq	r3, [r2, #0]
 8010220:	460c      	movne	r4, r1
 8010222:	e7eb      	b.n	80101fc <_malloc_r+0x64>
 8010224:	460c      	mov	r4, r1
 8010226:	6849      	ldr	r1, [r1, #4]
 8010228:	e7cc      	b.n	80101c4 <_malloc_r+0x2c>
 801022a:	1cc4      	adds	r4, r0, #3
 801022c:	f024 0403 	bic.w	r4, r4, #3
 8010230:	42a0      	cmp	r0, r4
 8010232:	d005      	beq.n	8010240 <_malloc_r+0xa8>
 8010234:	1a21      	subs	r1, r4, r0
 8010236:	4630      	mov	r0, r6
 8010238:	f000 f834 	bl	80102a4 <_sbrk_r>
 801023c:	3001      	adds	r0, #1
 801023e:	d0cf      	beq.n	80101e0 <_malloc_r+0x48>
 8010240:	6025      	str	r5, [r4, #0]
 8010242:	e7db      	b.n	80101fc <_malloc_r+0x64>
 8010244:	2400021c 	.word	0x2400021c
 8010248:	24000220 	.word	0x24000220

0801024c <iprintf>:
 801024c:	b40f      	push	{r0, r1, r2, r3}
 801024e:	4b0a      	ldr	r3, [pc, #40]	; (8010278 <iprintf+0x2c>)
 8010250:	b513      	push	{r0, r1, r4, lr}
 8010252:	681c      	ldr	r4, [r3, #0]
 8010254:	b124      	cbz	r4, 8010260 <iprintf+0x14>
 8010256:	69a3      	ldr	r3, [r4, #24]
 8010258:	b913      	cbnz	r3, 8010260 <iprintf+0x14>
 801025a:	4620      	mov	r0, r4
 801025c:	f000 f8a6 	bl	80103ac <__sinit>
 8010260:	ab05      	add	r3, sp, #20
 8010262:	9a04      	ldr	r2, [sp, #16]
 8010264:	68a1      	ldr	r1, [r4, #8]
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	4620      	mov	r0, r4
 801026a:	f000 faa7 	bl	80107bc <_vfiprintf_r>
 801026e:	b002      	add	sp, #8
 8010270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010274:	b004      	add	sp, #16
 8010276:	4770      	bx	lr
 8010278:	24000184 	.word	0x24000184

0801027c <putchar>:
 801027c:	b538      	push	{r3, r4, r5, lr}
 801027e:	4b08      	ldr	r3, [pc, #32]	; (80102a0 <putchar+0x24>)
 8010280:	681c      	ldr	r4, [r3, #0]
 8010282:	4605      	mov	r5, r0
 8010284:	b124      	cbz	r4, 8010290 <putchar+0x14>
 8010286:	69a3      	ldr	r3, [r4, #24]
 8010288:	b913      	cbnz	r3, 8010290 <putchar+0x14>
 801028a:	4620      	mov	r0, r4
 801028c:	f000 f88e 	bl	80103ac <__sinit>
 8010290:	68a2      	ldr	r2, [r4, #8]
 8010292:	4629      	mov	r1, r5
 8010294:	4620      	mov	r0, r4
 8010296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801029a:	f000 bd2d 	b.w	8010cf8 <_putc_r>
 801029e:	bf00      	nop
 80102a0:	24000184 	.word	0x24000184

080102a4 <_sbrk_r>:
 80102a4:	b538      	push	{r3, r4, r5, lr}
 80102a6:	4c06      	ldr	r4, [pc, #24]	; (80102c0 <_sbrk_r+0x1c>)
 80102a8:	2300      	movs	r3, #0
 80102aa:	4605      	mov	r5, r0
 80102ac:	4608      	mov	r0, r1
 80102ae:	6023      	str	r3, [r4, #0]
 80102b0:	f7f1 fa58 	bl	8001764 <_sbrk>
 80102b4:	1c43      	adds	r3, r0, #1
 80102b6:	d102      	bne.n	80102be <_sbrk_r+0x1a>
 80102b8:	6823      	ldr	r3, [r4, #0]
 80102ba:	b103      	cbz	r3, 80102be <_sbrk_r+0x1a>
 80102bc:	602b      	str	r3, [r5, #0]
 80102be:	bd38      	pop	{r3, r4, r5, pc}
 80102c0:	24002388 	.word	0x24002388

080102c4 <sniprintf>:
 80102c4:	b40c      	push	{r2, r3}
 80102c6:	b530      	push	{r4, r5, lr}
 80102c8:	4b17      	ldr	r3, [pc, #92]	; (8010328 <sniprintf+0x64>)
 80102ca:	1e0c      	subs	r4, r1, #0
 80102cc:	b09d      	sub	sp, #116	; 0x74
 80102ce:	681d      	ldr	r5, [r3, #0]
 80102d0:	da08      	bge.n	80102e4 <sniprintf+0x20>
 80102d2:	238b      	movs	r3, #139	; 0x8b
 80102d4:	602b      	str	r3, [r5, #0]
 80102d6:	f04f 30ff 	mov.w	r0, #4294967295
 80102da:	b01d      	add	sp, #116	; 0x74
 80102dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102e0:	b002      	add	sp, #8
 80102e2:	4770      	bx	lr
 80102e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80102e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80102ec:	bf14      	ite	ne
 80102ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80102f2:	4623      	moveq	r3, r4
 80102f4:	9304      	str	r3, [sp, #16]
 80102f6:	9307      	str	r3, [sp, #28]
 80102f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102fc:	9002      	str	r0, [sp, #8]
 80102fe:	9006      	str	r0, [sp, #24]
 8010300:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010304:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010306:	ab21      	add	r3, sp, #132	; 0x84
 8010308:	a902      	add	r1, sp, #8
 801030a:	4628      	mov	r0, r5
 801030c:	9301      	str	r3, [sp, #4]
 801030e:	f000 f933 	bl	8010578 <_svfiprintf_r>
 8010312:	1c43      	adds	r3, r0, #1
 8010314:	bfbc      	itt	lt
 8010316:	238b      	movlt	r3, #139	; 0x8b
 8010318:	602b      	strlt	r3, [r5, #0]
 801031a:	2c00      	cmp	r4, #0
 801031c:	d0dd      	beq.n	80102da <sniprintf+0x16>
 801031e:	9b02      	ldr	r3, [sp, #8]
 8010320:	2200      	movs	r2, #0
 8010322:	701a      	strb	r2, [r3, #0]
 8010324:	e7d9      	b.n	80102da <sniprintf+0x16>
 8010326:	bf00      	nop
 8010328:	24000184 	.word	0x24000184

0801032c <std>:
 801032c:	2300      	movs	r3, #0
 801032e:	b510      	push	{r4, lr}
 8010330:	4604      	mov	r4, r0
 8010332:	e9c0 3300 	strd	r3, r3, [r0]
 8010336:	6083      	str	r3, [r0, #8]
 8010338:	8181      	strh	r1, [r0, #12]
 801033a:	6643      	str	r3, [r0, #100]	; 0x64
 801033c:	81c2      	strh	r2, [r0, #14]
 801033e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010342:	6183      	str	r3, [r0, #24]
 8010344:	4619      	mov	r1, r3
 8010346:	2208      	movs	r2, #8
 8010348:	305c      	adds	r0, #92	; 0x5c
 801034a:	f7ff fece 	bl	80100ea <memset>
 801034e:	4b05      	ldr	r3, [pc, #20]	; (8010364 <std+0x38>)
 8010350:	6263      	str	r3, [r4, #36]	; 0x24
 8010352:	4b05      	ldr	r3, [pc, #20]	; (8010368 <std+0x3c>)
 8010354:	62a3      	str	r3, [r4, #40]	; 0x28
 8010356:	4b05      	ldr	r3, [pc, #20]	; (801036c <std+0x40>)
 8010358:	62e3      	str	r3, [r4, #44]	; 0x2c
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <std+0x44>)
 801035c:	6224      	str	r4, [r4, #32]
 801035e:	6323      	str	r3, [r4, #48]	; 0x30
 8010360:	bd10      	pop	{r4, pc}
 8010362:	bf00      	nop
 8010364:	08010d65 	.word	0x08010d65
 8010368:	08010d87 	.word	0x08010d87
 801036c:	08010dbf 	.word	0x08010dbf
 8010370:	08010de3 	.word	0x08010de3

08010374 <_cleanup_r>:
 8010374:	4901      	ldr	r1, [pc, #4]	; (801037c <_cleanup_r+0x8>)
 8010376:	f000 b885 	b.w	8010484 <_fwalk_reent>
 801037a:	bf00      	nop
 801037c:	080110bd 	.word	0x080110bd

08010380 <__sfmoreglue>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	1e4a      	subs	r2, r1, #1
 8010384:	2568      	movs	r5, #104	; 0x68
 8010386:	4355      	muls	r5, r2
 8010388:	460e      	mov	r6, r1
 801038a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801038e:	f7ff ff03 	bl	8010198 <_malloc_r>
 8010392:	4604      	mov	r4, r0
 8010394:	b140      	cbz	r0, 80103a8 <__sfmoreglue+0x28>
 8010396:	2100      	movs	r1, #0
 8010398:	e9c0 1600 	strd	r1, r6, [r0]
 801039c:	300c      	adds	r0, #12
 801039e:	60a0      	str	r0, [r4, #8]
 80103a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103a4:	f7ff fea1 	bl	80100ea <memset>
 80103a8:	4620      	mov	r0, r4
 80103aa:	bd70      	pop	{r4, r5, r6, pc}

080103ac <__sinit>:
 80103ac:	6983      	ldr	r3, [r0, #24]
 80103ae:	b510      	push	{r4, lr}
 80103b0:	4604      	mov	r4, r0
 80103b2:	bb33      	cbnz	r3, 8010402 <__sinit+0x56>
 80103b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80103b8:	6503      	str	r3, [r0, #80]	; 0x50
 80103ba:	4b12      	ldr	r3, [pc, #72]	; (8010404 <__sinit+0x58>)
 80103bc:	4a12      	ldr	r2, [pc, #72]	; (8010408 <__sinit+0x5c>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	6282      	str	r2, [r0, #40]	; 0x28
 80103c2:	4298      	cmp	r0, r3
 80103c4:	bf04      	itt	eq
 80103c6:	2301      	moveq	r3, #1
 80103c8:	6183      	streq	r3, [r0, #24]
 80103ca:	f000 f81f 	bl	801040c <__sfp>
 80103ce:	6060      	str	r0, [r4, #4]
 80103d0:	4620      	mov	r0, r4
 80103d2:	f000 f81b 	bl	801040c <__sfp>
 80103d6:	60a0      	str	r0, [r4, #8]
 80103d8:	4620      	mov	r0, r4
 80103da:	f000 f817 	bl	801040c <__sfp>
 80103de:	2200      	movs	r2, #0
 80103e0:	60e0      	str	r0, [r4, #12]
 80103e2:	2104      	movs	r1, #4
 80103e4:	6860      	ldr	r0, [r4, #4]
 80103e6:	f7ff ffa1 	bl	801032c <std>
 80103ea:	2201      	movs	r2, #1
 80103ec:	2109      	movs	r1, #9
 80103ee:	68a0      	ldr	r0, [r4, #8]
 80103f0:	f7ff ff9c 	bl	801032c <std>
 80103f4:	2202      	movs	r2, #2
 80103f6:	2112      	movs	r1, #18
 80103f8:	68e0      	ldr	r0, [r4, #12]
 80103fa:	f7ff ff97 	bl	801032c <std>
 80103fe:	2301      	movs	r3, #1
 8010400:	61a3      	str	r3, [r4, #24]
 8010402:	bd10      	pop	{r4, pc}
 8010404:	08011484 	.word	0x08011484
 8010408:	08010375 	.word	0x08010375

0801040c <__sfp>:
 801040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040e:	4b1b      	ldr	r3, [pc, #108]	; (801047c <__sfp+0x70>)
 8010410:	681e      	ldr	r6, [r3, #0]
 8010412:	69b3      	ldr	r3, [r6, #24]
 8010414:	4607      	mov	r7, r0
 8010416:	b913      	cbnz	r3, 801041e <__sfp+0x12>
 8010418:	4630      	mov	r0, r6
 801041a:	f7ff ffc7 	bl	80103ac <__sinit>
 801041e:	3648      	adds	r6, #72	; 0x48
 8010420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010424:	3b01      	subs	r3, #1
 8010426:	d503      	bpl.n	8010430 <__sfp+0x24>
 8010428:	6833      	ldr	r3, [r6, #0]
 801042a:	b133      	cbz	r3, 801043a <__sfp+0x2e>
 801042c:	6836      	ldr	r6, [r6, #0]
 801042e:	e7f7      	b.n	8010420 <__sfp+0x14>
 8010430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010434:	b16d      	cbz	r5, 8010452 <__sfp+0x46>
 8010436:	3468      	adds	r4, #104	; 0x68
 8010438:	e7f4      	b.n	8010424 <__sfp+0x18>
 801043a:	2104      	movs	r1, #4
 801043c:	4638      	mov	r0, r7
 801043e:	f7ff ff9f 	bl	8010380 <__sfmoreglue>
 8010442:	6030      	str	r0, [r6, #0]
 8010444:	2800      	cmp	r0, #0
 8010446:	d1f1      	bne.n	801042c <__sfp+0x20>
 8010448:	230c      	movs	r3, #12
 801044a:	603b      	str	r3, [r7, #0]
 801044c:	4604      	mov	r4, r0
 801044e:	4620      	mov	r0, r4
 8010450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010452:	4b0b      	ldr	r3, [pc, #44]	; (8010480 <__sfp+0x74>)
 8010454:	6665      	str	r5, [r4, #100]	; 0x64
 8010456:	e9c4 5500 	strd	r5, r5, [r4]
 801045a:	60a5      	str	r5, [r4, #8]
 801045c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010460:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010464:	2208      	movs	r2, #8
 8010466:	4629      	mov	r1, r5
 8010468:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801046c:	f7ff fe3d 	bl	80100ea <memset>
 8010470:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010474:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010478:	e7e9      	b.n	801044e <__sfp+0x42>
 801047a:	bf00      	nop
 801047c:	08011484 	.word	0x08011484
 8010480:	ffff0001 	.word	0xffff0001

08010484 <_fwalk_reent>:
 8010484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010488:	4680      	mov	r8, r0
 801048a:	4689      	mov	r9, r1
 801048c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010490:	2600      	movs	r6, #0
 8010492:	b914      	cbnz	r4, 801049a <_fwalk_reent+0x16>
 8010494:	4630      	mov	r0, r6
 8010496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801049a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801049e:	3f01      	subs	r7, #1
 80104a0:	d501      	bpl.n	80104a6 <_fwalk_reent+0x22>
 80104a2:	6824      	ldr	r4, [r4, #0]
 80104a4:	e7f5      	b.n	8010492 <_fwalk_reent+0xe>
 80104a6:	89ab      	ldrh	r3, [r5, #12]
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d907      	bls.n	80104bc <_fwalk_reent+0x38>
 80104ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104b0:	3301      	adds	r3, #1
 80104b2:	d003      	beq.n	80104bc <_fwalk_reent+0x38>
 80104b4:	4629      	mov	r1, r5
 80104b6:	4640      	mov	r0, r8
 80104b8:	47c8      	blx	r9
 80104ba:	4306      	orrs	r6, r0
 80104bc:	3568      	adds	r5, #104	; 0x68
 80104be:	e7ee      	b.n	801049e <_fwalk_reent+0x1a>

080104c0 <__malloc_lock>:
 80104c0:	4770      	bx	lr

080104c2 <__malloc_unlock>:
 80104c2:	4770      	bx	lr

080104c4 <__ssputs_r>:
 80104c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104c8:	688e      	ldr	r6, [r1, #8]
 80104ca:	429e      	cmp	r6, r3
 80104cc:	4682      	mov	sl, r0
 80104ce:	460c      	mov	r4, r1
 80104d0:	4690      	mov	r8, r2
 80104d2:	4699      	mov	r9, r3
 80104d4:	d837      	bhi.n	8010546 <__ssputs_r+0x82>
 80104d6:	898a      	ldrh	r2, [r1, #12]
 80104d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104dc:	d031      	beq.n	8010542 <__ssputs_r+0x7e>
 80104de:	6825      	ldr	r5, [r4, #0]
 80104e0:	6909      	ldr	r1, [r1, #16]
 80104e2:	1a6f      	subs	r7, r5, r1
 80104e4:	6965      	ldr	r5, [r4, #20]
 80104e6:	2302      	movs	r3, #2
 80104e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80104f0:	f109 0301 	add.w	r3, r9, #1
 80104f4:	443b      	add	r3, r7
 80104f6:	429d      	cmp	r5, r3
 80104f8:	bf38      	it	cc
 80104fa:	461d      	movcc	r5, r3
 80104fc:	0553      	lsls	r3, r2, #21
 80104fe:	d530      	bpl.n	8010562 <__ssputs_r+0x9e>
 8010500:	4629      	mov	r1, r5
 8010502:	f7ff fe49 	bl	8010198 <_malloc_r>
 8010506:	4606      	mov	r6, r0
 8010508:	b950      	cbnz	r0, 8010520 <__ssputs_r+0x5c>
 801050a:	230c      	movs	r3, #12
 801050c:	f8ca 3000 	str.w	r3, [sl]
 8010510:	89a3      	ldrh	r3, [r4, #12]
 8010512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010516:	81a3      	strh	r3, [r4, #12]
 8010518:	f04f 30ff 	mov.w	r0, #4294967295
 801051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010520:	463a      	mov	r2, r7
 8010522:	6921      	ldr	r1, [r4, #16]
 8010524:	f7ff fdd6 	bl	80100d4 <memcpy>
 8010528:	89a3      	ldrh	r3, [r4, #12]
 801052a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801052e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010532:	81a3      	strh	r3, [r4, #12]
 8010534:	6126      	str	r6, [r4, #16]
 8010536:	6165      	str	r5, [r4, #20]
 8010538:	443e      	add	r6, r7
 801053a:	1bed      	subs	r5, r5, r7
 801053c:	6026      	str	r6, [r4, #0]
 801053e:	60a5      	str	r5, [r4, #8]
 8010540:	464e      	mov	r6, r9
 8010542:	454e      	cmp	r6, r9
 8010544:	d900      	bls.n	8010548 <__ssputs_r+0x84>
 8010546:	464e      	mov	r6, r9
 8010548:	4632      	mov	r2, r6
 801054a:	4641      	mov	r1, r8
 801054c:	6820      	ldr	r0, [r4, #0]
 801054e:	f000 fe55 	bl	80111fc <memmove>
 8010552:	68a3      	ldr	r3, [r4, #8]
 8010554:	1b9b      	subs	r3, r3, r6
 8010556:	60a3      	str	r3, [r4, #8]
 8010558:	6823      	ldr	r3, [r4, #0]
 801055a:	441e      	add	r6, r3
 801055c:	6026      	str	r6, [r4, #0]
 801055e:	2000      	movs	r0, #0
 8010560:	e7dc      	b.n	801051c <__ssputs_r+0x58>
 8010562:	462a      	mov	r2, r5
 8010564:	f000 fe63 	bl	801122e <_realloc_r>
 8010568:	4606      	mov	r6, r0
 801056a:	2800      	cmp	r0, #0
 801056c:	d1e2      	bne.n	8010534 <__ssputs_r+0x70>
 801056e:	6921      	ldr	r1, [r4, #16]
 8010570:	4650      	mov	r0, sl
 8010572:	f7ff fdc3 	bl	80100fc <_free_r>
 8010576:	e7c8      	b.n	801050a <__ssputs_r+0x46>

08010578 <_svfiprintf_r>:
 8010578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801057c:	461d      	mov	r5, r3
 801057e:	898b      	ldrh	r3, [r1, #12]
 8010580:	061f      	lsls	r7, r3, #24
 8010582:	b09d      	sub	sp, #116	; 0x74
 8010584:	4680      	mov	r8, r0
 8010586:	460c      	mov	r4, r1
 8010588:	4616      	mov	r6, r2
 801058a:	d50f      	bpl.n	80105ac <_svfiprintf_r+0x34>
 801058c:	690b      	ldr	r3, [r1, #16]
 801058e:	b96b      	cbnz	r3, 80105ac <_svfiprintf_r+0x34>
 8010590:	2140      	movs	r1, #64	; 0x40
 8010592:	f7ff fe01 	bl	8010198 <_malloc_r>
 8010596:	6020      	str	r0, [r4, #0]
 8010598:	6120      	str	r0, [r4, #16]
 801059a:	b928      	cbnz	r0, 80105a8 <_svfiprintf_r+0x30>
 801059c:	230c      	movs	r3, #12
 801059e:	f8c8 3000 	str.w	r3, [r8]
 80105a2:	f04f 30ff 	mov.w	r0, #4294967295
 80105a6:	e0c8      	b.n	801073a <_svfiprintf_r+0x1c2>
 80105a8:	2340      	movs	r3, #64	; 0x40
 80105aa:	6163      	str	r3, [r4, #20]
 80105ac:	2300      	movs	r3, #0
 80105ae:	9309      	str	r3, [sp, #36]	; 0x24
 80105b0:	2320      	movs	r3, #32
 80105b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105b6:	2330      	movs	r3, #48	; 0x30
 80105b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105bc:	9503      	str	r5, [sp, #12]
 80105be:	f04f 0b01 	mov.w	fp, #1
 80105c2:	4637      	mov	r7, r6
 80105c4:	463d      	mov	r5, r7
 80105c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80105ca:	b10b      	cbz	r3, 80105d0 <_svfiprintf_r+0x58>
 80105cc:	2b25      	cmp	r3, #37	; 0x25
 80105ce:	d13e      	bne.n	801064e <_svfiprintf_r+0xd6>
 80105d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80105d4:	d00b      	beq.n	80105ee <_svfiprintf_r+0x76>
 80105d6:	4653      	mov	r3, sl
 80105d8:	4632      	mov	r2, r6
 80105da:	4621      	mov	r1, r4
 80105dc:	4640      	mov	r0, r8
 80105de:	f7ff ff71 	bl	80104c4 <__ssputs_r>
 80105e2:	3001      	adds	r0, #1
 80105e4:	f000 80a4 	beq.w	8010730 <_svfiprintf_r+0x1b8>
 80105e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ea:	4453      	add	r3, sl
 80105ec:	9309      	str	r3, [sp, #36]	; 0x24
 80105ee:	783b      	ldrb	r3, [r7, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	f000 809d 	beq.w	8010730 <_svfiprintf_r+0x1b8>
 80105f6:	2300      	movs	r3, #0
 80105f8:	f04f 32ff 	mov.w	r2, #4294967295
 80105fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010600:	9304      	str	r3, [sp, #16]
 8010602:	9307      	str	r3, [sp, #28]
 8010604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010608:	931a      	str	r3, [sp, #104]	; 0x68
 801060a:	462f      	mov	r7, r5
 801060c:	2205      	movs	r2, #5
 801060e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010612:	4850      	ldr	r0, [pc, #320]	; (8010754 <_svfiprintf_r+0x1dc>)
 8010614:	f7ef fe6c 	bl	80002f0 <memchr>
 8010618:	9b04      	ldr	r3, [sp, #16]
 801061a:	b9d0      	cbnz	r0, 8010652 <_svfiprintf_r+0xda>
 801061c:	06d9      	lsls	r1, r3, #27
 801061e:	bf44      	itt	mi
 8010620:	2220      	movmi	r2, #32
 8010622:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010626:	071a      	lsls	r2, r3, #28
 8010628:	bf44      	itt	mi
 801062a:	222b      	movmi	r2, #43	; 0x2b
 801062c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010630:	782a      	ldrb	r2, [r5, #0]
 8010632:	2a2a      	cmp	r2, #42	; 0x2a
 8010634:	d015      	beq.n	8010662 <_svfiprintf_r+0xea>
 8010636:	9a07      	ldr	r2, [sp, #28]
 8010638:	462f      	mov	r7, r5
 801063a:	2000      	movs	r0, #0
 801063c:	250a      	movs	r5, #10
 801063e:	4639      	mov	r1, r7
 8010640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010644:	3b30      	subs	r3, #48	; 0x30
 8010646:	2b09      	cmp	r3, #9
 8010648:	d94d      	bls.n	80106e6 <_svfiprintf_r+0x16e>
 801064a:	b1b8      	cbz	r0, 801067c <_svfiprintf_r+0x104>
 801064c:	e00f      	b.n	801066e <_svfiprintf_r+0xf6>
 801064e:	462f      	mov	r7, r5
 8010650:	e7b8      	b.n	80105c4 <_svfiprintf_r+0x4c>
 8010652:	4a40      	ldr	r2, [pc, #256]	; (8010754 <_svfiprintf_r+0x1dc>)
 8010654:	1a80      	subs	r0, r0, r2
 8010656:	fa0b f000 	lsl.w	r0, fp, r0
 801065a:	4318      	orrs	r0, r3
 801065c:	9004      	str	r0, [sp, #16]
 801065e:	463d      	mov	r5, r7
 8010660:	e7d3      	b.n	801060a <_svfiprintf_r+0x92>
 8010662:	9a03      	ldr	r2, [sp, #12]
 8010664:	1d11      	adds	r1, r2, #4
 8010666:	6812      	ldr	r2, [r2, #0]
 8010668:	9103      	str	r1, [sp, #12]
 801066a:	2a00      	cmp	r2, #0
 801066c:	db01      	blt.n	8010672 <_svfiprintf_r+0xfa>
 801066e:	9207      	str	r2, [sp, #28]
 8010670:	e004      	b.n	801067c <_svfiprintf_r+0x104>
 8010672:	4252      	negs	r2, r2
 8010674:	f043 0302 	orr.w	r3, r3, #2
 8010678:	9207      	str	r2, [sp, #28]
 801067a:	9304      	str	r3, [sp, #16]
 801067c:	783b      	ldrb	r3, [r7, #0]
 801067e:	2b2e      	cmp	r3, #46	; 0x2e
 8010680:	d10c      	bne.n	801069c <_svfiprintf_r+0x124>
 8010682:	787b      	ldrb	r3, [r7, #1]
 8010684:	2b2a      	cmp	r3, #42	; 0x2a
 8010686:	d133      	bne.n	80106f0 <_svfiprintf_r+0x178>
 8010688:	9b03      	ldr	r3, [sp, #12]
 801068a:	1d1a      	adds	r2, r3, #4
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	9203      	str	r2, [sp, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	bfb8      	it	lt
 8010694:	f04f 33ff 	movlt.w	r3, #4294967295
 8010698:	3702      	adds	r7, #2
 801069a:	9305      	str	r3, [sp, #20]
 801069c:	4d2e      	ldr	r5, [pc, #184]	; (8010758 <_svfiprintf_r+0x1e0>)
 801069e:	7839      	ldrb	r1, [r7, #0]
 80106a0:	2203      	movs	r2, #3
 80106a2:	4628      	mov	r0, r5
 80106a4:	f7ef fe24 	bl	80002f0 <memchr>
 80106a8:	b138      	cbz	r0, 80106ba <_svfiprintf_r+0x142>
 80106aa:	2340      	movs	r3, #64	; 0x40
 80106ac:	1b40      	subs	r0, r0, r5
 80106ae:	fa03 f000 	lsl.w	r0, r3, r0
 80106b2:	9b04      	ldr	r3, [sp, #16]
 80106b4:	4303      	orrs	r3, r0
 80106b6:	3701      	adds	r7, #1
 80106b8:	9304      	str	r3, [sp, #16]
 80106ba:	7839      	ldrb	r1, [r7, #0]
 80106bc:	4827      	ldr	r0, [pc, #156]	; (801075c <_svfiprintf_r+0x1e4>)
 80106be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106c2:	2206      	movs	r2, #6
 80106c4:	1c7e      	adds	r6, r7, #1
 80106c6:	f7ef fe13 	bl	80002f0 <memchr>
 80106ca:	2800      	cmp	r0, #0
 80106cc:	d038      	beq.n	8010740 <_svfiprintf_r+0x1c8>
 80106ce:	4b24      	ldr	r3, [pc, #144]	; (8010760 <_svfiprintf_r+0x1e8>)
 80106d0:	bb13      	cbnz	r3, 8010718 <_svfiprintf_r+0x1a0>
 80106d2:	9b03      	ldr	r3, [sp, #12]
 80106d4:	3307      	adds	r3, #7
 80106d6:	f023 0307 	bic.w	r3, r3, #7
 80106da:	3308      	adds	r3, #8
 80106dc:	9303      	str	r3, [sp, #12]
 80106de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106e0:	444b      	add	r3, r9
 80106e2:	9309      	str	r3, [sp, #36]	; 0x24
 80106e4:	e76d      	b.n	80105c2 <_svfiprintf_r+0x4a>
 80106e6:	fb05 3202 	mla	r2, r5, r2, r3
 80106ea:	2001      	movs	r0, #1
 80106ec:	460f      	mov	r7, r1
 80106ee:	e7a6      	b.n	801063e <_svfiprintf_r+0xc6>
 80106f0:	2300      	movs	r3, #0
 80106f2:	3701      	adds	r7, #1
 80106f4:	9305      	str	r3, [sp, #20]
 80106f6:	4619      	mov	r1, r3
 80106f8:	250a      	movs	r5, #10
 80106fa:	4638      	mov	r0, r7
 80106fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010700:	3a30      	subs	r2, #48	; 0x30
 8010702:	2a09      	cmp	r2, #9
 8010704:	d903      	bls.n	801070e <_svfiprintf_r+0x196>
 8010706:	2b00      	cmp	r3, #0
 8010708:	d0c8      	beq.n	801069c <_svfiprintf_r+0x124>
 801070a:	9105      	str	r1, [sp, #20]
 801070c:	e7c6      	b.n	801069c <_svfiprintf_r+0x124>
 801070e:	fb05 2101 	mla	r1, r5, r1, r2
 8010712:	2301      	movs	r3, #1
 8010714:	4607      	mov	r7, r0
 8010716:	e7f0      	b.n	80106fa <_svfiprintf_r+0x182>
 8010718:	ab03      	add	r3, sp, #12
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	4622      	mov	r2, r4
 801071e:	4b11      	ldr	r3, [pc, #68]	; (8010764 <_svfiprintf_r+0x1ec>)
 8010720:	a904      	add	r1, sp, #16
 8010722:	4640      	mov	r0, r8
 8010724:	f3af 8000 	nop.w
 8010728:	f1b0 3fff 	cmp.w	r0, #4294967295
 801072c:	4681      	mov	r9, r0
 801072e:	d1d6      	bne.n	80106de <_svfiprintf_r+0x166>
 8010730:	89a3      	ldrh	r3, [r4, #12]
 8010732:	065b      	lsls	r3, r3, #25
 8010734:	f53f af35 	bmi.w	80105a2 <_svfiprintf_r+0x2a>
 8010738:	9809      	ldr	r0, [sp, #36]	; 0x24
 801073a:	b01d      	add	sp, #116	; 0x74
 801073c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010740:	ab03      	add	r3, sp, #12
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	4622      	mov	r2, r4
 8010746:	4b07      	ldr	r3, [pc, #28]	; (8010764 <_svfiprintf_r+0x1ec>)
 8010748:	a904      	add	r1, sp, #16
 801074a:	4640      	mov	r0, r8
 801074c:	f000 f9c2 	bl	8010ad4 <_printf_i>
 8010750:	e7ea      	b.n	8010728 <_svfiprintf_r+0x1b0>
 8010752:	bf00      	nop
 8010754:	080114e8 	.word	0x080114e8
 8010758:	080114ee 	.word	0x080114ee
 801075c:	080114f2 	.word	0x080114f2
 8010760:	00000000 	.word	0x00000000
 8010764:	080104c5 	.word	0x080104c5

08010768 <__sfputc_r>:
 8010768:	6893      	ldr	r3, [r2, #8]
 801076a:	3b01      	subs	r3, #1
 801076c:	2b00      	cmp	r3, #0
 801076e:	b410      	push	{r4}
 8010770:	6093      	str	r3, [r2, #8]
 8010772:	da08      	bge.n	8010786 <__sfputc_r+0x1e>
 8010774:	6994      	ldr	r4, [r2, #24]
 8010776:	42a3      	cmp	r3, r4
 8010778:	db01      	blt.n	801077e <__sfputc_r+0x16>
 801077a:	290a      	cmp	r1, #10
 801077c:	d103      	bne.n	8010786 <__sfputc_r+0x1e>
 801077e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010782:	f000 bb33 	b.w	8010dec <__swbuf_r>
 8010786:	6813      	ldr	r3, [r2, #0]
 8010788:	1c58      	adds	r0, r3, #1
 801078a:	6010      	str	r0, [r2, #0]
 801078c:	7019      	strb	r1, [r3, #0]
 801078e:	4608      	mov	r0, r1
 8010790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010794:	4770      	bx	lr

08010796 <__sfputs_r>:
 8010796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010798:	4606      	mov	r6, r0
 801079a:	460f      	mov	r7, r1
 801079c:	4614      	mov	r4, r2
 801079e:	18d5      	adds	r5, r2, r3
 80107a0:	42ac      	cmp	r4, r5
 80107a2:	d101      	bne.n	80107a8 <__sfputs_r+0x12>
 80107a4:	2000      	movs	r0, #0
 80107a6:	e007      	b.n	80107b8 <__sfputs_r+0x22>
 80107a8:	463a      	mov	r2, r7
 80107aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ae:	4630      	mov	r0, r6
 80107b0:	f7ff ffda 	bl	8010768 <__sfputc_r>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	d1f3      	bne.n	80107a0 <__sfputs_r+0xa>
 80107b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107bc <_vfiprintf_r>:
 80107bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c0:	460c      	mov	r4, r1
 80107c2:	b09d      	sub	sp, #116	; 0x74
 80107c4:	4617      	mov	r7, r2
 80107c6:	461d      	mov	r5, r3
 80107c8:	4606      	mov	r6, r0
 80107ca:	b118      	cbz	r0, 80107d4 <_vfiprintf_r+0x18>
 80107cc:	6983      	ldr	r3, [r0, #24]
 80107ce:	b90b      	cbnz	r3, 80107d4 <_vfiprintf_r+0x18>
 80107d0:	f7ff fdec 	bl	80103ac <__sinit>
 80107d4:	4b7c      	ldr	r3, [pc, #496]	; (80109c8 <_vfiprintf_r+0x20c>)
 80107d6:	429c      	cmp	r4, r3
 80107d8:	d158      	bne.n	801088c <_vfiprintf_r+0xd0>
 80107da:	6874      	ldr	r4, [r6, #4]
 80107dc:	89a3      	ldrh	r3, [r4, #12]
 80107de:	0718      	lsls	r0, r3, #28
 80107e0:	d55e      	bpl.n	80108a0 <_vfiprintf_r+0xe4>
 80107e2:	6923      	ldr	r3, [r4, #16]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d05b      	beq.n	80108a0 <_vfiprintf_r+0xe4>
 80107e8:	2300      	movs	r3, #0
 80107ea:	9309      	str	r3, [sp, #36]	; 0x24
 80107ec:	2320      	movs	r3, #32
 80107ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107f2:	2330      	movs	r3, #48	; 0x30
 80107f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107f8:	9503      	str	r5, [sp, #12]
 80107fa:	f04f 0b01 	mov.w	fp, #1
 80107fe:	46b8      	mov	r8, r7
 8010800:	4645      	mov	r5, r8
 8010802:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010806:	b10b      	cbz	r3, 801080c <_vfiprintf_r+0x50>
 8010808:	2b25      	cmp	r3, #37	; 0x25
 801080a:	d154      	bne.n	80108b6 <_vfiprintf_r+0xfa>
 801080c:	ebb8 0a07 	subs.w	sl, r8, r7
 8010810:	d00b      	beq.n	801082a <_vfiprintf_r+0x6e>
 8010812:	4653      	mov	r3, sl
 8010814:	463a      	mov	r2, r7
 8010816:	4621      	mov	r1, r4
 8010818:	4630      	mov	r0, r6
 801081a:	f7ff ffbc 	bl	8010796 <__sfputs_r>
 801081e:	3001      	adds	r0, #1
 8010820:	f000 80c2 	beq.w	80109a8 <_vfiprintf_r+0x1ec>
 8010824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010826:	4453      	add	r3, sl
 8010828:	9309      	str	r3, [sp, #36]	; 0x24
 801082a:	f898 3000 	ldrb.w	r3, [r8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	f000 80ba 	beq.w	80109a8 <_vfiprintf_r+0x1ec>
 8010834:	2300      	movs	r3, #0
 8010836:	f04f 32ff 	mov.w	r2, #4294967295
 801083a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801083e:	9304      	str	r3, [sp, #16]
 8010840:	9307      	str	r3, [sp, #28]
 8010842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010846:	931a      	str	r3, [sp, #104]	; 0x68
 8010848:	46a8      	mov	r8, r5
 801084a:	2205      	movs	r2, #5
 801084c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010850:	485e      	ldr	r0, [pc, #376]	; (80109cc <_vfiprintf_r+0x210>)
 8010852:	f7ef fd4d 	bl	80002f0 <memchr>
 8010856:	9b04      	ldr	r3, [sp, #16]
 8010858:	bb78      	cbnz	r0, 80108ba <_vfiprintf_r+0xfe>
 801085a:	06d9      	lsls	r1, r3, #27
 801085c:	bf44      	itt	mi
 801085e:	2220      	movmi	r2, #32
 8010860:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010864:	071a      	lsls	r2, r3, #28
 8010866:	bf44      	itt	mi
 8010868:	222b      	movmi	r2, #43	; 0x2b
 801086a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801086e:	782a      	ldrb	r2, [r5, #0]
 8010870:	2a2a      	cmp	r2, #42	; 0x2a
 8010872:	d02a      	beq.n	80108ca <_vfiprintf_r+0x10e>
 8010874:	9a07      	ldr	r2, [sp, #28]
 8010876:	46a8      	mov	r8, r5
 8010878:	2000      	movs	r0, #0
 801087a:	250a      	movs	r5, #10
 801087c:	4641      	mov	r1, r8
 801087e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010882:	3b30      	subs	r3, #48	; 0x30
 8010884:	2b09      	cmp	r3, #9
 8010886:	d969      	bls.n	801095c <_vfiprintf_r+0x1a0>
 8010888:	b360      	cbz	r0, 80108e4 <_vfiprintf_r+0x128>
 801088a:	e024      	b.n	80108d6 <_vfiprintf_r+0x11a>
 801088c:	4b50      	ldr	r3, [pc, #320]	; (80109d0 <_vfiprintf_r+0x214>)
 801088e:	429c      	cmp	r4, r3
 8010890:	d101      	bne.n	8010896 <_vfiprintf_r+0xda>
 8010892:	68b4      	ldr	r4, [r6, #8]
 8010894:	e7a2      	b.n	80107dc <_vfiprintf_r+0x20>
 8010896:	4b4f      	ldr	r3, [pc, #316]	; (80109d4 <_vfiprintf_r+0x218>)
 8010898:	429c      	cmp	r4, r3
 801089a:	bf08      	it	eq
 801089c:	68f4      	ldreq	r4, [r6, #12]
 801089e:	e79d      	b.n	80107dc <_vfiprintf_r+0x20>
 80108a0:	4621      	mov	r1, r4
 80108a2:	4630      	mov	r0, r6
 80108a4:	f000 fb06 	bl	8010eb4 <__swsetup_r>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	d09d      	beq.n	80107e8 <_vfiprintf_r+0x2c>
 80108ac:	f04f 30ff 	mov.w	r0, #4294967295
 80108b0:	b01d      	add	sp, #116	; 0x74
 80108b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b6:	46a8      	mov	r8, r5
 80108b8:	e7a2      	b.n	8010800 <_vfiprintf_r+0x44>
 80108ba:	4a44      	ldr	r2, [pc, #272]	; (80109cc <_vfiprintf_r+0x210>)
 80108bc:	1a80      	subs	r0, r0, r2
 80108be:	fa0b f000 	lsl.w	r0, fp, r0
 80108c2:	4318      	orrs	r0, r3
 80108c4:	9004      	str	r0, [sp, #16]
 80108c6:	4645      	mov	r5, r8
 80108c8:	e7be      	b.n	8010848 <_vfiprintf_r+0x8c>
 80108ca:	9a03      	ldr	r2, [sp, #12]
 80108cc:	1d11      	adds	r1, r2, #4
 80108ce:	6812      	ldr	r2, [r2, #0]
 80108d0:	9103      	str	r1, [sp, #12]
 80108d2:	2a00      	cmp	r2, #0
 80108d4:	db01      	blt.n	80108da <_vfiprintf_r+0x11e>
 80108d6:	9207      	str	r2, [sp, #28]
 80108d8:	e004      	b.n	80108e4 <_vfiprintf_r+0x128>
 80108da:	4252      	negs	r2, r2
 80108dc:	f043 0302 	orr.w	r3, r3, #2
 80108e0:	9207      	str	r2, [sp, #28]
 80108e2:	9304      	str	r3, [sp, #16]
 80108e4:	f898 3000 	ldrb.w	r3, [r8]
 80108e8:	2b2e      	cmp	r3, #46	; 0x2e
 80108ea:	d10e      	bne.n	801090a <_vfiprintf_r+0x14e>
 80108ec:	f898 3001 	ldrb.w	r3, [r8, #1]
 80108f0:	2b2a      	cmp	r3, #42	; 0x2a
 80108f2:	d138      	bne.n	8010966 <_vfiprintf_r+0x1aa>
 80108f4:	9b03      	ldr	r3, [sp, #12]
 80108f6:	1d1a      	adds	r2, r3, #4
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	9203      	str	r2, [sp, #12]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	bfb8      	it	lt
 8010900:	f04f 33ff 	movlt.w	r3, #4294967295
 8010904:	f108 0802 	add.w	r8, r8, #2
 8010908:	9305      	str	r3, [sp, #20]
 801090a:	4d33      	ldr	r5, [pc, #204]	; (80109d8 <_vfiprintf_r+0x21c>)
 801090c:	f898 1000 	ldrb.w	r1, [r8]
 8010910:	2203      	movs	r2, #3
 8010912:	4628      	mov	r0, r5
 8010914:	f7ef fcec 	bl	80002f0 <memchr>
 8010918:	b140      	cbz	r0, 801092c <_vfiprintf_r+0x170>
 801091a:	2340      	movs	r3, #64	; 0x40
 801091c:	1b40      	subs	r0, r0, r5
 801091e:	fa03 f000 	lsl.w	r0, r3, r0
 8010922:	9b04      	ldr	r3, [sp, #16]
 8010924:	4303      	orrs	r3, r0
 8010926:	f108 0801 	add.w	r8, r8, #1
 801092a:	9304      	str	r3, [sp, #16]
 801092c:	f898 1000 	ldrb.w	r1, [r8]
 8010930:	482a      	ldr	r0, [pc, #168]	; (80109dc <_vfiprintf_r+0x220>)
 8010932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010936:	2206      	movs	r2, #6
 8010938:	f108 0701 	add.w	r7, r8, #1
 801093c:	f7ef fcd8 	bl	80002f0 <memchr>
 8010940:	2800      	cmp	r0, #0
 8010942:	d037      	beq.n	80109b4 <_vfiprintf_r+0x1f8>
 8010944:	4b26      	ldr	r3, [pc, #152]	; (80109e0 <_vfiprintf_r+0x224>)
 8010946:	bb1b      	cbnz	r3, 8010990 <_vfiprintf_r+0x1d4>
 8010948:	9b03      	ldr	r3, [sp, #12]
 801094a:	3307      	adds	r3, #7
 801094c:	f023 0307 	bic.w	r3, r3, #7
 8010950:	3308      	adds	r3, #8
 8010952:	9303      	str	r3, [sp, #12]
 8010954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010956:	444b      	add	r3, r9
 8010958:	9309      	str	r3, [sp, #36]	; 0x24
 801095a:	e750      	b.n	80107fe <_vfiprintf_r+0x42>
 801095c:	fb05 3202 	mla	r2, r5, r2, r3
 8010960:	2001      	movs	r0, #1
 8010962:	4688      	mov	r8, r1
 8010964:	e78a      	b.n	801087c <_vfiprintf_r+0xc0>
 8010966:	2300      	movs	r3, #0
 8010968:	f108 0801 	add.w	r8, r8, #1
 801096c:	9305      	str	r3, [sp, #20]
 801096e:	4619      	mov	r1, r3
 8010970:	250a      	movs	r5, #10
 8010972:	4640      	mov	r0, r8
 8010974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010978:	3a30      	subs	r2, #48	; 0x30
 801097a:	2a09      	cmp	r2, #9
 801097c:	d903      	bls.n	8010986 <_vfiprintf_r+0x1ca>
 801097e:	2b00      	cmp	r3, #0
 8010980:	d0c3      	beq.n	801090a <_vfiprintf_r+0x14e>
 8010982:	9105      	str	r1, [sp, #20]
 8010984:	e7c1      	b.n	801090a <_vfiprintf_r+0x14e>
 8010986:	fb05 2101 	mla	r1, r5, r1, r2
 801098a:	2301      	movs	r3, #1
 801098c:	4680      	mov	r8, r0
 801098e:	e7f0      	b.n	8010972 <_vfiprintf_r+0x1b6>
 8010990:	ab03      	add	r3, sp, #12
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	4622      	mov	r2, r4
 8010996:	4b13      	ldr	r3, [pc, #76]	; (80109e4 <_vfiprintf_r+0x228>)
 8010998:	a904      	add	r1, sp, #16
 801099a:	4630      	mov	r0, r6
 801099c:	f3af 8000 	nop.w
 80109a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80109a4:	4681      	mov	r9, r0
 80109a6:	d1d5      	bne.n	8010954 <_vfiprintf_r+0x198>
 80109a8:	89a3      	ldrh	r3, [r4, #12]
 80109aa:	065b      	lsls	r3, r3, #25
 80109ac:	f53f af7e 	bmi.w	80108ac <_vfiprintf_r+0xf0>
 80109b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109b2:	e77d      	b.n	80108b0 <_vfiprintf_r+0xf4>
 80109b4:	ab03      	add	r3, sp, #12
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	4622      	mov	r2, r4
 80109ba:	4b0a      	ldr	r3, [pc, #40]	; (80109e4 <_vfiprintf_r+0x228>)
 80109bc:	a904      	add	r1, sp, #16
 80109be:	4630      	mov	r0, r6
 80109c0:	f000 f888 	bl	8010ad4 <_printf_i>
 80109c4:	e7ec      	b.n	80109a0 <_vfiprintf_r+0x1e4>
 80109c6:	bf00      	nop
 80109c8:	080114a8 	.word	0x080114a8
 80109cc:	080114e8 	.word	0x080114e8
 80109d0:	080114c8 	.word	0x080114c8
 80109d4:	08011488 	.word	0x08011488
 80109d8:	080114ee 	.word	0x080114ee
 80109dc:	080114f2 	.word	0x080114f2
 80109e0:	00000000 	.word	0x00000000
 80109e4:	08010797 	.word	0x08010797

080109e8 <_printf_common>:
 80109e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	4691      	mov	r9, r2
 80109ee:	461f      	mov	r7, r3
 80109f0:	688a      	ldr	r2, [r1, #8]
 80109f2:	690b      	ldr	r3, [r1, #16]
 80109f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109f8:	4293      	cmp	r3, r2
 80109fa:	bfb8      	it	lt
 80109fc:	4613      	movlt	r3, r2
 80109fe:	f8c9 3000 	str.w	r3, [r9]
 8010a02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a06:	4606      	mov	r6, r0
 8010a08:	460c      	mov	r4, r1
 8010a0a:	b112      	cbz	r2, 8010a12 <_printf_common+0x2a>
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	f8c9 3000 	str.w	r3, [r9]
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	0699      	lsls	r1, r3, #26
 8010a16:	bf42      	ittt	mi
 8010a18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010a1c:	3302      	addmi	r3, #2
 8010a1e:	f8c9 3000 	strmi.w	r3, [r9]
 8010a22:	6825      	ldr	r5, [r4, #0]
 8010a24:	f015 0506 	ands.w	r5, r5, #6
 8010a28:	d107      	bne.n	8010a3a <_printf_common+0x52>
 8010a2a:	f104 0a19 	add.w	sl, r4, #25
 8010a2e:	68e3      	ldr	r3, [r4, #12]
 8010a30:	f8d9 2000 	ldr.w	r2, [r9]
 8010a34:	1a9b      	subs	r3, r3, r2
 8010a36:	42ab      	cmp	r3, r5
 8010a38:	dc28      	bgt.n	8010a8c <_printf_common+0xa4>
 8010a3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010a3e:	6822      	ldr	r2, [r4, #0]
 8010a40:	3300      	adds	r3, #0
 8010a42:	bf18      	it	ne
 8010a44:	2301      	movne	r3, #1
 8010a46:	0692      	lsls	r2, r2, #26
 8010a48:	d42d      	bmi.n	8010aa6 <_printf_common+0xbe>
 8010a4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a4e:	4639      	mov	r1, r7
 8010a50:	4630      	mov	r0, r6
 8010a52:	47c0      	blx	r8
 8010a54:	3001      	adds	r0, #1
 8010a56:	d020      	beq.n	8010a9a <_printf_common+0xb2>
 8010a58:	6823      	ldr	r3, [r4, #0]
 8010a5a:	68e5      	ldr	r5, [r4, #12]
 8010a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8010a60:	f003 0306 	and.w	r3, r3, #6
 8010a64:	2b04      	cmp	r3, #4
 8010a66:	bf08      	it	eq
 8010a68:	1aad      	subeq	r5, r5, r2
 8010a6a:	68a3      	ldr	r3, [r4, #8]
 8010a6c:	6922      	ldr	r2, [r4, #16]
 8010a6e:	bf0c      	ite	eq
 8010a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a74:	2500      	movne	r5, #0
 8010a76:	4293      	cmp	r3, r2
 8010a78:	bfc4      	itt	gt
 8010a7a:	1a9b      	subgt	r3, r3, r2
 8010a7c:	18ed      	addgt	r5, r5, r3
 8010a7e:	f04f 0900 	mov.w	r9, #0
 8010a82:	341a      	adds	r4, #26
 8010a84:	454d      	cmp	r5, r9
 8010a86:	d11a      	bne.n	8010abe <_printf_common+0xd6>
 8010a88:	2000      	movs	r0, #0
 8010a8a:	e008      	b.n	8010a9e <_printf_common+0xb6>
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	4652      	mov	r2, sl
 8010a90:	4639      	mov	r1, r7
 8010a92:	4630      	mov	r0, r6
 8010a94:	47c0      	blx	r8
 8010a96:	3001      	adds	r0, #1
 8010a98:	d103      	bne.n	8010aa2 <_printf_common+0xba>
 8010a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa2:	3501      	adds	r5, #1
 8010aa4:	e7c3      	b.n	8010a2e <_printf_common+0x46>
 8010aa6:	18e1      	adds	r1, r4, r3
 8010aa8:	1c5a      	adds	r2, r3, #1
 8010aaa:	2030      	movs	r0, #48	; 0x30
 8010aac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ab0:	4422      	add	r2, r4
 8010ab2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ab6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010aba:	3302      	adds	r3, #2
 8010abc:	e7c5      	b.n	8010a4a <_printf_common+0x62>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	4622      	mov	r2, r4
 8010ac2:	4639      	mov	r1, r7
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	47c0      	blx	r8
 8010ac8:	3001      	adds	r0, #1
 8010aca:	d0e6      	beq.n	8010a9a <_printf_common+0xb2>
 8010acc:	f109 0901 	add.w	r9, r9, #1
 8010ad0:	e7d8      	b.n	8010a84 <_printf_common+0x9c>
	...

08010ad4 <_printf_i>:
 8010ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ad8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010adc:	460c      	mov	r4, r1
 8010ade:	7e09      	ldrb	r1, [r1, #24]
 8010ae0:	b085      	sub	sp, #20
 8010ae2:	296e      	cmp	r1, #110	; 0x6e
 8010ae4:	4617      	mov	r7, r2
 8010ae6:	4606      	mov	r6, r0
 8010ae8:	4698      	mov	r8, r3
 8010aea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010aec:	f000 80b3 	beq.w	8010c56 <_printf_i+0x182>
 8010af0:	d822      	bhi.n	8010b38 <_printf_i+0x64>
 8010af2:	2963      	cmp	r1, #99	; 0x63
 8010af4:	d036      	beq.n	8010b64 <_printf_i+0x90>
 8010af6:	d80a      	bhi.n	8010b0e <_printf_i+0x3a>
 8010af8:	2900      	cmp	r1, #0
 8010afa:	f000 80b9 	beq.w	8010c70 <_printf_i+0x19c>
 8010afe:	2958      	cmp	r1, #88	; 0x58
 8010b00:	f000 8083 	beq.w	8010c0a <_printf_i+0x136>
 8010b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010b0c:	e032      	b.n	8010b74 <_printf_i+0xa0>
 8010b0e:	2964      	cmp	r1, #100	; 0x64
 8010b10:	d001      	beq.n	8010b16 <_printf_i+0x42>
 8010b12:	2969      	cmp	r1, #105	; 0x69
 8010b14:	d1f6      	bne.n	8010b04 <_printf_i+0x30>
 8010b16:	6820      	ldr	r0, [r4, #0]
 8010b18:	6813      	ldr	r3, [r2, #0]
 8010b1a:	0605      	lsls	r5, r0, #24
 8010b1c:	f103 0104 	add.w	r1, r3, #4
 8010b20:	d52a      	bpl.n	8010b78 <_printf_i+0xa4>
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	6011      	str	r1, [r2, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	da03      	bge.n	8010b32 <_printf_i+0x5e>
 8010b2a:	222d      	movs	r2, #45	; 0x2d
 8010b2c:	425b      	negs	r3, r3
 8010b2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010b32:	486f      	ldr	r0, [pc, #444]	; (8010cf0 <_printf_i+0x21c>)
 8010b34:	220a      	movs	r2, #10
 8010b36:	e039      	b.n	8010bac <_printf_i+0xd8>
 8010b38:	2973      	cmp	r1, #115	; 0x73
 8010b3a:	f000 809d 	beq.w	8010c78 <_printf_i+0x1a4>
 8010b3e:	d808      	bhi.n	8010b52 <_printf_i+0x7e>
 8010b40:	296f      	cmp	r1, #111	; 0x6f
 8010b42:	d020      	beq.n	8010b86 <_printf_i+0xb2>
 8010b44:	2970      	cmp	r1, #112	; 0x70
 8010b46:	d1dd      	bne.n	8010b04 <_printf_i+0x30>
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	f043 0320 	orr.w	r3, r3, #32
 8010b4e:	6023      	str	r3, [r4, #0]
 8010b50:	e003      	b.n	8010b5a <_printf_i+0x86>
 8010b52:	2975      	cmp	r1, #117	; 0x75
 8010b54:	d017      	beq.n	8010b86 <_printf_i+0xb2>
 8010b56:	2978      	cmp	r1, #120	; 0x78
 8010b58:	d1d4      	bne.n	8010b04 <_printf_i+0x30>
 8010b5a:	2378      	movs	r3, #120	; 0x78
 8010b5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b60:	4864      	ldr	r0, [pc, #400]	; (8010cf4 <_printf_i+0x220>)
 8010b62:	e055      	b.n	8010c10 <_printf_i+0x13c>
 8010b64:	6813      	ldr	r3, [r2, #0]
 8010b66:	1d19      	adds	r1, r3, #4
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	6011      	str	r1, [r2, #0]
 8010b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b74:	2301      	movs	r3, #1
 8010b76:	e08c      	b.n	8010c92 <_printf_i+0x1be>
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	6011      	str	r1, [r2, #0]
 8010b7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b80:	bf18      	it	ne
 8010b82:	b21b      	sxthne	r3, r3
 8010b84:	e7cf      	b.n	8010b26 <_printf_i+0x52>
 8010b86:	6813      	ldr	r3, [r2, #0]
 8010b88:	6825      	ldr	r5, [r4, #0]
 8010b8a:	1d18      	adds	r0, r3, #4
 8010b8c:	6010      	str	r0, [r2, #0]
 8010b8e:	0628      	lsls	r0, r5, #24
 8010b90:	d501      	bpl.n	8010b96 <_printf_i+0xc2>
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	e002      	b.n	8010b9c <_printf_i+0xc8>
 8010b96:	0668      	lsls	r0, r5, #25
 8010b98:	d5fb      	bpl.n	8010b92 <_printf_i+0xbe>
 8010b9a:	881b      	ldrh	r3, [r3, #0]
 8010b9c:	4854      	ldr	r0, [pc, #336]	; (8010cf0 <_printf_i+0x21c>)
 8010b9e:	296f      	cmp	r1, #111	; 0x6f
 8010ba0:	bf14      	ite	ne
 8010ba2:	220a      	movne	r2, #10
 8010ba4:	2208      	moveq	r2, #8
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bac:	6865      	ldr	r5, [r4, #4]
 8010bae:	60a5      	str	r5, [r4, #8]
 8010bb0:	2d00      	cmp	r5, #0
 8010bb2:	f2c0 8095 	blt.w	8010ce0 <_printf_i+0x20c>
 8010bb6:	6821      	ldr	r1, [r4, #0]
 8010bb8:	f021 0104 	bic.w	r1, r1, #4
 8010bbc:	6021      	str	r1, [r4, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d13d      	bne.n	8010c3e <_printf_i+0x16a>
 8010bc2:	2d00      	cmp	r5, #0
 8010bc4:	f040 808e 	bne.w	8010ce4 <_printf_i+0x210>
 8010bc8:	4665      	mov	r5, ip
 8010bca:	2a08      	cmp	r2, #8
 8010bcc:	d10b      	bne.n	8010be6 <_printf_i+0x112>
 8010bce:	6823      	ldr	r3, [r4, #0]
 8010bd0:	07db      	lsls	r3, r3, #31
 8010bd2:	d508      	bpl.n	8010be6 <_printf_i+0x112>
 8010bd4:	6923      	ldr	r3, [r4, #16]
 8010bd6:	6862      	ldr	r2, [r4, #4]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	bfde      	ittt	le
 8010bdc:	2330      	movle	r3, #48	; 0x30
 8010bde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010be2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010be6:	ebac 0305 	sub.w	r3, ip, r5
 8010bea:	6123      	str	r3, [r4, #16]
 8010bec:	f8cd 8000 	str.w	r8, [sp]
 8010bf0:	463b      	mov	r3, r7
 8010bf2:	aa03      	add	r2, sp, #12
 8010bf4:	4621      	mov	r1, r4
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	f7ff fef6 	bl	80109e8 <_printf_common>
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	d14d      	bne.n	8010c9c <_printf_i+0x1c8>
 8010c00:	f04f 30ff 	mov.w	r0, #4294967295
 8010c04:	b005      	add	sp, #20
 8010c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c0a:	4839      	ldr	r0, [pc, #228]	; (8010cf0 <_printf_i+0x21c>)
 8010c0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010c10:	6813      	ldr	r3, [r2, #0]
 8010c12:	6821      	ldr	r1, [r4, #0]
 8010c14:	1d1d      	adds	r5, r3, #4
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6015      	str	r5, [r2, #0]
 8010c1a:	060a      	lsls	r2, r1, #24
 8010c1c:	d50b      	bpl.n	8010c36 <_printf_i+0x162>
 8010c1e:	07ca      	lsls	r2, r1, #31
 8010c20:	bf44      	itt	mi
 8010c22:	f041 0120 	orrmi.w	r1, r1, #32
 8010c26:	6021      	strmi	r1, [r4, #0]
 8010c28:	b91b      	cbnz	r3, 8010c32 <_printf_i+0x15e>
 8010c2a:	6822      	ldr	r2, [r4, #0]
 8010c2c:	f022 0220 	bic.w	r2, r2, #32
 8010c30:	6022      	str	r2, [r4, #0]
 8010c32:	2210      	movs	r2, #16
 8010c34:	e7b7      	b.n	8010ba6 <_printf_i+0xd2>
 8010c36:	064d      	lsls	r5, r1, #25
 8010c38:	bf48      	it	mi
 8010c3a:	b29b      	uxthmi	r3, r3
 8010c3c:	e7ef      	b.n	8010c1e <_printf_i+0x14a>
 8010c3e:	4665      	mov	r5, ip
 8010c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c44:	fb02 3311 	mls	r3, r2, r1, r3
 8010c48:	5cc3      	ldrb	r3, [r0, r3]
 8010c4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010c4e:	460b      	mov	r3, r1
 8010c50:	2900      	cmp	r1, #0
 8010c52:	d1f5      	bne.n	8010c40 <_printf_i+0x16c>
 8010c54:	e7b9      	b.n	8010bca <_printf_i+0xf6>
 8010c56:	6813      	ldr	r3, [r2, #0]
 8010c58:	6825      	ldr	r5, [r4, #0]
 8010c5a:	6961      	ldr	r1, [r4, #20]
 8010c5c:	1d18      	adds	r0, r3, #4
 8010c5e:	6010      	str	r0, [r2, #0]
 8010c60:	0628      	lsls	r0, r5, #24
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	d501      	bpl.n	8010c6a <_printf_i+0x196>
 8010c66:	6019      	str	r1, [r3, #0]
 8010c68:	e002      	b.n	8010c70 <_printf_i+0x19c>
 8010c6a:	066a      	lsls	r2, r5, #25
 8010c6c:	d5fb      	bpl.n	8010c66 <_printf_i+0x192>
 8010c6e:	8019      	strh	r1, [r3, #0]
 8010c70:	2300      	movs	r3, #0
 8010c72:	6123      	str	r3, [r4, #16]
 8010c74:	4665      	mov	r5, ip
 8010c76:	e7b9      	b.n	8010bec <_printf_i+0x118>
 8010c78:	6813      	ldr	r3, [r2, #0]
 8010c7a:	1d19      	adds	r1, r3, #4
 8010c7c:	6011      	str	r1, [r2, #0]
 8010c7e:	681d      	ldr	r5, [r3, #0]
 8010c80:	6862      	ldr	r2, [r4, #4]
 8010c82:	2100      	movs	r1, #0
 8010c84:	4628      	mov	r0, r5
 8010c86:	f7ef fb33 	bl	80002f0 <memchr>
 8010c8a:	b108      	cbz	r0, 8010c90 <_printf_i+0x1bc>
 8010c8c:	1b40      	subs	r0, r0, r5
 8010c8e:	6060      	str	r0, [r4, #4]
 8010c90:	6863      	ldr	r3, [r4, #4]
 8010c92:	6123      	str	r3, [r4, #16]
 8010c94:	2300      	movs	r3, #0
 8010c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c9a:	e7a7      	b.n	8010bec <_printf_i+0x118>
 8010c9c:	6923      	ldr	r3, [r4, #16]
 8010c9e:	462a      	mov	r2, r5
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	47c0      	blx	r8
 8010ca6:	3001      	adds	r0, #1
 8010ca8:	d0aa      	beq.n	8010c00 <_printf_i+0x12c>
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	079b      	lsls	r3, r3, #30
 8010cae:	d413      	bmi.n	8010cd8 <_printf_i+0x204>
 8010cb0:	68e0      	ldr	r0, [r4, #12]
 8010cb2:	9b03      	ldr	r3, [sp, #12]
 8010cb4:	4298      	cmp	r0, r3
 8010cb6:	bfb8      	it	lt
 8010cb8:	4618      	movlt	r0, r3
 8010cba:	e7a3      	b.n	8010c04 <_printf_i+0x130>
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	464a      	mov	r2, r9
 8010cc0:	4639      	mov	r1, r7
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	47c0      	blx	r8
 8010cc6:	3001      	adds	r0, #1
 8010cc8:	d09a      	beq.n	8010c00 <_printf_i+0x12c>
 8010cca:	3501      	adds	r5, #1
 8010ccc:	68e3      	ldr	r3, [r4, #12]
 8010cce:	9a03      	ldr	r2, [sp, #12]
 8010cd0:	1a9b      	subs	r3, r3, r2
 8010cd2:	42ab      	cmp	r3, r5
 8010cd4:	dcf2      	bgt.n	8010cbc <_printf_i+0x1e8>
 8010cd6:	e7eb      	b.n	8010cb0 <_printf_i+0x1dc>
 8010cd8:	2500      	movs	r5, #0
 8010cda:	f104 0919 	add.w	r9, r4, #25
 8010cde:	e7f5      	b.n	8010ccc <_printf_i+0x1f8>
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d1ac      	bne.n	8010c3e <_printf_i+0x16a>
 8010ce4:	7803      	ldrb	r3, [r0, #0]
 8010ce6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010cea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010cee:	e76c      	b.n	8010bca <_printf_i+0xf6>
 8010cf0:	080114f9 	.word	0x080114f9
 8010cf4:	0801150a 	.word	0x0801150a

08010cf8 <_putc_r>:
 8010cf8:	b570      	push	{r4, r5, r6, lr}
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	4614      	mov	r4, r2
 8010cfe:	4606      	mov	r6, r0
 8010d00:	b118      	cbz	r0, 8010d0a <_putc_r+0x12>
 8010d02:	6983      	ldr	r3, [r0, #24]
 8010d04:	b90b      	cbnz	r3, 8010d0a <_putc_r+0x12>
 8010d06:	f7ff fb51 	bl	80103ac <__sinit>
 8010d0a:	4b13      	ldr	r3, [pc, #76]	; (8010d58 <_putc_r+0x60>)
 8010d0c:	429c      	cmp	r4, r3
 8010d0e:	d112      	bne.n	8010d36 <_putc_r+0x3e>
 8010d10:	6874      	ldr	r4, [r6, #4]
 8010d12:	68a3      	ldr	r3, [r4, #8]
 8010d14:	3b01      	subs	r3, #1
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	60a3      	str	r3, [r4, #8]
 8010d1a:	da16      	bge.n	8010d4a <_putc_r+0x52>
 8010d1c:	69a2      	ldr	r2, [r4, #24]
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	db02      	blt.n	8010d28 <_putc_r+0x30>
 8010d22:	b2eb      	uxtb	r3, r5
 8010d24:	2b0a      	cmp	r3, #10
 8010d26:	d110      	bne.n	8010d4a <_putc_r+0x52>
 8010d28:	4622      	mov	r2, r4
 8010d2a:	4629      	mov	r1, r5
 8010d2c:	4630      	mov	r0, r6
 8010d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d32:	f000 b85b 	b.w	8010dec <__swbuf_r>
 8010d36:	4b09      	ldr	r3, [pc, #36]	; (8010d5c <_putc_r+0x64>)
 8010d38:	429c      	cmp	r4, r3
 8010d3a:	d101      	bne.n	8010d40 <_putc_r+0x48>
 8010d3c:	68b4      	ldr	r4, [r6, #8]
 8010d3e:	e7e8      	b.n	8010d12 <_putc_r+0x1a>
 8010d40:	4b07      	ldr	r3, [pc, #28]	; (8010d60 <_putc_r+0x68>)
 8010d42:	429c      	cmp	r4, r3
 8010d44:	bf08      	it	eq
 8010d46:	68f4      	ldreq	r4, [r6, #12]
 8010d48:	e7e3      	b.n	8010d12 <_putc_r+0x1a>
 8010d4a:	6823      	ldr	r3, [r4, #0]
 8010d4c:	1c5a      	adds	r2, r3, #1
 8010d4e:	6022      	str	r2, [r4, #0]
 8010d50:	701d      	strb	r5, [r3, #0]
 8010d52:	b2e8      	uxtb	r0, r5
 8010d54:	bd70      	pop	{r4, r5, r6, pc}
 8010d56:	bf00      	nop
 8010d58:	080114a8 	.word	0x080114a8
 8010d5c:	080114c8 	.word	0x080114c8
 8010d60:	08011488 	.word	0x08011488

08010d64 <__sread>:
 8010d64:	b510      	push	{r4, lr}
 8010d66:	460c      	mov	r4, r1
 8010d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d6c:	f000 fa86 	bl	801127c <_read_r>
 8010d70:	2800      	cmp	r0, #0
 8010d72:	bfab      	itete	ge
 8010d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d76:	89a3      	ldrhlt	r3, [r4, #12]
 8010d78:	181b      	addge	r3, r3, r0
 8010d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d7e:	bfac      	ite	ge
 8010d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d82:	81a3      	strhlt	r3, [r4, #12]
 8010d84:	bd10      	pop	{r4, pc}

08010d86 <__swrite>:
 8010d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d8a:	461f      	mov	r7, r3
 8010d8c:	898b      	ldrh	r3, [r1, #12]
 8010d8e:	05db      	lsls	r3, r3, #23
 8010d90:	4605      	mov	r5, r0
 8010d92:	460c      	mov	r4, r1
 8010d94:	4616      	mov	r6, r2
 8010d96:	d505      	bpl.n	8010da4 <__swrite+0x1e>
 8010d98:	2302      	movs	r3, #2
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010da0:	f000 f9b6 	bl	8011110 <_lseek_r>
 8010da4:	89a3      	ldrh	r3, [r4, #12]
 8010da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010dae:	81a3      	strh	r3, [r4, #12]
 8010db0:	4632      	mov	r2, r6
 8010db2:	463b      	mov	r3, r7
 8010db4:	4628      	mov	r0, r5
 8010db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dba:	f000 b869 	b.w	8010e90 <_write_r>

08010dbe <__sseek>:
 8010dbe:	b510      	push	{r4, lr}
 8010dc0:	460c      	mov	r4, r1
 8010dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dc6:	f000 f9a3 	bl	8011110 <_lseek_r>
 8010dca:	1c43      	adds	r3, r0, #1
 8010dcc:	89a3      	ldrh	r3, [r4, #12]
 8010dce:	bf15      	itete	ne
 8010dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010dda:	81a3      	strheq	r3, [r4, #12]
 8010ddc:	bf18      	it	ne
 8010dde:	81a3      	strhne	r3, [r4, #12]
 8010de0:	bd10      	pop	{r4, pc}

08010de2 <__sclose>:
 8010de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010de6:	f000 b8d3 	b.w	8010f90 <_close_r>
	...

08010dec <__swbuf_r>:
 8010dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dee:	460e      	mov	r6, r1
 8010df0:	4614      	mov	r4, r2
 8010df2:	4605      	mov	r5, r0
 8010df4:	b118      	cbz	r0, 8010dfe <__swbuf_r+0x12>
 8010df6:	6983      	ldr	r3, [r0, #24]
 8010df8:	b90b      	cbnz	r3, 8010dfe <__swbuf_r+0x12>
 8010dfa:	f7ff fad7 	bl	80103ac <__sinit>
 8010dfe:	4b21      	ldr	r3, [pc, #132]	; (8010e84 <__swbuf_r+0x98>)
 8010e00:	429c      	cmp	r4, r3
 8010e02:	d12a      	bne.n	8010e5a <__swbuf_r+0x6e>
 8010e04:	686c      	ldr	r4, [r5, #4]
 8010e06:	69a3      	ldr	r3, [r4, #24]
 8010e08:	60a3      	str	r3, [r4, #8]
 8010e0a:	89a3      	ldrh	r3, [r4, #12]
 8010e0c:	071a      	lsls	r2, r3, #28
 8010e0e:	d52e      	bpl.n	8010e6e <__swbuf_r+0x82>
 8010e10:	6923      	ldr	r3, [r4, #16]
 8010e12:	b363      	cbz	r3, 8010e6e <__swbuf_r+0x82>
 8010e14:	6923      	ldr	r3, [r4, #16]
 8010e16:	6820      	ldr	r0, [r4, #0]
 8010e18:	1ac0      	subs	r0, r0, r3
 8010e1a:	6963      	ldr	r3, [r4, #20]
 8010e1c:	b2f6      	uxtb	r6, r6
 8010e1e:	4283      	cmp	r3, r0
 8010e20:	4637      	mov	r7, r6
 8010e22:	dc04      	bgt.n	8010e2e <__swbuf_r+0x42>
 8010e24:	4621      	mov	r1, r4
 8010e26:	4628      	mov	r0, r5
 8010e28:	f000 f948 	bl	80110bc <_fflush_r>
 8010e2c:	bb28      	cbnz	r0, 8010e7a <__swbuf_r+0x8e>
 8010e2e:	68a3      	ldr	r3, [r4, #8]
 8010e30:	3b01      	subs	r3, #1
 8010e32:	60a3      	str	r3, [r4, #8]
 8010e34:	6823      	ldr	r3, [r4, #0]
 8010e36:	1c5a      	adds	r2, r3, #1
 8010e38:	6022      	str	r2, [r4, #0]
 8010e3a:	701e      	strb	r6, [r3, #0]
 8010e3c:	6963      	ldr	r3, [r4, #20]
 8010e3e:	3001      	adds	r0, #1
 8010e40:	4283      	cmp	r3, r0
 8010e42:	d004      	beq.n	8010e4e <__swbuf_r+0x62>
 8010e44:	89a3      	ldrh	r3, [r4, #12]
 8010e46:	07db      	lsls	r3, r3, #31
 8010e48:	d519      	bpl.n	8010e7e <__swbuf_r+0x92>
 8010e4a:	2e0a      	cmp	r6, #10
 8010e4c:	d117      	bne.n	8010e7e <__swbuf_r+0x92>
 8010e4e:	4621      	mov	r1, r4
 8010e50:	4628      	mov	r0, r5
 8010e52:	f000 f933 	bl	80110bc <_fflush_r>
 8010e56:	b190      	cbz	r0, 8010e7e <__swbuf_r+0x92>
 8010e58:	e00f      	b.n	8010e7a <__swbuf_r+0x8e>
 8010e5a:	4b0b      	ldr	r3, [pc, #44]	; (8010e88 <__swbuf_r+0x9c>)
 8010e5c:	429c      	cmp	r4, r3
 8010e5e:	d101      	bne.n	8010e64 <__swbuf_r+0x78>
 8010e60:	68ac      	ldr	r4, [r5, #8]
 8010e62:	e7d0      	b.n	8010e06 <__swbuf_r+0x1a>
 8010e64:	4b09      	ldr	r3, [pc, #36]	; (8010e8c <__swbuf_r+0xa0>)
 8010e66:	429c      	cmp	r4, r3
 8010e68:	bf08      	it	eq
 8010e6a:	68ec      	ldreq	r4, [r5, #12]
 8010e6c:	e7cb      	b.n	8010e06 <__swbuf_r+0x1a>
 8010e6e:	4621      	mov	r1, r4
 8010e70:	4628      	mov	r0, r5
 8010e72:	f000 f81f 	bl	8010eb4 <__swsetup_r>
 8010e76:	2800      	cmp	r0, #0
 8010e78:	d0cc      	beq.n	8010e14 <__swbuf_r+0x28>
 8010e7a:	f04f 37ff 	mov.w	r7, #4294967295
 8010e7e:	4638      	mov	r0, r7
 8010e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e82:	bf00      	nop
 8010e84:	080114a8 	.word	0x080114a8
 8010e88:	080114c8 	.word	0x080114c8
 8010e8c:	08011488 	.word	0x08011488

08010e90 <_write_r>:
 8010e90:	b538      	push	{r3, r4, r5, lr}
 8010e92:	4c07      	ldr	r4, [pc, #28]	; (8010eb0 <_write_r+0x20>)
 8010e94:	4605      	mov	r5, r0
 8010e96:	4608      	mov	r0, r1
 8010e98:	4611      	mov	r1, r2
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	6022      	str	r2, [r4, #0]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	f7ef fcf1 	bl	8000886 <_write>
 8010ea4:	1c43      	adds	r3, r0, #1
 8010ea6:	d102      	bne.n	8010eae <_write_r+0x1e>
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	b103      	cbz	r3, 8010eae <_write_r+0x1e>
 8010eac:	602b      	str	r3, [r5, #0]
 8010eae:	bd38      	pop	{r3, r4, r5, pc}
 8010eb0:	24002388 	.word	0x24002388

08010eb4 <__swsetup_r>:
 8010eb4:	4b32      	ldr	r3, [pc, #200]	; (8010f80 <__swsetup_r+0xcc>)
 8010eb6:	b570      	push	{r4, r5, r6, lr}
 8010eb8:	681d      	ldr	r5, [r3, #0]
 8010eba:	4606      	mov	r6, r0
 8010ebc:	460c      	mov	r4, r1
 8010ebe:	b125      	cbz	r5, 8010eca <__swsetup_r+0x16>
 8010ec0:	69ab      	ldr	r3, [r5, #24]
 8010ec2:	b913      	cbnz	r3, 8010eca <__swsetup_r+0x16>
 8010ec4:	4628      	mov	r0, r5
 8010ec6:	f7ff fa71 	bl	80103ac <__sinit>
 8010eca:	4b2e      	ldr	r3, [pc, #184]	; (8010f84 <__swsetup_r+0xd0>)
 8010ecc:	429c      	cmp	r4, r3
 8010ece:	d10f      	bne.n	8010ef0 <__swsetup_r+0x3c>
 8010ed0:	686c      	ldr	r4, [r5, #4]
 8010ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ed6:	b29a      	uxth	r2, r3
 8010ed8:	0715      	lsls	r5, r2, #28
 8010eda:	d42c      	bmi.n	8010f36 <__swsetup_r+0x82>
 8010edc:	06d0      	lsls	r0, r2, #27
 8010ede:	d411      	bmi.n	8010f04 <__swsetup_r+0x50>
 8010ee0:	2209      	movs	r2, #9
 8010ee2:	6032      	str	r2, [r6, #0]
 8010ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ee8:	81a3      	strh	r3, [r4, #12]
 8010eea:	f04f 30ff 	mov.w	r0, #4294967295
 8010eee:	e03e      	b.n	8010f6e <__swsetup_r+0xba>
 8010ef0:	4b25      	ldr	r3, [pc, #148]	; (8010f88 <__swsetup_r+0xd4>)
 8010ef2:	429c      	cmp	r4, r3
 8010ef4:	d101      	bne.n	8010efa <__swsetup_r+0x46>
 8010ef6:	68ac      	ldr	r4, [r5, #8]
 8010ef8:	e7eb      	b.n	8010ed2 <__swsetup_r+0x1e>
 8010efa:	4b24      	ldr	r3, [pc, #144]	; (8010f8c <__swsetup_r+0xd8>)
 8010efc:	429c      	cmp	r4, r3
 8010efe:	bf08      	it	eq
 8010f00:	68ec      	ldreq	r4, [r5, #12]
 8010f02:	e7e6      	b.n	8010ed2 <__swsetup_r+0x1e>
 8010f04:	0751      	lsls	r1, r2, #29
 8010f06:	d512      	bpl.n	8010f2e <__swsetup_r+0x7a>
 8010f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f0a:	b141      	cbz	r1, 8010f1e <__swsetup_r+0x6a>
 8010f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f10:	4299      	cmp	r1, r3
 8010f12:	d002      	beq.n	8010f1a <__swsetup_r+0x66>
 8010f14:	4630      	mov	r0, r6
 8010f16:	f7ff f8f1 	bl	80100fc <_free_r>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8010f1e:	89a3      	ldrh	r3, [r4, #12]
 8010f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f24:	81a3      	strh	r3, [r4, #12]
 8010f26:	2300      	movs	r3, #0
 8010f28:	6063      	str	r3, [r4, #4]
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	6023      	str	r3, [r4, #0]
 8010f2e:	89a3      	ldrh	r3, [r4, #12]
 8010f30:	f043 0308 	orr.w	r3, r3, #8
 8010f34:	81a3      	strh	r3, [r4, #12]
 8010f36:	6923      	ldr	r3, [r4, #16]
 8010f38:	b94b      	cbnz	r3, 8010f4e <__swsetup_r+0x9a>
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f44:	d003      	beq.n	8010f4e <__swsetup_r+0x9a>
 8010f46:	4621      	mov	r1, r4
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f000 f917 	bl	801117c <__smakebuf_r>
 8010f4e:	89a2      	ldrh	r2, [r4, #12]
 8010f50:	f012 0301 	ands.w	r3, r2, #1
 8010f54:	d00c      	beq.n	8010f70 <__swsetup_r+0xbc>
 8010f56:	2300      	movs	r3, #0
 8010f58:	60a3      	str	r3, [r4, #8]
 8010f5a:	6963      	ldr	r3, [r4, #20]
 8010f5c:	425b      	negs	r3, r3
 8010f5e:	61a3      	str	r3, [r4, #24]
 8010f60:	6923      	ldr	r3, [r4, #16]
 8010f62:	b953      	cbnz	r3, 8010f7a <__swsetup_r+0xc6>
 8010f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010f6c:	d1ba      	bne.n	8010ee4 <__swsetup_r+0x30>
 8010f6e:	bd70      	pop	{r4, r5, r6, pc}
 8010f70:	0792      	lsls	r2, r2, #30
 8010f72:	bf58      	it	pl
 8010f74:	6963      	ldrpl	r3, [r4, #20]
 8010f76:	60a3      	str	r3, [r4, #8]
 8010f78:	e7f2      	b.n	8010f60 <__swsetup_r+0xac>
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	e7f7      	b.n	8010f6e <__swsetup_r+0xba>
 8010f7e:	bf00      	nop
 8010f80:	24000184 	.word	0x24000184
 8010f84:	080114a8 	.word	0x080114a8
 8010f88:	080114c8 	.word	0x080114c8
 8010f8c:	08011488 	.word	0x08011488

08010f90 <_close_r>:
 8010f90:	b538      	push	{r3, r4, r5, lr}
 8010f92:	4c06      	ldr	r4, [pc, #24]	; (8010fac <_close_r+0x1c>)
 8010f94:	2300      	movs	r3, #0
 8010f96:	4605      	mov	r5, r0
 8010f98:	4608      	mov	r0, r1
 8010f9a:	6023      	str	r3, [r4, #0]
 8010f9c:	f7f0 fbad 	bl	80016fa <_close>
 8010fa0:	1c43      	adds	r3, r0, #1
 8010fa2:	d102      	bne.n	8010faa <_close_r+0x1a>
 8010fa4:	6823      	ldr	r3, [r4, #0]
 8010fa6:	b103      	cbz	r3, 8010faa <_close_r+0x1a>
 8010fa8:	602b      	str	r3, [r5, #0]
 8010faa:	bd38      	pop	{r3, r4, r5, pc}
 8010fac:	24002388 	.word	0x24002388

08010fb0 <__sflush_r>:
 8010fb0:	898a      	ldrh	r2, [r1, #12]
 8010fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb6:	4605      	mov	r5, r0
 8010fb8:	0710      	lsls	r0, r2, #28
 8010fba:	460c      	mov	r4, r1
 8010fbc:	d458      	bmi.n	8011070 <__sflush_r+0xc0>
 8010fbe:	684b      	ldr	r3, [r1, #4]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	dc05      	bgt.n	8010fd0 <__sflush_r+0x20>
 8010fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	dc02      	bgt.n	8010fd0 <__sflush_r+0x20>
 8010fca:	2000      	movs	r0, #0
 8010fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010fd2:	2e00      	cmp	r6, #0
 8010fd4:	d0f9      	beq.n	8010fca <__sflush_r+0x1a>
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010fdc:	682f      	ldr	r7, [r5, #0]
 8010fde:	6a21      	ldr	r1, [r4, #32]
 8010fe0:	602b      	str	r3, [r5, #0]
 8010fe2:	d032      	beq.n	801104a <__sflush_r+0x9a>
 8010fe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010fe6:	89a3      	ldrh	r3, [r4, #12]
 8010fe8:	075a      	lsls	r2, r3, #29
 8010fea:	d505      	bpl.n	8010ff8 <__sflush_r+0x48>
 8010fec:	6863      	ldr	r3, [r4, #4]
 8010fee:	1ac0      	subs	r0, r0, r3
 8010ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ff2:	b10b      	cbz	r3, 8010ff8 <__sflush_r+0x48>
 8010ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ff6:	1ac0      	subs	r0, r0, r3
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	4602      	mov	r2, r0
 8010ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ffe:	6a21      	ldr	r1, [r4, #32]
 8011000:	4628      	mov	r0, r5
 8011002:	47b0      	blx	r6
 8011004:	1c43      	adds	r3, r0, #1
 8011006:	89a3      	ldrh	r3, [r4, #12]
 8011008:	d106      	bne.n	8011018 <__sflush_r+0x68>
 801100a:	6829      	ldr	r1, [r5, #0]
 801100c:	291d      	cmp	r1, #29
 801100e:	d848      	bhi.n	80110a2 <__sflush_r+0xf2>
 8011010:	4a29      	ldr	r2, [pc, #164]	; (80110b8 <__sflush_r+0x108>)
 8011012:	40ca      	lsrs	r2, r1
 8011014:	07d6      	lsls	r6, r2, #31
 8011016:	d544      	bpl.n	80110a2 <__sflush_r+0xf2>
 8011018:	2200      	movs	r2, #0
 801101a:	6062      	str	r2, [r4, #4]
 801101c:	04d9      	lsls	r1, r3, #19
 801101e:	6922      	ldr	r2, [r4, #16]
 8011020:	6022      	str	r2, [r4, #0]
 8011022:	d504      	bpl.n	801102e <__sflush_r+0x7e>
 8011024:	1c42      	adds	r2, r0, #1
 8011026:	d101      	bne.n	801102c <__sflush_r+0x7c>
 8011028:	682b      	ldr	r3, [r5, #0]
 801102a:	b903      	cbnz	r3, 801102e <__sflush_r+0x7e>
 801102c:	6560      	str	r0, [r4, #84]	; 0x54
 801102e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011030:	602f      	str	r7, [r5, #0]
 8011032:	2900      	cmp	r1, #0
 8011034:	d0c9      	beq.n	8010fca <__sflush_r+0x1a>
 8011036:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801103a:	4299      	cmp	r1, r3
 801103c:	d002      	beq.n	8011044 <__sflush_r+0x94>
 801103e:	4628      	mov	r0, r5
 8011040:	f7ff f85c 	bl	80100fc <_free_r>
 8011044:	2000      	movs	r0, #0
 8011046:	6360      	str	r0, [r4, #52]	; 0x34
 8011048:	e7c0      	b.n	8010fcc <__sflush_r+0x1c>
 801104a:	2301      	movs	r3, #1
 801104c:	4628      	mov	r0, r5
 801104e:	47b0      	blx	r6
 8011050:	1c41      	adds	r1, r0, #1
 8011052:	d1c8      	bne.n	8010fe6 <__sflush_r+0x36>
 8011054:	682b      	ldr	r3, [r5, #0]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d0c5      	beq.n	8010fe6 <__sflush_r+0x36>
 801105a:	2b1d      	cmp	r3, #29
 801105c:	d001      	beq.n	8011062 <__sflush_r+0xb2>
 801105e:	2b16      	cmp	r3, #22
 8011060:	d101      	bne.n	8011066 <__sflush_r+0xb6>
 8011062:	602f      	str	r7, [r5, #0]
 8011064:	e7b1      	b.n	8010fca <__sflush_r+0x1a>
 8011066:	89a3      	ldrh	r3, [r4, #12]
 8011068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801106c:	81a3      	strh	r3, [r4, #12]
 801106e:	e7ad      	b.n	8010fcc <__sflush_r+0x1c>
 8011070:	690f      	ldr	r7, [r1, #16]
 8011072:	2f00      	cmp	r7, #0
 8011074:	d0a9      	beq.n	8010fca <__sflush_r+0x1a>
 8011076:	0793      	lsls	r3, r2, #30
 8011078:	680e      	ldr	r6, [r1, #0]
 801107a:	bf08      	it	eq
 801107c:	694b      	ldreq	r3, [r1, #20]
 801107e:	600f      	str	r7, [r1, #0]
 8011080:	bf18      	it	ne
 8011082:	2300      	movne	r3, #0
 8011084:	eba6 0807 	sub.w	r8, r6, r7
 8011088:	608b      	str	r3, [r1, #8]
 801108a:	f1b8 0f00 	cmp.w	r8, #0
 801108e:	dd9c      	ble.n	8010fca <__sflush_r+0x1a>
 8011090:	4643      	mov	r3, r8
 8011092:	463a      	mov	r2, r7
 8011094:	6a21      	ldr	r1, [r4, #32]
 8011096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011098:	4628      	mov	r0, r5
 801109a:	47b0      	blx	r6
 801109c:	2800      	cmp	r0, #0
 801109e:	dc06      	bgt.n	80110ae <__sflush_r+0xfe>
 80110a0:	89a3      	ldrh	r3, [r4, #12]
 80110a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110a6:	81a3      	strh	r3, [r4, #12]
 80110a8:	f04f 30ff 	mov.w	r0, #4294967295
 80110ac:	e78e      	b.n	8010fcc <__sflush_r+0x1c>
 80110ae:	4407      	add	r7, r0
 80110b0:	eba8 0800 	sub.w	r8, r8, r0
 80110b4:	e7e9      	b.n	801108a <__sflush_r+0xda>
 80110b6:	bf00      	nop
 80110b8:	20400001 	.word	0x20400001

080110bc <_fflush_r>:
 80110bc:	b538      	push	{r3, r4, r5, lr}
 80110be:	690b      	ldr	r3, [r1, #16]
 80110c0:	4605      	mov	r5, r0
 80110c2:	460c      	mov	r4, r1
 80110c4:	b1db      	cbz	r3, 80110fe <_fflush_r+0x42>
 80110c6:	b118      	cbz	r0, 80110d0 <_fflush_r+0x14>
 80110c8:	6983      	ldr	r3, [r0, #24]
 80110ca:	b90b      	cbnz	r3, 80110d0 <_fflush_r+0x14>
 80110cc:	f7ff f96e 	bl	80103ac <__sinit>
 80110d0:	4b0c      	ldr	r3, [pc, #48]	; (8011104 <_fflush_r+0x48>)
 80110d2:	429c      	cmp	r4, r3
 80110d4:	d109      	bne.n	80110ea <_fflush_r+0x2e>
 80110d6:	686c      	ldr	r4, [r5, #4]
 80110d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110dc:	b17b      	cbz	r3, 80110fe <_fflush_r+0x42>
 80110de:	4621      	mov	r1, r4
 80110e0:	4628      	mov	r0, r5
 80110e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110e6:	f7ff bf63 	b.w	8010fb0 <__sflush_r>
 80110ea:	4b07      	ldr	r3, [pc, #28]	; (8011108 <_fflush_r+0x4c>)
 80110ec:	429c      	cmp	r4, r3
 80110ee:	d101      	bne.n	80110f4 <_fflush_r+0x38>
 80110f0:	68ac      	ldr	r4, [r5, #8]
 80110f2:	e7f1      	b.n	80110d8 <_fflush_r+0x1c>
 80110f4:	4b05      	ldr	r3, [pc, #20]	; (801110c <_fflush_r+0x50>)
 80110f6:	429c      	cmp	r4, r3
 80110f8:	bf08      	it	eq
 80110fa:	68ec      	ldreq	r4, [r5, #12]
 80110fc:	e7ec      	b.n	80110d8 <_fflush_r+0x1c>
 80110fe:	2000      	movs	r0, #0
 8011100:	bd38      	pop	{r3, r4, r5, pc}
 8011102:	bf00      	nop
 8011104:	080114a8 	.word	0x080114a8
 8011108:	080114c8 	.word	0x080114c8
 801110c:	08011488 	.word	0x08011488

08011110 <_lseek_r>:
 8011110:	b538      	push	{r3, r4, r5, lr}
 8011112:	4c07      	ldr	r4, [pc, #28]	; (8011130 <_lseek_r+0x20>)
 8011114:	4605      	mov	r5, r0
 8011116:	4608      	mov	r0, r1
 8011118:	4611      	mov	r1, r2
 801111a:	2200      	movs	r2, #0
 801111c:	6022      	str	r2, [r4, #0]
 801111e:	461a      	mov	r2, r3
 8011120:	f7f0 fb12 	bl	8001748 <_lseek>
 8011124:	1c43      	adds	r3, r0, #1
 8011126:	d102      	bne.n	801112e <_lseek_r+0x1e>
 8011128:	6823      	ldr	r3, [r4, #0]
 801112a:	b103      	cbz	r3, 801112e <_lseek_r+0x1e>
 801112c:	602b      	str	r3, [r5, #0]
 801112e:	bd38      	pop	{r3, r4, r5, pc}
 8011130:	24002388 	.word	0x24002388

08011134 <__swhatbuf_r>:
 8011134:	b570      	push	{r4, r5, r6, lr}
 8011136:	460e      	mov	r6, r1
 8011138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801113c:	2900      	cmp	r1, #0
 801113e:	b096      	sub	sp, #88	; 0x58
 8011140:	4614      	mov	r4, r2
 8011142:	461d      	mov	r5, r3
 8011144:	da07      	bge.n	8011156 <__swhatbuf_r+0x22>
 8011146:	2300      	movs	r3, #0
 8011148:	602b      	str	r3, [r5, #0]
 801114a:	89b3      	ldrh	r3, [r6, #12]
 801114c:	061a      	lsls	r2, r3, #24
 801114e:	d410      	bmi.n	8011172 <__swhatbuf_r+0x3e>
 8011150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011154:	e00e      	b.n	8011174 <__swhatbuf_r+0x40>
 8011156:	466a      	mov	r2, sp
 8011158:	f000 f8a2 	bl	80112a0 <_fstat_r>
 801115c:	2800      	cmp	r0, #0
 801115e:	dbf2      	blt.n	8011146 <__swhatbuf_r+0x12>
 8011160:	9a01      	ldr	r2, [sp, #4]
 8011162:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011166:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801116a:	425a      	negs	r2, r3
 801116c:	415a      	adcs	r2, r3
 801116e:	602a      	str	r2, [r5, #0]
 8011170:	e7ee      	b.n	8011150 <__swhatbuf_r+0x1c>
 8011172:	2340      	movs	r3, #64	; 0x40
 8011174:	2000      	movs	r0, #0
 8011176:	6023      	str	r3, [r4, #0]
 8011178:	b016      	add	sp, #88	; 0x58
 801117a:	bd70      	pop	{r4, r5, r6, pc}

0801117c <__smakebuf_r>:
 801117c:	898b      	ldrh	r3, [r1, #12]
 801117e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011180:	079d      	lsls	r5, r3, #30
 8011182:	4606      	mov	r6, r0
 8011184:	460c      	mov	r4, r1
 8011186:	d507      	bpl.n	8011198 <__smakebuf_r+0x1c>
 8011188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801118c:	6023      	str	r3, [r4, #0]
 801118e:	6123      	str	r3, [r4, #16]
 8011190:	2301      	movs	r3, #1
 8011192:	6163      	str	r3, [r4, #20]
 8011194:	b002      	add	sp, #8
 8011196:	bd70      	pop	{r4, r5, r6, pc}
 8011198:	ab01      	add	r3, sp, #4
 801119a:	466a      	mov	r2, sp
 801119c:	f7ff ffca 	bl	8011134 <__swhatbuf_r>
 80111a0:	9900      	ldr	r1, [sp, #0]
 80111a2:	4605      	mov	r5, r0
 80111a4:	4630      	mov	r0, r6
 80111a6:	f7fe fff7 	bl	8010198 <_malloc_r>
 80111aa:	b948      	cbnz	r0, 80111c0 <__smakebuf_r+0x44>
 80111ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111b0:	059a      	lsls	r2, r3, #22
 80111b2:	d4ef      	bmi.n	8011194 <__smakebuf_r+0x18>
 80111b4:	f023 0303 	bic.w	r3, r3, #3
 80111b8:	f043 0302 	orr.w	r3, r3, #2
 80111bc:	81a3      	strh	r3, [r4, #12]
 80111be:	e7e3      	b.n	8011188 <__smakebuf_r+0xc>
 80111c0:	4b0d      	ldr	r3, [pc, #52]	; (80111f8 <__smakebuf_r+0x7c>)
 80111c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80111c4:	89a3      	ldrh	r3, [r4, #12]
 80111c6:	6020      	str	r0, [r4, #0]
 80111c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111cc:	81a3      	strh	r3, [r4, #12]
 80111ce:	9b00      	ldr	r3, [sp, #0]
 80111d0:	6163      	str	r3, [r4, #20]
 80111d2:	9b01      	ldr	r3, [sp, #4]
 80111d4:	6120      	str	r0, [r4, #16]
 80111d6:	b15b      	cbz	r3, 80111f0 <__smakebuf_r+0x74>
 80111d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111dc:	4630      	mov	r0, r6
 80111de:	f000 f871 	bl	80112c4 <_isatty_r>
 80111e2:	b128      	cbz	r0, 80111f0 <__smakebuf_r+0x74>
 80111e4:	89a3      	ldrh	r3, [r4, #12]
 80111e6:	f023 0303 	bic.w	r3, r3, #3
 80111ea:	f043 0301 	orr.w	r3, r3, #1
 80111ee:	81a3      	strh	r3, [r4, #12]
 80111f0:	89a3      	ldrh	r3, [r4, #12]
 80111f2:	431d      	orrs	r5, r3
 80111f4:	81a5      	strh	r5, [r4, #12]
 80111f6:	e7cd      	b.n	8011194 <__smakebuf_r+0x18>
 80111f8:	08010375 	.word	0x08010375

080111fc <memmove>:
 80111fc:	4288      	cmp	r0, r1
 80111fe:	b510      	push	{r4, lr}
 8011200:	eb01 0302 	add.w	r3, r1, r2
 8011204:	d807      	bhi.n	8011216 <memmove+0x1a>
 8011206:	1e42      	subs	r2, r0, #1
 8011208:	4299      	cmp	r1, r3
 801120a:	d00a      	beq.n	8011222 <memmove+0x26>
 801120c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011210:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011214:	e7f8      	b.n	8011208 <memmove+0xc>
 8011216:	4283      	cmp	r3, r0
 8011218:	d9f5      	bls.n	8011206 <memmove+0xa>
 801121a:	1881      	adds	r1, r0, r2
 801121c:	1ad2      	subs	r2, r2, r3
 801121e:	42d3      	cmn	r3, r2
 8011220:	d100      	bne.n	8011224 <memmove+0x28>
 8011222:	bd10      	pop	{r4, pc}
 8011224:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011228:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801122c:	e7f7      	b.n	801121e <memmove+0x22>

0801122e <_realloc_r>:
 801122e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011230:	4607      	mov	r7, r0
 8011232:	4614      	mov	r4, r2
 8011234:	460e      	mov	r6, r1
 8011236:	b921      	cbnz	r1, 8011242 <_realloc_r+0x14>
 8011238:	4611      	mov	r1, r2
 801123a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801123e:	f7fe bfab 	b.w	8010198 <_malloc_r>
 8011242:	b922      	cbnz	r2, 801124e <_realloc_r+0x20>
 8011244:	f7fe ff5a 	bl	80100fc <_free_r>
 8011248:	4625      	mov	r5, r4
 801124a:	4628      	mov	r0, r5
 801124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801124e:	f000 f849 	bl	80112e4 <_malloc_usable_size_r>
 8011252:	42a0      	cmp	r0, r4
 8011254:	d20f      	bcs.n	8011276 <_realloc_r+0x48>
 8011256:	4621      	mov	r1, r4
 8011258:	4638      	mov	r0, r7
 801125a:	f7fe ff9d 	bl	8010198 <_malloc_r>
 801125e:	4605      	mov	r5, r0
 8011260:	2800      	cmp	r0, #0
 8011262:	d0f2      	beq.n	801124a <_realloc_r+0x1c>
 8011264:	4631      	mov	r1, r6
 8011266:	4622      	mov	r2, r4
 8011268:	f7fe ff34 	bl	80100d4 <memcpy>
 801126c:	4631      	mov	r1, r6
 801126e:	4638      	mov	r0, r7
 8011270:	f7fe ff44 	bl	80100fc <_free_r>
 8011274:	e7e9      	b.n	801124a <_realloc_r+0x1c>
 8011276:	4635      	mov	r5, r6
 8011278:	e7e7      	b.n	801124a <_realloc_r+0x1c>
	...

0801127c <_read_r>:
 801127c:	b538      	push	{r3, r4, r5, lr}
 801127e:	4c07      	ldr	r4, [pc, #28]	; (801129c <_read_r+0x20>)
 8011280:	4605      	mov	r5, r0
 8011282:	4608      	mov	r0, r1
 8011284:	4611      	mov	r1, r2
 8011286:	2200      	movs	r2, #0
 8011288:	6022      	str	r2, [r4, #0]
 801128a:	461a      	mov	r2, r3
 801128c:	f7f0 fa18 	bl	80016c0 <_read>
 8011290:	1c43      	adds	r3, r0, #1
 8011292:	d102      	bne.n	801129a <_read_r+0x1e>
 8011294:	6823      	ldr	r3, [r4, #0]
 8011296:	b103      	cbz	r3, 801129a <_read_r+0x1e>
 8011298:	602b      	str	r3, [r5, #0]
 801129a:	bd38      	pop	{r3, r4, r5, pc}
 801129c:	24002388 	.word	0x24002388

080112a0 <_fstat_r>:
 80112a0:	b538      	push	{r3, r4, r5, lr}
 80112a2:	4c07      	ldr	r4, [pc, #28]	; (80112c0 <_fstat_r+0x20>)
 80112a4:	2300      	movs	r3, #0
 80112a6:	4605      	mov	r5, r0
 80112a8:	4608      	mov	r0, r1
 80112aa:	4611      	mov	r1, r2
 80112ac:	6023      	str	r3, [r4, #0]
 80112ae:	f7f0 fa30 	bl	8001712 <_fstat>
 80112b2:	1c43      	adds	r3, r0, #1
 80112b4:	d102      	bne.n	80112bc <_fstat_r+0x1c>
 80112b6:	6823      	ldr	r3, [r4, #0]
 80112b8:	b103      	cbz	r3, 80112bc <_fstat_r+0x1c>
 80112ba:	602b      	str	r3, [r5, #0]
 80112bc:	bd38      	pop	{r3, r4, r5, pc}
 80112be:	bf00      	nop
 80112c0:	24002388 	.word	0x24002388

080112c4 <_isatty_r>:
 80112c4:	b538      	push	{r3, r4, r5, lr}
 80112c6:	4c06      	ldr	r4, [pc, #24]	; (80112e0 <_isatty_r+0x1c>)
 80112c8:	2300      	movs	r3, #0
 80112ca:	4605      	mov	r5, r0
 80112cc:	4608      	mov	r0, r1
 80112ce:	6023      	str	r3, [r4, #0]
 80112d0:	f7f0 fa2f 	bl	8001732 <_isatty>
 80112d4:	1c43      	adds	r3, r0, #1
 80112d6:	d102      	bne.n	80112de <_isatty_r+0x1a>
 80112d8:	6823      	ldr	r3, [r4, #0]
 80112da:	b103      	cbz	r3, 80112de <_isatty_r+0x1a>
 80112dc:	602b      	str	r3, [r5, #0]
 80112de:	bd38      	pop	{r3, r4, r5, pc}
 80112e0:	24002388 	.word	0x24002388

080112e4 <_malloc_usable_size_r>:
 80112e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112e8:	1f18      	subs	r0, r3, #4
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	bfbc      	itt	lt
 80112ee:	580b      	ldrlt	r3, [r1, r0]
 80112f0:	18c0      	addlt	r0, r0, r3
 80112f2:	4770      	bx	lr

080112f4 <_init>:
 80112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f6:	bf00      	nop
 80112f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112fa:	bc08      	pop	{r3}
 80112fc:	469e      	mov	lr, r3
 80112fe:	4770      	bx	lr

08011300 <_fini>:
 8011300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011302:	bf00      	nop
 8011304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011306:	bc08      	pop	{r3}
 8011308:	469e      	mov	lr, r3
 801130a:	4770      	bx	lr

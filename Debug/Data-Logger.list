
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001944c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  080196ec  080196ec  000296ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a03c  0801a03c  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a03c  0801a03c  0002a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a044  0801a044  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a044  0801a044  0002a044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a048  0801a048  0002a048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  24000000  0801a04c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041ab0  240001d8  0801a224  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24041c88  0801a224  00031c88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049e23  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bc2  00000000  00000000  0007a029  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  00084010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  00086138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028ae3  00000000  00000000  000c9228  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178633  00000000  00000000  000f1d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026a33e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f58  00000000  00000000  0026a3bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080196d4 	.word	0x080196d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	080196d4 	.word	0x080196d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f005 fb6e 	bl	8005d9c <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f005 fbdc 	bl	8005e88 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f002 fa75 	bl	8002bc4 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f005 fc24 	bl	8005f28 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f002 fa6d 	bl	8002bc4 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f005 fda4 	bl	800623c <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f002 fa63 	bl	8002bc4 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f005 fbef 	bl	8005ee2 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000718:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f005 fc2f 	bl	8005f80 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d155      	bne.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
			      {
					uint32_t time = HAL_GetTick();
 8000728:	f002 ff34 	bl	8003594 <HAL_GetTick>
 800072c:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800072e:	2101      	movs	r1, #1
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8000732:	f006 fc6e 	bl	8007012 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <HAL_FDCAN_RxFifo0Callback+0xdc>)
 8000738:	f017 ffb2 	bl	80186a0 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d121      	bne.n	8000788 <HAL_FDCAN_RxFifo0Callback+0x7c>
						CanFrame.id = RxHeader.Identifier;
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 800074a:	6013      	str	r3, [r2, #0]
						CanFrame.length = RxHeader.DataLength;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000754:	715a      	strb	r2, [r3, #5]
						CanFrame.time = time;
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000764:	795b      	ldrb	r3, [r3, #5]
 8000766:	461a      	mov	r2, r3
 8000768:	491c      	ldr	r1, [pc, #112]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800076a:	4822      	ldr	r0, [pc, #136]	; (80007f4 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 800076c:	f017 fe68 	bl	8018440 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000778:	d103      	bne.n	8000782 <HAL_FDCAN_RxFifo0Callback+0x76>
							CanFrame.extended = 1;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 800077c:	2201      	movs	r2, #1
 800077e:	711a      	strb	r2, [r3, #4]
 8000780:	e002      	b.n	8000788 <HAL_FDCAN_RxFifo0Callback+0x7c>
						}
						else{
							CanFrame.extended = 0;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <HAL_FDCAN_RxFifo0Callback+0xe0>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000790:	d120      	bne.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
						CanFDFrame.id = RxHeader.Identifier;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000798:	6013      	str	r3, [r2, #0]
						CanFDFrame.length = RxHeader.DataLength;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007a0:	6093      	str	r3, [r2, #8]
						CanFDFrame.time = time;
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_FDCAN_RxFifo0Callback+0xf0>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4909      	ldr	r1, [pc, #36]	; (80007dc <HAL_FDCAN_RxFifo0Callback+0xd0>)
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <HAL_FDCAN_RxFifo0Callback+0xf4>)
 80007b8:	f017 fe42 	bl	8018440 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c4:	d103      	bne.n	80007ce <HAL_FDCAN_RxFifo0Callback+0xc2>
							CanFDFrame.extended = 1;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 80007cc:	e002      	b.n	80007d4 <HAL_FDCAN_RxFifo0Callback+0xc8>
							CanFDFrame.extended = 0;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_FDCAN_RxFifo0Callback+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	240407f8 	.word	0x240407f8
 80007e0:	24040888 	.word	0x24040888
 80007e4:	58020400 	.word	0x58020400
 80007e8:	080196ec 	.word	0x080196ec
 80007ec:	240408b0 	.word	0x240408b0
 80007f0:	240001f8 	.word	0x240001f8
 80007f4:	240408c0 	.word	0x240408c0
 80007f8:	24040838 	.word	0x24040838
 80007fc:	240001f4 	.word	0x240001f4
 8000800:	24040848 	.word	0x24040848

08000804 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000804:	b580      	push	{r7, lr}
 8000806:	b09e      	sub	sp, #120	; 0x78
 8000808:	af02      	add	r7, sp, #8
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f7ff fd65 	bl	80002e0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	2b03      	cmp	r3, #3
 800081a:	d001      	beq.n	8000820 <gps_msg_config+0x1c>
 800081c:	2301      	movs	r3, #1
 800081e:	e052      	b.n	80008c6 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 8000820:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <gps_msg_config+0xcc>)
 800082c:	211f      	movs	r1, #31
 800082e:	f017 ff4f 	bl	80186d0 <sniprintf>

	int checksum_int = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
 800083a:	e00b      	b.n	8000854 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 800083c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800084a:	4053      	eors	r3, r2
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 800084e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000850:	3301      	adds	r3, #1
 8000852:	66bb      	str	r3, [r7, #104]	; 0x68
 8000854:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <gps_msg_config+0x64>
 8000862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000864:	2b1f      	cmp	r3, #31
 8000866:	dde9      	ble.n	800083c <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 8000868:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800086c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <gps_msg_config+0xd0>)
 8000870:	2107      	movs	r1, #7
 8000872:	f017 ff2d 	bl	80186d0 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000876:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800087a:	f107 0014 	add.w	r0, r7, #20
 800087e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4613      	mov	r3, r2
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <gps_msg_config+0xd4>)
 8000888:	2129      	movs	r1, #41	; 0x29
 800088a:	f017 ff21 	bl	80186d0 <sniprintf>
	printf("\n\rSending: ");
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <gps_msg_config+0xd8>)
 8000890:	f017 fe92 	bl	80185b8 <iprintf>
	printf("%s", messagetosend);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <gps_msg_config+0xdc>)
 800089c:	f017 fe8c 	bl	80185b8 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd1b 	bl	80002e0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	f107 0114 	add.w	r1, r7, #20
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f00e f954 	bl	800eb62 <HAL_UART_Transmit>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <gps_msg_config+0xc0>
		Error_Handler();
 80008c0:	f002 f980 	bl	8002bc4 <Error_Handler>
	}
	return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3770      	adds	r7, #112	; 0x70
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08019700 	.word	0x08019700
 80008d4:	08019718 	.word	0x08019718
 80008d8:	08019720 	.word	0x08019720
 80008dc:	08019728 	.word	0x08019728
 80008e0:	08019734 	.word	0x08019734

080008e4 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	817b      	strh	r3, [r7, #10]
 80008f6:	460b      	mov	r3, r1
 80008f8:	813b      	strh	r3, [r7, #8]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 80008fe:	2306      	movs	r3, #6
 8000900:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000902:	23b5      	movs	r3, #181	; 0xb5
 8000904:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000906:	2362      	movs	r3, #98	; 0x62
 8000908:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 800090a:	2306      	movs	r3, #6
 800090c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800090e:	2308      	movs	r3, #8
 8000910:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000912:	8bfb      	ldrh	r3, [r7, #30]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 800091c:	897b      	ldrh	r3, [r7, #10]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000926:	893b      	ldrh	r3, [r7, #8]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	e013      	b.n	8000974 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 800094c:	f107 0210 	add.w	r2, r7, #16
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	4413      	add	r3, r2
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800095a:	4413      	add	r3, r2
 800095c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000960:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000968:	4413      	add	r3, r2
 800096a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	3301      	adds	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	2b0b      	cmp	r3, #11
 8000978:	dde8      	ble.n	800094c <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 800097a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800097e:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000984:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000986:	f107 0110 	add.w	r1, r7, #16
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	220e      	movs	r2, #14
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f00e f8e7 	bl	800eb62 <HAL_UART_Transmit>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <gps_rate_config+0xbe>
				Error_Handler();
 800099a:	f002 f913 	bl	8002bc4 <Error_Handler>
				return 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <gps_rate_config+0xc0>
			}
		return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_UART_RxHalfCpltCallback+0x1c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	240001fc 	.word	0x240001fc

080009cc <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d008      	beq.n	80009ec <NRF24_csn+0x20>
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <NRF24_csn+0x38>)
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <NRF24_csn+0x3c>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	2201      	movs	r2, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	f006 fafb 	bl	8006fe0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80009ea:	e007      	b.n	80009fc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <NRF24_csn+0x38>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <NRF24_csn+0x3c>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	2200      	movs	r2, #0
 80009f6:	4619      	mov	r1, r3
 80009f8:	f006 faf2 	bl	8006fe0 <HAL_GPIO_WritePin>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	24000204 	.word	0x24000204
 8000a08:	24000208 	.word	0x24000208

08000a0c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d008      	beq.n	8000a2c <NRF24_ce+0x20>
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <NRF24_ce+0x38>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <NRF24_ce+0x3c>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	f006 fadb 	bl	8006fe0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000a2a:	e007      	b.n	8000a3c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <NRF24_ce+0x38>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <NRF24_ce+0x3c>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	f006 fad2 	bl	8006fe0 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24000204 	.word	0x24000204
 8000a48:	2400020a 	.word	0x2400020a

08000a4c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffb8 	bl	80009cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 031f 	and.w	r3, r3, #31
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000a66:	f107 010c 	add.w	r1, r7, #12
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <NRF24_read_register+0x4c>)
 8000a70:	f00d f86e 	bl	800db50 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	1c59      	adds	r1, r3, #1
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <NRF24_read_register+0x4c>)
 8000a80:	f00d fa58 	bl	800df34 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000a84:	7b7b      	ldrb	r3, [r7, #13]
 8000a86:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff ff9f 	bl	80009cc <NRF24_csn>
	return retData;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2400020c 	.word	0x2400020c

08000a9c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff ff8d 	bl	80009cc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 031f 	and.w	r3, r3, #31
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000abc:	f107 010c 	add.w	r1, r7, #12
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <NRF24_read_registerN+0x4c>)
 8000ac6:	f00d f843 	bl	800db50 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	2364      	movs	r3, #100	; 0x64
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <NRF24_read_registerN+0x4c>)
 8000ad4:	f00d fa2e 	bl	800df34 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff ff77 	bl	80009cc <NRF24_csn>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2400020c 	.word	0x2400020c

08000aec <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff65 	bl	80009cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f043 0320 	orr.w	r3, r3, #32
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	2202      	movs	r2, #2
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <NRF24_write_register+0x40>)
 8000b1a:	f00d f819 	bl	800db50 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff ff54 	bl	80009cc <NRF24_csn>
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2400020c 	.word	0x2400020c

08000b30 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff ff43 	bl	80009cc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b50:	f107 010c 	add.w	r1, r7, #12
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	2201      	movs	r2, #1
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <NRF24_write_registerN+0x4c>)
 8000b5a:	f00c fff9 	bl	800db50 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	6839      	ldr	r1, [r7, #0]
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <NRF24_write_registerN+0x4c>)
 8000b68:	f00c fff2 	bl	800db50 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff ff2d 	bl	80009cc <NRF24_csn>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2400020c 	.word	0x2400020c

08000b80 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000b84:	21ff      	movs	r1, #255	; 0xff
 8000b86:	20e1      	movs	r0, #225	; 0xe1
 8000b88:	f7ff ffb0 	bl	8000aec <NRF24_write_register>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000b94:	21ff      	movs	r1, #255	; 0xff
 8000b96:	20e2      	movs	r0, #226	; 0xe2
 8000b98:	f7ff ffa8 	bl	8000aec <NRF24_write_register>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000bb4:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <NRF24_begin+0x1b0>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2288      	movs	r2, #136	; 0x88
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f017 fc3e 	bl	8018440 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000bc4:	4a63      	ldr	r2, [pc, #396]	; (8000d54 <NRF24_begin+0x1b4>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000bca:	4a63      	ldr	r2, [pc, #396]	; (8000d58 <NRF24_begin+0x1b8>)
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000bd0:	4a62      	ldr	r2, [pc, #392]	; (8000d5c <NRF24_begin+0x1bc>)
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fef8 	bl	80009cc <NRF24_csn>
	NRF24_ce(0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff15 	bl	8000a0c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000be2:	2005      	movs	r0, #5
 8000be4:	f002 fce2 	bl	80035ac <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000be8:	2108      	movs	r1, #8
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff7e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000bf0:	213f      	movs	r1, #63	; 0x3f
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff ff7a 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f7ff ff76 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000c00:	2103      	movs	r1, #3
 8000c02:	2003      	movs	r0, #3
 8000c04:	f7ff ff72 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000c08:	2103      	movs	r1, #3
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f7ff ff6e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000c10:	2102      	movs	r1, #2
 8000c12:	2005      	movs	r0, #5
 8000c14:	f7ff ff6a 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000c18:	210f      	movs	r1, #15
 8000c1a:	2006      	movs	r0, #6
 8000c1c:	f7ff ff66 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000c20:	210e      	movs	r1, #14
 8000c22:	2007      	movs	r0, #7
 8000c24:	f7ff ff62 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2008      	movs	r0, #8
 8000c2c:	f7ff ff5e 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000c30:	2100      	movs	r1, #0
 8000c32:	2009      	movs	r0, #9
 8000c34:	f7ff ff5a 	bl	8000aec <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c38:	23e7      	movs	r3, #231	; 0xe7
 8000c3a:	733b      	strb	r3, [r7, #12]
 8000c3c:	23e7      	movs	r3, #231	; 0xe7
 8000c3e:	72fb      	strb	r3, [r7, #11]
 8000c40:	23e7      	movs	r3, #231	; 0xe7
 8000c42:	72bb      	strb	r3, [r7, #10]
 8000c44:	23e7      	movs	r3, #231	; 0xe7
 8000c46:	727b      	strb	r3, [r7, #9]
 8000c48:	23e7      	movs	r3, #231	; 0xe7
 8000c4a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2205      	movs	r2, #5
 8000c52:	4619      	mov	r1, r3
 8000c54:	200a      	movs	r0, #10
 8000c56:	f7ff ff6b 	bl	8000b30 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000c5a:	23c2      	movs	r3, #194	; 0xc2
 8000c5c:	733b      	strb	r3, [r7, #12]
 8000c5e:	23c2      	movs	r3, #194	; 0xc2
 8000c60:	72fb      	strb	r3, [r7, #11]
 8000c62:	23c2      	movs	r3, #194	; 0xc2
 8000c64:	72bb      	strb	r3, [r7, #10]
 8000c66:	23c2      	movs	r3, #194	; 0xc2
 8000c68:	727b      	strb	r3, [r7, #9]
 8000c6a:	23c2      	movs	r3, #194	; 0xc2
 8000c6c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2205      	movs	r2, #5
 8000c74:	4619      	mov	r1, r3
 8000c76:	200b      	movs	r0, #11
 8000c78:	f7ff ff5a 	bl	8000b30 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000c7c:	21c3      	movs	r1, #195	; 0xc3
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f7ff ff34 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000c84:	21c4      	movs	r1, #196	; 0xc4
 8000c86:	200d      	movs	r0, #13
 8000c88:	f7ff ff30 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000c8c:	21c5      	movs	r1, #197	; 0xc5
 8000c8e:	200e      	movs	r0, #14
 8000c90:	f7ff ff2c 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000c94:	21c6      	movs	r1, #198	; 0xc6
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff ff28 	bl	8000aec <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000c9c:	23e7      	movs	r3, #231	; 0xe7
 8000c9e:	733b      	strb	r3, [r7, #12]
 8000ca0:	23e7      	movs	r3, #231	; 0xe7
 8000ca2:	72fb      	strb	r3, [r7, #11]
 8000ca4:	23e7      	movs	r3, #231	; 0xe7
 8000ca6:	72bb      	strb	r3, [r7, #10]
 8000ca8:	23e7      	movs	r3, #231	; 0xe7
 8000caa:	727b      	strb	r3, [r7, #9]
 8000cac:	23e7      	movs	r3, #231	; 0xe7
 8000cae:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	2010      	movs	r0, #16
 8000cba:	f7ff ff39 	bl	8000b30 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2011      	movs	r0, #17
 8000cc2:	f7ff ff13 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2012      	movs	r0, #18
 8000cca:	f7ff ff0f 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2013      	movs	r0, #19
 8000cd2:	f7ff ff0b 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2014      	movs	r0, #20
 8000cda:	f7ff ff07 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2015      	movs	r0, #21
 8000ce2:	f7ff ff03 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2016      	movs	r0, #22
 8000cea:	f7ff feff 	bl	8000aec <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000cee:	f000 f99b 	bl	8001028 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f7ff fef9 	bl	8000aec <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f7ff fef5 	bl	8000aec <NRF24_write_register>
	printRadioSettings();
 8000d02:	f000 f9ab 	bl	800105c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000d06:	210f      	movs	r1, #15
 8000d08:	200f      	movs	r0, #15
 8000d0a:	f000 f859 	bl	8000dc0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f000 f8cb 	bl	8000eaa <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 f901 	bl	8000f1c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f000 f944 	bl	8000fa8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000d20:	f000 f896 	bl	8000e50 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000d24:	2020      	movs	r0, #32
 8000d26:	f000 f87b 	bl	8000e20 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000d2a:	f000 f974 	bl	8001016 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000d2e:	204c      	movs	r0, #76	; 0x4c
 8000d30:	f000 f861 	bl	8000df6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000d34:	f7ff ff24 	bl	8000b80 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d38:	f7ff ff2a 	bl	8000b90 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000d3c:	f000 f95c 	bl	8000ff8 <NRF24_powerDown>
	
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2400020c 	.word	0x2400020c
 8000d54:	24000204 	.word	0x24000204
 8000d58:	24000208 	.word	0x24000208
 8000d5c:	2400020a 	.word	0x2400020a

08000d60 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fe51 	bl	8000a0c <NRF24_ce>
	NRF24_flush_tx();
 8000d6a:	f7ff ff09 	bl	8000b80 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000d6e:	f7ff ff0f 	bl	8000b90 <NRF24_flush_rx>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000d82:	463b      	mov	r3, r7
 8000d84:	2205      	movs	r2, #5
 8000d86:	4619      	mov	r1, r3
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f7ff fed1 	bl	8000b30 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2205      	movs	r2, #5
 8000d92:	4619      	mov	r1, r3
 8000d94:	2010      	movs	r0, #16
 8000d96:	f7ff fecb 	bl	8000b30 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <NRF24_openWritingPipe+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	bf28      	it	cs
 8000da8:	4613      	movcs	r3, r2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	2011      	movs	r0, #17
 8000db0:	f7ff fe9c 	bl	8000aec <NRF24_write_register>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24000200 	.word	0x24000200

08000dc0 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	2004      	movs	r0, #4
 8000dea:	f7ff fe7f 	bl	8000aec <NRF24_write_register>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000e00:	237f      	movs	r3, #127	; 0x7f
 8000e02:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	bf28      	it	cs
 8000e0c:	4613      	movcs	r3, r2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	2005      	movs	r0, #5
 8000e14:	f7ff fe6a 	bl	8000aec <NRF24_write_register>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000e2e:	7bfa      	ldrb	r2, [r7, #15]
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	bf28      	it	cs
 8000e36:	4613      	movcs	r3, r2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <NRF24_setPayloadSize+0x2c>)
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	24000200 	.word	0x24000200

08000e50 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e54:	201d      	movs	r0, #29
 8000e56:	f7ff fdf9 	bl	8000a4c <NRF24_read_register>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fe41 	bl	8000aec <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f7ff fe3d 	bl	8000aec <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e72:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <NRF24_disableDynamicPayloads+0x2c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000201 	.word	0x24000201

08000e80 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000e90:	213f      	movs	r1, #63	; 0x3f
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fe2a 	bl	8000aec <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000e98:	e003      	b.n	8000ea2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fe25 	bl	8000aec <NRF24_write_register>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000eb4:	2006      	movs	r0, #6
 8000eb6:	f7ff fdc9 	bl	8000a4c <NRF24_read_register>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f023 0306 	bic.w	r3, r3, #6
 8000ec4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d104      	bne.n	8000ed6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 0306 	orr.w	r3, r3, #6
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e019      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d104      	bne.n	8000ee6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e011      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d104      	bne.n	8000ef6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e009      	b.n	8000f0a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d103      	bne.n	8000f0a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f043 0306 	orr.w	r3, r3, #6
 8000f08:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2006      	movs	r0, #6
 8000f10:	f7ff fdec 	bl	8000aec <NRF24_write_register>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f2a:	2006      	movs	r0, #6
 8000f2c:	f7ff fd8e 	bl	8000a4c <NRF24_read_register>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f40:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d107      	bne.n	8000f58 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	73bb      	strb	r3, [r7, #14]
 8000f56:	e00d      	b.n	8000f74 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d107      	bne.n	8000f6e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	73bb      	strb	r3, [r7, #14]
 8000f6c:	e002      	b.n	8000f74 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	4619      	mov	r1, r3
 8000f78:	2006      	movs	r0, #6
 8000f7a:	f7ff fdb7 	bl	8000aec <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f7e:	2006      	movs	r0, #6
 8000f80:	f7ff fd64 	bl	8000a4c <NRF24_read_register>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d102      	bne.n	8000f94 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e002      	b.n	8000f9a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <NRF24_setDataRate+0x88>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	24000202 	.word	0x24000202

08000fa8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fd4a 	bl	8000a4c <NRF24_read_register>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f023 030c 	bic.w	r3, r3, #12
 8000fbe:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00f      	beq.n	8000fe6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d104      	bne.n	8000fd6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e007      	b.n	8000fe6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fd7e 	bl	8000aec <NRF24_write_register>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff fd25 	bl	8000a4c <NRF24_read_register>
 8001002:	4603      	mov	r3, r0
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4619      	mov	r1, r3
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fd6d 	bl	8000aec <NRF24_write_register>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800101a:	2170      	movs	r1, #112	; 0x70
 800101c:	2007      	movs	r0, #7
 800101e:	f7ff fd65 	bl	8000aec <NRF24_write_register>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fccc 	bl	80009cc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001034:	2350      	movs	r3, #80	; 0x50
 8001036:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001038:	2373      	movs	r3, #115	; 0x73
 800103a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	2364      	movs	r3, #100	; 0x64
 8001040:	2202      	movs	r2, #2
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <NRF24_ACTIVATE_cmd+0x30>)
 8001044:	f00c fd84 	bl	800db50 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fcbf 	bl	80009cc <NRF24_csn>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2400020c 	.word	0x2400020c

0800105c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b0a1      	sub	sp, #132	; 0x84
 8001060:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4ab6      	ldr	r2, [pc, #728]	; (8001340 <printRadioSettings+0x2e4>)
 8001068:	461c      	mov	r4, r3
 800106a:	4615      	mov	r5, r2
 800106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	8022      	strh	r2, [r4, #0]
 800107e:	3402      	adds	r4, #2
 8001080:	0c1b      	lsrs	r3, r3, #16
 8001082:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f929 	bl	80002e0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f107 0108 	add.w	r1, r7, #8
 8001096:	230a      	movs	r3, #10
 8001098:	48aa      	ldr	r0, [pc, #680]	; (8001344 <printRadioSettings+0x2e8>)
 800109a:	f00d fd62 	bl	800eb62 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fcd4 	bl	8000a4c <NRF24_read_register>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80010aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d020      	beq.n	80010f8 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80010b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <printRadioSettings+0x7e>
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4aa0      	ldr	r2, [pc, #640]	; (8001348 <printRadioSettings+0x2ec>)
 80010c8:	461c      	mov	r4, r3
 80010ca:	4615      	mov	r5, r2
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010d8:	e017      	b.n	800110a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4a9b      	ldr	r2, [pc, #620]	; (800134c <printRadioSettings+0x2f0>)
 80010e0:	461c      	mov	r4, r3
 80010e2:	4615      	mov	r5, r2
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ec:	c403      	stmia	r4!, {r0, r1}
 80010ee:	8022      	strh	r2, [r4, #0]
 80010f0:	3402      	adds	r4, #2
 80010f2:	0c13      	lsrs	r3, r2, #16
 80010f4:	7023      	strb	r3, [r4, #0]
 80010f6:	e008      	b.n	800110a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4a94      	ldr	r2, [pc, #592]	; (8001350 <printRadioSettings+0x2f4>)
 80010fe:	461c      	mov	r4, r3
 8001100:	4615      	mov	r5, r2
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f8e6 	bl	80002e0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	f107 0108 	add.w	r1, r7, #8
 800111c:	230a      	movs	r3, #10
 800111e:	4889      	ldr	r0, [pc, #548]	; (8001344 <printRadioSettings+0x2e8>)
 8001120:	f00d fd1f 	bl	800eb62 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff fc91 	bl	8000a4c <NRF24_read_register>
 800112a:	4603      	mov	r3, r0
 800112c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001130:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001134:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfcc      	ite	gt
 800113c:	2301      	movgt	r3, #1
 800113e:	2300      	movle	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001144:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001148:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800114c:	2b00      	cmp	r3, #0
 800114e:	bfcc      	ite	gt
 8001150:	2301      	movgt	r3, #1
 8001152:	2300      	movle	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800115c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001160:	2b00      	cmp	r3, #0
 8001162:	bfcc      	ite	gt
 8001164:	2301      	movgt	r3, #1
 8001166:	2300      	movle	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800116c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001170:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001174:	2b00      	cmp	r3, #0
 8001176:	bfcc      	ite	gt
 8001178:	2301      	movgt	r3, #1
 800117a:	2300      	movle	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001180:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001184:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001188:	2b00      	cmp	r3, #0
 800118a:	bfcc      	ite	gt
 800118c:	2301      	movgt	r3, #1
 800118e:	2300      	movle	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001194:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001198:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800119c:	2b00      	cmp	r3, #0
 800119e:	bfcc      	ite	gt
 80011a0:	2301      	movgt	r3, #1
 80011a2:	2300      	movle	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f107 0008 	add.w	r0, r7, #8
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	9402      	str	r4, [sp, #8]
 80011ae:	9101      	str	r1, [sp, #4]
 80011b0:	9200      	str	r2, [sp, #0]
 80011b2:	4633      	mov	r3, r6
 80011b4:	462a      	mov	r2, r5
 80011b6:	4967      	ldr	r1, [pc, #412]	; (8001354 <printRadioSettings+0x2f8>)
 80011b8:	f017 fabe 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f88d 	bl	80002e0 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f107 0108 	add.w	r1, r7, #8
 80011ce:	230a      	movs	r3, #10
 80011d0:	485c      	ldr	r0, [pc, #368]	; (8001344 <printRadioSettings+0x2e8>)
 80011d2:	f00d fcc6 	bl	800eb62 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff fc38 	bl	8000a4c <NRF24_read_register>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfcc      	ite	gt
 80011ee:	2301      	movgt	r3, #1
 80011f0:	2300      	movle	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011fa:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bfcc      	ite	gt
 8001202:	2301      	movgt	r3, #1
 8001204:	2300      	movle	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800120a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800120e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001212:	2b00      	cmp	r3, #0
 8001214:	bfcc      	ite	gt
 8001216:	2301      	movgt	r3, #1
 8001218:	2300      	movle	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800121e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001222:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001226:	2b00      	cmp	r3, #0
 8001228:	bfcc      	ite	gt
 800122a:	2301      	movgt	r3, #1
 800122c:	2300      	movle	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001232:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001236:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123a:	2b00      	cmp	r3, #0
 800123c:	bfcc      	ite	gt
 800123e:	2301      	movgt	r3, #1
 8001240:	2300      	movle	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001246:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfcc      	ite	gt
 8001252:	2301      	movgt	r3, #1
 8001254:	2300      	movle	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f107 0008 	add.w	r0, r7, #8
 800125c:	9303      	str	r3, [sp, #12]
 800125e:	9402      	str	r4, [sp, #8]
 8001260:	9101      	str	r1, [sp, #4]
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	4633      	mov	r3, r6
 8001266:	462a      	mov	r2, r5
 8001268:	493b      	ldr	r1, [pc, #236]	; (8001358 <printRadioSettings+0x2fc>)
 800126a:	f017 fa65 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f834 	bl	80002e0 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	f107 0108 	add.w	r1, r7, #8
 8001280:	230a      	movs	r3, #10
 8001282:	4830      	ldr	r0, [pc, #192]	; (8001344 <printRadioSettings+0x2e8>)
 8001284:	f00d fc6d 	bl	800eb62 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001288:	2003      	movs	r0, #3
 800128a:	f7ff fbdf 	bl	8000a4c <NRF24_read_register>
 800128e:	4603      	mov	r3, r0
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001298:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800129c:	3302      	adds	r3, #2
 800129e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012a2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	492c      	ldr	r1, [pc, #176]	; (800135c <printRadioSettings+0x300>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f017 fa43 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f812 	bl	80002e0 <strlen>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f107 0108 	add.w	r1, r7, #8
 80012c4:	230a      	movs	r3, #10
 80012c6:	481f      	ldr	r0, [pc, #124]	; (8001344 <printRadioSettings+0x2e8>)
 80012c8:	f00d fc4b 	bl	800eb62 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80012cc:	2005      	movs	r0, #5
 80012ce:	f7ff fbbd 	bl	8000a4c <NRF24_read_register>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80012d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	491e      	ldr	r1, [pc, #120]	; (8001360 <printRadioSettings+0x304>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f017 fa26 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe fff5 	bl	80002e0 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f107 0108 	add.w	r1, r7, #8
 80012fe:	230a      	movs	r3, #10
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <printRadioSettings+0x2e8>)
 8001302:	f00d fc2e 	bl	800eb62 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001306:	2006      	movs	r0, #6
 8001308:	f7ff fba0 	bl	8000a4c <NRF24_read_register>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001312:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <printRadioSettings+0x30c>
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <printRadioSettings+0x308>)
 8001324:	461c      	mov	r4, r3
 8001326:	4615      	mov	r5, r2
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001330:	6020      	str	r0, [r4, #0]
 8001332:	3404      	adds	r4, #4
 8001334:	8021      	strh	r1, [r4, #0]
 8001336:	3402      	adds	r4, #2
 8001338:	0c0b      	lsrs	r3, r1, #16
 800133a:	7023      	strb	r3, [r4, #0]
 800133c:	e023      	b.n	8001386 <printRadioSettings+0x32a>
 800133e:	bf00      	nop
 8001340:	08019740 	.word	0x08019740
 8001344:	24000294 	.word	0x24000294
 8001348:	08019774 	.word	0x08019774
 800134c:	08019790 	.word	0x08019790
 8001350:	080197ac 	.word	0x080197ac
 8001354:	080197c0 	.word	0x080197c0
 8001358:	08019804 	.word	0x08019804
 800135c:	08019850 	.word	0x08019850
 8001360:	0801986c 	.word	0x0801986c
 8001364:	08019880 	.word	0x08019880
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <printRadioSettings+0x3b8>)
 800136e:	461c      	mov	r4, r3
 8001370:	4615      	mov	r5, r2
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	e895 0003 	ldmia.w	r5, {r0, r1}
 800137a:	6020      	str	r0, [r4, #0]
 800137c:	3404      	adds	r4, #4
 800137e:	8021      	strh	r1, [r4, #0]
 8001380:	3402      	adds	r4, #2
 8001382:	0c0b      	lsrs	r3, r1, #16
 8001384:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ffa8 	bl	80002e0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0108 	add.w	r1, r7, #8
 8001398:	230a      	movs	r3, #10
 800139a:	481f      	ldr	r0, [pc, #124]	; (8001418 <printRadioSettings+0x3bc>)
 800139c:	f00d fbe1 	bl	800eb62 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	f003 0306 	and.w	r3, r3, #6
 80013a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d109      	bne.n	80013d2 <printRadioSettings+0x376>
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <printRadioSettings+0x3c0>)
 80013c4:	461c      	mov	r4, r3
 80013c6:	4615      	mov	r5, r2
 80013c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	6023      	str	r3, [r4, #0]
 80013d0:	e037      	b.n	8001442 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d109      	bne.n	80013ee <printRadioSettings+0x392>
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <printRadioSettings+0x3c4>)
 80013e0:	461c      	mov	r4, r3
 80013e2:	4615      	mov	r5, r2
 80013e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	e029      	b.n	8001442 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d118      	bne.n	8001428 <printRadioSettings+0x3cc>
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <printRadioSettings+0x3c8>)
 80013fc:	461c      	mov	r4, r3
 80013fe:	4615      	mov	r5, r2
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	8022      	strh	r2, [r4, #0]
 800140a:	3402      	adds	r4, #2
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	7023      	strb	r3, [r4, #0]
 8001410:	e017      	b.n	8001442 <printRadioSettings+0x3e6>
 8001412:	bf00      	nop
 8001414:	08019898 	.word	0x08019898
 8001418:	24000294 	.word	0x24000294
 800141c:	080198b0 	.word	0x080198b0
 8001420:	080198c4 	.word	0x080198c4
 8001424:	080198d8 	.word	0x080198d8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001428:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800142c:	2b03      	cmp	r3, #3
 800142e:	d108      	bne.n	8001442 <printRadioSettings+0x3e6>
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4ad7      	ldr	r2, [pc, #860]	; (8001794 <printRadioSettings+0x738>)
 8001436:	461c      	mov	r4, r3
 8001438:	4615      	mov	r5, r2
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ff4a 	bl	80002e0 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f107 0108 	add.w	r1, r7, #8
 8001454:	230a      	movs	r3, #10
 8001456:	48d0      	ldr	r0, [pc, #832]	; (8001798 <printRadioSettings+0x73c>)
 8001458:	f00d fb83 	bl	800eb62 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800145c:	463b      	mov	r3, r7
 800145e:	2205      	movs	r2, #5
 8001460:	4619      	mov	r1, r3
 8001462:	200a      	movs	r0, #10
 8001464:	f7ff fb1a 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001468:	793b      	ldrb	r3, [r7, #4]
 800146a:	461c      	mov	r4, r3
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	461d      	mov	r5, r3
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	787a      	ldrb	r2, [r7, #1]
 8001474:	7839      	ldrb	r1, [r7, #0]
 8001476:	f107 0008 	add.w	r0, r7, #8
 800147a:	9102      	str	r1, [sp, #8]
 800147c:	9201      	str	r2, [sp, #4]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	462b      	mov	r3, r5
 8001482:	4622      	mov	r2, r4
 8001484:	49c5      	ldr	r1, [pc, #788]	; (800179c <printRadioSettings+0x740>)
 8001486:	f017 f957 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ff26 	bl	80002e0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	230a      	movs	r3, #10
 800149e:	48be      	ldr	r0, [pc, #760]	; (8001798 <printRadioSettings+0x73c>)
 80014a0:	f00d fb5f 	bl	800eb62 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80014a4:	463b      	mov	r3, r7
 80014a6:	2205      	movs	r2, #5
 80014a8:	4619      	mov	r1, r3
 80014aa:	200b      	movs	r0, #11
 80014ac:	f7ff faf6 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014b0:	793b      	ldrb	r3, [r7, #4]
 80014b2:	461c      	mov	r4, r3
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	461d      	mov	r5, r3
 80014b8:	78bb      	ldrb	r3, [r7, #2]
 80014ba:	787a      	ldrb	r2, [r7, #1]
 80014bc:	7839      	ldrb	r1, [r7, #0]
 80014be:	f107 0008 	add.w	r0, r7, #8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	462b      	mov	r3, r5
 80014ca:	4622      	mov	r2, r4
 80014cc:	49b4      	ldr	r1, [pc, #720]	; (80017a0 <printRadioSettings+0x744>)
 80014ce:	f017 f933 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ff02 	bl	80002e0 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	f107 0108 	add.w	r1, r7, #8
 80014e4:	230a      	movs	r3, #10
 80014e6:	48ac      	ldr	r0, [pc, #688]	; (8001798 <printRadioSettings+0x73c>)
 80014e8:	f00d fb3b 	bl	800eb62 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014ec:	463b      	mov	r3, r7
 80014ee:	2201      	movs	r2, #1
 80014f0:	4619      	mov	r1, r3
 80014f2:	200c      	movs	r0, #12
 80014f4:	f7ff fad2 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014f8:	783b      	ldrb	r3, [r7, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	49a8      	ldr	r1, [pc, #672]	; (80017a4 <printRadioSettings+0x748>)
 8001502:	4618      	mov	r0, r3
 8001504:	f017 f918 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fee7 	bl	80002e0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 0108 	add.w	r1, r7, #8
 800151a:	230a      	movs	r3, #10
 800151c:	489e      	ldr	r0, [pc, #632]	; (8001798 <printRadioSettings+0x73c>)
 800151e:	f00d fb20 	bl	800eb62 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001522:	463b      	mov	r3, r7
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	200d      	movs	r0, #13
 800152a:	f7ff fab7 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800152e:	783b      	ldrb	r3, [r7, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	499c      	ldr	r1, [pc, #624]	; (80017a8 <printRadioSettings+0x74c>)
 8001538:	4618      	mov	r0, r3
 800153a:	f017 f8fd 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fecc 	bl	80002e0 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f107 0108 	add.w	r1, r7, #8
 8001550:	230a      	movs	r3, #10
 8001552:	4891      	ldr	r0, [pc, #580]	; (8001798 <printRadioSettings+0x73c>)
 8001554:	f00d fb05 	bl	800eb62 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001558:	463b      	mov	r3, r7
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	200e      	movs	r0, #14
 8001560:	f7ff fa9c 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001564:	783b      	ldrb	r3, [r7, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	498f      	ldr	r1, [pc, #572]	; (80017ac <printRadioSettings+0x750>)
 800156e:	4618      	mov	r0, r3
 8001570:	f017 f8e2 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe feb1 	bl	80002e0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	f107 0108 	add.w	r1, r7, #8
 8001586:	230a      	movs	r3, #10
 8001588:	4883      	ldr	r0, [pc, #524]	; (8001798 <printRadioSettings+0x73c>)
 800158a:	f00d faea 	bl	800eb62 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800158e:	463b      	mov	r3, r7
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	200f      	movs	r0, #15
 8001596:	f7ff fa81 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800159a:	783b      	ldrb	r3, [r7, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4983      	ldr	r1, [pc, #524]	; (80017b0 <printRadioSettings+0x754>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f017 f8c7 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe96 	bl	80002e0 <strlen>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f107 0108 	add.w	r1, r7, #8
 80015bc:	230a      	movs	r3, #10
 80015be:	4876      	ldr	r0, [pc, #472]	; (8001798 <printRadioSettings+0x73c>)
 80015c0:	f00d facf 	bl	800eb62 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015c4:	463b      	mov	r3, r7
 80015c6:	2205      	movs	r2, #5
 80015c8:	4619      	mov	r1, r3
 80015ca:	2010      	movs	r0, #16
 80015cc:	f7ff fa66 	bl	8000a9c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015d0:	793b      	ldrb	r3, [r7, #4]
 80015d2:	461c      	mov	r4, r3
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	461d      	mov	r5, r3
 80015d8:	78bb      	ldrb	r3, [r7, #2]
 80015da:	787a      	ldrb	r2, [r7, #1]
 80015dc:	7839      	ldrb	r1, [r7, #0]
 80015de:	f107 0008 	add.w	r0, r7, #8
 80015e2:	9102      	str	r1, [sp, #8]
 80015e4:	9201      	str	r2, [sp, #4]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	462b      	mov	r3, r5
 80015ea:	4622      	mov	r2, r4
 80015ec:	4971      	ldr	r1, [pc, #452]	; (80017b4 <printRadioSettings+0x758>)
 80015ee:	f017 f8a3 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fe72 	bl	80002e0 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	f107 0108 	add.w	r1, r7, #8
 8001604:	230a      	movs	r3, #10
 8001606:	4864      	ldr	r0, [pc, #400]	; (8001798 <printRadioSettings+0x73c>)
 8001608:	f00d faab 	bl	800eb62 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800160c:	2011      	movs	r0, #17
 800160e:	f7ff fa1d 	bl	8000a4c <NRF24_read_register>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001618:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4964      	ldr	r1, [pc, #400]	; (80017b8 <printRadioSettings+0x75c>)
 8001626:	4618      	mov	r0, r3
 8001628:	f017 f886 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fe55 	bl	80002e0 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	f107 0108 	add.w	r1, r7, #8
 800163e:	230a      	movs	r3, #10
 8001640:	4855      	ldr	r0, [pc, #340]	; (8001798 <printRadioSettings+0x73c>)
 8001642:	f00d fa8e 	bl	800eb62 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001646:	2012      	movs	r0, #18
 8001648:	f7ff fa00 	bl	8000a4c <NRF24_read_register>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001652:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4957      	ldr	r1, [pc, #348]	; (80017bc <printRadioSettings+0x760>)
 8001660:	4618      	mov	r0, r3
 8001662:	f017 f869 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fe38 	bl	80002e0 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	f107 0108 	add.w	r1, r7, #8
 8001678:	230a      	movs	r3, #10
 800167a:	4847      	ldr	r0, [pc, #284]	; (8001798 <printRadioSettings+0x73c>)
 800167c:	f00d fa71 	bl	800eb62 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001680:	2013      	movs	r0, #19
 8001682:	f7ff f9e3 	bl	8000a4c <NRF24_read_register>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800168c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4949      	ldr	r1, [pc, #292]	; (80017c0 <printRadioSettings+0x764>)
 800169a:	4618      	mov	r0, r3
 800169c:	f017 f84c 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fe1b 	bl	80002e0 <strlen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f107 0108 	add.w	r1, r7, #8
 80016b2:	230a      	movs	r3, #10
 80016b4:	4838      	ldr	r0, [pc, #224]	; (8001798 <printRadioSettings+0x73c>)
 80016b6:	f00d fa54 	bl	800eb62 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80016ba:	2014      	movs	r0, #20
 80016bc:	f7ff f9c6 	bl	8000a4c <NRF24_read_register>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	493c      	ldr	r1, [pc, #240]	; (80017c4 <printRadioSettings+0x768>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f017 f82f 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fdfe 	bl	80002e0 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f107 0108 	add.w	r1, r7, #8
 80016ec:	230a      	movs	r3, #10
 80016ee:	482a      	ldr	r0, [pc, #168]	; (8001798 <printRadioSettings+0x73c>)
 80016f0:	f00d fa37 	bl	800eb62 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80016f4:	2015      	movs	r0, #21
 80016f6:	f7ff f9a9 	bl	8000a4c <NRF24_read_register>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001700:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001704:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	492e      	ldr	r1, [pc, #184]	; (80017c8 <printRadioSettings+0x76c>)
 800170e:	4618      	mov	r0, r3
 8001710:	f017 f812 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fde1 	bl	80002e0 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	f107 0108 	add.w	r1, r7, #8
 8001726:	230a      	movs	r3, #10
 8001728:	481b      	ldr	r0, [pc, #108]	; (8001798 <printRadioSettings+0x73c>)
 800172a:	f00d fa1a 	bl	800eb62 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800172e:	2016      	movs	r0, #22
 8001730:	f7ff f98c 	bl	8000a4c <NRF24_read_register>
 8001734:	4603      	mov	r3, r0
 8001736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800173a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800173e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4921      	ldr	r1, [pc, #132]	; (80017cc <printRadioSettings+0x770>)
 8001748:	4618      	mov	r0, r3
 800174a:	f016 fff5 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fdc4 	bl	80002e0 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	f107 0108 	add.w	r1, r7, #8
 8001760:	230a      	movs	r3, #10
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <printRadioSettings+0x73c>)
 8001764:	f00d f9fd 	bl	800eb62 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001768:	201c      	movs	r0, #28
 800176a:	f7ff f96f 	bl	8000a4c <NRF24_read_register>
 800176e:	4603      	mov	r3, r0
 8001770:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001774:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001778:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800177c:	2b00      	cmp	r3, #0
 800177e:	bfcc      	ite	gt
 8001780:	2301      	movgt	r3, #1
 8001782:	2300      	movle	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001788:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	e01e      	b.n	80017d0 <printRadioSettings+0x774>
 8001792:	bf00      	nop
 8001794:	080198ec 	.word	0x080198ec
 8001798:	24000294 	.word	0x24000294
 800179c:	08019900 	.word	0x08019900
 80017a0:	08019930 	.word	0x08019930
 80017a4:	08019960 	.word	0x08019960
 80017a8:	08019988 	.word	0x08019988
 80017ac:	080199b0 	.word	0x080199b0
 80017b0:	080199d8 	.word	0x080199d8
 80017b4:	08019a00 	.word	0x08019a00
 80017b8:	08019a2c 	.word	0x08019a2c
 80017bc:	08019a48 	.word	0x08019a48
 80017c0:	08019a64 	.word	0x08019a64
 80017c4:	08019a80 	.word	0x08019a80
 80017c8:	08019a9c 	.word	0x08019a9c
 80017cc:	08019ab8 	.word	0x08019ab8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bfcc      	ite	gt
 80017d4:	2301      	movgt	r3, #1
 80017d6:	2300      	movle	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfcc      	ite	gt
 80017e8:	2301      	movgt	r3, #1
 80017ea:	2300      	movle	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfcc      	ite	gt
 80017fc:	2301      	movgt	r3, #1
 80017fe:	2300      	movle	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001804:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001808:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800180c:	2b00      	cmp	r3, #0
 800180e:	bfcc      	ite	gt
 8001810:	2301      	movgt	r3, #1
 8001812:	2300      	movle	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001818:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfcc      	ite	gt
 8001824:	2301      	movgt	r3, #1
 8001826:	2300      	movle	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f107 0008 	add.w	r0, r7, #8
 800182e:	9303      	str	r3, [sp, #12]
 8001830:	9402      	str	r4, [sp, #8]
 8001832:	9101      	str	r1, [sp, #4]
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	4633      	mov	r3, r6
 8001838:	462a      	mov	r2, r5
 800183a:	494a      	ldr	r1, [pc, #296]	; (8001964 <printRadioSettings+0x908>)
 800183c:	f016 ff7c 	bl	8018738 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fd4b 	bl	80002e0 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	f107 0108 	add.w	r1, r7, #8
 8001852:	230a      	movs	r3, #10
 8001854:	4844      	ldr	r0, [pc, #272]	; (8001968 <printRadioSettings+0x90c>)
 8001856:	f00d f984 	bl	800eb62 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800185a:	201d      	movs	r0, #29
 800185c:	f7ff f8f6 	bl	8000a4c <NRF24_read_register>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001866:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <printRadioSettings+0x830>
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4a3d      	ldr	r2, [pc, #244]	; (800196c <printRadioSettings+0x910>)
 8001878:	461c      	mov	r4, r3
 800187a:	4615      	mov	r5, r2
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001884:	6020      	str	r0, [r4, #0]
 8001886:	3404      	adds	r4, #4
 8001888:	8021      	strh	r1, [r4, #0]
 800188a:	e00e      	b.n	80018aa <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4a37      	ldr	r2, [pc, #220]	; (8001970 <printRadioSettings+0x914>)
 8001892:	461c      	mov	r4, r3
 8001894:	4615      	mov	r5, r2
 8001896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800189e:	6020      	str	r0, [r4, #0]
 80018a0:	3404      	adds	r4, #4
 80018a2:	8021      	strh	r1, [r4, #0]
 80018a4:	3402      	adds	r4, #2
 80018a6:	0c0b      	lsrs	r3, r1, #16
 80018a8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fd16 	bl	80002e0 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f107 0108 	add.w	r1, r7, #8
 80018bc:	230a      	movs	r3, #10
 80018be:	482a      	ldr	r0, [pc, #168]	; (8001968 <printRadioSettings+0x90c>)
 80018c0:	f00d f94f 	bl	800eb62 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80018c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00b      	beq.n	80018e8 <printRadioSettings+0x88c>
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4a27      	ldr	r2, [pc, #156]	; (8001974 <printRadioSettings+0x918>)
 80018d6:	461c      	mov	r4, r3
 80018d8:	4615      	mov	r5, r2
 80018da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018e2:	c403      	stmia	r4!, {r0, r1}
 80018e4:	8022      	strh	r2, [r4, #0]
 80018e6:	e00d      	b.n	8001904 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <printRadioSettings+0x91c>)
 80018ee:	461c      	mov	r4, r3
 80018f0:	4615      	mov	r5, r2
 80018f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018fa:	c403      	stmia	r4!, {r0, r1}
 80018fc:	8022      	strh	r2, [r4, #0]
 80018fe:	3402      	adds	r4, #2
 8001900:	0c13      	lsrs	r3, r2, #16
 8001902:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <printRadioSettings+0x90c>)
 800191a:	f00d f922 	bl	800eb62 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	4a16      	ldr	r2, [pc, #88]	; (800197c <printRadioSettings+0x920>)
 8001924:	461c      	mov	r4, r3
 8001926:	4615      	mov	r5, r2
 8001928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	8022      	strh	r2, [r4, #0]
 800193a:	3402      	adds	r4, #2
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fccb 	bl	80002e0 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0108 	add.w	r1, r7, #8
 8001952:	230a      	movs	r3, #10
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <printRadioSettings+0x90c>)
 8001956:	f00d f904 	bl	800eb62 <HAL_UART_Transmit>
}
 800195a:	bf00      	nop
 800195c:	3774      	adds	r7, #116	; 0x74
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001962:	bf00      	nop
 8001964:	08019ad4 	.word	0x08019ad4
 8001968:	24000294 	.word	0x24000294
 800196c:	08019b20 	.word	0x08019b20
 8001970:	08019b38 	.word	0x08019b38
 8001974:	08019b50 	.word	0x08019b50
 8001978:	08019b6c 	.word	0x08019b6c
 800197c:	08019740 	.word	0x08019740

08001980 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001980:	b084      	sub	sp, #16
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
 8001986:	f107 0c08 	add.w	ip, r7, #8
 800198a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <nrf24_DebugUART_Init+0x2c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f107 0108 	add.w	r1, r7, #8
 8001996:	238c      	movs	r3, #140	; 0x8c
 8001998:	461a      	mov	r2, r3
 800199a:	f016 fd51 	bl	8018440 <memcpy>
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a6:	b004      	add	sp, #16
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	24000294 	.word	0x24000294

080019b0 <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	dd03      	ble.n	80019c8 <WriteToBuff+0x18>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019c6:	db01      	blt.n	80019cc <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 80019c8:	2303      	movs	r3, #3
 80019ca:	e091      	b.n	8001af0 <WriteToBuff+0x140>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <WriteToBuff+0x148>)
 80019ce:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019d8:	d23a      	bcs.n	8001a50 <WriteToBuff+0xa0>
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <WriteToBuff+0x148>)
 80019dc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019ea:	d331      	bcc.n	8001a50 <WriteToBuff+0xa0>
    DataBuffer.counter = Bufflength;
 80019ec:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <WriteToBuff+0x148>)
 80019ee:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80019f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f6:	601a      	str	r2, [r3, #0]
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <WriteToBuff+0x148>)
 80019fa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a3d      	ldr	r2, [pc, #244]	; (8001af8 <WriteToBuff+0x148>)
 8001a02:	4413      	add	r3, r2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f016 fd19 	bl	8018440 <memcpy>
    DataBuffer.counter += len;
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <WriteToBuff+0x148>)
 8001a10:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	441a      	add	r2, r3
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <WriteToBuff+0x148>)
 8001a1c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a20:	601a      	str	r2, [r3, #0]
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001a22:	4b36      	ldr	r3, [pc, #216]	; (8001afc <WriteToBuff+0x14c>)
 8001a24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a28:	4933      	ldr	r1, [pc, #204]	; (8001af8 <WriteToBuff+0x148>)
 8001a2a:	4835      	ldr	r0, [pc, #212]	; (8001b00 <WriteToBuff+0x150>)
 8001a2c:	f015 fd57 	bl	80174de <f_write>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10a      	bne.n	8001a4c <WriteToBuff+0x9c>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4831      	ldr	r0, [pc, #196]	; (8001b04 <WriteToBuff+0x154>)
 8001a3e:	f016 fd0a 	bl	8018456 <memset>
    	//f_sync(&myFILE);
      printf("Buffer 1 has been written\n");
 8001a42:	4831      	ldr	r0, [pc, #196]	; (8001b08 <WriteToBuff+0x158>)
 8001a44:	f016 fe2c 	bl	80186a0 <puts>
      return 1; //buffer 1 has been written
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e051      	b.n	8001af0 <WriteToBuff+0x140>
    }
    return 4; //could not write :(
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e04f      	b.n	8001af0 <WriteToBuff+0x140>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <WriteToBuff+0x148>)
 8001a52:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a60:	d330      	bcc.n	8001ac4 <WriteToBuff+0x114>
    DataBuffer.counter = 0;
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <WriteToBuff+0x148>)
 8001a64:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <WriteToBuff+0x148>)
 8001a6e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <WriteToBuff+0x148>)
 8001a76:	4413      	add	r3, r2
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f016 fcdf 	bl	8018440 <memcpy>
    DataBuffer.counter += len;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <WriteToBuff+0x148>)
 8001a84:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	441a      	add	r2, r3
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <WriteToBuff+0x148>)
 8001a90:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001a94:	601a      	str	r2, [r3, #0]
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <WriteToBuff+0x14c>)
 8001a98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a9c:	4919      	ldr	r1, [pc, #100]	; (8001b04 <WriteToBuff+0x154>)
 8001a9e:	4818      	ldr	r0, [pc, #96]	; (8001b00 <WriteToBuff+0x150>)
 8001aa0:	f015 fd1d 	bl	80174de <f_write>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10a      	bne.n	8001ac0 <WriteToBuff+0x110>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <WriteToBuff+0x148>)
 8001ab2:	f016 fcd0 	bl	8018456 <memset>
    	//f_sync(&myFILE);
      printf("Buffer 2 has been written\n");
 8001ab6:	4815      	ldr	r0, [pc, #84]	; (8001b0c <WriteToBuff+0x15c>)
 8001ab8:	f016 fdf2 	bl	80186a0 <puts>
      return 2; //buffer 2 has been written
 8001abc:	2302      	movs	r3, #2
 8001abe:	e017      	b.n	8001af0 <WriteToBuff+0x140>
    }
    return 4; //could not write :(
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e015      	b.n	8001af0 <WriteToBuff+0x140>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <WriteToBuff+0x148>)
 8001ac6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <WriteToBuff+0x148>)
 8001ace:	4413      	add	r3, r2
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f016 fcb3 	bl	8018440 <memcpy>
  DataBuffer.counter += len;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <WriteToBuff+0x148>)
 8001adc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	441a      	add	r2, r3
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <WriteToBuff+0x148>)
 8001ae8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001aec:	601a      	str	r2, [r3, #0]
  return 0; //moved data to buffer
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24000320 	.word	0x24000320
 8001afc:	240408c8 	.word	0x240408c8
 8001b00:	24040390 	.word	0x24040390
 8001b04:	24020320 	.word	0x24020320
 8001b08:	08019c84 	.word	0x08019c84
 8001b0c:	08019ca0 	.word	0x08019ca0

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	f2ad 7df4 	subw	sp, sp, #2036	; 0x7f4
 8001b16:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b18:	f001 fcb6 	bl	8003488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1c:	f000 fbe2 	bl	80022e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b20:	f000 ff42 	bl	80029a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b24:	f000 ff20 	bl	8002968 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001b28:	f000 fe0e 	bl	8002748 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001b2c:	f010 fb4e 	bl	80121cc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001b30:	f015 ff4e 	bl	80179d0 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001b34:	f000 fce0 	bl	80024f8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001b38:	f000 fd44 	bl	80025c4 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001b3c:	f000 fe7c 	bl	8002838 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001b40:	f000 fec6 	bl	80028d0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001b44:	f000 fe22 	bl	800278c <MX_SPI1_Init>
  MX_RTC_Init();
 8001b48:	f000 fda0 	bl	800268c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	488a      	ldr	r0, [pc, #552]	; (8001d78 <main+0x268>)
 8001b50:	f005 fa5f 	bl	8007012 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001b54:	4c89      	ldr	r4, [pc, #548]	; (8001d7c <main+0x26c>)
 8001b56:	4668      	mov	r0, sp
 8001b58:	1d23      	adds	r3, r4, #4
 8001b5a:	2284      	movs	r2, #132	; 0x84
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f016 fc6f 	bl	8018440 <memcpy>
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	2102      	movs	r1, #2
 8001b68:	4885      	ldr	r0, [pc, #532]	; (8001d80 <main+0x270>)
 8001b6a:	f7ff f819 	bl	8000ba0 <NRF24_begin>
    nrf24_DebugUART_Init(huart3);
 8001b6e:	4c85      	ldr	r4, [pc, #532]	; (8001d84 <main+0x274>)
 8001b70:	4668      	mov	r0, sp
 8001b72:	f104 0310 	add.w	r3, r4, #16
 8001b76:	227c      	movs	r2, #124	; 0x7c
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f016 fc61 	bl	8018440 <memcpy>
 8001b7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b82:	f7ff fefd 	bl	8001980 <nrf24_DebugUART_Init>



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001b86:	f7ff f8eb 	bl	8000d60 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <main+0x278>)
 8001b8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b90:	4618      	mov	r0, r3
 8001b92:	4621      	mov	r1, r4
 8001b94:	f7ff f8f0 	bl	8000d78 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff f971 	bl	8000e80 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001b9e:	202a      	movs	r0, #42	; 0x2a
 8001ba0:	f7ff f929 	bl	8000df6 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001ba4:	2020      	movs	r0, #32
 8001ba6:	f7ff f93b 	bl	8000e20 <NRF24_setPayloadSize>

    printRadioSettings();
 8001baa:	f7ff fa57 	bl	800105c <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001bae:	4877      	ldr	r0, [pc, #476]	; (8001d8c <main+0x27c>)
 8001bb0:	f016 fd76 	bl	80186a0 <puts>
  FDCAN_Config(&hfdcan1);
 8001bb4:	4876      	ldr	r0, [pc, #472]	; (8001d90 <main+0x280>)
 8001bb6:	f7fe fd6b 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001bba:	2246      	movs	r2, #70	; 0x46
 8001bbc:	4975      	ldr	r1, [pc, #468]	; (8001d94 <main+0x284>)
 8001bbe:	4871      	ldr	r0, [pc, #452]	; (8001d84 <main+0x274>)
 8001bc0:	f00d f866 	bl	800ec90 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001bc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc8:	f001 fcf0 	bl	80035ac <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001bcc:	2364      	movs	r3, #100	; 0x64
 8001bce:	f8a7 375a 	strh.w	r3, [r7, #1882]	; 0x75a
  uint16_t navRate = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f8a7 3758 	strh.w	r3, [r7, #1880]	; 0x758
  uint16_t timeRef = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8a7 3756 	strh.w	r3, [r7, #1878]	; 0x756
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001bde:	f8b7 3756 	ldrh.w	r3, [r7, #1878]	; 0x756
 8001be2:	f8b7 2758 	ldrh.w	r2, [r7, #1880]	; 0x758
 8001be6:	f8b7 175a 	ldrh.w	r1, [r7, #1882]	; 0x75a
 8001bea:	4866      	ldr	r0, [pc, #408]	; (8001d84 <main+0x274>)
 8001bec:	f7fe fe7a 	bl	80008e4 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4969      	ldr	r1, [pc, #420]	; (8001d98 <main+0x288>)
 8001bf4:	4863      	ldr	r0, [pc, #396]	; (8001d84 <main+0x274>)
 8001bf6:	f7fe fe05 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4967      	ldr	r1, [pc, #412]	; (8001d9c <main+0x28c>)
 8001bfe:	4861      	ldr	r0, [pc, #388]	; (8001d84 <main+0x274>)
 8001c00:	f7fe fe00 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	4966      	ldr	r1, [pc, #408]	; (8001da0 <main+0x290>)
 8001c08:	485e      	ldr	r0, [pc, #376]	; (8001d84 <main+0x274>)
 8001c0a:	f7fe fdfb 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4964      	ldr	r1, [pc, #400]	; (8001da4 <main+0x294>)
 8001c12:	485c      	ldr	r0, [pc, #368]	; (8001d84 <main+0x274>)
 8001c14:	f7fe fdf6 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4963      	ldr	r1, [pc, #396]	; (8001da8 <main+0x298>)
 8001c1c:	4859      	ldr	r0, [pc, #356]	; (8001d84 <main+0x274>)
 8001c1e:	f7fe fdf1 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001c22:	2200      	movs	r2, #0
 8001c24:	4961      	ldr	r1, [pc, #388]	; (8001dac <main+0x29c>)
 8001c26:	4857      	ldr	r0, [pc, #348]	; (8001d84 <main+0x274>)
 8001c28:	f7fe fdec 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4960      	ldr	r1, [pc, #384]	; (8001db0 <main+0x2a0>)
 8001c30:	4854      	ldr	r0, [pc, #336]	; (8001d84 <main+0x274>)
 8001c32:	f7fe fde7 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	495e      	ldr	r1, [pc, #376]	; (8001db4 <main+0x2a4>)
 8001c3a:	4852      	ldr	r0, [pc, #328]	; (8001d84 <main+0x274>)
 8001c3c:	f7fe fde2 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8001c40:	2200      	movs	r2, #0
 8001c42:	495d      	ldr	r1, [pc, #372]	; (8001db8 <main+0x2a8>)
 8001c44:	484f      	ldr	r0, [pc, #316]	; (8001d84 <main+0x274>)
 8001c46:	f7fe fddd 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	495b      	ldr	r1, [pc, #364]	; (8001dbc <main+0x2ac>)
 8001c4e:	484d      	ldr	r0, [pc, #308]	; (8001d84 <main+0x274>)
 8001c50:	f7fe fdd8 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8001c54:	2200      	movs	r2, #0
 8001c56:	495a      	ldr	r1, [pc, #360]	; (8001dc0 <main+0x2b0>)
 8001c58:	484a      	ldr	r0, [pc, #296]	; (8001d84 <main+0x274>)
 8001c5a:	f7fe fdd3 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4958      	ldr	r1, [pc, #352]	; (8001dc4 <main+0x2b4>)
 8001c62:	4848      	ldr	r0, [pc, #288]	; (8001d84 <main+0x274>)
 8001c64:	f7fe fdce 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4957      	ldr	r1, [pc, #348]	; (8001dc8 <main+0x2b8>)
 8001c6c:	4845      	ldr	r0, [pc, #276]	; (8001d84 <main+0x274>)
 8001c6e:	f7fe fdc9 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8001c72:	2200      	movs	r2, #0
 8001c74:	4955      	ldr	r1, [pc, #340]	; (8001dcc <main+0x2bc>)
 8001c76:	4843      	ldr	r0, [pc, #268]	; (8001d84 <main+0x274>)
 8001c78:	f7fe fdc4 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4954      	ldr	r1, [pc, #336]	; (8001dd0 <main+0x2c0>)
 8001c80:	4840      	ldr	r0, [pc, #256]	; (8001d84 <main+0x274>)
 8001c82:	f7fe fdbf 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8001c86:	2201      	movs	r2, #1
 8001c88:	4952      	ldr	r1, [pc, #328]	; (8001dd4 <main+0x2c4>)
 8001c8a:	483e      	ldr	r0, [pc, #248]	; (8001d84 <main+0x274>)
 8001c8c:	f7fe fdba 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	4951      	ldr	r1, [pc, #324]	; (8001dd8 <main+0x2c8>)
 8001c94:	483b      	ldr	r0, [pc, #236]	; (8001d84 <main+0x274>)
 8001c96:	f7fe fdb5 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	494f      	ldr	r1, [pc, #316]	; (8001ddc <main+0x2cc>)
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <main+0x274>)
 8001ca0:	f7fe fdb0 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	494e      	ldr	r1, [pc, #312]	; (8001de0 <main+0x2d0>)
 8001ca8:	4836      	ldr	r0, [pc, #216]	; (8001d84 <main+0x274>)
 8001caa:	f7fe fdab 	bl	8000804 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8001cae:	2200      	movs	r2, #0
 8001cb0:	494c      	ldr	r1, [pc, #304]	; (8001de4 <main+0x2d4>)
 8001cb2:	4834      	ldr	r0, [pc, #208]	; (8001d84 <main+0x274>)
 8001cb4:	f7fe fda6 	bl	8000804 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8001cb8:	2201      	movs	r2, #1
 8001cba:	494b      	ldr	r1, [pc, #300]	; (8001de8 <main+0x2d8>)
 8001cbc:	484b      	ldr	r0, [pc, #300]	; (8001dec <main+0x2dc>)
 8001cbe:	f015 f8cb 	bl	8016e58 <f_mount>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 80b3 	bne.w	8001e30 <main+0x320>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "pvdwrk.csv\0";
 8001cca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cce:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <main+0x2e0>)
 8001cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigPath[] ="Config.csv\0";
 8001cd6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001cda:	4a46      	ldr	r2, [pc, #280]	; (8001df4 <main+0x2e4>)
 8001cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8001ce2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4843      	ldr	r0, [pc, #268]	; (8001df8 <main+0x2e8>)
 8001cec:	f015 f8fa 	bl	8016ee4 <f_open>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	f040 8088 	bne.w	8001e08 <main+0x2f8>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001cf8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001cfc:	220a      	movs	r2, #10
 8001cfe:	4619      	mov	r1, r3
 8001d00:	483d      	ldr	r0, [pc, #244]	; (8001df8 <main+0x2e8>)
 8001d02:	f015 f8ef 	bl	8016ee4 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4a3c      	ldr	r2, [pc, #240]	; (8001dfc <main+0x2ec>)
 8001d0a:	461c      	mov	r4, r3
 8001d0c:	4615      	mov	r5, r2
 8001d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d1a:	c403      	stmia	r4!, {r0, r1}
 8001d1c:	8022      	strh	r2, [r4, #0]
 8001d1e:	3402      	adds	r4, #2
 8001d20:	0c13      	lsrs	r3, r2, #16
 8001d22:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fada 	bl	80002e0 <strlen>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4413      	add	r3, r2
 8001d32:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <main+0x2f0>)
 8001d34:	4614      	mov	r4, r2
 8001d36:	469c      	mov	ip, r3
 8001d38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001d3c:	4665      	mov	r5, ip
 8001d3e:	4626      	mov	r6, r4
 8001d40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d42:	6028      	str	r0, [r5, #0]
 8001d44:	6069      	str	r1, [r5, #4]
 8001d46:	60aa      	str	r2, [r5, #8]
 8001d48:	60eb      	str	r3, [r5, #12]
 8001d4a:	3410      	adds	r4, #16
 8001d4c:	f10c 0c10 	add.w	ip, ip, #16
 8001d50:	4574      	cmp	r4, lr
 8001d52:	d1f3      	bne.n	8001d3c <main+0x22c>
 8001d54:	4662      	mov	r2, ip
 8001d56:	4623      	mov	r3, r4
 8001d58:	cb03      	ldmia	r3!, {r0, r1}
 8001d5a:	6010      	str	r0, [r2, #0]
 8001d5c:	6051      	str	r1, [r2, #4]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fabb 	bl	80002e0 <strlen>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	1d39      	adds	r1, r7, #4
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <main+0x2f4>)
 8001d70:	4821      	ldr	r0, [pc, #132]	; (8001df8 <main+0x2e8>)
 8001d72:	f015 fbb4 	bl	80174de <f_write>
 8001d76:	e051      	b.n	8001e1c <main+0x30c>
 8001d78:	58020400 	.word	0x58020400
 8001d7c:	24040e18 	.word	0x24040e18
 8001d80:	58020000 	.word	0x58020000
 8001d84:	24040bbc 	.word	0x24040bbc
 8001d88:	24000000 	.word	0x24000000
 8001d8c:	08019cbc 	.word	0x08019cbc
 8001d90:	24040cec 	.word	0x24040cec
 8001d94:	24040afc 	.word	0x24040afc
 8001d98:	08019cc8 	.word	0x08019cc8
 8001d9c:	08019ccc 	.word	0x08019ccc
 8001da0:	08019cd0 	.word	0x08019cd0
 8001da4:	08019cd4 	.word	0x08019cd4
 8001da8:	08019cd8 	.word	0x08019cd8
 8001dac:	08019cdc 	.word	0x08019cdc
 8001db0:	08019ce0 	.word	0x08019ce0
 8001db4:	08019ce4 	.word	0x08019ce4
 8001db8:	08019ce8 	.word	0x08019ce8
 8001dbc:	08019cec 	.word	0x08019cec
 8001dc0:	08019cf0 	.word	0x08019cf0
 8001dc4:	08019cf4 	.word	0x08019cf4
 8001dc8:	08019cf8 	.word	0x08019cf8
 8001dcc:	08019cfc 	.word	0x08019cfc
 8001dd0:	08019d00 	.word	0x08019d00
 8001dd4:	08019d04 	.word	0x08019d04
 8001dd8:	08019d08 	.word	0x08019d08
 8001ddc:	08019d0c 	.word	0x08019d0c
 8001de0:	08019d10 	.word	0x08019d10
 8001de4:	08019d14 	.word	0x08019d14
 8001de8:	24040f48 	.word	0x24040f48
 8001dec:	240405c8 	.word	0x240405c8
 8001df0:	08019da0 	.word	0x08019da0
 8001df4:	08019dac 	.word	0x08019dac
 8001df8:	240408cc 	.word	0x240408cc
 8001dfc:	08019d18 	.word	0x08019d18
 8001e00:	08019d44 	.word	0x08019d44
 8001e04:	240405c4 	.word	0x240405c4
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fa68 	bl	80002e0 <strlen>
 8001e10:	4602      	mov	r2, r0
 8001e12:	1d39      	adds	r1, r7, #4
 8001e14:	4b98      	ldr	r3, [pc, #608]	; (8002078 <main+0x568>)
 8001e16:	4899      	ldr	r0, [pc, #612]	; (800207c <main+0x56c>)
 8001e18:	f015 fa22 	bl	8017260 <f_read>
      }
      f_close(&Config);
 8001e1c:	4897      	ldr	r0, [pc, #604]	; (800207c <main+0x56c>)
 8001e1e:	f015 fd51 	bl	80178c4 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8001e22:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e26:	220a      	movs	r2, #10
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4895      	ldr	r0, [pc, #596]	; (8002080 <main+0x570>)
 8001e2c:	f015 f85a 	bl	8016ee4 <f_open>

  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;

  sTime.SecondFraction = 999;
 8001e30:	4b94      	ldr	r3, [pc, #592]	; (8002084 <main+0x574>)
 8001e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e36:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8001e38:	f001 fbac 	bl	8003594 <HAL_GetTick>
 8001e3c:	f8c7 0750 	str.w	r0, [r7, #1872]	; 0x750
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001e40:	2200      	movs	r2, #0
 8001e42:	4990      	ldr	r1, [pc, #576]	; (8002084 <main+0x574>)
 8001e44:	4890      	ldr	r0, [pc, #576]	; (8002088 <main+0x578>)
 8001e46:	f009 fc07 	bl	800b658 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	498f      	ldr	r1, [pc, #572]	; (800208c <main+0x57c>)
 8001e4e:	488e      	ldr	r0, [pc, #568]	; (8002088 <main+0x578>)
 8001e50:	f009 fce6 	bl	800b820 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8001e54:	4b8b      	ldr	r3, [pc, #556]	; (8002084 <main+0x574>)
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	f8d7 2750 	ldr.w	r2, [r7, #1872]	; 0x750
 8001e5c:	4b8c      	ldr	r3, [pc, #560]	; (8002090 <main+0x580>)
 8001e5e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e68:	fb00 f303 	mul.w	r3, r0, r3
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	1acb      	subs	r3, r1, r3
 8001e70:	4a84      	ldr	r2, [pc, #528]	; (8002084 <main+0x574>)
 8001e72:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 8001e74:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001e78:	4a85      	ldr	r2, [pc, #532]	; (8002090 <main+0x580>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
  sTime.Seconds -= LocalTime % 60;
 8001e84:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <main+0x574>)
 8001e86:	7898      	ldrb	r0, [r3, #2]
 8001e88:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8001e8c:	4b81      	ldr	r3, [pc, #516]	; (8002094 <main+0x584>)
 8001e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8001e92:	095a      	lsrs	r2, r3, #5
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	1aca      	subs	r2, r1, r3
 8001e9e:	b2d3      	uxtb	r3, r2
 8001ea0:	1ac3      	subs	r3, r0, r3
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b77      	ldr	r3, [pc, #476]	; (8002084 <main+0x574>)
 8001ea6:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8001ea8:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001eac:	4a79      	ldr	r2, [pc, #484]	; (8002094 <main+0x584>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
  sTime.Minutes -= LocalTime % 60;
 8001eb8:	4b72      	ldr	r3, [pc, #456]	; (8002084 <main+0x574>)
 8001eba:	7858      	ldrb	r0, [r3, #1]
 8001ebc:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8001ec0:	4b74      	ldr	r3, [pc, #464]	; (8002094 <main+0x584>)
 8001ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ec6:	095a      	lsrs	r2, r3, #5
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	1aca      	subs	r2, r1, r3
 8001ed2:	b2d3      	uxtb	r3, r2
 8001ed4:	1ac3      	subs	r3, r0, r3
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <main+0x574>)
 8001eda:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8001edc:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001ee0:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <main+0x584>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
  sTime.Hours -= LocalTime % 60;
 8001eec:	4b65      	ldr	r3, [pc, #404]	; (8002084 <main+0x574>)
 8001eee:	7818      	ldrb	r0, [r3, #0]
 8001ef0:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8001ef4:	4b67      	ldr	r3, [pc, #412]	; (8002094 <main+0x584>)
 8001ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8001efa:	095a      	lsrs	r2, r3, #5
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	1aca      	subs	r2, r1, r3
 8001f06:	b2d3      	uxtb	r3, r2
 8001f08:	1ac3      	subs	r3, r0, r3
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <main+0x574>)
 8001f0e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
  char CanFDWrite[400];
  int CFDW = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764

  while (end_flag){
 8001f1c:	e1bb      	b.n	8002296 <main+0x786>

	  if(GPS_flag){
 8001f1e:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <main+0x588>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <main+0x424>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8001f26:	2146      	movs	r1, #70	; 0x46
 8001f28:	485c      	ldr	r0, [pc, #368]	; (800209c <main+0x58c>)
 8001f2a:	f7ff fd41 	bl	80019b0 <WriteToBuff>
		  GPS_flag=0;
 8001f2e:	4b5a      	ldr	r3, [pc, #360]	; (8002098 <main+0x588>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/
	  if(FDCAN_Flag){
 8001f34:	4b5a      	ldr	r3, [pc, #360]	; (80020a0 <main+0x590>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80e1 	beq.w	8002100 <main+0x5f0>

		  RTC_TimeTypeDef lTime = sTime;
 8001f3e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f42:	4a50      	ldr	r2, [pc, #320]	; (8002084 <main+0x574>)
 8001f44:	461c      	mov	r4, r3
 8001f46:	4615      	mov	r5, r2
 8001f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8001f50:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <main+0x594>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
		  lTime.SubSeconds += LocalTime % 1000;
 8001f58:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	f8d7 2750 	ldr.w	r2, [r7, #1872]	; 0x750
 8001f62:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <main+0x580>)
 8001f64:	fba3 0302 	umull	r0, r3, r3, r2
 8001f68:	099b      	lsrs	r3, r3, #6
 8001f6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6e:	fb00 f303 	mul.w	r3, r0, r3
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	18ca      	adds	r2, r1, r3
 8001f76:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f7a:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8001f7c:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001f80:	4a43      	ldr	r2, [pc, #268]	; (8002090 <main+0x580>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	099b      	lsrs	r3, r3, #6
 8001f88:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
		  lTime.Seconds += LocalTime % 60;
 8001f8c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f90:	7898      	ldrb	r0, [r3, #2]
 8001f92:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <main+0x584>)
 8001f98:	fba3 2301 	umull	r2, r3, r3, r1
 8001f9c:	095a      	lsrs	r2, r3, #5
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	1aca      	subs	r2, r1, r3
 8001fa8:	b2d3      	uxtb	r3, r2
 8001faa:	4403      	add	r3, r0
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fb2:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8001fb4:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001fb8:	4a36      	ldr	r2, [pc, #216]	; (8002094 <main+0x584>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
		  lTime.Minutes += LocalTime % 60;
 8001fc4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fc8:	7858      	ldrb	r0, [r3, #1]
 8001fca:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <main+0x584>)
 8001fd0:	fba3 2301 	umull	r2, r3, r3, r1
 8001fd4:	095a      	lsrs	r2, r3, #5
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	1aca      	subs	r2, r1, r3
 8001fe0:	b2d3      	uxtb	r3, r2
 8001fe2:	4403      	add	r3, r0
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fea:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8001fec:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001ff0:	4a28      	ldr	r2, [pc, #160]	; (8002094 <main+0x584>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
		  lTime.Hours += LocalTime % 60;
 8001ffc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002000:	7818      	ldrb	r0, [r3, #0]
 8002002:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <main+0x584>)
 8002008:	fba3 2301 	umull	r2, r3, r3, r1
 800200c:	095a      	lsrs	r2, r3, #5
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	1aca      	subs	r2, r1, r3
 8002018:	b2d3      	uxtb	r3, r2
 800201a:	4403      	add	r3, r0
 800201c:	b2da      	uxtb	r2, r3
 800201e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002022:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <main+0x57c>)
 8002026:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002028:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <main+0x57c>)
 800202c:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800202e:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <main+0x57c>)
 8002032:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002034:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <main+0x574>)
 8002038:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800203a:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <main+0x574>)
 800203e:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002040:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <main+0x574>)
 8002044:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002046:	461e      	mov	r6, r3
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <main+0x574>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <main+0x594>)
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f207 402c 	addw	r0, r7, #1068	; 0x42c
 8002054:	9205      	str	r2, [sp, #20]
 8002056:	9304      	str	r3, [sp, #16]
 8002058:	9603      	str	r6, [sp, #12]
 800205a:	9502      	str	r5, [sp, #8]
 800205c:	9401      	str	r4, [sp, #4]
 800205e:	9100      	str	r1, [sp, #0]
 8002060:	4673      	mov	r3, lr
 8002062:	4662      	mov	r2, ip
 8002064:	4910      	ldr	r1, [pc, #64]	; (80020a8 <main+0x598>)
 8002066:	f016 fb67 	bl	8018738 <siprintf>
 800206a:	f8c7 0764 	str.w	r0, [r7, #1892]	; 0x764
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
 8002074:	e034      	b.n	80020e0 <main+0x5d0>
 8002076:	bf00      	nop
 8002078:	240405c0 	.word	0x240405c0
 800207c:	240408cc 	.word	0x240408cc
 8002080:	24040390 	.word	0x24040390
 8002084:	24040324 	.word	0x24040324
 8002088:	24040cc8 	.word	0x24040cc8
 800208c:	24040338 	.word	0x24040338
 8002090:	10624dd3 	.word	0x10624dd3
 8002094:	88888889 	.word	0x88888889
 8002098:	240001fc 	.word	0x240001fc
 800209c:	24040afc 	.word	0x24040afc
 80020a0:	240001f4 	.word	0x240001f4
 80020a4:	24040838 	.word	0x24040838
 80020a8:	08019d80 	.word	0x08019d80
			  CFDW += sprintf(CanFDWrite + CFDW, "%x", CanFDFrame.data.bytes[i]);
 80020ac:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 80020b0:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 80020b4:	18d0      	adds	r0, r2, r3
 80020b6:	4a7f      	ldr	r2, [pc, #508]	; (80022b4 <main+0x7a4>)
 80020b8:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80020bc:	4413      	add	r3, r2
 80020be:	3310      	adds	r3, #16
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	497c      	ldr	r1, [pc, #496]	; (80022b8 <main+0x7a8>)
 80020c6:	f016 fb37 	bl	8018738 <siprintf>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 80020d0:	4413      	add	r3, r2
 80020d2:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
		  for(int i = 0; i < CanFDFrame.length; i++){
 80020d6:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80020da:	3301      	adds	r3, #1
 80020dc:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
 80020e0:	4b74      	ldr	r3, [pc, #464]	; (80022b4 <main+0x7a4>)
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8df      	bhi.n	80020ac <main+0x59c>
		  }
		  WriteToBuff(CanFDWrite, CFDW);
 80020ec:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80020f0:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fc5b 	bl	80019b0 <WriteToBuff>

		  FDCAN_Flag = 0;
 80020fa:	4b70      	ldr	r3, [pc, #448]	; (80022bc <main+0x7ac>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002100:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <main+0x7b0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80c6 	beq.w	8002296 <main+0x786>

		  RTC_TimeTypeDef lTime = sTime;
 800210a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800210e:	4a6d      	ldr	r2, [pc, #436]	; (80022c4 <main+0x7b4>)
 8002110:	461c      	mov	r4, r3
 8002112:	4615      	mov	r5, r2
 8002114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <main+0x7b8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
		  lTime.SubSeconds += LocalTime % 1000;
 8002124:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002128:	6859      	ldr	r1, [r3, #4]
 800212a:	f8d7 2750 	ldr.w	r2, [r7, #1872]	; 0x750
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <main+0x7bc>)
 8002130:	fba3 0302 	umull	r0, r3, r3, r2
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800213a:	fb00 f303 	mul.w	r3, r0, r3
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	18ca      	adds	r2, r1, r3
 8002142:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002146:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002148:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 800214c:	4a5f      	ldr	r2, [pc, #380]	; (80022cc <main+0x7bc>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
		  lTime.Seconds += LocalTime % 60;
 8002158:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800215c:	7898      	ldrb	r0, [r3, #2]
 800215e:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8002162:	4b5b      	ldr	r3, [pc, #364]	; (80022d0 <main+0x7c0>)
 8002164:	fba3 2301 	umull	r2, r3, r3, r1
 8002168:	095a      	lsrs	r2, r3, #5
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	1aca      	subs	r2, r1, r3
 8002174:	b2d3      	uxtb	r3, r2
 8002176:	4403      	add	r3, r0
 8002178:	b2da      	uxtb	r2, r3
 800217a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800217e:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002180:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <main+0x7c0>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
		  lTime.Minutes += LocalTime % 60;
 8002190:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002194:	7858      	ldrb	r0, [r3, #1]
 8002196:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 800219a:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <main+0x7c0>)
 800219c:	fba3 2301 	umull	r2, r3, r3, r1
 80021a0:	095a      	lsrs	r2, r3, #5
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	1aca      	subs	r2, r1, r3
 80021ac:	b2d3      	uxtb	r3, r2
 80021ae:	4403      	add	r3, r0
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021b6:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 80021b8:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 80021bc:	4a44      	ldr	r2, [pc, #272]	; (80022d0 <main+0x7c0>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
		  lTime.Hours += LocalTime % 60;
 80021c8:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021cc:	7818      	ldrb	r0, [r3, #0]
 80021ce:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 80021d2:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <main+0x7c0>)
 80021d4:	fba3 2301 	umull	r2, r3, r3, r1
 80021d8:	095a      	lsrs	r2, r3, #5
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	1aca      	subs	r2, r1, r3
 80021e4:	b2d3      	uxtb	r3, r2
 80021e6:	4403      	add	r3, r0
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 80021ee:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CFDW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021f0:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <main+0x7c4>)
 80021f2:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 80021f4:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <main+0x7c4>)
 80021f8:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 80021fa:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <main+0x7c4>)
 80021fe:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002200:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <main+0x7b4>)
 8002204:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002206:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 8002208:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <main+0x7b4>)
 800220a:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 800220c:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds,sTime.SubSeconds,
 800220e:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <main+0x7b4>)
 8002210:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,%u,",
 8002212:	461e      	mov	r6, r3
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <main+0x7b4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <main+0x7b8>)
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	f207 50bc 	addw	r0, r7, #1468	; 0x5bc
 8002220:	9205      	str	r2, [sp, #20]
 8002222:	9304      	str	r3, [sp, #16]
 8002224:	9603      	str	r6, [sp, #12]
 8002226:	9502      	str	r5, [sp, #8]
 8002228:	9401      	str	r4, [sp, #4]
 800222a:	9100      	str	r1, [sp, #0]
 800222c:	4673      	mov	r3, lr
 800222e:	4662      	mov	r2, ip
 8002230:	4929      	ldr	r1, [pc, #164]	; (80022d8 <main+0x7c8>)
 8002232:	f016 fa81 	bl	8018738 <siprintf>
 8002236:	f8c7 0764 	str.w	r0, [r7, #1892]	; 0x764
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002240:	e019      	b.n	8002276 <main+0x766>
			  CFDW += sprintf(CanWrite + CFDW, "%x", CanFrame.data.bytes[i]);
 8002242:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8002246:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 800224a:	18d0      	adds	r0, r2, r3
 800224c:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <main+0x7b8>)
 800224e:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 8002252:	4413      	add	r3, r2
 8002254:	3310      	adds	r3, #16
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4917      	ldr	r1, [pc, #92]	; (80022b8 <main+0x7a8>)
 800225c:	f016 fa6c 	bl	8018738 <siprintf>
 8002260:	4602      	mov	r2, r0
 8002262:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8002266:	4413      	add	r3, r2
 8002268:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
		  for(int i = 0; i < CanFDFrame.length; i++){
 800226c:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 8002270:	3301      	adds	r3, #1
 8002272:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <main+0x7a4>)
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 800227e:	429a      	cmp	r2, r3
 8002280:	d8df      	bhi.n	8002242 <main+0x732>
		  }
		  WriteToBuff(CanWrite, CFDW);
 8002282:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 8002286:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fb90 	bl	80019b0 <WriteToBuff>
		  CAN_Flag = 0;
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <main+0x7b0>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
  while (end_flag){
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <main+0x7cc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f47f ae3f 	bne.w	8001f1e <main+0x40e>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80022a0:	2101      	movs	r1, #1
 80022a2:	480f      	ldr	r0, [pc, #60]	; (80022e0 <main+0x7d0>)
 80022a4:	f004 feb5 	bl	8007012 <HAL_GPIO_TogglePin>
 80022a8:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	f207 776c 	addw	r7, r7, #1900	; 0x76c
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b4:	24040838 	.word	0x24040838
 80022b8:	08019d9c 	.word	0x08019d9c
 80022bc:	240001f4 	.word	0x240001f4
 80022c0:	240001f8 	.word	0x240001f8
 80022c4:	24040324 	.word	0x24040324
 80022c8:	240408b0 	.word	0x240408b0
 80022cc:	10624dd3 	.word	0x10624dd3
 80022d0:	88888889 	.word	0x88888889
 80022d4:	24040338 	.word	0x24040338
 80022d8:	08019d80 	.word	0x08019d80
 80022dc:	24000008 	.word	0x24000008
 80022e0:	58020400 	.word	0x58020400

080022e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0cc      	sub	sp, #304	; 0x130
 80022e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022ee:	224c      	movs	r2, #76	; 0x4c
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f016 f8af 	bl	8018456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022fc:	2220      	movs	r2, #32
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f016 f8a8 	bl	8018456 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	4618      	mov	r0, r3
 800230c:	23bc      	movs	r3, #188	; 0xbc
 800230e:	461a      	mov	r2, r3
 8002310:	2100      	movs	r1, #0
 8002312:	f016 f8a0 	bl	8018456 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002316:	2002      	movs	r0, #2
 8002318:	f006 f976 	bl	8008608 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	4b71      	ldr	r3, [pc, #452]	; (80024e8 <SystemClock_Config+0x204>)
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	4a70      	ldr	r2, [pc, #448]	; (80024e8 <SystemClock_Config+0x204>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800232e:	4b6e      	ldr	r3, [pc, #440]	; (80024e8 <SystemClock_Config+0x204>)
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f003 0201 	and.w	r2, r3, #1
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	4b6c      	ldr	r3, [pc, #432]	; (80024ec <SystemClock_Config+0x208>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	4a6b      	ldr	r2, [pc, #428]	; (80024ec <SystemClock_Config+0x208>)
 8002340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002344:	6193      	str	r3, [r2, #24]
 8002346:	4b69      	ldr	r3, [pc, #420]	; (80024ec <SystemClock_Config+0x208>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002356:	bf00      	nop
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <SystemClock_Config+0x208>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d1f8      	bne.n	8002358 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002366:	f006 f8b5 	bl	80084d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800236a:	f001 f941 	bl	80035f0 <HAL_GetREVID>
 800236e:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <SystemClock_Config+0x20c>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	4a5f      	ldr	r2, [pc, #380]	; (80024f0 <SystemClock_Config+0x20c>)
 8002374:	f043 0318 	orr.w	r3, r3, #24
 8002378:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800237a:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <SystemClock_Config+0x20c>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	f023 0303 	bic.w	r3, r3, #3
 8002382:	4a5b      	ldr	r2, [pc, #364]	; (80024f0 <SystemClock_Config+0x20c>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800238a:	2325      	movs	r3, #37	; 0x25
 800238c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002394:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002398:	2301      	movs	r3, #1
 800239a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800239e:	2301      	movs	r3, #1
 80023a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a4:	2302      	movs	r3, #2
 80023a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 80023b6:	2340      	movs	r3, #64	; 0x40
 80023b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80023bc:	2302      	movs	r3, #2
 80023be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80023c2:	230a      	movs	r3, #10
 80023c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80023ce:	230c      	movs	r3, #12
 80023d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023e4:	4618      	mov	r0, r3
 80023e6:	f006 f99d 	bl	8008724 <HAL_RCC_OscConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80023f0:	f000 fbe8 	bl	8002bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f4:	233f      	movs	r3, #63	; 0x3f
 80023f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fa:	2303      	movs	r3, #3
 80023fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002406:	2308      	movs	r3, #8
 8002408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002412:	2340      	movs	r3, #64	; 0x40
 8002414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800241c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002420:	2340      	movs	r3, #64	; 0x40
 8002422:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002426:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800242a:	2102      	movs	r1, #2
 800242c:	4618      	mov	r0, r3
 800242e:	f006 fd89 	bl	8008f44 <HAL_RCC_ClockConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002438:	f000 fbc4 	bl	8002bc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <SystemClock_Config+0x210>)
 8002442:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	2202      	movs	r2, #2
 800244a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	220c      	movs	r2, #12
 8002452:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	2203      	movs	r2, #3
 800245a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800245c:	f107 0308 	add.w	r3, r7, #8
 8002460:	2202      	movs	r2, #2
 8002462:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	2203      	movs	r2, #3
 800246a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	22c0      	movs	r2, #192	; 0xc0
 8002472:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	2220      	movs	r2, #32
 800247a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800248c:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002496:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002498:	f107 0308 	add.w	r3, r7, #8
 800249c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a0:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	2200      	movs	r2, #0
 80024a8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80024aa:	f107 0308 	add.w	r3, r7, #8
 80024ae:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80024b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	4618      	mov	r0, r3
 80024c8:	f007 f8ec 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 80024d2:	f000 fb77 	bl	8002bc4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80024d6:	f006 feeb 	bl	80092b0 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80024da:	f006 f8cf 	bl	800867c <HAL_PWREx_EnableUSBVoltageDetector>
}
 80024de:	bf00      	nop
 80024e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	58000400 	.word	0x58000400
 80024ec:	58024800 	.word	0x58024800
 80024f0:	58024400 	.word	0x58024400
 80024f4:	00459002 	.word	0x00459002

080024f8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 80024fe:	4a30      	ldr	r2, [pc, #192]	; (80025c0 <MX_FDCAN1_Init+0xc8>)
 8002500:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002502:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002504:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002508:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002512:	2200      	movs	r2, #0
 8002514:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002518:	2200      	movs	r2, #0
 800251a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800251e:	2200      	movs	r2, #0
 8002520:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002524:	2201      	movs	r2, #1
 8002526:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800252a:	2232      	movs	r2, #50	; 0x32
 800252c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002530:	226d      	movs	r2, #109	; 0x6d
 8002532:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002536:	2232      	movs	r2, #50	; 0x32
 8002538:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800253c:	2201      	movs	r2, #1
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002542:	2205      	movs	r2, #5
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002548:	220a      	movs	r2, #10
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800254e:	2205      	movs	r2, #5
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002554:	2200      	movs	r2, #0
 8002556:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800255a:	2202      	movs	r2, #2
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002560:	2202      	movs	r2, #2
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800256c:	2212      	movs	r2, #18
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002572:	2200      	movs	r2, #0
 8002574:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002578:	2204      	movs	r2, #4
 800257a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800257e:	2200      	movs	r2, #0
 8002580:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002584:	2204      	movs	r2, #4
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800258a:	2200      	movs	r2, #0
 800258c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002590:	2200      	movs	r2, #0
 8002592:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 8002596:	2200      	movs	r2, #0
 8002598:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 800259c:	2200      	movs	r2, #0
 800259e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 80025a2:	2204      	movs	r2, #4
 80025a4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_FDCAN1_Init+0xc4>)
 80025a8:	f003 fa16 	bl	80059d8 <HAL_FDCAN_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80025b2:	f000 fb07 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	24040cec 	.word	0x24040cec
 80025c0:	4000a000 	.word	0x4000a000

080025c4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025ca:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <MX_FDCAN2_Init+0xc4>)
 80025cc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80025fe:	4b21      	ldr	r3, [pc, #132]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002600:	2202      	movs	r2, #2
 8002602:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002606:	2201      	movs	r2, #1
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 800260c:	2201      	movs	r2, #1
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002610:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002612:	2201      	movs	r2, #1
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002618:	2201      	movs	r2, #1
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 800261e:	2200      	movs	r2, #0
 8002620:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002624:	2200      	movs	r2, #0
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 800262a:	2200      	movs	r2, #0
 800262c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002630:	2200      	movs	r2, #0
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002636:	2204      	movs	r2, #4
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 800263c:	2200      	movs	r2, #0
 800263e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002642:	2204      	movs	r2, #4
 8002644:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002648:	2200      	movs	r2, #0
 800264a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 800264e:	2204      	movs	r2, #4
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002654:	2200      	movs	r2, #0
 8002656:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 800265a:	2200      	movs	r2, #0
 800265c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002660:	2200      	movs	r2, #0
 8002662:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002666:	2200      	movs	r2, #0
 8002668:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 800266c:	2204      	movs	r2, #4
 800266e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002670:	4804      	ldr	r0, [pc, #16]	; (8002684 <MX_FDCAN2_Init+0xc0>)
 8002672:	f003 f9b1 	bl	80059d8 <HAL_FDCAN_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800267c:	f000 faa2 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	24040ea0 	.word	0x24040ea0
 8002688:	4000a400 	.word	0x4000a400

0800268c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80026a0:	2300      	movs	r3, #0
 80026a2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026a4:	4b26      	ldr	r3, [pc, #152]	; (8002740 <MX_RTC_Init+0xb4>)
 80026a6:	4a27      	ldr	r2, [pc, #156]	; (8002744 <MX_RTC_Init+0xb8>)
 80026a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <MX_RTC_Init+0xb4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80026b0:	4b23      	ldr	r3, [pc, #140]	; (8002740 <MX_RTC_Init+0xb4>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <MX_RTC_Init+0xb4>)
 80026b8:	f244 0204 	movw	r2, #16388	; 0x4004
 80026bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <MX_RTC_Init+0xb4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <MX_RTC_Init+0xb4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_RTC_Init+0xb4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <MX_RTC_Init+0xb4>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026d6:	481a      	ldr	r0, [pc, #104]	; (8002740 <MX_RTC_Init+0xb4>)
 80026d8:	f008 fea8 	bl	800b42c <HAL_RTC_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80026e2:	f000 fa6f 	bl	8002bc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2200      	movs	r2, #0
 80026fe:	4619      	mov	r1, r3
 8002700:	480f      	ldr	r0, [pc, #60]	; (8002740 <MX_RTC_Init+0xb4>)
 8002702:	f008 ff0b 	bl	800b51c <HAL_RTC_SetTime>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800270c:	f000 fa5a 	bl	8002bc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002710:	2301      	movs	r3, #1
 8002712:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002714:	2301      	movs	r3, #1
 8002716:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002718:	2301      	movs	r3, #1
 800271a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	2200      	movs	r2, #0
 8002724:	4619      	mov	r1, r3
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <MX_RTC_Init+0xb4>)
 8002728:	f008 fff2 	bl	800b710 <HAL_RTC_SetDate>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002732:	f000 fa47 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	24040cc8 	.word	0x24040cc8
 8002744:	58004000 	.word	0x58004000

08002748 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <MX_SDMMC1_SD_Init+0x3c>)
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <MX_SDMMC1_SD_Init+0x40>)
 8002750:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_SDMMC1_SD_Init+0x3c>)
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <MX_SDMMC1_SD_Init+0x3c>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_SDMMC1_SD_Init+0x3c>)
 8002760:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002764:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <MX_SDMMC1_SD_Init+0x3c>)
 8002768:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800276c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <MX_SDMMC1_SD_Init+0x3c>)
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <MX_SDMMC1_SD_Init+0x3c>)
 8002776:	2201      	movs	r2, #1
 8002778:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	24040c48 	.word	0x24040c48
 8002788:	52007000 	.word	0x52007000

0800278c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <MX_SPI1_Init+0xa4>)
 8002792:	4a28      	ldr	r2, [pc, #160]	; (8002834 <MX_SPI1_Init+0xa8>)
 8002794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <MX_SPI1_Init+0xa4>)
 8002798:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800279c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027a6:	2207      	movs	r2, #7
 80027a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027c0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80027c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027da:	2200      	movs	r2, #0
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <MX_SPI1_Init+0xa4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_SPI1_Init+0xa4>)
 8002800:	2200      	movs	r2, #0
 8002802:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <MX_SPI1_Init+0xa4>)
 8002806:	2200      	movs	r2, #0
 8002808:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_SPI1_Init+0xa4>)
 800280c:	2200      	movs	r2, #0
 800280e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <MX_SPI1_Init+0xa4>)
 8002812:	2200      	movs	r2, #0
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_SPI1_Init+0xa4>)
 8002818:	2200      	movs	r2, #0
 800281a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <MX_SPI1_Init+0xa4>)
 800281e:	f00b f89f 	bl	800d960 <HAL_SPI_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002828:	f000 f9cc 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	24040e18 	.word	0x24040e18
 8002834:	40013000 	.word	0x40013000

08002838 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <MX_UART8_Init+0x90>)
 800283e:	4a23      	ldr	r2, [pc, #140]	; (80028cc <MX_UART8_Init+0x94>)
 8002840:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002842:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <MX_UART8_Init+0x90>)
 8002844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002848:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <MX_UART8_Init+0x90>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <MX_UART8_Init+0x90>)
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002856:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <MX_UART8_Init+0x90>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <MX_UART8_Init+0x90>)
 800285e:	220c      	movs	r2, #12
 8002860:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <MX_UART8_Init+0x90>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <MX_UART8_Init+0x90>)
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <MX_UART8_Init+0x90>)
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <MX_UART8_Init+0x90>)
 8002876:	2200      	movs	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <MX_UART8_Init+0x90>)
 800287c:	2200      	movs	r2, #0
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002880:	4811      	ldr	r0, [pc, #68]	; (80028c8 <MX_UART8_Init+0x90>)
 8002882:	f00c f91e 	bl	800eac2 <HAL_UART_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800288c:	f000 f99a 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002890:	2100      	movs	r1, #0
 8002892:	480d      	ldr	r0, [pc, #52]	; (80028c8 <MX_UART8_Init+0x90>)
 8002894:	f00d faae 	bl	800fdf4 <HAL_UARTEx_SetTxFifoThreshold>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800289e:	f000 f991 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028a2:	2100      	movs	r1, #0
 80028a4:	4808      	ldr	r0, [pc, #32]	; (80028c8 <MX_UART8_Init+0x90>)
 80028a6:	f00d fae3 	bl	800fe70 <HAL_UARTEx_SetRxFifoThreshold>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80028b0:	f000 f988 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80028b4:	4804      	ldr	r0, [pc, #16]	; (80028c8 <MX_UART8_Init+0x90>)
 80028b6:	f00d fa64 	bl	800fd82 <HAL_UARTEx_DisableFifoMode>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80028c0:	f000 f980 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	24040d8c 	.word	0x24040d8c
 80028cc:	40007c00 	.word	0x40007c00

080028d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <MX_USART3_UART_Init+0x90>)
 80028d6:	4a23      	ldr	r2, [pc, #140]	; (8002964 <MX_USART3_UART_Init+0x94>)
 80028d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_USART3_UART_Init+0x90>)
 80028dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80028e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028e2:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <MX_USART3_UART_Init+0x90>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <MX_USART3_UART_Init+0x90>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <MX_USART3_UART_Init+0x90>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <MX_USART3_UART_Init+0x90>)
 80028f6:	220c      	movs	r2, #12
 80028f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <MX_USART3_UART_Init+0x90>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <MX_USART3_UART_Init+0x90>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <MX_USART3_UART_Init+0x90>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <MX_USART3_UART_Init+0x90>)
 800290e:	2200      	movs	r2, #0
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_USART3_UART_Init+0x90>)
 8002914:	2200      	movs	r2, #0
 8002916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002918:	4811      	ldr	r0, [pc, #68]	; (8002960 <MX_USART3_UART_Init+0x90>)
 800291a:	f00c f8d2 	bl	800eac2 <HAL_UART_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002924:	f000 f94e 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002928:	2100      	movs	r1, #0
 800292a:	480d      	ldr	r0, [pc, #52]	; (8002960 <MX_USART3_UART_Init+0x90>)
 800292c:	f00d fa62 	bl	800fdf4 <HAL_UARTEx_SetTxFifoThreshold>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002936:	f000 f945 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800293a:	2100      	movs	r1, #0
 800293c:	4808      	ldr	r0, [pc, #32]	; (8002960 <MX_USART3_UART_Init+0x90>)
 800293e:	f00d fa97 	bl	800fe70 <HAL_UARTEx_SetRxFifoThreshold>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002948:	f000 f93c 	bl	8002bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800294c:	4804      	ldr	r0, [pc, #16]	; (8002960 <MX_USART3_UART_Init+0x90>)
 800294e:	f00d fa18 	bl	800fd82 <HAL_UARTEx_DisableFifoMode>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002958:	f000 f934 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}
 8002960:	24040bbc 	.word	0x24040bbc
 8002964:	40004800 	.word	0x40004800

08002968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <MX_DMA_Init+0x3c>)
 8002970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002974:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <MX_DMA_Init+0x3c>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_DMA_Init+0x3c>)
 8002980:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2101      	movs	r1, #1
 8002990:	200b      	movs	r0, #11
 8002992:	f000 ff14 	bl	80037be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002996:	200b      	movs	r0, #11
 8002998:	f000 ff2b 	bl	80037f2 <HAL_NVIC_EnableIRQ>

}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	58024400 	.word	0x58024400

080029a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ae:	f107 031c 	add.w	r3, r7, #28
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029be:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 80029c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 80029c6:	f043 0310 	orr.w	r3, r3, #16
 80029ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ce:	4b69      	ldr	r3, [pc, #420]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 80029d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 80029de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e2:	4a64      	ldr	r2, [pc, #400]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 80029ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 80029fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a00:	4a5c      	ldr	r2, [pc, #368]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0a:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1e:	4a55      	ldr	r2, [pc, #340]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a28:	4b52      	ldr	r3, [pc, #328]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3c:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a54:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5a:	4a46      	ldr	r2, [pc, #280]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a64:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <MX_GPIO_Init+0x1cc>)
 8002a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8002a72:	2200      	movs	r2, #0
 8002a74:	210c      	movs	r1, #12
 8002a76:	4840      	ldr	r0, [pc, #256]	; (8002b78 <MX_GPIO_Init+0x1d0>)
 8002a78:	f004 fab2 	bl	8006fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2103      	movs	r1, #3
 8002a80:	483e      	ldr	r0, [pc, #248]	; (8002b7c <MX_GPIO_Init+0x1d4>)
 8002a82:	f004 faad 	bl	8006fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2101      	movs	r1, #1
 8002a8a:	483d      	ldr	r0, [pc, #244]	; (8002b80 <MX_GPIO_Init+0x1d8>)
 8002a8c:	f004 faa8 	bl	8006fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a96:	483b      	ldr	r0, [pc, #236]	; (8002b84 <MX_GPIO_Init+0x1dc>)
 8002a98:	f004 faa2 	bl	8006fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4831      	ldr	r0, [pc, #196]	; (8002b78 <MX_GPIO_Init+0x1d0>)
 8002ab4:	f004 f8cc 	bl	8006c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abc:	2301      	movs	r3, #1
 8002abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	482b      	ldr	r0, [pc, #172]	; (8002b7c <MX_GPIO_Init+0x1d4>)
 8002ad0:	f004 f8be 	bl	8006c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <MX_GPIO_Init+0x1e0>)
 8002ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4825      	ldr	r0, [pc, #148]	; (8002b7c <MX_GPIO_Init+0x1d4>)
 8002ae8:	f004 f8b2 	bl	8006c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	481f      	ldr	r0, [pc, #124]	; (8002b80 <MX_GPIO_Init+0x1d8>)
 8002b04:	f004 f8a4 	bl	8006c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8002b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <MX_GPIO_Init+0x1e0>)
 8002b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4816      	ldr	r0, [pc, #88]	; (8002b78 <MX_GPIO_Init+0x1d0>)
 8002b1e:	f004 f897 	bl	8006c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8002b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8002b34:	f107 031c 	add.w	r3, r7, #28
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4812      	ldr	r0, [pc, #72]	; (8002b84 <MX_GPIO_Init+0x1dc>)
 8002b3c:	f004 f888 	bl	8006c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8002b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	4809      	ldr	r0, [pc, #36]	; (8002b7c <MX_GPIO_Init+0x1d4>)
 8002b56:	f004 f87b 	bl	8006c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2017      	movs	r0, #23
 8002b60:	f000 fe2d 	bl	80037be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b64:	2017      	movs	r0, #23
 8002b66:	f000 fe44 	bl	80037f2 <HAL_NVIC_EnableIRQ>

}
 8002b6a:	bf00      	nop
 8002b6c:	3730      	adds	r7, #48	; 0x30
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	58024400 	.word	0x58024400
 8002b78:	58021000 	.word	0x58021000
 8002b7c:	58020000 	.word	0x58020000
 8002b80:	58020400 	.word	0x58020400
 8002b84:	58020c00 	.word	0x58020c00
 8002b88:	11110000 	.word	0x11110000

08002b8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	24000008 	.word	0x24000008

08002bac <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_PWR_PVDCallback+0x14>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	24000008 	.word	0x24000008

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8002bca:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <Error_Handler+0x10>)
 8002bcc:	f015 fd68 	bl	80186a0 <puts>
 8002bd0:	e7fb      	b.n	8002bca <Error_Handler+0x6>
 8002bd2:	bf00      	nop
 8002bd4:	08019db8 	.word	0x08019db8

08002bd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002be0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002be4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002bf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bf4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002bf8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00b      	beq.n	8002c18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002c00:	e000      	b.n	8002c04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002c02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f9      	beq.n	8002c02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002c0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002c18:	687b      	ldr	r3, [r7, #4]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
  int i=0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e009      	b.n	8002c50 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	60ba      	str	r2, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ffc7 	bl	8002bd8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbf1      	blt.n	8002c3c <_write+0x16>
  return len;
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_MspInit+0x60>)
 8002c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_MspInit+0x60>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_MspInit+0x60>)
 8002c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	2001      	movs	r0, #1
 8002c98:	f000 fd91 	bl	80037be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f000 fda8 	bl	80037f2 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8002ca6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002caa:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f005 fc1f 	bl	80084f4 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002cb6:	f005 fc97 	bl	80085e8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	58024400 	.word	0x58024400

08002cc8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a48      	ldr	r2, [pc, #288]	; (8002e08 <HAL_FDCAN_MspInit+0x140>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d14e      	bne.n	8002d88 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002cea:	4b48      	ldr	r3, [pc, #288]	; (8002e0c <HAL_FDCAN_MspInit+0x144>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a46      	ldr	r2, [pc, #280]	; (8002e0c <HAL_FDCAN_MspInit+0x144>)
 8002cf2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002cf4:	4b45      	ldr	r3, [pc, #276]	; (8002e0c <HAL_FDCAN_MspInit+0x144>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d10e      	bne.n	8002d1a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002cfc:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002cfe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d02:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002d0c:	4b40      	ldr	r3, [pc, #256]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002d0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d20:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d2a:	4b39      	ldr	r3, [pc, #228]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002d4a:	2309      	movs	r3, #9
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4e:	f107 031c 	add.w	r3, r7, #28
 8002d52:	4619      	mov	r1, r3
 8002d54:	482f      	ldr	r0, [pc, #188]	; (8002e14 <HAL_FDCAN_MspInit+0x14c>)
 8002d56:	f003 ff7b 	bl	8006c50 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8002d5a:	2040      	movs	r0, #64	; 0x40
 8002d5c:	f004 f98e 	bl	800707c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8002d60:	2080      	movs	r0, #128	; 0x80
 8002d62:	f004 f98b 	bl	800707c <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2013      	movs	r0, #19
 8002d6c:	f000 fd27 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002d70:	2013      	movs	r0, #19
 8002d72:	f000 fd3e 	bl	80037f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2100      	movs	r1, #0
 8002d7a:	2015      	movs	r0, #21
 8002d7c:	f000 fd1f 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002d80:	2015      	movs	r0, #21
 8002d82:	f000 fd36 	bl	80037f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002d86:	e03b      	b.n	8002e00 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_FDCAN_MspInit+0x150>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d136      	bne.n	8002e00 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <HAL_FDCAN_MspInit+0x144>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_FDCAN_MspInit+0x144>)
 8002d9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_FDCAN_MspInit+0x144>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10e      	bne.n	8002dc2 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002da6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002daa:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002db6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <HAL_FDCAN_MspInit+0x148>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002de0:	2360      	movs	r3, #96	; 0x60
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002df0:	2309      	movs	r3, #9
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4806      	ldr	r0, [pc, #24]	; (8002e14 <HAL_FDCAN_MspInit+0x14c>)
 8002dfc:	f003 ff28 	bl	8006c50 <HAL_GPIO_Init>
}
 8002e00:	bf00      	nop
 8002e02:	3730      	adds	r7, #48	; 0x30
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	4000a000 	.word	0x4000a000
 8002e0c:	2404033c 	.word	0x2404033c
 8002e10:	58024400 	.word	0x58024400
 8002e14:	58020400 	.word	0x58020400
 8002e18:	4000a400 	.word	0x4000a400

08002e1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <HAL_RTC_MspInit+0x2c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d105      	bne.n	8002e3a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_RTC_MspInit+0x30>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	4a06      	ldr	r2, [pc, #24]	; (8002e4c <HAL_RTC_MspInit+0x30>)
 8002e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	58004000 	.word	0x58004000
 8002e4c:	58024400 	.word	0x58024400

08002e50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <HAL_SD_MspInit+0xd8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d155      	bne.n	8002f1e <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002e74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e78:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002e84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e90:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e96:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002eb6:	f043 0308 	orr.w	r3, r3, #8
 8002eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_SD_MspInit+0xdc>)
 8002ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002ecc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ed0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ede:	230c      	movs	r3, #12
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4811      	ldr	r0, [pc, #68]	; (8002f30 <HAL_SD_MspInit+0xe0>)
 8002eea:	f003 feb1 	bl	8006c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eee:	2304      	movs	r3, #4
 8002ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002efe:	230c      	movs	r3, #12
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	480a      	ldr	r0, [pc, #40]	; (8002f34 <HAL_SD_MspInit+0xe4>)
 8002f0a:	f003 fea1 	bl	8006c50 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	2031      	movs	r0, #49	; 0x31
 8002f14:	f000 fc53 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002f18:	2031      	movs	r0, #49	; 0x31
 8002f1a:	f000 fc6a 	bl	80037f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	52007000 	.word	0x52007000
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58020800 	.word	0x58020800
 8002f34:	58020c00 	.word	0x58020c00

08002f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <HAL_SPI_MspInit+0x88>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d12d      	bne.n	8002fb6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_SPI_MspInit+0x8c>)
 8002f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_SPI_MspInit+0x8c>)
 8002f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_SPI_MspInit+0x8c>)
 8002f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_SPI_MspInit+0x8c>)
 8002f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7e:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <HAL_SPI_MspInit+0x8c>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_SPI_MspInit+0x8c>)
 8002f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f96:	23e0      	movs	r3, #224	; 0xe0
 8002f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <HAL_SPI_MspInit+0x90>)
 8002fb2:	f003 fe4d 	bl	8006c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fb6:	bf00      	nop
 8002fb8:	3728      	adds	r7, #40	; 0x28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40013000 	.word	0x40013000
 8002fc4:	58024400 	.word	0x58024400
 8002fc8:	58020000 	.word	0x58020000

08002fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	; 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a4b      	ldr	r2, [pc, #300]	; (8003118 <HAL_UART_MspInit+0x14c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d12e      	bne.n	800304c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002fee:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_UART_MspInit+0x150>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff4:	4a49      	ldr	r2, [pc, #292]	; (800311c <HAL_UART_MspInit+0x150>)
 8002ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ffe:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_UART_MspInit+0x150>)
 8003000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800300c:	4b43      	ldr	r3, [pc, #268]	; (800311c <HAL_UART_MspInit+0x150>)
 800300e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003012:	4a42      	ldr	r2, [pc, #264]	; (800311c <HAL_UART_MspInit+0x150>)
 8003014:	f043 0310 	orr.w	r3, r3, #16
 8003018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_UART_MspInit+0x150>)
 800301e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800302a:	2303      	movs	r3, #3
 800302c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800303a:	2308      	movs	r3, #8
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800303e:	f107 031c 	add.w	r3, r7, #28
 8003042:	4619      	mov	r1, r3
 8003044:	4836      	ldr	r0, [pc, #216]	; (8003120 <HAL_UART_MspInit+0x154>)
 8003046:	f003 fe03 	bl	8006c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800304a:	e061      	b.n	8003110 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_UART_MspInit+0x158>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d15c      	bne.n	8003110 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003056:	4b31      	ldr	r3, [pc, #196]	; (800311c <HAL_UART_MspInit+0x150>)
 8003058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800305c:	4a2f      	ldr	r2, [pc, #188]	; (800311c <HAL_UART_MspInit+0x150>)
 800305e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003062:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_UART_MspInit+0x150>)
 8003068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800306c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_UART_MspInit+0x150>)
 8003076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307a:	4a28      	ldr	r2, [pc, #160]	; (800311c <HAL_UART_MspInit+0x150>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_UART_MspInit+0x150>)
 8003086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003092:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030a4:	2307      	movs	r3, #7
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a8:	f107 031c 	add.w	r3, r7, #28
 80030ac:	4619      	mov	r1, r3
 80030ae:	481e      	ldr	r0, [pc, #120]	; (8003128 <HAL_UART_MspInit+0x15c>)
 80030b0:	f003 fdce 	bl	8006c50 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_UART_MspInit+0x160>)
 80030b6:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <HAL_UART_MspInit+0x164>)
 80030b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <HAL_UART_MspInit+0x160>)
 80030bc:	222d      	movs	r2, #45	; 0x2d
 80030be:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_UART_MspInit+0x160>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c6:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_UART_MspInit+0x160>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_UART_MspInit+0x160>)
 80030ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <HAL_UART_MspInit+0x160>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_UART_MspInit+0x160>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_UART_MspInit+0x160>)
 80030e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030e6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_UART_MspInit+0x160>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_UART_MspInit+0x160>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80030f4:	480d      	ldr	r0, [pc, #52]	; (800312c <HAL_UART_MspInit+0x160>)
 80030f6:	f000 fb97 	bl	8003828 <HAL_DMA_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8003100:	f7ff fd60 	bl	8002bc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_UART_MspInit+0x160>)
 8003108:	679a      	str	r2, [r3, #120]	; 0x78
 800310a:	4a08      	ldr	r2, [pc, #32]	; (800312c <HAL_UART_MspInit+0x160>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003110:	bf00      	nop
 8003112:	3730      	adds	r7, #48	; 0x30
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40007c00 	.word	0x40007c00
 800311c:	58024400 	.word	0x58024400
 8003120:	58021000 	.word	0x58021000
 8003124:	40004800 	.word	0x40004800
 8003128:	58020c00 	.word	0x58020c00
 800312c:	24040b44 	.word	0x24040b44
 8003130:	40020010 	.word	0x40020010

08003134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003138:	f006 fa98 	bl	800966c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800313c:	e7fe      	b.n	800313c <NMI_Handler+0x8>

0800313e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003142:	e7fe      	b.n	8003142 <HardFault_Handler+0x4>

08003144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003148:	e7fe      	b.n	8003148 <MemManage_Handler+0x4>

0800314a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800314e:	e7fe      	b.n	800314e <BusFault_Handler+0x4>

08003150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003154:	e7fe      	b.n	8003154 <UsageFault_Handler+0x4>

08003156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003184:	f000 f9f2 	bl	800356c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	bd80      	pop	{r7, pc}

0800318c <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8003190:	f005 fa84 	bl	800869c <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}

08003198 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <DMA1_Stream0_IRQHandler+0x10>)
 800319e:	f001 f909 	bl	80043b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	24040b44 	.word	0x24040b44

080031ac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <FDCAN1_IT0_IRQHandler+0x10>)
 80031b2:	f003 f8bd 	bl	8006330 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	24040cec 	.word	0x24040cec

080031c0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <FDCAN1_IT1_IRQHandler+0x10>)
 80031c6:	f003 f8b3 	bl	8006330 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	24040cec 	.word	0x24040cec

080031d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80031d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031dc:	f003 ff34 	bl	8007048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <SDMMC1_IRQHandler+0x10>)
 80031ea:	f009 f9c1 	bl	800c570 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	24040c48 	.word	0x24040c48

080031f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031fc:	4802      	ldr	r0, [pc, #8]	; (8003208 <OTG_FS_IRQHandler+0x10>)
 80031fe:	f004 f8b8 	bl	8007372 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	2404187c 	.word	0x2404187c

0800320c <_read>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e00a      	b.n	8003234 <_read+0x28>
 800321e:	f3af 8000 	nop.w
 8003222:	4601      	mov	r1, r0
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	60ba      	str	r2, [r7, #8]
 800322a:	b2ca      	uxtb	r2, r1
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	3301      	adds	r3, #1
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	dbf0      	blt.n	800321e <_read+0x12>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <_close>:
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <_fstat>:
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	2300      	movs	r3, #0
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <_isatty>:
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	2301      	movs	r3, #1
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <_lseek>:
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	2300      	movs	r3, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <_sbrk>:
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4a14      	ldr	r2, [pc, #80]	; (800330c <_sbrk+0x5c>)
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <_sbrk+0x60>)
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <_sbrk+0x22>
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <_sbrk+0x64>)
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <_sbrk+0x68>)
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <_sbrk+0x64>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d207      	bcs.n	80032f0 <_sbrk+0x40>
 80032e0:	f015 f874 	bl	80183cc <__errno>
 80032e4:	4602      	mov	r2, r0
 80032e6:	230c      	movs	r3, #12
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ee:	e009      	b.n	8003304 <_sbrk+0x54>
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <_sbrk+0x64>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <_sbrk+0x64>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <_sbrk+0x64>)
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	24080000 	.word	0x24080000
 8003310:	00000400 	.word	0x00000400
 8003314:	24040340 	.word	0x24040340
 8003318:	24041c88 	.word	0x24041c88

0800331c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <SystemInit+0xec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	4a38      	ldr	r2, [pc, #224]	; (8003408 <SystemInit+0xec>)
 8003328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800332c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003330:	4b36      	ldr	r3, [pc, #216]	; (800340c <SystemInit+0xf0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	2b06      	cmp	r3, #6
 800333a:	d807      	bhi.n	800334c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800333c:	4b33      	ldr	r3, [pc, #204]	; (800340c <SystemInit+0xf0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 030f 	bic.w	r3, r3, #15
 8003344:	4a31      	ldr	r2, [pc, #196]	; (800340c <SystemInit+0xf0>)
 8003346:	f043 0307 	orr.w	r3, r3, #7
 800334a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800334c:	4b30      	ldr	r3, [pc, #192]	; (8003410 <SystemInit+0xf4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2f      	ldr	r2, [pc, #188]	; (8003410 <SystemInit+0xf4>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <SystemInit+0xf4>)
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800335e:	4b2c      	ldr	r3, [pc, #176]	; (8003410 <SystemInit+0xf4>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	492b      	ldr	r1, [pc, #172]	; (8003410 <SystemInit+0xf4>)
 8003364:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <SystemInit+0xf8>)
 8003366:	4013      	ands	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800336a:	4b28      	ldr	r3, [pc, #160]	; (800340c <SystemInit+0xf0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	2b07      	cmp	r3, #7
 8003374:	d907      	bls.n	8003386 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003376:	4b25      	ldr	r3, [pc, #148]	; (800340c <SystemInit+0xf0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 030f 	bic.w	r3, r3, #15
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <SystemInit+0xf0>)
 8003380:	f043 0307 	orr.w	r3, r3, #7
 8003384:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003386:	4b22      	ldr	r3, [pc, #136]	; (8003410 <SystemInit+0xf4>)
 8003388:	2200      	movs	r2, #0
 800338a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <SystemInit+0xf4>)
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003392:	4b1f      	ldr	r3, [pc, #124]	; (8003410 <SystemInit+0xf4>)
 8003394:	2200      	movs	r2, #0
 8003396:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <SystemInit+0xf4>)
 800339a:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <SystemInit+0xfc>)
 800339c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <SystemInit+0xf4>)
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <SystemInit+0x100>)
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <SystemInit+0xf4>)
 80033a6:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <SystemInit+0x104>)
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <SystemInit+0xf4>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <SystemInit+0xf4>)
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <SystemInit+0x104>)
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <SystemInit+0xf4>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <SystemInit+0xf4>)
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <SystemInit+0x104>)
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <SystemInit+0xf4>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <SystemInit+0xf4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a10      	ldr	r2, [pc, #64]	; (8003410 <SystemInit+0xf4>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <SystemInit+0xf4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <SystemInit+0x108>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <SystemInit+0x10c>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e6:	d202      	bcs.n	80033ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <SystemInit+0x110>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <SystemInit+0x114>)
 80033f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80033f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <SystemInit+0xec>)
 80033f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00
 800340c:	52002000 	.word	0x52002000
 8003410:	58024400 	.word	0x58024400
 8003414:	eaf6ed7f 	.word	0xeaf6ed7f
 8003418:	02020200 	.word	0x02020200
 800341c:	01ff0000 	.word	0x01ff0000
 8003420:	01010280 	.word	0x01010280
 8003424:	5c001000 	.word	0x5c001000
 8003428:	ffff0000 	.word	0xffff0000
 800342c:	51008108 	.word	0x51008108
 8003430:	52004000 	.word	0x52004000

08003434 <Reset_Handler>:
 8003434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800346c <LoopFillZerobss+0x10>
 8003438:	f7ff ff70 	bl	800331c <SystemInit>
 800343c:	2100      	movs	r1, #0
 800343e:	e003      	b.n	8003448 <LoopCopyDataInit>

08003440 <CopyDataInit>:
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <LoopFillZerobss+0x14>)
 8003442:	585b      	ldr	r3, [r3, r1]
 8003444:	5043      	str	r3, [r0, r1]
 8003446:	3104      	adds	r1, #4

08003448 <LoopCopyDataInit>:
 8003448:	480a      	ldr	r0, [pc, #40]	; (8003474 <LoopFillZerobss+0x18>)
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <LoopFillZerobss+0x1c>)
 800344c:	1842      	adds	r2, r0, r1
 800344e:	429a      	cmp	r2, r3
 8003450:	d3f6      	bcc.n	8003440 <CopyDataInit>
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <LoopFillZerobss+0x20>)
 8003454:	e002      	b.n	800345c <LoopFillZerobss>

08003456 <FillZerobss>:
 8003456:	2300      	movs	r3, #0
 8003458:	f842 3b04 	str.w	r3, [r2], #4

0800345c <LoopFillZerobss>:
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <LoopFillZerobss+0x24>)
 800345e:	429a      	cmp	r2, r3
 8003460:	d3f9      	bcc.n	8003456 <FillZerobss>
 8003462:	f014 ffb9 	bl	80183d8 <__libc_init_array>
 8003466:	f7fe fb53 	bl	8001b10 <main>
 800346a:	4770      	bx	lr
 800346c:	24080000 	.word	0x24080000
 8003470:	0801a04c 	.word	0x0801a04c
 8003474:	24000000 	.word	0x24000000
 8003478:	240001d8 	.word	0x240001d8
 800347c:	240001d8 	.word	0x240001d8
 8003480:	24041c88 	.word	0x24041c88

08003484 <ADC3_IRQHandler>:
 8003484:	e7fe      	b.n	8003484 <ADC3_IRQHandler>
	...

08003488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800348e:	2003      	movs	r0, #3
 8003490:	f000 f98a 	bl	80037a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003494:	f005 ff1c 	bl	80092d0 <HAL_RCC_GetSysClockFreq>
 8003498:	4601      	mov	r1, r0
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_Init+0x68>)
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <HAL_Init+0x6c>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	fa21 f303 	lsr.w	r3, r1, r3
 80034b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <HAL_Init+0x68>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_Init+0x6c>)
 80034bc:	5cd3      	ldrb	r3, [r2, r3]
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
 80034c8:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <HAL_Init+0x70>)
 80034ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <HAL_Init+0x74>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034d2:	2000      	movs	r0, #0
 80034d4:	f000 f814 	bl	8003500 <HAL_InitTick>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e002      	b.n	80034e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034e2:	f7ff fbbf 	bl	8002c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	58024400 	.word	0x58024400
 80034f4:	08019eac 	.word	0x08019eac
 80034f8:	24000010 	.word	0x24000010
 80034fc:	2400000c 	.word	0x2400000c

08003500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_InitTick+0x60>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e021      	b.n	8003558 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_InitTick+0x64>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_InitTick+0x60>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4619      	mov	r1, r3
 800351e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003522:	fbb3 f3f1 	udiv	r3, r3, r1
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f96f 	bl	800380e <HAL_SYSTICK_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e00e      	b.n	8003558 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b0f      	cmp	r3, #15
 800353e:	d80a      	bhi.n	8003556 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003540:	2200      	movs	r2, #0
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003548:	f000 f939 	bl	80037be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800354c:	4a06      	ldr	r2, [pc, #24]	; (8003568 <HAL_InitTick+0x68>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	24000018 	.word	0x24000018
 8003564:	2400000c 	.word	0x2400000c
 8003568:	24000014 	.word	0x24000014

0800356c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_IncTick+0x20>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_IncTick+0x24>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4413      	add	r3, r2
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <HAL_IncTick+0x24>)
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	24000018 	.word	0x24000018
 8003590:	24040f40 	.word	0x24040f40

08003594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return uwTick;
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_GetTick+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	24040f40 	.word	0x24040f40

080035ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff ffee 	bl	8003594 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c4:	d005      	beq.n	80035d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_Delay+0x40>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035d2:	bf00      	nop
 80035d4:	f7ff ffde 	bl	8003594 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d8f7      	bhi.n	80035d4 <HAL_Delay+0x28>
  {
  }
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	24000018 	.word	0x24000018

080035f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <HAL_GetREVID+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0c1b      	lsrs	r3, r3, #16
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	5c001000 	.word	0x5c001000

08003608 <__NVIC_SetPriorityGrouping>:
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00
 800364c:	05fa0000 	.word	0x05fa0000

08003650 <__NVIC_GetPriorityGrouping>:
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <__NVIC_GetPriorityGrouping+0x18>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_EnableIRQ>:
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db0b      	blt.n	8003696 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <__NVIC_EnableIRQ+0x38>)
 8003686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f202 	lsl.w	r2, r0, r2
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_SetPriority>:
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	6039      	str	r1, [r7, #0]
 80036b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db0a      	blt.n	80036d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	490c      	ldr	r1, [pc, #48]	; (80036f4 <__NVIC_SetPriority+0x4c>)
 80036c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	440b      	add	r3, r1
 80036cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036d0:	e00a      	b.n	80036e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4908      	ldr	r1, [pc, #32]	; (80036f8 <__NVIC_SetPriority+0x50>)
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	3b04      	subs	r3, #4
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	440b      	add	r3, r1
 80036e6:	761a      	strb	r2, [r3, #24]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000e100 	.word	0xe000e100
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <NVIC_EncodePriority>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b089      	sub	sp, #36	; 0x24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f1c3 0307 	rsb	r3, r3, #7
 8003716:	2b04      	cmp	r3, #4
 8003718:	bf28      	it	cs
 800371a:	2304      	movcs	r3, #4
 800371c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3304      	adds	r3, #4
 8003722:	2b06      	cmp	r3, #6
 8003724:	d902      	bls.n	800372c <NVIC_EncodePriority+0x30>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3b03      	subs	r3, #3
 800372a:	e000      	b.n	800372e <NVIC_EncodePriority+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	401a      	ands	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43d9      	mvns	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	4313      	orrs	r3, r2
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	; 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <SysTick_Config>:
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003774:	d301      	bcc.n	800377a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003776:	2301      	movs	r3, #1
 8003778:	e00f      	b.n	800379a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377a:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <SysTick_Config+0x40>)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003782:	210f      	movs	r1, #15
 8003784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003788:	f7ff ff8e 	bl	80036a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <SysTick_Config+0x40>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <SysTick_Config+0x40>)
 8003794:	2207      	movs	r2, #7
 8003796:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	e000e010 	.word	0xe000e010

080037a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff29 	bl	8003608 <__NVIC_SetPriorityGrouping>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037cc:	f7ff ff40 	bl	8003650 <__NVIC_GetPriorityGrouping>
 80037d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f7ff ff90 	bl	80036fc <NVIC_EncodePriority>
 80037dc:	4602      	mov	r2, r0
 80037de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff5f 	bl	80036a8 <__NVIC_SetPriority>
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff33 	bl	800366c <__NVIC_EnableIRQ>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ffa4 	bl	8003764 <SysTick_Config>
 800381c:	4603      	mov	r3, r0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003830:	f7ff feb0 	bl	8003594 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e316      	b.n	8003e6e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a66      	ldr	r2, [pc, #408]	; (80039e0 <HAL_DMA_Init+0x1b8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d04a      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a65      	ldr	r2, [pc, #404]	; (80039e4 <HAL_DMA_Init+0x1bc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d045      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <HAL_DMA_Init+0x1c0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d040      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a62      	ldr	r2, [pc, #392]	; (80039ec <HAL_DMA_Init+0x1c4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d03b      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a60      	ldr	r2, [pc, #384]	; (80039f0 <HAL_DMA_Init+0x1c8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d036      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a5f      	ldr	r2, [pc, #380]	; (80039f4 <HAL_DMA_Init+0x1cc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d031      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_DMA_Init+0x1d0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02c      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5c      	ldr	r2, [pc, #368]	; (80039fc <HAL_DMA_Init+0x1d4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d027      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5a      	ldr	r2, [pc, #360]	; (8003a00 <HAL_DMA_Init+0x1d8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d022      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a59      	ldr	r2, [pc, #356]	; (8003a04 <HAL_DMA_Init+0x1dc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d01d      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a57      	ldr	r2, [pc, #348]	; (8003a08 <HAL_DMA_Init+0x1e0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d018      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a56      	ldr	r2, [pc, #344]	; (8003a0c <HAL_DMA_Init+0x1e4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a54      	ldr	r2, [pc, #336]	; (8003a10 <HAL_DMA_Init+0x1e8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a53      	ldr	r2, [pc, #332]	; (8003a14 <HAL_DMA_Init+0x1ec>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a51      	ldr	r2, [pc, #324]	; (8003a18 <HAL_DMA_Init+0x1f0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a50      	ldr	r2, [pc, #320]	; (8003a1c <HAL_DMA_Init+0x1f4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_DMA_Init+0xbc>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_DMA_Init+0xbe>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 813b 	beq.w	8003b62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a37      	ldr	r2, [pc, #220]	; (80039e0 <HAL_DMA_Init+0x1b8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d04a      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a36      	ldr	r2, [pc, #216]	; (80039e4 <HAL_DMA_Init+0x1bc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d045      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <HAL_DMA_Init+0x1c0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d040      	beq.n	800399c <HAL_DMA_Init+0x174>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a33      	ldr	r2, [pc, #204]	; (80039ec <HAL_DMA_Init+0x1c4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d03b      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a31      	ldr	r2, [pc, #196]	; (80039f0 <HAL_DMA_Init+0x1c8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d036      	beq.n	800399c <HAL_DMA_Init+0x174>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a30      	ldr	r2, [pc, #192]	; (80039f4 <HAL_DMA_Init+0x1cc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d031      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2e      	ldr	r2, [pc, #184]	; (80039f8 <HAL_DMA_Init+0x1d0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02c      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2d      	ldr	r2, [pc, #180]	; (80039fc <HAL_DMA_Init+0x1d4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d027      	beq.n	800399c <HAL_DMA_Init+0x174>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <HAL_DMA_Init+0x1d8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d022      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_DMA_Init+0x1dc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01d      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <HAL_DMA_Init+0x1e0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d018      	beq.n	800399c <HAL_DMA_Init+0x174>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <HAL_DMA_Init+0x1e4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <HAL_DMA_Init+0x1e8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00e      	beq.n	800399c <HAL_DMA_Init+0x174>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <HAL_DMA_Init+0x1ec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d009      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <HAL_DMA_Init+0x1f0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a21      	ldr	r2, [pc, #132]	; (8003a1c <HAL_DMA_Init+0x1f4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d108      	bne.n	80039ae <HAL_DMA_Init+0x186>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e007      	b.n	80039be <HAL_DMA_Init+0x196>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039be:	e02f      	b.n	8003a20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039c0:	f7ff fde8 	bl	8003594 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d928      	bls.n	8003a20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2203      	movs	r2, #3
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e246      	b.n	8003e6e <HAL_DMA_Init+0x646>
 80039e0:	40020010 	.word	0x40020010
 80039e4:	40020028 	.word	0x40020028
 80039e8:	40020040 	.word	0x40020040
 80039ec:	40020058 	.word	0x40020058
 80039f0:	40020070 	.word	0x40020070
 80039f4:	40020088 	.word	0x40020088
 80039f8:	400200a0 	.word	0x400200a0
 80039fc:	400200b8 	.word	0x400200b8
 8003a00:	40020410 	.word	0x40020410
 8003a04:	40020428 	.word	0x40020428
 8003a08:	40020440 	.word	0x40020440
 8003a0c:	40020458 	.word	0x40020458
 8003a10:	40020470 	.word	0x40020470
 8003a14:	40020488 	.word	0x40020488
 8003a18:	400204a0 	.word	0x400204a0
 8003a1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1c8      	bne.n	80039c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4b83      	ldr	r3, [pc, #524]	; (8003c48 <HAL_DMA_Init+0x420>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d107      	bne.n	8003a84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a84:	4b71      	ldr	r3, [pc, #452]	; (8003c4c <HAL_DMA_Init+0x424>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b71      	ldr	r3, [pc, #452]	; (8003c50 <HAL_DMA_Init+0x428>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a90:	d328      	bcc.n	8003ae4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b28      	cmp	r3, #40	; 0x28
 8003a98:	d903      	bls.n	8003aa2 <HAL_DMA_Init+0x27a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa0:	d917      	bls.n	8003ad2 <HAL_DMA_Init+0x2aa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8003aa8:	d903      	bls.n	8003ab2 <HAL_DMA_Init+0x28a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b42      	cmp	r3, #66	; 0x42
 8003ab0:	d90f      	bls.n	8003ad2 <HAL_DMA_Init+0x2aa>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b46      	cmp	r3, #70	; 0x46
 8003ab8:	d903      	bls.n	8003ac2 <HAL_DMA_Init+0x29a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b48      	cmp	r3, #72	; 0x48
 8003ac0:	d907      	bls.n	8003ad2 <HAL_DMA_Init+0x2aa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b4e      	cmp	r3, #78	; 0x4e
 8003ac8:	d905      	bls.n	8003ad6 <HAL_DMA_Init+0x2ae>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b52      	cmp	r3, #82	; 0x52
 8003ad0:	d801      	bhi.n	8003ad6 <HAL_DMA_Init+0x2ae>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_DMA_Init+0x2b0>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0307 	bic.w	r3, r3, #7
 8003afa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d117      	bne.n	8003b3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f001 fdcf 	bl	80056c4 <DMA_CheckFifoParam>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e197      	b.n	8003e6e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f001 fd0a 	bl	8005560 <DMA_CalcBaseAndBitshift>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	223f      	movs	r2, #63	; 0x3f
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	e0cd      	b.n	8003cfe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3b      	ldr	r2, [pc, #236]	; (8003c54 <HAL_DMA_Init+0x42c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d022      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a39      	ldr	r2, [pc, #228]	; (8003c58 <HAL_DMA_Init+0x430>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01d      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a38      	ldr	r2, [pc, #224]	; (8003c5c <HAL_DMA_Init+0x434>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d018      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a36      	ldr	r2, [pc, #216]	; (8003c60 <HAL_DMA_Init+0x438>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a35      	ldr	r2, [pc, #212]	; (8003c64 <HAL_DMA_Init+0x43c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a33      	ldr	r2, [pc, #204]	; (8003c68 <HAL_DMA_Init+0x440>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <HAL_DMA_Init+0x444>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_DMA_Init+0x448>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_DMA_Init+0x38e>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_DMA_Init+0x390>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8097 	beq.w	8003cec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <HAL_DMA_Init+0x42c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d021      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_DMA_Init+0x430>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01c      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <HAL_DMA_Init+0x434>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d017      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_DMA_Init+0x438>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d012      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_DMA_Init+0x43c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00d      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_DMA_Init+0x440>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d008      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <HAL_DMA_Init+0x444>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_DMA_Init+0x448>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_DMA_Init+0x44c>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d020      	beq.n	8003c78 <HAL_DMA_Init+0x450>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d102      	bne.n	8003c44 <HAL_DMA_Init+0x41c>
 8003c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c42:	e01a      	b.n	8003c7a <HAL_DMA_Init+0x452>
 8003c44:	2300      	movs	r3, #0
 8003c46:	e018      	b.n	8003c7a <HAL_DMA_Init+0x452>
 8003c48:	fe10803f 	.word	0xfe10803f
 8003c4c:	5c001000 	.word	0x5c001000
 8003c50:	ffff0000 	.word	0xffff0000
 8003c54:	58025408 	.word	0x58025408
 8003c58:	5802541c 	.word	0x5802541c
 8003c5c:	58025430 	.word	0x58025430
 8003c60:	58025444 	.word	0x58025444
 8003c64:	58025458 	.word	0x58025458
 8003c68:	5802546c 	.word	0x5802546c
 8003c6c:	58025480 	.word	0x58025480
 8003c70:	58025494 	.word	0x58025494
 8003c74:	fffe000f 	.word	0xfffe000f
 8003c78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68d2      	ldr	r2, [r2, #12]
 8003c7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ca8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <HAL_DMA_Init+0x650>)
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_DMA_Init+0x654>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	009a      	lsls	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f001 fc45 	bl	8005560 <DMA_CalcBaseAndBitshift>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e008      	b.n	8003cfe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0b7      	b.n	8003e6e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5f      	ldr	r2, [pc, #380]	; (8003e80 <HAL_DMA_Init+0x658>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d072      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5d      	ldr	r2, [pc, #372]	; (8003e84 <HAL_DMA_Init+0x65c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d06d      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5c      	ldr	r2, [pc, #368]	; (8003e88 <HAL_DMA_Init+0x660>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d068      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a5a      	ldr	r2, [pc, #360]	; (8003e8c <HAL_DMA_Init+0x664>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d063      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a59      	ldr	r2, [pc, #356]	; (8003e90 <HAL_DMA_Init+0x668>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d05e      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a57      	ldr	r2, [pc, #348]	; (8003e94 <HAL_DMA_Init+0x66c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d059      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a56      	ldr	r2, [pc, #344]	; (8003e98 <HAL_DMA_Init+0x670>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d054      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_DMA_Init+0x674>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d04f      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a53      	ldr	r2, [pc, #332]	; (8003ea0 <HAL_DMA_Init+0x678>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d04a      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a51      	ldr	r2, [pc, #324]	; (8003ea4 <HAL_DMA_Init+0x67c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d045      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a50      	ldr	r2, [pc, #320]	; (8003ea8 <HAL_DMA_Init+0x680>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d040      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4e      	ldr	r2, [pc, #312]	; (8003eac <HAL_DMA_Init+0x684>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d03b      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4d      	ldr	r2, [pc, #308]	; (8003eb0 <HAL_DMA_Init+0x688>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d036      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a4b      	ldr	r2, [pc, #300]	; (8003eb4 <HAL_DMA_Init+0x68c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d031      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a4a      	ldr	r2, [pc, #296]	; (8003eb8 <HAL_DMA_Init+0x690>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02c      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a48      	ldr	r2, [pc, #288]	; (8003ebc <HAL_DMA_Init+0x694>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d027      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a47      	ldr	r2, [pc, #284]	; (8003ec0 <HAL_DMA_Init+0x698>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a45      	ldr	r2, [pc, #276]	; (8003ec4 <HAL_DMA_Init+0x69c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a44      	ldr	r2, [pc, #272]	; (8003ec8 <HAL_DMA_Init+0x6a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a42      	ldr	r2, [pc, #264]	; (8003ecc <HAL_DMA_Init+0x6a4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a41      	ldr	r2, [pc, #260]	; (8003ed0 <HAL_DMA_Init+0x6a8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <HAL_DMA_Init+0x6ac>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3e      	ldr	r2, [pc, #248]	; (8003ed8 <HAL_DMA_Init+0x6b0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3c      	ldr	r2, [pc, #240]	; (8003edc <HAL_DMA_Init+0x6b4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_DMA_Init+0x5ca>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_DMA_Init+0x5cc>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d032      	beq.n	8003e5e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f001 fcdf 	bl	80057bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d102      	bne.n	8003e0c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d010      	beq.n	8003e4c <HAL_DMA_Init+0x624>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d80c      	bhi.n	8003e4c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f001 fd5c 	bl	80058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	e008      	b.n	8003e5e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	a7fdabf8 	.word	0xa7fdabf8
 8003e7c:	cccccccd 	.word	0xcccccccd
 8003e80:	40020010 	.word	0x40020010
 8003e84:	40020028 	.word	0x40020028
 8003e88:	40020040 	.word	0x40020040
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	40020070 	.word	0x40020070
 8003e94:	40020088 	.word	0x40020088
 8003e98:	400200a0 	.word	0x400200a0
 8003e9c:	400200b8 	.word	0x400200b8
 8003ea0:	40020410 	.word	0x40020410
 8003ea4:	40020428 	.word	0x40020428
 8003ea8:	40020440 	.word	0x40020440
 8003eac:	40020458 	.word	0x40020458
 8003eb0:	40020470 	.word	0x40020470
 8003eb4:	40020488 	.word	0x40020488
 8003eb8:	400204a0 	.word	0x400204a0
 8003ebc:	400204b8 	.word	0x400204b8
 8003ec0:	58025408 	.word	0x58025408
 8003ec4:	5802541c 	.word	0x5802541c
 8003ec8:	58025430 	.word	0x58025430
 8003ecc:	58025444 	.word	0x58025444
 8003ed0:	58025458 	.word	0x58025458
 8003ed4:	5802546c 	.word	0x5802546c
 8003ed8:	58025480 	.word	0x58025480
 8003edc:	58025494 	.word	0x58025494

08003ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e226      	b.n	800434a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_DMA_Start_IT+0x2a>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e21f      	b.n	800434a <HAL_DMA_Start_IT+0x46a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	f040 820a 	bne.w	8004334 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_DMA_Start_IT+0x1f4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d04a      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a66      	ldr	r2, [pc, #408]	; (80040d8 <HAL_DMA_Start_IT+0x1f8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d045      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a65      	ldr	r2, [pc, #404]	; (80040dc <HAL_DMA_Start_IT+0x1fc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d040      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a63      	ldr	r2, [pc, #396]	; (80040e0 <HAL_DMA_Start_IT+0x200>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d03b      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a62      	ldr	r2, [pc, #392]	; (80040e4 <HAL_DMA_Start_IT+0x204>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d036      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a60      	ldr	r2, [pc, #384]	; (80040e8 <HAL_DMA_Start_IT+0x208>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d031      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <HAL_DMA_Start_IT+0x20c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d02c      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5d      	ldr	r2, [pc, #372]	; (80040f0 <HAL_DMA_Start_IT+0x210>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d027      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5c      	ldr	r2, [pc, #368]	; (80040f4 <HAL_DMA_Start_IT+0x214>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d022      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a5a      	ldr	r2, [pc, #360]	; (80040f8 <HAL_DMA_Start_IT+0x218>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01d      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a59      	ldr	r2, [pc, #356]	; (80040fc <HAL_DMA_Start_IT+0x21c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d018      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a57      	ldr	r2, [pc, #348]	; (8004100 <HAL_DMA_Start_IT+0x220>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a56      	ldr	r2, [pc, #344]	; (8004104 <HAL_DMA_Start_IT+0x224>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00e      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a54      	ldr	r2, [pc, #336]	; (8004108 <HAL_DMA_Start_IT+0x228>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d009      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a53      	ldr	r2, [pc, #332]	; (800410c <HAL_DMA_Start_IT+0x22c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a51      	ldr	r2, [pc, #324]	; (8004110 <HAL_DMA_Start_IT+0x230>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d108      	bne.n	8003fe0 <HAL_DMA_Start_IT+0x100>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e007      	b.n	8003ff0 <HAL_DMA_Start_IT+0x110>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f001 f906 	bl	8005208 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_DMA_Start_IT+0x1f4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d04a      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a33      	ldr	r2, [pc, #204]	; (80040d8 <HAL_DMA_Start_IT+0x1f8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d045      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a31      	ldr	r2, [pc, #196]	; (80040dc <HAL_DMA_Start_IT+0x1fc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d040      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <HAL_DMA_Start_IT+0x200>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d03b      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2e      	ldr	r2, [pc, #184]	; (80040e4 <HAL_DMA_Start_IT+0x204>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d036      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <HAL_DMA_Start_IT+0x208>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d031      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <HAL_DMA_Start_IT+0x20c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02c      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <HAL_DMA_Start_IT+0x210>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d027      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <HAL_DMA_Start_IT+0x214>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d022      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <HAL_DMA_Start_IT+0x218>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d01d      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <HAL_DMA_Start_IT+0x21c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a24      	ldr	r2, [pc, #144]	; (8004100 <HAL_DMA_Start_IT+0x220>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a22      	ldr	r2, [pc, #136]	; (8004104 <HAL_DMA_Start_IT+0x224>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a21      	ldr	r2, [pc, #132]	; (8004108 <HAL_DMA_Start_IT+0x228>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1f      	ldr	r2, [pc, #124]	; (800410c <HAL_DMA_Start_IT+0x22c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_DMA_Start_IT+0x230>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Start_IT+0x1c0>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_DMA_Start_IT+0x1c2>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d036      	beq.n	8004114 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 021e 	bic.w	r2, r3, #30
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0216 	orr.w	r2, r2, #22
 80040b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03e      	beq.n	8004140 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0208 	orr.w	r2, r2, #8
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e035      	b.n	8004140 <HAL_DMA_Start_IT+0x260>
 80040d4:	40020010 	.word	0x40020010
 80040d8:	40020028 	.word	0x40020028
 80040dc:	40020040 	.word	0x40020040
 80040e0:	40020058 	.word	0x40020058
 80040e4:	40020070 	.word	0x40020070
 80040e8:	40020088 	.word	0x40020088
 80040ec:	400200a0 	.word	0x400200a0
 80040f0:	400200b8 	.word	0x400200b8
 80040f4:	40020410 	.word	0x40020410
 80040f8:	40020428 	.word	0x40020428
 80040fc:	40020440 	.word	0x40020440
 8004100:	40020458 	.word	0x40020458
 8004104:	40020470 	.word	0x40020470
 8004108:	40020488 	.word	0x40020488
 800410c:	400204a0 	.word	0x400204a0
 8004110:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 020e 	bic.w	r2, r3, #14
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 020a 	orr.w	r2, r2, #10
 8004126:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0204 	orr.w	r2, r2, #4
 800413e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a83      	ldr	r2, [pc, #524]	; (8004354 <HAL_DMA_Start_IT+0x474>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d072      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a82      	ldr	r2, [pc, #520]	; (8004358 <HAL_DMA_Start_IT+0x478>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d06d      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a80      	ldr	r2, [pc, #512]	; (800435c <HAL_DMA_Start_IT+0x47c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d068      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7f      	ldr	r2, [pc, #508]	; (8004360 <HAL_DMA_Start_IT+0x480>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d063      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a7d      	ldr	r2, [pc, #500]	; (8004364 <HAL_DMA_Start_IT+0x484>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d05e      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a7c      	ldr	r2, [pc, #496]	; (8004368 <HAL_DMA_Start_IT+0x488>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d059      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a7a      	ldr	r2, [pc, #488]	; (800436c <HAL_DMA_Start_IT+0x48c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d054      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a79      	ldr	r2, [pc, #484]	; (8004370 <HAL_DMA_Start_IT+0x490>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04f      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a77      	ldr	r2, [pc, #476]	; (8004374 <HAL_DMA_Start_IT+0x494>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d04a      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a76      	ldr	r2, [pc, #472]	; (8004378 <HAL_DMA_Start_IT+0x498>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d045      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a74      	ldr	r2, [pc, #464]	; (800437c <HAL_DMA_Start_IT+0x49c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d040      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a73      	ldr	r2, [pc, #460]	; (8004380 <HAL_DMA_Start_IT+0x4a0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d03b      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a71      	ldr	r2, [pc, #452]	; (8004384 <HAL_DMA_Start_IT+0x4a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d036      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a70      	ldr	r2, [pc, #448]	; (8004388 <HAL_DMA_Start_IT+0x4a8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d031      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a6e      	ldr	r2, [pc, #440]	; (800438c <HAL_DMA_Start_IT+0x4ac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02c      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6d      	ldr	r2, [pc, #436]	; (8004390 <HAL_DMA_Start_IT+0x4b0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d027      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6b      	ldr	r2, [pc, #428]	; (8004394 <HAL_DMA_Start_IT+0x4b4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d022      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <HAL_DMA_Start_IT+0x4b8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d01d      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a68      	ldr	r2, [pc, #416]	; (800439c <HAL_DMA_Start_IT+0x4bc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a67      	ldr	r2, [pc, #412]	; (80043a0 <HAL_DMA_Start_IT+0x4c0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a65      	ldr	r2, [pc, #404]	; (80043a4 <HAL_DMA_Start_IT+0x4c4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a64      	ldr	r2, [pc, #400]	; (80043a8 <HAL_DMA_Start_IT+0x4c8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a62      	ldr	r2, [pc, #392]	; (80043ac <HAL_DMA_Start_IT+0x4cc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a61      	ldr	r2, [pc, #388]	; (80043b0 <HAL_DMA_Start_IT+0x4d0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_DMA_Start_IT+0x354>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_DMA_Start_IT+0x356>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01a      	beq.n	8004270 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004256:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a37      	ldr	r2, [pc, #220]	; (8004354 <HAL_DMA_Start_IT+0x474>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d04a      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a36      	ldr	r2, [pc, #216]	; (8004358 <HAL_DMA_Start_IT+0x478>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d045      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a34      	ldr	r2, [pc, #208]	; (800435c <HAL_DMA_Start_IT+0x47c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d040      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_DMA_Start_IT+0x480>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d03b      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a31      	ldr	r2, [pc, #196]	; (8004364 <HAL_DMA_Start_IT+0x484>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a30      	ldr	r2, [pc, #192]	; (8004368 <HAL_DMA_Start_IT+0x488>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d031      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a2e      	ldr	r2, [pc, #184]	; (800436c <HAL_DMA_Start_IT+0x48c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02c      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2d      	ldr	r2, [pc, #180]	; (8004370 <HAL_DMA_Start_IT+0x490>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d027      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2b      	ldr	r2, [pc, #172]	; (8004374 <HAL_DMA_Start_IT+0x494>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <HAL_DMA_Start_IT+0x498>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a28      	ldr	r2, [pc, #160]	; (800437c <HAL_DMA_Start_IT+0x49c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a27      	ldr	r2, [pc, #156]	; (8004380 <HAL_DMA_Start_IT+0x4a0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a25      	ldr	r2, [pc, #148]	; (8004384 <HAL_DMA_Start_IT+0x4a4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a24      	ldr	r2, [pc, #144]	; (8004388 <HAL_DMA_Start_IT+0x4a8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <HAL_DMA_Start_IT+0x4ac>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a21      	ldr	r2, [pc, #132]	; (8004390 <HAL_DMA_Start_IT+0x4b0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <HAL_DMA_Start_IT+0x442>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e012      	b.n	8004348 <HAL_DMA_Start_IT+0x468>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e009      	b.n	8004348 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40020010 	.word	0x40020010
 8004358:	40020028 	.word	0x40020028
 800435c:	40020040 	.word	0x40020040
 8004360:	40020058 	.word	0x40020058
 8004364:	40020070 	.word	0x40020070
 8004368:	40020088 	.word	0x40020088
 800436c:	400200a0 	.word	0x400200a0
 8004370:	400200b8 	.word	0x400200b8
 8004374:	40020410 	.word	0x40020410
 8004378:	40020428 	.word	0x40020428
 800437c:	40020440 	.word	0x40020440
 8004380:	40020458 	.word	0x40020458
 8004384:	40020470 	.word	0x40020470
 8004388:	40020488 	.word	0x40020488
 800438c:	400204a0 	.word	0x400204a0
 8004390:	400204b8 	.word	0x400204b8
 8004394:	58025408 	.word	0x58025408
 8004398:	5802541c 	.word	0x5802541c
 800439c:	58025430 	.word	0x58025430
 80043a0:	58025444 	.word	0x58025444
 80043a4:	58025458 	.word	0x58025458
 80043a8:	5802546c 	.word	0x5802546c
 80043ac:	58025480 	.word	0x58025480
 80043b0:	58025494 	.word	0x58025494

080043b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08a      	sub	sp, #40	; 0x28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043c0:	4b67      	ldr	r3, [pc, #412]	; (8004560 <HAL_DMA_IRQHandler+0x1ac>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a67      	ldr	r2, [pc, #412]	; (8004564 <HAL_DMA_IRQHandler+0x1b0>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0a9b      	lsrs	r3, r3, #10
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a5f      	ldr	r2, [pc, #380]	; (8004568 <HAL_DMA_IRQHandler+0x1b4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d04a      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5d      	ldr	r2, [pc, #372]	; (800456c <HAL_DMA_IRQHandler+0x1b8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d045      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a5c      	ldr	r2, [pc, #368]	; (8004570 <HAL_DMA_IRQHandler+0x1bc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d040      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a5a      	ldr	r2, [pc, #360]	; (8004574 <HAL_DMA_IRQHandler+0x1c0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d03b      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a59      	ldr	r2, [pc, #356]	; (8004578 <HAL_DMA_IRQHandler+0x1c4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d036      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a57      	ldr	r2, [pc, #348]	; (800457c <HAL_DMA_IRQHandler+0x1c8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d031      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a56      	ldr	r2, [pc, #344]	; (8004580 <HAL_DMA_IRQHandler+0x1cc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d02c      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a54      	ldr	r2, [pc, #336]	; (8004584 <HAL_DMA_IRQHandler+0x1d0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d027      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a53      	ldr	r2, [pc, #332]	; (8004588 <HAL_DMA_IRQHandler+0x1d4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a51      	ldr	r2, [pc, #324]	; (800458c <HAL_DMA_IRQHandler+0x1d8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01d      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a50      	ldr	r2, [pc, #320]	; (8004590 <HAL_DMA_IRQHandler+0x1dc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a4e      	ldr	r2, [pc, #312]	; (8004594 <HAL_DMA_IRQHandler+0x1e0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4d      	ldr	r2, [pc, #308]	; (8004598 <HAL_DMA_IRQHandler+0x1e4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a4b      	ldr	r2, [pc, #300]	; (800459c <HAL_DMA_IRQHandler+0x1e8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4a      	ldr	r2, [pc, #296]	; (80045a0 <HAL_DMA_IRQHandler+0x1ec>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_IRQHandler+0xd2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a48      	ldr	r2, [pc, #288]	; (80045a4 <HAL_DMA_IRQHandler+0x1f0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_DMA_IRQHandler+0xd6>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_DMA_IRQHandler+0xd8>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 842b 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2208      	movs	r2, #8
 800449c:	409a      	lsls	r2, r3
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80a2 	beq.w	80045ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2e      	ldr	r2, [pc, #184]	; (8004568 <HAL_DMA_IRQHandler+0x1b4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d04a      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2d      	ldr	r2, [pc, #180]	; (800456c <HAL_DMA_IRQHandler+0x1b8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d045      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <HAL_DMA_IRQHandler+0x1bc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d040      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <HAL_DMA_IRQHandler+0x1c0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d03b      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a28      	ldr	r2, [pc, #160]	; (8004578 <HAL_DMA_IRQHandler+0x1c4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d036      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a27      	ldr	r2, [pc, #156]	; (800457c <HAL_DMA_IRQHandler+0x1c8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d031      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a25      	ldr	r2, [pc, #148]	; (8004580 <HAL_DMA_IRQHandler+0x1cc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d02c      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a24      	ldr	r2, [pc, #144]	; (8004584 <HAL_DMA_IRQHandler+0x1d0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d027      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <HAL_DMA_IRQHandler+0x1d4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d022      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a21      	ldr	r2, [pc, #132]	; (800458c <HAL_DMA_IRQHandler+0x1d8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d01d      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <HAL_DMA_IRQHandler+0x1dc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d018      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <HAL_DMA_IRQHandler+0x1e0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <HAL_DMA_IRQHandler+0x1e4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00e      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1b      	ldr	r2, [pc, #108]	; (800459c <HAL_DMA_IRQHandler+0x1e8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d009      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_DMA_IRQHandler+0x1ec>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_DMA_IRQHandler+0x194>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_DMA_IRQHandler+0x1f0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d12f      	bne.n	80045a8 <HAL_DMA_IRQHandler+0x1f4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	bf14      	ite	ne
 8004556:	2301      	movne	r3, #1
 8004558:	2300      	moveq	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	e02e      	b.n	80045bc <HAL_DMA_IRQHandler+0x208>
 800455e:	bf00      	nop
 8004560:	2400000c 	.word	0x2400000c
 8004564:	1b4e81b5 	.word	0x1b4e81b5
 8004568:	40020010 	.word	0x40020010
 800456c:	40020028 	.word	0x40020028
 8004570:	40020040 	.word	0x40020040
 8004574:	40020058 	.word	0x40020058
 8004578:	40020070 	.word	0x40020070
 800457c:	40020088 	.word	0x40020088
 8004580:	400200a0 	.word	0x400200a0
 8004584:	400200b8 	.word	0x400200b8
 8004588:	40020410 	.word	0x40020410
 800458c:	40020428 	.word	0x40020428
 8004590:	40020440 	.word	0x40020440
 8004594:	40020458 	.word	0x40020458
 8004598:	40020470 	.word	0x40020470
 800459c:	40020488 	.word	0x40020488
 80045a0:	400204a0 	.word	0x400204a0
 80045a4:	400204b8 	.word	0x400204b8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2208      	movs	r2, #8
 80045da:	409a      	lsls	r2, r3
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	fa22 f303 	lsr.w	r3, r2, r3
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d06e      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a69      	ldr	r2, [pc, #420]	; (80047ac <HAL_DMA_IRQHandler+0x3f8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d04a      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a67      	ldr	r2, [pc, #412]	; (80047b0 <HAL_DMA_IRQHandler+0x3fc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d045      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a66      	ldr	r2, [pc, #408]	; (80047b4 <HAL_DMA_IRQHandler+0x400>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d040      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a64      	ldr	r2, [pc, #400]	; (80047b8 <HAL_DMA_IRQHandler+0x404>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d03b      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a63      	ldr	r2, [pc, #396]	; (80047bc <HAL_DMA_IRQHandler+0x408>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d036      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a61      	ldr	r2, [pc, #388]	; (80047c0 <HAL_DMA_IRQHandler+0x40c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d031      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a60      	ldr	r2, [pc, #384]	; (80047c4 <HAL_DMA_IRQHandler+0x410>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d02c      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a5e      	ldr	r2, [pc, #376]	; (80047c8 <HAL_DMA_IRQHandler+0x414>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d027      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a5d      	ldr	r2, [pc, #372]	; (80047cc <HAL_DMA_IRQHandler+0x418>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a5b      	ldr	r2, [pc, #364]	; (80047d0 <HAL_DMA_IRQHandler+0x41c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01d      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a5a      	ldr	r2, [pc, #360]	; (80047d4 <HAL_DMA_IRQHandler+0x420>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d018      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a58      	ldr	r2, [pc, #352]	; (80047d8 <HAL_DMA_IRQHandler+0x424>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a57      	ldr	r2, [pc, #348]	; (80047dc <HAL_DMA_IRQHandler+0x428>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a55      	ldr	r2, [pc, #340]	; (80047e0 <HAL_DMA_IRQHandler+0x42c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a54      	ldr	r2, [pc, #336]	; (80047e4 <HAL_DMA_IRQHandler+0x430>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x2ee>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a52      	ldr	r2, [pc, #328]	; (80047e8 <HAL_DMA_IRQHandler+0x434>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10a      	bne.n	80046b8 <HAL_DMA_IRQHandler+0x304>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	e003      	b.n	80046c0 <HAL_DMA_IRQHandler+0x30c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2201      	movs	r2, #1
 80046ce:	409a      	lsls	r2, r3
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	f043 0202 	orr.w	r2, r3, #2
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2204      	movs	r2, #4
 80046ea:	409a      	lsls	r2, r3
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 808f 	beq.w	8004814 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2c      	ldr	r2, [pc, #176]	; (80047ac <HAL_DMA_IRQHandler+0x3f8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d04a      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2a      	ldr	r2, [pc, #168]	; (80047b0 <HAL_DMA_IRQHandler+0x3fc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d045      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a29      	ldr	r2, [pc, #164]	; (80047b4 <HAL_DMA_IRQHandler+0x400>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d040      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a27      	ldr	r2, [pc, #156]	; (80047b8 <HAL_DMA_IRQHandler+0x404>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d03b      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a26      	ldr	r2, [pc, #152]	; (80047bc <HAL_DMA_IRQHandler+0x408>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d036      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a24      	ldr	r2, [pc, #144]	; (80047c0 <HAL_DMA_IRQHandler+0x40c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d031      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a23      	ldr	r2, [pc, #140]	; (80047c4 <HAL_DMA_IRQHandler+0x410>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d02c      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <HAL_DMA_IRQHandler+0x414>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d027      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a20      	ldr	r2, [pc, #128]	; (80047cc <HAL_DMA_IRQHandler+0x418>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d022      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <HAL_DMA_IRQHandler+0x41c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d01d      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_DMA_IRQHandler+0x420>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d018      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_DMA_IRQHandler+0x424>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_DMA_IRQHandler+0x428>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_DMA_IRQHandler+0x42c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <HAL_DMA_IRQHandler+0x430>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_DMA_IRQHandler+0x3e2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <HAL_DMA_IRQHandler+0x434>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d12a      	bne.n	80047ec <HAL_DMA_IRQHandler+0x438>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e023      	b.n	80047f4 <HAL_DMA_IRQHandler+0x440>
 80047ac:	40020010 	.word	0x40020010
 80047b0:	40020028 	.word	0x40020028
 80047b4:	40020040 	.word	0x40020040
 80047b8:	40020058 	.word	0x40020058
 80047bc:	40020070 	.word	0x40020070
 80047c0:	40020088 	.word	0x40020088
 80047c4:	400200a0 	.word	0x400200a0
 80047c8:	400200b8 	.word	0x400200b8
 80047cc:	40020410 	.word	0x40020410
 80047d0:	40020428 	.word	0x40020428
 80047d4:	40020440 	.word	0x40020440
 80047d8:	40020458 	.word	0x40020458
 80047dc:	40020470 	.word	0x40020470
 80047e0:	40020488 	.word	0x40020488
 80047e4:	400204a0 	.word	0x400204a0
 80047e8:	400204b8 	.word	0x400204b8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2204      	movs	r2, #4
 8004802:	409a      	lsls	r2, r3
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	f043 0204 	orr.w	r2, r3, #4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2210      	movs	r2, #16
 800481e:	409a      	lsls	r2, r3
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a6 	beq.w	8004976 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a85      	ldr	r2, [pc, #532]	; (8004a44 <HAL_DMA_IRQHandler+0x690>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d04a      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a83      	ldr	r2, [pc, #524]	; (8004a48 <HAL_DMA_IRQHandler+0x694>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d045      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a82      	ldr	r2, [pc, #520]	; (8004a4c <HAL_DMA_IRQHandler+0x698>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d040      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a80      	ldr	r2, [pc, #512]	; (8004a50 <HAL_DMA_IRQHandler+0x69c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d03b      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a7f      	ldr	r2, [pc, #508]	; (8004a54 <HAL_DMA_IRQHandler+0x6a0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d036      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a7d      	ldr	r2, [pc, #500]	; (8004a58 <HAL_DMA_IRQHandler+0x6a4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d031      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7c      	ldr	r2, [pc, #496]	; (8004a5c <HAL_DMA_IRQHandler+0x6a8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d02c      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a7a      	ldr	r2, [pc, #488]	; (8004a60 <HAL_DMA_IRQHandler+0x6ac>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d027      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a79      	ldr	r2, [pc, #484]	; (8004a64 <HAL_DMA_IRQHandler+0x6b0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a77      	ldr	r2, [pc, #476]	; (8004a68 <HAL_DMA_IRQHandler+0x6b4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01d      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a76      	ldr	r2, [pc, #472]	; (8004a6c <HAL_DMA_IRQHandler+0x6b8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a74      	ldr	r2, [pc, #464]	; (8004a70 <HAL_DMA_IRQHandler+0x6bc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a73      	ldr	r2, [pc, #460]	; (8004a74 <HAL_DMA_IRQHandler+0x6c0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a71      	ldr	r2, [pc, #452]	; (8004a78 <HAL_DMA_IRQHandler+0x6c4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a70      	ldr	r2, [pc, #448]	; (8004a7c <HAL_DMA_IRQHandler+0x6c8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_DMA_IRQHandler+0x516>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a6e      	ldr	r2, [pc, #440]	; (8004a80 <HAL_DMA_IRQHandler+0x6cc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10a      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x52c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e009      	b.n	80048f4 <HAL_DMA_IRQHandler+0x540>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d03e      	beq.n	8004976 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2210      	movs	r2, #16
 8004902:	409a      	lsls	r2, r3
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d018      	beq.n	8004948 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d108      	bne.n	8004936 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d024      	beq.n	8004976 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
 8004934:	e01f      	b.n	8004976 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01b      	beq.n	8004976 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
 8004946:	e016      	b.n	8004976 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0208 	bic.w	r2, r2, #8
 8004964:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2220      	movs	r2, #32
 8004980:	409a      	lsls	r2, r3
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8110 	beq.w	8004bac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <HAL_DMA_IRQHandler+0x690>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d04a      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <HAL_DMA_IRQHandler+0x694>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d045      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a29      	ldr	r2, [pc, #164]	; (8004a4c <HAL_DMA_IRQHandler+0x698>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d040      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <HAL_DMA_IRQHandler+0x69c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d03b      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <HAL_DMA_IRQHandler+0x6a0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d036      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <HAL_DMA_IRQHandler+0x6a4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d031      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <HAL_DMA_IRQHandler+0x6a8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02c      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <HAL_DMA_IRQHandler+0x6ac>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d027      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <HAL_DMA_IRQHandler+0x6b0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d022      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <HAL_DMA_IRQHandler+0x6b4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d01d      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1d      	ldr	r2, [pc, #116]	; (8004a6c <HAL_DMA_IRQHandler+0x6b8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d018      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_DMA_IRQHandler+0x6bc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1a      	ldr	r2, [pc, #104]	; (8004a74 <HAL_DMA_IRQHandler+0x6c0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00e      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a19      	ldr	r2, [pc, #100]	; (8004a78 <HAL_DMA_IRQHandler+0x6c4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d009      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <HAL_DMA_IRQHandler+0x6c8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x678>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a16      	ldr	r2, [pc, #88]	; (8004a80 <HAL_DMA_IRQHandler+0x6cc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d12b      	bne.n	8004a84 <HAL_DMA_IRQHandler+0x6d0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf14      	ite	ne
 8004a3a:	2301      	movne	r3, #1
 8004a3c:	2300      	moveq	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e02a      	b.n	8004a98 <HAL_DMA_IRQHandler+0x6e4>
 8004a42:	bf00      	nop
 8004a44:	40020010 	.word	0x40020010
 8004a48:	40020028 	.word	0x40020028
 8004a4c:	40020040 	.word	0x40020040
 8004a50:	40020058 	.word	0x40020058
 8004a54:	40020070 	.word	0x40020070
 8004a58:	40020088 	.word	0x40020088
 8004a5c:	400200a0 	.word	0x400200a0
 8004a60:	400200b8 	.word	0x400200b8
 8004a64:	40020410 	.word	0x40020410
 8004a68:	40020428 	.word	0x40020428
 8004a6c:	40020440 	.word	0x40020440
 8004a70:	40020458 	.word	0x40020458
 8004a74:	40020470 	.word	0x40020470
 8004a78:	40020488 	.word	0x40020488
 8004a7c:	400204a0 	.word	0x400204a0
 8004a80:	400204b8 	.word	0x400204b8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8087 	beq.w	8004bac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d139      	bne.n	8004b2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0216 	bic.w	r2, r2, #22
 8004ac8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <HAL_DMA_IRQHandler+0x736>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0208 	bic.w	r2, r2, #8
 8004af8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	223f      	movs	r2, #63	; 0x3f
 8004b04:	409a      	lsls	r2, r3
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 834a 	beq.w	80051b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
          }
          return;
 8004b2c:	e344      	b.n	80051b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d018      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02c      	beq.n	8004bac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
 8004b5a:	e027      	b.n	8004bac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d023      	beq.n	8004bac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
 8004b6c:	e01e      	b.n	8004bac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10f      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0210 	bic.w	r2, r2, #16
 8004b8a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8306 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8088 	beq.w	8004cd4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a7a      	ldr	r2, [pc, #488]	; (8004dbc <HAL_DMA_IRQHandler+0xa08>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d04a      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a79      	ldr	r2, [pc, #484]	; (8004dc0 <HAL_DMA_IRQHandler+0xa0c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d045      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a77      	ldr	r2, [pc, #476]	; (8004dc4 <HAL_DMA_IRQHandler+0xa10>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d040      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a76      	ldr	r2, [pc, #472]	; (8004dc8 <HAL_DMA_IRQHandler+0xa14>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d03b      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a74      	ldr	r2, [pc, #464]	; (8004dcc <HAL_DMA_IRQHandler+0xa18>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d036      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a73      	ldr	r2, [pc, #460]	; (8004dd0 <HAL_DMA_IRQHandler+0xa1c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d031      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a71      	ldr	r2, [pc, #452]	; (8004dd4 <HAL_DMA_IRQHandler+0xa20>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d02c      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a70      	ldr	r2, [pc, #448]	; (8004dd8 <HAL_DMA_IRQHandler+0xa24>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d027      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a6e      	ldr	r2, [pc, #440]	; (8004ddc <HAL_DMA_IRQHandler+0xa28>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d022      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a6d      	ldr	r2, [pc, #436]	; (8004de0 <HAL_DMA_IRQHandler+0xa2c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d01d      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a6b      	ldr	r2, [pc, #428]	; (8004de4 <HAL_DMA_IRQHandler+0xa30>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6a      	ldr	r2, [pc, #424]	; (8004de8 <HAL_DMA_IRQHandler+0xa34>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a68      	ldr	r2, [pc, #416]	; (8004dec <HAL_DMA_IRQHandler+0xa38>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a67      	ldr	r2, [pc, #412]	; (8004df0 <HAL_DMA_IRQHandler+0xa3c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a65      	ldr	r2, [pc, #404]	; (8004df4 <HAL_DMA_IRQHandler+0xa40>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x8b8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a64      	ldr	r2, [pc, #400]	; (8004df8 <HAL_DMA_IRQHandler+0xa44>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d108      	bne.n	8004c7e <HAL_DMA_IRQHandler+0x8ca>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e007      	b.n	8004c8e <HAL_DMA_IRQHandler+0x8da>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3301      	adds	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d307      	bcc.n	8004caa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f2      	bne.n	8004c8e <HAL_DMA_IRQHandler+0x8da>
 8004ca8:	e000      	b.n	8004cac <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004caa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004cca:	e003      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8272 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	4798      	blx	r3
 8004ce6:	e26c      	b.n	80051c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a43      	ldr	r2, [pc, #268]	; (8004dfc <HAL_DMA_IRQHandler+0xa48>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d022      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x984>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a42      	ldr	r2, [pc, #264]	; (8004e00 <HAL_DMA_IRQHandler+0xa4c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d01d      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x984>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a40      	ldr	r2, [pc, #256]	; (8004e04 <HAL_DMA_IRQHandler+0xa50>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d018      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x984>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a3f      	ldr	r2, [pc, #252]	; (8004e08 <HAL_DMA_IRQHandler+0xa54>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d013      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x984>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a3d      	ldr	r2, [pc, #244]	; (8004e0c <HAL_DMA_IRQHandler+0xa58>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00e      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x984>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a3c      	ldr	r2, [pc, #240]	; (8004e10 <HAL_DMA_IRQHandler+0xa5c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x984>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a3a      	ldr	r2, [pc, #232]	; (8004e14 <HAL_DMA_IRQHandler+0xa60>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d004      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x984>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a39      	ldr	r2, [pc, #228]	; (8004e18 <HAL_DMA_IRQHandler+0xa64>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d101      	bne.n	8004d3c <HAL_DMA_IRQHandler+0x988>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <HAL_DMA_IRQHandler+0x98a>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 823f 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2204      	movs	r2, #4
 8004d56:	409a      	lsls	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80cd 	beq.w	8004efc <HAL_DMA_IRQHandler+0xb48>
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80c7 	beq.w	8004efc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2204      	movs	r2, #4
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d049      	beq.n	8004e1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8210 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da4:	e20a      	b.n	80051bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8206 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db8:	e200      	b.n	80051bc <HAL_DMA_IRQHandler+0xe08>
 8004dba:	bf00      	nop
 8004dbc:	40020010 	.word	0x40020010
 8004dc0:	40020028 	.word	0x40020028
 8004dc4:	40020040 	.word	0x40020040
 8004dc8:	40020058 	.word	0x40020058
 8004dcc:	40020070 	.word	0x40020070
 8004dd0:	40020088 	.word	0x40020088
 8004dd4:	400200a0 	.word	0x400200a0
 8004dd8:	400200b8 	.word	0x400200b8
 8004ddc:	40020410 	.word	0x40020410
 8004de0:	40020428 	.word	0x40020428
 8004de4:	40020440 	.word	0x40020440
 8004de8:	40020458 	.word	0x40020458
 8004dec:	40020470 	.word	0x40020470
 8004df0:	40020488 	.word	0x40020488
 8004df4:	400204a0 	.word	0x400204a0
 8004df8:	400204b8 	.word	0x400204b8
 8004dfc:	58025408 	.word	0x58025408
 8004e00:	5802541c 	.word	0x5802541c
 8004e04:	58025430 	.word	0x58025430
 8004e08:	58025444 	.word	0x58025444
 8004e0c:	58025458 	.word	0x58025458
 8004e10:	5802546c 	.word	0x5802546c
 8004e14:	58025480 	.word	0x58025480
 8004e18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d160      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a8c      	ldr	r2, [pc, #560]	; (800505c <HAL_DMA_IRQHandler+0xca8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d04a      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a8a      	ldr	r2, [pc, #552]	; (8005060 <HAL_DMA_IRQHandler+0xcac>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d045      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a89      	ldr	r2, [pc, #548]	; (8005064 <HAL_DMA_IRQHandler+0xcb0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d040      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a87      	ldr	r2, [pc, #540]	; (8005068 <HAL_DMA_IRQHandler+0xcb4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d03b      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a86      	ldr	r2, [pc, #536]	; (800506c <HAL_DMA_IRQHandler+0xcb8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d036      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a84      	ldr	r2, [pc, #528]	; (8005070 <HAL_DMA_IRQHandler+0xcbc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d031      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a83      	ldr	r2, [pc, #524]	; (8005074 <HAL_DMA_IRQHandler+0xcc0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d02c      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a81      	ldr	r2, [pc, #516]	; (8005078 <HAL_DMA_IRQHandler+0xcc4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d027      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a80      	ldr	r2, [pc, #512]	; (800507c <HAL_DMA_IRQHandler+0xcc8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a7e      	ldr	r2, [pc, #504]	; (8005080 <HAL_DMA_IRQHandler+0xccc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01d      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a7d      	ldr	r2, [pc, #500]	; (8005084 <HAL_DMA_IRQHandler+0xcd0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d018      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a7b      	ldr	r2, [pc, #492]	; (8005088 <HAL_DMA_IRQHandler+0xcd4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a7a      	ldr	r2, [pc, #488]	; (800508c <HAL_DMA_IRQHandler+0xcd8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a78      	ldr	r2, [pc, #480]	; (8005090 <HAL_DMA_IRQHandler+0xcdc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d009      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a77      	ldr	r2, [pc, #476]	; (8005094 <HAL_DMA_IRQHandler+0xce0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d004      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0xb12>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a75      	ldr	r2, [pc, #468]	; (8005098 <HAL_DMA_IRQHandler+0xce4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d108      	bne.n	8004ed8 <HAL_DMA_IRQHandler+0xb24>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0208 	bic.w	r2, r2, #8
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e007      	b.n	8004ee8 <HAL_DMA_IRQHandler+0xb34>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0204 	bic.w	r2, r2, #4
 8004ee6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8165 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004efa:	e15f      	b.n	80051bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2202      	movs	r2, #2
 8004f06:	409a      	lsls	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80c5 	beq.w	800509c <HAL_DMA_IRQHandler+0xce8>
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80bf 	beq.w	800509c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2202      	movs	r2, #2
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d018      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 813a 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f54:	e134      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8130 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f68:	e12a      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d168      	bne.n	8005046 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a38      	ldr	r2, [pc, #224]	; (800505c <HAL_DMA_IRQHandler+0xca8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d04a      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a37      	ldr	r2, [pc, #220]	; (8005060 <HAL_DMA_IRQHandler+0xcac>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d045      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a35      	ldr	r2, [pc, #212]	; (8005064 <HAL_DMA_IRQHandler+0xcb0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d040      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a34      	ldr	r2, [pc, #208]	; (8005068 <HAL_DMA_IRQHandler+0xcb4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d03b      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a32      	ldr	r2, [pc, #200]	; (800506c <HAL_DMA_IRQHandler+0xcb8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d036      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a31      	ldr	r2, [pc, #196]	; (8005070 <HAL_DMA_IRQHandler+0xcbc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d031      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2f      	ldr	r2, [pc, #188]	; (8005074 <HAL_DMA_IRQHandler+0xcc0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d02c      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2e      	ldr	r2, [pc, #184]	; (8005078 <HAL_DMA_IRQHandler+0xcc4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d027      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2c      	ldr	r2, [pc, #176]	; (800507c <HAL_DMA_IRQHandler+0xcc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d022      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a2b      	ldr	r2, [pc, #172]	; (8005080 <HAL_DMA_IRQHandler+0xccc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d01d      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a29      	ldr	r2, [pc, #164]	; (8005084 <HAL_DMA_IRQHandler+0xcd0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d018      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a28      	ldr	r2, [pc, #160]	; (8005088 <HAL_DMA_IRQHandler+0xcd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a26      	ldr	r2, [pc, #152]	; (800508c <HAL_DMA_IRQHandler+0xcd8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00e      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a25      	ldr	r2, [pc, #148]	; (8005090 <HAL_DMA_IRQHandler+0xcdc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d009      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a23      	ldr	r2, [pc, #140]	; (8005094 <HAL_DMA_IRQHandler+0xce0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_DMA_IRQHandler+0xc60>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_DMA_IRQHandler+0xce4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <HAL_DMA_IRQHandler+0xc72>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0214 	bic.w	r2, r2, #20
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e007      	b.n	8005036 <HAL_DMA_IRQHandler+0xc82>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 020a 	bic.w	r2, r2, #10
 8005034:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80b8 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005058:	e0b2      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe0c>
 800505a:	bf00      	nop
 800505c:	40020010 	.word	0x40020010
 8005060:	40020028 	.word	0x40020028
 8005064:	40020040 	.word	0x40020040
 8005068:	40020058 	.word	0x40020058
 800506c:	40020070 	.word	0x40020070
 8005070:	40020088 	.word	0x40020088
 8005074:	400200a0 	.word	0x400200a0
 8005078:	400200b8 	.word	0x400200b8
 800507c:	40020410 	.word	0x40020410
 8005080:	40020428 	.word	0x40020428
 8005084:	40020440 	.word	0x40020440
 8005088:	40020458 	.word	0x40020458
 800508c:	40020470 	.word	0x40020470
 8005090:	40020488 	.word	0x40020488
 8005094:	400204a0 	.word	0x400204a0
 8005098:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2208      	movs	r2, #8
 80050a6:	409a      	lsls	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8088 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe0e>
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8082 	beq.w	80051c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a41      	ldr	r2, [pc, #260]	; (80051c8 <HAL_DMA_IRQHandler+0xe14>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04a      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a3f      	ldr	r2, [pc, #252]	; (80051cc <HAL_DMA_IRQHandler+0xe18>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d045      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a3e      	ldr	r2, [pc, #248]	; (80051d0 <HAL_DMA_IRQHandler+0xe1c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d040      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <HAL_DMA_IRQHandler+0xe20>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03b      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3b      	ldr	r2, [pc, #236]	; (80051d8 <HAL_DMA_IRQHandler+0xe24>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d036      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a39      	ldr	r2, [pc, #228]	; (80051dc <HAL_DMA_IRQHandler+0xe28>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a38      	ldr	r2, [pc, #224]	; (80051e0 <HAL_DMA_IRQHandler+0xe2c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d02c      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a36      	ldr	r2, [pc, #216]	; (80051e4 <HAL_DMA_IRQHandler+0xe30>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a35      	ldr	r2, [pc, #212]	; (80051e8 <HAL_DMA_IRQHandler+0xe34>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a33      	ldr	r2, [pc, #204]	; (80051ec <HAL_DMA_IRQHandler+0xe38>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a32      	ldr	r2, [pc, #200]	; (80051f0 <HAL_DMA_IRQHandler+0xe3c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a30      	ldr	r2, [pc, #192]	; (80051f4 <HAL_DMA_IRQHandler+0xe40>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2f      	ldr	r2, [pc, #188]	; (80051f8 <HAL_DMA_IRQHandler+0xe44>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <HAL_DMA_IRQHandler+0xe48>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <HAL_DMA_IRQHandler+0xe4c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_DMA_IRQHandler+0xdaa>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <HAL_DMA_IRQHandler+0xe50>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <HAL_DMA_IRQHandler+0xdbc>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 021c 	bic.w	r2, r2, #28
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e007      	b.n	8005180 <HAL_DMA_IRQHandler+0xdcc>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 020e 	bic.w	r2, r2, #14
 800517e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2201      	movs	r2, #1
 800518a:	409a      	lsls	r2, r3
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	e004      	b.n	80051c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051b8:	bf00      	nop
 80051ba:	e002      	b.n	80051c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051c2:	3728      	adds	r7, #40	; 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40020010 	.word	0x40020010
 80051cc:	40020028 	.word	0x40020028
 80051d0:	40020040 	.word	0x40020040
 80051d4:	40020058 	.word	0x40020058
 80051d8:	40020070 	.word	0x40020070
 80051dc:	40020088 	.word	0x40020088
 80051e0:	400200a0 	.word	0x400200a0
 80051e4:	400200b8 	.word	0x400200b8
 80051e8:	40020410 	.word	0x40020410
 80051ec:	40020428 	.word	0x40020428
 80051f0:	40020440 	.word	0x40020440
 80051f4:	40020458 	.word	0x40020458
 80051f8:	40020470 	.word	0x40020470
 80051fc:	40020488 	.word	0x40020488
 8005200:	400204a0 	.word	0x400204a0
 8005204:	400204b8 	.word	0x400204b8

08005208 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a84      	ldr	r2, [pc, #528]	; (8005438 <DMA_SetConfig+0x230>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d072      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a82      	ldr	r2, [pc, #520]	; (800543c <DMA_SetConfig+0x234>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d06d      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a81      	ldr	r2, [pc, #516]	; (8005440 <DMA_SetConfig+0x238>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d068      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a7f      	ldr	r2, [pc, #508]	; (8005444 <DMA_SetConfig+0x23c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d063      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a7e      	ldr	r2, [pc, #504]	; (8005448 <DMA_SetConfig+0x240>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d05e      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a7c      	ldr	r2, [pc, #496]	; (800544c <DMA_SetConfig+0x244>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d059      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7b      	ldr	r2, [pc, #492]	; (8005450 <DMA_SetConfig+0x248>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d054      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a79      	ldr	r2, [pc, #484]	; (8005454 <DMA_SetConfig+0x24c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d04f      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a78      	ldr	r2, [pc, #480]	; (8005458 <DMA_SetConfig+0x250>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d04a      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a76      	ldr	r2, [pc, #472]	; (800545c <DMA_SetConfig+0x254>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d045      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a75      	ldr	r2, [pc, #468]	; (8005460 <DMA_SetConfig+0x258>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d040      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a73      	ldr	r2, [pc, #460]	; (8005464 <DMA_SetConfig+0x25c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d03b      	beq.n	8005312 <DMA_SetConfig+0x10a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a72      	ldr	r2, [pc, #456]	; (8005468 <DMA_SetConfig+0x260>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d036      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a70      	ldr	r2, [pc, #448]	; (800546c <DMA_SetConfig+0x264>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d031      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6f      	ldr	r2, [pc, #444]	; (8005470 <DMA_SetConfig+0x268>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d02c      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a6d      	ldr	r2, [pc, #436]	; (8005474 <DMA_SetConfig+0x26c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d027      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a6c      	ldr	r2, [pc, #432]	; (8005478 <DMA_SetConfig+0x270>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d022      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a6a      	ldr	r2, [pc, #424]	; (800547c <DMA_SetConfig+0x274>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01d      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a69      	ldr	r2, [pc, #420]	; (8005480 <DMA_SetConfig+0x278>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d018      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a67      	ldr	r2, [pc, #412]	; (8005484 <DMA_SetConfig+0x27c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a66      	ldr	r2, [pc, #408]	; (8005488 <DMA_SetConfig+0x280>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a64      	ldr	r2, [pc, #400]	; (800548c <DMA_SetConfig+0x284>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <DMA_SetConfig+0x10a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a63      	ldr	r2, [pc, #396]	; (8005490 <DMA_SetConfig+0x288>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <DMA_SetConfig+0x10a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a61      	ldr	r2, [pc, #388]	; (8005494 <DMA_SetConfig+0x28c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <DMA_SetConfig+0x10e>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <DMA_SetConfig+0x110>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00d      	beq.n	8005338 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005324:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005336:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a3e      	ldr	r2, [pc, #248]	; (8005438 <DMA_SetConfig+0x230>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a3d      	ldr	r2, [pc, #244]	; (800543c <DMA_SetConfig+0x234>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a3b      	ldr	r2, [pc, #236]	; (8005440 <DMA_SetConfig+0x238>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a3a      	ldr	r2, [pc, #232]	; (8005444 <DMA_SetConfig+0x23c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a38      	ldr	r2, [pc, #224]	; (8005448 <DMA_SetConfig+0x240>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a37      	ldr	r2, [pc, #220]	; (800544c <DMA_SetConfig+0x244>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a35      	ldr	r2, [pc, #212]	; (8005450 <DMA_SetConfig+0x248>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a34      	ldr	r2, [pc, #208]	; (8005454 <DMA_SetConfig+0x24c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a32      	ldr	r2, [pc, #200]	; (8005458 <DMA_SetConfig+0x250>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a31      	ldr	r2, [pc, #196]	; (800545c <DMA_SetConfig+0x254>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <DMA_SetConfig+0x258>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2e      	ldr	r2, [pc, #184]	; (8005464 <DMA_SetConfig+0x25c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2c      	ldr	r2, [pc, #176]	; (8005468 <DMA_SetConfig+0x260>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2b      	ldr	r2, [pc, #172]	; (800546c <DMA_SetConfig+0x264>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a29      	ldr	r2, [pc, #164]	; (8005470 <DMA_SetConfig+0x268>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <DMA_SetConfig+0x1d0>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a28      	ldr	r2, [pc, #160]	; (8005474 <DMA_SetConfig+0x26c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d101      	bne.n	80053dc <DMA_SetConfig+0x1d4>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <DMA_SetConfig+0x1d6>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d05a      	beq.n	8005498 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	223f      	movs	r2, #63	; 0x3f
 80053ec:	409a      	lsls	r2, r3
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005400:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d108      	bne.n	8005424 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005422:	e087      	b.n	8005534 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]
}
 8005434:	e07e      	b.n	8005534 <DMA_SetConfig+0x32c>
 8005436:	bf00      	nop
 8005438:	40020010 	.word	0x40020010
 800543c:	40020028 	.word	0x40020028
 8005440:	40020040 	.word	0x40020040
 8005444:	40020058 	.word	0x40020058
 8005448:	40020070 	.word	0x40020070
 800544c:	40020088 	.word	0x40020088
 8005450:	400200a0 	.word	0x400200a0
 8005454:	400200b8 	.word	0x400200b8
 8005458:	40020410 	.word	0x40020410
 800545c:	40020428 	.word	0x40020428
 8005460:	40020440 	.word	0x40020440
 8005464:	40020458 	.word	0x40020458
 8005468:	40020470 	.word	0x40020470
 800546c:	40020488 	.word	0x40020488
 8005470:	400204a0 	.word	0x400204a0
 8005474:	400204b8 	.word	0x400204b8
 8005478:	58025408 	.word	0x58025408
 800547c:	5802541c 	.word	0x5802541c
 8005480:	58025430 	.word	0x58025430
 8005484:	58025444 	.word	0x58025444
 8005488:	58025458 	.word	0x58025458
 800548c:	5802546c 	.word	0x5802546c
 8005490:	58025480 	.word	0x58025480
 8005494:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a28      	ldr	r2, [pc, #160]	; (8005540 <DMA_SetConfig+0x338>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d022      	beq.n	80054e8 <DMA_SetConfig+0x2e0>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a27      	ldr	r2, [pc, #156]	; (8005544 <DMA_SetConfig+0x33c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d01d      	beq.n	80054e8 <DMA_SetConfig+0x2e0>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a25      	ldr	r2, [pc, #148]	; (8005548 <DMA_SetConfig+0x340>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d018      	beq.n	80054e8 <DMA_SetConfig+0x2e0>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a24      	ldr	r2, [pc, #144]	; (800554c <DMA_SetConfig+0x344>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <DMA_SetConfig+0x2e0>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a22      	ldr	r2, [pc, #136]	; (8005550 <DMA_SetConfig+0x348>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00e      	beq.n	80054e8 <DMA_SetConfig+0x2e0>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a21      	ldr	r2, [pc, #132]	; (8005554 <DMA_SetConfig+0x34c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <DMA_SetConfig+0x2e0>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <DMA_SetConfig+0x350>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <DMA_SetConfig+0x2e0>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1e      	ldr	r2, [pc, #120]	; (800555c <DMA_SetConfig+0x354>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d101      	bne.n	80054ec <DMA_SetConfig+0x2e4>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <DMA_SetConfig+0x2e6>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d020      	beq.n	8005534 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2201      	movs	r2, #1
 80054fc:	409a      	lsls	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d108      	bne.n	8005524 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	60da      	str	r2, [r3, #12]
}
 8005522:	e007      	b.n	8005534 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	58025408 	.word	0x58025408
 8005544:	5802541c 	.word	0x5802541c
 8005548:	58025430 	.word	0x58025430
 800554c:	58025444 	.word	0x58025444
 8005550:	58025458 	.word	0x58025458
 8005554:	5802546c 	.word	0x5802546c
 8005558:	58025480 	.word	0x58025480
 800555c:	58025494 	.word	0x58025494

08005560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a42      	ldr	r2, [pc, #264]	; (8005678 <DMA_CalcBaseAndBitshift+0x118>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d04a      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a41      	ldr	r2, [pc, #260]	; (800567c <DMA_CalcBaseAndBitshift+0x11c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d045      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a3f      	ldr	r2, [pc, #252]	; (8005680 <DMA_CalcBaseAndBitshift+0x120>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d040      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3e      	ldr	r2, [pc, #248]	; (8005684 <DMA_CalcBaseAndBitshift+0x124>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d03b      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3c      	ldr	r2, [pc, #240]	; (8005688 <DMA_CalcBaseAndBitshift+0x128>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d036      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3b      	ldr	r2, [pc, #236]	; (800568c <DMA_CalcBaseAndBitshift+0x12c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d031      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a39      	ldr	r2, [pc, #228]	; (8005690 <DMA_CalcBaseAndBitshift+0x130>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d02c      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a38      	ldr	r2, [pc, #224]	; (8005694 <DMA_CalcBaseAndBitshift+0x134>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d027      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a36      	ldr	r2, [pc, #216]	; (8005698 <DMA_CalcBaseAndBitshift+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d022      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a35      	ldr	r2, [pc, #212]	; (800569c <DMA_CalcBaseAndBitshift+0x13c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d01d      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a33      	ldr	r2, [pc, #204]	; (80056a0 <DMA_CalcBaseAndBitshift+0x140>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d018      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a32      	ldr	r2, [pc, #200]	; (80056a4 <DMA_CalcBaseAndBitshift+0x144>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a30      	ldr	r2, [pc, #192]	; (80056a8 <DMA_CalcBaseAndBitshift+0x148>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00e      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2f      	ldr	r2, [pc, #188]	; (80056ac <DMA_CalcBaseAndBitshift+0x14c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d009      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2d      	ldr	r2, [pc, #180]	; (80056b0 <DMA_CalcBaseAndBitshift+0x150>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d004      	beq.n	8005608 <DMA_CalcBaseAndBitshift+0xa8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2c      	ldr	r2, [pc, #176]	; (80056b4 <DMA_CalcBaseAndBitshift+0x154>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d101      	bne.n	800560c <DMA_CalcBaseAndBitshift+0xac>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <DMA_CalcBaseAndBitshift+0xae>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d024      	beq.n	800565c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	3b10      	subs	r3, #16
 800561a:	4a27      	ldr	r2, [pc, #156]	; (80056b8 <DMA_CalcBaseAndBitshift+0x158>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	091b      	lsrs	r3, r3, #4
 8005622:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	4a24      	ldr	r2, [pc, #144]	; (80056bc <DMA_CalcBaseAndBitshift+0x15c>)
 800562c:	5cd3      	ldrb	r3, [r2, r3]
 800562e:	461a      	mov	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d908      	bls.n	800564c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <DMA_CalcBaseAndBitshift+0x160>)
 8005642:	4013      	ands	r3, r2
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	659a      	str	r2, [r3, #88]	; 0x58
 800564a:	e00d      	b.n	8005668 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <DMA_CalcBaseAndBitshift+0x160>)
 8005654:	4013      	ands	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6593      	str	r3, [r2, #88]	; 0x58
 800565a:	e005      	b.n	8005668 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40020010 	.word	0x40020010
 800567c:	40020028 	.word	0x40020028
 8005680:	40020040 	.word	0x40020040
 8005684:	40020058 	.word	0x40020058
 8005688:	40020070 	.word	0x40020070
 800568c:	40020088 	.word	0x40020088
 8005690:	400200a0 	.word	0x400200a0
 8005694:	400200b8 	.word	0x400200b8
 8005698:	40020410 	.word	0x40020410
 800569c:	40020428 	.word	0x40020428
 80056a0:	40020440 	.word	0x40020440
 80056a4:	40020458 	.word	0x40020458
 80056a8:	40020470 	.word	0x40020470
 80056ac:	40020488 	.word	0x40020488
 80056b0:	400204a0 	.word	0x400204a0
 80056b4:	400204b8 	.word	0x400204b8
 80056b8:	aaaaaaab 	.word	0xaaaaaaab
 80056bc:	08019ebc 	.word	0x08019ebc
 80056c0:	fffffc00 	.word	0xfffffc00

080056c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d120      	bne.n	800571a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d858      	bhi.n	8005792 <DMA_CheckFifoParam+0xce>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <DMA_CheckFifoParam+0x24>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	080056f9 	.word	0x080056f9
 80056ec:	0800570b 	.word	0x0800570b
 80056f0:	080056f9 	.word	0x080056f9
 80056f4:	08005793 	.word	0x08005793
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d048      	beq.n	8005796 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005708:	e045      	b.n	8005796 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005712:	d142      	bne.n	800579a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005718:	e03f      	b.n	800579a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005722:	d123      	bne.n	800576c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	2b03      	cmp	r3, #3
 800572a:	d838      	bhi.n	800579e <DMA_CheckFifoParam+0xda>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <DMA_CheckFifoParam+0x70>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005745 	.word	0x08005745
 8005738:	0800574b 	.word	0x0800574b
 800573c:	08005745 	.word	0x08005745
 8005740:	0800575d 	.word	0x0800575d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
        break;
 8005748:	e030      	b.n	80057ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d025      	beq.n	80057a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800575a:	e022      	b.n	80057a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005764:	d11f      	bne.n	80057a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800576a:	e01c      	b.n	80057a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	2b02      	cmp	r3, #2
 8005772:	d902      	bls.n	800577a <DMA_CheckFifoParam+0xb6>
 8005774:	2b03      	cmp	r3, #3
 8005776:	d003      	beq.n	8005780 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005778:	e018      	b.n	80057ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	73fb      	strb	r3, [r7, #15]
        break;
 800577e:	e015      	b.n	80057ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00e      	beq.n	80057aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
    break;
 8005790:	e00b      	b.n	80057aa <DMA_CheckFifoParam+0xe6>
        break;
 8005792:	bf00      	nop
 8005794:	e00a      	b.n	80057ac <DMA_CheckFifoParam+0xe8>
        break;
 8005796:	bf00      	nop
 8005798:	e008      	b.n	80057ac <DMA_CheckFifoParam+0xe8>
        break;
 800579a:	bf00      	nop
 800579c:	e006      	b.n	80057ac <DMA_CheckFifoParam+0xe8>
        break;
 800579e:	bf00      	nop
 80057a0:	e004      	b.n	80057ac <DMA_CheckFifoParam+0xe8>
        break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <DMA_CheckFifoParam+0xe8>
        break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <DMA_CheckFifoParam+0xe8>
    break;
 80057aa:	bf00      	nop
    }
  }

  return status;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d022      	beq.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a36      	ldr	r2, [pc, #216]	; (80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d01d      	beq.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a35      	ldr	r2, [pc, #212]	; (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d018      	beq.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a33      	ldr	r2, [pc, #204]	; (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a32      	ldr	r2, [pc, #200]	; (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00e      	beq.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a30      	ldr	r2, [pc, #192]	; (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d009      	beq.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2f      	ldr	r2, [pc, #188]	; (80058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2d      	ldr	r2, [pc, #180]	; (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01a      	beq.n	800585a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	3b08      	subs	r3, #8
 800582c:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	091b      	lsrs	r3, r3, #4
 8005834:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	461a      	mov	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005848:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2201      	movs	r2, #1
 8005852:	409a      	lsls	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005858:	e024      	b.n	80058a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	3b10      	subs	r3, #16
 8005862:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d806      	bhi.n	8005882 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4a1b      	ldr	r2, [pc, #108]	; (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d902      	bls.n	8005882 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3308      	adds	r3, #8
 8005880:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a16      	ldr	r2, [pc, #88]	; (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005894:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	2201      	movs	r2, #1
 800589e:	409a      	lsls	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	58025408 	.word	0x58025408
 80058b4:	5802541c 	.word	0x5802541c
 80058b8:	58025430 	.word	0x58025430
 80058bc:	58025444 	.word	0x58025444
 80058c0:	58025458 	.word	0x58025458
 80058c4:	5802546c 	.word	0x5802546c
 80058c8:	58025480 	.word	0x58025480
 80058cc:	58025494 	.word	0x58025494
 80058d0:	cccccccd 	.word	0xcccccccd
 80058d4:	16009600 	.word	0x16009600
 80058d8:	58025880 	.word	0x58025880
 80058dc:	aaaaaaab 	.word	0xaaaaaaab
 80058e0:	400204b8 	.word	0x400204b8
 80058e4:	4002040f 	.word	0x4002040f
 80058e8:	10008200 	.word	0x10008200
 80058ec:	40020880 	.word	0x40020880

080058f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d04a      	beq.n	800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d847      	bhi.n	800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d022      	beq.n	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a24      	ldr	r2, [pc, #144]	; (80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d01d      	beq.n	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d018      	beq.n	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00e      	beq.n	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d009      	beq.n	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d101      	bne.n	8005960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005960:	2300      	movs	r3, #0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a15      	ldr	r2, [pc, #84]	; (80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005978:	671a      	str	r2, [r3, #112]	; 0x70
 800597a:	e009      	b.n	8005990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4b14      	ldr	r3, [pc, #80]	; (80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a11      	ldr	r2, [pc, #68]	; (80059d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800598e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3b01      	subs	r3, #1
 8005994:	2201      	movs	r2, #1
 8005996:	409a      	lsls	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	58025408 	.word	0x58025408
 80059ac:	5802541c 	.word	0x5802541c
 80059b0:	58025430 	.word	0x58025430
 80059b4:	58025444 	.word	0x58025444
 80059b8:	58025458 	.word	0x58025458
 80059bc:	5802546c 	.word	0x5802546c
 80059c0:	58025480 	.word	0x58025480
 80059c4:	58025494 	.word	0x58025494
 80059c8:	1600963f 	.word	0x1600963f
 80059cc:	58025940 	.word	0x58025940
 80059d0:	1000823f 	.word	0x1000823f
 80059d4:	40020940 	.word	0x40020940

080059d8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b098      	sub	sp, #96	; 0x60
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80059e0:	4a84      	ldr	r2, [pc, #528]	; (8005bf4 <HAL_FDCAN_Init+0x21c>)
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	4611      	mov	r1, r2
 80059e8:	224c      	movs	r2, #76	; 0x4c
 80059ea:	4618      	mov	r0, r3
 80059ec:	f012 fd28 	bl	8018440 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e1ca      	b.n	8005d90 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a7e      	ldr	r2, [pc, #504]	; (8005bf8 <HAL_FDCAN_Init+0x220>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d106      	bne.n	8005a12 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd f94e 	bl	8002cc8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0210 	bic.w	r2, r2, #16
 8005a3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a3c:	f7fd fdaa 	bl	8003594 <HAL_GetTick>
 8005a40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a42:	e014      	b.n	8005a6e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a44:	f7fd fda6 	bl	8003594 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b0a      	cmp	r3, #10
 8005a50:	d90d      	bls.n	8005a6e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a58:	f043 0201 	orr.w	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2203      	movs	r2, #3
 8005a66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e190      	b.n	8005d90 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d0e3      	beq.n	8005a44 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a8c:	f7fd fd82 	bl	8003594 <HAL_GetTick>
 8005a90:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a92:	e014      	b.n	8005abe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a94:	f7fd fd7e 	bl	8003594 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b0a      	cmp	r3, #10
 8005aa0:	d90d      	bls.n	8005abe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aa8:	f043 0201 	orr.w	r2, r3, #1
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e168      	b.n	8005d90 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0e3      	beq.n	8005a94 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0202 	orr.w	r2, r2, #2
 8005ada:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7c1b      	ldrb	r3, [r3, #16]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d108      	bne.n	8005af6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af2:	619a      	str	r2, [r3, #24]
 8005af4:	e007      	b.n	8005b06 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b04:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7c5b      	ldrb	r3, [r3, #17]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d108      	bne.n	8005b20 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b1c:	619a      	str	r2, [r3, #24]
 8005b1e:	e007      	b.n	8005b30 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b2e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	7c9b      	ldrb	r3, [r3, #18]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d108      	bne.n	8005b4a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b46:	619a      	str	r2, [r3, #24]
 8005b48:	e007      	b.n	8005b5a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b58:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005b7e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0210 	bic.w	r2, r2, #16
 8005b8e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d108      	bne.n	8005baa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0204 	orr.w	r2, r2, #4
 8005ba6:	619a      	str	r2, [r3, #24]
 8005ba8:	e030      	b.n	8005c0c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d02c      	beq.n	8005c0c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d020      	beq.n	8005bfc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bc8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0210 	orr.w	r2, r2, #16
 8005bd8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d114      	bne.n	8005c0c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0220 	orr.w	r2, r2, #32
 8005bf0:	619a      	str	r2, [r3, #24]
 8005bf2:	e00b      	b.n	8005c0c <HAL_FDCAN_Init+0x234>
 8005bf4:	08019dc8 	.word	0x08019dc8
 8005bf8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0220 	orr.w	r2, r2, #32
 8005c0a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c1c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c24:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c34:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c36:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c40:	d115      	bne.n	8005c6e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c50:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	3b01      	subs	r3, #1
 8005c58:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005c5a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	3b01      	subs	r3, #1
 8005c64:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005c6a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005c6c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c94:	4413      	add	r3, r2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d012      	beq.n	8005cc0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005ca2:	f023 0107 	bic.w	r1, r3, #7
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d012      	beq.n	8005cee <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cd0:	f023 0107 	bic.w	r1, r3, #7
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005cde:	4413      	add	r3, r2
 8005ce0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d013      	beq.n	8005d1e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005cfe:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d12:	011a      	lsls	r2, r3, #4
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d013      	beq.n	8005d4e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d2e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005d42:	021a      	lsls	r2, r3, #8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a11      	ldr	r2, [pc, #68]	; (8005d98 <HAL_FDCAN_Init+0x3c0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d107      	bne.n	8005d68 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f022 0203 	bic.w	r2, r2, #3
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fddf 	bl	8006944 <FDCAN_CalcultateRamBlockAddresses>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005d8c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3760      	adds	r7, #96	; 0x60
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	4000a000 	.word	0x4000a000

08005d9c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005dac:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d002      	beq.n	8005dba <HAL_FDCAN_ConfigFilter+0x1e>
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d157      	bne.n	8005e6a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d12b      	bne.n	8005e1a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b07      	cmp	r3, #7
 8005dc8:	d10d      	bne.n	8005de6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005dd6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005ddc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005dde:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e00e      	b.n	8005e04 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005df2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005dfa:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e025      	b.n	8005e66 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	075a      	lsls	r2, r3, #29
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b07      	cmp	r3, #7
 8005e2e:	d103      	bne.n	8005e38 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	e006      	b.n	8005e46 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	079a      	lsls	r2, r3, #30
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	e008      	b.n	8005e7c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e70:	f043 0202 	orr.w	r2, r3, #2
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
  }
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d110      	bne.n	8005ec4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005eaa:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005eb0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e008      	b.n	8005ed6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eca:	f043 0204 	orr.w	r2, r3, #4
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
  }
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d109      	bne.n	8005f0a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005f04:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e008      	b.n	8005f1c <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f10:	f043 0204 	orr.w	r2, r3, #4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
  }
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d111      	bne.n	8005f60 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0201 	bic.w	r2, r2, #1
 8005f52:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e008      	b.n	8005f72 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f66:	f043 0204 	orr.w	r2, r3, #4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b08b      	sub	sp, #44	; 0x2c
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f98:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005f9a:	7efb      	ldrb	r3, [r7, #27]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	f040 813b 	bne.w	8006218 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b40      	cmp	r3, #64	; 0x40
 8005fa6:	d145      	bne.n	8006034 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fbe:	f043 0220 	orr.w	r2, r3, #32
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e12e      	b.n	800622a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e11c      	b.n	800622a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ff8:	0e1b      	lsrs	r3, r3, #24
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d103      	bne.n	800600a <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006012:	0a1b      	lsrs	r3, r3, #8
 8006014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006026:	69f9      	ldr	r1, [r7, #28]
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
 8006032:	e061      	b.n	80060f8 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b41      	cmp	r3, #65	; 0x41
 8006038:	d145      	bne.n	80060c6 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e0e5      	b.n	800622a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006074:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e0d3      	b.n	800622a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800608a:	0e1b      	lsrs	r3, r3, #24
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d103      	bne.n	800609c <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	4413      	add	r3, r2
 80060ae:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b8:	69f9      	ldr	r1, [r7, #28]
 80060ba:	fb01 f303 	mul.w	r3, r1, r3
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
 80060c4:	e018      	b.n	80060f8 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d309      	bcc.n	80060e4 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060d6:	f043 0220 	orr.w	r2, r3, #32
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0a2      	b.n	800622a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d107      	bne.n	800611c <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	0c9b      	lsrs	r3, r3, #18
 8006112:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e005      	b.n	8006128 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	3304      	adds	r3, #4
 8006144:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	b29a      	uxth	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	0e1b      	lsrs	r3, r3, #24
 800617a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	0fda      	lsrs	r2, r3, #31
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	3304      	adds	r3, #4
 8006190:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006196:	2300      	movs	r3, #0
 8006198:	623b      	str	r3, [r7, #32]
 800619a:	e00a      	b.n	80061b2 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	441a      	add	r2, r3
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	440b      	add	r3, r1
 80061a8:	7812      	ldrb	r2, [r2, #0]
 80061aa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	3301      	adds	r3, #1
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	4a1f      	ldr	r2, [pc, #124]	; (8006238 <HAL_FDCAN_GetRxMessage+0x2b8>)
 80061ba:	5cd3      	ldrb	r3, [r2, r3]
 80061bc:	461a      	mov	r2, r3
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d3eb      	bcc.n	800619c <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d105      	bne.n	80061d6 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80061d4:	e01e      	b.n	8006214 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b41      	cmp	r3, #65	; 0x41
 80061da:	d105      	bne.n	80061e8 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80061e6:	e015      	b.n	8006214 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b1f      	cmp	r3, #31
 80061ec:	d808      	bhi.n	8006200 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2101      	movs	r1, #1
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	fa01 f202 	lsl.w	r2, r1, r2
 80061fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80061fe:	e009      	b.n	8006214 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 021f 	and.w	r2, r3, #31
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2101      	movs	r1, #1
 800620c:	fa01 f202 	lsl.w	r2, r1, r2
 8006210:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	e008      	b.n	800622a <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800621e:	f043 0208 	orr.w	r2, r3, #8
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	372c      	adds	r7, #44	; 0x2c
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	08019ec4 	.word	0x08019ec4

0800623c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800624e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d002      	beq.n	800625c <HAL_FDCAN_ActivateNotification+0x20>
 8006256:	7dfb      	ldrb	r3, [r7, #23]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d155      	bne.n	8006308 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0201 	orr.w	r2, r2, #1
 8006278:	65da      	str	r2, [r3, #92]	; 0x5c
 800627a:	e014      	b.n	80062a6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4013      	ands	r3, r2
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	429a      	cmp	r2, r3
 800628a:	d108      	bne.n	800629e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0202 	orr.w	r2, r2, #2
 800629a:	65da      	str	r2, [r3, #92]	; 0x5c
 800629c:	e003      	b.n	80062a6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2203      	movs	r2, #3
 80062a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	430a      	orrs	r2, r1
 80062c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	430a      	orrs	r2, r1
 80062de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <HAL_FDCAN_ActivateNotification+0xec>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	430b      	orrs	r3, r1
 80062f4:	6553      	str	r3, [r2, #84]	; 0x54
 80062f6:	4b0d      	ldr	r3, [pc, #52]	; (800632c <HAL_FDCAN_ActivateNotification+0xf0>)
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	0f9b      	lsrs	r3, r3, #30
 80062fe:	490b      	ldr	r1, [pc, #44]	; (800632c <HAL_FDCAN_ActivateNotification+0xf0>)
 8006300:	4313      	orrs	r3, r2
 8006302:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	e008      	b.n	800631a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800630e:	f043 0202 	orr.w	r2, r3, #2
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	3fcfffff 	.word	0x3fcfffff
 800632c:	4000a800 	.word	0x4000a800

08006330 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b092      	sub	sp, #72	; 0x48
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006338:	4b90      	ldr	r3, [pc, #576]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	079b      	lsls	r3, r3, #30
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006340:	4b8e      	ldr	r3, [pc, #568]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	079b      	lsls	r3, r3, #30
 8006346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006348:	4013      	ands	r3, r2
 800634a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006356:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006360:	4013      	ands	r3, r2
 8006362:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006378:	4013      	ands	r3, r2
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006386:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006390:	4013      	ands	r3, r2
 8006392:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a8:	4013      	ands	r3, r2
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c0:	4013      	ands	r3, r2
 80063c2:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d011      	beq.n	80063f6 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063e8:	651a      	str	r2, [r3, #80]	; 0x50
 80063ea:	4b64      	ldr	r3, [pc, #400]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa5a 	bl	80068aa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01e      	beq.n	8006442 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640e:	2b00      	cmp	r3, #0
 8006410:	d017      	beq.n	8006442 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006426:	4013      	ands	r3, r2
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006432:	651a      	str	r2, [r3, #80]	; 0x50
 8006434:	4b51      	ldr	r3, [pc, #324]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 8006436:	2200      	movs	r2, #0
 8006438:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800643a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa0b 	bl	8006858 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00d      	beq.n	8006464 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800644e:	4b4c      	ldr	r3, [pc, #304]	; (8006580 <HAL_FDCAN_IRQHandler+0x250>)
 8006450:	400b      	ands	r3, r1
 8006452:	6513      	str	r3, [r2, #80]	; 0x50
 8006454:	4a49      	ldr	r2, [pc, #292]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 8006456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006458:	0f9b      	lsrs	r3, r3, #30
 800645a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800645c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9c4 	bl	80067ec <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006470:	4b43      	ldr	r3, [pc, #268]	; (8006580 <HAL_FDCAN_IRQHandler+0x250>)
 8006472:	400b      	ands	r3, r1
 8006474:	6513      	str	r3, [r2, #80]	; 0x50
 8006476:	4a41      	ldr	r2, [pc, #260]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 8006478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647a:	0f9b      	lsrs	r3, r3, #30
 800647c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800647e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f9be 	bl	8006802 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00d      	beq.n	80064a8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006492:	4b3b      	ldr	r3, [pc, #236]	; (8006580 <HAL_FDCAN_IRQHandler+0x250>)
 8006494:	400b      	ands	r3, r1
 8006496:	6513      	str	r3, [r2, #80]	; 0x50
 8006498:	4a38      	ldr	r2, [pc, #224]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 800649a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649c:	0f9b      	lsrs	r3, r3, #30
 800649e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80064a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fa f932 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064b4:	4b32      	ldr	r3, [pc, #200]	; (8006580 <HAL_FDCAN_IRQHandler+0x250>)
 80064b6:	400b      	ands	r3, r1
 80064b8:	6513      	str	r3, [r2, #80]	; 0x50
 80064ba:	4a30      	ldr	r2, [pc, #192]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	0f9b      	lsrs	r3, r3, #30
 80064c0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80064c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f9a7 	bl	8006818 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d011      	beq.n	80064fc <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ee:	651a      	str	r2, [r3, #80]	; 0x50
 80064f0:	4b22      	ldr	r3, [pc, #136]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f999 	bl	800682e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01e      	beq.n	8006548 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006514:	2b00      	cmp	r3, #0
 8006516:	d017      	beq.n	8006548 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800652a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800652c:	4013      	ands	r3, r2
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006538:	651a      	str	r2, [r3, #80]	; 0x50
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 800653c:	2200      	movs	r2, #0
 800653e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f97d 	bl	8006842 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d016      	beq.n	8006584 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800656c:	651a      	str	r2, [r3, #80]	; 0x50
 800656e:	4b03      	ldr	r3, [pc, #12]	; (800657c <HAL_FDCAN_IRQHandler+0x24c>)
 8006570:	2200      	movs	r2, #0
 8006572:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f97a 	bl	800686e <HAL_FDCAN_RxBufferNewMessageCallback>
 800657a:	e003      	b.n	8006584 <HAL_FDCAN_IRQHandler+0x254>
 800657c:	4000a800 	.word	0x4000a800
 8006580:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d011      	beq.n	80065b6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065a8:	651a      	str	r2, [r3, #80]	; 0x50
 80065aa:	4b8d      	ldr	r3, [pc, #564]	; (80067e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f966 	bl	8006882 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d011      	beq.n	80065e8 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80065da:	651a      	str	r2, [r3, #80]	; 0x50
 80065dc:	4b80      	ldr	r3, [pc, #512]	; (80067e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80065de:	2200      	movs	r2, #0
 80065e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f957 	bl	8006896 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00f      	beq.n	8006624 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800660c:	651a      	str	r2, [r3, #80]	; 0x50
 800660e:	4b74      	ldr	r3, [pc, #464]	; (80067e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800661a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006630:	4b6c      	ldr	r3, [pc, #432]	; (80067e4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006632:	400b      	ands	r3, r1
 8006634:	6513      	str	r3, [r2, #80]	; 0x50
 8006636:	4a6a      	ldr	r2, [pc, #424]	; (80067e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	0f9b      	lsrs	r3, r3, #30
 800663c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800663e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f946 	bl	80068d2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	2b00      	cmp	r3, #0
 800664a:	d011      	beq.n	8006670 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006652:	4b64      	ldr	r3, [pc, #400]	; (80067e4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006654:	400b      	ands	r3, r1
 8006656:	6513      	str	r3, [r2, #80]	; 0x50
 8006658:	4a61      	ldr	r2, [pc, #388]	; (80067e0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	0f9b      	lsrs	r3, r3, #30
 800665e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5c      	ldr	r2, [pc, #368]	; (80067e8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	f040 80a6 	bne.w	80067c8 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 809e 	beq.w	80067c8 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a0:	4013      	ands	r3, r2
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066ae:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	6a3a      	ldr	r2, [r7, #32]
 80066b8:	4013      	ands	r3, r2
 80066ba:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80066c6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	4013      	ands	r3, r2
 80066d2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80066de:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80066f6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4013      	ands	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006710:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f8e7 	bl	80068e8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006728:	6a39      	ldr	r1, [r7, #32]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8e7 	bl	80068fe <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01b      	beq.n	8006776 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d014      	beq.n	8006776 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	0c1b      	lsrs	r3, r3, #16
 8006754:	b29b      	uxth	r3, r3
 8006756:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006762:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2240      	movs	r2, #64	; 0x40
 800676a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	6939      	ldr	r1, [r7, #16]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f8cf 	bl	8006914 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d007      	beq.n	800678c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006784:	69f9      	ldr	r1, [r7, #28]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f8d0 	bl	800692c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f873 	bl	80068be <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80067d8:	bf00      	nop
 80067da:	3748      	adds	r7, #72	; 0x48
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	4000a800 	.word	0x4000a800
 80067e4:	3fcfffff 	.word	0x3fcfffff
 80067e8:	4000a000 	.word	0x4000a000

080067ec <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800695a:	4ba7      	ldr	r3, [pc, #668]	; (8006bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800695c:	4013      	ands	r3, r2
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	0091      	lsls	r1, r2, #2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	430b      	orrs	r3, r1
 8006968:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006974:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	041a      	lsls	r2, r3, #16
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	4413      	add	r3, r2
 8006990:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800699a:	4b97      	ldr	r3, [pc, #604]	; (8006bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800699c:	4013      	ands	r3, r2
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	0091      	lsls	r1, r2, #2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	430b      	orrs	r3, r1
 80069a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069bc:	041a      	lsls	r2, r3, #16
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80069dc:	4b86      	ldr	r3, [pc, #536]	; (8006bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069de:	4013      	ands	r3, r2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	0091      	lsls	r1, r2, #2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	430b      	orrs	r3, r1
 80069ea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	041a      	lsls	r2, r3, #16
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a12:	fb02 f303 	mul.w	r3, r2, r3
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	4413      	add	r3, r2
 8006a1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006a24:	4b74      	ldr	r3, [pc, #464]	; (8006bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	0091      	lsls	r1, r2, #2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	430b      	orrs	r3, r1
 8006a32:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a3e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a46:	041a      	lsls	r2, r3, #16
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006a6c:	4b62      	ldr	r3, [pc, #392]	; (8006bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	0091      	lsls	r1, r2, #2
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a86:	fb02 f303 	mul.w	r3, r2, r3
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006a98:	4b57      	ldr	r3, [pc, #348]	; (8006bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	0091      	lsls	r1, r2, #2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ab2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aba:	041a      	lsls	r2, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	4413      	add	r3, r2
 8006ad0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006ada:	4b47      	ldr	r3, [pc, #284]	; (8006bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	0091      	lsls	r1, r2, #2
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006af4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afc:	041a      	lsls	r2, r3, #16
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b10:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b18:	061a      	lsls	r2, r3, #24
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b28:	4b34      	ldr	r3, [pc, #208]	; (8006bfc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009a      	lsls	r2, r3, #2
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	441a      	add	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	441a      	add	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006b5e:	fb01 f303 	mul.w	r3, r1, r3
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	441a      	add	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006b76:	fb01 f303 	mul.w	r3, r1, r3
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	441a      	add	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	441a      	add	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d915      	bls.n	8006c20 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006bf4:	e006      	b.n	8006c04 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006bf6:	bf00      	nop
 8006bf8:	ffff0003 	.word	0xffff0003
 8006bfc:	10002b00 	.word	0x10002b00
 8006c00:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2203      	movs	r2, #3
 8006c18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e010      	b.n	8006c42 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e005      	b.n	8006c34 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3304      	adds	r3, #4
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d3f3      	bcc.n	8006c28 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop

08006c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c5e:	4b89      	ldr	r3, [pc, #548]	; (8006e84 <HAL_GPIO_Init+0x234>)
 8006c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c62:	e194      	b.n	8006f8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c70:	4013      	ands	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 8186 	beq.w	8006f88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d00b      	beq.n	8006c9c <HAL_GPIO_Init+0x4c>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d007      	beq.n	8006c9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c90:	2b11      	cmp	r3, #17
 8006c92:	d003      	beq.n	8006c9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b12      	cmp	r3, #18
 8006c9a:	d130      	bne.n	8006cfe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	2203      	movs	r2, #3
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	43db      	mvns	r3, r3
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	091b      	lsrs	r3, r3, #4
 8006ce8:	f003 0201 	and.w	r2, r3, #1
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	2203      	movs	r2, #3
 8006d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0e:	43db      	mvns	r3, r3
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	4013      	ands	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d003      	beq.n	8006d3e <HAL_GPIO_Init+0xee>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b12      	cmp	r3, #18
 8006d3c:	d123      	bne.n	8006d86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	08da      	lsrs	r2, r3, #3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3208      	adds	r2, #8
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	220f      	movs	r2, #15
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	43db      	mvns	r3, r3
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	08da      	lsrs	r2, r3, #3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3208      	adds	r2, #8
 8006d80:	69b9      	ldr	r1, [r7, #24]
 8006d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	2203      	movs	r2, #3
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	43db      	mvns	r3, r3
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f003 0203 	and.w	r2, r3, #3
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80e0 	beq.w	8006f88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dc8:	4b2f      	ldr	r3, [pc, #188]	; (8006e88 <HAL_GPIO_Init+0x238>)
 8006dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dce:	4a2e      	ldr	r2, [pc, #184]	; (8006e88 <HAL_GPIO_Init+0x238>)
 8006dd0:	f043 0302 	orr.w	r3, r3, #2
 8006dd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	; (8006e88 <HAL_GPIO_Init+0x238>)
 8006dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006de6:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <HAL_GPIO_Init+0x23c>)
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	089b      	lsrs	r3, r3, #2
 8006dec:	3302      	adds	r3, #2
 8006dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	220f      	movs	r2, #15
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4013      	ands	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <HAL_GPIO_Init+0x240>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d052      	beq.n	8006eb8 <HAL_GPIO_Init+0x268>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a1f      	ldr	r2, [pc, #124]	; (8006e94 <HAL_GPIO_Init+0x244>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d031      	beq.n	8006e7e <HAL_GPIO_Init+0x22e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <HAL_GPIO_Init+0x248>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d02b      	beq.n	8006e7a <HAL_GPIO_Init+0x22a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <HAL_GPIO_Init+0x24c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d025      	beq.n	8006e76 <HAL_GPIO_Init+0x226>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <HAL_GPIO_Init+0x250>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01f      	beq.n	8006e72 <HAL_GPIO_Init+0x222>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <HAL_GPIO_Init+0x254>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d019      	beq.n	8006e6e <HAL_GPIO_Init+0x21e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <HAL_GPIO_Init+0x258>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <HAL_GPIO_Init+0x21a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <HAL_GPIO_Init+0x25c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00d      	beq.n	8006e66 <HAL_GPIO_Init+0x216>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <HAL_GPIO_Init+0x260>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <HAL_GPIO_Init+0x212>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <HAL_GPIO_Init+0x264>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d101      	bne.n	8006e5e <HAL_GPIO_Init+0x20e>
 8006e5a:	2309      	movs	r3, #9
 8006e5c:	e02d      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e5e:	230a      	movs	r3, #10
 8006e60:	e02b      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e62:	2308      	movs	r3, #8
 8006e64:	e029      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e66:	2307      	movs	r3, #7
 8006e68:	e027      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e6a:	2306      	movs	r3, #6
 8006e6c:	e025      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e6e:	2305      	movs	r3, #5
 8006e70:	e023      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e72:	2304      	movs	r3, #4
 8006e74:	e021      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e76:	2303      	movs	r3, #3
 8006e78:	e01f      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e01d      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e01b      	b.n	8006eba <HAL_GPIO_Init+0x26a>
 8006e82:	bf00      	nop
 8006e84:	58000080 	.word	0x58000080
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	58000400 	.word	0x58000400
 8006e90:	58020000 	.word	0x58020000
 8006e94:	58020400 	.word	0x58020400
 8006e98:	58020800 	.word	0x58020800
 8006e9c:	58020c00 	.word	0x58020c00
 8006ea0:	58021000 	.word	0x58021000
 8006ea4:	58021400 	.word	0x58021400
 8006ea8:	58021800 	.word	0x58021800
 8006eac:	58021c00 	.word	0x58021c00
 8006eb0:	58022000 	.word	0x58022000
 8006eb4:	58022400 	.word	0x58022400
 8006eb8:	2300      	movs	r3, #0
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	f002 0203 	and.w	r2, r2, #3
 8006ec0:	0092      	lsls	r2, r2, #2
 8006ec2:	4093      	lsls	r3, r2
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006eca:	4938      	ldr	r1, [pc, #224]	; (8006fac <HAL_GPIO_Init+0x35c>)
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	089b      	lsrs	r3, r3, #2
 8006ed0:	3302      	adds	r3, #2
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	43db      	mvns	r3, r3
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	43db      	mvns	r3, r3
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	43db      	mvns	r3, r3
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f47f ae63 	bne.w	8006c64 <HAL_GPIO_Init+0x14>
  }
}
 8006f9e:	bf00      	nop
 8006fa0:	3724      	adds	r7, #36	; 0x24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	58000400 	.word	0x58000400

08006fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	887b      	ldrh	r3, [r7, #2]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
 8006fcc:	e001      	b.n	8006fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	807b      	strh	r3, [r7, #2]
 8006fec:	4613      	mov	r3, r2
 8006fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ff0:	787b      	ldrb	r3, [r7, #1]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ff6:	887a      	ldrh	r2, [r7, #2]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ffc:	e003      	b.n	8007006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ffe:	887b      	ldrh	r3, [r7, #2]
 8007000:	041a      	lsls	r2, r3, #16
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	619a      	str	r2, [r3, #24]
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695a      	ldr	r2, [r3, #20]
 8007022:	887b      	ldrh	r3, [r7, #2]
 8007024:	401a      	ands	r2, r3
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	429a      	cmp	r2, r3
 800702a:	d104      	bne.n	8007036 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800702c:	887b      	ldrh	r3, [r7, #2]
 800702e:	041a      	lsls	r2, r3, #16
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007034:	e002      	b.n	800703c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007036:	887a      	ldrh	r2, [r7, #2]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	619a      	str	r2, [r3, #24]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007056:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	4013      	ands	r3, r2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d008      	beq.n	8007074 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	4618      	mov	r0, r3
 8007070:	f7fb fd8c 	bl	8002b8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007074:	bf00      	nop
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007084:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800708c:	f043 0302 	orr.w	r3, r3, #2
 8007090:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007094:	4b09      	ldr	r3, [pc, #36]	; (80070bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80070a2:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	4906      	ldr	r1, [pc, #24]	; (80070c0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	58024400 	.word	0x58024400
 80070c0:	58000400 	.word	0x58000400

080070c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c6:	b08f      	sub	sp, #60	; 0x3c
 80070c8:	af0a      	add	r7, sp, #40	; 0x28
 80070ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e116      	b.n	8007304 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d106      	bne.n	80070f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f010 fe4d 	bl	8017d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2203      	movs	r2, #3
 80070fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f009 fe52 	bl	8010dbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	687e      	ldr	r6, [r7, #4]
 8007122:	466d      	mov	r5, sp
 8007124:	f106 0410 	add.w	r4, r6, #16
 8007128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800712a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800712c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800712e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007130:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007134:	e885 0003 	stmia.w	r5, {r0, r1}
 8007138:	1d33      	adds	r3, r6, #4
 800713a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800713c:	6838      	ldr	r0, [r7, #0]
 800713e:	f009 fd29 	bl	8010b94 <USB_CoreInit>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d005      	beq.n	8007154 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e0d7      	b.n	8007304 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f009 fe40 	bl	8010de0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]
 8007164:	e04a      	b.n	80071fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007166:	7bfa      	ldrb	r2, [r7, #15]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	1a9b      	subs	r3, r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	333d      	adds	r3, #61	; 0x3d
 8007176:	2201      	movs	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800717a:	7bfa      	ldrb	r2, [r7, #15]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	333c      	adds	r3, #60	; 0x3c
 800718a:	7bfa      	ldrb	r2, [r7, #15]
 800718c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800718e:	7bfa      	ldrb	r2, [r7, #15]
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	b298      	uxth	r0, r3
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	3342      	adds	r3, #66	; 0x42
 80071a2:	4602      	mov	r2, r0
 80071a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80071a6:	7bfa      	ldrb	r2, [r7, #15]
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	333f      	adds	r3, #63	; 0x3f
 80071b6:	2200      	movs	r2, #0
 80071b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80071ba:	7bfa      	ldrb	r2, [r7, #15]
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	3344      	adds	r3, #68	; 0x44
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071ce:	7bfa      	ldrb	r2, [r7, #15]
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	3348      	adds	r3, #72	; 0x48
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071e2:	7bfa      	ldrb	r2, [r7, #15]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	3350      	adds	r3, #80	; 0x50
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	3301      	adds	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d3af      	bcc.n	8007166 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]
 800720a:	e044      	b.n	8007296 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800720c:	7bfa      	ldrb	r2, [r7, #15]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800721e:	2200      	movs	r2, #0
 8007220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007234:	7bfa      	ldrb	r2, [r7, #15]
 8007236:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007238:	7bfa      	ldrb	r2, [r7, #15]
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800724e:	7bfa      	ldrb	r2, [r7, #15]
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	4613      	mov	r3, r2
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	1a9b      	subs	r3, r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	440b      	add	r3, r1
 800725c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007264:	7bfa      	ldrb	r2, [r7, #15]
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800727a:	7bfa      	ldrb	r2, [r7, #15]
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	1a9b      	subs	r3, r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	3301      	adds	r3, #1
 8007294:	73fb      	strb	r3, [r7, #15]
 8007296:	7bfa      	ldrb	r2, [r7, #15]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	429a      	cmp	r2, r3
 800729e:	d3b5      	bcc.n	800720c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	687e      	ldr	r6, [r7, #4]
 80072a8:	466d      	mov	r5, sp
 80072aa:	f106 0410 	add.w	r4, r6, #16
 80072ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80072be:	1d33      	adds	r3, r6, #4
 80072c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072c2:	6838      	ldr	r0, [r7, #0]
 80072c4:	f009 fdb6 	bl	8010e34 <USB_DevInit>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e014      	b.n	8007304 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d102      	bne.n	80072f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f8be 	bl	8008474 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f00a fdf5 	bl	8011eec <USB_DevDisconnect>

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800730c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_PCD_Start+0x1c>
 8007324:	2302      	movs	r3, #2
 8007326:	e020      	b.n	800736a <HAL_PCD_Start+0x5e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	2b01      	cmp	r3, #1
 8007336:	d109      	bne.n	800734c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800733c:	2b01      	cmp	r3, #1
 800733e:	d005      	beq.n	800734c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	f00a fdb3 	bl	8011ebc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f009 fd1e 	bl	8010d9c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007372:	b590      	push	{r4, r7, lr}
 8007374:	b08d      	sub	sp, #52	; 0x34
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4618      	mov	r0, r3
 800738a:	f00a fe5a 	bl	8012042 <USB_GetMode>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	f040 83ca 	bne.w	8007b2a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f00a fdbe 	bl	8011f1c <USB_ReadInterrupts>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 83c0 	beq.w	8007b28 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f00a fdb5 	bl	8011f1c <USB_ReadInterrupts>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d107      	bne.n	80073cc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695a      	ldr	r2, [r3, #20]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f002 0202 	and.w	r2, r2, #2
 80073ca:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f00a fda3 	bl	8011f1c <USB_ReadInterrupts>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b10      	cmp	r3, #16
 80073de:	d161      	bne.n	80074a4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699a      	ldr	r2, [r3, #24]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0210 	bic.w	r2, r2, #16
 80073ee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	f003 020f 	and.w	r2, r3, #15
 80073fc:	4613      	mov	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	3304      	adds	r3, #4
 800740e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	0c5b      	lsrs	r3, r3, #17
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	2b02      	cmp	r3, #2
 800741a:	d124      	bne.n	8007466 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007422:	4013      	ands	r3, r2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d035      	beq.n	8007494 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	091b      	lsrs	r3, r3, #4
 8007430:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	6a38      	ldr	r0, [r7, #32]
 800743c:	f00a fc1b 	bl	8011c76 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	091b      	lsrs	r3, r3, #4
 8007448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744c:	441a      	add	r2, r3
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800745e:	441a      	add	r2, r3
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	619a      	str	r2, [r3, #24]
 8007464:	e016      	b.n	8007494 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	0c5b      	lsrs	r3, r3, #17
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	2b06      	cmp	r3, #6
 8007470:	d110      	bne.n	8007494 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007478:	2208      	movs	r2, #8
 800747a:	4619      	mov	r1, r3
 800747c:	6a38      	ldr	r0, [r7, #32]
 800747e:	f00a fbfa 	bl	8011c76 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	091b      	lsrs	r3, r3, #4
 800748a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800748e:	441a      	add	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0210 	orr.w	r2, r2, #16
 80074a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f00a fd37 	bl	8011f1c <USB_ReadInterrupts>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074b8:	d16e      	bne.n	8007598 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f00a fd3d 	bl	8011f42 <USB_ReadDevAllOutEpInterrupt>
 80074c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80074ca:	e062      	b.n	8007592 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d057      	beq.n	8007586 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f00a fd62 	bl	8011faa <USB_ReadDevOutEPInterrupt>
 80074e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00c      	beq.n	800750c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fe:	461a      	mov	r2, r3
 8007500:	2301      	movs	r3, #1
 8007502:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fe0a 	bl	8008120 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00c      	beq.n	8007530 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007522:	461a      	mov	r2, r3
 8007524:	2308      	movs	r3, #8
 8007526:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 ff04 	bl	8008338 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f003 0310 	and.w	r3, r3, #16
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007546:	461a      	mov	r2, r3
 8007548:	2310      	movs	r3, #16
 800754a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d008      	beq.n	8007568 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	461a      	mov	r2, r3
 8007564:	2320      	movs	r3, #32
 8007566:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	461a      	mov	r2, r3
 8007580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007584:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	3301      	adds	r3, #1
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	085b      	lsrs	r3, r3, #1
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d199      	bne.n	80074cc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f00a fcbd 	bl	8011f1c <USB_ReadInterrupts>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075ac:	f040 80c0 	bne.w	8007730 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f00a fcde 	bl	8011f76 <USB_ReadDevAllInEpInterrupt>
 80075ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80075c0:	e0b2      	b.n	8007728 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80a7 	beq.w	800771c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f00a fd04 	bl	8011fe6 <USB_ReadDevInEPInterrupt>
 80075de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d057      	beq.n	800769a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	2201      	movs	r2, #1
 80075f2:	fa02 f303 	lsl.w	r3, r2, r3
 80075f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	43db      	mvns	r3, r3
 8007604:	69f9      	ldr	r1, [r7, #28]
 8007606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800760a:	4013      	ands	r3, r2
 800760c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761a:	461a      	mov	r2, r3
 800761c:	2301      	movs	r3, #1
 800761e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d132      	bne.n	800768e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762c:	4613      	mov	r3, r2
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	3348      	adds	r3, #72	; 0x48
 8007638:	6819      	ldr	r1, [r3, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	4613      	mov	r3, r2
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4403      	add	r3, r0
 8007648:	3344      	adds	r3, #68	; 0x44
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4419      	add	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4403      	add	r3, r0
 800765c:	3348      	adds	r3, #72	; 0x48
 800765e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d113      	bne.n	800768e <HAL_PCD_IRQHandler+0x31c>
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	4613      	mov	r3, r2
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	1a9b      	subs	r3, r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	440b      	add	r3, r1
 8007674:	3350      	adds	r3, #80	; 0x50
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d108      	bne.n	800768e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007686:	461a      	mov	r2, r3
 8007688:	2101      	movs	r1, #1
 800768a:	f00a fd0d 	bl	80120a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	b2db      	uxtb	r3, r3
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f010 fbfa 	bl	8017e8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d008      	beq.n	80076b6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	461a      	mov	r2, r3
 80076b2:	2308      	movs	r3, #8
 80076b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	461a      	mov	r2, r3
 80076ce:	2310      	movs	r3, #16
 80076d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e8:	461a      	mov	r2, r3
 80076ea:	2340      	movs	r3, #64	; 0x40
 80076ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	461a      	mov	r2, r3
 8007706:	2302      	movs	r3, #2
 8007708:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fc75 	bl	8008006 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	3301      	adds	r3, #1
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	085b      	lsrs	r3, r3, #1
 8007726:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	2b00      	cmp	r3, #0
 800772c:	f47f af49 	bne.w	80075c2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4618      	mov	r0, r3
 8007736:	f00a fbf1 	bl	8011f1c <USB_ReadInterrupts>
 800773a:	4603      	mov	r3, r0
 800773c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007744:	d122      	bne.n	800778c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007754:	f023 0301 	bic.w	r3, r3, #1
 8007758:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007760:	2b01      	cmp	r3, #1
 8007762:	d108      	bne.n	8007776 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fea4 	bl	80084bc <HAL_PCDEx_LPM_Callback>
 8007774:	e002      	b.n	800777c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f010 fc00 	bl	8017f7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695a      	ldr	r2, [r3, #20]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800778a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f00a fbc3 	bl	8011f1c <USB_ReadInterrupts>
 8007796:	4603      	mov	r3, r0
 8007798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a0:	d112      	bne.n	80077c8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d102      	bne.n	80077b8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f010 fbbc 	bl	8017f30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80077c6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f00a fba5 	bl	8011f1c <USB_ReadInterrupts>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077dc:	d121      	bne.n	8007822 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	695a      	ldr	r2, [r3, #20]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80077ec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d111      	bne.n	800781c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007806:	089b      	lsrs	r3, r3, #2
 8007808:	f003 020f 	and.w	r2, r3, #15
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007812:	2101      	movs	r1, #1
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fe51 	bl	80084bc <HAL_PCDEx_LPM_Callback>
 800781a:	e002      	b.n	8007822 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f010 fb87 	bl	8017f30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f00a fb78 	bl	8011f1c <USB_ReadInterrupts>
 800782c:	4603      	mov	r3, r0
 800782e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007836:	f040 80c7 	bne.w	80079c8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007848:	f023 0301 	bic.w	r3, r3, #1
 800784c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2110      	movs	r1, #16
 8007854:	4618      	mov	r0, r3
 8007856:	f009 fc4b 	bl	80110f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800785a:	2300      	movs	r3, #0
 800785c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800785e:	e056      	b.n	800790e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	461a      	mov	r2, r3
 800786e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007872:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007884:	0151      	lsls	r1, r2, #5
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	440a      	add	r2, r1
 800788a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007892:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	461a      	mov	r2, r3
 80078c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007906:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	3301      	adds	r3, #1
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007914:	429a      	cmp	r2, r3
 8007916:	d3a3      	bcc.n	8007860 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007926:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800792a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007930:	2b00      	cmp	r3, #0
 8007932:	d016      	beq.n	8007962 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007944:	f043 030b 	orr.w	r3, r3, #11
 8007948:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800795a:	f043 030b 	orr.w	r3, r3, #11
 800795e:	6453      	str	r3, [r2, #68]	; 0x44
 8007960:	e015      	b.n	800798e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007968:	695a      	ldr	r2, [r3, #20]
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007970:	4619      	mov	r1, r3
 8007972:	f242 032b 	movw	r3, #8235	; 0x202b
 8007976:	4313      	orrs	r3, r2
 8007978:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007988:	f043 030b 	orr.w	r3, r3, #11
 800798c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800799c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079b2:	461a      	mov	r2, r3
 80079b4:	f00a fb78 	bl	80120a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695a      	ldr	r2, [r3, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80079c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f00a faa5 	bl	8011f1c <USB_ReadInterrupts>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079dc:	d124      	bne.n	8007a28 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f00a fb3c 	bl	8012060 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f009 fbe0 	bl	80111b2 <USB_GetDevSpeed>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681c      	ldr	r4, [r3, #0]
 80079fe:	f001 fdd9 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 8007a02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f009 f923 	bl	8010c58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f010 fa63 	bl	8017ede <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695a      	ldr	r2, [r3, #20]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f00a fa75 	bl	8011f1c <USB_ReadInterrupts>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d10a      	bne.n	8007a52 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f010 fa40 	bl	8017ec2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695a      	ldr	r2, [r3, #20]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f002 0208 	and.w	r2, r2, #8
 8007a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f00a fa60 	bl	8011f1c <USB_ReadInterrupts>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a66:	d10f      	bne.n	8007a88 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f010 faa2 	bl	8017fbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695a      	ldr	r2, [r3, #20]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f00a fa45 	bl	8011f1c <USB_ReadInterrupts>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a9c:	d10f      	bne.n	8007abe <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f010 fa75 	bl	8017f98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695a      	ldr	r2, [r3, #20]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f00a fa2a 	bl	8011f1c <USB_ReadInterrupts>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad2:	d10a      	bne.n	8007aea <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f010 fa83 	bl	8017fe0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f00a fa14 	bl	8011f1c <USB_ReadInterrupts>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d115      	bne.n	8007b2a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f010 fa73 	bl	8017ffc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6859      	ldr	r1, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
 8007b26:	e000      	b.n	8007b2a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007b28:	bf00      	nop
    }
  }
}
 8007b2a:	3734      	adds	r7, #52	; 0x34
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd90      	pop	{r4, r7, pc}

08007b30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_PCD_SetAddress+0x1a>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e013      	b.n	8007b72 <HAL_PCD_SetAddress+0x42>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f00a f984 	bl	8011e70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	4608      	mov	r0, r1
 8007b84:	4611      	mov	r1, r2
 8007b86:	461a      	mov	r2, r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	70fb      	strb	r3, [r7, #3]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	803b      	strh	r3, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da0f      	bge.n	8007bc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	f003 020f 	and.w	r2, r3, #15
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	3338      	adds	r3, #56	; 0x38
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	705a      	strb	r2, [r3, #1]
 8007bbe:	e00f      	b.n	8007be0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	1a9b      	subs	r3, r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007bec:	883a      	ldrh	r2, [r7, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	78ba      	ldrb	r2, [r7, #2]
 8007bf6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d004      	beq.n	8007c0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c0a:	78bb      	ldrb	r3, [r7, #2]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d102      	bne.n	8007c16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_PCD_EP_Open+0xaa>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e00e      	b.n	8007c42 <HAL_PCD_EP_Open+0xc8>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68f9      	ldr	r1, [r7, #12]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f009 fae2 	bl	80111fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007c40:	7afb      	ldrb	r3, [r7, #11]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	da0f      	bge.n	8007c7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	f003 020f 	and.w	r2, r3, #15
 8007c64:	4613      	mov	r3, r2
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	1a9b      	subs	r3, r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	3338      	adds	r3, #56	; 0x38
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	3304      	adds	r3, #4
 8007c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	705a      	strb	r2, [r3, #1]
 8007c7c:	e00f      	b.n	8007c9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	f003 020f 	and.w	r2, r3, #15
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	3304      	adds	r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	f003 030f 	and.w	r3, r3, #15
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_PCD_EP_Close+0x6e>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e00e      	b.n	8007cd6 <HAL_PCD_EP_Close+0x8c>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68f9      	ldr	r1, [r7, #12]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f009 fb20 	bl	801130c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
 8007cea:	460b      	mov	r3, r1
 8007cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cee:	7afb      	ldrb	r3, [r7, #11]
 8007cf0:	f003 020f 	and.w	r2, r3, #15
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	3304      	adds	r3, #4
 8007d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2200      	movs	r2, #0
 8007d18:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d102      	bne.n	8007d3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d3a:	7afb      	ldrb	r3, [r7, #11]
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6818      	ldr	r0, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6979      	ldr	r1, [r7, #20]
 8007d52:	f009 fe03 	bl	801195c <USB_EP0StartXfer>
 8007d56:	e008      	b.n	8007d6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	6979      	ldr	r1, [r7, #20]
 8007d66:	f009 fbad 	bl	80114c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	f003 020f 	and.w	r2, r3, #15
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	460b      	mov	r3, r1
 8007db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007db4:	7afb      	ldrb	r3, [r7, #11]
 8007db6:	f003 020f 	and.w	r2, r3, #15
 8007dba:	4613      	mov	r3, r2
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	3338      	adds	r3, #56	; 0x38
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	3304      	adds	r3, #4
 8007dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2201      	movs	r2, #1
 8007de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d102      	bne.n	8007dfe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	6979      	ldr	r1, [r7, #20]
 8007e16:	f009 fda1 	bl	801195c <USB_EP0StartXfer>
 8007e1a:	e008      	b.n	8007e2e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	6979      	ldr	r1, [r7, #20]
 8007e2a:	f009 fb4b 	bl	80114c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	f003 020f 	and.w	r2, r3, #15
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d901      	bls.n	8007e56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e050      	b.n	8007ef8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	da0f      	bge.n	8007e7e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	f003 020f 	and.w	r2, r3, #15
 8007e64:	4613      	mov	r3, r2
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	3338      	adds	r3, #56	; 0x38
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	3304      	adds	r3, #4
 8007e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	705a      	strb	r2, [r3, #1]
 8007e7c:	e00d      	b.n	8007e9a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	4613      	mov	r3, r2
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	1a9b      	subs	r3, r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	4413      	add	r3, r2
 8007e90:	3304      	adds	r3, #4
 8007e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_PCD_EP_SetStall+0x82>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e01e      	b.n	8007ef8 <HAL_PCD_EP_SetStall+0xc0>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68f9      	ldr	r1, [r7, #12]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f009 fefd 	bl	8011cc8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	b2d9      	uxtb	r1, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f00a f8dd 	bl	80120a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 020f 	and.w	r2, r3, #15
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d901      	bls.n	8007f1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e042      	b.n	8007fa4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da0f      	bge.n	8007f46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	f003 020f 	and.w	r2, r3, #15
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	3338      	adds	r3, #56	; 0x38
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	4413      	add	r3, r2
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2201      	movs	r2, #1
 8007f42:	705a      	strb	r2, [r3, #1]
 8007f44:	e00f      	b.n	8007f66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f46:	78fb      	ldrb	r3, [r7, #3]
 8007f48:	f003 020f 	and.w	r2, r3, #15
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	1a9b      	subs	r3, r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <HAL_PCD_EP_ClrStall+0x86>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e00e      	b.n	8007fa4 <HAL_PCD_EP_ClrStall+0xa4>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f009 ff05 	bl	8011da4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_PCD_EP_Flush+0x1a>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e01b      	b.n	8007ffe <HAL_PCD_EP_Flush+0x52>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da09      	bge.n	8007fea <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	f009 f884 	bl	80110f0 <USB_FlushTxFifo>
 8007fe8:	e004      	b.n	8007ff4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f009 f8a4 	bl	801113c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b08a      	sub	sp, #40	; 0x28
 800800a:	af02      	add	r7, sp, #8
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	4613      	mov	r3, r2
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	3338      	adds	r3, #56	; 0x38
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4413      	add	r3, r2
 800802a:	3304      	adds	r3, #4
 800802c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	429a      	cmp	r2, r3
 8008038:	d901      	bls.n	800803e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e06c      	b.n	8008118 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	695a      	ldr	r2, [r3, #20]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	429a      	cmp	r2, r3
 8008052:	d902      	bls.n	800805a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	3303      	adds	r3, #3
 800805e:	089b      	lsrs	r3, r3, #2
 8008060:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008062:	e02b      	b.n	80080bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	429a      	cmp	r2, r3
 8008078:	d902      	bls.n	8008080 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	3303      	adds	r3, #3
 8008084:	089b      	lsrs	r3, r3, #2
 8008086:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68d9      	ldr	r1, [r3, #12]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	b2da      	uxtb	r2, r3
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008098:	b2db      	uxtb	r3, r3
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	4603      	mov	r3, r0
 800809e:	6978      	ldr	r0, [r7, #20]
 80080a0:	f009 fdb4 	bl	8011c0c <USB_WritePacket>

    ep->xfer_buff  += len;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	441a      	add	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	699a      	ldr	r2, [r3, #24]
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	441a      	add	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d809      	bhi.n	80080e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080da:	429a      	cmp	r2, r3
 80080dc:	d203      	bcs.n	80080e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1be      	bne.n	8008064 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	695a      	ldr	r2, [r3, #20]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d811      	bhi.n	8008116 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f003 030f 	and.w	r3, r3, #15
 80080f8:	2201      	movs	r2, #1
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	43db      	mvns	r3, r3
 800810c:	6939      	ldr	r1, [r7, #16]
 800810e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008112:	4013      	ands	r3, r2
 8008114:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3720      	adds	r7, #32
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	333c      	adds	r3, #60	; 0x3c
 8008138:	3304      	adds	r3, #4
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b01      	cmp	r3, #1
 8008154:	f040 80a0 	bne.w	8008298 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f003 0308 	and.w	r3, r3, #8
 800815e:	2b00      	cmp	r3, #0
 8008160:	d015      	beq.n	800818e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4a72      	ldr	r2, [pc, #456]	; (8008330 <PCD_EP_OutXfrComplete_int+0x210>)
 8008166:	4293      	cmp	r3, r2
 8008168:	f240 80dd 	bls.w	8008326 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80d7 	beq.w	8008326 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008184:	461a      	mov	r2, r3
 8008186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818a:	6093      	str	r3, [r2, #8]
 800818c:	e0cb      	b.n	8008326 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b00      	cmp	r3, #0
 8008196:	d009      	beq.n	80081ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a4:	461a      	mov	r2, r3
 80081a6:	2320      	movs	r3, #32
 80081a8:	6093      	str	r3, [r2, #8]
 80081aa:	e0bc      	b.n	8008326 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 80b7 	bne.w	8008326 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4a5d      	ldr	r2, [pc, #372]	; (8008330 <PCD_EP_OutXfrComplete_int+0x210>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d90f      	bls.n	80081e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d6:	461a      	mov	r2, r3
 80081d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081dc:	6093      	str	r3, [r2, #8]
 80081de:	e0a2      	b.n	8008326 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	4613      	mov	r3, r2
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80081f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	0159      	lsls	r1, r3, #5
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	440b      	add	r3, r1
 80081fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008206:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4403      	add	r3, r0
 8008216:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800821a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4613      	mov	r3, r2
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800822e:	6819      	ldr	r1, [r3, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4403      	add	r3, r0
 800823e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4419      	add	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4403      	add	r3, r0
 8008254:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008258:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d114      	bne.n	800828a <PCD_EP_OutXfrComplete_int+0x16a>
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	4613      	mov	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	1a9b      	subs	r3, r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d108      	bne.n	800828a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008282:	461a      	mov	r2, r3
 8008284:	2101      	movs	r1, #1
 8008286:	f009 ff0f 	bl	80120a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f00f fde1 	bl	8017e58 <HAL_PCD_DataOutStageCallback>
 8008296:	e046      	b.n	8008326 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4a26      	ldr	r2, [pc, #152]	; (8008334 <PCD_EP_OutXfrComplete_int+0x214>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d124      	bne.n	80082ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	461a      	mov	r2, r3
 80082b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082bc:	6093      	str	r3, [r2, #8]
 80082be:	e032      	b.n	8008326 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d008      	beq.n	80082dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d6:	461a      	mov	r2, r3
 80082d8:	2320      	movs	r3, #32
 80082da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f00f fdb8 	bl	8017e58 <HAL_PCD_DataOutStageCallback>
 80082e8:	e01d      	b.n	8008326 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d114      	bne.n	800831a <PCD_EP_OutXfrComplete_int+0x1fa>
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	4613      	mov	r3, r2
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d108      	bne.n	800831a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6818      	ldr	r0, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008312:	461a      	mov	r2, r3
 8008314:	2100      	movs	r1, #0
 8008316:	f009 fec7 	bl	80120a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f00f fd99 	bl	8017e58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	4f54300a 	.word	0x4f54300a
 8008334:	4f54310a 	.word	0x4f54310a

08008338 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	333c      	adds	r3, #60	; 0x3c
 8008350:	3304      	adds	r3, #4
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4a15      	ldr	r2, [pc, #84]	; (80083c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d90e      	bls.n	800838c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008374:	2b00      	cmp	r3, #0
 8008376:	d009      	beq.n	800838c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	4413      	add	r3, r2
 8008380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008384:	461a      	mov	r2, r3
 8008386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800838a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f00f fd51 	bl	8017e34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4a0a      	ldr	r2, [pc, #40]	; (80083c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d90c      	bls.n	80083b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d108      	bne.n	80083b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083ac:	461a      	mov	r2, r3
 80083ae:	2101      	movs	r1, #1
 80083b0:	f009 fe7a 	bl	80120a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	4f54300a 	.word	0x4f54300a

080083c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70fb      	strb	r3, [r7, #3]
 80083d0:	4613      	mov	r3, r2
 80083d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d107      	bne.n	80083f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083e2:	883b      	ldrh	r3, [r7, #0]
 80083e4:	0419      	lsls	r1, r3, #16
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	629a      	str	r2, [r3, #40]	; 0x28
 80083f0:	e028      	b.n	8008444 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	0c1b      	lsrs	r3, r3, #16
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	4413      	add	r3, r2
 80083fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	e00d      	b.n	8008422 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	3340      	adds	r3, #64	; 0x40
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	0c1b      	lsrs	r3, r3, #16
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	4413      	add	r3, r2
 800841a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	3301      	adds	r3, #1
 8008420:	73fb      	strb	r3, [r7, #15]
 8008422:	7bfa      	ldrb	r2, [r7, #15]
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	3b01      	subs	r3, #1
 8008428:	429a      	cmp	r2, r3
 800842a:	d3ec      	bcc.n	8008406 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800842c:	883b      	ldrh	r3, [r7, #0]
 800842e:	0418      	lsls	r0, r3, #16
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6819      	ldr	r1, [r3, #0]
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	3b01      	subs	r3, #1
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	4302      	orrs	r2, r0
 800843c:	3340      	adds	r3, #64	; 0x40
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	460b      	mov	r3, r1
 800845c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	887a      	ldrh	r2, [r7, #2]
 8008464:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	10000003 	.word	0x10000003

080084bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80084d8:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a04      	ldr	r2, [pc, #16]	; (80084f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e2:	6013      	str	r3, [r2, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	58024800 	.word	0x58024800

080084f4 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d069      	beq.n	80085d6 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8008502:	4b38      	ldr	r3, [pc, #224]	; (80085e4 <HAL_PWR_ConfigPVD+0xf0>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4935      	ldr	r1, [pc, #212]	; (80085e4 <HAL_PWR_ConfigPVD+0xf0>)
 8008510:	4313      	orrs	r3, r2
 8008512:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8008514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800851c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008524:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8008528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008538:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800853c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800854c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855a:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8008568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800856c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d009      	beq.n	800859c <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 8008588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800858c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008598:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 80085a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085b6:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d009      	beq.n	80085d8 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 80085c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d2:	6053      	str	r3, [r2, #4]
 80085d4:	e000      	b.n	80085d8 <HAL_PWR_ConfigPVD+0xe4>
    return;
 80085d6:	bf00      	nop
  }
}
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	58024800 	.word	0x58024800

080085e8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 80085ec:	4b05      	ldr	r3, [pc, #20]	; (8008604 <HAL_PWR_EnablePVD+0x1c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a04      	ldr	r2, [pc, #16]	; (8008604 <HAL_PWR_EnablePVD+0x1c>)
 80085f2:	f043 0310 	orr.w	r3, r3, #16
 80085f6:	6013      	str	r3, [r2, #0]
}
 80085f8:	bf00      	nop
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	58024800 	.word	0x58024800

08008608 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008610:	4b19      	ldr	r3, [pc, #100]	; (8008678 <HAL_PWREx_ConfigSupply+0x70>)
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b04      	cmp	r3, #4
 800861a:	d00a      	beq.n	8008632 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800861c:	4b16      	ldr	r3, [pc, #88]	; (8008678 <HAL_PWREx_ConfigSupply+0x70>)
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d001      	beq.n	800862e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e01f      	b.n	800866e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	e01d      	b.n	800866e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008632:	4b11      	ldr	r3, [pc, #68]	; (8008678 <HAL_PWREx_ConfigSupply+0x70>)
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f023 0207 	bic.w	r2, r3, #7
 800863a:	490f      	ldr	r1, [pc, #60]	; (8008678 <HAL_PWREx_ConfigSupply+0x70>)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4313      	orrs	r3, r2
 8008640:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008642:	f7fa ffa7 	bl	8003594 <HAL_GetTick>
 8008646:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008648:	e009      	b.n	800865e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800864a:	f7fa ffa3 	bl	8003594 <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008658:	d901      	bls.n	800865e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e007      	b.n	800866e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800865e:	4b06      	ldr	r3, [pc, #24]	; (8008678 <HAL_PWREx_ConfigSupply+0x70>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800866a:	d1ee      	bne.n	800864a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	58024800 	.word	0x58024800

0800867c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	4a04      	ldr	r2, [pc, #16]	; (8008698 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800868a:	60d3      	str	r3, [r2, #12]
}
 800868c:	bf00      	nop
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	58024800 	.word	0x58024800

0800869c <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80086a0:	4b1b      	ldr	r3, [pc, #108]	; (8008710 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d014      	beq.n	80086d6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80086ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086bc:	d10b      	bne.n	80086d6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 80086be:	f7fa fa75 	bl	8002bac <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 80086c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d014      	beq.n	800870c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 80086e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f2:	d10b      	bne.n	800870c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 80086f4:	f000 f80e 	bl	8008714 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 80086f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 800870c:	bf00      	nop
 800870e:	bd80      	pop	{r7, pc}
 8008710:	58024800 	.word	0x58024800

08008714 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8008718:	bf00      	nop
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
	...

08008724 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08c      	sub	sp, #48	; 0x30
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e3ff      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 8087 	beq.w	8008852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008744:	4b99      	ldr	r3, [pc, #612]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800874e:	4b97      	ldr	r3, [pc, #604]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	2b10      	cmp	r3, #16
 8008758:	d007      	beq.n	800876a <HAL_RCC_OscConfig+0x46>
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	2b18      	cmp	r3, #24
 800875e:	d110      	bne.n	8008782 <HAL_RCC_OscConfig+0x5e>
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	2b02      	cmp	r3, #2
 8008768:	d10b      	bne.n	8008782 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800876a:	4b90      	ldr	r3, [pc, #576]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d06c      	beq.n	8008850 <HAL_RCC_OscConfig+0x12c>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d168      	bne.n	8008850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e3d9      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878a:	d106      	bne.n	800879a <HAL_RCC_OscConfig+0x76>
 800878c:	4b87      	ldr	r3, [pc, #540]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a86      	ldr	r2, [pc, #536]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	e02e      	b.n	80087f8 <HAL_RCC_OscConfig+0xd4>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <HAL_RCC_OscConfig+0x98>
 80087a2:	4b82      	ldr	r3, [pc, #520]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a81      	ldr	r2, [pc, #516]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	4b7f      	ldr	r3, [pc, #508]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a7e      	ldr	r2, [pc, #504]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	e01d      	b.n	80087f8 <HAL_RCC_OscConfig+0xd4>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087c4:	d10c      	bne.n	80087e0 <HAL_RCC_OscConfig+0xbc>
 80087c6:	4b79      	ldr	r3, [pc, #484]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a78      	ldr	r2, [pc, #480]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4b76      	ldr	r3, [pc, #472]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a75      	ldr	r2, [pc, #468]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	e00b      	b.n	80087f8 <HAL_RCC_OscConfig+0xd4>
 80087e0:	4b72      	ldr	r3, [pc, #456]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a71      	ldr	r2, [pc, #452]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	4b6f      	ldr	r3, [pc, #444]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a6e      	ldr	r2, [pc, #440]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80087f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d013      	beq.n	8008828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fa fec8 	bl	8003594 <HAL_GetTick>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008808:	f7fa fec4 	bl	8003594 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b64      	cmp	r3, #100	; 0x64
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e38d      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800881a:	4b64      	ldr	r3, [pc, #400]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0f0      	beq.n	8008808 <HAL_RCC_OscConfig+0xe4>
 8008826:	e014      	b.n	8008852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7fa feb4 	bl	8003594 <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008830:	f7fa feb0 	bl	8003594 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b64      	cmp	r3, #100	; 0x64
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e379      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008842:	4b5a      	ldr	r3, [pc, #360]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x10c>
 800884e:	e000      	b.n	8008852 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 80ae 	beq.w	80089bc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008860:	4b52      	ldr	r3, [pc, #328]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008868:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800886a:	4b50      	ldr	r3, [pc, #320]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d007      	beq.n	8008886 <HAL_RCC_OscConfig+0x162>
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	2b18      	cmp	r3, #24
 800887a:	d13a      	bne.n	80088f2 <HAL_RCC_OscConfig+0x1ce>
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d135      	bne.n	80088f2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008886:	4b49      	ldr	r3, [pc, #292]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_RCC_OscConfig+0x17a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e34b      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800889e:	f7fa fea7 	bl	80035f0 <HAL_GetREVID>
 80088a2:	4602      	mov	r2, r0
 80088a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d817      	bhi.n	80088dc <HAL_RCC_OscConfig+0x1b8>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b40      	cmp	r3, #64	; 0x40
 80088b2:	d108      	bne.n	80088c6 <HAL_RCC_OscConfig+0x1a2>
 80088b4:	4b3d      	ldr	r3, [pc, #244]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088bc:	4a3b      	ldr	r2, [pc, #236]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088c4:	e07a      	b.n	80089bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	031b      	lsls	r3, r3, #12
 80088d4:	4935      	ldr	r1, [pc, #212]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088da:	e06f      	b.n	80089bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088dc:	4b33      	ldr	r3, [pc, #204]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	061b      	lsls	r3, r3, #24
 80088ea:	4930      	ldr	r1, [pc, #192]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088f0:	e064      	b.n	80089bc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d045      	beq.n	8008986 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088fa:	4b2c      	ldr	r3, [pc, #176]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f023 0219 	bic.w	r2, r3, #25
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	4929      	ldr	r1, [pc, #164]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008908:	4313      	orrs	r3, r2
 800890a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800890c:	f7fa fe42 	bl	8003594 <HAL_GetTick>
 8008910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008912:	e008      	b.n	8008926 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008914:	f7fa fe3e 	bl	8003594 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d901      	bls.n	8008926 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e307      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008926:	4b21      	ldr	r3, [pc, #132]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0f0      	beq.n	8008914 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008932:	f7fa fe5d 	bl	80035f0 <HAL_GetREVID>
 8008936:	4602      	mov	r2, r0
 8008938:	f241 0303 	movw	r3, #4099	; 0x1003
 800893c:	429a      	cmp	r2, r3
 800893e:	d817      	bhi.n	8008970 <HAL_RCC_OscConfig+0x24c>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d108      	bne.n	800895a <HAL_RCC_OscConfig+0x236>
 8008948:	4b18      	ldr	r3, [pc, #96]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008950:	4a16      	ldr	r2, [pc, #88]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008956:	6053      	str	r3, [r2, #4]
 8008958:	e030      	b.n	80089bc <HAL_RCC_OscConfig+0x298>
 800895a:	4b14      	ldr	r3, [pc, #80]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	031b      	lsls	r3, r3, #12
 8008968:	4910      	ldr	r1, [pc, #64]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800896a:	4313      	orrs	r3, r2
 800896c:	604b      	str	r3, [r1, #4]
 800896e:	e025      	b.n	80089bc <HAL_RCC_OscConfig+0x298>
 8008970:	4b0e      	ldr	r3, [pc, #56]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	061b      	lsls	r3, r3, #24
 800897e:	490b      	ldr	r1, [pc, #44]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008980:	4313      	orrs	r3, r2
 8008982:	604b      	str	r3, [r1, #4]
 8008984:	e01a      	b.n	80089bc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a08      	ldr	r2, [pc, #32]	; (80089ac <HAL_RCC_OscConfig+0x288>)
 800898c:	f023 0301 	bic.w	r3, r3, #1
 8008990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008992:	f7fa fdff 	bl	8003594 <HAL_GetTick>
 8008996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008998:	e00a      	b.n	80089b0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800899a:	f7fa fdfb 	bl	8003594 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d903      	bls.n	80089b0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e2c4      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
 80089ac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089b0:	4ba4      	ldr	r3, [pc, #656]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1ee      	bne.n	800899a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80a9 	beq.w	8008b1c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089ca:	4b9e      	ldr	r3, [pc, #632]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089d4:	4b9b      	ldr	r3, [pc, #620]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d007      	beq.n	80089f0 <HAL_RCC_OscConfig+0x2cc>
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	2b18      	cmp	r3, #24
 80089e4:	d13a      	bne.n	8008a5c <HAL_RCC_OscConfig+0x338>
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d135      	bne.n	8008a5c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089f0:	4b94      	ldr	r3, [pc, #592]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <HAL_RCC_OscConfig+0x2e4>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	2b80      	cmp	r3, #128	; 0x80
 8008a02:	d001      	beq.n	8008a08 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e296      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a08:	f7fa fdf2 	bl	80035f0 <HAL_GetREVID>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d817      	bhi.n	8008a46 <HAL_RCC_OscConfig+0x322>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	d108      	bne.n	8008a30 <HAL_RCC_OscConfig+0x30c>
 8008a1e:	4b89      	ldr	r3, [pc, #548]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a26:	4a87      	ldr	r2, [pc, #540]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a2e:	e075      	b.n	8008b1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a30:	4b84      	ldr	r3, [pc, #528]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	069b      	lsls	r3, r3, #26
 8008a3e:	4981      	ldr	r1, [pc, #516]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a44:	e06a      	b.n	8008b1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a46:	4b7f      	ldr	r3, [pc, #508]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	061b      	lsls	r3, r3, #24
 8008a54:	497b      	ldr	r1, [pc, #492]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a5a:	e05f      	b.n	8008b1c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d042      	beq.n	8008aea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a64:	4b77      	ldr	r3, [pc, #476]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a76      	ldr	r2, [pc, #472]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a70:	f7fa fd90 	bl	8003594 <HAL_GetTick>
 8008a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a76:	e008      	b.n	8008a8a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a78:	f7fa fd8c 	bl	8003594 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e255      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a8a:	4b6e      	ldr	r3, [pc, #440]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0f0      	beq.n	8008a78 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a96:	f7fa fdab 	bl	80035f0 <HAL_GetREVID>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d817      	bhi.n	8008ad4 <HAL_RCC_OscConfig+0x3b0>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	d108      	bne.n	8008abe <HAL_RCC_OscConfig+0x39a>
 8008aac:	4b65      	ldr	r3, [pc, #404]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ab4:	4a63      	ldr	r2, [pc, #396]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aba:	6053      	str	r3, [r2, #4]
 8008abc:	e02e      	b.n	8008b1c <HAL_RCC_OscConfig+0x3f8>
 8008abe:	4b61      	ldr	r3, [pc, #388]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	069b      	lsls	r3, r3, #26
 8008acc:	495d      	ldr	r1, [pc, #372]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	604b      	str	r3, [r1, #4]
 8008ad2:	e023      	b.n	8008b1c <HAL_RCC_OscConfig+0x3f8>
 8008ad4:	4b5b      	ldr	r3, [pc, #364]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	061b      	lsls	r3, r3, #24
 8008ae2:	4958      	ldr	r1, [pc, #352]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	60cb      	str	r3, [r1, #12]
 8008ae8:	e018      	b.n	8008b1c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008aea:	4b56      	ldr	r3, [pc, #344]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a55      	ldr	r2, [pc, #340]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af6:	f7fa fd4d 	bl	8003594 <HAL_GetTick>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008afe:	f7fa fd49 	bl	8003594 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e212      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b10:	4b4c      	ldr	r3, [pc, #304]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1f0      	bne.n	8008afe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0308 	and.w	r3, r3, #8
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d036      	beq.n	8008b96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d019      	beq.n	8008b64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b30:	4b44      	ldr	r3, [pc, #272]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b34:	4a43      	ldr	r2, [pc, #268]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008b36:	f043 0301 	orr.w	r3, r3, #1
 8008b3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b3c:	f7fa fd2a 	bl	8003594 <HAL_GetTick>
 8008b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b42:	e008      	b.n	8008b56 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b44:	f7fa fd26 	bl	8003594 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e1ef      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b56:	4b3b      	ldr	r3, [pc, #236]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0f0      	beq.n	8008b44 <HAL_RCC_OscConfig+0x420>
 8008b62:	e018      	b.n	8008b96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b64:	4b37      	ldr	r3, [pc, #220]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b68:	4a36      	ldr	r2, [pc, #216]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008b6a:	f023 0301 	bic.w	r3, r3, #1
 8008b6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b70:	f7fa fd10 	bl	8003594 <HAL_GetTick>
 8008b74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b76:	e008      	b.n	8008b8a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b78:	f7fa fd0c 	bl	8003594 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d901      	bls.n	8008b8a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e1d5      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b8a:	4b2e      	ldr	r3, [pc, #184]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1f0      	bne.n	8008b78 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d036      	beq.n	8008c10 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d019      	beq.n	8008bde <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008baa:	4b26      	ldr	r3, [pc, #152]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a25      	ldr	r2, [pc, #148]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bb6:	f7fa fced 	bl	8003594 <HAL_GetTick>
 8008bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bbc:	e008      	b.n	8008bd0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008bbe:	f7fa fce9 	bl	8003594 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e1b2      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bd0:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0f0      	beq.n	8008bbe <HAL_RCC_OscConfig+0x49a>
 8008bdc:	e018      	b.n	8008c10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008bde:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a18      	ldr	r2, [pc, #96]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008be8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bea:	f7fa fcd3 	bl	8003594 <HAL_GetTick>
 8008bee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008bf0:	e008      	b.n	8008c04 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008bf2:	f7fa fccf 	bl	8003594 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d901      	bls.n	8008c04 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e198      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c04:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <HAL_RCC_OscConfig+0x520>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1f0      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 8085 	beq.w	8008d28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c1e:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <HAL_RCC_OscConfig+0x524>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a09      	ldr	r2, [pc, #36]	; (8008c48 <HAL_RCC_OscConfig+0x524>)
 8008c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c2a:	f7fa fcb3 	bl	8003594 <HAL_GetTick>
 8008c2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c30:	e00c      	b.n	8008c4c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c32:	f7fa fcaf 	bl	8003594 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b64      	cmp	r3, #100	; 0x64
 8008c3e:	d905      	bls.n	8008c4c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e178      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
 8008c44:	58024400 	.word	0x58024400
 8008c48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c4c:	4b96      	ldr	r3, [pc, #600]	; (8008ea8 <HAL_RCC_OscConfig+0x784>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0ec      	beq.n	8008c32 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d106      	bne.n	8008c6e <HAL_RCC_OscConfig+0x54a>
 8008c60:	4b92      	ldr	r3, [pc, #584]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c64:	4a91      	ldr	r2, [pc, #580]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008c66:	f043 0301 	orr.w	r3, r3, #1
 8008c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c6c:	e02d      	b.n	8008cca <HAL_RCC_OscConfig+0x5a6>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10c      	bne.n	8008c90 <HAL_RCC_OscConfig+0x56c>
 8008c76:	4b8d      	ldr	r3, [pc, #564]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7a:	4a8c      	ldr	r2, [pc, #560]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	6713      	str	r3, [r2, #112]	; 0x70
 8008c82:	4b8a      	ldr	r3, [pc, #552]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c86:	4a89      	ldr	r2, [pc, #548]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008c88:	f023 0304 	bic.w	r3, r3, #4
 8008c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c8e:	e01c      	b.n	8008cca <HAL_RCC_OscConfig+0x5a6>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b05      	cmp	r3, #5
 8008c96:	d10c      	bne.n	8008cb2 <HAL_RCC_OscConfig+0x58e>
 8008c98:	4b84      	ldr	r3, [pc, #528]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9c:	4a83      	ldr	r2, [pc, #524]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008c9e:	f043 0304 	orr.w	r3, r3, #4
 8008ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca4:	4b81      	ldr	r3, [pc, #516]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca8:	4a80      	ldr	r2, [pc, #512]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008caa:	f043 0301 	orr.w	r3, r3, #1
 8008cae:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb0:	e00b      	b.n	8008cca <HAL_RCC_OscConfig+0x5a6>
 8008cb2:	4b7e      	ldr	r3, [pc, #504]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	4a7d      	ldr	r2, [pc, #500]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cbe:	4b7b      	ldr	r3, [pc, #492]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc2:	4a7a      	ldr	r2, [pc, #488]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008cc4:	f023 0304 	bic.w	r3, r3, #4
 8008cc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d015      	beq.n	8008cfe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd2:	f7fa fc5f 	bl	8003594 <HAL_GetTick>
 8008cd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cd8:	e00a      	b.n	8008cf0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cda:	f7fa fc5b 	bl	8003594 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d901      	bls.n	8008cf0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e122      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cf0:	4b6e      	ldr	r3, [pc, #440]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0ee      	beq.n	8008cda <HAL_RCC_OscConfig+0x5b6>
 8008cfc:	e014      	b.n	8008d28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cfe:	f7fa fc49 	bl	8003594 <HAL_GetTick>
 8008d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d04:	e00a      	b.n	8008d1c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d06:	f7fa fc45 	bl	8003594 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e10c      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d1c:	4b63      	ldr	r3, [pc, #396]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1ee      	bne.n	8008d06 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8101 	beq.w	8008f34 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d32:	4b5e      	ldr	r3, [pc, #376]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d3a:	2b18      	cmp	r3, #24
 8008d3c:	f000 80bc 	beq.w	8008eb8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	f040 8095 	bne.w	8008e74 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d4a:	4b58      	ldr	r3, [pc, #352]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a57      	ldr	r2, [pc, #348]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d56:	f7fa fc1d 	bl	8003594 <HAL_GetTick>
 8008d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d5c:	e008      	b.n	8008d70 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d5e:	f7fa fc19 	bl	8003594 <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d901      	bls.n	8008d70 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e0e2      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d70:	4b4e      	ldr	r3, [pc, #312]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1f0      	bne.n	8008d5e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d7c:	4b4b      	ldr	r3, [pc, #300]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d80:	4b4b      	ldr	r3, [pc, #300]	; (8008eb0 <HAL_RCC_OscConfig+0x78c>)
 8008d82:	4013      	ands	r3, r2
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d8c:	0112      	lsls	r2, r2, #4
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	4946      	ldr	r1, [pc, #280]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	628b      	str	r3, [r1, #40]	; 0x28
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da4:	3b01      	subs	r3, #1
 8008da6:	025b      	lsls	r3, r3, #9
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	3b01      	subs	r3, #1
 8008db2:	041b      	lsls	r3, r3, #16
 8008db4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	061b      	lsls	r3, r3, #24
 8008dc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008dc6:	4939      	ldr	r1, [pc, #228]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008dcc:	4b37      	ldr	r3, [pc, #220]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	4a36      	ldr	r2, [pc, #216]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008dd2:	f023 0301 	bic.w	r3, r3, #1
 8008dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dd8:	4b34      	ldr	r3, [pc, #208]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ddc:	4b35      	ldr	r3, [pc, #212]	; (8008eb4 <HAL_RCC_OscConfig+0x790>)
 8008dde:	4013      	ands	r3, r2
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008de4:	00d2      	lsls	r2, r2, #3
 8008de6:	4931      	ldr	r1, [pc, #196]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008dec:	4b2f      	ldr	r3, [pc, #188]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	f023 020c 	bic.w	r2, r3, #12
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df8:	492c      	ldr	r1, [pc, #176]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008dfe:	4b2b      	ldr	r3, [pc, #172]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	f023 0202 	bic.w	r2, r3, #2
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0a:	4928      	ldr	r1, [pc, #160]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e10:	4b26      	ldr	r3, [pc, #152]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	4a25      	ldr	r2, [pc, #148]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1c:	4b23      	ldr	r3, [pc, #140]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e20:	4a22      	ldr	r2, [pc, #136]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e28:	4b20      	ldr	r3, [pc, #128]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	4a1f      	ldr	r2, [pc, #124]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e34:	4b1d      	ldr	r3, [pc, #116]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	4a1c      	ldr	r2, [pc, #112]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e40:	4b1a      	ldr	r3, [pc, #104]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a19      	ldr	r2, [pc, #100]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4c:	f7fa fba2 	bl	8003594 <HAL_GetTick>
 8008e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e52:	e008      	b.n	8008e66 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e54:	f7fa fb9e 	bl	8003594 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e067      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e66:	4b11      	ldr	r3, [pc, #68]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f0      	beq.n	8008e54 <HAL_RCC_OscConfig+0x730>
 8008e72:	e05f      	b.n	8008f34 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e74:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a0c      	ldr	r2, [pc, #48]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e80:	f7fa fb88 	bl	8003594 <HAL_GetTick>
 8008e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e86:	e008      	b.n	8008e9a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e88:	f7fa fb84 	bl	8003594 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e04d      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e9a:	4b04      	ldr	r3, [pc, #16]	; (8008eac <HAL_RCC_OscConfig+0x788>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1f0      	bne.n	8008e88 <HAL_RCC_OscConfig+0x764>
 8008ea6:	e045      	b.n	8008f34 <HAL_RCC_OscConfig+0x810>
 8008ea8:	58024800 	.word	0x58024800
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	fffffc0c 	.word	0xfffffc0c
 8008eb4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008eb8:	4b21      	ldr	r3, [pc, #132]	; (8008f40 <HAL_RCC_OscConfig+0x81c>)
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ebe:	4b20      	ldr	r3, [pc, #128]	; (8008f40 <HAL_RCC_OscConfig+0x81c>)
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d031      	beq.n	8008f30 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f003 0203 	and.w	r2, r3, #3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d12a      	bne.n	8008f30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	091b      	lsrs	r3, r3, #4
 8008ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d122      	bne.n	8008f30 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d11a      	bne.n	8008f30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	0a5b      	lsrs	r3, r3, #9
 8008efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d111      	bne.n	8008f30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	0c1b      	lsrs	r3, r3, #16
 8008f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d108      	bne.n	8008f30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	0e1b      	lsrs	r3, r3, #24
 8008f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d001      	beq.n	8008f34 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e000      	b.n	8008f36 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3730      	adds	r7, #48	; 0x30
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	58024400 	.word	0x58024400

08008f44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e19c      	b.n	8009292 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f58:	4b8a      	ldr	r3, [pc, #552]	; (8009184 <HAL_RCC_ClockConfig+0x240>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 030f 	and.w	r3, r3, #15
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d910      	bls.n	8008f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f66:	4b87      	ldr	r3, [pc, #540]	; (8009184 <HAL_RCC_ClockConfig+0x240>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f023 020f 	bic.w	r2, r3, #15
 8008f6e:	4985      	ldr	r1, [pc, #532]	; (8009184 <HAL_RCC_ClockConfig+0x240>)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f76:	4b83      	ldr	r3, [pc, #524]	; (8009184 <HAL_RCC_ClockConfig+0x240>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d001      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e184      	b.n	8009292 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d010      	beq.n	8008fb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	4b7b      	ldr	r3, [pc, #492]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d908      	bls.n	8008fb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fa4:	4b78      	ldr	r3, [pc, #480]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	4975      	ldr	r1, [pc, #468]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0308 	and.w	r3, r3, #8
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d010      	beq.n	8008fe4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	695a      	ldr	r2, [r3, #20]
 8008fc6:	4b70      	ldr	r3, [pc, #448]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d908      	bls.n	8008fe4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008fd2:	4b6d      	ldr	r3, [pc, #436]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	496a      	ldr	r1, [pc, #424]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d010      	beq.n	8009012 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	4b64      	ldr	r3, [pc, #400]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d908      	bls.n	8009012 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009000:	4b61      	ldr	r3, [pc, #388]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	495e      	ldr	r1, [pc, #376]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 800900e:	4313      	orrs	r3, r2
 8009010:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d010      	beq.n	8009040 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	69da      	ldr	r2, [r3, #28]
 8009022:	4b59      	ldr	r3, [pc, #356]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800902a:	429a      	cmp	r2, r3
 800902c:	d908      	bls.n	8009040 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800902e:	4b56      	ldr	r3, [pc, #344]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	4953      	ldr	r1, [pc, #332]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 800903c:	4313      	orrs	r3, r2
 800903e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d010      	beq.n	800906e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	4b4d      	ldr	r3, [pc, #308]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	f003 030f 	and.w	r3, r3, #15
 8009058:	429a      	cmp	r2, r3
 800905a:	d908      	bls.n	800906e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800905c:	4b4a      	ldr	r3, [pc, #296]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f023 020f 	bic.w	r2, r3, #15
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	4947      	ldr	r1, [pc, #284]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 800906a:	4313      	orrs	r3, r2
 800906c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d055      	beq.n	8009126 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800907a:	4b43      	ldr	r3, [pc, #268]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	4940      	ldr	r1, [pc, #256]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009088:	4313      	orrs	r3, r2
 800908a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d107      	bne.n	80090a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009094:	4b3c      	ldr	r3, [pc, #240]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d121      	bne.n	80090e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e0f6      	b.n	8009292 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d107      	bne.n	80090bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090ac:	4b36      	ldr	r3, [pc, #216]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d115      	bne.n	80090e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e0ea      	b.n	8009292 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d107      	bne.n	80090d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090c4:	4b30      	ldr	r3, [pc, #192]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d109      	bne.n	80090e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e0de      	b.n	8009292 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090d4:	4b2c      	ldr	r3, [pc, #176]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e0d6      	b.n	8009292 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090e4:	4b28      	ldr	r3, [pc, #160]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f023 0207 	bic.w	r2, r3, #7
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4925      	ldr	r1, [pc, #148]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f6:	f7fa fa4d 	bl	8003594 <HAL_GetTick>
 80090fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090fc:	e00a      	b.n	8009114 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090fe:	f7fa fa49 	bl	8003594 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	f241 3288 	movw	r2, #5000	; 0x1388
 800910c:	4293      	cmp	r3, r2
 800910e:	d901      	bls.n	8009114 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e0be      	b.n	8009292 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009114:	4b1c      	ldr	r3, [pc, #112]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	429a      	cmp	r2, r3
 8009124:	d1eb      	bne.n	80090fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d010      	beq.n	8009154 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	429a      	cmp	r2, r3
 8009140:	d208      	bcs.n	8009154 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009142:	4b11      	ldr	r3, [pc, #68]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	f023 020f 	bic.w	r2, r3, #15
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	490e      	ldr	r1, [pc, #56]	; (8009188 <HAL_RCC_ClockConfig+0x244>)
 8009150:	4313      	orrs	r3, r2
 8009152:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009154:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <HAL_RCC_ClockConfig+0x240>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d214      	bcs.n	800918c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009162:	4b08      	ldr	r3, [pc, #32]	; (8009184 <HAL_RCC_ClockConfig+0x240>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f023 020f 	bic.w	r2, r3, #15
 800916a:	4906      	ldr	r1, [pc, #24]	; (8009184 <HAL_RCC_ClockConfig+0x240>)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	4313      	orrs	r3, r2
 8009170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009172:	4b04      	ldr	r3, [pc, #16]	; (8009184 <HAL_RCC_ClockConfig+0x240>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 030f 	and.w	r3, r3, #15
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d005      	beq.n	800918c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e086      	b.n	8009292 <HAL_RCC_ClockConfig+0x34e>
 8009184:	52002000 	.word	0x52002000
 8009188:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d010      	beq.n	80091ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	4b3f      	ldr	r3, [pc, #252]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d208      	bcs.n	80091ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091a8:	4b3c      	ldr	r3, [pc, #240]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	4939      	ldr	r1, [pc, #228]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d010      	beq.n	80091e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695a      	ldr	r2, [r3, #20]
 80091ca:	4b34      	ldr	r3, [pc, #208]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d208      	bcs.n	80091e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091d6:	4b31      	ldr	r3, [pc, #196]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	492e      	ldr	r1, [pc, #184]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0310 	and.w	r3, r3, #16
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d010      	beq.n	8009216 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	4b28      	ldr	r3, [pc, #160]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009200:	429a      	cmp	r2, r3
 8009202:	d208      	bcs.n	8009216 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009204:	4b25      	ldr	r3, [pc, #148]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	4922      	ldr	r1, [pc, #136]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 8009212:	4313      	orrs	r3, r2
 8009214:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	d010      	beq.n	8009244 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	69da      	ldr	r2, [r3, #28]
 8009226:	4b1d      	ldr	r3, [pc, #116]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800922e:	429a      	cmp	r2, r3
 8009230:	d208      	bcs.n	8009244 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009232:	4b1a      	ldr	r3, [pc, #104]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	4917      	ldr	r1, [pc, #92]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 8009240:	4313      	orrs	r3, r2
 8009242:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009244:	f000 f844 	bl	80092d0 <HAL_RCC_GetSysClockFreq>
 8009248:	4601      	mov	r1, r0
 800924a:	4b14      	ldr	r3, [pc, #80]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	0a1b      	lsrs	r3, r3, #8
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	4a12      	ldr	r2, [pc, #72]	; (80092a0 <HAL_RCC_ClockConfig+0x35c>)
 8009256:	5cd3      	ldrb	r3, [r2, r3]
 8009258:	f003 031f 	and.w	r3, r3, #31
 800925c:	fa21 f303 	lsr.w	r3, r1, r3
 8009260:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009262:	4b0e      	ldr	r3, [pc, #56]	; (800929c <HAL_RCC_ClockConfig+0x358>)
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	4a0d      	ldr	r2, [pc, #52]	; (80092a0 <HAL_RCC_ClockConfig+0x35c>)
 800926c:	5cd3      	ldrb	r3, [r2, r3]
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	fa22 f303 	lsr.w	r3, r2, r3
 8009278:	4a0a      	ldr	r2, [pc, #40]	; (80092a4 <HAL_RCC_ClockConfig+0x360>)
 800927a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800927c:	4a0a      	ldr	r2, [pc, #40]	; (80092a8 <HAL_RCC_ClockConfig+0x364>)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009282:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <HAL_RCC_ClockConfig+0x368>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7fa f93a 	bl	8003500 <HAL_InitTick>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	58024400 	.word	0x58024400
 80092a0:	08019eac 	.word	0x08019eac
 80092a4:	24000010 	.word	0x24000010
 80092a8:	2400000c 	.word	0x2400000c
 80092ac:	24000014 	.word	0x24000014

080092b0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80092b4:	4b05      	ldr	r3, [pc, #20]	; (80092cc <HAL_RCC_EnableCSS+0x1c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a04      	ldr	r2, [pc, #16]	; (80092cc <HAL_RCC_EnableCSS+0x1c>)
 80092ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092be:	6013      	str	r3, [r2, #0]
}
 80092c0:	bf00      	nop
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	58024400 	.word	0x58024400

080092d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b089      	sub	sp, #36	; 0x24
 80092d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092d6:	4baf      	ldr	r3, [pc, #700]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092de:	2b18      	cmp	r3, #24
 80092e0:	f200 814e 	bhi.w	8009580 <HAL_RCC_GetSysClockFreq+0x2b0>
 80092e4:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80092e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ea:	bf00      	nop
 80092ec:	08009351 	.word	0x08009351
 80092f0:	08009581 	.word	0x08009581
 80092f4:	08009581 	.word	0x08009581
 80092f8:	08009581 	.word	0x08009581
 80092fc:	08009581 	.word	0x08009581
 8009300:	08009581 	.word	0x08009581
 8009304:	08009581 	.word	0x08009581
 8009308:	08009581 	.word	0x08009581
 800930c:	08009377 	.word	0x08009377
 8009310:	08009581 	.word	0x08009581
 8009314:	08009581 	.word	0x08009581
 8009318:	08009581 	.word	0x08009581
 800931c:	08009581 	.word	0x08009581
 8009320:	08009581 	.word	0x08009581
 8009324:	08009581 	.word	0x08009581
 8009328:	08009581 	.word	0x08009581
 800932c:	0800937d 	.word	0x0800937d
 8009330:	08009581 	.word	0x08009581
 8009334:	08009581 	.word	0x08009581
 8009338:	08009581 	.word	0x08009581
 800933c:	08009581 	.word	0x08009581
 8009340:	08009581 	.word	0x08009581
 8009344:	08009581 	.word	0x08009581
 8009348:	08009581 	.word	0x08009581
 800934c:	08009383 	.word	0x08009383
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009350:	4b90      	ldr	r3, [pc, #576]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800935c:	4b8d      	ldr	r3, [pc, #564]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	08db      	lsrs	r3, r3, #3
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	4a8c      	ldr	r2, [pc, #560]	; (8009598 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800936e:	e10a      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009370:	4b89      	ldr	r3, [pc, #548]	; (8009598 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8009372:	61bb      	str	r3, [r7, #24]
    break;
 8009374:	e107      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009376:	4b89      	ldr	r3, [pc, #548]	; (800959c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009378:	61bb      	str	r3, [r7, #24]
    break;
 800937a:	e104      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800937c:	4b88      	ldr	r3, [pc, #544]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800937e:	61bb      	str	r3, [r7, #24]
    break;
 8009380:	e101      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009382:	4b84      	ldr	r3, [pc, #528]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800938c:	4b81      	ldr	r3, [pc, #516]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	091b      	lsrs	r3, r3, #4
 8009392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009396:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009398:	4b7e      	ldr	r3, [pc, #504]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800939a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093a2:	4b7c      	ldr	r3, [pc, #496]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80da 	beq.w	800957a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d05a      	beq.n	8009482 <HAL_RCC_GetSysClockFreq+0x1b2>
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d302      	bcc.n	80093d6 <HAL_RCC_GetSysClockFreq+0x106>
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d078      	beq.n	80094c6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80093d4:	e099      	b.n	800950a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d6:	4b6f      	ldr	r3, [pc, #444]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d02d      	beq.n	800943e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093e2:	4b6c      	ldr	r3, [pc, #432]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	08db      	lsrs	r3, r3, #3
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	4a6a      	ldr	r2, [pc, #424]	; (8009598 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940c:	4b61      	ldr	r3, [pc, #388]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009414:	ee07 3a90 	vmov	s15, r3
 8009418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009420:	eddf 5a60 	vldr	s11, [pc, #384]	; 80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009438:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800943c:	e087      	b.n	800954e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	ee07 3a90 	vmov	s15, r3
 8009444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009448:	eddf 6a57 	vldr	s13, [pc, #348]	; 80095a8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800944c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009450:	4b50      	ldr	r3, [pc, #320]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009458:	ee07 3a90 	vmov	s15, r3
 800945c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009460:	ed97 6a02 	vldr	s12, [r7, #8]
 8009464:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009480:	e065      	b.n	800954e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	ee07 3a90 	vmov	s15, r3
 8009488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948c:	eddf 6a47 	vldr	s13, [pc, #284]	; 80095ac <HAL_RCC_GetSysClockFreq+0x2dc>
 8009490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009494:	4b3f      	ldr	r3, [pc, #252]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80094a8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80094ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c4:	e043      	b.n	800954e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	ee07 3a90 	vmov	s15, r3
 80094cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80095b0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80094d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d8:	4b2e      	ldr	r3, [pc, #184]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80094da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80094ec:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80094f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009504:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009508:	e021      	b.n	800954e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	ee07 3a90 	vmov	s15, r3
 8009510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009514:	eddf 6a25 	vldr	s13, [pc, #148]	; 80095ac <HAL_RCC_GetSysClockFreq+0x2dc>
 8009518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951c:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800951e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009530:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80095a4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009548:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800954c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800954e:	4b11      	ldr	r3, [pc, #68]	; (8009594 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	0a5b      	lsrs	r3, r3, #9
 8009554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009558:	3301      	adds	r3, #1
 800955a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009566:	edd7 6a07 	vldr	s13, [r7, #28]
 800956a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800956e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009572:	ee17 3a90 	vmov	r3, s15
 8009576:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009578:	e005      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	61bb      	str	r3, [r7, #24]
    break;
 800957e:	e002      	b.n	8009586 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8009580:	4b06      	ldr	r3, [pc, #24]	; (800959c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8009582:	61bb      	str	r3, [r7, #24]
    break;
 8009584:	bf00      	nop
  }

  return sysclockfreq;
 8009586:	69bb      	ldr	r3, [r7, #24]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3724      	adds	r7, #36	; 0x24
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	58024400 	.word	0x58024400
 8009598:	03d09000 	.word	0x03d09000
 800959c:	003d0900 	.word	0x003d0900
 80095a0:	017d7840 	.word	0x017d7840
 80095a4:	46000000 	.word	0x46000000
 80095a8:	4c742400 	.word	0x4c742400
 80095ac:	4a742400 	.word	0x4a742400
 80095b0:	4bbebc20 	.word	0x4bbebc20

080095b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095ba:	f7ff fe89 	bl	80092d0 <HAL_RCC_GetSysClockFreq>
 80095be:	4601      	mov	r1, r0
 80095c0:	4b10      	ldr	r3, [pc, #64]	; (8009604 <HAL_RCC_GetHCLKFreq+0x50>)
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	0a1b      	lsrs	r3, r3, #8
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	4a0f      	ldr	r2, [pc, #60]	; (8009608 <HAL_RCC_GetHCLKFreq+0x54>)
 80095cc:	5cd3      	ldrb	r3, [r2, r3]
 80095ce:	f003 031f 	and.w	r3, r3, #31
 80095d2:	fa21 f303 	lsr.w	r3, r1, r3
 80095d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <HAL_RCC_GetHCLKFreq+0x50>)
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	4a09      	ldr	r2, [pc, #36]	; (8009608 <HAL_RCC_GetHCLKFreq+0x54>)
 80095e2:	5cd3      	ldrb	r3, [r2, r3]
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	fa22 f303 	lsr.w	r3, r2, r3
 80095ee:	4a07      	ldr	r2, [pc, #28]	; (800960c <HAL_RCC_GetHCLKFreq+0x58>)
 80095f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095f2:	4a07      	ldr	r2, [pc, #28]	; (8009610 <HAL_RCC_GetHCLKFreq+0x5c>)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095f8:	4b04      	ldr	r3, [pc, #16]	; (800960c <HAL_RCC_GetHCLKFreq+0x58>)
 80095fa:	681b      	ldr	r3, [r3, #0]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	58024400 	.word	0x58024400
 8009608:	08019eac 	.word	0x08019eac
 800960c:	24000010 	.word	0x24000010
 8009610:	2400000c 	.word	0x2400000c

08009614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009618:	f7ff ffcc 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 800961c:	4601      	mov	r1, r0
 800961e:	4b06      	ldr	r3, [pc, #24]	; (8009638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	091b      	lsrs	r3, r3, #4
 8009624:	f003 0307 	and.w	r3, r3, #7
 8009628:	4a04      	ldr	r2, [pc, #16]	; (800963c <HAL_RCC_GetPCLK1Freq+0x28>)
 800962a:	5cd3      	ldrb	r3, [r2, r3]
 800962c:	f003 031f 	and.w	r3, r3, #31
 8009630:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009634:	4618      	mov	r0, r3
 8009636:	bd80      	pop	{r7, pc}
 8009638:	58024400 	.word	0x58024400
 800963c:	08019eac 	.word	0x08019eac

08009640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009644:	f7ff ffb6 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 8009648:	4601      	mov	r1, r0
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	f003 0307 	and.w	r3, r3, #7
 8009654:	4a04      	ldr	r2, [pc, #16]	; (8009668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009656:	5cd3      	ldrb	r3, [r2, r3]
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009660:	4618      	mov	r0, r3
 8009662:	bd80      	pop	{r7, pc}
 8009664:	58024400 	.word	0x58024400
 8009668:	08019eac 	.word	0x08019eac

0800966c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800967c:	d105      	bne.n	800968a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800967e:	f000 f809 	bl	8009694 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009682:	4b03      	ldr	r3, [pc, #12]	; (8009690 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009688:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800968a:	bf00      	nop
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	58024400 	.word	0x58024400

08009694 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
	...

080096a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096ac:	2300      	movs	r3, #0
 80096ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096b0:	2300      	movs	r3, #0
 80096b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d03d      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096c8:	d013      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80096ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ce:	d802      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80096d4:	e01f      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80096d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096da:	d013      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80096dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096e0:	d01c      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80096e2:	e018      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e4:	4baf      	ldr	r3, [pc, #700]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4aae      	ldr	r2, [pc, #696]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80096ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80096f0:	e015      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2102      	movs	r1, #2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fd33 	bl	800b164 <RCCEx_PLL2_Config>
 80096fe:	4603      	mov	r3, r0
 8009700:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009702:	e00c      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3324      	adds	r3, #36	; 0x24
 8009708:	2102      	movs	r1, #2
 800970a:	4618      	mov	r0, r3
 800970c:	f001 fddc 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009710:	4603      	mov	r3, r0
 8009712:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009714:	e003      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	75fb      	strb	r3, [r7, #23]
      break;
 800971a:	e000      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800971c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d109      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009724:	4b9f      	ldr	r3, [pc, #636]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009730:	499c      	ldr	r1, [pc, #624]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009732:	4313      	orrs	r3, r2
 8009734:	650b      	str	r3, [r1, #80]	; 0x50
 8009736:	e001      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009744:	2b00      	cmp	r3, #0
 8009746:	d03d      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974c:	2b04      	cmp	r3, #4
 800974e:	d826      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009750:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	0800976d 	.word	0x0800976d
 800975c:	0800977b 	.word	0x0800977b
 8009760:	0800978d 	.word	0x0800978d
 8009764:	080097a5 	.word	0x080097a5
 8009768:	080097a5 	.word	0x080097a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800976c:	4b8d      	ldr	r3, [pc, #564]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800976e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009770:	4a8c      	ldr	r2, [pc, #560]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009778:	e015      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3304      	adds	r3, #4
 800977e:	2100      	movs	r1, #0
 8009780:	4618      	mov	r0, r3
 8009782:	f001 fcef 	bl	800b164 <RCCEx_PLL2_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800978a:	e00c      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3324      	adds	r3, #36	; 0x24
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f001 fd98 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009798:	4603      	mov	r3, r0
 800979a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800979c:	e003      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
      break;
 80097a2:	e000      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80097a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d109      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097ac:	4b7d      	ldr	r3, [pc, #500]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b0:	f023 0207 	bic.w	r2, r3, #7
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b8:	497a      	ldr	r1, [pc, #488]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	650b      	str	r3, [r1, #80]	; 0x50
 80097be:	e001      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d03e      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d4:	2b80      	cmp	r3, #128	; 0x80
 80097d6:	d01c      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80097d8:	2b80      	cmp	r3, #128	; 0x80
 80097da:	d804      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80097e0:	2b40      	cmp	r3, #64	; 0x40
 80097e2:	d00d      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80097e4:	e01e      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80097e6:	2bc0      	cmp	r3, #192	; 0xc0
 80097e8:	d01f      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80097ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ee:	d01e      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80097f0:	e018      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097f2:	4b6c      	ldr	r3, [pc, #432]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f6:	4a6b      	ldr	r2, [pc, #428]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80097f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80097fe:	e017      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3304      	adds	r3, #4
 8009804:	2100      	movs	r1, #0
 8009806:	4618      	mov	r0, r3
 8009808:	f001 fcac 	bl	800b164 <RCCEx_PLL2_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009810:	e00e      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3324      	adds	r3, #36	; 0x24
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f001 fd55 	bl	800b2c8 <RCCEx_PLL3_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009822:	e005      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	75fb      	strb	r3, [r7, #23]
      break;
 8009828:	e002      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800982a:	bf00      	nop
 800982c:	e000      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800982e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009836:	4b5b      	ldr	r3, [pc, #364]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800983a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009842:	4958      	ldr	r1, [pc, #352]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009844:	4313      	orrs	r3, r2
 8009846:	650b      	str	r3, [r1, #80]	; 0x50
 8009848:	e001      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009856:	2b00      	cmp	r3, #0
 8009858:	d044      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009864:	d01f      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800986a:	d805      	bhi.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00a      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009874:	d00e      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8009876:	e01f      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8009878:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800987c:	d01f      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800987e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009882:	d01e      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009884:	e018      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009886:	4b47      	ldr	r3, [pc, #284]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	4a46      	ldr	r2, [pc, #280]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800988c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009890:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009892:	e017      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3304      	adds	r3, #4
 8009898:	2100      	movs	r1, #0
 800989a:	4618      	mov	r0, r3
 800989c:	f001 fc62 	bl	800b164 <RCCEx_PLL2_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80098a4:	e00e      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3324      	adds	r3, #36	; 0x24
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 fd0b 	bl	800b2c8 <RCCEx_PLL3_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80098b6:	e005      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	75fb      	strb	r3, [r7, #23]
      break;
 80098bc:	e002      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80098be:	bf00      	nop
 80098c0:	e000      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80098c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10a      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80098ca:	4b36      	ldr	r3, [pc, #216]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ce:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098d8:	4932      	ldr	r1, [pc, #200]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	658b      	str	r3, [r1, #88]	; 0x58
 80098de:	e001      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d044      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098fa:	d01f      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80098fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009900:	d805      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00a      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8009906:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800990a:	d00e      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800990c:	e01f      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800990e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009912:	d01f      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009918:	d01e      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800991a:	e018      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800991c:	4b21      	ldr	r3, [pc, #132]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009920:	4a20      	ldr	r2, [pc, #128]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009928:	e017      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3304      	adds	r3, #4
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f001 fc17 	bl	800b164 <RCCEx_PLL2_Config>
 8009936:	4603      	mov	r3, r0
 8009938:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800993a:	e00e      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3324      	adds	r3, #36	; 0x24
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f001 fcc0 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009948:	4603      	mov	r3, r0
 800994a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800994c:	e005      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	75fb      	strb	r3, [r7, #23]
      break;
 8009952:	e002      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009954:	bf00      	nop
 8009956:	e000      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009960:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009964:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800996e:	490d      	ldr	r1, [pc, #52]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009970:	4313      	orrs	r3, r2
 8009972:	658b      	str	r3, [r1, #88]	; 0x58
 8009974:	e001      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d035      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800998a:	2b10      	cmp	r3, #16
 800998c:	d00c      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800998e:	2b10      	cmp	r3, #16
 8009990:	d802      	bhi.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d01b      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8009996:	e017      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009998:	2b20      	cmp	r3, #32
 800999a:	d00c      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800999c:	2b30      	cmp	r3, #48	; 0x30
 800999e:	d018      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80099a0:	e012      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80099a2:	bf00      	nop
 80099a4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a8:	4baf      	ldr	r3, [pc, #700]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	4aae      	ldr	r2, [pc, #696]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099b4:	e00e      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3304      	adds	r3, #4
 80099ba:	2102      	movs	r1, #2
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 fbd1 	bl	800b164 <RCCEx_PLL2_Config>
 80099c2:	4603      	mov	r3, r0
 80099c4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80099c6:	e005      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	75fb      	strb	r3, [r7, #23]
      break;
 80099cc:	e002      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80099ce:	bf00      	nop
 80099d0:	e000      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80099d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099da:	4ba3      	ldr	r3, [pc, #652]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099e6:	49a0      	ldr	r1, [pc, #640]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80099ec:	e001      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d042      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a06:	d01f      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8009a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a0c:	d805      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00a      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a16:	d00e      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009a18:	e01f      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8009a1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a1e:	d01f      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a24:	d01e      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009a26:	e018      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a28:	4b8f      	ldr	r3, [pc, #572]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	4a8e      	ldr	r2, [pc, #568]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a34:	e017      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 fb91 	bl	800b164 <RCCEx_PLL2_Config>
 8009a42:	4603      	mov	r3, r0
 8009a44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a46:	e00e      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3324      	adds	r3, #36	; 0x24
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 fc3a 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009a58:	e005      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a5e:	e002      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009a60:	bf00      	nop
 8009a62:	e000      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a66:	7dfb      	ldrb	r3, [r7, #23]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d109      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a6c:	4b7e      	ldr	r3, [pc, #504]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a78:	497b      	ldr	r1, [pc, #492]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8009a7e:	e001      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d042      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a98:	d01b      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a9e:	d805      	bhi.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d022      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa8:	d00a      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009aaa:	e01b      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ab0:	d01d      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ab6:	d01c      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009ab8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009abc:	d01b      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009abe:	e011      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f001 fb4c 	bl	800b164 <RCCEx_PLL2_Config>
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ad0:	e012      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3324      	adds	r3, #36	; 0x24
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 fbf5 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ae2:	e009      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae8:	e006      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009aea:	bf00      	nop
 8009aec:	e004      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009aee:	bf00      	nop
 8009af0:	e002      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009af2:	bf00      	nop
 8009af4:	e000      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d109      	bne.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009afe:	4b5a      	ldr	r3, [pc, #360]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b02:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b0a:	4957      	ldr	r1, [pc, #348]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	650b      	str	r3, [r1, #80]	; 0x50
 8009b10:	e001      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d044      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b2c:	d01b      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b32:	d805      	bhi.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d022      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b3c:	d00a      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009b3e:	e01b      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b44:	d01d      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b4a:	d01c      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009b4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b50:	d01b      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009b52:	e011      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3304      	adds	r3, #4
 8009b58:	2101      	movs	r1, #1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 fb02 	bl	800b164 <RCCEx_PLL2_Config>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b64:	e012      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3324      	adds	r3, #36	; 0x24
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f001 fbab 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009b76:	e009      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b7c:	e006      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b7e:	bf00      	nop
 8009b80:	e004      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b82:	bf00      	nop
 8009b84:	e002      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b86:	bf00      	nop
 8009b88:	e000      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b92:	4b35      	ldr	r3, [pc, #212]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ba0:	4931      	ldr	r1, [pc, #196]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	658b      	str	r3, [r1, #88]	; 0x58
 8009ba6:	e001      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d02d      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc0:	d005      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc6:	d009      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d013      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009bcc:	e00f      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bce:	4b26      	ldr	r3, [pc, #152]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	4a25      	ldr	r2, [pc, #148]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009bda:	e00c      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3304      	adds	r3, #4
 8009be0:	2101      	movs	r1, #1
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 fabe 	bl	800b164 <RCCEx_PLL2_Config>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009bec:	e003      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf2:	e000      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d109      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009bfc:	4b1a      	ldr	r3, [pc, #104]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c08:	4917      	ldr	r1, [pc, #92]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	650b      	str	r3, [r1, #80]	; 0x50
 8009c0e:	e001      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d035      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d81b      	bhi.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009c28:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8009c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2e:	bf00      	nop
 8009c30:	08009c6d 	.word	0x08009c6d
 8009c34:	08009c41 	.word	0x08009c41
 8009c38:	08009c4f 	.word	0x08009c4f
 8009c3c:	08009c6d 	.word	0x08009c6d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c40:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	4a08      	ldr	r2, [pc, #32]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c4c:	e00f      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3304      	adds	r3, #4
 8009c52:	2102      	movs	r1, #2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 fa85 	bl	800b164 <RCCEx_PLL2_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009c5e:	e006      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	75fb      	strb	r3, [r7, #23]
      break;
 8009c64:	e003      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009c66:	bf00      	nop
 8009c68:	58024400 	.word	0x58024400
      break;
 8009c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d109      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c74:	4bba      	ldr	r3, [pc, #744]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c78:	f023 0203 	bic.w	r2, r3, #3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c80:	49b7      	ldr	r1, [pc, #732]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c86:	e001      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8086 	beq.w	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c9a:	4bb2      	ldr	r3, [pc, #712]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4ab1      	ldr	r2, [pc, #708]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ca6:	f7f9 fc75 	bl	8003594 <HAL_GetTick>
 8009caa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cac:	e009      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cae:	f7f9 fc71 	bl	8003594 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b64      	cmp	r3, #100	; 0x64
 8009cba:	d902      	bls.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	75fb      	strb	r3, [r7, #23]
        break;
 8009cc0:	e005      	b.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cc2:	4ba8      	ldr	r3, [pc, #672]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d0ef      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d166      	bne.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009cd4:	4ba2      	ldr	r3, [pc, #648]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cde:	4053      	eors	r3, r2
 8009ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d013      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ce8:	4b9d      	ldr	r3, [pc, #628]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009cf2:	4b9b      	ldr	r3, [pc, #620]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf6:	4a9a      	ldr	r2, [pc, #616]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cfc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cfe:	4b98      	ldr	r3, [pc, #608]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d02:	4a97      	ldr	r2, [pc, #604]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d0a:	4a95      	ldr	r2, [pc, #596]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1a:	d115      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d1c:	f7f9 fc3a 	bl	8003594 <HAL_GetTick>
 8009d20:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d22:	e00b      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d24:	f7f9 fc36 	bl	8003594 <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d902      	bls.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	75fb      	strb	r3, [r7, #23]
            break;
 8009d3a:	e005      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d3c:	4b88      	ldr	r3, [pc, #544]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d40:	f003 0302 	and.w	r3, r3, #2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0ed      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d126      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d5c:	d10d      	bne.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009d5e:	4b80      	ldr	r3, [pc, #512]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d6c:	0919      	lsrs	r1, r3, #4
 8009d6e:	4b7e      	ldr	r3, [pc, #504]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009d70:	400b      	ands	r3, r1
 8009d72:	497b      	ldr	r1, [pc, #492]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	610b      	str	r3, [r1, #16]
 8009d78:	e005      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009d7a:	4b79      	ldr	r3, [pc, #484]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	4a78      	ldr	r2, [pc, #480]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d84:	6113      	str	r3, [r2, #16]
 8009d86:	4b76      	ldr	r3, [pc, #472]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d94:	4972      	ldr	r1, [pc, #456]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	670b      	str	r3, [r1, #112]	; 0x70
 8009d9a:	e004      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	75bb      	strb	r3, [r7, #22]
 8009da0:	e001      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d07d      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009db6:	2b28      	cmp	r3, #40	; 0x28
 8009db8:	d866      	bhi.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009dba:	a201      	add	r2, pc, #4	; (adr r2, 8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc0:	08009e8f 	.word	0x08009e8f
 8009dc4:	08009e89 	.word	0x08009e89
 8009dc8:	08009e89 	.word	0x08009e89
 8009dcc:	08009e89 	.word	0x08009e89
 8009dd0:	08009e89 	.word	0x08009e89
 8009dd4:	08009e89 	.word	0x08009e89
 8009dd8:	08009e89 	.word	0x08009e89
 8009ddc:	08009e89 	.word	0x08009e89
 8009de0:	08009e65 	.word	0x08009e65
 8009de4:	08009e89 	.word	0x08009e89
 8009de8:	08009e89 	.word	0x08009e89
 8009dec:	08009e89 	.word	0x08009e89
 8009df0:	08009e89 	.word	0x08009e89
 8009df4:	08009e89 	.word	0x08009e89
 8009df8:	08009e89 	.word	0x08009e89
 8009dfc:	08009e89 	.word	0x08009e89
 8009e00:	08009e77 	.word	0x08009e77
 8009e04:	08009e89 	.word	0x08009e89
 8009e08:	08009e89 	.word	0x08009e89
 8009e0c:	08009e89 	.word	0x08009e89
 8009e10:	08009e89 	.word	0x08009e89
 8009e14:	08009e89 	.word	0x08009e89
 8009e18:	08009e89 	.word	0x08009e89
 8009e1c:	08009e89 	.word	0x08009e89
 8009e20:	08009e8f 	.word	0x08009e8f
 8009e24:	08009e89 	.word	0x08009e89
 8009e28:	08009e89 	.word	0x08009e89
 8009e2c:	08009e89 	.word	0x08009e89
 8009e30:	08009e89 	.word	0x08009e89
 8009e34:	08009e89 	.word	0x08009e89
 8009e38:	08009e89 	.word	0x08009e89
 8009e3c:	08009e89 	.word	0x08009e89
 8009e40:	08009e8f 	.word	0x08009e8f
 8009e44:	08009e89 	.word	0x08009e89
 8009e48:	08009e89 	.word	0x08009e89
 8009e4c:	08009e89 	.word	0x08009e89
 8009e50:	08009e89 	.word	0x08009e89
 8009e54:	08009e89 	.word	0x08009e89
 8009e58:	08009e89 	.word	0x08009e89
 8009e5c:	08009e89 	.word	0x08009e89
 8009e60:	08009e8f 	.word	0x08009e8f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	2101      	movs	r1, #1
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 f97a 	bl	800b164 <RCCEx_PLL2_Config>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e74:	e00c      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3324      	adds	r3, #36	; 0x24
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 fa23 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009e82:	4603      	mov	r3, r0
 8009e84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009e86:	e003      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8c:	e000      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d109      	bne.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e96:	4b32      	ldr	r3, [pc, #200]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ea2:	492f      	ldr	r1, [pc, #188]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	654b      	str	r3, [r1, #84]	; 0x54
 8009ea8:	e001      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0302 	and.w	r3, r3, #2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d037      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ebe:	2b05      	cmp	r3, #5
 8009ec0:	d820      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009ec2:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009f0b 	.word	0x08009f0b
 8009ecc:	08009ee1 	.word	0x08009ee1
 8009ed0:	08009ef3 	.word	0x08009ef3
 8009ed4:	08009f0b 	.word	0x08009f0b
 8009ed8:	08009f0b 	.word	0x08009f0b
 8009edc:	08009f0b 	.word	0x08009f0b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 f93c 	bl	800b164 <RCCEx_PLL2_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009ef0:	e00c      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3324      	adds	r3, #36	; 0x24
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 f9e5 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009efe:	4603      	mov	r3, r0
 8009f00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009f02:	e003      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	75fb      	strb	r3, [r7, #23]
      break;
 8009f08:	e000      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f12:	4b13      	ldr	r3, [pc, #76]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f16:	f023 0207 	bic.w	r2, r3, #7
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f1e:	4910      	ldr	r1, [pc, #64]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009f20:	4313      	orrs	r3, r2
 8009f22:	654b      	str	r3, [r1, #84]	; 0x54
 8009f24:	e001      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d040      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f3c:	2b05      	cmp	r3, #5
 8009f3e:	d827      	bhi.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009f40:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f46:	bf00      	nop
 8009f48:	08009f97 	.word	0x08009f97
 8009f4c:	08009f6d 	.word	0x08009f6d
 8009f50:	08009f7f 	.word	0x08009f7f
 8009f54:	08009f97 	.word	0x08009f97
 8009f58:	08009f97 	.word	0x08009f97
 8009f5c:	08009f97 	.word	0x08009f97
 8009f60:	58024400 	.word	0x58024400
 8009f64:	58024800 	.word	0x58024800
 8009f68:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	2101      	movs	r1, #1
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 f8f6 	bl	800b164 <RCCEx_PLL2_Config>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f7c:	e00c      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3324      	adds	r3, #36	; 0x24
 8009f82:	2101      	movs	r1, #1
 8009f84:	4618      	mov	r0, r3
 8009f86:	f001 f99f 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009f8e:	e003      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	75fb      	strb	r3, [r7, #23]
      break;
 8009f94:	e000      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10a      	bne.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f9e:	4bb2      	ldr	r3, [pc, #712]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa2:	f023 0207 	bic.w	r2, r3, #7
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fac:	49ae      	ldr	r1, [pc, #696]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8009fb2:	e001      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0320 	and.w	r3, r3, #32
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d044      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fce:	d01b      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fd4:	d805      	bhi.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d022      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fde:	d00a      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009fe0:	e01b      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe6:	d01d      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fec:	d01c      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009fee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ff2:	d01b      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009ff4:	e011      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 f8b1 	bl	800b164 <RCCEx_PLL2_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a006:	e012      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3324      	adds	r3, #36	; 0x24
 800a00c:	2102      	movs	r1, #2
 800a00e:	4618      	mov	r0, r3
 800a010:	f001 f95a 	bl	800b2c8 <RCCEx_PLL3_Config>
 800a014:	4603      	mov	r3, r0
 800a016:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a018:	e009      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	75fb      	strb	r3, [r7, #23]
      break;
 800a01e:	e006      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a020:	bf00      	nop
 800a022:	e004      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a024:	bf00      	nop
 800a026:	e002      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a028:	bf00      	nop
 800a02a:	e000      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800a02c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a034:	4b8c      	ldr	r3, [pc, #560]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a038:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a042:	4989      	ldr	r1, [pc, #548]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a044:	4313      	orrs	r3, r2
 800a046:	654b      	str	r3, [r1, #84]	; 0x54
 800a048:	e001      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a056:	2b00      	cmp	r3, #0
 800a058:	d044      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a064:	d01b      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a06a:	d805      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d022      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a074:	d00a      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800a076:	e01b      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a07c:	d01d      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a07e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a082:	d01c      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800a084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a088:	d01b      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a08a:	e011      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3304      	adds	r3, #4
 800a090:	2100      	movs	r1, #0
 800a092:	4618      	mov	r0, r3
 800a094:	f001 f866 	bl	800b164 <RCCEx_PLL2_Config>
 800a098:	4603      	mov	r3, r0
 800a09a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a09c:	e012      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3324      	adds	r3, #36	; 0x24
 800a0a2:	2102      	movs	r1, #2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f001 f90f 	bl	800b2c8 <RCCEx_PLL3_Config>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a0ae:	e009      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b4:	e006      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0b6:	bf00      	nop
 800a0b8:	e004      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0ba:	bf00      	nop
 800a0bc:	e002      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0be:	bf00      	nop
 800a0c0:	e000      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800a0c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0ca:	4b67      	ldr	r3, [pc, #412]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0d8:	4963      	ldr	r1, [pc, #396]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	658b      	str	r3, [r1, #88]	; 0x58
 800a0de:	e001      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d044      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0fa:	d01b      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800a0fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a100:	d805      	bhi.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d022      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a10a:	d00a      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a10c:	e01b      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800a10e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a112:	d01d      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a114:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a118:	d01c      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a11a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a11e:	d01b      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800a120:	e011      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3304      	adds	r3, #4
 800a126:	2100      	movs	r1, #0
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 f81b 	bl	800b164 <RCCEx_PLL2_Config>
 800a12e:	4603      	mov	r3, r0
 800a130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a132:	e012      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3324      	adds	r3, #36	; 0x24
 800a138:	2102      	movs	r1, #2
 800a13a:	4618      	mov	r0, r3
 800a13c:	f001 f8c4 	bl	800b2c8 <RCCEx_PLL3_Config>
 800a140:	4603      	mov	r3, r0
 800a142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a144:	e009      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
      break;
 800a14a:	e006      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a14c:	bf00      	nop
 800a14e:	e004      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a154:	bf00      	nop
 800a156:	e000      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800a158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a160:	4b41      	ldr	r3, [pc, #260]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a164:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a16e:	493e      	ldr	r1, [pc, #248]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a170:	4313      	orrs	r3, r2
 800a172:	658b      	str	r3, [r1, #88]	; 0x58
 800a174:	e001      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0308 	and.w	r3, r3, #8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01a      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a190:	d10a      	bne.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3324      	adds	r3, #36	; 0x24
 800a196:	2102      	movs	r1, #2
 800a198:	4618      	mov	r0, r3
 800a19a:	f001 f895 	bl	800b2c8 <RCCEx_PLL3_Config>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a1a8:	4b2f      	ldr	r3, [pc, #188]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1b6:	492c      	ldr	r1, [pc, #176]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01a      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d2:	d10a      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3324      	adds	r3, #36	; 0x24
 800a1d8:	2102      	movs	r1, #2
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 f874 	bl	800b2c8 <RCCEx_PLL3_Config>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1ea:	4b1f      	ldr	r3, [pc, #124]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1f8:	491b      	ldr	r1, [pc, #108]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d032      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a214:	d00d      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800a216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a21a:	d016      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d111      	bne.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3304      	adds	r3, #4
 800a224:	2100      	movs	r1, #0
 800a226:	4618      	mov	r0, r3
 800a228:	f000 ff9c 	bl	800b164 <RCCEx_PLL2_Config>
 800a22c:	4603      	mov	r3, r0
 800a22e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a230:	e00c      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3324      	adds	r3, #36	; 0x24
 800a236:	2102      	movs	r1, #2
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 f845 	bl	800b2c8 <RCCEx_PLL3_Config>
 800a23e:	4603      	mov	r3, r0
 800a240:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a242:	e003      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	75fb      	strb	r3, [r7, #23]
      break;
 800a248:	e000      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800a24a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10c      	bne.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a252:	4b05      	ldr	r3, [pc, #20]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a260:	4901      	ldr	r1, [pc, #4]	; (800a268 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800a262:	4313      	orrs	r3, r2
 800a264:	658b      	str	r3, [r1, #88]	; 0x58
 800a266:	e003      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800a268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d02f      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a286:	d00c      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a28c:	d015      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800a28e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a292:	d10f      	bne.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a294:	4b79      	ldr	r3, [pc, #484]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	4a78      	ldr	r2, [pc, #480]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a29a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a29e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a2a0:	e00c      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3324      	adds	r3, #36	; 0x24
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f001 f80d 	bl	800b2c8 <RCCEx_PLL3_Config>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a2b2:	e003      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b8:	e000      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800a2ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2c2:	4b6e      	ldr	r3, [pc, #440]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2d0:	496a      	ldr	r1, [pc, #424]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	654b      	str	r3, [r1, #84]	; 0x54
 800a2d6:	e001      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d029      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800a2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f4:	d007      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a2f6:	e00f      	b.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f8:	4b60      	ldr	r3, [pc, #384]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	4a5f      	ldr	r2, [pc, #380]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a2fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a302:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a304:	e00b      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3304      	adds	r3, #4
 800a30a:	2102      	movs	r1, #2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 ff29 	bl	800b164 <RCCEx_PLL2_Config>
 800a312:	4603      	mov	r3, r0
 800a314:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a316:	e002      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	75fb      	strb	r3, [r7, #23]
      break;
 800a31c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d109      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a324:	4b55      	ldr	r3, [pc, #340]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a328:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a330:	4952      	ldr	r1, [pc, #328]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a332:	4313      	orrs	r3, r2
 800a334:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a336:	e001      	b.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a338:	7dfb      	ldrb	r3, [r7, #23]
 800a33a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00a      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3324      	adds	r3, #36	; 0x24
 800a34c:	2102      	movs	r1, #2
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 ffba 	bl	800b2c8 <RCCEx_PLL3_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d02f      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a372:	d00c      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a378:	d802      	bhi.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d011      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800a37e:	e00d      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800a380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a384:	d00f      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800a386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a38a:	d00e      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800a38c:	e006      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a38e:	4b3b      	ldr	r3, [pc, #236]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	4a3a      	ldr	r2, [pc, #232]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a398:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a39a:	e007      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a0:	e004      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a3a2:	bf00      	nop
 800a3a4:	e002      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a3a6:	bf00      	nop
 800a3a8:	e000      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800a3aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3b2:	4b32      	ldr	r3, [pc, #200]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3be:	492f      	ldr	r1, [pc, #188]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	654b      	str	r3, [r1, #84]	; 0x54
 800a3c4:	e001      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3d6:	4b29      	ldr	r3, [pc, #164]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e2:	4926      	ldr	r1, [pc, #152]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d009      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a3f4:	4b21      	ldr	r3, [pc, #132]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a402:	491e      	ldr	r1, [pc, #120]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a404:	4313      	orrs	r3, r2
 800a406:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d008      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a414:	4b19      	ldr	r3, [pc, #100]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a418:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a420:	4916      	ldr	r1, [pc, #88]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a422:	4313      	orrs	r3, r2
 800a424:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00d      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a432:	4b12      	ldr	r3, [pc, #72]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	4a11      	ldr	r2, [pc, #68]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a43c:	6113      	str	r3, [r2, #16]
 800a43e:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a440:	691a      	ldr	r2, [r3, #16]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a448:	490c      	ldr	r1, [pc, #48]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	da08      	bge.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a45a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a462:	4906      	ldr	r1, [pc, #24]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800a464:	4313      	orrs	r3, r2
 800a466:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800a468:	7dbb      	ldrb	r3, [r7, #22]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	e000      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	58024400 	.word	0x58024400

0800a480 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b090      	sub	sp, #64	; 0x40
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48e:	d150      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a490:	4ba1      	ldr	r3, [pc, #644]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a494:	f003 0307 	and.w	r3, r3, #7
 800a498:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d844      	bhi.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800a4a0:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a6:	bf00      	nop
 800a4a8:	0800a4bd 	.word	0x0800a4bd
 800a4ac:	0800a4cd 	.word	0x0800a4cd
 800a4b0:	0800a4dd 	.word	0x0800a4dd
 800a4b4:	0800a525 	.word	0x0800a525
 800a4b8:	0800a4ed 	.word	0x0800a4ed
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fd03 	bl	800aecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ca:	e241      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4cc:	f107 0318 	add.w	r3, r7, #24
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fa63 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4da:	e239      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4dc:	f107 030c 	add.w	r3, r7, #12
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 fba7 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4ea:	e231      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4ec:	4b8a      	ldr	r3, [pc, #552]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a4ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d102      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a4fc:	4b87      	ldr	r3, [pc, #540]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a500:	e226      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a508:	d102      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a50a:	4b85      	ldr	r3, [pc, #532]	; (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a50e:	e21f      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a516:	d102      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a518:	4b82      	ldr	r3, [pc, #520]	; (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a51a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a51c:	e218      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a522:	e215      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a524:	4b80      	ldr	r3, [pc, #512]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a528:	e212      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a52e:	bf00      	nop
 800a530:	e20e      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a538:	d14f      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a53a:	4b77      	ldr	r3, [pc, #476]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a53e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a542:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	2b80      	cmp	r3, #128	; 0x80
 800a548:	d01c      	beq.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a54a:	2b80      	cmp	r3, #128	; 0x80
 800a54c:	d804      	bhi.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d008      	beq.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a552:	2b40      	cmp	r3, #64	; 0x40
 800a554:	d00e      	beq.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a556:	e03c      	b.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a558:	2bc0      	cmp	r3, #192	; 0xc0
 800a55a:	d037      	beq.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a55c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a560:	d018      	beq.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a562:	e036      	b.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fcaf 	bl	800aecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a572:	e1ed      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a574:	f107 0318 	add.w	r3, r7, #24
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 fa0f 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a582:	e1e5      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a584:	f107 030c 	add.w	r3, r7, #12
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 fb53 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a592:	e1dd      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a594:	4b60      	ldr	r3, [pc, #384]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a59c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d102      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a5a4:	4b5d      	ldr	r3, [pc, #372]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a5a8:	e1d2      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5b0:	d102      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a5b2:	4b5b      	ldr	r3, [pc, #364]	; (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b6:	e1cb      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5be:	d102      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a5c0:	4b58      	ldr	r3, [pc, #352]	; (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5c4:	e1c4      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ca:	e1c1      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5cc:	4b56      	ldr	r3, [pc, #344]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d0:	e1be      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d6:	bf00      	nop
 800a5d8:	e1ba      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5e0:	d153      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a5e2:	4b4d      	ldr	r3, [pc, #308]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a5ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5f2:	d01f      	beq.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a5f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5f8:	d805      	bhi.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a5fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a602:	d00f      	beq.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a604:	e03d      	b.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a606:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a60a:	d037      	beq.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a60c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a610:	d018      	beq.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a612:	e036      	b.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fc57 	bl	800aecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a622:	e195      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a624:	f107 0318 	add.w	r3, r7, #24
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 f9b7 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a632:	e18d      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a634:	f107 030c 	add.w	r3, r7, #12
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fafb 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a642:	e185      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a644:	4b34      	ldr	r3, [pc, #208]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a64c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a654:	4b31      	ldr	r3, [pc, #196]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a656:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a658:	e17a      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a660:	d102      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a662:	4b2f      	ldr	r3, [pc, #188]	; (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a666:	e173      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a66e:	d102      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a670:	4b2c      	ldr	r3, [pc, #176]	; (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a674:	e16c      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a67a:	e169      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a67c:	4b2a      	ldr	r3, [pc, #168]	; (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a680:	e166      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a686:	bf00      	nop
 800a688:	e162      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a690:	d15d      	bne.n	800a74e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a692:	4b21      	ldr	r3, [pc, #132]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a696:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a69a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6a2:	d01f      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a6a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6a8:	d805      	bhi.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a6ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6b2:	d00f      	beq.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a6b4:	e047      	b.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a6b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6ba:	d041      	beq.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a6bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6c0:	d018      	beq.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a6c2:	e040      	b.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fbff 	bl	800aecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6d2:	e13d      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d4:	f107 0318 	add.w	r3, r7, #24
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 f95f 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e2:	e135      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6e4:	f107 030c 	add.w	r3, r7, #12
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 faa3 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f2:	e12d      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a6f4:	4b08      	ldr	r3, [pc, #32]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6fc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a704:	4b05      	ldr	r3, [pc, #20]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a708:	e122      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a710:	d10c      	bne.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a712:	4b03      	ldr	r3, [pc, #12]	; (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a716:	e11b      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a718:	58024400 	.word	0x58024400
 800a71c:	03d09000 	.word	0x03d09000
 800a720:	003d0900 	.word	0x003d0900
 800a724:	017d7840 	.word	0x017d7840
 800a728:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a732:	d102      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a734:	4b89      	ldr	r3, [pc, #548]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a736:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a738:	e10a      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a73e:	e107      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a740:	4b87      	ldr	r3, [pc, #540]	; (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a744:	e104      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a74a:	bf00      	nop
 800a74c:	e100      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a754:	d153      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a756:	4b83      	ldr	r3, [pc, #524]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a75a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a75e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a766:	d01f      	beq.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a76c:	d805      	bhi.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a776:	d00f      	beq.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a778:	e03d      	b.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a77a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a77e:	d037      	beq.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a784:	d018      	beq.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a786:	e036      	b.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 fb9d 	bl	800aecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a796:	e0db      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a798:	f107 0318 	add.w	r3, r7, #24
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 f8fd 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7a6:	e0d3      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a8:	f107 030c 	add.w	r3, r7, #12
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fa41 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7b6:	e0cb      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7b8:	4b6a      	ldr	r3, [pc, #424]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a7ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d102      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a7c8:	4b67      	ldr	r3, [pc, #412]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a7cc:	e0c0      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7d4:	d102      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a7d6:	4b65      	ldr	r3, [pc, #404]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7da:	e0b9      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7e2:	d102      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a7e4:	4b5d      	ldr	r3, [pc, #372]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e8:	e0b2      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ee:	e0af      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7f0:	4b5b      	ldr	r3, [pc, #364]	; (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f4:	e0ac      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7fa:	bf00      	nop
 800a7fc:	e0a8      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a804:	d13d      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a806:	4b57      	ldr	r3, [pc, #348]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a80e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a816:	d00c      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a81c:	d011      	beq.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d12b      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a822:	f107 0318 	add.w	r3, r7, #24
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f8b8 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a830:	e08e      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a832:	f107 030c 	add.w	r3, r7, #12
 800a836:	4618      	mov	r0, r3
 800a838:	f000 f9fc 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a840:	e086      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a842:	4b48      	ldr	r3, [pc, #288]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a84a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d102      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a852:	4b45      	ldr	r3, [pc, #276]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a856:	e07b      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a85e:	d102      	bne.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a860:	4b42      	ldr	r3, [pc, #264]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a864:	e074      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a86c:	d102      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a86e:	4b3b      	ldr	r3, [pc, #236]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a872:	e06d      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a878:	e06a      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a87e:	bf00      	nop
 800a880:	e066      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a888:	d11f      	bne.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a88a:	4b36      	ldr	r3, [pc, #216]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a892:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a896:	2b00      	cmp	r3, #0
 800a898:	d003      	beq.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a89a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a89e:	d008      	beq.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a8a0:	e00f      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 fb10 	bl	800aecc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b0:	e04e      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b2:	f107 0318 	add.w	r3, r7, #24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 f870 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8c0:	e046      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8c6:	bf00      	nop
 800a8c8:	e042      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8d0:	d13c      	bne.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a8d2:	4b24      	ldr	r3, [pc, #144]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a8da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e2:	d01e      	beq.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a8e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e8:	d805      	bhi.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00d      	beq.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a8ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8f2:	d00e      	beq.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a8f4:	e026      	b.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a8f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fa:	d01d      	beq.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a8fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a900:	d01d      	beq.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a906:	d014      	beq.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a908:	e01c      	b.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a90a:	f000 f831 	bl	800a970 <HAL_RCCEx_GetD3PCLK1Freq>
 800a90e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a910:	e01e      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a912:	f107 0318 	add.w	r3, r7, #24
 800a916:	4618      	mov	r0, r3
 800a918:	f000 f840 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a920:	e016      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a922:	f107 030c 	add.w	r3, r7, #12
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f984 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a930:	e00e      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a932:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a936:	e00b      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a938:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a93a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a93c:	e008      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a93e:	4b07      	ldr	r3, [pc, #28]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a942:	e005      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a948:	bf00      	nop
 800a94a:	e001      	b.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a952:	4618      	mov	r0, r3
 800a954:	3740      	adds	r7, #64	; 0x40
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	017d7840 	.word	0x017d7840
 800a960:	00bb8000 	.word	0x00bb8000
 800a964:	58024400 	.word	0x58024400
 800a968:	03d09000 	.word	0x03d09000
 800a96c:	003d0900 	.word	0x003d0900

0800a970 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a974:	f7fe fe1e 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 800a978:	4601      	mov	r1, r0
 800a97a:	4b06      	ldr	r3, [pc, #24]	; (800a994 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	091b      	lsrs	r3, r3, #4
 800a980:	f003 0307 	and.w	r3, r3, #7
 800a984:	4a04      	ldr	r2, [pc, #16]	; (800a998 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a986:	5cd3      	ldrb	r3, [r2, r3]
 800a988:	f003 031f 	and.w	r3, r3, #31
 800a98c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a990:	4618      	mov	r0, r3
 800a992:	bd80      	pop	{r7, pc}
 800a994:	58024400 	.word	0x58024400
 800a998:	08019eac 	.word	0x08019eac

0800a99c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b089      	sub	sp, #36	; 0x24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9a4:	4b9d      	ldr	r3, [pc, #628]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a8:	f003 0303 	and.w	r3, r3, #3
 800a9ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a9ae:	4b9b      	ldr	r3, [pc, #620]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b2:	0b1b      	lsrs	r3, r3, #12
 800a9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9ba:	4b98      	ldr	r3, [pc, #608]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9be:	091b      	lsrs	r3, r3, #4
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a9c6:	4b95      	ldr	r3, [pc, #596]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ca:	08db      	lsrs	r3, r3, #3
 800a9cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	fb02 f303 	mul.w	r3, r2, r3
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 810a 	beq.w	800abfe <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d05a      	beq.n	800aaa6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d302      	bcc.n	800a9fa <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d078      	beq.n	800aaea <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a9f8:	e099      	b.n	800ab2e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9fa:	4b88      	ldr	r3, [pc, #544]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0320 	and.w	r3, r3, #32
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02d      	beq.n	800aa62 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa06:	4b85      	ldr	r3, [pc, #532]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	08db      	lsrs	r3, r3, #3
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	4a83      	ldr	r2, [pc, #524]	; (800ac20 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800aa12:	fa22 f303 	lsr.w	r3, r2, r3
 800aa16:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	ee07 3a90 	vmov	s15, r3
 800aa28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa30:	4b7a      	ldr	r3, [pc, #488]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa40:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa44:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aa48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa60:	e087      	b.n	800ab72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	ee07 3a90 	vmov	s15, r3
 800aa68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ac28 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800aa70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa74:	4b69      	ldr	r3, [pc, #420]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7c:	ee07 3a90 	vmov	s15, r3
 800aa80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa84:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa88:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aa8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaa4:	e065      	b.n	800ab72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	ee07 3a90 	vmov	s15, r3
 800aaac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800aab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab8:	4b58      	ldr	r3, [pc, #352]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac0:	ee07 3a90 	vmov	s15, r3
 800aac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aacc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800aad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aadc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aae8:	e043      	b.n	800ab72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	ee07 3a90 	vmov	s15, r3
 800aaf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800aaf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafc:	4b47      	ldr	r3, [pc, #284]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab04:	ee07 3a90 	vmov	s15, r3
 800ab08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab10:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ab14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2c:	e021      	b.n	800ab72 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	ee07 3a90 	vmov	s15, r3
 800ab34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab38:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ab3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab40:	4b36      	ldr	r3, [pc, #216]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab48:	ee07 3a90 	vmov	s15, r3
 800ab4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab50:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab54:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ab58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab70:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ab72:	4b2a      	ldr	r3, [pc, #168]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ab74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab76:	0a5b      	lsrs	r3, r3, #9
 800ab78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7c:	ee07 3a90 	vmov	s15, r3
 800ab80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab98:	ee17 2a90 	vmov	r2, s15
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800aba0:	4b1e      	ldr	r3, [pc, #120]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800aba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba4:	0c1b      	lsrs	r3, r3, #16
 800aba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abba:	edd7 6a07 	vldr	s13, [r7, #28]
 800abbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc6:	ee17 2a90 	vmov	r2, s15
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	0e1b      	lsrs	r3, r3, #24
 800abd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd8:	ee07 3a90 	vmov	s15, r3
 800abdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800abec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abf4:	ee17 2a90 	vmov	r2, s15
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abfc:	e008      	b.n	800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	609a      	str	r2, [r3, #8]
}
 800ac10:	bf00      	nop
 800ac12:	3724      	adds	r7, #36	; 0x24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	58024400 	.word	0x58024400
 800ac20:	03d09000 	.word	0x03d09000
 800ac24:	46000000 	.word	0x46000000
 800ac28:	4c742400 	.word	0x4c742400
 800ac2c:	4a742400 	.word	0x4a742400
 800ac30:	4bbebc20 	.word	0x4bbebc20

0800ac34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b089      	sub	sp, #36	; 0x24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac3c:	4b9d      	ldr	r3, [pc, #628]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac40:	f003 0303 	and.w	r3, r3, #3
 800ac44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ac46:	4b9b      	ldr	r3, [pc, #620]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4a:	0d1b      	lsrs	r3, r3, #20
 800ac4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac52:	4b98      	ldr	r3, [pc, #608]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac56:	0a1b      	lsrs	r3, r3, #8
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ac5e:	4b95      	ldr	r3, [pc, #596]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac62:	08db      	lsrs	r3, r3, #3
 800ac64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	fb02 f303 	mul.w	r3, r2, r3
 800ac6e:	ee07 3a90 	vmov	s15, r3
 800ac72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 810a 	beq.w	800ae96 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d05a      	beq.n	800ad3e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d302      	bcc.n	800ac92 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d078      	beq.n	800ad82 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800ac90:	e099      	b.n	800adc6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac92:	4b88      	ldr	r3, [pc, #544]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0320 	and.w	r3, r3, #32
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d02d      	beq.n	800acfa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac9e:	4b85      	ldr	r3, [pc, #532]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	08db      	lsrs	r3, r3, #3
 800aca4:	f003 0303 	and.w	r3, r3, #3
 800aca8:	4a83      	ldr	r2, [pc, #524]	; (800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800acaa:	fa22 f303 	lsr.w	r3, r2, r3
 800acae:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	ee07 3a90 	vmov	s15, r3
 800acc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc8:	4b7a      	ldr	r3, [pc, #488]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800acca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800accc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd0:	ee07 3a90 	vmov	s15, r3
 800acd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800acdc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ace0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800acf8:	e087      	b.n	800ae0a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	ee07 3a90 	vmov	s15, r3
 800ad00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad04:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800ad08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0c:	4b69      	ldr	r3, [pc, #420]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad14:	ee07 3a90 	vmov	s15, r3
 800ad18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad20:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ad24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad3c:	e065      	b.n	800ae0a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad48:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800ad4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad50:	4b58      	ldr	r3, [pc, #352]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ad52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad58:	ee07 3a90 	vmov	s15, r3
 800ad5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad60:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad64:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800ad68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad80:	e043      	b.n	800ae0a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	ee07 3a90 	vmov	s15, r3
 800ad88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800ad90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad94:	4b47      	ldr	r3, [pc, #284]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9c:	ee07 3a90 	vmov	s15, r3
 800ada0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800adac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adc4:	e021      	b.n	800ae0a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	ee07 3a90 	vmov	s15, r3
 800adcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800add4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add8:	4b36      	ldr	r3, [pc, #216]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800adda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800addc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade0:	ee07 3a90 	vmov	s15, r3
 800ade4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade8:	ed97 6a03 	vldr	s12, [r7, #12]
 800adec:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800adf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae08:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ae0a:	4b2a      	ldr	r3, [pc, #168]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0e:	0a5b      	lsrs	r3, r3, #9
 800ae10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae14:	ee07 3a90 	vmov	s15, r3
 800ae18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae24:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae30:	ee17 2a90 	vmov	r2, s15
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ae38:	4b1e      	ldr	r3, [pc, #120]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3c:	0c1b      	lsrs	r3, r3, #16
 800ae3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae5e:	ee17 2a90 	vmov	r2, s15
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ae66:	4b13      	ldr	r3, [pc, #76]	; (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	0e1b      	lsrs	r3, r3, #24
 800ae6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8c:	ee17 2a90 	vmov	r2, s15
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae94:	e008      	b.n	800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	609a      	str	r2, [r3, #8]
}
 800aea8:	bf00      	nop
 800aeaa:	3724      	adds	r7, #36	; 0x24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	58024400 	.word	0x58024400
 800aeb8:	03d09000 	.word	0x03d09000
 800aebc:	46000000 	.word	0x46000000
 800aec0:	4c742400 	.word	0x4c742400
 800aec4:	4a742400 	.word	0x4a742400
 800aec8:	4bbebc20 	.word	0x4bbebc20

0800aecc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800aecc:	b480      	push	{r7}
 800aece:	b089      	sub	sp, #36	; 0x24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aed4:	4b9d      	ldr	r3, [pc, #628]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed8:	f003 0303 	and.w	r3, r3, #3
 800aedc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800aede:	4b9b      	ldr	r3, [pc, #620]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee2:	091b      	lsrs	r3, r3, #4
 800aee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aee8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aeea:	4b98      	ldr	r3, [pc, #608]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aef4:	4b95      	ldr	r3, [pc, #596]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef8:	08db      	lsrs	r3, r3, #3
 800aefa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	fb02 f303 	mul.w	r3, r2, r3
 800af04:	ee07 3a90 	vmov	s15, r3
 800af08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 810a 	beq.w	800b12c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d05a      	beq.n	800afd4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d302      	bcc.n	800af28 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800af22:	2b02      	cmp	r3, #2
 800af24:	d078      	beq.n	800b018 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800af26:	e099      	b.n	800b05c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af28:	4b88      	ldr	r3, [pc, #544]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0320 	and.w	r3, r3, #32
 800af30:	2b00      	cmp	r3, #0
 800af32:	d02d      	beq.n	800af90 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af34:	4b85      	ldr	r3, [pc, #532]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	08db      	lsrs	r3, r3, #3
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	4a84      	ldr	r2, [pc, #528]	; (800b150 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800af40:	fa22 f303 	lsr.w	r3, r2, r3
 800af44:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	ee07 3a90 	vmov	s15, r3
 800af4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af5e:	4b7b      	ldr	r3, [pc, #492]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800af60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800af76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af8e:	e087      	b.n	800b0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800af9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa2:	4b6a      	ldr	r3, [pc, #424]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800afa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800afba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afd2:	e065      	b.n	800b0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	ee07 3a90 	vmov	s15, r3
 800afda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b15c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800afe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe6:	4b59      	ldr	r3, [pc, #356]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800afe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afee:	ee07 3a90 	vmov	s15, r3
 800aff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff6:	ed97 6a03 	vldr	s12, [r7, #12]
 800affa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800affe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b016:	e043      	b.n	800b0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b022:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b02a:	4b48      	ldr	r3, [pc, #288]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b032:	ee07 3a90 	vmov	s15, r3
 800b036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b03e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b056:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b05a:	e021      	b.n	800b0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b066:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b15c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800b06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b06e:	4b37      	ldr	r3, [pc, #220]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b076:	ee07 3a90 	vmov	s15, r3
 800b07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b082:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800b086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b09e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b0a0:	4b2a      	ldr	r3, [pc, #168]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a4:	0a5b      	lsrs	r3, r3, #9
 800b0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c6:	ee17 2a90 	vmov	r2, s15
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b0ce:	4b1f      	ldr	r3, [pc, #124]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	0c1b      	lsrs	r3, r3, #16
 800b0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d8:	ee07 3a90 	vmov	s15, r3
 800b0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f4:	ee17 2a90 	vmov	r2, s15
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b0fc:	4b13      	ldr	r3, [pc, #76]	; (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b100:	0e1b      	lsrs	r3, r3, #24
 800b102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b116:	edd7 6a07 	vldr	s13, [r7, #28]
 800b11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b122:	ee17 2a90 	vmov	r2, s15
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b12a:	e008      	b.n	800b13e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	609a      	str	r2, [r3, #8]
}
 800b13e:	bf00      	nop
 800b140:	3724      	adds	r7, #36	; 0x24
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	58024400 	.word	0x58024400
 800b150:	03d09000 	.word	0x03d09000
 800b154:	46000000 	.word	0x46000000
 800b158:	4c742400 	.word	0x4c742400
 800b15c:	4a742400 	.word	0x4a742400
 800b160:	4bbebc20 	.word	0x4bbebc20

0800b164 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b172:	4b53      	ldr	r3, [pc, #332]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b176:	f003 0303 	and.w	r3, r3, #3
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d101      	bne.n	800b182 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e099      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b182:	4b4f      	ldr	r3, [pc, #316]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a4e      	ldr	r2, [pc, #312]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b188:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b18e:	f7f8 fa01 	bl	8003594 <HAL_GetTick>
 800b192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b194:	e008      	b.n	800b1a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b196:	f7f8 f9fd 	bl	8003594 <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d901      	bls.n	800b1a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e086      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1a8:	4b45      	ldr	r3, [pc, #276]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1f0      	bne.n	800b196 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1b4:	4b42      	ldr	r3, [pc, #264]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	031b      	lsls	r3, r3, #12
 800b1c2:	493f      	ldr	r1, [pc, #252]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	628b      	str	r3, [r1, #40]	; 0x28
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	025b      	lsls	r3, r3, #9
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	061b      	lsls	r3, r3, #24
 800b1f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1f8:	4931      	ldr	r1, [pc, #196]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1fe:	4b30      	ldr	r3, [pc, #192]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b202:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	492d      	ldr	r1, [pc, #180]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b210:	4b2b      	ldr	r3, [pc, #172]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b214:	f023 0220 	bic.w	r2, r3, #32
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	4928      	ldr	r1, [pc, #160]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b222:	4b27      	ldr	r3, [pc, #156]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	4a26      	ldr	r2, [pc, #152]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b228:	f023 0310 	bic.w	r3, r3, #16
 800b22c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b22e:	4b24      	ldr	r3, [pc, #144]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b232:	4b24      	ldr	r3, [pc, #144]	; (800b2c4 <RCCEx_PLL2_Config+0x160>)
 800b234:	4013      	ands	r3, r2
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	69d2      	ldr	r2, [r2, #28]
 800b23a:	00d2      	lsls	r2, r2, #3
 800b23c:	4920      	ldr	r1, [pc, #128]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b242:	4b1f      	ldr	r3, [pc, #124]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b246:	4a1e      	ldr	r2, [pc, #120]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b248:	f043 0310 	orr.w	r3, r3, #16
 800b24c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d106      	bne.n	800b262 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b254:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b258:	4a19      	ldr	r2, [pc, #100]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b25a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b25e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b260:	e00f      	b.n	800b282 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d106      	bne.n	800b276 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b268:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a14      	ldr	r2, [pc, #80]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b26e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b272:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b274:	e005      	b.n	800b282 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b276:	4b12      	ldr	r3, [pc, #72]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27a:	4a11      	ldr	r2, [pc, #68]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b27c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b280:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b282:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a0e      	ldr	r2, [pc, #56]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b288:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b28e:	f7f8 f981 	bl	8003594 <HAL_GetTick>
 800b292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b294:	e008      	b.n	800b2a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b296:	f7f8 f97d 	bl	8003594 <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d901      	bls.n	800b2a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e006      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2a8:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0f0      	beq.n	800b296 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	58024400 	.word	0x58024400
 800b2c4:	ffff0007 	.word	0xffff0007

0800b2c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2d6:	4b53      	ldr	r3, [pc, #332]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d101      	bne.n	800b2e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e099      	b.n	800b41a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2e6:	4b4f      	ldr	r3, [pc, #316]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a4e      	ldr	r2, [pc, #312]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2f2:	f7f8 f94f 	bl	8003594 <HAL_GetTick>
 800b2f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2f8:	e008      	b.n	800b30c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b2fa:	f7f8 f94b 	bl	8003594 <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d901      	bls.n	800b30c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e086      	b.n	800b41a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b30c:	4b45      	ldr	r3, [pc, #276]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1f0      	bne.n	800b2fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b318:	4b42      	ldr	r3, [pc, #264]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	051b      	lsls	r3, r3, #20
 800b326:	493f      	ldr	r1, [pc, #252]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b328:	4313      	orrs	r3, r2
 800b32a:	628b      	str	r3, [r1, #40]	; 0x28
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	3b01      	subs	r3, #1
 800b332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	025b      	lsls	r3, r3, #9
 800b33e:	b29b      	uxth	r3, r3
 800b340:	431a      	orrs	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	3b01      	subs	r3, #1
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b34e:	431a      	orrs	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	3b01      	subs	r3, #1
 800b356:	061b      	lsls	r3, r3, #24
 800b358:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b35c:	4931      	ldr	r1, [pc, #196]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b362:	4b30      	ldr	r3, [pc, #192]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	492d      	ldr	r1, [pc, #180]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b370:	4313      	orrs	r3, r2
 800b372:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b374:	4b2b      	ldr	r3, [pc, #172]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	4928      	ldr	r1, [pc, #160]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b382:	4313      	orrs	r3, r2
 800b384:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b386:	4b27      	ldr	r3, [pc, #156]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38a:	4a26      	ldr	r2, [pc, #152]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b38c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b392:	4b24      	ldr	r3, [pc, #144]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <RCCEx_PLL3_Config+0x160>)
 800b398:	4013      	ands	r3, r2
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	69d2      	ldr	r2, [r2, #28]
 800b39e:	00d2      	lsls	r2, r2, #3
 800b3a0:	4920      	ldr	r1, [pc, #128]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3aa:	4a1e      	ldr	r2, [pc, #120]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d106      	bne.n	800b3c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3b8:	4b1a      	ldr	r3, [pc, #104]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	4a19      	ldr	r2, [pc, #100]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b3c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3c4:	e00f      	b.n	800b3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d106      	bne.n	800b3da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3cc:	4b15      	ldr	r3, [pc, #84]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d0:	4a14      	ldr	r2, [pc, #80]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3d8:	e005      	b.n	800b3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3da:	4b12      	ldr	r3, [pc, #72]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3de:	4a11      	ldr	r2, [pc, #68]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a0e      	ldr	r2, [pc, #56]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3f2:	f7f8 f8cf 	bl	8003594 <HAL_GetTick>
 800b3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3f8:	e008      	b.n	800b40c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b3fa:	f7f8 f8cb 	bl	8003594 <HAL_GetTick>
 800b3fe:	4602      	mov	r2, r0
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	2b02      	cmp	r3, #2
 800b406:	d901      	bls.n	800b40c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e006      	b.n	800b41a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0f0      	beq.n	800b3fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	ffff0007 	.word	0xffff0007

0800b42c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d067      	beq.n	800b50e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7f7 fce2 	bl	8002e1c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	22ca      	movs	r2, #202	; 0xca
 800b466:	625a      	str	r2, [r3, #36]	; 0x24
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2253      	movs	r2, #83	; 0x53
 800b46e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fa49 	bl	800b908 <RTC_EnterInitMode>
 800b476:	4603      	mov	r3, r0
 800b478:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d13b      	bne.n	800b4f8 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6899      	ldr	r1, [r3, #8]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	4b23      	ldr	r3, [pc, #140]	; (800b518 <HAL_RTC_Init+0xec>)
 800b48c:	400b      	ands	r3, r1
 800b48e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6899      	ldr	r1, [r3, #8]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	431a      	orrs	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	430a      	orrs	r2, r1
 800b4ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	0419      	lsls	r1, r3, #16
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fa51 	bl	800b968 <RTC_ExitInitMode>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d113      	bne.n	800b4f8 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f022 0203 	bic.w	r2, r2, #3
 800b4de:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	69da      	ldr	r2, [r3, #28]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	22ff      	movs	r2, #255	; 0xff
 800b4fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b500:	7bfb      	ldrb	r3, [r7, #15]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d103      	bne.n	800b50e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	ff8fffbf 	.word	0xff8fffbf

0800b51c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b51c:	b590      	push	{r4, r7, lr}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d101      	bne.n	800b536 <HAL_RTC_SetTime+0x1a>
 800b532:	2302      	movs	r3, #2
 800b534:	e089      	b.n	800b64a <HAL_RTC_SetTime+0x12e>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2202      	movs	r2, #2
 800b542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	22ca      	movs	r2, #202	; 0xca
 800b54c:	625a      	str	r2, [r3, #36]	; 0x24
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2253      	movs	r2, #83	; 0x53
 800b554:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 f9d6 	bl	800b908 <RTC_EnterInitMode>
 800b55c:	4603      	mov	r3, r0
 800b55e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b560:	7cfb      	ldrb	r3, [r7, #19]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d161      	bne.n	800b62a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d126      	bne.n	800b5ba <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b576:	2b00      	cmp	r3, #0
 800b578:	d102      	bne.n	800b580 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2200      	movs	r2, #0
 800b57e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	4618      	mov	r0, r3
 800b586:	f000 fa2d 	bl	800b9e4 <RTC_ByteToBcd2>
 800b58a:	4603      	mov	r3, r0
 800b58c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fa26 	bl	800b9e4 <RTC_ByteToBcd2>
 800b598:	4603      	mov	r3, r0
 800b59a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b59c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	789b      	ldrb	r3, [r3, #2]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fa1e 	bl	800b9e4 <RTC_ByteToBcd2>
 800b5a8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5aa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	78db      	ldrb	r3, [r3, #3]
 800b5b2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	617b      	str	r3, [r7, #20]
 800b5b8:	e018      	b.n	800b5ec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d102      	bne.n	800b5ce <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	785b      	ldrb	r3, [r3, #1]
 800b5d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	78db      	ldrb	r3, [r3, #3]
 800b5e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	6979      	ldr	r1, [r7, #20]
 800b5f2:	4b18      	ldr	r3, [pc, #96]	; (800b654 <HAL_RTC_SetTime+0x138>)
 800b5f4:	400b      	ands	r3, r1
 800b5f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b606:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6899      	ldr	r1, [r3, #8]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	431a      	orrs	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	430a      	orrs	r2, r1
 800b61e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 f9a1 	bl	800b968 <RTC_ExitInitMode>
 800b626:	4603      	mov	r3, r0
 800b628:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	22ff      	movs	r2, #255	; 0xff
 800b630:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b632:	7cfb      	ldrb	r3, [r7, #19]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b648:	7cfb      	ldrb	r3, [r7, #19]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	371c      	adds	r7, #28
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd90      	pop	{r4, r7, pc}
 800b652:	bf00      	nop
 800b654:	007f7f7f 	.word	0x007f7f7f

0800b658 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	4b22      	ldr	r3, [pc, #136]	; (800b70c <HAL_RTC_GetTime+0xb4>)
 800b684:	4013      	ands	r3, r2
 800b686:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	0c1b      	lsrs	r3, r3, #16
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b692:	b2da      	uxtb	r2, r3
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	0a1b      	lsrs	r3, r3, #8
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	0d9b      	lsrs	r3, r3, #22
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d11a      	bne.n	800b702 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 f9a7 	bl	800ba24 <RTC_Bcd2ToByte>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	461a      	mov	r2, r3
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	785b      	ldrb	r3, [r3, #1]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 f99e 	bl	800ba24 <RTC_Bcd2ToByte>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	789b      	ldrb	r3, [r3, #2]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 f995 	bl	800ba24 <RTC_Bcd2ToByte>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	007f7f7f 	.word	0x007f7f7f

0800b710 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b710:	b590      	push	{r4, r7, lr}
 800b712:	b087      	sub	sp, #28
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d101      	bne.n	800b72a <HAL_RTC_SetDate+0x1a>
 800b726:	2302      	movs	r3, #2
 800b728:	e073      	b.n	800b812 <HAL_RTC_SetDate+0x102>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2202      	movs	r2, #2
 800b736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10e      	bne.n	800b75e <HAL_RTC_SetDate+0x4e>
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	785b      	ldrb	r3, [r3, #1]
 800b744:	f003 0310 	and.w	r3, r3, #16
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d008      	beq.n	800b75e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	785b      	ldrb	r3, [r3, #1]
 800b750:	f023 0310 	bic.w	r3, r3, #16
 800b754:	b2db      	uxtb	r3, r3
 800b756:	330a      	adds	r3, #10
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d11c      	bne.n	800b79e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	78db      	ldrb	r3, [r3, #3]
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 f93b 	bl	800b9e4 <RTC_ByteToBcd2>
 800b76e:	4603      	mov	r3, r0
 800b770:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	785b      	ldrb	r3, [r3, #1]
 800b776:	4618      	mov	r0, r3
 800b778:	f000 f934 	bl	800b9e4 <RTC_ByteToBcd2>
 800b77c:	4603      	mov	r3, r0
 800b77e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b780:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	789b      	ldrb	r3, [r3, #2]
 800b786:	4618      	mov	r0, r3
 800b788:	f000 f92c 	bl	800b9e4 <RTC_ByteToBcd2>
 800b78c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b78e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b798:	4313      	orrs	r3, r2
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	e00e      	b.n	800b7bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	78db      	ldrb	r3, [r3, #3]
 800b7a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	785b      	ldrb	r3, [r3, #1]
 800b7a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	22ca      	movs	r2, #202	; 0xca
 800b7c2:	625a      	str	r2, [r3, #36]	; 0x24
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2253      	movs	r2, #83	; 0x53
 800b7ca:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f89b 	bl	800b908 <RTC_EnterInitMode>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b7d6:	7cfb      	ldrb	r3, [r7, #19]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10a      	bne.n	800b7f2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	6979      	ldr	r1, [r7, #20]
 800b7e2:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <HAL_RTC_SetDate+0x10c>)
 800b7e4:	400b      	ands	r3, r1
 800b7e6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 f8bd 	bl	800b968 <RTC_ExitInitMode>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	22ff      	movs	r2, #255	; 0xff
 800b7f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b7fa:	7cfb      	ldrb	r3, [r7, #19]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800b810:	7cfb      	ldrb	r3, [r7, #19]


}
 800b812:	4618      	mov	r0, r3
 800b814:	371c      	adds	r7, #28
 800b816:	46bd      	mov	sp, r7
 800b818:	bd90      	pop	{r4, r7, pc}
 800b81a:	bf00      	nop
 800b81c:	00ffff3f 	.word	0x00ffff3f

0800b820 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	4b21      	ldr	r3, [pc, #132]	; (800b8b8 <HAL_RTC_GetDate+0x98>)
 800b834:	4013      	ands	r3, r2
 800b836:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	0a1b      	lsrs	r3, r3, #8
 800b846:	b2db      	uxtb	r3, r3
 800b848:	f003 031f 	and.w	r3, r3, #31
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	b2db      	uxtb	r3, r3
 800b856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	0b5b      	lsrs	r3, r3, #13
 800b864:	b2db      	uxtb	r3, r3
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d11a      	bne.n	800b8ac <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	78db      	ldrb	r3, [r3, #3]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 f8d2 	bl	800ba24 <RTC_Bcd2ToByte>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	785b      	ldrb	r3, [r3, #1]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f000 f8c9 	bl	800ba24 <RTC_Bcd2ToByte>
 800b892:	4603      	mov	r3, r0
 800b894:	461a      	mov	r2, r3
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	789b      	ldrb	r3, [r3, #2]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 f8c0 	bl	800ba24 <RTC_Bcd2ToByte>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	00ffff3f 	.word	0x00ffff3f

0800b8bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b8d2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b8d4:	f7f7 fe5e 	bl	8003594 <HAL_GetTick>
 800b8d8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8da:	e009      	b.n	800b8f0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8dc:	f7f7 fe5a 	bl	8003594 <HAL_GetTick>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8ea:	d901      	bls.n	800b8f0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	e007      	b.n	800b900 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f003 0320 	and.w	r3, r3, #32
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0ee      	beq.n	800b8dc <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d11d      	bne.n	800b95e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b92a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b92c:	f7f7 fe32 	bl	8003594 <HAL_GetTick>
 800b930:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b932:	e00d      	b.n	800b950 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b934:	f7f7 fe2e 	bl	8003594 <HAL_GetTick>
 800b938:	4602      	mov	r2, r0
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b942:	d905      	bls.n	800b950 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b944:	2303      	movs	r3, #3
 800b946:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2203      	movs	r2, #3
 800b94c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0ea      	beq.n	800b934 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b970:	2300      	movs	r3, #0
 800b972:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b974:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <RTC_ExitInitMode+0x78>)
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	4a19      	ldr	r2, [pc, #100]	; (800b9e0 <RTC_ExitInitMode+0x78>)
 800b97a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b97e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b980:	4b17      	ldr	r3, [pc, #92]	; (800b9e0 <RTC_ExitInitMode+0x78>)
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f003 0320 	and.w	r3, r3, #32
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10c      	bne.n	800b9a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff ff95 	bl	800b8bc <HAL_RTC_WaitForSynchro>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d01e      	beq.n	800b9d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2203      	movs	r2, #3
 800b99c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	73fb      	strb	r3, [r7, #15]
 800b9a4:	e017      	b.n	800b9d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b9a6:	4b0e      	ldr	r3, [pc, #56]	; (800b9e0 <RTC_ExitInitMode+0x78>)
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	4a0d      	ldr	r2, [pc, #52]	; (800b9e0 <RTC_ExitInitMode+0x78>)
 800b9ac:	f023 0320 	bic.w	r3, r3, #32
 800b9b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff ff82 	bl	800b8bc <HAL_RTC_WaitForSynchro>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d005      	beq.n	800b9ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2203      	movs	r2, #3
 800b9c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b9ca:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <RTC_ExitInitMode+0x78>)
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <RTC_ExitInitMode+0x78>)
 800b9d0:	f043 0320 	orr.w	r3, r3, #32
 800b9d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	58004000 	.word	0x58004000

0800b9e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800b9f6:	e005      	b.n	800ba04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	3b0a      	subs	r3, #10
 800ba02:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ba04:	7afb      	ldrb	r3, [r7, #11]
 800ba06:	2b09      	cmp	r3, #9
 800ba08:	d8f6      	bhi.n	800b9f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	011b      	lsls	r3, r3, #4
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	7afb      	ldrb	r3, [r7, #11]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	b2db      	uxtb	r3, r3
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ba2e:	79fb      	ldrb	r3, [r7, #7]
 800ba30:	091b      	lsrs	r3, r3, #4
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	461a      	mov	r2, r3
 800ba36:	0092      	lsls	r2, r2, #2
 800ba38:	4413      	add	r3, r2
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	f003 030f 	and.w	r3, r3, #15
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
 800ba48:	4413      	add	r3, r2
 800ba4a:	b2db      	uxtb	r3, r3
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08a      	sub	sp, #40	; 0x28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e07c      	b.n	800bb64 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10c      	bne.n	800ba90 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2202      	movs	r2, #2
 800ba88:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7f7 f9e0 	bl	8002e50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2203      	movs	r2, #3
 800ba94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f867 	bl	800bb6c <HAL_SD_InitCard>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e05d      	b.n	800bb64 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800baa8:	f107 0308 	add.w	r3, r7, #8
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f001 f8ce 	bl	800cc50 <HAL_SD_GetCardStatus>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e052      	b.n	800bb64 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800babe:	7e3b      	ldrb	r3, [r7, #24]
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bac4:	7e7b      	ldrb	r3, [r7, #25]
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d10a      	bne.n	800bae8 <HAL_SD_Init+0x90>
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <HAL_SD_Init+0x86>
 800bad8:	6a3b      	ldr	r3, [r7, #32]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d004      	beq.n	800bae8 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bae4:	65da      	str	r2, [r3, #92]	; 0x5c
 800bae6:	e00b      	b.n	800bb00 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baec:	2b01      	cmp	r3, #1
 800baee:	d104      	bne.n	800bafa <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baf6:	65da      	str	r2, [r3, #92]	; 0x5c
 800baf8:	e002      	b.n	800bb00 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 f984 	bl	800ce14 <HAL_SD_ConfigWideBusOperation>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e026      	b.n	800bb64 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bb16:	f7f7 fd3d 	bl	8003594 <HAL_GetTick>
 800bb1a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bb1c:	e011      	b.n	800bb42 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800bb1e:	f7f7 fd39 	bl	8003594 <HAL_GetTick>
 800bb22:	4602      	mov	r2, r0
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb2c:	d109      	bne.n	800bb42 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e010      	b.n	800bb64 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 fa10 	bl	800cf68 <HAL_SD_GetCardState>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	d1e7      	bne.n	800bb1e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3728      	adds	r7, #40	; 0x28
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bb6c:	b5b0      	push	{r4, r5, r7, lr}
 800bb6e:	b08e      	sub	sp, #56	; 0x38
 800bb70:	af04      	add	r7, sp, #16
 800bb72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bb74:	2300      	movs	r3, #0
 800bb76:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bb80:	2300      	movs	r3, #0
 800bb82:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bb84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bb88:	f7fe fc7a 	bl	800a480 <HAL_RCCEx_GetPeriphCLKFreq>
 800bb8c:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb90:	0a1b      	lsrs	r3, r3, #8
 800bb92:	4a40      	ldr	r2, [pc, #256]	; (800bc94 <HAL_SD_InitCard+0x128>)
 800bb94:	fba2 2303 	umull	r2, r3, r2, r3
 800bb98:	091b      	lsrs	r3, r3, #4
 800bb9a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d107      	bne.n	800bbb4 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f042 0210 	orr.w	r2, r2, #16
 800bbb2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681d      	ldr	r5, [r3, #0]
 800bbb8:	466c      	mov	r4, sp
 800bbba:	f107 0314 	add.w	r3, r7, #20
 800bbbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bbc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f004 f9f5 	bl	800ffbc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f004 fa38 	bl	801004c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d008      	beq.n	800bc00 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800bbee:	4a2a      	ldr	r2, [pc, #168]	; (800bc98 <HAL_SD_InitCard+0x12c>)
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7f7 fcd7 	bl	80035ac <HAL_Delay>
 800bbfe:	e002      	b.n	800bc06 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800bc00:	2002      	movs	r0, #2
 800bc02:	f7f7 fcd3 	bl	80035ac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fa8c 	bl	800d124 <SD_PowerON>
 800bc0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00b      	beq.n	800bc2c <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	431a      	orrs	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e02e      	b.n	800bc8a <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f001 f9bb 	bl	800cfa8 <SD_InitCard>
 800bc32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc34:	6a3b      	ldr	r3, [r7, #32]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00b      	beq.n	800bc52 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e01b      	b.n	800bc8a <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f004 fa8c 	bl	8010178 <SDMMC_CmdBlockLength>
 800bc60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00f      	beq.n	800bc88 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a0b      	ldr	r2, [pc, #44]	; (800bc9c <HAL_SD_InitCard+0x130>)
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	431a      	orrs	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e000      	b.n	800bc8a <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3728      	adds	r7, #40	; 0x28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bdb0      	pop	{r4, r5, r7, pc}
 800bc92:	bf00      	nop
 800bc94:	014f8b59 	.word	0x014f8b59
 800bc98:	00012110 	.word	0x00012110
 800bc9c:	1fe00fff 	.word	0x1fe00fff

0800bca0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b092      	sub	sp, #72	; 0x48
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bcae:	f7f7 fc71 	bl	8003594 <HAL_GetTick>
 800bcb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d107      	bne.n	800bcd2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e167      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	f040 815a 	bne.w	800bf94 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	441a      	add	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d907      	bls.n	800bd04 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e14e      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2203      	movs	r2, #3
 800bd08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2200      	movs	r2, #0
 800bd12:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d002      	beq.n	800bd22 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1e:	025b      	lsls	r3, r3, #9
 800bd20:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bd22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd26:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	025b      	lsls	r3, r3, #9
 800bd2c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bd2e:	2390      	movs	r3, #144	; 0x90
 800bd30:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd32:	2302      	movs	r3, #2
 800bd34:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd36:	2300      	movs	r3, #0
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f107 0214 	add.w	r2, r7, #20
 800bd46:	4611      	mov	r1, r2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f004 f9e9 	bl	8010120 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd5c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d90a      	bls.n	800bd7a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2202      	movs	r2, #2
 800bd68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd70:	4618      	mov	r0, r3
 800bd72:	f004 fa47 	bl	8010204 <SDMMC_CmdReadMultiBlock>
 800bd76:	6478      	str	r0, [r7, #68]	; 0x44
 800bd78:	e009      	b.n	800bd8e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd86:	4618      	mov	r0, r3
 800bd88:	f004 fa19 	bl	80101be <SDMMC_CmdReadSingleBlock>
 800bd8c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d012      	beq.n	800bdba <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a84      	ldr	r2, [pc, #528]	; (800bfac <HAL_SD_ReadBlocks+0x30c>)
 800bd9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bda0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bda2:	431a      	orrs	r2, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e0f3      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdbe:	e058      	b.n	800be72 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d033      	beq.n	800be36 <HAL_SD_ReadBlocks+0x196>
 800bdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd0:	2b1f      	cmp	r3, #31
 800bdd2:	d930      	bls.n	800be36 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	643b      	str	r3, [r7, #64]	; 0x40
 800bdd8:	e027      	b.n	800be2a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f004 f916 	bl	8010010 <SDMMC_ReadFIFO>
 800bde4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	0a1b      	lsrs	r3, r3, #8
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be00:	3301      	adds	r3, #1
 800be02:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	0c1b      	lsrs	r3, r3, #16
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800be0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be10:	3301      	adds	r3, #1
 800be12:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be16:	0e1b      	lsrs	r3, r3, #24
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800be1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be20:	3301      	adds	r3, #1
 800be22:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800be24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be26:	3301      	adds	r3, #1
 800be28:	643b      	str	r3, [r7, #64]	; 0x40
 800be2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2c:	2b07      	cmp	r3, #7
 800be2e:	d9d4      	bls.n	800bdda <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800be30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be32:	3b20      	subs	r3, #32
 800be34:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800be36:	f7f7 fbad 	bl	8003594 <HAL_GetTick>
 800be3a:	4602      	mov	r2, r0
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be42:	429a      	cmp	r2, r3
 800be44:	d902      	bls.n	800be4c <HAL_SD_ReadBlocks+0x1ac>
 800be46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d112      	bne.n	800be72 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a56      	ldr	r2, [pc, #344]	; (800bfac <HAL_SD_ReadBlocks+0x30c>)
 800be52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e097      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be78:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d09f      	beq.n	800bdc0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68da      	ldr	r2, [r3, #12]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be8e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d022      	beq.n	800bee4 <HAL_SD_ReadBlocks+0x244>
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d91f      	bls.n	800bee4 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d01b      	beq.n	800bee4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f004 fa11 	bl	80102d8 <SDMMC_CmdStopTransfer>
 800beb6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800beb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d012      	beq.n	800bee4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a3a      	ldr	r2, [pc, #232]	; (800bfac <HAL_SD_ReadBlocks+0x30c>)
 800bec4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800becc:	431a      	orrs	r2, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2200      	movs	r2, #0
 800bede:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	e05e      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beea:	f003 0308 	and.w	r3, r3, #8
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d012      	beq.n	800bf18 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a2d      	ldr	r2, [pc, #180]	; (800bfac <HAL_SD_ReadBlocks+0x30c>)
 800bef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befe:	f043 0208 	orr.w	r2, r3, #8
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e044      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf1e:	f003 0302 	and.w	r3, r3, #2
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d012      	beq.n	800bf4c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a20      	ldr	r2, [pc, #128]	; (800bfac <HAL_SD_ReadBlocks+0x30c>)
 800bf2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf32:	f043 0202 	orr.w	r2, r3, #2
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e02a      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d012      	beq.n	800bf80 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a13      	ldr	r2, [pc, #76]	; (800bfac <HAL_SD_ReadBlocks+0x30c>)
 800bf60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf66:	f043 0220 	orr.w	r2, r3, #32
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e010      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a0a      	ldr	r2, [pc, #40]	; (800bfb0 <HAL_SD_ReadBlocks+0x310>)
 800bf86:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	e006      	b.n	800bfa2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
  }
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3748      	adds	r7, #72	; 0x48
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	1fe00fff 	.word	0x1fe00fff
 800bfb0:	18000f3a 	.word	0x18000f3a

0800bfb4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b092      	sub	sp, #72	; 0x48
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bfc2:	f7f7 fae7 	bl	8003594 <HAL_GetTick>
 800bfc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d107      	bne.n	800bfe6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e16b      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	f040 815e 	bne.w	800c2b0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	441a      	add	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c004:	429a      	cmp	r2, r3
 800c006:	d907      	bls.n	800c018 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e152      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2203      	movs	r2, #3
 800c01c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2200      	movs	r2, #0
 800c026:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d002      	beq.n	800c036 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	025b      	lsls	r3, r3, #9
 800c034:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c03a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	025b      	lsls	r3, r3, #9
 800c040:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c042:	2390      	movs	r3, #144	; 0x90
 800c044:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c046:	2300      	movs	r3, #0
 800c048:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c04e:	2300      	movs	r3, #0
 800c050:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f107 0218 	add.w	r2, r7, #24
 800c05a:	4611      	mov	r1, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	f004 f85f 	bl	8010120 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68da      	ldr	r2, [r3, #12]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c070:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d90a      	bls.n	800c08e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2220      	movs	r2, #32
 800c07c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c084:	4618      	mov	r0, r3
 800c086:	f004 f903 	bl	8010290 <SDMMC_CmdWriteMultiBlock>
 800c08a:	6478      	str	r0, [r7, #68]	; 0x44
 800c08c:	e009      	b.n	800c0a2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2210      	movs	r2, #16
 800c092:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c09a:	4618      	mov	r0, r3
 800c09c:	f004 f8d5 	bl	801024a <SDMMC_CmdWriteSingleBlock>
 800c0a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d012      	beq.n	800c0ce <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a86      	ldr	r2, [pc, #536]	; (800c2c8 <HAL_SD_WriteBlocks+0x314>)
 800c0ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e0f7      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c0d2:	e05c      	b.n	800c18e <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d037      	beq.n	800c152 <HAL_SD_WriteBlocks+0x19e>
 800c0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e4:	2b1f      	cmp	r3, #31
 800c0e6:	d934      	bls.n	800c152 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c0ec:	e02b      	b.n	800c146 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	021a      	lsls	r2, r3, #8
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	4313      	orrs	r3, r2
 800c104:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c108:	3301      	adds	r3, #1
 800c10a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	041a      	lsls	r2, r3, #16
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	4313      	orrs	r3, r2
 800c116:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11a:	3301      	adds	r3, #1
 800c11c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	061a      	lsls	r2, r3, #24
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	4313      	orrs	r3, r2
 800c128:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c12c:	3301      	adds	r3, #1
 800c12e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f107 0214 	add.w	r2, r7, #20
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f003 ff75 	bl	801002a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c142:	3301      	adds	r3, #1
 800c144:	643b      	str	r3, [r7, #64]	; 0x40
 800c146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c148:	2b07      	cmp	r3, #7
 800c14a:	d9d0      	bls.n	800c0ee <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800c14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14e:	3b20      	subs	r3, #32
 800c150:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c152:	f7f7 fa1f 	bl	8003594 <HAL_GetTick>
 800c156:	4602      	mov	r2, r0
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c15e:	429a      	cmp	r2, r3
 800c160:	d902      	bls.n	800c168 <HAL_SD_WriteBlocks+0x1b4>
 800c162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c164:	2b00      	cmp	r3, #0
 800c166:	d112      	bne.n	800c18e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a56      	ldr	r2, [pc, #344]	; (800c2c8 <HAL_SD_WriteBlocks+0x314>)
 800c16e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c176:	431a      	orrs	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2200      	movs	r2, #0
 800c188:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c18a:	2303      	movs	r3, #3
 800c18c:	e097      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c194:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d09b      	beq.n	800c0d4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68da      	ldr	r2, [r3, #12]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1aa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d022      	beq.n	800c200 <HAL_SD_WriteBlocks+0x24c>
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d91f      	bls.n	800c200 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d01b      	beq.n	800c200 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f004 f883 	bl	80102d8 <SDMMC_CmdStopTransfer>
 800c1d2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d012      	beq.n	800c200 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a3a      	ldr	r2, [pc, #232]	; (800c2c8 <HAL_SD_WriteBlocks+0x314>)
 800c1e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1e8:	431a      	orrs	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e05e      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c206:	f003 0308 	and.w	r3, r3, #8
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d012      	beq.n	800c234 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a2d      	ldr	r2, [pc, #180]	; (800c2c8 <HAL_SD_WriteBlocks+0x314>)
 800c214:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	f043 0208 	orr.w	r2, r3, #8
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2201      	movs	r2, #1
 800c226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e044      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23a:	f003 0302 	and.w	r3, r3, #2
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d012      	beq.n	800c268 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a20      	ldr	r2, [pc, #128]	; (800c2c8 <HAL_SD_WriteBlocks+0x314>)
 800c248:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	f043 0202 	orr.w	r2, r3, #2
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2201      	movs	r2, #1
 800c25a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	e02a      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26e:	f003 0310 	and.w	r3, r3, #16
 800c272:	2b00      	cmp	r3, #0
 800c274:	d012      	beq.n	800c29c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a13      	ldr	r2, [pc, #76]	; (800c2c8 <HAL_SD_WriteBlocks+0x314>)
 800c27c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c282:	f043 0210 	orr.w	r2, r3, #16
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e010      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a0a      	ldr	r2, [pc, #40]	; (800c2cc <HAL_SD_WriteBlocks+0x318>)
 800c2a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e006      	b.n	800c2be <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
  }
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3748      	adds	r7, #72	; 0x48
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	1fe00fff 	.word	0x1fe00fff
 800c2cc:	18000f3a 	.word	0x18000f3a

0800c2d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08c      	sub	sp, #48	; 0x30
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d107      	bne.n	800c2f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e08d      	b.n	800c414 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b01      	cmp	r3, #1
 800c302:	f040 8086 	bne.w	800c412 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	441a      	add	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c316:	429a      	cmp	r2, r3
 800c318:	d907      	bls.n	800c32a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e074      	b.n	800c414 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2203      	movs	r2, #3
 800c32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2200      	movs	r2, #0
 800c338:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	025a      	lsls	r2, r3, #9
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d002      	beq.n	800c356 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c352:	025b      	lsls	r3, r3, #9
 800c354:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c35a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	025b      	lsls	r3, r3, #9
 800c360:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c362:	2390      	movs	r3, #144	; 0x90
 800c364:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c366:	2302      	movs	r3, #2
 800c368:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c36e:	2300      	movs	r3, #0
 800c370:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f107 0210 	add.w	r2, r7, #16
 800c37a:	4611      	mov	r1, r2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f003 fecf 	bl	8010120 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68da      	ldr	r2, [r3, #12]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c390:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d90a      	bls.n	800c3be <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2282      	movs	r2, #130	; 0x82
 800c3ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f003 ff25 	bl	8010204 <SDMMC_CmdReadMultiBlock>
 800c3ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c3bc:	e009      	b.n	800c3d2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2281      	movs	r2, #129	; 0x81
 800c3c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f003 fef7 	bl	80101be <SDMMC_CmdReadSingleBlock>
 800c3d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d012      	beq.n	800c3fe <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a0f      	ldr	r2, [pc, #60]	; (800c41c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c3de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e00a      	b.n	800c414 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c40c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	e000      	b.n	800c414 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c412:	2302      	movs	r3, #2
  }
}
 800c414:	4618      	mov	r0, r3
 800c416:	3730      	adds	r7, #48	; 0x30
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	1fe00fff 	.word	0x1fe00fff

0800c420 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b08c      	sub	sp, #48	; 0x30
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
 800c42c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d107      	bne.n	800c448 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	e08d      	b.n	800c564 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b01      	cmp	r3, #1
 800c452:	f040 8086 	bne.w	800c562 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c45c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	441a      	add	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c466:	429a      	cmp	r2, r3
 800c468:	d907      	bls.n	800c47a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	e074      	b.n	800c564 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2203      	movs	r2, #3
 800c47e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2200      	movs	r2, #0
 800c488:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	025a      	lsls	r2, r3, #9
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d002      	beq.n	800c4a6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a2:	025b      	lsls	r3, r3, #9
 800c4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4aa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	025b      	lsls	r3, r3, #9
 800c4b0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c4b2:	2390      	movs	r3, #144	; 0x90
 800c4b4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f107 0210 	add.w	r2, r7, #16
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f003 fe27 	bl	8010120 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68da      	ldr	r2, [r3, #12]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4e0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d90a      	bls.n	800c50e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	22a0      	movs	r2, #160	; 0xa0
 800c4fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c504:	4618      	mov	r0, r3
 800c506:	f003 fec3 	bl	8010290 <SDMMC_CmdWriteMultiBlock>
 800c50a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c50c:	e009      	b.n	800c522 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2290      	movs	r2, #144	; 0x90
 800c512:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c51a:	4618      	mov	r0, r3
 800c51c:	f003 fe95 	bl	801024a <SDMMC_CmdWriteSingleBlock>
 800c520:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c524:	2b00      	cmp	r3, #0
 800c526:	d012      	beq.n	800c54e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a0f      	ldr	r2, [pc, #60]	; (800c56c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c52e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c536:	431a      	orrs	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e00a      	b.n	800c564 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c55c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	e000      	b.n	800c564 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c562:	2302      	movs	r3, #2
  }
}
 800c564:	4618      	mov	r0, r3
 800c566:	3730      	adds	r7, #48	; 0x30
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	1fe00fff 	.word	0x1fe00fff

0800c570 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d008      	beq.n	800c59e <HAL_SD_IRQHandler+0x2e>
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f003 0308 	and.w	r3, r3, #8
 800c592:	2b00      	cmp	r3, #0
 800c594:	d003      	beq.n	800c59e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f001 f92a 	bl	800d7f0 <SD_Read_IT>
 800c59c:	e19a      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 80ac 	beq.w	800c706 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5b6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	4b9d      	ldr	r3, [pc, #628]	; (800c838 <HAL_SD_IRQHandler+0x2c8>)
 800c5c4:	400b      	ands	r3, r1
 800c5c6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c5d6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5e6:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f003 0308 	and.w	r3, r3, #8
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d038      	beq.n	800c664 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f003 0302 	and.w	r3, r3, #2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d104      	bne.n	800c606 <HAL_SD_IRQHandler+0x96>
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f003 0320 	and.w	r3, r3, #32
 800c602:	2b00      	cmp	r3, #0
 800c604:	d011      	beq.n	800c62a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f003 fe64 	bl	80102d8 <SDMMC_CmdStopTransfer>
 800c610:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d008      	beq.n	800c62a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f959 	bl	800c8dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a83      	ldr	r2, [pc, #524]	; (800c83c <HAL_SD_IRQHandler+0x2cc>)
 800c630:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	2b00      	cmp	r3, #0
 800c648:	d104      	bne.n	800c654 <HAL_SD_IRQHandler+0xe4>
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f003 0302 	and.w	r3, r3, #2
 800c650:	2b00      	cmp	r3, #0
 800c652:	d003      	beq.n	800c65c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f005 fe55 	bl	8012304 <HAL_SD_RxCpltCallback>
 800c65a:	e13b      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f005 fe47 	bl	80122f0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c662:	e137      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f000 8132 	beq.w	800c8d4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2200      	movs	r2, #0
 800c676:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2200      	movs	r2, #0
 800c67e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2200      	movs	r2, #0
 800c686:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d104      	bne.n	800c69c <HAL_SD_IRQHandler+0x12c>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f003 0320 	and.w	r3, r3, #32
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d011      	beq.n	800c6c0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f003 fe19 	bl	80102d8 <SDMMC_CmdStopTransfer>
 800c6a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d008      	beq.n	800c6c0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	431a      	orrs	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f90e 	bl	800c8dc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f003 0310 	and.w	r3, r3, #16
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d104      	bne.n	800c6e2 <HAL_SD_IRQHandler+0x172>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f003 0320 	and.w	r3, r3, #32
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d002      	beq.n	800c6e8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f005 fe04 	bl	80122f0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f003 0301 	and.w	r3, r3, #1
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d105      	bne.n	800c6fe <HAL_SD_IRQHandler+0x18e>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f003 0302 	and.w	r3, r3, #2
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 80eb 	beq.w	800c8d4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f005 fe00 	bl	8012304 <HAL_SD_RxCpltCallback>
}
 800c704:	e0e6      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c70c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d008      	beq.n	800c726 <HAL_SD_IRQHandler+0x1b6>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f003 0308 	and.w	r3, r3, #8
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 f8ac 	bl	800d87c <SD_Write_IT>
 800c724:	e0d6      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c72c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 80a2 	beq.w	800c87a <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d005      	beq.n	800c750 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c748:	f043 0202 	orr.w	r2, r3, #2
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c756:	f003 0308 	and.w	r3, r3, #8
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d005      	beq.n	800c76a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c762:	f043 0208 	orr.w	r2, r3, #8
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c770:	f003 0320 	and.w	r3, r3, #32
 800c774:	2b00      	cmp	r3, #0
 800c776:	d005      	beq.n	800c784 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77c:	f043 0220 	orr.w	r2, r3, #32
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c78a:	f003 0310 	and.w	r3, r3, #16
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d005      	beq.n	800c79e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c796:	f043 0210 	orr.w	r2, r3, #16
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a26      	ldr	r2, [pc, #152]	; (800c83c <HAL_SD_IRQHandler+0x2cc>)
 800c7a4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c7b4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68da      	ldr	r2, [r3, #12]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7c4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c7d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68da      	ldr	r2, [r3, #12]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7e4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f003 fd74 	bl	80102d8 <SDMMC_CmdStopTransfer>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	431a      	orrs	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68da      	ldr	r2, [r3, #12]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c80a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c814:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f003 0308 	and.w	r3, r3, #8
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00f      	beq.n	800c840 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f854 	bl	800c8dc <HAL_SD_ErrorCallback>
}
 800c834:	e04e      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
 800c836:	bf00      	nop
 800c838:	ffff3ec5 	.word	0xffff3ec5
 800c83c:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c846:	2b00      	cmp	r3, #0
 800c848:	d044      	beq.n	800c8d4 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d040      	beq.n	800c8d4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c860:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2200      	movs	r2, #0
 800c868:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f832 	bl	800c8dc <HAL_SD_ErrorCallback>
}
 800c878:	e02c      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d025      	beq.n	800c8d4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c890:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c898:	f003 0304 	and.w	r3, r3, #4
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10c      	bne.n	800c8ba <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d003      	beq.n	800c8b2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f001 f84e 	bl	800d94c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c8b0:	e010      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f001 f836 	bl	800d924 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c8b8:	e00c      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f003 0320 	and.w	r3, r3, #32
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d003      	beq.n	800c8cc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f001 f837 	bl	800d938 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c8ca:	e003      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f001 f81f 	bl	800d910 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c8d2:	e7ff      	b.n	800c8d4 <HAL_SD_IRQHandler+0x364>
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800c8fa:	bf00      	nop
 800c8fc:	370c      	adds	r7, #12
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
	...

0800c908 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c916:	0f9b      	lsrs	r3, r3, #30
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c922:	0e9b      	lsrs	r3, r3, #26
 800c924:	b2db      	uxtb	r3, r3
 800c926:	f003 030f 	and.w	r3, r3, #15
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c934:	0e1b      	lsrs	r3, r3, #24
 800c936:	b2db      	uxtb	r3, r3
 800c938:	f003 0303 	and.w	r3, r3, #3
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c946:	0c1b      	lsrs	r3, r3, #16
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c952:	0a1b      	lsrs	r3, r3, #8
 800c954:	b2da      	uxtb	r2, r3
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c95e:	b2da      	uxtb	r2, r3
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c968:	0d1b      	lsrs	r3, r3, #20
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c974:	0c1b      	lsrs	r3, r3, #16
 800c976:	b2db      	uxtb	r3, r3
 800c978:	f003 030f 	and.w	r3, r3, #15
 800c97c:	b2da      	uxtb	r2, r3
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c986:	0bdb      	lsrs	r3, r3, #15
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c998:	0b9b      	lsrs	r3, r3, #14
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	f003 0301 	and.w	r3, r3, #1
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9aa:	0b5b      	lsrs	r3, r3, #13
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9bc:	0b1b      	lsrs	r3, r3, #12
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d163      	bne.n	800caa0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9dc:	009a      	lsls	r2, r3, #2
 800c9de:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c9e8:	0f92      	lsrs	r2, r2, #30
 800c9ea:	431a      	orrs	r2, r3
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9f4:	0edb      	lsrs	r3, r3, #27
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	f003 0307 	and.w	r3, r3, #7
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca06:	0e1b      	lsrs	r3, r3, #24
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	f003 0307 	and.w	r3, r3, #7
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca18:	0d5b      	lsrs	r3, r3, #21
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	f003 0307 	and.w	r3, r3, #7
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca2a:	0c9b      	lsrs	r3, r3, #18
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	f003 0307 	and.w	r3, r3, #7
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca3c:	0bdb      	lsrs	r3, r3, #15
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	f003 0307 	and.w	r3, r3, #7
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	7e1b      	ldrb	r3, [r3, #24]
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	f003 0307 	and.w	r3, r3, #7
 800ca5e:	3302      	adds	r3, #2
 800ca60:	2201      	movs	r2, #1
 800ca62:	fa02 f303 	lsl.w	r3, r2, r3
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ca6a:	fb02 f203 	mul.w	r2, r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	7a1b      	ldrb	r3, [r3, #8]
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	f003 030f 	and.w	r3, r3, #15
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	409a      	lsls	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ca8c:	0a52      	lsrs	r2, r2, #9
 800ca8e:	fb02 f203 	mul.w	r2, r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca9c:	659a      	str	r2, [r3, #88]	; 0x58
 800ca9e:	e031      	b.n	800cb04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d11d      	bne.n	800cae4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caac:	041b      	lsls	r3, r3, #16
 800caae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cab6:	0c1b      	lsrs	r3, r3, #16
 800cab8:	431a      	orrs	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	3301      	adds	r3, #1
 800cac4:	029a      	lsls	r2, r3, #10
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cad8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	659a      	str	r2, [r3, #88]	; 0x58
 800cae2:	e00f      	b.n	800cb04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a58      	ldr	r2, [pc, #352]	; (800cc4c <HAL_SD_GetCardCSD+0x344>)
 800caea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e09d      	b.n	800cc40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb08:	0b9b      	lsrs	r3, r3, #14
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb1a:	09db      	lsrs	r3, r3, #7
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb22:	b2da      	uxtb	r2, r3
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb3c:	0fdb      	lsrs	r3, r3, #31
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb48:	0f5b      	lsrs	r3, r3, #29
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	f003 0303 	and.w	r3, r3, #3
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb5a:	0e9b      	lsrs	r3, r3, #26
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	f003 0307 	and.w	r3, r3, #7
 800cb62:	b2da      	uxtb	r2, r3
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb6c:	0d9b      	lsrs	r3, r3, #22
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	f003 030f 	and.w	r3, r3, #15
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb7e:	0d5b      	lsrs	r3, r3, #21
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	f003 0301 	and.w	r3, r3, #1
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb9a:	0c1b      	lsrs	r3, r3, #16
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbae:	0bdb      	lsrs	r3, r3, #15
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	f003 0301 	and.w	r3, r3, #1
 800cbb6:	b2da      	uxtb	r2, r3
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbc2:	0b9b      	lsrs	r3, r3, #14
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd6:	0b5b      	lsrs	r3, r3, #13
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbea:	0b1b      	lsrs	r3, r3, #12
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	f003 0301 	and.w	r3, r3, #1
 800cbf2:	b2da      	uxtb	r2, r3
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbfe:	0a9b      	lsrs	r3, r3, #10
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	f003 0303 	and.w	r3, r3, #3
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc12:	0a1b      	lsrs	r3, r3, #8
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	f003 0303 	and.w	r3, r3, #3
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc26:	085b      	lsrs	r3, r3, #1
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	1fe00fff 	.word	0x1fe00fff

0800cc50 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b094      	sub	sp, #80	; 0x50
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cc60:	f107 0308 	add.w	r3, r7, #8
 800cc64:	4619      	mov	r1, r3
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 fb64 	bl	800d334 <SD_SendSDStatus>
 800cc6c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d011      	beq.n	800cc98 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a4f      	ldr	r2, [pc, #316]	; (800cdb8 <HAL_SD_GetCardStatus+0x168>)
 800cc7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc82:	431a      	orrs	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cc96:	e070      	b.n	800cd7a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	099b      	lsrs	r3, r3, #6
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0303 	and.w	r3, r3, #3
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	095b      	lsrs	r3, r3, #5
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	f003 0301 	and.w	r3, r3, #1
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	0a1b      	lsrs	r3, r3, #8
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	0e1b      	lsrs	r3, r3, #24
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	4313      	orrs	r3, r2
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	061a      	lsls	r2, r3, #24
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	021b      	lsls	r3, r3, #8
 800ccda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccde:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	0a1b      	lsrs	r3, r3, #8
 800cce4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cce8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	0e1b      	lsrs	r3, r3, #24
 800ccee:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	0a1b      	lsrs	r3, r3, #8
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	0d1b      	lsrs	r3, r3, #20
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	f003 030f 	and.w	r3, r3, #15
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	0c1b      	lsrs	r3, r3, #16
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	0a9b      	lsrs	r3, r3, #10
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	0a1b      	lsrs	r3, r3, #8
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	f003 0303 	and.w	r3, r3, #3
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	091b      	lsrs	r3, r3, #4
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	f003 030f 	and.w	r3, r3, #15
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	f003 030f 	and.w	r3, r3, #15
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	0e1b      	lsrs	r3, r3, #24
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd82:	4618      	mov	r0, r3
 800cd84:	f003 f9f8 	bl	8010178 <SDMMC_CmdBlockLength>
 800cd88:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00d      	beq.n	800cdac <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a08      	ldr	r2, [pc, #32]	; (800cdb8 <HAL_SD_GetCardStatus+0x168>)
 800cd96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800cdac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3750      	adds	r7, #80	; 0x50
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	1fe00fff 	.word	0x1fe00fff

0800cdbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ce14:	b5b0      	push	{r4, r5, r7, lr}
 800ce16:	b08e      	sub	sp, #56	; 0x38
 800ce18:	af04      	add	r7, sp, #16
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2203      	movs	r2, #3
 800ce28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce30:	2b03      	cmp	r3, #3
 800ce32:	d02e      	beq.n	800ce92 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce3a:	d106      	bne.n	800ce4a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	639a      	str	r2, [r3, #56]	; 0x38
 800ce48:	e029      	b.n	800ce9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce50:	d10a      	bne.n	800ce68 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fb66 	bl	800d524 <SD_WideBus_Enable>
 800ce58:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce5e:	6a3b      	ldr	r3, [r7, #32]
 800ce60:	431a      	orrs	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	639a      	str	r2, [r3, #56]	; 0x38
 800ce66:	e01a      	b.n	800ce9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10a      	bne.n	800ce84 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fba3 	bl	800d5ba <SD_WideBus_Disable>
 800ce74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	639a      	str	r2, [r3, #56]	; 0x38
 800ce82:	e00c      	b.n	800ce9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	639a      	str	r2, [r3, #56]	; 0x38
 800ce90:	e005      	b.n	800ce9e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d007      	beq.n	800ceb6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a2e      	ldr	r2, [pc, #184]	; (800cf64 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ceac:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ceb4:	e034      	b.n	800cf20 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	695b      	ldr	r3, [r3, #20]
 800ced0:	2b03      	cmp	r3, #3
 800ced2:	d903      	bls.n	800cedc <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	695b      	ldr	r3, [r3, #20]
 800ced8:	61bb      	str	r3, [r7, #24]
 800ceda:	e012      	b.n	800cf02 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cee4:	d103      	bne.n	800ceee <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	695b      	ldr	r3, [r3, #20]
 800ceea:	61bb      	str	r3, [r7, #24]
 800ceec:	e009      	b.n	800cf02 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cef6:	d102      	bne.n	800cefe <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800cef8:	2302      	movs	r3, #2
 800cefa:	61bb      	str	r3, [r7, #24]
 800cefc:	e001      	b.n	800cf02 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800cefe:	2304      	movs	r3, #4
 800cf00:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681d      	ldr	r5, [r3, #0]
 800cf06:	466c      	mov	r4, sp
 800cf08:	f107 0314 	add.w	r3, r7, #20
 800cf0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf14:	f107 0308 	add.w	r3, r7, #8
 800cf18:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	f003 f84e 	bl	800ffbc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f003 f925 	bl	8010178 <SDMMC_CmdBlockLength>
 800cf2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00c      	beq.n	800cf50 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a0a      	ldr	r2, [pc, #40]	; (800cf64 <HAL_SD_ConfigWideBusOperation+0x150>)
 800cf3c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	431a      	orrs	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800cf58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3728      	adds	r7, #40	; 0x28
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bdb0      	pop	{r4, r5, r7, pc}
 800cf64:	1fe00fff 	.word	0x1fe00fff

0800cf68 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cf74:	f107 030c 	add.w	r3, r7, #12
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 faaa 	bl	800d4d4 <SD_SendStatus>
 800cf80:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d005      	beq.n	800cf94 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	0a5b      	lsrs	r3, r3, #9
 800cf98:	f003 030f 	and.w	r3, r3, #15
 800cf9c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cf9e:	693b      	ldr	r3, [r7, #16]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cfa8:	b590      	push	{r4, r7, lr}
 800cfaa:	b091      	sub	sp, #68	; 0x44
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f003 f858 	bl	801006e <SDMMC_GetPowerState>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d102      	bne.n	800cfca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cfc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cfc8:	e0a8      	b.n	800d11c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d02e      	beq.n	800d030 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f003 faa4 	bl	8010524 <SDMMC_CmdSendCID>
 800cfdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <SD_InitCard+0x40>
    {
      return errorstate;
 800cfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe6:	e099      	b.n	800d11c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2100      	movs	r1, #0
 800cfee:	4618      	mov	r0, r3
 800cff0:	f003 f883 	bl	80100fa <SDMMC_GetResponse>
 800cff4:	4602      	mov	r2, r0
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2104      	movs	r1, #4
 800d000:	4618      	mov	r0, r3
 800d002:	f003 f87a 	bl	80100fa <SDMMC_GetResponse>
 800d006:	4602      	mov	r2, r0
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2108      	movs	r1, #8
 800d012:	4618      	mov	r0, r3
 800d014:	f003 f871 	bl	80100fa <SDMMC_GetResponse>
 800d018:	4602      	mov	r2, r0
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	210c      	movs	r1, #12
 800d024:	4618      	mov	r0, r3
 800d026:	f003 f868 	bl	80100fa <SDMMC_GetResponse>
 800d02a:	4602      	mov	r2, r0
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d034:	2b03      	cmp	r3, #3
 800d036:	d00d      	beq.n	800d054 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f107 020e 	add.w	r2, r7, #14
 800d040:	4611      	mov	r1, r2
 800d042:	4618      	mov	r0, r3
 800d044:	f003 faad 	bl	80105a2 <SDMMC_CmdSetRelAdd>
 800d048:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d001      	beq.n	800d054 <SD_InitCard+0xac>
    {
      return errorstate;
 800d050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d052:	e063      	b.n	800d11c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d058:	2b03      	cmp	r3, #3
 800d05a:	d036      	beq.n	800d0ca <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d05c:	89fb      	ldrh	r3, [r7, #14]
 800d05e:	461a      	mov	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d06c:	041b      	lsls	r3, r3, #16
 800d06e:	4619      	mov	r1, r3
 800d070:	4610      	mov	r0, r2
 800d072:	f003 fa76 	bl	8010562 <SDMMC_CmdSendCSD>
 800d076:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <SD_InitCard+0xda>
    {
      return errorstate;
 800d07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d080:	e04c      	b.n	800d11c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2100      	movs	r1, #0
 800d088:	4618      	mov	r0, r3
 800d08a:	f003 f836 	bl	80100fa <SDMMC_GetResponse>
 800d08e:	4602      	mov	r2, r0
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2104      	movs	r1, #4
 800d09a:	4618      	mov	r0, r3
 800d09c:	f003 f82d 	bl	80100fa <SDMMC_GetResponse>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2108      	movs	r1, #8
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f003 f824 	bl	80100fa <SDMMC_GetResponse>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	210c      	movs	r1, #12
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f003 f81b 	bl	80100fa <SDMMC_GetResponse>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2104      	movs	r1, #4
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f003 f812 	bl	80100fa <SDMMC_GetResponse>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	0d1a      	lsrs	r2, r3, #20
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0de:	f107 0310 	add.w	r3, r7, #16
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7ff fc0f 	bl	800c908 <HAL_SD_GetCardCSD>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0f4:	e012      	b.n	800d11c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6819      	ldr	r1, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0fe:	041b      	lsls	r3, r3, #16
 800d100:	f04f 0400 	mov.w	r4, #0
 800d104:	461a      	mov	r2, r3
 800d106:	4623      	mov	r3, r4
 800d108:	4608      	mov	r0, r1
 800d10a:	f003 f921 	bl	8010350 <SDMMC_CmdSelDesel>
 800d10e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <SD_InitCard+0x172>
  {
    return errorstate;
 800d116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d118:	e000      	b.n	800d11c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3744      	adds	r7, #68	; 0x44
 800d120:	46bd      	mov	sp, r7
 800d122:	bd90      	pop	{r4, r7, pc}

0800d124 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d12c:	2300      	movs	r3, #0
 800d12e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800d130:	2300      	movs	r3, #0
 800d132:	61fb      	str	r3, [r7, #28]
 800d134:	2300      	movs	r3, #0
 800d136:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800d138:	f7f6 fa2c 	bl	8003594 <HAL_GetTick>
 800d13c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4618      	mov	r0, r3
 800d144:	f003 f928 	bl	8010398 <SDMMC_CmdGoIdleState>
 800d148:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <SD_PowerON+0x30>
  {
    return errorstate;
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	e0e9      	b.n	800d328 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4618      	mov	r0, r3
 800d15a:	f003 f93b 	bl	80103d4 <SDMMC_CmdOperCond>
 800d15e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00d      	beq.n	800d182 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4618      	mov	r0, r3
 800d172:	f003 f911 	bl	8010398 <SDMMC_CmdGoIdleState>
 800d176:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d004      	beq.n	800d188 <SD_PowerON+0x64>
    {
      return errorstate;
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	e0d2      	b.n	800d328 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d137      	bne.n	800d200 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2100      	movs	r1, #0
 800d196:	4618      	mov	r0, r3
 800d198:	f003 f93c 	bl	8010414 <SDMMC_CmdAppCommand>
 800d19c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d02d      	beq.n	800d200 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1a8:	e0be      	b.n	800d328 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f003 f92f 	bl	8010414 <SDMMC_CmdAppCommand>
 800d1b6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <SD_PowerON+0x9e>
    {
      return errorstate;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	e0b2      	b.n	800d328 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	495a      	ldr	r1, [pc, #360]	; (800d330 <SD_PowerON+0x20c>)
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f003 f946 	bl	801045a <SDMMC_CmdAppOperCommand>
 800d1ce:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1da:	e0a5      	b.n	800d328 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f002 ff89 	bl	80100fa <SDMMC_GetResponse>
 800d1e8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	0fdb      	lsrs	r3, r3, #31
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d101      	bne.n	800d1f6 <SD_PowerON+0xd2>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e000      	b.n	800d1f8 <SD_PowerON+0xd4>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	61bb      	str	r3, [r7, #24]

    count++;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d206:	4293      	cmp	r3, r2
 800d208:	d802      	bhi.n	800d210 <SD_PowerON+0xec>
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d0cc      	beq.n	800d1aa <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d216:	4293      	cmp	r3, r2
 800d218:	d902      	bls.n	800d220 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d21a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d21e:	e083      	b.n	800d328 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d226:	2b00      	cmp	r3, #0
 800d228:	d07d      	beq.n	800d326 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2201      	movs	r2, #1
 800d22e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d176      	bne.n	800d326 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d071      	beq.n	800d326 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d248:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f042 0208 	orr.w	r2, r2, #8
 800d258:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4618      	mov	r0, r3
 800d260:	f003 fa06 	bl	8010670 <SDMMC_CmdVoltageSwitch>
 800d264:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00c      	beq.n	800d286 <SD_PowerON+0x162>
        {
          return errorstate;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	e05b      	b.n	800d328 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d270:	f7f6 f990 	bl	8003594 <HAL_GetTick>
 800d274:	4602      	mov	r2, r0
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d27e:	d102      	bne.n	800d286 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d284:	e050      	b.n	800d328 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d294:	d1ec      	bne.n	800d270 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d29e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2ae:	d002      	beq.n	800d2b6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d2b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2b4:	e038      	b.n	800d328 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800d2b6:	2001      	movs	r0, #1
 800d2b8:	f7ff fb1a 	bl	800c8f0 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f042 0204 	orr.w	r2, r2, #4
 800d2ca:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d2cc:	e00a      	b.n	800d2e4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d2ce:	f7f6 f961 	bl	8003594 <HAL_GetTick>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2dc:	d102      	bne.n	800d2e4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d2de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2e2:	e021      	b.n	800d328 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2f2:	d1ec      	bne.n	800d2ce <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d2fc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d30c:	d102      	bne.n	800d314 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d30e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d312:	e009      	b.n	800d328 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2213      	movs	r2, #19
 800d31a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d324:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d326:	2300      	movs	r3, #0
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	c1100000 	.word	0xc1100000

0800d334 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b08c      	sub	sp, #48	; 0x30
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d33e:	f7f6 f929 	bl	8003594 <HAL_GetTick>
 800d342:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2100      	movs	r1, #0
 800d34e:	4618      	mov	r0, r3
 800d350:	f002 fed3 	bl	80100fa <SDMMC_GetResponse>
 800d354:	4603      	mov	r3, r0
 800d356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d35a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d35e:	d102      	bne.n	800d366 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d364:	e0b0      	b.n	800d4c8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2140      	movs	r1, #64	; 0x40
 800d36c:	4618      	mov	r0, r3
 800d36e:	f002 ff03 	bl	8010178 <SDMMC_CmdBlockLength>
 800d372:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d374:	6a3b      	ldr	r3, [r7, #32]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d005      	beq.n	800d386 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d382:	6a3b      	ldr	r3, [r7, #32]
 800d384:	e0a0      	b.n	800d4c8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d38e:	041b      	lsls	r3, r3, #16
 800d390:	4619      	mov	r1, r3
 800d392:	4610      	mov	r0, r2
 800d394:	f003 f83e 	bl	8010414 <SDMMC_CmdAppCommand>
 800d398:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d39a:	6a3b      	ldr	r3, [r7, #32]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d005      	beq.n	800d3ac <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
 800d3aa:	e08d      	b.n	800d4c8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3b0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d3b2:	2340      	movs	r3, #64	; 0x40
 800d3b4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d3b6:	2360      	movs	r3, #96	; 0x60
 800d3b8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f107 0208 	add.w	r2, r7, #8
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f002 fea5 	bl	8010120 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f003 f926 	bl	801062c <SDMMC_CmdStatusRegister>
 800d3e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d02b      	beq.n	800d440 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	e069      	b.n	800d4c8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d013      	beq.n	800d42a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800d402:	2300      	movs	r3, #0
 800d404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d406:	e00d      	b.n	800d424 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f002 fdff 	bl	8010010 <SDMMC_ReadFIFO>
 800d412:	4602      	mov	r2, r0
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	601a      	str	r2, [r3, #0]
        pData++;
 800d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41a:	3304      	adds	r3, #4
 800d41c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	3301      	adds	r3, #1
 800d422:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	2b07      	cmp	r3, #7
 800d428:	d9ee      	bls.n	800d408 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d42a:	f7f6 f8b3 	bl	8003594 <HAL_GetTick>
 800d42e:	4602      	mov	r2, r0
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d438:	d102      	bne.n	800d440 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d43a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d43e:	e043      	b.n	800d4c8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d446:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d0d2      	beq.n	800d3f4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d454:	f003 0308 	and.w	r3, r3, #8
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d45c:	2308      	movs	r3, #8
 800d45e:	e033      	b.n	800d4c8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d466:	f003 0302 	and.w	r3, r3, #2
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d46e:	2302      	movs	r3, #2
 800d470:	e02a      	b.n	800d4c8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d478:	f003 0320 	and.w	r3, r3, #32
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d017      	beq.n	800d4b0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d480:	2320      	movs	r3, #32
 800d482:	e021      	b.n	800d4c8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4618      	mov	r0, r3
 800d48a:	f002 fdc1 	bl	8010010 <SDMMC_ReadFIFO>
 800d48e:	4602      	mov	r2, r0
 800d490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d492:	601a      	str	r2, [r3, #0]
    pData++;
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	3304      	adds	r3, #4
 800d498:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d49a:	f7f6 f87b 	bl	8003594 <HAL_GetTick>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	1ad3      	subs	r3, r2, r3
 800d4a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4a8:	d102      	bne.n	800d4b0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d4aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4ae:	e00b      	b.n	800d4c8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1e2      	bne.n	800d484 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a03      	ldr	r2, [pc, #12]	; (800d4d0 <SD_SendSDStatus+0x19c>)
 800d4c4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3730      	adds	r7, #48	; 0x30
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	18000f3a 	.word	0x18000f3a

0800d4d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d102      	bne.n	800d4ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d4e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d4e8:	e018      	b.n	800d51c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4f2:	041b      	lsls	r3, r3, #16
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	f003 f875 	bl	80105e6 <SDMMC_CmdSendStatus>
 800d4fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	e009      	b.n	800d51c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2100      	movs	r1, #0
 800d50e:	4618      	mov	r0, r3
 800d510:	f002 fdf3 	bl	80100fa <SDMMC_GetResponse>
 800d514:	4602      	mov	r2, r0
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b086      	sub	sp, #24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d52c:	2300      	movs	r3, #0
 800d52e:	60fb      	str	r3, [r7, #12]
 800d530:	2300      	movs	r3, #0
 800d532:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2100      	movs	r1, #0
 800d53a:	4618      	mov	r0, r3
 800d53c:	f002 fddd 	bl	80100fa <SDMMC_GetResponse>
 800d540:	4603      	mov	r3, r0
 800d542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d54a:	d102      	bne.n	800d552 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d54c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d550:	e02f      	b.n	800d5b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d552:	f107 030c 	add.w	r3, r7, #12
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 f879 	bl	800d650 <SD_FindSCR>
 800d55e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	e023      	b.n	800d5b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d570:	2b00      	cmp	r3, #0
 800d572:	d01c      	beq.n	800d5ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d57c:	041b      	lsls	r3, r3, #16
 800d57e:	4619      	mov	r1, r3
 800d580:	4610      	mov	r0, r2
 800d582:	f002 ff47 	bl	8010414 <SDMMC_CmdAppCommand>
 800d586:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d001      	beq.n	800d592 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	e00f      	b.n	800d5b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2102      	movs	r1, #2
 800d598:	4618      	mov	r0, r3
 800d59a:	f002 ff7e 	bl	801049a <SDMMC_CmdBusWidth>
 800d59e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d001      	beq.n	800d5aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	e003      	b.n	800d5b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e001      	b.n	800d5b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3718      	adds	r7, #24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b086      	sub	sp, #24
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f002 fd92 	bl	80100fa <SDMMC_GetResponse>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5e0:	d102      	bne.n	800d5e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d5e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5e6:	e02f      	b.n	800d648 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d5e8:	f107 030c 	add.w	r3, r7, #12
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f82e 	bl	800d650 <SD_FindSCR>
 800d5f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	e023      	b.n	800d648 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d606:	2b00      	cmp	r3, #0
 800d608:	d01c      	beq.n	800d644 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d612:	041b      	lsls	r3, r3, #16
 800d614:	4619      	mov	r1, r3
 800d616:	4610      	mov	r0, r2
 800d618:	f002 fefc 	bl	8010414 <SDMMC_CmdAppCommand>
 800d61c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	e00f      	b.n	800d648 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2100      	movs	r1, #0
 800d62e:	4618      	mov	r0, r3
 800d630:	f002 ff33 	bl	801049a <SDMMC_CmdBusWidth>
 800d634:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d001      	beq.n	800d640 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	e003      	b.n	800d648 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d640:	2300      	movs	r3, #0
 800d642:	e001      	b.n	800d648 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d644:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3718      	adds	r7, #24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b08e      	sub	sp, #56	; 0x38
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d65a:	f7f5 ff9b 	bl	8003594 <HAL_GetTick>
 800d65e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d664:	2300      	movs	r3, #0
 800d666:	60bb      	str	r3, [r7, #8]
 800d668:	2300      	movs	r3, #0
 800d66a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2108      	movs	r1, #8
 800d676:	4618      	mov	r0, r3
 800d678:	f002 fd7e 	bl	8010178 <SDMMC_CmdBlockLength>
 800d67c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d686:	e0ad      	b.n	800d7e4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d690:	041b      	lsls	r3, r3, #16
 800d692:	4619      	mov	r1, r3
 800d694:	4610      	mov	r0, r2
 800d696:	f002 febd 	bl	8010414 <SDMMC_CmdAppCommand>
 800d69a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d001      	beq.n	800d6a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	e09e      	b.n	800d7e4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d6ac:	2308      	movs	r3, #8
 800d6ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d6b0:	2330      	movs	r3, #48	; 0x30
 800d6b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f107 0210 	add.w	r2, r7, #16
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f002 fd28 	bl	8010120 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f002 ff03 	bl	80104e0 <SDMMC_CmdSendSCR>
 800d6da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d027      	beq.n	800d732 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e4:	e07e      	b.n	800d7e4 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d113      	bne.n	800d71c <SD_FindSCR+0xcc>
 800d6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d110      	bne.n	800d71c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f002 fc86 	bl	8010010 <SDMMC_ReadFIFO>
 800d704:	4603      	mov	r3, r0
 800d706:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f002 fc7f 	bl	8010010 <SDMMC_ReadFIFO>
 800d712:	4603      	mov	r3, r0
 800d714:	60fb      	str	r3, [r7, #12]
      index++;
 800d716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d718:	3301      	adds	r3, #1
 800d71a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d71c:	f7f5 ff3a 	bl	8003594 <HAL_GetTick>
 800d720:	4602      	mov	r2, r0
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d72a:	d102      	bne.n	800d732 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d72c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d730:	e058      	b.n	800d7e4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d738:	f240 532a 	movw	r3, #1322	; 0x52a
 800d73c:	4013      	ands	r3, r2
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0d1      	beq.n	800d6e6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d748:	f003 0308 	and.w	r3, r3, #8
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d005      	beq.n	800d75c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2208      	movs	r2, #8
 800d756:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d758:	2308      	movs	r3, #8
 800d75a:	e043      	b.n	800d7e4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d762:	f003 0302 	and.w	r3, r3, #2
 800d766:	2b00      	cmp	r3, #0
 800d768:	d005      	beq.n	800d776 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2202      	movs	r2, #2
 800d770:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d772:	2302      	movs	r3, #2
 800d774:	e036      	b.n	800d7e4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77c:	f003 0320 	and.w	r3, r3, #32
 800d780:	2b00      	cmp	r3, #0
 800d782:	d005      	beq.n	800d790 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2220      	movs	r2, #32
 800d78a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d78c:	2320      	movs	r3, #32
 800d78e:	e029      	b.n	800d7e4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a15      	ldr	r2, [pc, #84]	; (800d7ec <SD_FindSCR+0x19c>)
 800d796:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	061a      	lsls	r2, r3, #24
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	021b      	lsls	r3, r3, #8
 800d7a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d7a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	0a1b      	lsrs	r3, r3, #8
 800d7aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	0e1b      	lsrs	r3, r3, #24
 800d7b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	601a      	str	r2, [r3, #0]
    scr++;
 800d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7bc:	3304      	adds	r3, #4
 800d7be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	061a      	lsls	r2, r3, #24
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	021b      	lsls	r3, r3, #8
 800d7c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d7cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	0a1b      	lsrs	r3, r3, #8
 800d7d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	0e1b      	lsrs	r3, r3, #24
 800d7dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3738      	adds	r7, #56	; 0x38
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	18000f3a 	.word	0x18000f3a

0800d7f0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7fc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d802:	2b1f      	cmp	r3, #31
 800d804:	d936      	bls.n	800d874 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d806:	2300      	movs	r3, #0
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	e027      	b.n	800d85c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4618      	mov	r0, r3
 800d812:	f002 fbfd 	bl	8010010 <SDMMC_ReadFIFO>
 800d816:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	3301      	adds	r3, #1
 800d824:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	0a1b      	lsrs	r3, r3, #8
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	3301      	adds	r3, #1
 800d834:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	0c1b      	lsrs	r3, r3, #16
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	3301      	adds	r3, #1
 800d844:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	0e1b      	lsrs	r3, r3, #24
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	3301      	adds	r3, #1
 800d854:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	3301      	adds	r3, #1
 800d85a:	617b      	str	r3, [r7, #20]
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	2b07      	cmp	r3, #7
 800d860:	d9d4      	bls.n	800d80c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86c:	f1a3 0220 	sub.w	r2, r3, #32
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d874:	bf00      	nop
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6a1b      	ldr	r3, [r3, #32]
 800d888:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88e:	2b1f      	cmp	r3, #31
 800d890:	d93a      	bls.n	800d908 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d892:	2300      	movs	r3, #0
 800d894:	617b      	str	r3, [r7, #20]
 800d896:	e02b      	b.n	800d8f0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	021a      	lsls	r2, r3, #8
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	041a      	lsls	r2, r3, #16
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	061a      	lsls	r2, r3, #24
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f107 020c 	add.w	r2, r7, #12
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f002 fba0 	bl	801002a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	617b      	str	r3, [r7, #20]
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	2b07      	cmp	r3, #7
 800d8f4:	d9d0      	bls.n	800d898 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d900:	f1a3 0220 	sub.w	r2, r3, #32
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d908:	bf00      	nop
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d92c:	bf00      	nop
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800d968:	2300      	movs	r3, #0
 800d96a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	e0e2      	b.n	800db3c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a70      	ldr	r2, [pc, #448]	; (800db44 <HAL_SPI_Init+0x1e4>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d00f      	beq.n	800d9a6 <HAL_SPI_Init+0x46>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a6f      	ldr	r2, [pc, #444]	; (800db48 <HAL_SPI_Init+0x1e8>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d00a      	beq.n	800d9a6 <HAL_SPI_Init+0x46>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a6d      	ldr	r2, [pc, #436]	; (800db4c <HAL_SPI_Init+0x1ec>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d005      	beq.n	800d9a6 <HAL_SPI_Init+0x46>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	2b0f      	cmp	r3, #15
 800d9a0:	d901      	bls.n	800d9a6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e0ca      	b.n	800db3c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f001 f870 	bl	800ea8c <SPI_GetPacketSize>
 800d9ac:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a64      	ldr	r2, [pc, #400]	; (800db44 <HAL_SPI_Init+0x1e4>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00c      	beq.n	800d9d2 <HAL_SPI_Init+0x72>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a62      	ldr	r2, [pc, #392]	; (800db48 <HAL_SPI_Init+0x1e8>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d007      	beq.n	800d9d2 <HAL_SPI_Init+0x72>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a61      	ldr	r2, [pc, #388]	; (800db4c <HAL_SPI_Init+0x1ec>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d002      	beq.n	800d9d2 <HAL_SPI_Init+0x72>
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b08      	cmp	r3, #8
 800d9d0:	d811      	bhi.n	800d9f6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9d6:	4a5b      	ldr	r2, [pc, #364]	; (800db44 <HAL_SPI_Init+0x1e4>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d009      	beq.n	800d9f0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a59      	ldr	r2, [pc, #356]	; (800db48 <HAL_SPI_Init+0x1e8>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d004      	beq.n	800d9f0 <HAL_SPI_Init+0x90>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a58      	ldr	r2, [pc, #352]	; (800db4c <HAL_SPI_Init+0x1ec>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d104      	bne.n	800d9fa <HAL_SPI_Init+0x9a>
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b10      	cmp	r3, #16
 800d9f4:	d901      	bls.n	800d9fa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e0a0      	b.n	800db3c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da00:	b2db      	uxtb	r3, r3
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7f5 fa92 	bl	8002f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2202      	movs	r2, #2
 800da18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f022 0201 	bic.w	r2, r2, #1
 800da2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da34:	d110      	bne.n	800da58 <HAL_SPI_Init+0xf8>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da3e:	d10b      	bne.n	800da58 <HAL_SPI_Init+0xf8>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da44:	2b00      	cmp	r3, #0
 800da46:	d107      	bne.n	800da58 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800da56:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	69da      	ldr	r2, [r3, #28]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da60:	431a      	orrs	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	431a      	orrs	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da6a:	ea42 0103 	orr.w	r1, r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	68da      	ldr	r2, [r3, #12]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	430a      	orrs	r2, r1
 800da78:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da82:	431a      	orrs	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da88:	431a      	orrs	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	431a      	orrs	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	431a      	orrs	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	695b      	ldr	r3, [r3, #20]
 800da9a:	431a      	orrs	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6a1b      	ldr	r3, [r3, #32]
 800daa0:	431a      	orrs	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	431a      	orrs	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daac:	431a      	orrs	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	431a      	orrs	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dab8:	ea42 0103 	orr.w	r1, r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	430a      	orrs	r2, r1
 800dac6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d113      	bne.n	800daf8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dae2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800daf6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f022 0201 	bic.w	r2, r2, #1
 800db06:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	430a      	orrs	r2, r1
 800db28:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	40013000 	.word	0x40013000
 800db48:	40003800 	.word	0x40003800
 800db4c:	40003c00 	.word	0x40003c00

0800db50 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b08a      	sub	sp, #40	; 0x28
 800db54:	af02      	add	r7, sp, #8
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	603b      	str	r3, [r7, #0]
 800db5c:	4613      	mov	r3, r2
 800db5e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3320      	adds	r3, #32
 800db66:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db68:	2300      	movs	r3, #0
 800db6a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db72:	2b01      	cmp	r3, #1
 800db74:	d101      	bne.n	800db7a <HAL_SPI_Transmit+0x2a>
 800db76:	2302      	movs	r3, #2
 800db78:	e1d7      	b.n	800df2a <HAL_SPI_Transmit+0x3da>
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db82:	f7f5 fd07 	bl	8003594 <HAL_GetTick>
 800db86:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b01      	cmp	r3, #1
 800db92:	d007      	beq.n	800dba4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800db94:	2302      	movs	r3, #2
 800db96:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dba0:	7efb      	ldrb	r3, [r7, #27]
 800dba2:	e1c2      	b.n	800df2a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d002      	beq.n	800dbb0 <HAL_SPI_Transmit+0x60>
 800dbaa:	88fb      	ldrh	r3, [r7, #6]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d107      	bne.n	800dbc0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dbbc:	7efb      	ldrb	r3, [r7, #27]
 800dbbe:	e1b4      	b.n	800df2a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2203      	movs	r2, #3
 800dbc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	88fa      	ldrh	r2, [r7, #6]
 800dbda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	88fa      	ldrh	r2, [r7, #6]
 800dbe2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dc10:	d107      	bne.n	800dc22 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc20:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	685a      	ldr	r2, [r3, #4]
 800dc28:	4b96      	ldr	r3, [pc, #600]	; (800de84 <HAL_SPI_Transmit+0x334>)
 800dc2a:	4013      	ands	r3, r2
 800dc2c:	88f9      	ldrh	r1, [r7, #6]
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	6812      	ldr	r2, [r2, #0]
 800dc32:	430b      	orrs	r3, r1
 800dc34:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f042 0201 	orr.w	r2, r2, #1
 800dc44:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc4e:	d107      	bne.n	800dc60 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	2b0f      	cmp	r3, #15
 800dc66:	d947      	bls.n	800dcf8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dc68:	e03f      	b.n	800dcea <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	f003 0302 	and.w	r3, r3, #2
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d114      	bne.n	800dca2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	6812      	ldr	r2, [r2, #0]
 800dc82:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc88:	1d1a      	adds	r2, r3, #4
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	3b01      	subs	r3, #1
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dca0:	e023      	b.n	800dcea <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dca2:	f7f5 fc77 	bl	8003594 <HAL_GetTick>
 800dca6:	4602      	mov	r2, r0
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d803      	bhi.n	800dcba <HAL_SPI_Transmit+0x16a>
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcb8:	d102      	bne.n	800dcc0 <HAL_SPI_Transmit+0x170>
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d114      	bne.n	800dcea <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f000 fe15 	bl	800e8f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	e11f      	b.n	800df2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1b9      	bne.n	800dc6a <HAL_SPI_Transmit+0x11a>
 800dcf6:	e0f2      	b.n	800dede <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	2b07      	cmp	r3, #7
 800dcfe:	f240 80e7 	bls.w	800ded0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dd02:	e05d      	b.n	800ddc0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	f003 0302 	and.w	r3, r3, #2
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d132      	bne.n	800dd78 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d918      	bls.n	800dd50 <HAL_SPI_Transmit+0x200>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d014      	beq.n	800dd50 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6812      	ldr	r2, [r2, #0]
 800dd30:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd36:	1d1a      	adds	r2, r3, #4
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	3b02      	subs	r3, #2
 800dd46:	b29a      	uxth	r2, r3
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd4e:	e037      	b.n	800ddc0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd54:	881a      	ldrh	r2, [r3, #0]
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd5e:	1c9a      	adds	r2, r3, #2
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd76:	e023      	b.n	800ddc0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd78:	f7f5 fc0c 	bl	8003594 <HAL_GetTick>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d803      	bhi.n	800dd90 <HAL_SPI_Transmit+0x240>
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd8e:	d102      	bne.n	800dd96 <HAL_SPI_Transmit+0x246>
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d114      	bne.n	800ddc0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f000 fdaa 	bl	800e8f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e0b4      	b.n	800df2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d19b      	bne.n	800dd04 <HAL_SPI_Transmit+0x1b4>
 800ddcc:	e087      	b.n	800dede <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	695b      	ldr	r3, [r3, #20]
 800ddd4:	f003 0302 	and.w	r3, r3, #2
 800ddd8:	2b02      	cmp	r3, #2
 800ddda:	d155      	bne.n	800de88 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	2b03      	cmp	r3, #3
 800dde6:	d918      	bls.n	800de1a <HAL_SPI_Transmit+0x2ca>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddec:	2b40      	cmp	r3, #64	; 0x40
 800ddee:	d914      	bls.n	800de1a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6812      	ldr	r2, [r2, #0]
 800ddfa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de00:	1d1a      	adds	r2, r3, #4
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	3b04      	subs	r3, #4
 800de10:	b29a      	uxth	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de18:	e05a      	b.n	800ded0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de20:	b29b      	uxth	r3, r3
 800de22:	2b01      	cmp	r3, #1
 800de24:	d917      	bls.n	800de56 <HAL_SPI_Transmit+0x306>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d013      	beq.n	800de56 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de32:	881a      	ldrh	r2, [r3, #0]
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de3c:	1c9a      	adds	r2, r3, #2
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de48:	b29b      	uxth	r3, r3
 800de4a:	3b02      	subs	r3, #2
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de54:	e03c      	b.n	800ded0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	3320      	adds	r3, #32
 800de60:	7812      	ldrb	r2, [r2, #0]
 800de62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de68:	1c5a      	adds	r2, r3, #1
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de74:	b29b      	uxth	r3, r3
 800de76:	3b01      	subs	r3, #1
 800de78:	b29a      	uxth	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de80:	e026      	b.n	800ded0 <HAL_SPI_Transmit+0x380>
 800de82:	bf00      	nop
 800de84:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de88:	f7f5 fb84 	bl	8003594 <HAL_GetTick>
 800de8c:	4602      	mov	r2, r0
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	683a      	ldr	r2, [r7, #0]
 800de94:	429a      	cmp	r2, r3
 800de96:	d803      	bhi.n	800dea0 <HAL_SPI_Transmit+0x350>
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de9e:	d102      	bne.n	800dea6 <HAL_SPI_Transmit+0x356>
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d114      	bne.n	800ded0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f000 fd22 	bl	800e8f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800deba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2201      	movs	r2, #1
 800dec8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800decc:	2301      	movs	r3, #1
 800dece:	e02c      	b.n	800df2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f47f af78 	bne.w	800ddce <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	2200      	movs	r2, #0
 800dee6:	2108      	movs	r1, #8
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f000 fda1 	bl	800ea30 <SPI_WaitOnFlagUntilTimeout>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d007      	beq.n	800df04 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800defa:	f043 0220 	orr.w	r2, r3, #32
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 fcf3 	bl	800e8f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2201      	movs	r2, #1
 800df16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800df24:	2301      	movs	r3, #1
 800df26:	e000      	b.n	800df2a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800df28:	7efb      	ldrb	r3, [r7, #27]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3720      	adds	r7, #32
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop

0800df34 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b08a      	sub	sp, #40	; 0x28
 800df38:	af02      	add	r7, sp, #8
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	4613      	mov	r3, r2
 800df42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df44:	2300      	movs	r3, #0
 800df46:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	3330      	adds	r3, #48	; 0x30
 800df4e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df58:	d112      	bne.n	800df80 <HAL_SPI_Receive+0x4c>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10e      	bne.n	800df80 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2204      	movs	r2, #4
 800df66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800df6a:	88fa      	ldrh	r2, [r7, #6]
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	4613      	mov	r3, r2
 800df72:	68ba      	ldr	r2, [r7, #8]
 800df74:	68b9      	ldr	r1, [r7, #8]
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f000 f9ce 	bl	800e318 <HAL_SPI_TransmitReceive>
 800df7c:	4603      	mov	r3, r0
 800df7e:	e1c7      	b.n	800e310 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df86:	2b01      	cmp	r3, #1
 800df88:	d101      	bne.n	800df8e <HAL_SPI_Receive+0x5a>
 800df8a:	2302      	movs	r3, #2
 800df8c:	e1c0      	b.n	800e310 <HAL_SPI_Receive+0x3dc>
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2201      	movs	r2, #1
 800df92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df96:	f7f5 fafd 	bl	8003594 <HAL_GetTick>
 800df9a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d007      	beq.n	800dfb8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfb4:	7ffb      	ldrb	r3, [r7, #31]
 800dfb6:	e1ab      	b.n	800e310 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d002      	beq.n	800dfc4 <HAL_SPI_Receive+0x90>
 800dfbe:	88fb      	ldrh	r3, [r7, #6]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d107      	bne.n	800dfd4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dfd0:	7ffb      	ldrb	r3, [r7, #31]
 800dfd2:	e19d      	b.n	800e310 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2204      	movs	r2, #4
 800dfd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	88fa      	ldrh	r2, [r7, #6]
 800dfee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	88fa      	ldrh	r2, [r7, #6]
 800dff6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2200      	movs	r2, #0
 800e014:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2200      	movs	r2, #0
 800e01a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e024:	d107      	bne.n	800e036 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e034:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	4b94      	ldr	r3, [pc, #592]	; (800e290 <HAL_SPI_Receive+0x35c>)
 800e03e:	4013      	ands	r3, r2
 800e040:	88f9      	ldrh	r1, [r7, #6]
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	6812      	ldr	r2, [r2, #0]
 800e046:	430b      	orrs	r3, r1
 800e048:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f042 0201 	orr.w	r2, r2, #1
 800e058:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e062:	d107      	bne.n	800e074 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e072:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	2b0f      	cmp	r3, #15
 800e07a:	d948      	bls.n	800e10e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e07c:	e040      	b.n	800e100 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	695a      	ldr	r2, [r3, #20]
 800e084:	f248 0308 	movw	r3, #32776	; 0x8008
 800e088:	4013      	ands	r3, r2
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d014      	beq.n	800e0b8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e096:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e098:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e09e:	1d1a      	adds	r2, r3, #4
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0b6:	e023      	b.n	800e100 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0b8:	f7f5 fa6c 	bl	8003594 <HAL_GetTick>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d803      	bhi.n	800e0d0 <HAL_SPI_Receive+0x19c>
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0ce:	d102      	bne.n	800e0d6 <HAL_SPI_Receive+0x1a2>
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d114      	bne.n	800e100 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f000 fc0a 	bl	800e8f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e107      	b.n	800e310 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e106:	b29b      	uxth	r3, r3
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1b8      	bne.n	800e07e <HAL_SPI_Receive+0x14a>
 800e10c:	e0ed      	b.n	800e2ea <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	2b07      	cmp	r3, #7
 800e114:	f240 80e2 	bls.w	800e2dc <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e118:	e05b      	b.n	800e1d2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	695b      	ldr	r3, [r3, #20]
 800e120:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e124:	2b00      	cmp	r3, #0
 800e126:	d030      	beq.n	800e18a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	695b      	ldr	r3, [r3, #20]
 800e12e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e132:	2b00      	cmp	r3, #0
 800e134:	d014      	beq.n	800e160 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e13e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e140:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e146:	1d1a      	adds	r2, r3, #4
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e152:	b29b      	uxth	r3, r3
 800e154:	3b02      	subs	r3, #2
 800e156:	b29a      	uxth	r2, r3
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e15e:	e038      	b.n	800e1d2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e164:	69ba      	ldr	r2, [r7, #24]
 800e166:	8812      	ldrh	r2, [r2, #0]
 800e168:	b292      	uxth	r2, r2
 800e16a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e170:	1c9a      	adds	r2, r3, #2
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	3b01      	subs	r3, #1
 800e180:	b29a      	uxth	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e188:	e023      	b.n	800e1d2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e18a:	f7f5 fa03 	bl	8003594 <HAL_GetTick>
 800e18e:	4602      	mov	r2, r0
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d803      	bhi.n	800e1a2 <HAL_SPI_Receive+0x26e>
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1a0:	d102      	bne.n	800e1a8 <HAL_SPI_Receive+0x274>
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d114      	bne.n	800e1d2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f000 fba1 	bl	800e8f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e09e      	b.n	800e310 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d19d      	bne.n	800e11a <HAL_SPI_Receive+0x1e6>
 800e1de:	e084      	b.n	800e2ea <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	695b      	ldr	r3, [r3, #20]
 800e1e6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d052      	beq.n	800e294 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d014      	beq.n	800e226 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e204:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e206:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20c:	1d1a      	adds	r2, r3, #4
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e218:	b29b      	uxth	r3, r3
 800e21a:	3b04      	subs	r3, #4
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e224:	e05a      	b.n	800e2dc <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e234:	d914      	bls.n	800e260 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e23a:	69ba      	ldr	r2, [r7, #24]
 800e23c:	8812      	ldrh	r2, [r2, #0]
 800e23e:	b292      	uxth	r2, r2
 800e240:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e246:	1c9a      	adds	r2, r3, #2
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e252:	b29b      	uxth	r3, r3
 800e254:	3b02      	subs	r3, #2
 800e256:	b29a      	uxth	r2, r3
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e25e:	e03d      	b.n	800e2dc <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e26c:	7812      	ldrb	r2, [r2, #0]
 800e26e:	b2d2      	uxtb	r2, r2
 800e270:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e276:	1c5a      	adds	r2, r3, #1
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e282:	b29b      	uxth	r3, r3
 800e284:	3b01      	subs	r3, #1
 800e286:	b29a      	uxth	r2, r3
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e28e:	e025      	b.n	800e2dc <HAL_SPI_Receive+0x3a8>
 800e290:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e294:	f7f5 f97e 	bl	8003594 <HAL_GetTick>
 800e298:	4602      	mov	r2, r0
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	683a      	ldr	r2, [r7, #0]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d803      	bhi.n	800e2ac <HAL_SPI_Receive+0x378>
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2aa:	d102      	bne.n	800e2b2 <HAL_SPI_Receive+0x37e>
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d114      	bne.n	800e2dc <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e2b2:	68f8      	ldr	r0, [r7, #12]
 800e2b4:	f000 fb1c 	bl	800e8f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e019      	b.n	800e310 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f47f af7b 	bne.w	800e1e0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f000 fb00 	bl	800e8f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e30a:	2301      	movs	r3, #1
 800e30c:	e000      	b.n	800e310 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e30e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3720      	adds	r7, #32
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08e      	sub	sp, #56	; 0x38
 800e31c:	af02      	add	r7, sp, #8
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
 800e324:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e326:	2300      	movs	r3, #0
 800e328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	3320      	adds	r3, #32
 800e332:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	3330      	adds	r3, #48	; 0x30
 800e33a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e342:	2b01      	cmp	r3, #1
 800e344:	d101      	bne.n	800e34a <HAL_SPI_TransmitReceive+0x32>
 800e346:	2302      	movs	r3, #2
 800e348:	e2ce      	b.n	800e8e8 <HAL_SPI_TransmitReceive+0x5d0>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e352:	f7f5 f91f 	bl	8003594 <HAL_GetTick>
 800e356:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e358:	887b      	ldrh	r3, [r7, #2]
 800e35a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e35c:	887b      	ldrh	r3, [r7, #2]
 800e35e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e366:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e36e:	7efb      	ldrb	r3, [r7, #27]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d014      	beq.n	800e39e <HAL_SPI_TransmitReceive+0x86>
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e37a:	d106      	bne.n	800e38a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <HAL_SPI_TransmitReceive+0x72>
 800e384:	7efb      	ldrb	r3, [r7, #27]
 800e386:	2b04      	cmp	r3, #4
 800e388:	d009      	beq.n	800e39e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e38a:	2302      	movs	r3, #2
 800e38c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e398:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e39c:	e2a4      	b.n	800e8e8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d005      	beq.n	800e3b0 <HAL_SPI_TransmitReceive+0x98>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d002      	beq.n	800e3b0 <HAL_SPI_TransmitReceive+0x98>
 800e3aa:	887b      	ldrh	r3, [r7, #2]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d109      	bne.n	800e3c4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e3be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e3c2:	e291      	b.n	800e8e8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b04      	cmp	r3, #4
 800e3ce:	d003      	beq.n	800e3d8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2205      	movs	r2, #5
 800e3d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	887a      	ldrh	r2, [r7, #2]
 800e3ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	887a      	ldrh	r2, [r7, #2]
 800e3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	887a      	ldrh	r2, [r7, #2]
 800e400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	887a      	ldrh	r2, [r7, #2]
 800e408:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2200      	movs	r2, #0
 800e410:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	4b9f      	ldr	r3, [pc, #636]	; (800e69c <HAL_SPI_TransmitReceive+0x384>)
 800e420:	4013      	ands	r3, r2
 800e422:	8879      	ldrh	r1, [r7, #2]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	430b      	orrs	r3, r1
 800e42a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0201 	orr.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e444:	d107      	bne.n	800e456 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e454:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	2b0f      	cmp	r3, #15
 800e45c:	d970      	bls.n	800e540 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e45e:	e068      	b.n	800e532 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	f003 0302 	and.w	r3, r3, #2
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d11a      	bne.n	800e4a4 <HAL_SPI_TransmitReceive+0x18c>
 800e46e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e470:	2b00      	cmp	r3, #0
 800e472:	d017      	beq.n	800e4a4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	6812      	ldr	r2, [r2, #0]
 800e47e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e484:	1d1a      	adds	r2, r3, #4
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e490:	b29b      	uxth	r3, r3
 800e492:	3b01      	subs	r3, #1
 800e494:	b29a      	uxth	r2, r3
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	695a      	ldr	r2, [r3, #20]
 800e4aa:	f248 0308 	movw	r3, #32776	; 0x8008
 800e4ae:	4013      	ands	r3, r2
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d01a      	beq.n	800e4ea <HAL_SPI_TransmitReceive+0x1d2>
 800e4b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d017      	beq.n	800e4ea <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ca:	1d1a      	adds	r2, r3, #4
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4ea:	f7f5 f853 	bl	8003594 <HAL_GetTick>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d803      	bhi.n	800e502 <HAL_SPI_TransmitReceive+0x1ea>
 800e4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e500:	d102      	bne.n	800e508 <HAL_SPI_TransmitReceive+0x1f0>
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	2b00      	cmp	r3, #0
 800e506:	d114      	bne.n	800e532 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 f9f1 	bl	800e8f0 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e51c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2201      	movs	r2, #1
 800e52a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e52e:	2301      	movs	r3, #1
 800e530:	e1da      	b.n	800e8e8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e532:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e534:	2b00      	cmp	r3, #0
 800e536:	d193      	bne.n	800e460 <HAL_SPI_TransmitReceive+0x148>
 800e538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d190      	bne.n	800e460 <HAL_SPI_TransmitReceive+0x148>
 800e53e:	e1ac      	b.n	800e89a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	2b07      	cmp	r3, #7
 800e546:	f240 81a0 	bls.w	800e88a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e54a:	e0a9      	b.n	800e6a0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	695b      	ldr	r3, [r3, #20]
 800e552:	f003 0302 	and.w	r3, r3, #2
 800e556:	2b02      	cmp	r3, #2
 800e558:	d139      	bne.n	800e5ce <HAL_SPI_TransmitReceive+0x2b6>
 800e55a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d036      	beq.n	800e5ce <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e560:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e562:	2b01      	cmp	r3, #1
 800e564:	d91c      	bls.n	800e5a0 <HAL_SPI_TransmitReceive+0x288>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d018      	beq.n	800e5a0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6812      	ldr	r2, [r2, #0]
 800e578:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e57e:	1d1a      	adds	r2, r3, #4
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	3b02      	subs	r3, #2
 800e58e:	b29a      	uxth	r2, r3
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e59c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e59e:	e016      	b.n	800e5ce <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5a4:	881a      	ldrh	r2, [r3, #0]
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5ae:	1c9a      	adds	r2, r3, #2
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	695b      	ldr	r3, [r3, #20]
 800e5d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d03a      	beq.n	800e652 <HAL_SPI_TransmitReceive+0x33a>
 800e5dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d037      	beq.n	800e652 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d018      	beq.n	800e622 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e5fa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e600:	1d1a      	adds	r2, r3, #4
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	3b02      	subs	r3, #2
 800e610:	b29a      	uxth	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e61e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e620:	e017      	b.n	800e652 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e626:	6a3a      	ldr	r2, [r7, #32]
 800e628:	8812      	ldrh	r2, [r2, #0]
 800e62a:	b292      	uxth	r2, r2
 800e62c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e632:	1c9a      	adds	r2, r3, #2
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e63e:	b29b      	uxth	r3, r3
 800e640:	3b01      	subs	r3, #1
 800e642:	b29a      	uxth	r2, r3
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e650:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e652:	f7f4 ff9f 	bl	8003594 <HAL_GetTick>
 800e656:	4602      	mov	r2, r0
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	1ad3      	subs	r3, r2, r3
 800e65c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e65e:	429a      	cmp	r2, r3
 800e660:	d803      	bhi.n	800e66a <HAL_SPI_TransmitReceive+0x352>
 800e662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e668:	d102      	bne.n	800e670 <HAL_SPI_TransmitReceive+0x358>
 800e66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d117      	bne.n	800e6a0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f000 f93d 	bl	800e8f0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2201      	movs	r2, #1
 800e692:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	e126      	b.n	800e8e8 <HAL_SPI_TransmitReceive+0x5d0>
 800e69a:	bf00      	nop
 800e69c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e6a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f47f af52 	bne.w	800e54c <HAL_SPI_TransmitReceive+0x234>
 800e6a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f47f af4e 	bne.w	800e54c <HAL_SPI_TransmitReceive+0x234>
 800e6b0:	e0f3      	b.n	800e89a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	695b      	ldr	r3, [r3, #20]
 800e6b8:	f003 0302 	and.w	r3, r3, #2
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d15a      	bne.n	800e776 <HAL_SPI_TransmitReceive+0x45e>
 800e6c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d057      	beq.n	800e776 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e6c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	d91c      	bls.n	800e706 <HAL_SPI_TransmitReceive+0x3ee>
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d0:	2b40      	cmp	r3, #64	; 0x40
 800e6d2:	d918      	bls.n	800e706 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6812      	ldr	r2, [r2, #0]
 800e6de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6e4:	1d1a      	adds	r2, r3, #4
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	3b04      	subs	r3, #4
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e702:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e704:	e037      	b.n	800e776 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d91b      	bls.n	800e744 <HAL_SPI_TransmitReceive+0x42c>
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e710:	2b00      	cmp	r3, #0
 800e712:	d017      	beq.n	800e744 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e718:	881a      	ldrh	r2, [r3, #0]
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e722:	1c9a      	adds	r2, r3, #2
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e72e:	b29b      	uxth	r3, r3
 800e730:	3b02      	subs	r3, #2
 800e732:	b29a      	uxth	r2, r3
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e740:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e742:	e018      	b.n	800e776 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3320      	adds	r3, #32
 800e74e:	7812      	ldrb	r2, [r2, #0]
 800e750:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e756:	1c5a      	adds	r2, r3, #1
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e762:	b29b      	uxth	r3, r3
 800e764:	3b01      	subs	r3, #1
 800e766:	b29a      	uxth	r2, r3
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e774:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	695b      	ldr	r3, [r3, #20]
 800e77c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e780:	2b00      	cmp	r3, #0
 800e782:	d05e      	beq.n	800e842 <HAL_SPI_TransmitReceive+0x52a>
 800e784:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e786:	2b00      	cmp	r3, #0
 800e788:	d05b      	beq.n	800e842 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	695b      	ldr	r3, [r3, #20]
 800e790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d018      	beq.n	800e7ca <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e7a2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7a8:	1d1a      	adds	r2, r3, #4
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	3b04      	subs	r3, #4
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e7c8:	e03b      	b.n	800e842 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	695b      	ldr	r3, [r3, #20]
 800e7d0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e7d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7d8:	d918      	bls.n	800e80c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7de:	6a3a      	ldr	r2, [r7, #32]
 800e7e0:	8812      	ldrh	r2, [r2, #0]
 800e7e2:	b292      	uxth	r2, r2
 800e7e4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ea:	1c9a      	adds	r2, r3, #2
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	3b02      	subs	r3, #2
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e808:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e80a:	e01a      	b.n	800e842 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e818:	7812      	ldrb	r2, [r2, #0]
 800e81a:	b2d2      	uxtb	r2, r2
 800e81c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e822:	1c5a      	adds	r2, r3, #1
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e82e:	b29b      	uxth	r3, r3
 800e830:	3b01      	subs	r3, #1
 800e832:	b29a      	uxth	r2, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e840:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e842:	f7f4 fea7 	bl	8003594 <HAL_GetTick>
 800e846:	4602      	mov	r2, r0
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e84e:	429a      	cmp	r2, r3
 800e850:	d803      	bhi.n	800e85a <HAL_SPI_TransmitReceive+0x542>
 800e852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e858:	d102      	bne.n	800e860 <HAL_SPI_TransmitReceive+0x548>
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d114      	bne.n	800e88a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f000 f845 	bl	800e8f0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2201      	movs	r2, #1
 800e882:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e02e      	b.n	800e8e8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e88a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f47f af10 	bne.w	800e6b2 <HAL_SPI_TransmitReceive+0x39a>
 800e892:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e894:	2b00      	cmp	r3, #0
 800e896:	f47f af0c 	bne.w	800e6b2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	2108      	movs	r1, #8
 800e8a4:	68f8      	ldr	r0, [r7, #12]
 800e8a6:	f000 f8c3 	bl	800ea30 <SPI_WaitOnFlagUntilTimeout>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d007      	beq.n	800e8c0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8b6:	f043 0220 	orr.w	r2, r3, #32
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f000 f815 	bl	800e8f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d001      	beq.n	800e8e4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e001      	b.n	800e8e8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e8e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3730      	adds	r7, #48	; 0x30
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b085      	sub	sp, #20
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	699a      	ldr	r2, [r3, #24]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f042 0208 	orr.w	r2, r2, #8
 800e90e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	699a      	ldr	r2, [r3, #24]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f042 0210 	orr.w	r2, r2, #16
 800e91e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f022 0201 	bic.w	r2, r2, #1
 800e92e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6919      	ldr	r1, [r3, #16]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	4b3c      	ldr	r3, [pc, #240]	; (800ea2c <SPI_CloseTransfer+0x13c>)
 800e93c:	400b      	ands	r3, r1
 800e93e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	689a      	ldr	r2, [r3, #8]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e94e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b04      	cmp	r3, #4
 800e95a:	d014      	beq.n	800e986 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f003 0320 	and.w	r3, r3, #32
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00f      	beq.n	800e986 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e96c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	699a      	ldr	r2, [r3, #24]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f042 0220 	orr.w	r2, r2, #32
 800e984:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b03      	cmp	r3, #3
 800e990:	d014      	beq.n	800e9bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00f      	beq.n	800e9bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9a2:	f043 0204 	orr.w	r2, r3, #4
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	699a      	ldr	r2, [r3, #24]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00f      	beq.n	800e9e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9cc:	f043 0201 	orr.w	r2, r3, #1
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	699a      	ldr	r2, [r3, #24]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00f      	beq.n	800ea10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9f6:	f043 0208 	orr.w	r2, r3, #8
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	699a      	ldr	r2, [r3, #24]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ea20:	bf00      	nop
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	fffffc90 	.word	0xfffffc90

0800ea30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	603b      	str	r3, [r7, #0]
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea40:	e010      	b.n	800ea64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea42:	f7f4 fda7 	bl	8003594 <HAL_GetTick>
 800ea46:	4602      	mov	r2, r0
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	69ba      	ldr	r2, [r7, #24]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d803      	bhi.n	800ea5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea58:	d102      	bne.n	800ea60 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d101      	bne.n	800ea64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ea60:	2303      	movs	r3, #3
 800ea62:	e00f      	b.n	800ea84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	695a      	ldr	r2, [r3, #20]
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	bf0c      	ite	eq
 800ea74:	2301      	moveq	r3, #1
 800ea76:	2300      	movne	r3, #0
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	79fb      	ldrb	r3, [r7, #7]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d0df      	beq.n	800ea42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ea82:	2300      	movs	r3, #0
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea98:	095b      	lsrs	r3, r3, #5
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	3307      	adds	r3, #7
 800eaaa:	08db      	lsrs	r3, r3, #3
 800eaac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	fb02 f303 	mul.w	r3, r2, r3
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3714      	adds	r7, #20
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b082      	sub	sp, #8
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e042      	b.n	800eb5a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d106      	bne.n	800eaec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7f4 fa70 	bl	8002fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2224      	movs	r2, #36	; 0x24
 800eaf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f022 0201 	bic.w	r2, r2, #1
 800eb02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 f95f 	bl	800edc8 <UART_SetConfig>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d101      	bne.n	800eb14 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	e022      	b.n	800eb5a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 ff03 	bl	800f928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	685a      	ldr	r2, [r3, #4]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	689a      	ldr	r2, [r3, #8]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f042 0201 	orr.w	r2, r2, #1
 800eb50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 ff8a 	bl	800fa6c <UART_CheckIdleState>
 800eb58:	4603      	mov	r3, r0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b08a      	sub	sp, #40	; 0x28
 800eb66:	af02      	add	r7, sp, #8
 800eb68:	60f8      	str	r0, [r7, #12]
 800eb6a:	60b9      	str	r1, [r7, #8]
 800eb6c:	603b      	str	r3, [r7, #0]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb78:	2b20      	cmp	r3, #32
 800eb7a:	f040 8083 	bne.w	800ec84 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d002      	beq.n	800eb8a <HAL_UART_Transmit+0x28>
 800eb84:	88fb      	ldrh	r3, [r7, #6]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e07b      	b.n	800ec86 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d101      	bne.n	800eb9c <HAL_UART_Transmit+0x3a>
 800eb98:	2302      	movs	r3, #2
 800eb9a:	e074      	b.n	800ec86 <HAL_UART_Transmit+0x124>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2221      	movs	r2, #33	; 0x21
 800ebb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ebb4:	f7f4 fcee 	bl	8003594 <HAL_GetTick>
 800ebb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	88fa      	ldrh	r2, [r7, #6]
 800ebbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	88fa      	ldrh	r2, [r7, #6]
 800ebc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebd2:	d108      	bne.n	800ebe6 <HAL_UART_Transmit+0x84>
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	691b      	ldr	r3, [r3, #16]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d104      	bne.n	800ebe6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	61bb      	str	r3, [r7, #24]
 800ebe4:	e003      	b.n	800ebee <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ebea:	2300      	movs	r3, #0
 800ebec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ebf6:	e02c      	b.n	800ec52 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	2180      	movs	r1, #128	; 0x80
 800ec02:	68f8      	ldr	r0, [r7, #12]
 800ec04:	f000 ff7a 	bl	800fafc <UART_WaitOnFlagUntilTimeout>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d001      	beq.n	800ec12 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	e039      	b.n	800ec86 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d10b      	bne.n	800ec30 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	881b      	ldrh	r3, [r3, #0]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	3302      	adds	r3, #2
 800ec2c:	61bb      	str	r3, [r7, #24]
 800ec2e:	e007      	b.n	800ec40 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	781a      	ldrb	r2, [r3, #0]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1cc      	bne.n	800ebf8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	2200      	movs	r2, #0
 800ec66:	2140      	movs	r1, #64	; 0x40
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f000 ff47 	bl	800fafc <UART_WaitOnFlagUntilTimeout>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d001      	beq.n	800ec78 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ec74:	2303      	movs	r3, #3
 800ec76:	e006      	b.n	800ec86 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2220      	movs	r2, #32
 800ec7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	e000      	b.n	800ec86 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ec84:	2302      	movs	r3, #2
  }
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3720      	adds	r7, #32
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
	...

0800ec90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eca4:	2b20      	cmp	r3, #32
 800eca6:	d170      	bne.n	800ed8a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d002      	beq.n	800ecb4 <HAL_UART_Receive_DMA+0x24>
 800ecae:	88fb      	ldrh	r3, [r7, #6]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d101      	bne.n	800ecb8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	e069      	b.n	800ed8c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d101      	bne.n	800ecc6 <HAL_UART_Receive_DMA+0x36>
 800ecc2:	2302      	movs	r3, #2
 800ecc4:	e062      	b.n	800ed8c <HAL_UART_Receive_DMA+0xfc>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2201      	movs	r2, #1
 800ecca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	68ba      	ldr	r2, [r7, #8]
 800ecd2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	88fa      	ldrh	r2, [r7, #6]
 800ecd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2222      	movs	r2, #34	; 0x22
 800ece8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d02c      	beq.n	800ed4e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecf8:	4a26      	ldr	r2, [pc, #152]	; (800ed94 <HAL_UART_Receive_DMA+0x104>)
 800ecfa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed00:	4a25      	ldr	r2, [pc, #148]	; (800ed98 <HAL_UART_Receive_DMA+0x108>)
 800ed02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed08:	4a24      	ldr	r2, [pc, #144]	; (800ed9c <HAL_UART_Receive_DMA+0x10c>)
 800ed0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed10:	2200      	movs	r2, #0
 800ed12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	3324      	adds	r3, #36	; 0x24
 800ed1e:	4619      	mov	r1, r3
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed24:	461a      	mov	r2, r3
 800ed26:	88fb      	ldrh	r3, [r7, #6]
 800ed28:	f7f5 f8da 	bl	8003ee0 <HAL_DMA_Start_IT>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00d      	beq.n	800ed4e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2210      	movs	r2, #16
 800ed36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2220      	movs	r2, #32
 800ed46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	e01e      	b.n	800ed8c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed64:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f042 0201 	orr.w	r2, r2, #1
 800ed74:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	689a      	ldr	r2, [r3, #8]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed84:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	e000      	b.n	800ed8c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800ed8a:	2302      	movs	r3, #2
  }
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	0800fc81 	.word	0x0800fc81
 800ed98:	0800fce7 	.word	0x0800fce7
 800ed9c:	0800fd03 	.word	0x0800fd03

0800eda0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800eda8:	bf00      	nop
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800edbc:	bf00      	nop
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800edc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800edcc:	b08e      	sub	sp, #56	; 0x38
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800edd2:	2300      	movs	r3, #0
 800edd4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	689a      	ldr	r2, [r3, #8]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	691b      	ldr	r3, [r3, #16]
 800ede0:	431a      	orrs	r2, r3
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	695b      	ldr	r3, [r3, #20]
 800ede6:	431a      	orrs	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	69db      	ldr	r3, [r3, #28]
 800edec:	4313      	orrs	r3, r2
 800edee:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edf6:	4313      	orrs	r3, r2
 800edf8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	4bc1      	ldr	r3, [pc, #772]	; (800f108 <UART_SetConfig+0x340>)
 800ee02:	4013      	ands	r3, r2
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	6812      	ldr	r2, [r2, #0]
 800ee08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee0a:	430b      	orrs	r3, r1
 800ee0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	68da      	ldr	r2, [r3, #12]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	430a      	orrs	r2, r1
 800ee22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4ab7      	ldr	r2, [pc, #732]	; (800f10c <UART_SetConfig+0x344>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d004      	beq.n	800ee3e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6a1b      	ldr	r3, [r3, #32]
 800ee38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	689a      	ldr	r2, [r3, #8]
 800ee44:	4bb2      	ldr	r3, [pc, #712]	; (800f110 <UART_SetConfig+0x348>)
 800ee46:	4013      	ands	r3, r2
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	6812      	ldr	r2, [r2, #0]
 800ee4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee4e:	430b      	orrs	r3, r1
 800ee50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee58:	f023 010f 	bic.w	r1, r3, #15
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	430a      	orrs	r2, r1
 800ee66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4aa9      	ldr	r2, [pc, #676]	; (800f114 <UART_SetConfig+0x34c>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d177      	bne.n	800ef62 <UART_SetConfig+0x19a>
 800ee72:	4ba9      	ldr	r3, [pc, #676]	; (800f118 <UART_SetConfig+0x350>)
 800ee74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee7a:	2b28      	cmp	r3, #40	; 0x28
 800ee7c:	d86c      	bhi.n	800ef58 <UART_SetConfig+0x190>
 800ee7e:	a201      	add	r2, pc, #4	; (adr r2, 800ee84 <UART_SetConfig+0xbc>)
 800ee80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee84:	0800ef29 	.word	0x0800ef29
 800ee88:	0800ef59 	.word	0x0800ef59
 800ee8c:	0800ef59 	.word	0x0800ef59
 800ee90:	0800ef59 	.word	0x0800ef59
 800ee94:	0800ef59 	.word	0x0800ef59
 800ee98:	0800ef59 	.word	0x0800ef59
 800ee9c:	0800ef59 	.word	0x0800ef59
 800eea0:	0800ef59 	.word	0x0800ef59
 800eea4:	0800ef31 	.word	0x0800ef31
 800eea8:	0800ef59 	.word	0x0800ef59
 800eeac:	0800ef59 	.word	0x0800ef59
 800eeb0:	0800ef59 	.word	0x0800ef59
 800eeb4:	0800ef59 	.word	0x0800ef59
 800eeb8:	0800ef59 	.word	0x0800ef59
 800eebc:	0800ef59 	.word	0x0800ef59
 800eec0:	0800ef59 	.word	0x0800ef59
 800eec4:	0800ef39 	.word	0x0800ef39
 800eec8:	0800ef59 	.word	0x0800ef59
 800eecc:	0800ef59 	.word	0x0800ef59
 800eed0:	0800ef59 	.word	0x0800ef59
 800eed4:	0800ef59 	.word	0x0800ef59
 800eed8:	0800ef59 	.word	0x0800ef59
 800eedc:	0800ef59 	.word	0x0800ef59
 800eee0:	0800ef59 	.word	0x0800ef59
 800eee4:	0800ef41 	.word	0x0800ef41
 800eee8:	0800ef59 	.word	0x0800ef59
 800eeec:	0800ef59 	.word	0x0800ef59
 800eef0:	0800ef59 	.word	0x0800ef59
 800eef4:	0800ef59 	.word	0x0800ef59
 800eef8:	0800ef59 	.word	0x0800ef59
 800eefc:	0800ef59 	.word	0x0800ef59
 800ef00:	0800ef59 	.word	0x0800ef59
 800ef04:	0800ef49 	.word	0x0800ef49
 800ef08:	0800ef59 	.word	0x0800ef59
 800ef0c:	0800ef59 	.word	0x0800ef59
 800ef10:	0800ef59 	.word	0x0800ef59
 800ef14:	0800ef59 	.word	0x0800ef59
 800ef18:	0800ef59 	.word	0x0800ef59
 800ef1c:	0800ef59 	.word	0x0800ef59
 800ef20:	0800ef59 	.word	0x0800ef59
 800ef24:	0800ef51 	.word	0x0800ef51
 800ef28:	2301      	movs	r3, #1
 800ef2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef2e:	e233      	b.n	800f398 <UART_SetConfig+0x5d0>
 800ef30:	2304      	movs	r3, #4
 800ef32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef36:	e22f      	b.n	800f398 <UART_SetConfig+0x5d0>
 800ef38:	2308      	movs	r3, #8
 800ef3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef3e:	e22b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800ef40:	2310      	movs	r3, #16
 800ef42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef46:	e227      	b.n	800f398 <UART_SetConfig+0x5d0>
 800ef48:	2320      	movs	r3, #32
 800ef4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef4e:	e223      	b.n	800f398 <UART_SetConfig+0x5d0>
 800ef50:	2340      	movs	r3, #64	; 0x40
 800ef52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef56:	e21f      	b.n	800f398 <UART_SetConfig+0x5d0>
 800ef58:	2380      	movs	r3, #128	; 0x80
 800ef5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef5e:	bf00      	nop
 800ef60:	e21a      	b.n	800f398 <UART_SetConfig+0x5d0>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a6d      	ldr	r2, [pc, #436]	; (800f11c <UART_SetConfig+0x354>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d132      	bne.n	800efd2 <UART_SetConfig+0x20a>
 800ef6c:	4b6a      	ldr	r3, [pc, #424]	; (800f118 <UART_SetConfig+0x350>)
 800ef6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef70:	f003 0307 	and.w	r3, r3, #7
 800ef74:	2b05      	cmp	r3, #5
 800ef76:	d827      	bhi.n	800efc8 <UART_SetConfig+0x200>
 800ef78:	a201      	add	r2, pc, #4	; (adr r2, 800ef80 <UART_SetConfig+0x1b8>)
 800ef7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7e:	bf00      	nop
 800ef80:	0800ef99 	.word	0x0800ef99
 800ef84:	0800efa1 	.word	0x0800efa1
 800ef88:	0800efa9 	.word	0x0800efa9
 800ef8c:	0800efb1 	.word	0x0800efb1
 800ef90:	0800efb9 	.word	0x0800efb9
 800ef94:	0800efc1 	.word	0x0800efc1
 800ef98:	2300      	movs	r3, #0
 800ef9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef9e:	e1fb      	b.n	800f398 <UART_SetConfig+0x5d0>
 800efa0:	2304      	movs	r3, #4
 800efa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efa6:	e1f7      	b.n	800f398 <UART_SetConfig+0x5d0>
 800efa8:	2308      	movs	r3, #8
 800efaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efae:	e1f3      	b.n	800f398 <UART_SetConfig+0x5d0>
 800efb0:	2310      	movs	r3, #16
 800efb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efb6:	e1ef      	b.n	800f398 <UART_SetConfig+0x5d0>
 800efb8:	2320      	movs	r3, #32
 800efba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efbe:	e1eb      	b.n	800f398 <UART_SetConfig+0x5d0>
 800efc0:	2340      	movs	r3, #64	; 0x40
 800efc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efc6:	e1e7      	b.n	800f398 <UART_SetConfig+0x5d0>
 800efc8:	2380      	movs	r3, #128	; 0x80
 800efca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efce:	bf00      	nop
 800efd0:	e1e2      	b.n	800f398 <UART_SetConfig+0x5d0>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a52      	ldr	r2, [pc, #328]	; (800f120 <UART_SetConfig+0x358>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d132      	bne.n	800f042 <UART_SetConfig+0x27a>
 800efdc:	4b4e      	ldr	r3, [pc, #312]	; (800f118 <UART_SetConfig+0x350>)
 800efde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe0:	f003 0307 	and.w	r3, r3, #7
 800efe4:	2b05      	cmp	r3, #5
 800efe6:	d827      	bhi.n	800f038 <UART_SetConfig+0x270>
 800efe8:	a201      	add	r2, pc, #4	; (adr r2, 800eff0 <UART_SetConfig+0x228>)
 800efea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efee:	bf00      	nop
 800eff0:	0800f009 	.word	0x0800f009
 800eff4:	0800f011 	.word	0x0800f011
 800eff8:	0800f019 	.word	0x0800f019
 800effc:	0800f021 	.word	0x0800f021
 800f000:	0800f029 	.word	0x0800f029
 800f004:	0800f031 	.word	0x0800f031
 800f008:	2300      	movs	r3, #0
 800f00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f00e:	e1c3      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f010:	2304      	movs	r3, #4
 800f012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f016:	e1bf      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f018:	2308      	movs	r3, #8
 800f01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f01e:	e1bb      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f020:	2310      	movs	r3, #16
 800f022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f026:	e1b7      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f028:	2320      	movs	r3, #32
 800f02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f02e:	e1b3      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f030:	2340      	movs	r3, #64	; 0x40
 800f032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f036:	e1af      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f038:	2380      	movs	r3, #128	; 0x80
 800f03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f03e:	bf00      	nop
 800f040:	e1aa      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a37      	ldr	r2, [pc, #220]	; (800f124 <UART_SetConfig+0x35c>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d132      	bne.n	800f0b2 <UART_SetConfig+0x2ea>
 800f04c:	4b32      	ldr	r3, [pc, #200]	; (800f118 <UART_SetConfig+0x350>)
 800f04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f050:	f003 0307 	and.w	r3, r3, #7
 800f054:	2b05      	cmp	r3, #5
 800f056:	d827      	bhi.n	800f0a8 <UART_SetConfig+0x2e0>
 800f058:	a201      	add	r2, pc, #4	; (adr r2, 800f060 <UART_SetConfig+0x298>)
 800f05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05e:	bf00      	nop
 800f060:	0800f079 	.word	0x0800f079
 800f064:	0800f081 	.word	0x0800f081
 800f068:	0800f089 	.word	0x0800f089
 800f06c:	0800f091 	.word	0x0800f091
 800f070:	0800f099 	.word	0x0800f099
 800f074:	0800f0a1 	.word	0x0800f0a1
 800f078:	2300      	movs	r3, #0
 800f07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f07e:	e18b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f080:	2304      	movs	r3, #4
 800f082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f086:	e187      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f088:	2308      	movs	r3, #8
 800f08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f08e:	e183      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f090:	2310      	movs	r3, #16
 800f092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f096:	e17f      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f098:	2320      	movs	r3, #32
 800f09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f09e:	e17b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f0a0:	2340      	movs	r3, #64	; 0x40
 800f0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0a6:	e177      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f0a8:	2380      	movs	r3, #128	; 0x80
 800f0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ae:	bf00      	nop
 800f0b0:	e172      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4a1c      	ldr	r2, [pc, #112]	; (800f128 <UART_SetConfig+0x360>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d144      	bne.n	800f146 <UART_SetConfig+0x37e>
 800f0bc:	4b16      	ldr	r3, [pc, #88]	; (800f118 <UART_SetConfig+0x350>)
 800f0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0c0:	f003 0307 	and.w	r3, r3, #7
 800f0c4:	2b05      	cmp	r3, #5
 800f0c6:	d839      	bhi.n	800f13c <UART_SetConfig+0x374>
 800f0c8:	a201      	add	r2, pc, #4	; (adr r2, 800f0d0 <UART_SetConfig+0x308>)
 800f0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ce:	bf00      	nop
 800f0d0:	0800f0e9 	.word	0x0800f0e9
 800f0d4:	0800f0f1 	.word	0x0800f0f1
 800f0d8:	0800f0f9 	.word	0x0800f0f9
 800f0dc:	0800f101 	.word	0x0800f101
 800f0e0:	0800f12d 	.word	0x0800f12d
 800f0e4:	0800f135 	.word	0x0800f135
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ee:	e153      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f0f0:	2304      	movs	r3, #4
 800f0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0f6:	e14f      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f0f8:	2308      	movs	r3, #8
 800f0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0fe:	e14b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f100:	2310      	movs	r3, #16
 800f102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f106:	e147      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f108:	cfff69f3 	.word	0xcfff69f3
 800f10c:	58000c00 	.word	0x58000c00
 800f110:	11fff4ff 	.word	0x11fff4ff
 800f114:	40011000 	.word	0x40011000
 800f118:	58024400 	.word	0x58024400
 800f11c:	40004400 	.word	0x40004400
 800f120:	40004800 	.word	0x40004800
 800f124:	40004c00 	.word	0x40004c00
 800f128:	40005000 	.word	0x40005000
 800f12c:	2320      	movs	r3, #32
 800f12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f132:	e131      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f134:	2340      	movs	r3, #64	; 0x40
 800f136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f13a:	e12d      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f13c:	2380      	movs	r3, #128	; 0x80
 800f13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f142:	bf00      	nop
 800f144:	e128      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4ab6      	ldr	r2, [pc, #728]	; (800f424 <UART_SetConfig+0x65c>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d178      	bne.n	800f242 <UART_SetConfig+0x47a>
 800f150:	4bb5      	ldr	r3, [pc, #724]	; (800f428 <UART_SetConfig+0x660>)
 800f152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f158:	2b28      	cmp	r3, #40	; 0x28
 800f15a:	d86d      	bhi.n	800f238 <UART_SetConfig+0x470>
 800f15c:	a201      	add	r2, pc, #4	; (adr r2, 800f164 <UART_SetConfig+0x39c>)
 800f15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f162:	bf00      	nop
 800f164:	0800f209 	.word	0x0800f209
 800f168:	0800f239 	.word	0x0800f239
 800f16c:	0800f239 	.word	0x0800f239
 800f170:	0800f239 	.word	0x0800f239
 800f174:	0800f239 	.word	0x0800f239
 800f178:	0800f239 	.word	0x0800f239
 800f17c:	0800f239 	.word	0x0800f239
 800f180:	0800f239 	.word	0x0800f239
 800f184:	0800f211 	.word	0x0800f211
 800f188:	0800f239 	.word	0x0800f239
 800f18c:	0800f239 	.word	0x0800f239
 800f190:	0800f239 	.word	0x0800f239
 800f194:	0800f239 	.word	0x0800f239
 800f198:	0800f239 	.word	0x0800f239
 800f19c:	0800f239 	.word	0x0800f239
 800f1a0:	0800f239 	.word	0x0800f239
 800f1a4:	0800f219 	.word	0x0800f219
 800f1a8:	0800f239 	.word	0x0800f239
 800f1ac:	0800f239 	.word	0x0800f239
 800f1b0:	0800f239 	.word	0x0800f239
 800f1b4:	0800f239 	.word	0x0800f239
 800f1b8:	0800f239 	.word	0x0800f239
 800f1bc:	0800f239 	.word	0x0800f239
 800f1c0:	0800f239 	.word	0x0800f239
 800f1c4:	0800f221 	.word	0x0800f221
 800f1c8:	0800f239 	.word	0x0800f239
 800f1cc:	0800f239 	.word	0x0800f239
 800f1d0:	0800f239 	.word	0x0800f239
 800f1d4:	0800f239 	.word	0x0800f239
 800f1d8:	0800f239 	.word	0x0800f239
 800f1dc:	0800f239 	.word	0x0800f239
 800f1e0:	0800f239 	.word	0x0800f239
 800f1e4:	0800f229 	.word	0x0800f229
 800f1e8:	0800f239 	.word	0x0800f239
 800f1ec:	0800f239 	.word	0x0800f239
 800f1f0:	0800f239 	.word	0x0800f239
 800f1f4:	0800f239 	.word	0x0800f239
 800f1f8:	0800f239 	.word	0x0800f239
 800f1fc:	0800f239 	.word	0x0800f239
 800f200:	0800f239 	.word	0x0800f239
 800f204:	0800f231 	.word	0x0800f231
 800f208:	2301      	movs	r3, #1
 800f20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f20e:	e0c3      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f210:	2304      	movs	r3, #4
 800f212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f216:	e0bf      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f218:	2308      	movs	r3, #8
 800f21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f21e:	e0bb      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f220:	2310      	movs	r3, #16
 800f222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f226:	e0b7      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f228:	2320      	movs	r3, #32
 800f22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f22e:	e0b3      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f230:	2340      	movs	r3, #64	; 0x40
 800f232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f236:	e0af      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f238:	2380      	movs	r3, #128	; 0x80
 800f23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f23e:	bf00      	nop
 800f240:	e0aa      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a79      	ldr	r2, [pc, #484]	; (800f42c <UART_SetConfig+0x664>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d132      	bne.n	800f2b2 <UART_SetConfig+0x4ea>
 800f24c:	4b76      	ldr	r3, [pc, #472]	; (800f428 <UART_SetConfig+0x660>)
 800f24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f250:	f003 0307 	and.w	r3, r3, #7
 800f254:	2b05      	cmp	r3, #5
 800f256:	d827      	bhi.n	800f2a8 <UART_SetConfig+0x4e0>
 800f258:	a201      	add	r2, pc, #4	; (adr r2, 800f260 <UART_SetConfig+0x498>)
 800f25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f25e:	bf00      	nop
 800f260:	0800f279 	.word	0x0800f279
 800f264:	0800f281 	.word	0x0800f281
 800f268:	0800f289 	.word	0x0800f289
 800f26c:	0800f291 	.word	0x0800f291
 800f270:	0800f299 	.word	0x0800f299
 800f274:	0800f2a1 	.word	0x0800f2a1
 800f278:	2300      	movs	r3, #0
 800f27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f27e:	e08b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f280:	2304      	movs	r3, #4
 800f282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f286:	e087      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f288:	2308      	movs	r3, #8
 800f28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f28e:	e083      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f290:	2310      	movs	r3, #16
 800f292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f296:	e07f      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f298:	2320      	movs	r3, #32
 800f29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f29e:	e07b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f2a0:	2340      	movs	r3, #64	; 0x40
 800f2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2a6:	e077      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f2a8:	2380      	movs	r3, #128	; 0x80
 800f2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2ae:	bf00      	nop
 800f2b0:	e072      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4a5e      	ldr	r2, [pc, #376]	; (800f430 <UART_SetConfig+0x668>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d132      	bne.n	800f322 <UART_SetConfig+0x55a>
 800f2bc:	4b5a      	ldr	r3, [pc, #360]	; (800f428 <UART_SetConfig+0x660>)
 800f2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2c0:	f003 0307 	and.w	r3, r3, #7
 800f2c4:	2b05      	cmp	r3, #5
 800f2c6:	d827      	bhi.n	800f318 <UART_SetConfig+0x550>
 800f2c8:	a201      	add	r2, pc, #4	; (adr r2, 800f2d0 <UART_SetConfig+0x508>)
 800f2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ce:	bf00      	nop
 800f2d0:	0800f2e9 	.word	0x0800f2e9
 800f2d4:	0800f2f1 	.word	0x0800f2f1
 800f2d8:	0800f2f9 	.word	0x0800f2f9
 800f2dc:	0800f301 	.word	0x0800f301
 800f2e0:	0800f309 	.word	0x0800f309
 800f2e4:	0800f311 	.word	0x0800f311
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2ee:	e053      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f2f0:	2304      	movs	r3, #4
 800f2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2f6:	e04f      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f2f8:	2308      	movs	r3, #8
 800f2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2fe:	e04b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f300:	2310      	movs	r3, #16
 800f302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f306:	e047      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f308:	2320      	movs	r3, #32
 800f30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f30e:	e043      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f310:	2340      	movs	r3, #64	; 0x40
 800f312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f316:	e03f      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f318:	2380      	movs	r3, #128	; 0x80
 800f31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f31e:	bf00      	nop
 800f320:	e03a      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	4a43      	ldr	r2, [pc, #268]	; (800f434 <UART_SetConfig+0x66c>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d132      	bne.n	800f392 <UART_SetConfig+0x5ca>
 800f32c:	4b3e      	ldr	r3, [pc, #248]	; (800f428 <UART_SetConfig+0x660>)
 800f32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f330:	f003 0307 	and.w	r3, r3, #7
 800f334:	2b05      	cmp	r3, #5
 800f336:	d827      	bhi.n	800f388 <UART_SetConfig+0x5c0>
 800f338:	a201      	add	r2, pc, #4	; (adr r2, 800f340 <UART_SetConfig+0x578>)
 800f33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f33e:	bf00      	nop
 800f340:	0800f359 	.word	0x0800f359
 800f344:	0800f361 	.word	0x0800f361
 800f348:	0800f369 	.word	0x0800f369
 800f34c:	0800f371 	.word	0x0800f371
 800f350:	0800f379 	.word	0x0800f379
 800f354:	0800f381 	.word	0x0800f381
 800f358:	2302      	movs	r3, #2
 800f35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f35e:	e01b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f360:	2304      	movs	r3, #4
 800f362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f366:	e017      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f368:	2308      	movs	r3, #8
 800f36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f36e:	e013      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f370:	2310      	movs	r3, #16
 800f372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f376:	e00f      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f378:	2320      	movs	r3, #32
 800f37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f37e:	e00b      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f380:	2340      	movs	r3, #64	; 0x40
 800f382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f386:	e007      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f388:	2380      	movs	r3, #128	; 0x80
 800f38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f38e:	bf00      	nop
 800f390:	e002      	b.n	800f398 <UART_SetConfig+0x5d0>
 800f392:	2380      	movs	r3, #128	; 0x80
 800f394:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a25      	ldr	r2, [pc, #148]	; (800f434 <UART_SetConfig+0x66c>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	f040 80b8 	bne.w	800f514 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f3a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f3a8:	2b08      	cmp	r3, #8
 800f3aa:	d019      	beq.n	800f3e0 <UART_SetConfig+0x618>
 800f3ac:	2b08      	cmp	r3, #8
 800f3ae:	dc04      	bgt.n	800f3ba <UART_SetConfig+0x5f2>
 800f3b0:	2b02      	cmp	r3, #2
 800f3b2:	d009      	beq.n	800f3c8 <UART_SetConfig+0x600>
 800f3b4:	2b04      	cmp	r3, #4
 800f3b6:	d00b      	beq.n	800f3d0 <UART_SetConfig+0x608>
 800f3b8:	e042      	b.n	800f440 <UART_SetConfig+0x678>
 800f3ba:	2b20      	cmp	r3, #32
 800f3bc:	d02b      	beq.n	800f416 <UART_SetConfig+0x64e>
 800f3be:	2b40      	cmp	r3, #64	; 0x40
 800f3c0:	d02c      	beq.n	800f41c <UART_SetConfig+0x654>
 800f3c2:	2b10      	cmp	r3, #16
 800f3c4:	d014      	beq.n	800f3f0 <UART_SetConfig+0x628>
 800f3c6:	e03b      	b.n	800f440 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f3c8:	f7fb fad2 	bl	800a970 <HAL_RCCEx_GetD3PCLK1Freq>
 800f3cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f3ce:	e03d      	b.n	800f44c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3d0:	f107 0314 	add.w	r3, r7, #20
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fb fae1 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3de:	e035      	b.n	800f44c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3e0:	f107 0308 	add.w	r3, r7, #8
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fb fc25 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f3ee:	e02d      	b.n	800f44c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3f0:	4b0d      	ldr	r3, [pc, #52]	; (800f428 <UART_SetConfig+0x660>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f003 0320 	and.w	r3, r3, #32
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d009      	beq.n	800f410 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3fc:	4b0a      	ldr	r3, [pc, #40]	; (800f428 <UART_SetConfig+0x660>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	08db      	lsrs	r3, r3, #3
 800f402:	f003 0303 	and.w	r3, r3, #3
 800f406:	4a0c      	ldr	r2, [pc, #48]	; (800f438 <UART_SetConfig+0x670>)
 800f408:	fa22 f303 	lsr.w	r3, r2, r3
 800f40c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f40e:	e01d      	b.n	800f44c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800f410:	4b09      	ldr	r3, [pc, #36]	; (800f438 <UART_SetConfig+0x670>)
 800f412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f414:	e01a      	b.n	800f44c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f416:	4b09      	ldr	r3, [pc, #36]	; (800f43c <UART_SetConfig+0x674>)
 800f418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f41a:	e017      	b.n	800f44c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f41c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f422:	e013      	b.n	800f44c <UART_SetConfig+0x684>
 800f424:	40011400 	.word	0x40011400
 800f428:	58024400 	.word	0x58024400
 800f42c:	40007800 	.word	0x40007800
 800f430:	40007c00 	.word	0x40007c00
 800f434:	58000c00 	.word	0x58000c00
 800f438:	03d09000 	.word	0x03d09000
 800f43c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800f440:	2300      	movs	r3, #0
 800f442:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f444:	2301      	movs	r3, #1
 800f446:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f44a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f000 824d 	beq.w	800f8ee <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f458:	4aad      	ldr	r2, [pc, #692]	; (800f710 <UART_SetConfig+0x948>)
 800f45a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f45e:	461a      	mov	r2, r3
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	fbb3 f3f2 	udiv	r3, r3, r2
 800f466:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	4613      	mov	r3, r2
 800f46e:	005b      	lsls	r3, r3, #1
 800f470:	4413      	add	r3, r2
 800f472:	6a3a      	ldr	r2, [r7, #32]
 800f474:	429a      	cmp	r2, r3
 800f476:	d305      	bcc.n	800f484 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f47e:	6a3a      	ldr	r2, [r7, #32]
 800f480:	429a      	cmp	r2, r3
 800f482:	d903      	bls.n	800f48c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800f484:	2301      	movs	r3, #1
 800f486:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f48a:	e230      	b.n	800f8ee <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48e:	4618      	mov	r0, r3
 800f490:	f04f 0100 	mov.w	r1, #0
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f498:	4a9d      	ldr	r2, [pc, #628]	; (800f710 <UART_SetConfig+0x948>)
 800f49a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	f04f 0400 	mov.w	r4, #0
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	4623      	mov	r3, r4
 800f4a8:	f7f0 ff72 	bl	8000390 <__aeabi_uldivmod>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	460c      	mov	r4, r1
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4622      	mov	r2, r4
 800f4b4:	f04f 0300 	mov.w	r3, #0
 800f4b8:	f04f 0400 	mov.w	r4, #0
 800f4bc:	0214      	lsls	r4, r2, #8
 800f4be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800f4c2:	020b      	lsls	r3, r1, #8
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	6852      	ldr	r2, [r2, #4]
 800f4c8:	0852      	lsrs	r2, r2, #1
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	f04f 0200 	mov.w	r2, #0
 800f4d0:	eb13 0b01 	adds.w	fp, r3, r1
 800f4d4:	eb44 0c02 	adc.w	ip, r4, r2
 800f4d8:	4658      	mov	r0, fp
 800f4da:	4661      	mov	r1, ip
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	f04f 0400 	mov.w	r4, #0
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	4623      	mov	r3, r4
 800f4e8:	f7f0 ff52 	bl	8000390 <__aeabi_uldivmod>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4f8:	d308      	bcc.n	800f50c <UART_SetConfig+0x744>
 800f4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f500:	d204      	bcs.n	800f50c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f508:	60da      	str	r2, [r3, #12]
 800f50a:	e1f0      	b.n	800f8ee <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f512:	e1ec      	b.n	800f8ee <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	69db      	ldr	r3, [r3, #28]
 800f518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f51c:	f040 8100 	bne.w	800f720 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800f520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f524:	2b40      	cmp	r3, #64	; 0x40
 800f526:	f200 80b7 	bhi.w	800f698 <UART_SetConfig+0x8d0>
 800f52a:	a201      	add	r2, pc, #4	; (adr r2, 800f530 <UART_SetConfig+0x768>)
 800f52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f530:	0800f635 	.word	0x0800f635
 800f534:	0800f63d 	.word	0x0800f63d
 800f538:	0800f699 	.word	0x0800f699
 800f53c:	0800f699 	.word	0x0800f699
 800f540:	0800f645 	.word	0x0800f645
 800f544:	0800f699 	.word	0x0800f699
 800f548:	0800f699 	.word	0x0800f699
 800f54c:	0800f699 	.word	0x0800f699
 800f550:	0800f655 	.word	0x0800f655
 800f554:	0800f699 	.word	0x0800f699
 800f558:	0800f699 	.word	0x0800f699
 800f55c:	0800f699 	.word	0x0800f699
 800f560:	0800f699 	.word	0x0800f699
 800f564:	0800f699 	.word	0x0800f699
 800f568:	0800f699 	.word	0x0800f699
 800f56c:	0800f699 	.word	0x0800f699
 800f570:	0800f665 	.word	0x0800f665
 800f574:	0800f699 	.word	0x0800f699
 800f578:	0800f699 	.word	0x0800f699
 800f57c:	0800f699 	.word	0x0800f699
 800f580:	0800f699 	.word	0x0800f699
 800f584:	0800f699 	.word	0x0800f699
 800f588:	0800f699 	.word	0x0800f699
 800f58c:	0800f699 	.word	0x0800f699
 800f590:	0800f699 	.word	0x0800f699
 800f594:	0800f699 	.word	0x0800f699
 800f598:	0800f699 	.word	0x0800f699
 800f59c:	0800f699 	.word	0x0800f699
 800f5a0:	0800f699 	.word	0x0800f699
 800f5a4:	0800f699 	.word	0x0800f699
 800f5a8:	0800f699 	.word	0x0800f699
 800f5ac:	0800f699 	.word	0x0800f699
 800f5b0:	0800f68b 	.word	0x0800f68b
 800f5b4:	0800f699 	.word	0x0800f699
 800f5b8:	0800f699 	.word	0x0800f699
 800f5bc:	0800f699 	.word	0x0800f699
 800f5c0:	0800f699 	.word	0x0800f699
 800f5c4:	0800f699 	.word	0x0800f699
 800f5c8:	0800f699 	.word	0x0800f699
 800f5cc:	0800f699 	.word	0x0800f699
 800f5d0:	0800f699 	.word	0x0800f699
 800f5d4:	0800f699 	.word	0x0800f699
 800f5d8:	0800f699 	.word	0x0800f699
 800f5dc:	0800f699 	.word	0x0800f699
 800f5e0:	0800f699 	.word	0x0800f699
 800f5e4:	0800f699 	.word	0x0800f699
 800f5e8:	0800f699 	.word	0x0800f699
 800f5ec:	0800f699 	.word	0x0800f699
 800f5f0:	0800f699 	.word	0x0800f699
 800f5f4:	0800f699 	.word	0x0800f699
 800f5f8:	0800f699 	.word	0x0800f699
 800f5fc:	0800f699 	.word	0x0800f699
 800f600:	0800f699 	.word	0x0800f699
 800f604:	0800f699 	.word	0x0800f699
 800f608:	0800f699 	.word	0x0800f699
 800f60c:	0800f699 	.word	0x0800f699
 800f610:	0800f699 	.word	0x0800f699
 800f614:	0800f699 	.word	0x0800f699
 800f618:	0800f699 	.word	0x0800f699
 800f61c:	0800f699 	.word	0x0800f699
 800f620:	0800f699 	.word	0x0800f699
 800f624:	0800f699 	.word	0x0800f699
 800f628:	0800f699 	.word	0x0800f699
 800f62c:	0800f699 	.word	0x0800f699
 800f630:	0800f691 	.word	0x0800f691
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f634:	f7f9 ffee 	bl	8009614 <HAL_RCC_GetPCLK1Freq>
 800f638:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f63a:	e033      	b.n	800f6a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f63c:	f7fa f800 	bl	8009640 <HAL_RCC_GetPCLK2Freq>
 800f640:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f642:	e02f      	b.n	800f6a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f644:	f107 0314 	add.w	r3, r7, #20
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fb f9a7 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f652:	e027      	b.n	800f6a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f654:	f107 0308 	add.w	r3, r7, #8
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fb faeb 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f662:	e01f      	b.n	800f6a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f664:	4b2b      	ldr	r3, [pc, #172]	; (800f714 <UART_SetConfig+0x94c>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f003 0320 	and.w	r3, r3, #32
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d009      	beq.n	800f684 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f670:	4b28      	ldr	r3, [pc, #160]	; (800f714 <UART_SetConfig+0x94c>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	08db      	lsrs	r3, r3, #3
 800f676:	f003 0303 	and.w	r3, r3, #3
 800f67a:	4a27      	ldr	r2, [pc, #156]	; (800f718 <UART_SetConfig+0x950>)
 800f67c:	fa22 f303 	lsr.w	r3, r2, r3
 800f680:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f682:	e00f      	b.n	800f6a4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800f684:	4b24      	ldr	r3, [pc, #144]	; (800f718 <UART_SetConfig+0x950>)
 800f686:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f688:	e00c      	b.n	800f6a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f68a:	4b24      	ldr	r3, [pc, #144]	; (800f71c <UART_SetConfig+0x954>)
 800f68c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f68e:	e009      	b.n	800f6a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f694:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f696:	e005      	b.n	800f6a4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800f698:	2300      	movs	r3, #0
 800f69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f69c:	2301      	movs	r3, #1
 800f69e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f6a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f000 8121 	beq.w	800f8ee <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b0:	4a17      	ldr	r2, [pc, #92]	; (800f710 <UART_SetConfig+0x948>)
 800f6b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6be:	005a      	lsls	r2, r3, #1
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	085b      	lsrs	r3, r3, #1
 800f6c6:	441a      	add	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d6:	2b0f      	cmp	r3, #15
 800f6d8:	d916      	bls.n	800f708 <UART_SetConfig+0x940>
 800f6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6e0:	d212      	bcs.n	800f708 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	f023 030f 	bic.w	r3, r3, #15
 800f6ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ee:	085b      	lsrs	r3, r3, #1
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	f003 0307 	and.w	r3, r3, #7
 800f6f6:	b29a      	uxth	r2, r3
 800f6f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f704:	60da      	str	r2, [r3, #12]
 800f706:	e0f2      	b.n	800f8ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f708:	2301      	movs	r3, #1
 800f70a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f70e:	e0ee      	b.n	800f8ee <UART_SetConfig+0xb26>
 800f710:	08019ed4 	.word	0x08019ed4
 800f714:	58024400 	.word	0x58024400
 800f718:	03d09000 	.word	0x03d09000
 800f71c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800f720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f724:	2b40      	cmp	r3, #64	; 0x40
 800f726:	f200 80b7 	bhi.w	800f898 <UART_SetConfig+0xad0>
 800f72a:	a201      	add	r2, pc, #4	; (adr r2, 800f730 <UART_SetConfig+0x968>)
 800f72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f730:	0800f835 	.word	0x0800f835
 800f734:	0800f83d 	.word	0x0800f83d
 800f738:	0800f899 	.word	0x0800f899
 800f73c:	0800f899 	.word	0x0800f899
 800f740:	0800f845 	.word	0x0800f845
 800f744:	0800f899 	.word	0x0800f899
 800f748:	0800f899 	.word	0x0800f899
 800f74c:	0800f899 	.word	0x0800f899
 800f750:	0800f855 	.word	0x0800f855
 800f754:	0800f899 	.word	0x0800f899
 800f758:	0800f899 	.word	0x0800f899
 800f75c:	0800f899 	.word	0x0800f899
 800f760:	0800f899 	.word	0x0800f899
 800f764:	0800f899 	.word	0x0800f899
 800f768:	0800f899 	.word	0x0800f899
 800f76c:	0800f899 	.word	0x0800f899
 800f770:	0800f865 	.word	0x0800f865
 800f774:	0800f899 	.word	0x0800f899
 800f778:	0800f899 	.word	0x0800f899
 800f77c:	0800f899 	.word	0x0800f899
 800f780:	0800f899 	.word	0x0800f899
 800f784:	0800f899 	.word	0x0800f899
 800f788:	0800f899 	.word	0x0800f899
 800f78c:	0800f899 	.word	0x0800f899
 800f790:	0800f899 	.word	0x0800f899
 800f794:	0800f899 	.word	0x0800f899
 800f798:	0800f899 	.word	0x0800f899
 800f79c:	0800f899 	.word	0x0800f899
 800f7a0:	0800f899 	.word	0x0800f899
 800f7a4:	0800f899 	.word	0x0800f899
 800f7a8:	0800f899 	.word	0x0800f899
 800f7ac:	0800f899 	.word	0x0800f899
 800f7b0:	0800f88b 	.word	0x0800f88b
 800f7b4:	0800f899 	.word	0x0800f899
 800f7b8:	0800f899 	.word	0x0800f899
 800f7bc:	0800f899 	.word	0x0800f899
 800f7c0:	0800f899 	.word	0x0800f899
 800f7c4:	0800f899 	.word	0x0800f899
 800f7c8:	0800f899 	.word	0x0800f899
 800f7cc:	0800f899 	.word	0x0800f899
 800f7d0:	0800f899 	.word	0x0800f899
 800f7d4:	0800f899 	.word	0x0800f899
 800f7d8:	0800f899 	.word	0x0800f899
 800f7dc:	0800f899 	.word	0x0800f899
 800f7e0:	0800f899 	.word	0x0800f899
 800f7e4:	0800f899 	.word	0x0800f899
 800f7e8:	0800f899 	.word	0x0800f899
 800f7ec:	0800f899 	.word	0x0800f899
 800f7f0:	0800f899 	.word	0x0800f899
 800f7f4:	0800f899 	.word	0x0800f899
 800f7f8:	0800f899 	.word	0x0800f899
 800f7fc:	0800f899 	.word	0x0800f899
 800f800:	0800f899 	.word	0x0800f899
 800f804:	0800f899 	.word	0x0800f899
 800f808:	0800f899 	.word	0x0800f899
 800f80c:	0800f899 	.word	0x0800f899
 800f810:	0800f899 	.word	0x0800f899
 800f814:	0800f899 	.word	0x0800f899
 800f818:	0800f899 	.word	0x0800f899
 800f81c:	0800f899 	.word	0x0800f899
 800f820:	0800f899 	.word	0x0800f899
 800f824:	0800f899 	.word	0x0800f899
 800f828:	0800f899 	.word	0x0800f899
 800f82c:	0800f899 	.word	0x0800f899
 800f830:	0800f891 	.word	0x0800f891
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f834:	f7f9 feee 	bl	8009614 <HAL_RCC_GetPCLK1Freq>
 800f838:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f83a:	e033      	b.n	800f8a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f83c:	f7f9 ff00 	bl	8009640 <HAL_RCC_GetPCLK2Freq>
 800f840:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f842:	e02f      	b.n	800f8a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	4618      	mov	r0, r3
 800f84a:	f7fb f8a7 	bl	800a99c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f852:	e027      	b.n	800f8a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f854:	f107 0308 	add.w	r3, r7, #8
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fb f9eb 	bl	800ac34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f862:	e01f      	b.n	800f8a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f864:	4b2c      	ldr	r3, [pc, #176]	; (800f918 <UART_SetConfig+0xb50>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f003 0320 	and.w	r3, r3, #32
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d009      	beq.n	800f884 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f870:	4b29      	ldr	r3, [pc, #164]	; (800f918 <UART_SetConfig+0xb50>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	08db      	lsrs	r3, r3, #3
 800f876:	f003 0303 	and.w	r3, r3, #3
 800f87a:	4a28      	ldr	r2, [pc, #160]	; (800f91c <UART_SetConfig+0xb54>)
 800f87c:	fa22 f303 	lsr.w	r3, r2, r3
 800f880:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f882:	e00f      	b.n	800f8a4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800f884:	4b25      	ldr	r3, [pc, #148]	; (800f91c <UART_SetConfig+0xb54>)
 800f886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f888:	e00c      	b.n	800f8a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f88a:	4b25      	ldr	r3, [pc, #148]	; (800f920 <UART_SetConfig+0xb58>)
 800f88c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f88e:	e009      	b.n	800f8a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f896:	e005      	b.n	800f8a4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800f898:	2300      	movs	r3, #0
 800f89a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f89c:	2301      	movs	r3, #1
 800f89e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f8a2:	bf00      	nop
    }

    if (pclk != 0U)
 800f8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d021      	beq.n	800f8ee <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ae:	4a1d      	ldr	r2, [pc, #116]	; (800f924 <UART_SetConfig+0xb5c>)
 800f8b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	085b      	lsrs	r3, r3, #1
 800f8c2:	441a      	add	r2, r3
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d2:	2b0f      	cmp	r3, #15
 800f8d4:	d908      	bls.n	800f8e8 <UART_SetConfig+0xb20>
 800f8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8dc:	d204      	bcs.n	800f8e8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8e4:	60da      	str	r2, [r3, #12]
 800f8e6:	e002      	b.n	800f8ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800f90a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3738      	adds	r7, #56	; 0x38
 800f912:	46bd      	mov	sp, r7
 800f914:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f918:	58024400 	.word	0x58024400
 800f91c:	03d09000 	.word	0x03d09000
 800f920:	003d0900 	.word	0x003d0900
 800f924:	08019ed4 	.word	0x08019ed4

0800f928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f934:	f003 0301 	and.w	r3, r3, #1
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00a      	beq.n	800f952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	430a      	orrs	r2, r1
 800f950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f956:	f003 0302 	and.w	r3, r3, #2
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00a      	beq.n	800f974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	430a      	orrs	r2, r1
 800f972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f978:	f003 0304 	and.w	r3, r3, #4
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00a      	beq.n	800f996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	430a      	orrs	r2, r1
 800f994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f99a:	f003 0308 	and.w	r3, r3, #8
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00a      	beq.n	800f9b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	430a      	orrs	r2, r1
 800f9b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9bc:	f003 0310 	and.w	r3, r3, #16
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d00a      	beq.n	800f9da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	430a      	orrs	r2, r1
 800f9d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9de:	f003 0320 	and.w	r3, r3, #32
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d00a      	beq.n	800f9fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	689b      	ldr	r3, [r3, #8]
 800f9ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	430a      	orrs	r2, r1
 800f9fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d01a      	beq.n	800fa3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	430a      	orrs	r2, r1
 800fa1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa26:	d10a      	bne.n	800fa3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	430a      	orrs	r2, r1
 800fa3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00a      	beq.n	800fa60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	430a      	orrs	r2, r1
 800fa5e:	605a      	str	r2, [r3, #4]
  }
}
 800fa60:	bf00      	nop
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b086      	sub	sp, #24
 800fa70:	af02      	add	r7, sp, #8
 800fa72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fa7c:	f7f3 fd8a 	bl	8003594 <HAL_GetTick>
 800fa80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f003 0308 	and.w	r3, r3, #8
 800fa8c:	2b08      	cmp	r3, #8
 800fa8e:	d10e      	bne.n	800faae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa94:	9300      	str	r3, [sp, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 f82c 	bl	800fafc <UART_WaitOnFlagUntilTimeout>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800faaa:	2303      	movs	r3, #3
 800faac:	e022      	b.n	800faf4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f003 0304 	and.w	r3, r3, #4
 800fab8:	2b04      	cmp	r3, #4
 800faba:	d10e      	bne.n	800fada <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fabc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fac0:	9300      	str	r3, [sp, #0]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2200      	movs	r2, #0
 800fac6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 f816 	bl	800fafc <UART_WaitOnFlagUntilTimeout>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d001      	beq.n	800fada <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fad6:	2303      	movs	r3, #3
 800fad8:	e00c      	b.n	800faf4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2220      	movs	r2, #32
 800fade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2220      	movs	r2, #32
 800fae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	4613      	mov	r3, r2
 800fb0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb0c:	e062      	b.n	800fbd4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb14:	d05e      	beq.n	800fbd4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb16:	f7f3 fd3d 	bl	8003594 <HAL_GetTick>
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	1ad3      	subs	r3, r2, r3
 800fb20:	69ba      	ldr	r2, [r7, #24]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d302      	bcc.n	800fb2c <UART_WaitOnFlagUntilTimeout+0x30>
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d11d      	bne.n	800fb68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fb3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	689a      	ldr	r2, [r3, #8]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f022 0201 	bic.w	r2, r2, #1
 800fb4a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2220      	movs	r2, #32
 800fb50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2220      	movs	r2, #32
 800fb58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800fb64:	2303      	movs	r3, #3
 800fb66:	e045      	b.n	800fbf4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f003 0304 	and.w	r3, r3, #4
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d02e      	beq.n	800fbd4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	69db      	ldr	r3, [r3, #28]
 800fb7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb84:	d126      	bne.n	800fbd4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fb9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	689a      	ldr	r2, [r3, #8]
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f022 0201 	bic.w	r2, r2, #1
 800fbae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2220      	movs	r2, #32
 800fbb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2220      	movs	r2, #32
 800fbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2220      	movs	r2, #32
 800fbc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800fbd0:	2303      	movs	r3, #3
 800fbd2:	e00f      	b.n	800fbf4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	69da      	ldr	r2, [r3, #28]
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	4013      	ands	r3, r2
 800fbde:	68ba      	ldr	r2, [r7, #8]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	bf0c      	ite	eq
 800fbe4:	2301      	moveq	r3, #1
 800fbe6:	2300      	movne	r3, #0
 800fbe8:	b2db      	uxtb	r3, r3
 800fbea:	461a      	mov	r2, r3
 800fbec:	79fb      	ldrb	r3, [r7, #7]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d08d      	beq.n	800fb0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fc12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	689a      	ldr	r2, [r3, #8]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800fc22:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2220      	movs	r2, #32
 800fc28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fc4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6899      	ldr	r1, [r3, #8]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	4b08      	ldr	r3, [pc, #32]	; (800fc7c <UART_EndRxTransfer+0x44>)
 800fc5c:	400b      	ands	r3, r1
 800fc5e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2220      	movs	r2, #32
 800fc64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800fc6e:	bf00      	nop
 800fc70:	370c      	adds	r7, #12
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop
 800fc7c:	effffffe 	.word	0xeffffffe

0800fc80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc8c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	69db      	ldr	r3, [r3, #28]
 800fc92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc96:	d01f      	beq.n	800fcd8 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fcae:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	689a      	ldr	r2, [r3, #8]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f022 0201 	bic.w	r2, r2, #1
 800fcbe:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	689a      	ldr	r2, [r3, #8]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fcce:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2220      	movs	r2, #32
 800fcd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f7ff f861 	bl	800eda0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcde:	bf00      	nop
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b084      	sub	sp, #16
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcf2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fcf4:	68f8      	ldr	r0, [r7, #12]
 800fcf6:	f7f0 fe59 	bl	80009ac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcfa:	bf00      	nop
 800fcfc:	3710      	adds	r7, #16
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b086      	sub	sp, #24
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd16:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd2a:	2b80      	cmp	r3, #128	; 0x80
 800fd2c:	d109      	bne.n	800fd42 <UART_DMAError+0x40>
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	2b21      	cmp	r3, #33	; 0x21
 800fd32:	d106      	bne.n	800fd42 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fd3c:	6978      	ldr	r0, [r7, #20]
 800fd3e:	f7ff ff5d 	bl	800fbfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd4c:	2b40      	cmp	r3, #64	; 0x40
 800fd4e:	d109      	bne.n	800fd64 <UART_DMAError+0x62>
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2b22      	cmp	r3, #34	; 0x22
 800fd54:	d106      	bne.n	800fd64 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fd5e:	6978      	ldr	r0, [r7, #20]
 800fd60:	f7ff ff6a 	bl	800fc38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd6a:	f043 0210 	orr.w	r2, r3, #16
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd74:	6978      	ldr	r0, [r7, #20]
 800fd76:	f7ff f81d 	bl	800edb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd7a:	bf00      	nop
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fd82:	b480      	push	{r7}
 800fd84:	b085      	sub	sp, #20
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d101      	bne.n	800fd98 <HAL_UARTEx_DisableFifoMode+0x16>
 800fd94:	2302      	movs	r3, #2
 800fd96:	e027      	b.n	800fde8 <HAL_UARTEx_DisableFifoMode+0x66>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2224      	movs	r2, #36	; 0x24
 800fda4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f022 0201 	bic.w	r2, r2, #1
 800fdbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fdc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2220      	movs	r2, #32
 800fdda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fde6:	2300      	movs	r3, #0
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3714      	adds	r7, #20
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d101      	bne.n	800fe0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fe08:	2302      	movs	r3, #2
 800fe0a:	e02d      	b.n	800fe68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2201      	movs	r2, #1
 800fe10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2224      	movs	r2, #36	; 0x24
 800fe18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f022 0201 	bic.w	r2, r2, #1
 800fe32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	430a      	orrs	r2, r1
 800fe46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 f84f 	bl	800feec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2220      	movs	r2, #32
 800fe5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fe66:	2300      	movs	r3, #0
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3710      	adds	r7, #16
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d101      	bne.n	800fe88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fe84:	2302      	movs	r3, #2
 800fe86:	e02d      	b.n	800fee4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2224      	movs	r2, #36	; 0x24
 800fe94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f022 0201 	bic.w	r2, r2, #1
 800feae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	689b      	ldr	r3, [r3, #8]
 800feb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	683a      	ldr	r2, [r7, #0]
 800fec0:	430a      	orrs	r2, r1
 800fec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f811 	bl	800feec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2220      	movs	r2, #32
 800fed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2200      	movs	r2, #0
 800fede:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fee2:	2300      	movs	r3, #0
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800feec:	b480      	push	{r7}
 800feee:	b089      	sub	sp, #36	; 0x24
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800fef4:	4a2f      	ldr	r2, [pc, #188]	; (800ffb4 <UARTEx_SetNbDataToProcess+0xc8>)
 800fef6:	f107 0314 	add.w	r3, r7, #20
 800fefa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fefe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ff02:	4a2d      	ldr	r2, [pc, #180]	; (800ffb8 <UARTEx_SetNbDataToProcess+0xcc>)
 800ff04:	f107 030c 	add.w	r3, r7, #12
 800ff08:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff0c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d108      	bne.n	800ff2a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2201      	movs	r2, #1
 800ff24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ff28:	e03d      	b.n	800ffa6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ff2a:	2310      	movs	r3, #16
 800ff2c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ff2e:	2310      	movs	r3, #16
 800ff30:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	689b      	ldr	r3, [r3, #8]
 800ff38:	0e5b      	lsrs	r3, r3, #25
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	f003 0307 	and.w	r3, r3, #7
 800ff40:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	0f5b      	lsrs	r3, r3, #29
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	f003 0307 	and.w	r3, r3, #7
 800ff50:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ff52:	7fbb      	ldrb	r3, [r7, #30]
 800ff54:	7f3a      	ldrb	r2, [r7, #28]
 800ff56:	f107 0120 	add.w	r1, r7, #32
 800ff5a:	440a      	add	r2, r1
 800ff5c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ff60:	fb02 f303 	mul.w	r3, r2, r3
 800ff64:	7f3a      	ldrb	r2, [r7, #28]
 800ff66:	f107 0120 	add.w	r1, r7, #32
 800ff6a:	440a      	add	r2, r1
 800ff6c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ff70:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ff7c:	7ffb      	ldrb	r3, [r7, #31]
 800ff7e:	7f7a      	ldrb	r2, [r7, #29]
 800ff80:	f107 0120 	add.w	r1, r7, #32
 800ff84:	440a      	add	r2, r1
 800ff86:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ff8a:	fb02 f303 	mul.w	r3, r2, r3
 800ff8e:	7f7a      	ldrb	r2, [r7, #29]
 800ff90:	f107 0120 	add.w	r1, r7, #32
 800ff94:	440a      	add	r2, r1
 800ff96:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ff9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ffa6:	bf00      	nop
 800ffa8:	3724      	adds	r7, #36	; 0x24
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr
 800ffb2:	bf00      	nop
 800ffb4:	08019e14 	.word	0x08019e14
 800ffb8:	08019e1c 	.word	0x08019e1c

0800ffbc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ffbc:	b084      	sub	sp, #16
 800ffbe:	b480      	push	{r7}
 800ffc0:	b085      	sub	sp, #20
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
 800ffc6:	f107 001c 	add.w	r0, r7, #28
 800ffca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ffd2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ffd4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ffd6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ffd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ffda:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ffdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ffde:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ffe2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	685a      	ldr	r2, [r3, #4]
 800ffee:	4b07      	ldr	r3, [pc, #28]	; (801000c <SDMMC_Init+0x50>)
 800fff0:	4013      	ands	r3, r2
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	431a      	orrs	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3714      	adds	r7, #20
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	b004      	add	sp, #16
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	ffc02c00 	.word	0xffc02c00

08010010 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801001e:	4618      	mov	r0, r3
 8010020:	370c      	adds	r7, #12
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr

0801002a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801002a:	b480      	push	{r7}
 801002c:	b083      	sub	sp, #12
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
 8010032:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f043 0203 	orr.w	r2, r3, #3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	370c      	adds	r7, #12
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801006e:	b480      	push	{r7}
 8010070:	b083      	sub	sp, #12
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f003 0303 	and.w	r3, r3, #3
}
 801007e:	4618      	mov	r0, r3
 8010080:	370c      	adds	r7, #12
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
	...

0801008c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801008c:	b480      	push	{r7}
 801008e:	b085      	sub	sp, #20
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010096:	2300      	movs	r3, #0
 8010098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80100b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80100b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	68da      	ldr	r2, [r3, #12]
 80100c2:	4b06      	ldr	r3, [pc, #24]	; (80100dc <SDMMC_SendCommand+0x50>)
 80100c4:	4013      	ands	r3, r2
 80100c6:	68fa      	ldr	r2, [r7, #12]
 80100c8:	431a      	orrs	r2, r3
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr
 80100dc:	fffee0c0 	.word	0xfffee0c0

080100e0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	691b      	ldr	r3, [r3, #16]
 80100ec:	b2db      	uxtb	r3, r3
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	370c      	adds	r7, #12
 80100f2:	46bd      	mov	sp, r7
 80100f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f8:	4770      	bx	lr

080100fa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80100fa:	b480      	push	{r7}
 80100fc:	b085      	sub	sp, #20
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
 8010102:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	3314      	adds	r3, #20
 8010108:	461a      	mov	r2, r3
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	4413      	add	r3, r2
 801010e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3714      	adds	r7, #20
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801012a:	2300      	movs	r3, #0
 801012c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	685a      	ldr	r2, [r3, #4]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010146:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801014c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010152:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	4313      	orrs	r3, r2
 8010158:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801015e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	431a      	orrs	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801016a:	2300      	movs	r3, #0

}
 801016c:	4618      	mov	r0, r3
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b088      	sub	sp, #32
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010186:	2310      	movs	r3, #16
 8010188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801018a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801018e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010190:	2300      	movs	r3, #0
 8010192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010198:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801019a:	f107 0308 	add.w	r3, r7, #8
 801019e:	4619      	mov	r1, r3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f7ff ff73 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80101a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80101aa:	2110      	movs	r1, #16
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 faaf 	bl	8010710 <SDMMC_GetCmdResp1>
 80101b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101b4:	69fb      	ldr	r3, [r7, #28]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3720      	adds	r7, #32
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b088      	sub	sp, #32
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80101cc:	2311      	movs	r3, #17
 80101ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101d6:	2300      	movs	r3, #0
 80101d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101e0:	f107 0308 	add.w	r3, r7, #8
 80101e4:	4619      	mov	r1, r3
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f7ff ff50 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80101ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80101f0:	2111      	movs	r1, #17
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 fa8c 	bl	8010710 <SDMMC_GetCmdResp1>
 80101f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101fa:	69fb      	ldr	r3, [r7, #28]
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3720      	adds	r7, #32
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b088      	sub	sp, #32
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010212:	2312      	movs	r3, #18
 8010214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010216:	f44f 7380 	mov.w	r3, #256	; 0x100
 801021a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801021c:	2300      	movs	r3, #0
 801021e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010226:	f107 0308 	add.w	r3, r7, #8
 801022a:	4619      	mov	r1, r3
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7ff ff2d 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010232:	f241 3288 	movw	r2, #5000	; 0x1388
 8010236:	2112      	movs	r1, #18
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f000 fa69 	bl	8010710 <SDMMC_GetCmdResp1>
 801023e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010240:	69fb      	ldr	r3, [r7, #28]
}
 8010242:	4618      	mov	r0, r3
 8010244:	3720      	adds	r7, #32
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b088      	sub	sp, #32
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
 8010252:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010258:	2318      	movs	r3, #24
 801025a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801025c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010262:	2300      	movs	r3, #0
 8010264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801026a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801026c:	f107 0308 	add.w	r3, r7, #8
 8010270:	4619      	mov	r1, r3
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7ff ff0a 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010278:	f241 3288 	movw	r2, #5000	; 0x1388
 801027c:	2118      	movs	r1, #24
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f000 fa46 	bl	8010710 <SDMMC_GetCmdResp1>
 8010284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010286:	69fb      	ldr	r3, [r7, #28]
}
 8010288:	4618      	mov	r0, r3
 801028a:	3720      	adds	r7, #32
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b088      	sub	sp, #32
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801029e:	2319      	movs	r3, #25
 80102a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102a8:	2300      	movs	r3, #0
 80102aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102b2:	f107 0308 	add.w	r3, r7, #8
 80102b6:	4619      	mov	r1, r3
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f7ff fee7 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80102be:	f241 3288 	movw	r2, #5000	; 0x1388
 80102c2:	2119      	movs	r1, #25
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fa23 	bl	8010710 <SDMMC_GetCmdResp1>
 80102ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102cc:	69fb      	ldr	r3, [r7, #28]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3720      	adds	r7, #32
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
	...

080102d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b088      	sub	sp, #32
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80102e0:	2300      	movs	r3, #0
 80102e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80102e4:	230c      	movs	r3, #12
 80102e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102ee:	2300      	movs	r3, #0
 80102f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102f6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010310:	f107 0308 	add.w	r3, r7, #8
 8010314:	4619      	mov	r1, r3
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f7ff feb8 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801031c:	4a0b      	ldr	r2, [pc, #44]	; (801034c <SDMMC_CmdStopTransfer+0x74>)
 801031e:	210c      	movs	r1, #12
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 f9f5 	bl	8010710 <SDMMC_GetCmdResp1>
 8010326:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801033a:	d101      	bne.n	8010340 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801033c:	2300      	movs	r3, #0
 801033e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010340:	69fb      	ldr	r3, [r7, #28]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3720      	adds	r7, #32
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	05f5e100 	.word	0x05f5e100

08010350 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b08a      	sub	sp, #40	; 0x28
 8010354:	af00      	add	r7, sp, #0
 8010356:	60f8      	str	r0, [r7, #12]
 8010358:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010360:	2307      	movs	r3, #7
 8010362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010368:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801036a:	2300      	movs	r3, #0
 801036c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801036e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010372:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010374:	f107 0310 	add.w	r3, r7, #16
 8010378:	4619      	mov	r1, r3
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f7ff fe86 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010380:	f241 3288 	movw	r2, #5000	; 0x1388
 8010384:	2107      	movs	r1, #7
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f000 f9c2 	bl	8010710 <SDMMC_GetCmdResp1>
 801038c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010390:	4618      	mov	r0, r3
 8010392:	3728      	adds	r7, #40	; 0x28
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b088      	sub	sp, #32
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80103a0:	2300      	movs	r3, #0
 80103a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80103a4:	2300      	movs	r3, #0
 80103a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80103a8:	2300      	movs	r3, #0
 80103aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103ac:	2300      	movs	r3, #0
 80103ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103b6:	f107 0308 	add.w	r3, r7, #8
 80103ba:	4619      	mov	r1, r3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7ff fe65 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 f976 	bl	80106b4 <SDMMC_GetCmdError>
 80103c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ca:	69fb      	ldr	r3, [r7, #28]
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3720      	adds	r7, #32
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b088      	sub	sp, #32
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80103dc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80103e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80103e2:	2308      	movs	r3, #8
 80103e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103ec:	2300      	movs	r3, #0
 80103ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103f6:	f107 0308 	add.w	r3, r7, #8
 80103fa:	4619      	mov	r1, r3
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7ff fe45 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 fb78 	bl	8010af8 <SDMMC_GetCmdResp7>
 8010408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801040a:	69fb      	ldr	r3, [r7, #28]
}
 801040c:	4618      	mov	r0, r3
 801040e:	3720      	adds	r7, #32
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b088      	sub	sp, #32
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010422:	2337      	movs	r3, #55	; 0x37
 8010424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010426:	f44f 7380 	mov.w	r3, #256	; 0x100
 801042a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801042c:	2300      	movs	r3, #0
 801042e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010436:	f107 0308 	add.w	r3, r7, #8
 801043a:	4619      	mov	r1, r3
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7ff fe25 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010442:	f241 3288 	movw	r2, #5000	; 0x1388
 8010446:	2137      	movs	r1, #55	; 0x37
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 f961 	bl	8010710 <SDMMC_GetCmdResp1>
 801044e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010450:	69fb      	ldr	r3, [r7, #28]
}
 8010452:	4618      	mov	r0, r3
 8010454:	3720      	adds	r7, #32
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801045a:	b580      	push	{r7, lr}
 801045c:	b088      	sub	sp, #32
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010468:	2329      	movs	r3, #41	; 0x29
 801046a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801046c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010472:	2300      	movs	r3, #0
 8010474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801047a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801047c:	f107 0308 	add.w	r3, r7, #8
 8010480:	4619      	mov	r1, r3
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff fe02 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 fa7d 	bl	8010988 <SDMMC_GetCmdResp3>
 801048e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010490:	69fb      	ldr	r3, [r7, #28]
}
 8010492:	4618      	mov	r0, r3
 8010494:	3720      	adds	r7, #32
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b088      	sub	sp, #32
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
 80104a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80104a8:	2306      	movs	r3, #6
 80104aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104b2:	2300      	movs	r3, #0
 80104b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104bc:	f107 0308 	add.w	r3, r7, #8
 80104c0:	4619      	mov	r1, r3
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7ff fde2 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80104c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80104cc:	2106      	movs	r1, #6
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 f91e 	bl	8010710 <SDMMC_GetCmdResp1>
 80104d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104d6:	69fb      	ldr	r3, [r7, #28]
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3720      	adds	r7, #32
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b088      	sub	sp, #32
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80104e8:	2300      	movs	r3, #0
 80104ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80104ec:	2333      	movs	r3, #51	; 0x33
 80104ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104f6:	2300      	movs	r3, #0
 80104f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010500:	f107 0308 	add.w	r3, r7, #8
 8010504:	4619      	mov	r1, r3
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f7ff fdc0 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801050c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010510:	2133      	movs	r1, #51	; 0x33
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f8fc 	bl	8010710 <SDMMC_GetCmdResp1>
 8010518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801051a:	69fb      	ldr	r3, [r7, #28]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3720      	adds	r7, #32
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b088      	sub	sp, #32
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801052c:	2300      	movs	r3, #0
 801052e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010530:	2302      	movs	r3, #2
 8010532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010534:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801053a:	2300      	movs	r3, #0
 801053c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801053e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010544:	f107 0308 	add.w	r3, r7, #8
 8010548:	4619      	mov	r1, r3
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7ff fd9e 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f000 f9cf 	bl	80108f4 <SDMMC_GetCmdResp2>
 8010556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010558:	69fb      	ldr	r3, [r7, #28]
}
 801055a:	4618      	mov	r0, r3
 801055c:	3720      	adds	r7, #32
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b088      	sub	sp, #32
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
 801056a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010570:	2309      	movs	r3, #9
 8010572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010574:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801057a:	2300      	movs	r3, #0
 801057c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801057e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010582:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010584:	f107 0308 	add.w	r3, r7, #8
 8010588:	4619      	mov	r1, r3
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff fd7e 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f000 f9af 	bl	80108f4 <SDMMC_GetCmdResp2>
 8010596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010598:	69fb      	ldr	r3, [r7, #28]
}
 801059a:	4618      	mov	r0, r3
 801059c:	3720      	adds	r7, #32
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b088      	sub	sp, #32
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
 80105aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80105ac:	2300      	movs	r3, #0
 80105ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80105b0:	2303      	movs	r3, #3
 80105b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105ba:	2300      	movs	r3, #0
 80105bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105c4:	f107 0308 	add.w	r3, r7, #8
 80105c8:	4619      	mov	r1, r3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7ff fd5e 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80105d0:	683a      	ldr	r2, [r7, #0]
 80105d2:	2103      	movs	r1, #3
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 fa17 	bl	8010a08 <SDMMC_GetCmdResp6>
 80105da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105dc:	69fb      	ldr	r3, [r7, #28]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3720      	adds	r7, #32
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105e6:	b580      	push	{r7, lr}
 80105e8:	b088      	sub	sp, #32
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
 80105ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80105f4:	230d      	movs	r3, #13
 80105f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105fe:	2300      	movs	r3, #0
 8010600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010608:	f107 0308 	add.w	r3, r7, #8
 801060c:	4619      	mov	r1, r3
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f7ff fd3c 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010614:	f241 3288 	movw	r2, #5000	; 0x1388
 8010618:	210d      	movs	r1, #13
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 f878 	bl	8010710 <SDMMC_GetCmdResp1>
 8010620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010622:	69fb      	ldr	r3, [r7, #28]
}
 8010624:	4618      	mov	r0, r3
 8010626:	3720      	adds	r7, #32
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b088      	sub	sp, #32
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010634:	2300      	movs	r3, #0
 8010636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010638:	230d      	movs	r3, #13
 801063a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801063c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010642:	2300      	movs	r3, #0
 8010644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801064a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801064c:	f107 0308 	add.w	r3, r7, #8
 8010650:	4619      	mov	r1, r3
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7ff fd1a 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010658:	f241 3288 	movw	r2, #5000	; 0x1388
 801065c:	210d      	movs	r1, #13
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 f856 	bl	8010710 <SDMMC_GetCmdResp1>
 8010664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010666:	69fb      	ldr	r3, [r7, #28]
}
 8010668:	4618      	mov	r0, r3
 801066a:	3720      	adds	r7, #32
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b088      	sub	sp, #32
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8010678:	2300      	movs	r3, #0
 801067a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 801067c:	230b      	movs	r3, #11
 801067e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010686:	2300      	movs	r3, #0
 8010688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801068e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010690:	f107 0308 	add.w	r3, r7, #8
 8010694:	4619      	mov	r1, r3
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f7ff fcf8 	bl	801008c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 801069c:	f241 3288 	movw	r2, #5000	; 0x1388
 80106a0:	210b      	movs	r1, #11
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 f834 	bl	8010710 <SDMMC_GetCmdResp1>
 80106a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106aa:	69fb      	ldr	r3, [r7, #28]
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3720      	adds	r7, #32
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106bc:	4b11      	ldr	r3, [pc, #68]	; (8010704 <SDMMC_GetCmdError+0x50>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4a11      	ldr	r2, [pc, #68]	; (8010708 <SDMMC_GetCmdError+0x54>)
 80106c2:	fba2 2303 	umull	r2, r3, r2, r3
 80106c6:	0a5b      	lsrs	r3, r3, #9
 80106c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80106cc:	fb02 f303 	mul.w	r3, r2, r3
 80106d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	1e5a      	subs	r2, r3, #1
 80106d6:	60fa      	str	r2, [r7, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d102      	bne.n	80106e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106e0:	e009      	b.n	80106f6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d0f1      	beq.n	80106d2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4a06      	ldr	r2, [pc, #24]	; (801070c <SDMMC_GetCmdError+0x58>)
 80106f2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3714      	adds	r7, #20
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	2400000c 	.word	0x2400000c
 8010708:	10624dd3 	.word	0x10624dd3
 801070c:	002000c5 	.word	0x002000c5

08010710 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	460b      	mov	r3, r1
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801071e:	4b70      	ldr	r3, [pc, #448]	; (80108e0 <SDMMC_GetCmdResp1+0x1d0>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	4a70      	ldr	r2, [pc, #448]	; (80108e4 <SDMMC_GetCmdResp1+0x1d4>)
 8010724:	fba2 2303 	umull	r2, r3, r2, r3
 8010728:	0a5a      	lsrs	r2, r3, #9
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	fb02 f303 	mul.w	r3, r2, r3
 8010730:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	1e5a      	subs	r2, r3, #1
 8010736:	61fa      	str	r2, [r7, #28]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d102      	bne.n	8010742 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801073c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010740:	e0c9      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010746:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010748:	69ba      	ldr	r2, [r7, #24]
 801074a:	4b67      	ldr	r3, [pc, #412]	; (80108e8 <SDMMC_GetCmdResp1+0x1d8>)
 801074c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801074e:	2b00      	cmp	r3, #0
 8010750:	d0ef      	beq.n	8010732 <SDMMC_GetCmdResp1+0x22>
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1ea      	bne.n	8010732 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010760:	f003 0304 	and.w	r3, r3, #4
 8010764:	2b00      	cmp	r3, #0
 8010766:	d004      	beq.n	8010772 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2204      	movs	r2, #4
 801076c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801076e:	2304      	movs	r3, #4
 8010770:	e0b1      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010776:	f003 0301 	and.w	r3, r3, #1
 801077a:	2b00      	cmp	r3, #0
 801077c:	d004      	beq.n	8010788 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	2201      	movs	r2, #1
 8010782:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010784:	2301      	movs	r3, #1
 8010786:	e0a6      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	4a58      	ldr	r2, [pc, #352]	; (80108ec <SDMMC_GetCmdResp1+0x1dc>)
 801078c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	f7ff fca6 	bl	80100e0 <SDMMC_GetCommandResponse>
 8010794:	4603      	mov	r3, r0
 8010796:	461a      	mov	r2, r3
 8010798:	7afb      	ldrb	r3, [r7, #11]
 801079a:	4293      	cmp	r3, r2
 801079c:	d001      	beq.n	80107a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801079e:	2301      	movs	r3, #1
 80107a0:	e099      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80107a2:	2100      	movs	r1, #0
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f7ff fca8 	bl	80100fa <SDMMC_GetResponse>
 80107aa:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80107ac:	697a      	ldr	r2, [r7, #20]
 80107ae:	4b50      	ldr	r3, [pc, #320]	; (80108f0 <SDMMC_GetCmdResp1+0x1e0>)
 80107b0:	4013      	ands	r3, r2
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d101      	bne.n	80107ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80107b6:	2300      	movs	r3, #0
 80107b8:	e08d      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	da02      	bge.n	80107c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80107c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80107c4:	e087      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d001      	beq.n	80107d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80107d0:	2340      	movs	r3, #64	; 0x40
 80107d2:	e080      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80107de:	2380      	movs	r3, #128	; 0x80
 80107e0:	e079      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80107ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107f0:	e071      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d002      	beq.n	8010802 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80107fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010800:	e069      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010808:	2b00      	cmp	r3, #0
 801080a:	d002      	beq.n	8010812 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801080c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010810:	e061      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010818:	2b00      	cmp	r3, #0
 801081a:	d002      	beq.n	8010822 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801081c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010820:	e059      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010828:	2b00      	cmp	r3, #0
 801082a:	d002      	beq.n	8010832 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010830:	e051      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010838:	2b00      	cmp	r3, #0
 801083a:	d002      	beq.n	8010842 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010840:	e049      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010848:	2b00      	cmp	r3, #0
 801084a:	d002      	beq.n	8010852 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801084c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010850:	e041      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010858:	2b00      	cmp	r3, #0
 801085a:	d002      	beq.n	8010862 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801085c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010860:	e039      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010868:	2b00      	cmp	r3, #0
 801086a:	d002      	beq.n	8010872 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801086c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010870:	e031      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010878:	2b00      	cmp	r3, #0
 801087a:	d002      	beq.n	8010882 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801087c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010880:	e029      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010888:	2b00      	cmp	r3, #0
 801088a:	d002      	beq.n	8010892 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801088c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010890:	e021      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801089c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80108a0:	e019      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d002      	beq.n	80108b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80108ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80108b0:	e011      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d002      	beq.n	80108c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80108bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80108c0:	e009      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f003 0308 	and.w	r3, r3, #8
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80108cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80108d0:	e001      	b.n	80108d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80108d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3720      	adds	r7, #32
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	2400000c 	.word	0x2400000c
 80108e4:	10624dd3 	.word	0x10624dd3
 80108e8:	00200045 	.word	0x00200045
 80108ec:	002000c5 	.word	0x002000c5
 80108f0:	fdffe008 	.word	0xfdffe008

080108f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b085      	sub	sp, #20
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80108fc:	4b1f      	ldr	r3, [pc, #124]	; (801097c <SDMMC_GetCmdResp2+0x88>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4a1f      	ldr	r2, [pc, #124]	; (8010980 <SDMMC_GetCmdResp2+0x8c>)
 8010902:	fba2 2303 	umull	r2, r3, r2, r3
 8010906:	0a5b      	lsrs	r3, r3, #9
 8010908:	f241 3288 	movw	r2, #5000	; 0x1388
 801090c:	fb02 f303 	mul.w	r3, r2, r3
 8010910:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	1e5a      	subs	r2, r3, #1
 8010916:	60fa      	str	r2, [r7, #12]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d102      	bne.n	8010922 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801091c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010920:	e026      	b.n	8010970 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010926:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801092e:	2b00      	cmp	r3, #0
 8010930:	d0ef      	beq.n	8010912 <SDMMC_GetCmdResp2+0x1e>
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010938:	2b00      	cmp	r3, #0
 801093a:	d1ea      	bne.n	8010912 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010940:	f003 0304 	and.w	r3, r3, #4
 8010944:	2b00      	cmp	r3, #0
 8010946:	d004      	beq.n	8010952 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2204      	movs	r2, #4
 801094c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801094e:	2304      	movs	r3, #4
 8010950:	e00e      	b.n	8010970 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010956:	f003 0301 	and.w	r3, r3, #1
 801095a:	2b00      	cmp	r3, #0
 801095c:	d004      	beq.n	8010968 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2201      	movs	r2, #1
 8010962:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010964:	2301      	movs	r3, #1
 8010966:	e003      	b.n	8010970 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	4a06      	ldr	r2, [pc, #24]	; (8010984 <SDMMC_GetCmdResp2+0x90>)
 801096c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801096e:	2300      	movs	r3, #0
}
 8010970:	4618      	mov	r0, r3
 8010972:	3714      	adds	r7, #20
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr
 801097c:	2400000c 	.word	0x2400000c
 8010980:	10624dd3 	.word	0x10624dd3
 8010984:	002000c5 	.word	0x002000c5

08010988 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010988:	b480      	push	{r7}
 801098a:	b085      	sub	sp, #20
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010990:	4b1a      	ldr	r3, [pc, #104]	; (80109fc <SDMMC_GetCmdResp3+0x74>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4a1a      	ldr	r2, [pc, #104]	; (8010a00 <SDMMC_GetCmdResp3+0x78>)
 8010996:	fba2 2303 	umull	r2, r3, r2, r3
 801099a:	0a5b      	lsrs	r3, r3, #9
 801099c:	f241 3288 	movw	r2, #5000	; 0x1388
 80109a0:	fb02 f303 	mul.w	r3, r2, r3
 80109a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	1e5a      	subs	r2, r3, #1
 80109aa:	60fa      	str	r2, [r7, #12]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d102      	bne.n	80109b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109b4:	e01b      	b.n	80109ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d0ef      	beq.n	80109a6 <SDMMC_GetCmdResp3+0x1e>
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d1ea      	bne.n	80109a6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d4:	f003 0304 	and.w	r3, r3, #4
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d004      	beq.n	80109e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2204      	movs	r2, #4
 80109e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109e2:	2304      	movs	r3, #4
 80109e4:	e003      	b.n	80109ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4a06      	ldr	r2, [pc, #24]	; (8010a04 <SDMMC_GetCmdResp3+0x7c>)
 80109ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80109ec:	2300      	movs	r3, #0
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3714      	adds	r7, #20
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop
 80109fc:	2400000c 	.word	0x2400000c
 8010a00:	10624dd3 	.word	0x10624dd3
 8010a04:	002000c5 	.word	0x002000c5

08010a08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b088      	sub	sp, #32
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	60f8      	str	r0, [r7, #12]
 8010a10:	460b      	mov	r3, r1
 8010a12:	607a      	str	r2, [r7, #4]
 8010a14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a16:	4b35      	ldr	r3, [pc, #212]	; (8010aec <SDMMC_GetCmdResp6+0xe4>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a35      	ldr	r2, [pc, #212]	; (8010af0 <SDMMC_GetCmdResp6+0xe8>)
 8010a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a20:	0a5b      	lsrs	r3, r3, #9
 8010a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a26:	fb02 f303 	mul.w	r3, r2, r3
 8010a2a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	1e5a      	subs	r2, r3, #1
 8010a30:	61fa      	str	r2, [r7, #28]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d102      	bne.n	8010a3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a3a:	e052      	b.n	8010ae2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a42:	69bb      	ldr	r3, [r7, #24]
 8010a44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d0ef      	beq.n	8010a2c <SDMMC_GetCmdResp6+0x24>
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d1ea      	bne.n	8010a2c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a5a:	f003 0304 	and.w	r3, r3, #4
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d004      	beq.n	8010a6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2204      	movs	r2, #4
 8010a66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a68:	2304      	movs	r3, #4
 8010a6a:	e03a      	b.n	8010ae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a70:	f003 0301 	and.w	r3, r3, #1
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d004      	beq.n	8010a82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e02f      	b.n	8010ae2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f7ff fb2c 	bl	80100e0 <SDMMC_GetCommandResponse>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	7afb      	ldrb	r3, [r7, #11]
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d001      	beq.n	8010a96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a92:	2301      	movs	r3, #1
 8010a94:	e025      	b.n	8010ae2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	4a16      	ldr	r2, [pc, #88]	; (8010af4 <SDMMC_GetCmdResp6+0xec>)
 8010a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010a9c:	2100      	movs	r1, #0
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f7ff fb2b 	bl	80100fa <SDMMC_GetResponse>
 8010aa4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d106      	bne.n	8010abe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	0c1b      	lsrs	r3, r3, #16
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010aba:	2300      	movs	r3, #0
 8010abc:	e011      	b.n	8010ae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d002      	beq.n	8010ace <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010acc:	e009      	b.n	8010ae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d002      	beq.n	8010ade <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010adc:	e001      	b.n	8010ae2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3720      	adds	r7, #32
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	2400000c 	.word	0x2400000c
 8010af0:	10624dd3 	.word	0x10624dd3
 8010af4:	002000c5 	.word	0x002000c5

08010af8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b00:	4b22      	ldr	r3, [pc, #136]	; (8010b8c <SDMMC_GetCmdResp7+0x94>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a22      	ldr	r2, [pc, #136]	; (8010b90 <SDMMC_GetCmdResp7+0x98>)
 8010b06:	fba2 2303 	umull	r2, r3, r2, r3
 8010b0a:	0a5b      	lsrs	r3, r3, #9
 8010b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b10:	fb02 f303 	mul.w	r3, r2, r3
 8010b14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	1e5a      	subs	r2, r3, #1
 8010b1a:	60fa      	str	r2, [r7, #12]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d102      	bne.n	8010b26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b24:	e02c      	b.n	8010b80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d0ef      	beq.n	8010b16 <SDMMC_GetCmdResp7+0x1e>
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d1ea      	bne.n	8010b16 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b44:	f003 0304 	and.w	r3, r3, #4
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d004      	beq.n	8010b56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2204      	movs	r2, #4
 8010b50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b52:	2304      	movs	r3, #4
 8010b54:	e014      	b.n	8010b80 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b5a:	f003 0301 	and.w	r3, r3, #1
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d004      	beq.n	8010b6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2201      	movs	r2, #1
 8010b66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	e009      	b.n	8010b80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d002      	beq.n	8010b7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2240      	movs	r2, #64	; 0x40
 8010b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010b7e:	2300      	movs	r3, #0

}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3714      	adds	r7, #20
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	2400000c 	.word	0x2400000c
 8010b90:	10624dd3 	.word	0x10624dd3

08010b94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b94:	b084      	sub	sp, #16
 8010b96:	b580      	push	{r7, lr}
 8010b98:	b084      	sub	sp, #16
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
 8010b9e:	f107 001c 	add.w	r0, r7, #28
 8010ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d120      	bne.n	8010bee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	68da      	ldr	r2, [r3, #12]
 8010bbc:	4b25      	ldr	r3, [pc, #148]	; (8010c54 <USB_CoreInit+0xc0>)
 8010bbe:	4013      	ands	r3, r2
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d105      	bne.n	8010be2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	68db      	ldr	r3, [r3, #12]
 8010bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f001 fabe 	bl	8012164 <USB_CoreReset>
 8010be8:	4603      	mov	r3, r0
 8010bea:	73fb      	strb	r3, [r7, #15]
 8010bec:	e01a      	b.n	8010c24 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f001 fab2 	bl	8012164 <USB_CoreReset>
 8010c00:	4603      	mov	r3, r0
 8010c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d106      	bne.n	8010c18 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	639a      	str	r2, [r3, #56]	; 0x38
 8010c16:	e005      	b.n	8010c24 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d10b      	bne.n	8010c42 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	689b      	ldr	r3, [r3, #8]
 8010c2e:	f043 0206 	orr.w	r2, r3, #6
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	689b      	ldr	r3, [r3, #8]
 8010c3a:	f043 0220 	orr.w	r2, r3, #32
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3710      	adds	r7, #16
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c4e:	b004      	add	sp, #16
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	ffbdffbf 	.word	0xffbdffbf

08010c58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b087      	sub	sp, #28
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	4613      	mov	r3, r2
 8010c64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c66:	79fb      	ldrb	r3, [r7, #7]
 8010c68:	2b02      	cmp	r3, #2
 8010c6a:	d165      	bne.n	8010d38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	4a41      	ldr	r2, [pc, #260]	; (8010d74 <USB_SetTurnaroundTime+0x11c>)
 8010c70:	4293      	cmp	r3, r2
 8010c72:	d906      	bls.n	8010c82 <USB_SetTurnaroundTime+0x2a>
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	4a40      	ldr	r2, [pc, #256]	; (8010d78 <USB_SetTurnaroundTime+0x120>)
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d802      	bhi.n	8010c82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c7c:	230f      	movs	r3, #15
 8010c7e:	617b      	str	r3, [r7, #20]
 8010c80:	e062      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	4a3c      	ldr	r2, [pc, #240]	; (8010d78 <USB_SetTurnaroundTime+0x120>)
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d906      	bls.n	8010c98 <USB_SetTurnaroundTime+0x40>
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	4a3b      	ldr	r2, [pc, #236]	; (8010d7c <USB_SetTurnaroundTime+0x124>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d802      	bhi.n	8010c98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010c92:	230e      	movs	r3, #14
 8010c94:	617b      	str	r3, [r7, #20]
 8010c96:	e057      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	4a38      	ldr	r2, [pc, #224]	; (8010d7c <USB_SetTurnaroundTime+0x124>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d906      	bls.n	8010cae <USB_SetTurnaroundTime+0x56>
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	4a37      	ldr	r2, [pc, #220]	; (8010d80 <USB_SetTurnaroundTime+0x128>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d802      	bhi.n	8010cae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010ca8:	230d      	movs	r3, #13
 8010caa:	617b      	str	r3, [r7, #20]
 8010cac:	e04c      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	4a33      	ldr	r2, [pc, #204]	; (8010d80 <USB_SetTurnaroundTime+0x128>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d906      	bls.n	8010cc4 <USB_SetTurnaroundTime+0x6c>
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	4a32      	ldr	r2, [pc, #200]	; (8010d84 <USB_SetTurnaroundTime+0x12c>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d802      	bhi.n	8010cc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010cbe:	230c      	movs	r3, #12
 8010cc0:	617b      	str	r3, [r7, #20]
 8010cc2:	e041      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	4a2f      	ldr	r2, [pc, #188]	; (8010d84 <USB_SetTurnaroundTime+0x12c>)
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d906      	bls.n	8010cda <USB_SetTurnaroundTime+0x82>
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	4a2e      	ldr	r2, [pc, #184]	; (8010d88 <USB_SetTurnaroundTime+0x130>)
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	d802      	bhi.n	8010cda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010cd4:	230b      	movs	r3, #11
 8010cd6:	617b      	str	r3, [r7, #20]
 8010cd8:	e036      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	4a2a      	ldr	r2, [pc, #168]	; (8010d88 <USB_SetTurnaroundTime+0x130>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d906      	bls.n	8010cf0 <USB_SetTurnaroundTime+0x98>
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	4a29      	ldr	r2, [pc, #164]	; (8010d8c <USB_SetTurnaroundTime+0x134>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d802      	bhi.n	8010cf0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010cea:	230a      	movs	r3, #10
 8010cec:	617b      	str	r3, [r7, #20]
 8010cee:	e02b      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	4a26      	ldr	r2, [pc, #152]	; (8010d8c <USB_SetTurnaroundTime+0x134>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d906      	bls.n	8010d06 <USB_SetTurnaroundTime+0xae>
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	4a25      	ldr	r2, [pc, #148]	; (8010d90 <USB_SetTurnaroundTime+0x138>)
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	d802      	bhi.n	8010d06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010d00:	2309      	movs	r3, #9
 8010d02:	617b      	str	r3, [r7, #20]
 8010d04:	e020      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	4a21      	ldr	r2, [pc, #132]	; (8010d90 <USB_SetTurnaroundTime+0x138>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d906      	bls.n	8010d1c <USB_SetTurnaroundTime+0xc4>
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	4a20      	ldr	r2, [pc, #128]	; (8010d94 <USB_SetTurnaroundTime+0x13c>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d802      	bhi.n	8010d1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d16:	2308      	movs	r3, #8
 8010d18:	617b      	str	r3, [r7, #20]
 8010d1a:	e015      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	4a1d      	ldr	r2, [pc, #116]	; (8010d94 <USB_SetTurnaroundTime+0x13c>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d906      	bls.n	8010d32 <USB_SetTurnaroundTime+0xda>
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	4a1c      	ldr	r2, [pc, #112]	; (8010d98 <USB_SetTurnaroundTime+0x140>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d802      	bhi.n	8010d32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d2c:	2307      	movs	r3, #7
 8010d2e:	617b      	str	r3, [r7, #20]
 8010d30:	e00a      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d32:	2306      	movs	r3, #6
 8010d34:	617b      	str	r3, [r7, #20]
 8010d36:	e007      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010d38:	79fb      	ldrb	r3, [r7, #7]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d102      	bne.n	8010d44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010d3e:	2309      	movs	r3, #9
 8010d40:	617b      	str	r3, [r7, #20]
 8010d42:	e001      	b.n	8010d48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d44:	2309      	movs	r3, #9
 8010d46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	68da      	ldr	r2, [r3, #12]
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	029b      	lsls	r3, r3, #10
 8010d5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010d60:	431a      	orrs	r2, r3
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d66:	2300      	movs	r3, #0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	371c      	adds	r7, #28
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr
 8010d74:	00d8acbf 	.word	0x00d8acbf
 8010d78:	00e4e1bf 	.word	0x00e4e1bf
 8010d7c:	00f423ff 	.word	0x00f423ff
 8010d80:	0106737f 	.word	0x0106737f
 8010d84:	011a499f 	.word	0x011a499f
 8010d88:	01312cff 	.word	0x01312cff
 8010d8c:	014ca43f 	.word	0x014ca43f
 8010d90:	016e35ff 	.word	0x016e35ff
 8010d94:	01a6ab1f 	.word	0x01a6ab1f
 8010d98:	01e847ff 	.word	0x01e847ff

08010d9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	f043 0201 	orr.w	r2, r3, #1
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010db0:	2300      	movs	r3, #0
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	370c      	adds	r7, #12
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dbe:	b480      	push	{r7}
 8010dc0:	b083      	sub	sp, #12
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	689b      	ldr	r3, [r3, #8]
 8010dca:	f023 0201 	bic.w	r2, r3, #1
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010dd2:	2300      	movs	r3, #0
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	370c      	adds	r7, #12
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	460b      	mov	r3, r1
 8010dea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010df8:	78fb      	ldrb	r3, [r7, #3]
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d106      	bne.n	8010e0c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	60da      	str	r2, [r3, #12]
 8010e0a:	e00b      	b.n	8010e24 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010e0c:	78fb      	ldrb	r3, [r7, #3]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	60da      	str	r2, [r3, #12]
 8010e1e:	e001      	b.n	8010e24 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	e003      	b.n	8010e2c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010e24:	2032      	movs	r0, #50	; 0x32
 8010e26:	f7f2 fbc1 	bl	80035ac <HAL_Delay>

  return HAL_OK;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e34:	b084      	sub	sp, #16
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b086      	sub	sp, #24
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e46:	2300      	movs	r3, #0
 8010e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e4e:	2300      	movs	r3, #0
 8010e50:	613b      	str	r3, [r7, #16]
 8010e52:	e009      	b.n	8010e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	3340      	adds	r3, #64	; 0x40
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	4413      	add	r3, r2
 8010e5e:	2200      	movs	r2, #0
 8010e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	3301      	adds	r3, #1
 8010e66:	613b      	str	r3, [r7, #16]
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2b0e      	cmp	r3, #14
 8010e6c:	d9f2      	bls.n	8010e54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d11c      	bne.n	8010eae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e82:	f043 0302 	orr.w	r3, r3, #2
 8010e86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	601a      	str	r2, [r3, #0]
 8010eac:	e005      	b.n	8010eba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ecc:	4619      	mov	r1, r3
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	680b      	ldr	r3, [r1, #0]
 8010ed8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d10c      	bne.n	8010efa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d104      	bne.n	8010ef0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010ee6:	2100      	movs	r1, #0
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 f949 	bl	8011180 <USB_SetDevSpeed>
 8010eee:	e008      	b.n	8010f02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010ef0:	2101      	movs	r1, #1
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 f944 	bl	8011180 <USB_SetDevSpeed>
 8010ef8:	e003      	b.n	8010f02 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010efa:	2103      	movs	r1, #3
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 f93f 	bl	8011180 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010f02:	2110      	movs	r1, #16
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f000 f8f3 	bl	80110f0 <USB_FlushTxFifo>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010f10:	2301      	movs	r3, #1
 8010f12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f000 f911 	bl	801113c <USB_FlushRxFifo>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d001      	beq.n	8010f24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010f20:	2301      	movs	r3, #1
 8010f22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f36:	461a      	mov	r2, r3
 8010f38:	2300      	movs	r3, #0
 8010f3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f42:	461a      	mov	r2, r3
 8010f44:	2300      	movs	r3, #0
 8010f46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f48:	2300      	movs	r3, #0
 8010f4a:	613b      	str	r3, [r7, #16]
 8010f4c:	e043      	b.n	8010fd6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	015a      	lsls	r2, r3, #5
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	4413      	add	r3, r2
 8010f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f64:	d118      	bne.n	8010f98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d10a      	bne.n	8010f82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	015a      	lsls	r2, r3, #5
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	4413      	add	r3, r2
 8010f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f78:	461a      	mov	r2, r3
 8010f7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010f7e:	6013      	str	r3, [r2, #0]
 8010f80:	e013      	b.n	8010faa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	015a      	lsls	r2, r3, #5
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	4413      	add	r3, r2
 8010f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f8e:	461a      	mov	r2, r3
 8010f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010f94:	6013      	str	r3, [r2, #0]
 8010f96:	e008      	b.n	8010faa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	015a      	lsls	r2, r3, #5
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	015a      	lsls	r2, r3, #5
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	2300      	movs	r3, #0
 8010fba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	015a      	lsls	r2, r3, #5
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	4413      	add	r3, r2
 8010fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fc8:	461a      	mov	r2, r3
 8010fca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010fce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	613b      	str	r3, [r7, #16]
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd8:	693a      	ldr	r2, [r7, #16]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d3b7      	bcc.n	8010f4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fde:	2300      	movs	r3, #0
 8010fe0:	613b      	str	r3, [r7, #16]
 8010fe2:	e043      	b.n	801106c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	015a      	lsls	r2, r3, #5
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	4413      	add	r3, r2
 8010fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010ffa:	d118      	bne.n	801102e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d10a      	bne.n	8011018 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	015a      	lsls	r2, r3, #5
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	4413      	add	r3, r2
 801100a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801100e:	461a      	mov	r2, r3
 8011010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011014:	6013      	str	r3, [r2, #0]
 8011016:	e013      	b.n	8011040 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	015a      	lsls	r2, r3, #5
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	4413      	add	r3, r2
 8011020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011024:	461a      	mov	r2, r3
 8011026:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801102a:	6013      	str	r3, [r2, #0]
 801102c:	e008      	b.n	8011040 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	015a      	lsls	r2, r3, #5
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	4413      	add	r3, r2
 8011036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801103a:	461a      	mov	r2, r3
 801103c:	2300      	movs	r3, #0
 801103e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	015a      	lsls	r2, r3, #5
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	4413      	add	r3, r2
 8011048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801104c:	461a      	mov	r2, r3
 801104e:	2300      	movs	r3, #0
 8011050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	015a      	lsls	r2, r3, #5
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	4413      	add	r3, r2
 801105a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801105e:	461a      	mov	r2, r3
 8011060:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011064:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	3301      	adds	r3, #1
 801106a:	613b      	str	r3, [r7, #16]
 801106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106e:	693a      	ldr	r2, [r7, #16]
 8011070:	429a      	cmp	r2, r3
 8011072:	d3b7      	bcc.n	8010fe4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801107a:	691b      	ldr	r3, [r3, #16]
 801107c:	68fa      	ldr	r2, [r7, #12]
 801107e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011086:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2200      	movs	r2, #0
 801108c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011094:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011098:	2b00      	cmp	r3, #0
 801109a:	d105      	bne.n	80110a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	699b      	ldr	r3, [r3, #24]
 80110a0:	f043 0210 	orr.w	r2, r3, #16
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	699a      	ldr	r2, [r3, #24]
 80110ac:	4b0e      	ldr	r3, [pc, #56]	; (80110e8 <USB_DevInit+0x2b4>)
 80110ae:	4313      	orrs	r3, r2
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80110b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d005      	beq.n	80110c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	699b      	ldr	r3, [r3, #24]
 80110be:	f043 0208 	orr.w	r2, r3, #8
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80110c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d105      	bne.n	80110d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	699a      	ldr	r2, [r3, #24]
 80110d0:	4b06      	ldr	r3, [pc, #24]	; (80110ec <USB_DevInit+0x2b8>)
 80110d2:	4313      	orrs	r3, r2
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80110d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3718      	adds	r7, #24
 80110de:	46bd      	mov	sp, r7
 80110e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110e4:	b004      	add	sp, #16
 80110e6:	4770      	bx	lr
 80110e8:	803c3800 	.word	0x803c3800
 80110ec:	40000004 	.word	0x40000004

080110f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80110fa:	2300      	movs	r3, #0
 80110fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	019b      	lsls	r3, r3, #6
 8011102:	f043 0220 	orr.w	r2, r3, #32
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	3301      	adds	r3, #1
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	4a09      	ldr	r2, [pc, #36]	; (8011138 <USB_FlushTxFifo+0x48>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d901      	bls.n	801111c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011118:	2303      	movs	r3, #3
 801111a:	e006      	b.n	801112a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	691b      	ldr	r3, [r3, #16]
 8011120:	f003 0320 	and.w	r3, r3, #32
 8011124:	2b20      	cmp	r3, #32
 8011126:	d0f0      	beq.n	801110a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011128:	2300      	movs	r3, #0
}
 801112a:	4618      	mov	r0, r3
 801112c:	3714      	adds	r7, #20
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop
 8011138:	00030d40 	.word	0x00030d40

0801113c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011144:	2300      	movs	r3, #0
 8011146:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2210      	movs	r2, #16
 801114c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	3301      	adds	r3, #1
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	4a09      	ldr	r2, [pc, #36]	; (801117c <USB_FlushRxFifo+0x40>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d901      	bls.n	8011160 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801115c:	2303      	movs	r3, #3
 801115e:	e006      	b.n	801116e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	691b      	ldr	r3, [r3, #16]
 8011164:	f003 0310 	and.w	r3, r3, #16
 8011168:	2b10      	cmp	r3, #16
 801116a:	d0f0      	beq.n	801114e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801116c:	2300      	movs	r3, #0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3714      	adds	r7, #20
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop
 801117c:	00030d40 	.word	0x00030d40

08011180 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011180:	b480      	push	{r7}
 8011182:	b085      	sub	sp, #20
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	460b      	mov	r3, r1
 801118a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	78fb      	ldrb	r3, [r7, #3]
 801119a:	68f9      	ldr	r1, [r7, #12]
 801119c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111a0:	4313      	orrs	r3, r2
 80111a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3714      	adds	r7, #20
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr

080111b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80111b2:	b480      	push	{r7}
 80111b4:	b087      	sub	sp, #28
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	f003 0306 	and.w	r3, r3, #6
 80111ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d102      	bne.n	80111d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80111d2:	2300      	movs	r3, #0
 80111d4:	75fb      	strb	r3, [r7, #23]
 80111d6:	e00a      	b.n	80111ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2b02      	cmp	r3, #2
 80111dc:	d002      	beq.n	80111e4 <USB_GetDevSpeed+0x32>
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2b06      	cmp	r3, #6
 80111e2:	d102      	bne.n	80111ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80111e4:	2302      	movs	r3, #2
 80111e6:	75fb      	strb	r3, [r7, #23]
 80111e8:	e001      	b.n	80111ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80111ea:	230f      	movs	r3, #15
 80111ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80111ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	371c      	adds	r7, #28
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b085      	sub	sp, #20
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	785b      	ldrb	r3, [r3, #1]
 8011214:	2b01      	cmp	r3, #1
 8011216:	d139      	bne.n	801128c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801121e:	69da      	ldr	r2, [r3, #28]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	f003 030f 	and.w	r3, r3, #15
 8011228:	2101      	movs	r1, #1
 801122a:	fa01 f303 	lsl.w	r3, r1, r3
 801122e:	b29b      	uxth	r3, r3
 8011230:	68f9      	ldr	r1, [r7, #12]
 8011232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011236:	4313      	orrs	r3, r2
 8011238:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	015a      	lsls	r2, r3, #5
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	4413      	add	r3, r2
 8011242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801124c:	2b00      	cmp	r3, #0
 801124e:	d153      	bne.n	80112f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	015a      	lsls	r2, r3, #5
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	4413      	add	r3, r2
 8011258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801125c:	681a      	ldr	r2, [r3, #0]
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	689b      	ldr	r3, [r3, #8]
 8011262:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	78db      	ldrb	r3, [r3, #3]
 801126a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801126c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	059b      	lsls	r3, r3, #22
 8011272:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011274:	431a      	orrs	r2, r3
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	0159      	lsls	r1, r3, #5
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	440b      	add	r3, r1
 801127e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011282:	4619      	mov	r1, r3
 8011284:	4b20      	ldr	r3, [pc, #128]	; (8011308 <USB_ActivateEndpoint+0x10c>)
 8011286:	4313      	orrs	r3, r2
 8011288:	600b      	str	r3, [r1, #0]
 801128a:	e035      	b.n	80112f8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011292:	69da      	ldr	r2, [r3, #28]
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	f003 030f 	and.w	r3, r3, #15
 801129c:	2101      	movs	r1, #1
 801129e:	fa01 f303 	lsl.w	r3, r1, r3
 80112a2:	041b      	lsls	r3, r3, #16
 80112a4:	68f9      	ldr	r1, [r7, #12]
 80112a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112aa:	4313      	orrs	r3, r2
 80112ac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	015a      	lsls	r2, r3, #5
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	4413      	add	r3, r2
 80112b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d119      	bne.n	80112f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	015a      	lsls	r2, r3, #5
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	4413      	add	r3, r2
 80112cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	689b      	ldr	r3, [r3, #8]
 80112d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	78db      	ldrb	r3, [r3, #3]
 80112de:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80112e0:	430b      	orrs	r3, r1
 80112e2:	431a      	orrs	r2, r3
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	0159      	lsls	r1, r3, #5
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	440b      	add	r3, r1
 80112ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112f0:	4619      	mov	r1, r3
 80112f2:	4b05      	ldr	r3, [pc, #20]	; (8011308 <USB_ActivateEndpoint+0x10c>)
 80112f4:	4313      	orrs	r3, r2
 80112f6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3714      	adds	r7, #20
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	10008000 	.word	0x10008000

0801130c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801130c:	b480      	push	{r7}
 801130e:	b085      	sub	sp, #20
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	785b      	ldrb	r3, [r3, #1]
 8011324:	2b01      	cmp	r3, #1
 8011326:	d161      	bne.n	80113ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	015a      	lsls	r2, r3, #5
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	4413      	add	r3, r2
 8011330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801133a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801133e:	d11f      	bne.n	8011380 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	015a      	lsls	r2, r3, #5
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	4413      	add	r3, r2
 8011348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	68ba      	ldr	r2, [r7, #8]
 8011350:	0151      	lsls	r1, r2, #5
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	440a      	add	r2, r1
 8011356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801135a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801135e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	015a      	lsls	r2, r3, #5
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	4413      	add	r3, r2
 8011368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	68ba      	ldr	r2, [r7, #8]
 8011370:	0151      	lsls	r1, r2, #5
 8011372:	68fa      	ldr	r2, [r7, #12]
 8011374:	440a      	add	r2, r1
 8011376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801137a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801137e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	f003 030f 	and.w	r3, r3, #15
 8011390:	2101      	movs	r1, #1
 8011392:	fa01 f303 	lsl.w	r3, r1, r3
 8011396:	b29b      	uxth	r3, r3
 8011398:	43db      	mvns	r3, r3
 801139a:	68f9      	ldr	r1, [r7, #12]
 801139c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113a0:	4013      	ands	r3, r2
 80113a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113aa:	69da      	ldr	r2, [r3, #28]
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	f003 030f 	and.w	r3, r3, #15
 80113b4:	2101      	movs	r1, #1
 80113b6:	fa01 f303 	lsl.w	r3, r1, r3
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	43db      	mvns	r3, r3
 80113be:	68f9      	ldr	r1, [r7, #12]
 80113c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113c4:	4013      	ands	r3, r2
 80113c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	015a      	lsls	r2, r3, #5
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	4413      	add	r3, r2
 80113d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	0159      	lsls	r1, r3, #5
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	440b      	add	r3, r1
 80113de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113e2:	4619      	mov	r1, r3
 80113e4:	4b35      	ldr	r3, [pc, #212]	; (80114bc <USB_DeactivateEndpoint+0x1b0>)
 80113e6:	4013      	ands	r3, r2
 80113e8:	600b      	str	r3, [r1, #0]
 80113ea:	e060      	b.n	80114ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	015a      	lsls	r2, r3, #5
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	4413      	add	r3, r2
 80113f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011402:	d11f      	bne.n	8011444 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	015a      	lsls	r2, r3, #5
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	4413      	add	r3, r2
 801140c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	0151      	lsls	r1, r2, #5
 8011416:	68fa      	ldr	r2, [r7, #12]
 8011418:	440a      	add	r2, r1
 801141a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801141e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011422:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	015a      	lsls	r2, r3, #5
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	4413      	add	r3, r2
 801142c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	68ba      	ldr	r2, [r7, #8]
 8011434:	0151      	lsls	r1, r2, #5
 8011436:	68fa      	ldr	r2, [r7, #12]
 8011438:	440a      	add	r2, r1
 801143a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801143e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801144a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	f003 030f 	and.w	r3, r3, #15
 8011454:	2101      	movs	r1, #1
 8011456:	fa01 f303 	lsl.w	r3, r1, r3
 801145a:	041b      	lsls	r3, r3, #16
 801145c:	43db      	mvns	r3, r3
 801145e:	68f9      	ldr	r1, [r7, #12]
 8011460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011464:	4013      	ands	r3, r2
 8011466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801146e:	69da      	ldr	r2, [r3, #28]
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	f003 030f 	and.w	r3, r3, #15
 8011478:	2101      	movs	r1, #1
 801147a:	fa01 f303 	lsl.w	r3, r1, r3
 801147e:	041b      	lsls	r3, r3, #16
 8011480:	43db      	mvns	r3, r3
 8011482:	68f9      	ldr	r1, [r7, #12]
 8011484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011488:	4013      	ands	r3, r2
 801148a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	015a      	lsls	r2, r3, #5
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	4413      	add	r3, r2
 8011494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	0159      	lsls	r1, r3, #5
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	440b      	add	r3, r1
 80114a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114a6:	4619      	mov	r1, r3
 80114a8:	4b05      	ldr	r3, [pc, #20]	; (80114c0 <USB_DeactivateEndpoint+0x1b4>)
 80114aa:	4013      	ands	r3, r2
 80114ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80114ae:	2300      	movs	r3, #0
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3714      	adds	r7, #20
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr
 80114bc:	ec337800 	.word	0xec337800
 80114c0:	eff37800 	.word	0xeff37800

080114c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b08a      	sub	sp, #40	; 0x28
 80114c8:	af02      	add	r7, sp, #8
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	4613      	mov	r3, r2
 80114d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	785b      	ldrb	r3, [r3, #1]
 80114e0:	2b01      	cmp	r3, #1
 80114e2:	f040 8163 	bne.w	80117ac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	695b      	ldr	r3, [r3, #20]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d132      	bne.n	8011554 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	015a      	lsls	r2, r3, #5
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	4413      	add	r3, r2
 80114f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114fa:	691a      	ldr	r2, [r3, #16]
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	0159      	lsls	r1, r3, #5
 8011500:	69fb      	ldr	r3, [r7, #28]
 8011502:	440b      	add	r3, r1
 8011504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011508:	4619      	mov	r1, r3
 801150a:	4ba5      	ldr	r3, [pc, #660]	; (80117a0 <USB_EPStartXfer+0x2dc>)
 801150c:	4013      	ands	r3, r2
 801150e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	015a      	lsls	r2, r3, #5
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	4413      	add	r3, r2
 8011518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801151c:	691b      	ldr	r3, [r3, #16]
 801151e:	69ba      	ldr	r2, [r7, #24]
 8011520:	0151      	lsls	r1, r2, #5
 8011522:	69fa      	ldr	r2, [r7, #28]
 8011524:	440a      	add	r2, r1
 8011526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801152a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801152e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	015a      	lsls	r2, r3, #5
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	4413      	add	r3, r2
 8011538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801153c:	691a      	ldr	r2, [r3, #16]
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	0159      	lsls	r1, r3, #5
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	440b      	add	r3, r1
 8011546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801154a:	4619      	mov	r1, r3
 801154c:	4b95      	ldr	r3, [pc, #596]	; (80117a4 <USB_EPStartXfer+0x2e0>)
 801154e:	4013      	ands	r3, r2
 8011550:	610b      	str	r3, [r1, #16]
 8011552:	e074      	b.n	801163e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	015a      	lsls	r2, r3, #5
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	4413      	add	r3, r2
 801155c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011560:	691a      	ldr	r2, [r3, #16]
 8011562:	69bb      	ldr	r3, [r7, #24]
 8011564:	0159      	lsls	r1, r3, #5
 8011566:	69fb      	ldr	r3, [r7, #28]
 8011568:	440b      	add	r3, r1
 801156a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801156e:	4619      	mov	r1, r3
 8011570:	4b8c      	ldr	r3, [pc, #560]	; (80117a4 <USB_EPStartXfer+0x2e0>)
 8011572:	4013      	ands	r3, r2
 8011574:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	015a      	lsls	r2, r3, #5
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	4413      	add	r3, r2
 801157e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011582:	691a      	ldr	r2, [r3, #16]
 8011584:	69bb      	ldr	r3, [r7, #24]
 8011586:	0159      	lsls	r1, r3, #5
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	440b      	add	r3, r1
 801158c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011590:	4619      	mov	r1, r3
 8011592:	4b83      	ldr	r3, [pc, #524]	; (80117a0 <USB_EPStartXfer+0x2dc>)
 8011594:	4013      	ands	r3, r2
 8011596:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	015a      	lsls	r2, r3, #5
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	4413      	add	r3, r2
 80115a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115a4:	691a      	ldr	r2, [r3, #16]
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	6959      	ldr	r1, [r3, #20]
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	440b      	add	r3, r1
 80115b0:	1e59      	subs	r1, r3, #1
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	689b      	ldr	r3, [r3, #8]
 80115b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80115ba:	04d9      	lsls	r1, r3, #19
 80115bc:	4b7a      	ldr	r3, [pc, #488]	; (80117a8 <USB_EPStartXfer+0x2e4>)
 80115be:	400b      	ands	r3, r1
 80115c0:	69b9      	ldr	r1, [r7, #24]
 80115c2:	0148      	lsls	r0, r1, #5
 80115c4:	69f9      	ldr	r1, [r7, #28]
 80115c6:	4401      	add	r1, r0
 80115c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115cc:	4313      	orrs	r3, r2
 80115ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80115d0:	69bb      	ldr	r3, [r7, #24]
 80115d2:	015a      	lsls	r2, r3, #5
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	4413      	add	r3, r2
 80115d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115dc:	691a      	ldr	r2, [r3, #16]
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	695b      	ldr	r3, [r3, #20]
 80115e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115e6:	69b9      	ldr	r1, [r7, #24]
 80115e8:	0148      	lsls	r0, r1, #5
 80115ea:	69f9      	ldr	r1, [r7, #28]
 80115ec:	4401      	add	r1, r0
 80115ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80115f2:	4313      	orrs	r3, r2
 80115f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	78db      	ldrb	r3, [r3, #3]
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d11f      	bne.n	801163e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	015a      	lsls	r2, r3, #5
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	4413      	add	r3, r2
 8011606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801160a:	691b      	ldr	r3, [r3, #16]
 801160c:	69ba      	ldr	r2, [r7, #24]
 801160e:	0151      	lsls	r1, r2, #5
 8011610:	69fa      	ldr	r2, [r7, #28]
 8011612:	440a      	add	r2, r1
 8011614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011618:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801161c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	015a      	lsls	r2, r3, #5
 8011622:	69fb      	ldr	r3, [r7, #28]
 8011624:	4413      	add	r3, r2
 8011626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801162a:	691b      	ldr	r3, [r3, #16]
 801162c:	69ba      	ldr	r2, [r7, #24]
 801162e:	0151      	lsls	r1, r2, #5
 8011630:	69fa      	ldr	r2, [r7, #28]
 8011632:	440a      	add	r2, r1
 8011634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011638:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801163c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801163e:	79fb      	ldrb	r3, [r7, #7]
 8011640:	2b01      	cmp	r3, #1
 8011642:	d14b      	bne.n	80116dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	691b      	ldr	r3, [r3, #16]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d009      	beq.n	8011660 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	015a      	lsls	r2, r3, #5
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	4413      	add	r3, r2
 8011654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011658:	461a      	mov	r2, r3
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	691b      	ldr	r3, [r3, #16]
 801165e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	78db      	ldrb	r3, [r3, #3]
 8011664:	2b01      	cmp	r3, #1
 8011666:	d128      	bne.n	80116ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011674:	2b00      	cmp	r3, #0
 8011676:	d110      	bne.n	801169a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011678:	69bb      	ldr	r3, [r7, #24]
 801167a:	015a      	lsls	r2, r3, #5
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	4413      	add	r3, r2
 8011680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	69ba      	ldr	r2, [r7, #24]
 8011688:	0151      	lsls	r1, r2, #5
 801168a:	69fa      	ldr	r2, [r7, #28]
 801168c:	440a      	add	r2, r1
 801168e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011696:	6013      	str	r3, [r2, #0]
 8011698:	e00f      	b.n	80116ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801169a:	69bb      	ldr	r3, [r7, #24]
 801169c:	015a      	lsls	r2, r3, #5
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	4413      	add	r3, r2
 80116a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	69ba      	ldr	r2, [r7, #24]
 80116aa:	0151      	lsls	r1, r2, #5
 80116ac:	69fa      	ldr	r2, [r7, #28]
 80116ae:	440a      	add	r2, r1
 80116b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	015a      	lsls	r2, r3, #5
 80116be:	69fb      	ldr	r3, [r7, #28]
 80116c0:	4413      	add	r3, r2
 80116c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	69ba      	ldr	r2, [r7, #24]
 80116ca:	0151      	lsls	r1, r2, #5
 80116cc:	69fa      	ldr	r2, [r7, #28]
 80116ce:	440a      	add	r2, r1
 80116d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80116d8:	6013      	str	r3, [r2, #0]
 80116da:	e133      	b.n	8011944 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	015a      	lsls	r2, r3, #5
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	4413      	add	r3, r2
 80116e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	69ba      	ldr	r2, [r7, #24]
 80116ec:	0151      	lsls	r1, r2, #5
 80116ee:	69fa      	ldr	r2, [r7, #28]
 80116f0:	440a      	add	r2, r1
 80116f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80116fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	78db      	ldrb	r3, [r3, #3]
 8011700:	2b01      	cmp	r3, #1
 8011702:	d015      	beq.n	8011730 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	695b      	ldr	r3, [r3, #20]
 8011708:	2b00      	cmp	r3, #0
 801170a:	f000 811b 	beq.w	8011944 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801170e:	69fb      	ldr	r3, [r7, #28]
 8011710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	f003 030f 	and.w	r3, r3, #15
 801171e:	2101      	movs	r1, #1
 8011720:	fa01 f303 	lsl.w	r3, r1, r3
 8011724:	69f9      	ldr	r1, [r7, #28]
 8011726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801172a:	4313      	orrs	r3, r2
 801172c:	634b      	str	r3, [r1, #52]	; 0x34
 801172e:	e109      	b.n	8011944 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801173c:	2b00      	cmp	r3, #0
 801173e:	d110      	bne.n	8011762 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	015a      	lsls	r2, r3, #5
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	4413      	add	r3, r2
 8011748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	69ba      	ldr	r2, [r7, #24]
 8011750:	0151      	lsls	r1, r2, #5
 8011752:	69fa      	ldr	r2, [r7, #28]
 8011754:	440a      	add	r2, r1
 8011756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801175a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801175e:	6013      	str	r3, [r2, #0]
 8011760:	e00f      	b.n	8011782 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011762:	69bb      	ldr	r3, [r7, #24]
 8011764:	015a      	lsls	r2, r3, #5
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	4413      	add	r3, r2
 801176a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	69ba      	ldr	r2, [r7, #24]
 8011772:	0151      	lsls	r1, r2, #5
 8011774:	69fa      	ldr	r2, [r7, #28]
 8011776:	440a      	add	r2, r1
 8011778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011780:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	68d9      	ldr	r1, [r3, #12]
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	781a      	ldrb	r2, [r3, #0]
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	695b      	ldr	r3, [r3, #20]
 801178e:	b298      	uxth	r0, r3
 8011790:	79fb      	ldrb	r3, [r7, #7]
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	4603      	mov	r3, r0
 8011796:	68f8      	ldr	r0, [r7, #12]
 8011798:	f000 fa38 	bl	8011c0c <USB_WritePacket>
 801179c:	e0d2      	b.n	8011944 <USB_EPStartXfer+0x480>
 801179e:	bf00      	nop
 80117a0:	e007ffff 	.word	0xe007ffff
 80117a4:	fff80000 	.word	0xfff80000
 80117a8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	015a      	lsls	r2, r3, #5
 80117b0:	69fb      	ldr	r3, [r7, #28]
 80117b2:	4413      	add	r3, r2
 80117b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117b8:	691a      	ldr	r2, [r3, #16]
 80117ba:	69bb      	ldr	r3, [r7, #24]
 80117bc:	0159      	lsls	r1, r3, #5
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	440b      	add	r3, r1
 80117c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117c6:	4619      	mov	r1, r3
 80117c8:	4b61      	ldr	r3, [pc, #388]	; (8011950 <USB_EPStartXfer+0x48c>)
 80117ca:	4013      	ands	r3, r2
 80117cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	015a      	lsls	r2, r3, #5
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	4413      	add	r3, r2
 80117d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117da:	691a      	ldr	r2, [r3, #16]
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	0159      	lsls	r1, r3, #5
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	440b      	add	r3, r1
 80117e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117e8:	4619      	mov	r1, r3
 80117ea:	4b5a      	ldr	r3, [pc, #360]	; (8011954 <USB_EPStartXfer+0x490>)
 80117ec:	4013      	ands	r3, r2
 80117ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	695b      	ldr	r3, [r3, #20]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d123      	bne.n	8011840 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80117f8:	69bb      	ldr	r3, [r7, #24]
 80117fa:	015a      	lsls	r2, r3, #5
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	4413      	add	r3, r2
 8011800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011804:	691a      	ldr	r2, [r3, #16]
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801180e:	69b9      	ldr	r1, [r7, #24]
 8011810:	0148      	lsls	r0, r1, #5
 8011812:	69f9      	ldr	r1, [r7, #28]
 8011814:	4401      	add	r1, r0
 8011816:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801181a:	4313      	orrs	r3, r2
 801181c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	015a      	lsls	r2, r3, #5
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	4413      	add	r3, r2
 8011826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801182a:	691b      	ldr	r3, [r3, #16]
 801182c:	69ba      	ldr	r2, [r7, #24]
 801182e:	0151      	lsls	r1, r2, #5
 8011830:	69fa      	ldr	r2, [r7, #28]
 8011832:	440a      	add	r2, r1
 8011834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801183c:	6113      	str	r3, [r2, #16]
 801183e:	e033      	b.n	80118a8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	695a      	ldr	r2, [r3, #20]
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	689b      	ldr	r3, [r3, #8]
 8011848:	4413      	add	r3, r2
 801184a:	1e5a      	subs	r2, r3, #1
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	fbb2 f3f3 	udiv	r3, r2, r3
 8011854:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	015a      	lsls	r2, r3, #5
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	4413      	add	r3, r2
 801185e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011862:	691a      	ldr	r2, [r3, #16]
 8011864:	8afb      	ldrh	r3, [r7, #22]
 8011866:	04d9      	lsls	r1, r3, #19
 8011868:	4b3b      	ldr	r3, [pc, #236]	; (8011958 <USB_EPStartXfer+0x494>)
 801186a:	400b      	ands	r3, r1
 801186c:	69b9      	ldr	r1, [r7, #24]
 801186e:	0148      	lsls	r0, r1, #5
 8011870:	69f9      	ldr	r1, [r7, #28]
 8011872:	4401      	add	r1, r0
 8011874:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011878:	4313      	orrs	r3, r2
 801187a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801187c:	69bb      	ldr	r3, [r7, #24]
 801187e:	015a      	lsls	r2, r3, #5
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	4413      	add	r3, r2
 8011884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011888:	691a      	ldr	r2, [r3, #16]
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	689b      	ldr	r3, [r3, #8]
 801188e:	8af9      	ldrh	r1, [r7, #22]
 8011890:	fb01 f303 	mul.w	r3, r1, r3
 8011894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011898:	69b9      	ldr	r1, [r7, #24]
 801189a:	0148      	lsls	r0, r1, #5
 801189c:	69f9      	ldr	r1, [r7, #28]
 801189e:	4401      	add	r1, r0
 80118a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80118a4:	4313      	orrs	r3, r2
 80118a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80118a8:	79fb      	ldrb	r3, [r7, #7]
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	d10d      	bne.n	80118ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d009      	beq.n	80118ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	68d9      	ldr	r1, [r3, #12]
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	015a      	lsls	r2, r3, #5
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	4413      	add	r3, r2
 80118c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118c6:	460a      	mov	r2, r1
 80118c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	78db      	ldrb	r3, [r3, #3]
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d128      	bne.n	8011924 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118d8:	689b      	ldr	r3, [r3, #8]
 80118da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d110      	bne.n	8011904 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	015a      	lsls	r2, r3, #5
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	4413      	add	r3, r2
 80118ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	69ba      	ldr	r2, [r7, #24]
 80118f2:	0151      	lsls	r1, r2, #5
 80118f4:	69fa      	ldr	r2, [r7, #28]
 80118f6:	440a      	add	r2, r1
 80118f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80118fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011900:	6013      	str	r3, [r2, #0]
 8011902:	e00f      	b.n	8011924 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	015a      	lsls	r2, r3, #5
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	4413      	add	r3, r2
 801190c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	69ba      	ldr	r2, [r7, #24]
 8011914:	0151      	lsls	r1, r2, #5
 8011916:	69fa      	ldr	r2, [r7, #28]
 8011918:	440a      	add	r2, r1
 801191a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011922:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	015a      	lsls	r2, r3, #5
 8011928:	69fb      	ldr	r3, [r7, #28]
 801192a:	4413      	add	r3, r2
 801192c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	69ba      	ldr	r2, [r7, #24]
 8011934:	0151      	lsls	r1, r2, #5
 8011936:	69fa      	ldr	r2, [r7, #28]
 8011938:	440a      	add	r2, r1
 801193a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801193e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011942:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011944:	2300      	movs	r3, #0
}
 8011946:	4618      	mov	r0, r3
 8011948:	3720      	adds	r7, #32
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	fff80000 	.word	0xfff80000
 8011954:	e007ffff 	.word	0xe007ffff
 8011958:	1ff80000 	.word	0x1ff80000

0801195c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801195c:	b480      	push	{r7}
 801195e:	b087      	sub	sp, #28
 8011960:	af00      	add	r7, sp, #0
 8011962:	60f8      	str	r0, [r7, #12]
 8011964:	60b9      	str	r1, [r7, #8]
 8011966:	4613      	mov	r3, r2
 8011968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	785b      	ldrb	r3, [r3, #1]
 8011978:	2b01      	cmp	r3, #1
 801197a:	f040 80cd 	bne.w	8011b18 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	695b      	ldr	r3, [r3, #20]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d132      	bne.n	80119ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	015a      	lsls	r2, r3, #5
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	4413      	add	r3, r2
 801198e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011992:	691a      	ldr	r2, [r3, #16]
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	0159      	lsls	r1, r3, #5
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	440b      	add	r3, r1
 801199c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119a0:	4619      	mov	r1, r3
 80119a2:	4b98      	ldr	r3, [pc, #608]	; (8011c04 <USB_EP0StartXfer+0x2a8>)
 80119a4:	4013      	ands	r3, r2
 80119a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	015a      	lsls	r2, r3, #5
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	4413      	add	r3, r2
 80119b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119b4:	691b      	ldr	r3, [r3, #16]
 80119b6:	693a      	ldr	r2, [r7, #16]
 80119b8:	0151      	lsls	r1, r2, #5
 80119ba:	697a      	ldr	r2, [r7, #20]
 80119bc:	440a      	add	r2, r1
 80119be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	015a      	lsls	r2, r3, #5
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	4413      	add	r3, r2
 80119d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119d4:	691a      	ldr	r2, [r3, #16]
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	0159      	lsls	r1, r3, #5
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	440b      	add	r3, r1
 80119de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119e2:	4619      	mov	r1, r3
 80119e4:	4b88      	ldr	r3, [pc, #544]	; (8011c08 <USB_EP0StartXfer+0x2ac>)
 80119e6:	4013      	ands	r3, r2
 80119e8:	610b      	str	r3, [r1, #16]
 80119ea:	e04e      	b.n	8011a8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	015a      	lsls	r2, r3, #5
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	4413      	add	r3, r2
 80119f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119f8:	691a      	ldr	r2, [r3, #16]
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	0159      	lsls	r1, r3, #5
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	440b      	add	r3, r1
 8011a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a06:	4619      	mov	r1, r3
 8011a08:	4b7f      	ldr	r3, [pc, #508]	; (8011c08 <USB_EP0StartXfer+0x2ac>)
 8011a0a:	4013      	ands	r3, r2
 8011a0c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	015a      	lsls	r2, r3, #5
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	4413      	add	r3, r2
 8011a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a1a:	691a      	ldr	r2, [r3, #16]
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	0159      	lsls	r1, r3, #5
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	440b      	add	r3, r1
 8011a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a28:	4619      	mov	r1, r3
 8011a2a:	4b76      	ldr	r3, [pc, #472]	; (8011c04 <USB_EP0StartXfer+0x2a8>)
 8011a2c:	4013      	ands	r3, r2
 8011a2e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	695a      	ldr	r2, [r3, #20]
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	689b      	ldr	r3, [r3, #8]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d903      	bls.n	8011a44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	689a      	ldr	r2, [r3, #8]
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	015a      	lsls	r2, r3, #5
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	4413      	add	r3, r2
 8011a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a50:	691b      	ldr	r3, [r3, #16]
 8011a52:	693a      	ldr	r2, [r7, #16]
 8011a54:	0151      	lsls	r1, r2, #5
 8011a56:	697a      	ldr	r2, [r7, #20]
 8011a58:	440a      	add	r2, r1
 8011a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	015a      	lsls	r2, r3, #5
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a70:	691a      	ldr	r2, [r3, #16]
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	695b      	ldr	r3, [r3, #20]
 8011a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a7a:	6939      	ldr	r1, [r7, #16]
 8011a7c:	0148      	lsls	r0, r1, #5
 8011a7e:	6979      	ldr	r1, [r7, #20]
 8011a80:	4401      	add	r1, r0
 8011a82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011a86:	4313      	orrs	r3, r2
 8011a88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011a8a:	79fb      	ldrb	r3, [r7, #7]
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d11e      	bne.n	8011ace <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d009      	beq.n	8011aac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	015a      	lsls	r2, r3, #5
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	691b      	ldr	r3, [r3, #16]
 8011aaa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	015a      	lsls	r2, r3, #5
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	4413      	add	r3, r2
 8011ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	693a      	ldr	r2, [r7, #16]
 8011abc:	0151      	lsls	r1, r2, #5
 8011abe:	697a      	ldr	r2, [r7, #20]
 8011ac0:	440a      	add	r2, r1
 8011ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ac6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011aca:	6013      	str	r3, [r2, #0]
 8011acc:	e092      	b.n	8011bf4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	015a      	lsls	r2, r3, #5
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	4413      	add	r3, r2
 8011ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	693a      	ldr	r2, [r7, #16]
 8011ade:	0151      	lsls	r1, r2, #5
 8011ae0:	697a      	ldr	r2, [r7, #20]
 8011ae2:	440a      	add	r2, r1
 8011ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011aec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	695b      	ldr	r3, [r3, #20]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d07e      	beq.n	8011bf4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	f003 030f 	and.w	r3, r3, #15
 8011b06:	2101      	movs	r1, #1
 8011b08:	fa01 f303 	lsl.w	r3, r1, r3
 8011b0c:	6979      	ldr	r1, [r7, #20]
 8011b0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b12:	4313      	orrs	r3, r2
 8011b14:	634b      	str	r3, [r1, #52]	; 0x34
 8011b16:	e06d      	b.n	8011bf4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	015a      	lsls	r2, r3, #5
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	4413      	add	r3, r2
 8011b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b24:	691a      	ldr	r2, [r3, #16]
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	0159      	lsls	r1, r3, #5
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	440b      	add	r3, r1
 8011b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b32:	4619      	mov	r1, r3
 8011b34:	4b34      	ldr	r3, [pc, #208]	; (8011c08 <USB_EP0StartXfer+0x2ac>)
 8011b36:	4013      	ands	r3, r2
 8011b38:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	015a      	lsls	r2, r3, #5
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	4413      	add	r3, r2
 8011b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b46:	691a      	ldr	r2, [r3, #16]
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	0159      	lsls	r1, r3, #5
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	440b      	add	r3, r1
 8011b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b54:	4619      	mov	r1, r3
 8011b56:	4b2b      	ldr	r3, [pc, #172]	; (8011c04 <USB_EP0StartXfer+0x2a8>)
 8011b58:	4013      	ands	r3, r2
 8011b5a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	695b      	ldr	r3, [r3, #20]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d003      	beq.n	8011b6c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	689a      	ldr	r2, [r3, #8]
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	015a      	lsls	r2, r3, #5
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	4413      	add	r3, r2
 8011b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b78:	691b      	ldr	r3, [r3, #16]
 8011b7a:	693a      	ldr	r2, [r7, #16]
 8011b7c:	0151      	lsls	r1, r2, #5
 8011b7e:	697a      	ldr	r2, [r7, #20]
 8011b80:	440a      	add	r2, r1
 8011b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011b8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	015a      	lsls	r2, r3, #5
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	4413      	add	r3, r2
 8011b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b98:	691a      	ldr	r2, [r3, #16]
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	689b      	ldr	r3, [r3, #8]
 8011b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ba2:	6939      	ldr	r1, [r7, #16]
 8011ba4:	0148      	lsls	r0, r1, #5
 8011ba6:	6979      	ldr	r1, [r7, #20]
 8011ba8:	4401      	add	r1, r0
 8011baa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011bae:	4313      	orrs	r3, r2
 8011bb0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011bb2:	79fb      	ldrb	r3, [r7, #7]
 8011bb4:	2b01      	cmp	r3, #1
 8011bb6:	d10d      	bne.n	8011bd4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d009      	beq.n	8011bd4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	68d9      	ldr	r1, [r3, #12]
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	015a      	lsls	r2, r3, #5
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	4413      	add	r3, r2
 8011bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bd0:	460a      	mov	r2, r1
 8011bd2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	015a      	lsls	r2, r3, #5
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	4413      	add	r3, r2
 8011bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	693a      	ldr	r2, [r7, #16]
 8011be4:	0151      	lsls	r1, r2, #5
 8011be6:	697a      	ldr	r2, [r7, #20]
 8011be8:	440a      	add	r2, r1
 8011bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011bf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	371c      	adds	r7, #28
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
 8011c02:	bf00      	nop
 8011c04:	e007ffff 	.word	0xe007ffff
 8011c08:	fff80000 	.word	0xfff80000

08011c0c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b089      	sub	sp, #36	; 0x24
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	4611      	mov	r1, r2
 8011c18:	461a      	mov	r2, r3
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	71fb      	strb	r3, [r7, #7]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d11a      	bne.n	8011c68 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011c32:	88bb      	ldrh	r3, [r7, #4]
 8011c34:	3303      	adds	r3, #3
 8011c36:	089b      	lsrs	r3, r3, #2
 8011c38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	61bb      	str	r3, [r7, #24]
 8011c3e:	e00f      	b.n	8011c60 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011c40:	79fb      	ldrb	r3, [r7, #7]
 8011c42:	031a      	lsls	r2, r3, #12
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	4413      	add	r3, r2
 8011c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	69fb      	ldr	r3, [r7, #28]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	3304      	adds	r3, #4
 8011c58:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011c5a:	69bb      	ldr	r3, [r7, #24]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	61bb      	str	r3, [r7, #24]
 8011c60:	69ba      	ldr	r2, [r7, #24]
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d3eb      	bcc.n	8011c40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011c68:	2300      	movs	r3, #0
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3724      	adds	r7, #36	; 0x24
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c74:	4770      	bx	lr

08011c76 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011c76:	b480      	push	{r7}
 8011c78:	b089      	sub	sp, #36	; 0x24
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	60f8      	str	r0, [r7, #12]
 8011c7e:	60b9      	str	r1, [r7, #8]
 8011c80:	4613      	mov	r3, r2
 8011c82:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011c8c:	88fb      	ldrh	r3, [r7, #6]
 8011c8e:	3303      	adds	r3, #3
 8011c90:	089b      	lsrs	r3, r3, #2
 8011c92:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011c94:	2300      	movs	r3, #0
 8011c96:	61bb      	str	r3, [r7, #24]
 8011c98:	e00b      	b.n	8011cb2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	601a      	str	r2, [r3, #0]
    pDest++;
 8011ca6:	69fb      	ldr	r3, [r7, #28]
 8011ca8:	3304      	adds	r3, #4
 8011caa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	61bb      	str	r3, [r7, #24]
 8011cb2:	69ba      	ldr	r2, [r7, #24]
 8011cb4:	693b      	ldr	r3, [r7, #16]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d3ef      	bcc.n	8011c9a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011cba:	69fb      	ldr	r3, [r7, #28]
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3724      	adds	r7, #36	; 0x24
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	785b      	ldrb	r3, [r3, #1]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d12c      	bne.n	8011d3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	015a      	lsls	r2, r3, #5
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	4413      	add	r3, r2
 8011cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	db12      	blt.n	8011d1c <USB_EPSetStall+0x54>
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d00f      	beq.n	8011d1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	015a      	lsls	r2, r3, #5
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	4413      	add	r3, r2
 8011d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	68ba      	ldr	r2, [r7, #8]
 8011d0c:	0151      	lsls	r1, r2, #5
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	440a      	add	r2, r1
 8011d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	015a      	lsls	r2, r3, #5
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	4413      	add	r3, r2
 8011d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	68ba      	ldr	r2, [r7, #8]
 8011d2c:	0151      	lsls	r1, r2, #5
 8011d2e:	68fa      	ldr	r2, [r7, #12]
 8011d30:	440a      	add	r2, r1
 8011d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011d3a:	6013      	str	r3, [r2, #0]
 8011d3c:	e02b      	b.n	8011d96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	015a      	lsls	r2, r3, #5
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	4413      	add	r3, r2
 8011d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	db12      	blt.n	8011d76 <USB_EPSetStall+0xae>
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d00f      	beq.n	8011d76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	015a      	lsls	r2, r3, #5
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	4413      	add	r3, r2
 8011d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	68ba      	ldr	r2, [r7, #8]
 8011d66:	0151      	lsls	r1, r2, #5
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	440a      	add	r2, r1
 8011d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011d74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	015a      	lsls	r2, r3, #5
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	68ba      	ldr	r2, [r7, #8]
 8011d86:	0151      	lsls	r1, r2, #5
 8011d88:	68fa      	ldr	r2, [r7, #12]
 8011d8a:	440a      	add	r2, r1
 8011d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011d94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011d96:	2300      	movs	r3, #0
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3714      	adds	r7, #20
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr

08011da4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b085      	sub	sp, #20
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	785b      	ldrb	r3, [r3, #1]
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d128      	bne.n	8011e12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	015a      	lsls	r2, r3, #5
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	68ba      	ldr	r2, [r7, #8]
 8011dd0:	0151      	lsls	r1, r2, #5
 8011dd2:	68fa      	ldr	r2, [r7, #12]
 8011dd4:	440a      	add	r2, r1
 8011dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011dde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	78db      	ldrb	r3, [r3, #3]
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d003      	beq.n	8011df0 <USB_EPClearStall+0x4c>
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	78db      	ldrb	r3, [r3, #3]
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	d138      	bne.n	8011e62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	015a      	lsls	r2, r3, #5
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	4413      	add	r3, r2
 8011df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	68ba      	ldr	r2, [r7, #8]
 8011e00:	0151      	lsls	r1, r2, #5
 8011e02:	68fa      	ldr	r2, [r7, #12]
 8011e04:	440a      	add	r2, r1
 8011e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e0e:	6013      	str	r3, [r2, #0]
 8011e10:	e027      	b.n	8011e62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	015a      	lsls	r2, r3, #5
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	4413      	add	r3, r2
 8011e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	68ba      	ldr	r2, [r7, #8]
 8011e22:	0151      	lsls	r1, r2, #5
 8011e24:	68fa      	ldr	r2, [r7, #12]
 8011e26:	440a      	add	r2, r1
 8011e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011e30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	78db      	ldrb	r3, [r3, #3]
 8011e36:	2b03      	cmp	r3, #3
 8011e38:	d003      	beq.n	8011e42 <USB_EPClearStall+0x9e>
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	78db      	ldrb	r3, [r3, #3]
 8011e3e:	2b02      	cmp	r3, #2
 8011e40:	d10f      	bne.n	8011e62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	015a      	lsls	r2, r3, #5
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	4413      	add	r3, r2
 8011e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	68ba      	ldr	r2, [r7, #8]
 8011e52:	0151      	lsls	r1, r2, #5
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	440a      	add	r2, r1
 8011e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011e62:	2300      	movs	r3, #0
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3714      	adds	r7, #20
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6e:	4770      	bx	lr

08011e70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011e70:	b480      	push	{r7}
 8011e72:	b085      	sub	sp, #20
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	460b      	mov	r3, r1
 8011e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011e92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	78fb      	ldrb	r3, [r7, #3]
 8011e9e:	011b      	lsls	r3, r3, #4
 8011ea0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011ea4:	68f9      	ldr	r1, [r7, #12]
 8011ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011eae:	2300      	movs	r3, #0
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3714      	adds	r7, #20
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr

08011ebc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ed6:	f023 0302 	bic.w	r3, r3, #2
 8011eda:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011edc:	2003      	movs	r0, #3
 8011ede:	f7f1 fb65 	bl	80035ac <HAL_Delay>

  return HAL_OK;
 8011ee2:	2300      	movs	r3, #0
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3710      	adds	r7, #16
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}

08011eec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	68fa      	ldr	r2, [r7, #12]
 8011f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f06:	f043 0302 	orr.w	r3, r3, #2
 8011f0a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011f0c:	2003      	movs	r0, #3
 8011f0e:	f7f1 fb4d 	bl	80035ac <HAL_Delay>

  return HAL_OK;
 8011f12:	2300      	movs	r3, #0
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3710      	adds	r7, #16
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	695b      	ldr	r3, [r3, #20]
 8011f28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	699b      	ldr	r3, [r3, #24]
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	4013      	ands	r3, r2
 8011f32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011f34:	68fb      	ldr	r3, [r7, #12]
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3714      	adds	r7, #20
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f42:	b480      	push	{r7}
 8011f44:	b085      	sub	sp, #20
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f54:	699b      	ldr	r3, [r3, #24]
 8011f56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f5e:	69db      	ldr	r3, [r3, #28]
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	4013      	ands	r3, r2
 8011f64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	0c1b      	lsrs	r3, r3, #16
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3714      	adds	r7, #20
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr

08011f76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f76:	b480      	push	{r7}
 8011f78:	b085      	sub	sp, #20
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f88:	699b      	ldr	r3, [r3, #24]
 8011f8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f92:	69db      	ldr	r3, [r3, #28]
 8011f94:	68ba      	ldr	r2, [r7, #8]
 8011f96:	4013      	ands	r3, r2
 8011f98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	b29b      	uxth	r3, r3
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3714      	adds	r7, #20
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011faa:	b480      	push	{r7}
 8011fac:	b085      	sub	sp, #20
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011fba:	78fb      	ldrb	r3, [r7, #3]
 8011fbc:	015a      	lsls	r2, r3, #5
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fd0:	695b      	ldr	r3, [r3, #20]
 8011fd2:	68ba      	ldr	r2, [r7, #8]
 8011fd4:	4013      	ands	r3, r2
 8011fd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011fd8:	68bb      	ldr	r3, [r7, #8]
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3714      	adds	r7, #20
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr

08011fe6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011fe6:	b480      	push	{r7}
 8011fe8:	b087      	sub	sp, #28
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]
 8011fee:	460b      	mov	r3, r1
 8011ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012008:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801200a:	78fb      	ldrb	r3, [r7, #3]
 801200c:	f003 030f 	and.w	r3, r3, #15
 8012010:	68fa      	ldr	r2, [r7, #12]
 8012012:	fa22 f303 	lsr.w	r3, r2, r3
 8012016:	01db      	lsls	r3, r3, #7
 8012018:	b2db      	uxtb	r3, r3
 801201a:	693a      	ldr	r2, [r7, #16]
 801201c:	4313      	orrs	r3, r2
 801201e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012020:	78fb      	ldrb	r3, [r7, #3]
 8012022:	015a      	lsls	r2, r3, #5
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	4413      	add	r3, r2
 8012028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	693a      	ldr	r2, [r7, #16]
 8012030:	4013      	ands	r3, r2
 8012032:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012034:	68bb      	ldr	r3, [r7, #8]
}
 8012036:	4618      	mov	r0, r3
 8012038:	371c      	adds	r7, #28
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr

08012042 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012042:	b480      	push	{r7}
 8012044:	b083      	sub	sp, #12
 8012046:	af00      	add	r7, sp, #0
 8012048:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	695b      	ldr	r3, [r3, #20]
 801204e:	f003 0301 	and.w	r3, r3, #1
}
 8012052:	4618      	mov	r0, r3
 8012054:	370c      	adds	r7, #12
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr
	...

08012060 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012060:	b480      	push	{r7}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801207a:	4619      	mov	r1, r3
 801207c:	4b09      	ldr	r3, [pc, #36]	; (80120a4 <USB_ActivateSetup+0x44>)
 801207e:	4013      	ands	r3, r2
 8012080:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	68fa      	ldr	r2, [r7, #12]
 801208c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012094:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012096:	2300      	movs	r3, #0
}
 8012098:	4618      	mov	r0, r3
 801209a:	3714      	adds	r7, #20
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	fffff800 	.word	0xfffff800

080120a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b087      	sub	sp, #28
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	460b      	mov	r3, r1
 80120b2:	607a      	str	r2, [r7, #4]
 80120b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	333c      	adds	r3, #60	; 0x3c
 80120be:	3304      	adds	r3, #4
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	4a26      	ldr	r2, [pc, #152]	; (8012160 <USB_EP0_OutStart+0xb8>)
 80120c8:	4293      	cmp	r3, r2
 80120ca:	d90a      	bls.n	80120e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80120dc:	d101      	bne.n	80120e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80120de:	2300      	movs	r3, #0
 80120e0:	e037      	b.n	8012152 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120e8:	461a      	mov	r2, r3
 80120ea:	2300      	movs	r3, #0
 80120ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	697a      	ldr	r2, [r7, #20]
 80120f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	697a      	ldr	r2, [r7, #20]
 801210c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012110:	f043 0318 	orr.w	r3, r3, #24
 8012114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	697a      	ldr	r2, [r7, #20]
 8012120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012124:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012128:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801212a:	7afb      	ldrb	r3, [r7, #11]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d10f      	bne.n	8012150 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012136:	461a      	mov	r2, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	697a      	ldr	r2, [r7, #20]
 8012146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801214a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801214e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012150:	2300      	movs	r3, #0
}
 8012152:	4618      	mov	r0, r3
 8012154:	371c      	adds	r7, #28
 8012156:	46bd      	mov	sp, r7
 8012158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215c:	4770      	bx	lr
 801215e:	bf00      	nop
 8012160:	4f54300a 	.word	0x4f54300a

08012164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012164:	b480      	push	{r7}
 8012166:	b085      	sub	sp, #20
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801216c:	2300      	movs	r3, #0
 801216e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	3301      	adds	r3, #1
 8012174:	60fb      	str	r3, [r7, #12]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	4a13      	ldr	r2, [pc, #76]	; (80121c8 <USB_CoreReset+0x64>)
 801217a:	4293      	cmp	r3, r2
 801217c:	d901      	bls.n	8012182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801217e:	2303      	movs	r3, #3
 8012180:	e01b      	b.n	80121ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	691b      	ldr	r3, [r3, #16]
 8012186:	2b00      	cmp	r3, #0
 8012188:	daf2      	bge.n	8012170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801218a:	2300      	movs	r3, #0
 801218c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	691b      	ldr	r3, [r3, #16]
 8012192:	f043 0201 	orr.w	r2, r3, #1
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	3301      	adds	r3, #1
 801219e:	60fb      	str	r3, [r7, #12]
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	4a09      	ldr	r2, [pc, #36]	; (80121c8 <USB_CoreReset+0x64>)
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d901      	bls.n	80121ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80121a8:	2303      	movs	r3, #3
 80121aa:	e006      	b.n	80121ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	691b      	ldr	r3, [r3, #16]
 80121b0:	f003 0301 	and.w	r3, r3, #1
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d0f0      	beq.n	801219a <USB_CoreReset+0x36>

  return HAL_OK;
 80121b8:	2300      	movs	r3, #0
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3714      	adds	r7, #20
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr
 80121c6:	bf00      	nop
 80121c8:	00030d40 	.word	0x00030d40

080121cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80121d0:	4904      	ldr	r1, [pc, #16]	; (80121e4 <MX_FATFS_Init+0x18>)
 80121d2:	4805      	ldr	r0, [pc, #20]	; (80121e8 <MX_FATFS_Init+0x1c>)
 80121d4:	f005 fbec 	bl	80179b0 <FATFS_LinkDriver>
 80121d8:	4603      	mov	r3, r0
 80121da:	461a      	mov	r2, r3
 80121dc:	4b03      	ldr	r3, [pc, #12]	; (80121ec <MX_FATFS_Init+0x20>)
 80121de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80121e0:	bf00      	nop
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	24040f48 	.word	0x24040f48
 80121e8:	08019eec 	.word	0x08019eec
 80121ec:	24040f44 	.word	0x24040f44

080121f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80121f0:	b480      	push	{r7}
 80121f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80121f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr

08012200 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801220a:	f000 f885 	bl	8012318 <BSP_SD_IsDetected>
 801220e:	4603      	mov	r3, r0
 8012210:	2b01      	cmp	r3, #1
 8012212:	d001      	beq.n	8012218 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012214:	2302      	movs	r3, #2
 8012216:	e012      	b.n	801223e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012218:	480b      	ldr	r0, [pc, #44]	; (8012248 <BSP_SD_Init+0x48>)
 801221a:	f7f9 fc1d 	bl	800ba58 <HAL_SD_Init>
 801221e:	4603      	mov	r3, r0
 8012220:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012222:	79fb      	ldrb	r3, [r7, #7]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d109      	bne.n	801223c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801222c:	4806      	ldr	r0, [pc, #24]	; (8012248 <BSP_SD_Init+0x48>)
 801222e:	f7fa fdf1 	bl	800ce14 <HAL_SD_ConfigWideBusOperation>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d001      	beq.n	801223c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012238:	2301      	movs	r3, #1
 801223a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801223c:	79fb      	ldrb	r3, [r7, #7]
}
 801223e:	4618      	mov	r0, r3
 8012240:	3708      	adds	r7, #8
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	24040c48 	.word	0x24040c48

0801224c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b086      	sub	sp, #24
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012258:	2300      	movs	r3, #0
 801225a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	68ba      	ldr	r2, [r7, #8]
 8012260:	68f9      	ldr	r1, [r7, #12]
 8012262:	4806      	ldr	r0, [pc, #24]	; (801227c <BSP_SD_ReadBlocks_DMA+0x30>)
 8012264:	f7fa f834 	bl	800c2d0 <HAL_SD_ReadBlocks_DMA>
 8012268:	4603      	mov	r3, r0
 801226a:	2b00      	cmp	r3, #0
 801226c:	d001      	beq.n	8012272 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801226e:	2301      	movs	r3, #1
 8012270:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012272:	7dfb      	ldrb	r3, [r7, #23]
}
 8012274:	4618      	mov	r0, r3
 8012276:	3718      	adds	r7, #24
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	24040c48 	.word	0x24040c48

08012280 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b086      	sub	sp, #24
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801228c:	2300      	movs	r3, #0
 801228e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	68ba      	ldr	r2, [r7, #8]
 8012294:	68f9      	ldr	r1, [r7, #12]
 8012296:	4806      	ldr	r0, [pc, #24]	; (80122b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012298:	f7fa f8c2 	bl	800c420 <HAL_SD_WriteBlocks_DMA>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d001      	beq.n	80122a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80122a2:	2301      	movs	r3, #1
 80122a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80122a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3718      	adds	r7, #24
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}
 80122b0:	24040c48 	.word	0x24040c48

080122b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80122b8:	4805      	ldr	r0, [pc, #20]	; (80122d0 <BSP_SD_GetCardState+0x1c>)
 80122ba:	f7fa fe55 	bl	800cf68 <HAL_SD_GetCardState>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b04      	cmp	r3, #4
 80122c2:	bf14      	ite	ne
 80122c4:	2301      	movne	r3, #1
 80122c6:	2300      	moveq	r3, #0
 80122c8:	b2db      	uxtb	r3, r3
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	24040c48 	.word	0x24040c48

080122d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80122dc:	6879      	ldr	r1, [r7, #4]
 80122de:	4803      	ldr	r0, [pc, #12]	; (80122ec <BSP_SD_GetCardInfo+0x18>)
 80122e0:	f7fa fd6c 	bl	800cdbc <HAL_SD_GetCardInfo>
}
 80122e4:	bf00      	nop
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	24040c48 	.word	0x24040c48

080122f0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80122f8:	f000 f9a0 	bl	801263c <BSP_SD_WriteCpltCallback>
}
 80122fc:	bf00      	nop
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}

08012304 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801230c:	f000 f9a2 	bl	8012654 <BSP_SD_ReadCpltCallback>
}
 8012310:	bf00      	nop
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801231e:	2301      	movs	r3, #1
 8012320:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012322:	f000 f80b 	bl	801233c <BSP_PlatformIsDetected>
 8012326:	4603      	mov	r3, r0
 8012328:	2b00      	cmp	r3, #0
 801232a:	d101      	bne.n	8012330 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801232c:	2300      	movs	r3, #0
 801232e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012330:	79fb      	ldrb	r3, [r7, #7]
 8012332:	b2db      	uxtb	r3, r3
}
 8012334:	4618      	mov	r0, r3
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012342:	2301      	movs	r3, #1
 8012344:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801234a:	4806      	ldr	r0, [pc, #24]	; (8012364 <BSP_PlatformIsDetected+0x28>)
 801234c:	f7f4 fe30 	bl	8006fb0 <HAL_GPIO_ReadPin>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d001      	beq.n	801235a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012356:	2300      	movs	r3, #0
 8012358:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801235a:	79fb      	ldrb	r3, [r7, #7]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	58020000 	.word	0x58020000

08012368 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012370:	f7f1 f910 	bl	8003594 <HAL_GetTick>
 8012374:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8012376:	e006      	b.n	8012386 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012378:	f7ff ff9c 	bl	80122b4 <BSP_SD_GetCardState>
 801237c:	4603      	mov	r3, r0
 801237e:	2b00      	cmp	r3, #0
 8012380:	d101      	bne.n	8012386 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012382:	2300      	movs	r3, #0
 8012384:	e009      	b.n	801239a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8012386:	f7f1 f905 	bl	8003594 <HAL_GetTick>
 801238a:	4602      	mov	r2, r0
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	687a      	ldr	r2, [r7, #4]
 8012392:	429a      	cmp	r2, r3
 8012394:	d8f0      	bhi.n	8012378 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801239a:	4618      	mov	r0, r3
 801239c:	3710      	adds	r7, #16
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
	...

080123a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	4603      	mov	r3, r0
 80123ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80123ae:	4b0b      	ldr	r3, [pc, #44]	; (80123dc <SD_CheckStatus+0x38>)
 80123b0:	2201      	movs	r2, #1
 80123b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80123b4:	f7ff ff7e 	bl	80122b4 <BSP_SD_GetCardState>
 80123b8:	4603      	mov	r3, r0
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d107      	bne.n	80123ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80123be:	4b07      	ldr	r3, [pc, #28]	; (80123dc <SD_CheckStatus+0x38>)
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	f023 0301 	bic.w	r3, r3, #1
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	4b04      	ldr	r3, [pc, #16]	; (80123dc <SD_CheckStatus+0x38>)
 80123cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80123ce:	4b03      	ldr	r3, [pc, #12]	; (80123dc <SD_CheckStatus+0x38>)
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	b2db      	uxtb	r3, r3
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	24000019 	.word	0x24000019

080123e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b082      	sub	sp, #8
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	4603      	mov	r3, r0
 80123e8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80123ea:	f7ff ff09 	bl	8012200 <BSP_SD_Init>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d107      	bne.n	8012404 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80123f4:	79fb      	ldrb	r3, [r7, #7]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff ffd4 	bl	80123a4 <SD_CheckStatus>
 80123fc:	4603      	mov	r3, r0
 80123fe:	461a      	mov	r2, r3
 8012400:	4b04      	ldr	r3, [pc, #16]	; (8012414 <SD_initialize+0x34>)
 8012402:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012404:	4b03      	ldr	r3, [pc, #12]	; (8012414 <SD_initialize+0x34>)
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	b2db      	uxtb	r3, r3
}
 801240a:	4618      	mov	r0, r3
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	24000019 	.word	0x24000019

08012418 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	4603      	mov	r3, r0
 8012420:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012422:	79fb      	ldrb	r3, [r7, #7]
 8012424:	4618      	mov	r0, r3
 8012426:	f7ff ffbd 	bl	80123a4 <SD_CheckStatus>
 801242a:	4603      	mov	r3, r0
}
 801242c:	4618      	mov	r0, r3
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b086      	sub	sp, #24
 8012438:	af00      	add	r7, sp, #0
 801243a:	60b9      	str	r1, [r7, #8]
 801243c:	607a      	str	r2, [r7, #4]
 801243e:	603b      	str	r3, [r7, #0]
 8012440:	4603      	mov	r3, r0
 8012442:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012444:	2301      	movs	r3, #1
 8012446:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012448:	f247 5030 	movw	r0, #30000	; 0x7530
 801244c:	f7ff ff8c 	bl	8012368 <SD_CheckStatusWithTimeout>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	da01      	bge.n	801245a <SD_read+0x26>
  {
    return res;
 8012456:	7dfb      	ldrb	r3, [r7, #23]
 8012458:	e03b      	b.n	80124d2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801245a:	683a      	ldr	r2, [r7, #0]
 801245c:	6879      	ldr	r1, [r7, #4]
 801245e:	68b8      	ldr	r0, [r7, #8]
 8012460:	f7ff fef4 	bl	801224c <BSP_SD_ReadBlocks_DMA>
 8012464:	4603      	mov	r3, r0
 8012466:	2b00      	cmp	r3, #0
 8012468:	d132      	bne.n	80124d0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801246a:	4b1c      	ldr	r3, [pc, #112]	; (80124dc <SD_read+0xa8>)
 801246c:	2200      	movs	r2, #0
 801246e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012470:	f7f1 f890 	bl	8003594 <HAL_GetTick>
 8012474:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012476:	bf00      	nop
 8012478:	4b18      	ldr	r3, [pc, #96]	; (80124dc <SD_read+0xa8>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d108      	bne.n	8012492 <SD_read+0x5e>
 8012480:	f7f1 f888 	bl	8003594 <HAL_GetTick>
 8012484:	4602      	mov	r2, r0
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	1ad3      	subs	r3, r2, r3
 801248a:	f247 522f 	movw	r2, #29999	; 0x752f
 801248e:	4293      	cmp	r3, r2
 8012490:	d9f2      	bls.n	8012478 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8012492:	4b12      	ldr	r3, [pc, #72]	; (80124dc <SD_read+0xa8>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d102      	bne.n	80124a0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801249a:	2301      	movs	r3, #1
 801249c:	75fb      	strb	r3, [r7, #23]
 801249e:	e017      	b.n	80124d0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80124a0:	4b0e      	ldr	r3, [pc, #56]	; (80124dc <SD_read+0xa8>)
 80124a2:	2200      	movs	r2, #0
 80124a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80124a6:	f7f1 f875 	bl	8003594 <HAL_GetTick>
 80124aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80124ac:	e007      	b.n	80124be <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80124ae:	f7ff ff01 	bl	80122b4 <BSP_SD_GetCardState>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d102      	bne.n	80124be <SD_read+0x8a>
          {
            res = RES_OK;
 80124b8:	2300      	movs	r3, #0
 80124ba:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80124bc:	e008      	b.n	80124d0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80124be:	f7f1 f869 	bl	8003594 <HAL_GetTick>
 80124c2:	4602      	mov	r2, r0
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	1ad3      	subs	r3, r2, r3
 80124c8:	f247 522f 	movw	r2, #29999	; 0x752f
 80124cc:	4293      	cmp	r3, r2
 80124ce:	d9ee      	bls.n	80124ae <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80124d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	24040348 	.word	0x24040348

080124e0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60b9      	str	r1, [r7, #8]
 80124e8:	607a      	str	r2, [r7, #4]
 80124ea:	603b      	str	r3, [r7, #0]
 80124ec:	4603      	mov	r3, r0
 80124ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80124f0:	2301      	movs	r3, #1
 80124f2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80124f4:	4b24      	ldr	r3, [pc, #144]	; (8012588 <SD_write+0xa8>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80124fa:	f247 5030 	movw	r0, #30000	; 0x7530
 80124fe:	f7ff ff33 	bl	8012368 <SD_CheckStatusWithTimeout>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	da01      	bge.n	801250c <SD_write+0x2c>
  {
    return res;
 8012508:	7dfb      	ldrb	r3, [r7, #23]
 801250a:	e038      	b.n	801257e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801250c:	683a      	ldr	r2, [r7, #0]
 801250e:	6879      	ldr	r1, [r7, #4]
 8012510:	68b8      	ldr	r0, [r7, #8]
 8012512:	f7ff feb5 	bl	8012280 <BSP_SD_WriteBlocks_DMA>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d12f      	bne.n	801257c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801251c:	f7f1 f83a 	bl	8003594 <HAL_GetTick>
 8012520:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012522:	bf00      	nop
 8012524:	4b18      	ldr	r3, [pc, #96]	; (8012588 <SD_write+0xa8>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d108      	bne.n	801253e <SD_write+0x5e>
 801252c:	f7f1 f832 	bl	8003594 <HAL_GetTick>
 8012530:	4602      	mov	r2, r0
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	f247 522f 	movw	r2, #29999	; 0x752f
 801253a:	4293      	cmp	r3, r2
 801253c:	d9f2      	bls.n	8012524 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801253e:	4b12      	ldr	r3, [pc, #72]	; (8012588 <SD_write+0xa8>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d102      	bne.n	801254c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012546:	2301      	movs	r3, #1
 8012548:	75fb      	strb	r3, [r7, #23]
 801254a:	e017      	b.n	801257c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801254c:	4b0e      	ldr	r3, [pc, #56]	; (8012588 <SD_write+0xa8>)
 801254e:	2200      	movs	r2, #0
 8012550:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012552:	f7f1 f81f 	bl	8003594 <HAL_GetTick>
 8012556:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012558:	e007      	b.n	801256a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801255a:	f7ff feab 	bl	80122b4 <BSP_SD_GetCardState>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d102      	bne.n	801256a <SD_write+0x8a>
          {
            res = RES_OK;
 8012564:	2300      	movs	r3, #0
 8012566:	75fb      	strb	r3, [r7, #23]
            break;
 8012568:	e008      	b.n	801257c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801256a:	f7f1 f813 	bl	8003594 <HAL_GetTick>
 801256e:	4602      	mov	r2, r0
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	1ad3      	subs	r3, r2, r3
 8012574:	f247 522f 	movw	r2, #29999	; 0x752f
 8012578:	4293      	cmp	r3, r2
 801257a:	d9ee      	bls.n	801255a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801257c:	7dfb      	ldrb	r3, [r7, #23]
}
 801257e:	4618      	mov	r0, r3
 8012580:	3718      	adds	r7, #24
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}
 8012586:	bf00      	nop
 8012588:	24040344 	.word	0x24040344

0801258c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b08c      	sub	sp, #48	; 0x30
 8012590:	af00      	add	r7, sp, #0
 8012592:	4603      	mov	r3, r0
 8012594:	603a      	str	r2, [r7, #0]
 8012596:	71fb      	strb	r3, [r7, #7]
 8012598:	460b      	mov	r3, r1
 801259a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801259c:	2301      	movs	r3, #1
 801259e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80125a2:	4b25      	ldr	r3, [pc, #148]	; (8012638 <SD_ioctl+0xac>)
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	f003 0301 	and.w	r3, r3, #1
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d001      	beq.n	80125b4 <SD_ioctl+0x28>
 80125b0:	2303      	movs	r3, #3
 80125b2:	e03c      	b.n	801262e <SD_ioctl+0xa2>

  switch (cmd)
 80125b4:	79bb      	ldrb	r3, [r7, #6]
 80125b6:	2b03      	cmp	r3, #3
 80125b8:	d834      	bhi.n	8012624 <SD_ioctl+0x98>
 80125ba:	a201      	add	r2, pc, #4	; (adr r2, 80125c0 <SD_ioctl+0x34>)
 80125bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c0:	080125d1 	.word	0x080125d1
 80125c4:	080125d9 	.word	0x080125d9
 80125c8:	080125f1 	.word	0x080125f1
 80125cc:	0801260b 	.word	0x0801260b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80125d0:	2300      	movs	r3, #0
 80125d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80125d6:	e028      	b.n	801262a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80125d8:	f107 0308 	add.w	r3, r7, #8
 80125dc:	4618      	mov	r0, r3
 80125de:	f7ff fe79 	bl	80122d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80125e2:	6a3a      	ldr	r2, [r7, #32]
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80125e8:	2300      	movs	r3, #0
 80125ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80125ee:	e01c      	b.n	801262a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80125f0:	f107 0308 	add.w	r3, r7, #8
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7ff fe6d 	bl	80122d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80125fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012602:	2300      	movs	r3, #0
 8012604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012608:	e00f      	b.n	801262a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801260a:	f107 0308 	add.w	r3, r7, #8
 801260e:	4618      	mov	r0, r3
 8012610:	f7ff fe60 	bl	80122d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012616:	0a5a      	lsrs	r2, r3, #9
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801261c:	2300      	movs	r3, #0
 801261e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012622:	e002      	b.n	801262a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012624:	2304      	movs	r3, #4
 8012626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801262a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801262e:	4618      	mov	r0, r3
 8012630:	3730      	adds	r7, #48	; 0x30
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	24000019 	.word	0x24000019

0801263c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801263c:	b480      	push	{r7}
 801263e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012640:	4b03      	ldr	r3, [pc, #12]	; (8012650 <BSP_SD_WriteCpltCallback+0x14>)
 8012642:	2201      	movs	r2, #1
 8012644:	601a      	str	r2, [r3, #0]
}
 8012646:	bf00      	nop
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr
 8012650:	24040344 	.word	0x24040344

08012654 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012654:	b480      	push	{r7}
 8012656:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012658:	4b03      	ldr	r3, [pc, #12]	; (8012668 <BSP_SD_ReadCpltCallback+0x14>)
 801265a:	2201      	movs	r2, #1
 801265c:	601a      	str	r2, [r3, #0]
}
 801265e:	bf00      	nop
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr
 8012668:	24040348 	.word	0x24040348

0801266c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	460b      	mov	r3, r1
 8012676:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8012678:	f248 0074 	movw	r0, #32884	; 0x8074
 801267c:	f005 fed0 	bl	8018420 <malloc>
 8012680:	4603      	mov	r3, r0
 8012682:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d105      	bne.n	8012696 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012692:	2302      	movs	r3, #2
 8012694:	e034      	b.n	8012700 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	68fa      	ldr	r2, [r7, #12]
 801269a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	7c1b      	ldrb	r3, [r3, #16]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d115      	bne.n	80126d2 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80126a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126aa:	2202      	movs	r2, #2
 80126ac:	2101      	movs	r1, #1
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f005 fd1d 	bl	80180ee <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80126bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126c0:	2202      	movs	r2, #2
 80126c2:	2181      	movs	r1, #129	; 0x81
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f005 fd12 	bl	80180ee <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2201      	movs	r2, #1
 80126ce:	871a      	strh	r2, [r3, #56]	; 0x38
 80126d0:	e012      	b.n	80126f8 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80126d2:	2340      	movs	r3, #64	; 0x40
 80126d4:	2202      	movs	r2, #2
 80126d6:	2101      	movs	r1, #1
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f005 fd08 	bl	80180ee <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2201      	movs	r2, #1
 80126e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80126e6:	2340      	movs	r3, #64	; 0x40
 80126e8:	2202      	movs	r2, #2
 80126ea:	2181      	movs	r1, #129	; 0x81
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f005 fcfe 	bl	80180ee <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2201      	movs	r2, #1
 80126f6:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f000 f98e 	bl	8012a1a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80126fe:	2300      	movs	r3, #0
}
 8012700:	4618      	mov	r0, r3
 8012702:	3710      	adds	r7, #16
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	460b      	mov	r3, r1
 8012712:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012714:	2101      	movs	r1, #1
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f005 fd0f 	bl	801813a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2200      	movs	r2, #0
 8012720:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8012724:	2181      	movs	r1, #129	; 0x81
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f005 fd07 	bl	801813a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f000 f9cf 	bl	8012ad6 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801273e:	2b00      	cmp	r3, #0
 8012740:	d009      	beq.n	8012756 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012748:	4618      	mov	r0, r3
 801274a:	f005 fe71 	bl	8018430 <free>
    pdev->pClassData = NULL;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2200      	movs	r2, #0
 8012752:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012756:	2300      	movs	r3, #0
}
 8012758:	4618      	mov	r0, r3
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b086      	sub	sp, #24
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012770:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8012772:	2300      	movs	r3, #0
 8012774:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8012776:	2300      	movs	r3, #0
 8012778:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012782:	2b00      	cmp	r3, #0
 8012784:	d04d      	beq.n	8012822 <USBD_MSC_Setup+0xc2>
 8012786:	2b20      	cmp	r3, #32
 8012788:	f040 80c6 	bne.w	8012918 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	785b      	ldrb	r3, [r3, #1]
 8012790:	2bfe      	cmp	r3, #254	; 0xfe
 8012792:	d002      	beq.n	801279a <USBD_MSC_Setup+0x3a>
 8012794:	2bff      	cmp	r3, #255	; 0xff
 8012796:	d024      	beq.n	80127e2 <USBD_MSC_Setup+0x82>
 8012798:	e03b      	b.n	8012812 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	885b      	ldrh	r3, [r3, #2]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d118      	bne.n	80127d4 <USBD_MSC_Setup+0x74>
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	88db      	ldrh	r3, [r3, #6]
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d114      	bne.n	80127d4 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	da0f      	bge.n	80127d4 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80127ba:	699b      	ldr	r3, [r3, #24]
 80127bc:	4798      	blx	r3
 80127be:	4603      	mov	r3, r0
 80127c0:	461a      	mov	r2, r3
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	2201      	movs	r2, #1
 80127ca:	4619      	mov	r1, r3
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f002 fdaa 	bl	8015326 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80127d2:	e025      	b.n	8012820 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80127d4:	6839      	ldr	r1, [r7, #0]
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f002 fd34 	bl	8015244 <USBD_CtlError>
        ret = USBD_FAIL;
 80127dc:	2303      	movs	r3, #3
 80127de:	75fb      	strb	r3, [r7, #23]
      break;
 80127e0:	e01e      	b.n	8012820 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	885b      	ldrh	r3, [r3, #2]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d10c      	bne.n	8012804 <USBD_MSC_Setup+0xa4>
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	88db      	ldrh	r3, [r3, #6]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d108      	bne.n	8012804 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	db03      	blt.n	8012804 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 f947 	bl	8012a90 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012802:	e00d      	b.n	8012820 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8012804:	6839      	ldr	r1, [r7, #0]
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f002 fd1c 	bl	8015244 <USBD_CtlError>
        ret = USBD_FAIL;
 801280c:	2303      	movs	r3, #3
 801280e:	75fb      	strb	r3, [r7, #23]
      break;
 8012810:	e006      	b.n	8012820 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8012812:	6839      	ldr	r1, [r7, #0]
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f002 fd15 	bl	8015244 <USBD_CtlError>
      ret = USBD_FAIL;
 801281a:	2303      	movs	r3, #3
 801281c:	75fb      	strb	r3, [r7, #23]
      break;
 801281e:	bf00      	nop
    }
    break;
 8012820:	e081      	b.n	8012926 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	785b      	ldrb	r3, [r3, #1]
 8012826:	2b0b      	cmp	r3, #11
 8012828:	d86d      	bhi.n	8012906 <USBD_MSC_Setup+0x1a6>
 801282a:	a201      	add	r2, pc, #4	; (adr r2, 8012830 <USBD_MSC_Setup+0xd0>)
 801282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012830:	08012861 	.word	0x08012861
 8012834:	080128d7 	.word	0x080128d7
 8012838:	08012907 	.word	0x08012907
 801283c:	08012907 	.word	0x08012907
 8012840:	08012907 	.word	0x08012907
 8012844:	08012907 	.word	0x08012907
 8012848:	08012907 	.word	0x08012907
 801284c:	08012907 	.word	0x08012907
 8012850:	08012907 	.word	0x08012907
 8012854:	08012907 	.word	0x08012907
 8012858:	08012889 	.word	0x08012889
 801285c:	080128b1 	.word	0x080128b1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012866:	2b03      	cmp	r3, #3
 8012868:	d107      	bne.n	801287a <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801286a:	f107 030e 	add.w	r3, r7, #14
 801286e:	2202      	movs	r2, #2
 8012870:	4619      	mov	r1, r3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f002 fd57 	bl	8015326 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8012878:	e04d      	b.n	8012916 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801287a:	6839      	ldr	r1, [r7, #0]
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f002 fce1 	bl	8015244 <USBD_CtlError>
        ret = USBD_FAIL;
 8012882:	2303      	movs	r3, #3
 8012884:	75fb      	strb	r3, [r7, #23]
      break;
 8012886:	e046      	b.n	8012916 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801288e:	2b03      	cmp	r3, #3
 8012890:	d107      	bne.n	80128a2 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	3304      	adds	r3, #4
 8012896:	2201      	movs	r2, #1
 8012898:	4619      	mov	r1, r3
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f002 fd43 	bl	8015326 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80128a0:	e039      	b.n	8012916 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80128a2:	6839      	ldr	r1, [r7, #0]
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f002 fccd 	bl	8015244 <USBD_CtlError>
        ret = USBD_FAIL;
 80128aa:	2303      	movs	r3, #3
 80128ac:	75fb      	strb	r3, [r7, #23]
      break;
 80128ae:	e032      	b.n	8012916 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128b6:	2b03      	cmp	r3, #3
 80128b8:	d106      	bne.n	80128c8 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	885b      	ldrh	r3, [r3, #2]
 80128be:	b2db      	uxtb	r3, r3
 80128c0:	461a      	mov	r2, r3
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80128c6:	e026      	b.n	8012916 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80128c8:	6839      	ldr	r1, [r7, #0]
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f002 fcba 	bl	8015244 <USBD_CtlError>
        ret = USBD_FAIL;
 80128d0:	2303      	movs	r3, #3
 80128d2:	75fb      	strb	r3, [r7, #23]
      break;
 80128d4:	e01f      	b.n	8012916 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128dc:	2b03      	cmp	r3, #3
 80128de:	d119      	bne.n	8012914 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	885b      	ldrh	r3, [r3, #2]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d115      	bne.n	8012914 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	889b      	ldrh	r3, [r3, #4]
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	4619      	mov	r1, r3
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f005 fc41 	bl	8018178 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	889b      	ldrh	r3, [r3, #4]
 80128fa:	b2db      	uxtb	r3, r3
 80128fc:	4619      	mov	r1, r3
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f000 fa90 	bl	8012e24 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8012904:	e006      	b.n	8012914 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8012906:	6839      	ldr	r1, [r7, #0]
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f002 fc9b 	bl	8015244 <USBD_CtlError>
      ret = USBD_FAIL;
 801290e:	2303      	movs	r3, #3
 8012910:	75fb      	strb	r3, [r7, #23]
      break;
 8012912:	e000      	b.n	8012916 <USBD_MSC_Setup+0x1b6>
      break;
 8012914:	bf00      	nop
    }
    break;
 8012916:	e006      	b.n	8012926 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8012918:	6839      	ldr	r1, [r7, #0]
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f002 fc92 	bl	8015244 <USBD_CtlError>
    ret = USBD_FAIL;
 8012920:	2303      	movs	r3, #3
 8012922:	75fb      	strb	r3, [r7, #23]
    break;
 8012924:	bf00      	nop
  }

  return (uint8_t)ret;
 8012926:	7dfb      	ldrb	r3, [r7, #23]
}
 8012928:	4618      	mov	r0, r3
 801292a:	3718      	adds	r7, #24
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}

08012930 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	460b      	mov	r3, r1
 801293a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801293c:	78fb      	ldrb	r3, [r7, #3]
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f000 f8d9 	bl	8012af8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8012946:	2300      	movs	r3, #0
}
 8012948:	4618      	mov	r0, r3
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	460b      	mov	r3, r1
 801295a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801295c:	78fb      	ldrb	r3, [r7, #3]
 801295e:	4619      	mov	r1, r3
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 f8fd 	bl	8012b60 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8012966:	2300      	movs	r3, #0
}
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012970:	b480      	push	{r7}
 8012972:	b083      	sub	sp, #12
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2220      	movs	r2, #32
 801297c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801297e:	4b03      	ldr	r3, [pc, #12]	; (801298c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012980:	4618      	mov	r0, r3
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr
 801298c:	24000054 	.word	0x24000054

08012990 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2220      	movs	r2, #32
 801299c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801299e:	4b03      	ldr	r3, [pc, #12]	; (80129ac <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr
 80129ac:	24000074 	.word	0x24000074

080129b0 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b083      	sub	sp, #12
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2220      	movs	r2, #32
 80129bc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80129be:	4b03      	ldr	r3, [pc, #12]	; (80129cc <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	370c      	adds	r7, #12
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr
 80129cc:	24000094 	.word	0x24000094

080129d0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80129d0:	b480      	push	{r7}
 80129d2:	b083      	sub	sp, #12
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	220a      	movs	r2, #10
 80129dc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80129de:	4b03      	ldr	r3, [pc, #12]	; (80129ec <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	370c      	adds	r7, #12
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr
 80129ec:	240000b4 	.word	0x240000b4

080129f0 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d101      	bne.n	8012a04 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012a00:	2303      	movs	r3, #3
 8012a02:	e004      	b.n	8012a0e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	683a      	ldr	r2, [r7, #0]
 8012a08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012a0c:	2300      	movs	r3, #0
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	370c      	adds	r7, #12
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr

08012a1a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b084      	sub	sp, #16
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a28:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2200      	movs	r2, #0
 8012a34:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012a36:	68fa      	ldr	r2, [r7, #12]
 8012a38:	f248 0361 	movw	r3, #32865	; 0x8061
 8012a3c:	4413      	add	r3, r2
 8012a3e:	2200      	movs	r2, #0
 8012a40:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8012a42:	68fa      	ldr	r2, [r7, #12]
 8012a44:	f248 0360 	movw	r3, #32864	; 0x8060
 8012a48:	4413      	add	r3, r2
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	f248 0362 	movw	r3, #32866	; 0x8062
 8012a54:	4413      	add	r3, r2
 8012a56:	2200      	movs	r2, #0
 8012a58:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2000      	movs	r0, #0
 8012a64:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012a66:	2101      	movs	r1, #1
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f005 fb85 	bl	8018178 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8012a6e:	2181      	movs	r1, #129	; 0x81
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f005 fb81 	bl	8018178 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	f248 0210 	movw	r2, #32784	; 0x8010
 8012a7c:	441a      	add	r2, r3
 8012a7e:	231f      	movs	r3, #31
 8012a80:	2101      	movs	r1, #1
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f005 fc41 	bl	801830a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012a88:	bf00      	nop
 8012a8a:	3710      	adds	r7, #16
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a9e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2201      	movs	r2, #1
 8012aaa:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8012aac:	2181      	movs	r1, #129	; 0x81
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f005 fba0 	bl	80181f4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8012ab4:	2101      	movs	r1, #1
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f005 fb9c 	bl	80181f4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f248 0210 	movw	r2, #32784	; 0x8010
 8012ac2:	441a      	add	r2, r3
 8012ac4:	231f      	movs	r3, #31
 8012ac6:	2101      	movs	r1, #1
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f005 fc1e 	bl	801830a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012ace:	bf00      	nop
 8012ad0:	3710      	adds	r7, #16
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8012ad6:	b480      	push	{r7}
 8012ad8:	b085      	sub	sp, #20
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ae4:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	721a      	strb	r2, [r3, #8]
}
 8012aec:	bf00      	nop
 8012aee:	3714      	adds	r7, #20
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr

08012af8 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	460b      	mov	r3, r1
 8012b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b0a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	7a1b      	ldrb	r3, [r3, #8]
 8012b10:	2b02      	cmp	r3, #2
 8012b12:	d004      	beq.n	8012b1e <MSC_BOT_DataIn+0x26>
 8012b14:	2b02      	cmp	r3, #2
 8012b16:	db1c      	blt.n	8012b52 <MSC_BOT_DataIn+0x5a>
 8012b18:	2b04      	cmp	r3, #4
 8012b1a:	dc1a      	bgt.n	8012b52 <MSC_BOT_DataIn+0x5a>
 8012b1c:	e014      	b.n	8012b48 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	f248 031d 	movw	r3, #32797	; 0x801d
 8012b24:	4413      	add	r3, r2
 8012b26:	7819      	ldrb	r1, [r3, #0]
 8012b28:	68fa      	ldr	r2, [r7, #12]
 8012b2a:	f248 031f 	movw	r3, #32799	; 0x801f
 8012b2e:	4413      	add	r3, r2
 8012b30:	461a      	mov	r2, r3
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f000 f99e 	bl	8012e74 <SCSI_ProcessCmd>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	da0b      	bge.n	8012b56 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012b3e:	2101      	movs	r1, #1
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 f90b 	bl	8012d5c <MSC_BOT_SendCSW>
    }
    break;
 8012b46:	e006      	b.n	8012b56 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012b48:	2100      	movs	r1, #0
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f000 f906 	bl	8012d5c <MSC_BOT_SendCSW>
    break;
 8012b50:	e002      	b.n	8012b58 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8012b52:	bf00      	nop
 8012b54:	e000      	b.n	8012b58 <MSC_BOT_DataIn+0x60>
    break;
 8012b56:	bf00      	nop
  }
}
 8012b58:	bf00      	nop
 8012b5a:	3710      	adds	r7, #16
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	460b      	mov	r3, r1
 8012b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012b72:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	7a1b      	ldrb	r3, [r3, #8]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <MSC_BOT_DataOut+0x22>
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	d004      	beq.n	8012b8a <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012b80:	e018      	b.n	8012bb4 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f000 f81a 	bl	8012bbc <MSC_BOT_CBW_Decode>
      break;
 8012b88:	e014      	b.n	8012bb4 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012b8a:	68fa      	ldr	r2, [r7, #12]
 8012b8c:	f248 031d 	movw	r3, #32797	; 0x801d
 8012b90:	4413      	add	r3, r2
 8012b92:	7819      	ldrb	r1, [r3, #0]
 8012b94:	68fa      	ldr	r2, [r7, #12]
 8012b96:	f248 031f 	movw	r3, #32799	; 0x801f
 8012b9a:	4413      	add	r3, r2
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f000 f968 	bl	8012e74 <SCSI_ProcessCmd>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	da03      	bge.n	8012bb2 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012baa:	2101      	movs	r1, #1
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f8d5 	bl	8012d5c <MSC_BOT_SendCSW>
      break;
 8012bb2:	bf00      	nop
  }
}
 8012bb4:	bf00      	nop
 8012bb6:	3710      	adds	r7, #16
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bca:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8012bcc:	68fa      	ldr	r2, [r7, #12]
 8012bce:	f248 0314 	movw	r3, #32788	; 0x8014
 8012bd2:	4413      	add	r3, r2
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	68f9      	ldr	r1, [r7, #12]
 8012bd8:	f248 0334 	movw	r3, #32820	; 0x8034
 8012bdc:	440b      	add	r3, r1
 8012bde:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8012be0:	68fa      	ldr	r2, [r7, #12]
 8012be2:	f248 0318 	movw	r3, #32792	; 0x8018
 8012be6:	4413      	add	r3, r2
 8012be8:	681a      	ldr	r2, [r3, #0]
 8012bea:	68f9      	ldr	r1, [r7, #12]
 8012bec:	f248 0338 	movw	r3, #32824	; 0x8038
 8012bf0:	440b      	add	r3, r1
 8012bf2:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012bf4:	2101      	movs	r1, #1
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f005 fba8 	bl	801834c <USBD_LL_GetRxDataSize>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b1f      	cmp	r3, #31
 8012c00:	d11c      	bne.n	8012c3c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012c02:	68fa      	ldr	r2, [r7, #12]
 8012c04:	f248 0310 	movw	r3, #32784	; 0x8010
 8012c08:	4413      	add	r3, r2
 8012c0a:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012c0c:	4a38      	ldr	r2, [pc, #224]	; (8012cf0 <MSC_BOT_CBW_Decode+0x134>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d114      	bne.n	8012c3c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c12:	68fa      	ldr	r2, [r7, #12]
 8012c14:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c18:	4413      	add	r3, r2
 8012c1a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d80d      	bhi.n	8012c3c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c20:	68fa      	ldr	r2, [r7, #12]
 8012c22:	f248 031e 	movw	r3, #32798	; 0x801e
 8012c26:	4413      	add	r3, r2
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d006      	beq.n	8012c3c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8012c2e:	68fa      	ldr	r2, [r7, #12]
 8012c30:	f248 031e 	movw	r3, #32798	; 0x801e
 8012c34:	4413      	add	r3, r2
 8012c36:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012c38:	2b10      	cmp	r3, #16
 8012c3a:	d910      	bls.n	8012c5e <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012c3c:	68fa      	ldr	r2, [r7, #12]
 8012c3e:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c42:	4413      	add	r3, r2
 8012c44:	7819      	ldrb	r1, [r3, #0]
 8012c46:	2320      	movs	r3, #32
 8012c48:	2205      	movs	r2, #5
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f000 fd36 	bl	80136bc <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2202      	movs	r2, #2
 8012c54:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 f8b2 	bl	8012dc0 <MSC_BOT_Abort>
 8012c5c:	e044      	b.n	8012ce8 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012c5e:	68fa      	ldr	r2, [r7, #12]
 8012c60:	f248 031d 	movw	r3, #32797	; 0x801d
 8012c64:	4413      	add	r3, r2
 8012c66:	7819      	ldrb	r1, [r3, #0]
 8012c68:	68fa      	ldr	r2, [r7, #12]
 8012c6a:	f248 031f 	movw	r3, #32799	; 0x801f
 8012c6e:	4413      	add	r3, r2
 8012c70:	461a      	mov	r2, r3
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f000 f8fe 	bl	8012e74 <SCSI_ProcessCmd>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	da0c      	bge.n	8012c98 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	7a1b      	ldrb	r3, [r3, #8]
 8012c82:	2b05      	cmp	r3, #5
 8012c84:	d104      	bne.n	8012c90 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012c86:	2101      	movs	r1, #1
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 f867 	bl	8012d5c <MSC_BOT_SendCSW>
 8012c8e:	e02b      	b.n	8012ce8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f000 f895 	bl	8012dc0 <MSC_BOT_Abort>
 8012c96:	e027      	b.n	8012ce8 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	7a1b      	ldrb	r3, [r3, #8]
 8012c9c:	2b02      	cmp	r3, #2
 8012c9e:	d022      	beq.n	8012ce6 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d01e      	beq.n	8012ce6 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012cac:	2b03      	cmp	r3, #3
 8012cae:	d01a      	beq.n	8012ce6 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d009      	beq.n	8012ccc <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f103 0110 	add.w	r1, r3, #16
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f000 f815 	bl	8012cf4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012cca:	e00d      	b.n	8012ce8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d104      	bne.n	8012cde <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f000 f840 	bl	8012d5c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012cdc:	e004      	b.n	8012ce8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 f86e 	bl	8012dc0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012ce4:	e000      	b.n	8012ce8 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8012ce6:	bf00      	nop
    }
  }
}
 8012ce8:	3710      	adds	r7, #16
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	43425355 	.word	0x43425355

08012cf4 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b086      	sub	sp, #24
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d06:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8012d08:	697a      	ldr	r2, [r7, #20]
 8012d0a:	f248 0318 	movw	r3, #32792	; 0x8018
 8012d0e:	4413      	add	r3, r2
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	4293      	cmp	r3, r2
 8012d16:	bf28      	it	cs
 8012d18:	4613      	movcs	r3, r2
 8012d1a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012d1c:	697a      	ldr	r2, [r7, #20]
 8012d1e:	f248 0338 	movw	r3, #32824	; 0x8038
 8012d22:	4413      	add	r3, r2
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	1ad2      	subs	r2, r2, r3
 8012d2a:	6979      	ldr	r1, [r7, #20]
 8012d2c:	f248 0338 	movw	r3, #32824	; 0x8038
 8012d30:	440b      	add	r3, r1
 8012d32:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012d34:	697a      	ldr	r2, [r7, #20]
 8012d36:	f248 033c 	movw	r3, #32828	; 0x803c
 8012d3a:	4413      	add	r3, r2
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2204      	movs	r2, #4
 8012d44:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	68ba      	ldr	r2, [r7, #8]
 8012d4a:	2181      	movs	r1, #129	; 0x81
 8012d4c:	68f8      	ldr	r0, [r7, #12]
 8012d4e:	f005 fabb 	bl	80182c8 <USBD_LL_Transmit>
}
 8012d52:	bf00      	nop
 8012d54:	3718      	adds	r7, #24
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
	...

08012d5c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b084      	sub	sp, #16
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	460b      	mov	r3, r1
 8012d66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d6e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012d70:	68fa      	ldr	r2, [r7, #12]
 8012d72:	f248 0330 	movw	r3, #32816	; 0x8030
 8012d76:	4413      	add	r3, r2
 8012d78:	4a10      	ldr	r2, [pc, #64]	; (8012dbc <MSC_BOT_SendCSW+0x60>)
 8012d7a:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	f248 033c 	movw	r3, #32828	; 0x803c
 8012d82:	4413      	add	r3, r2
 8012d84:	78fa      	ldrb	r2, [r7, #3]
 8012d86:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	f248 0230 	movw	r2, #32816	; 0x8030
 8012d94:	441a      	add	r2, r3
 8012d96:	230d      	movs	r3, #13
 8012d98:	2181      	movs	r1, #129	; 0x81
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f005 fa94 	bl	80182c8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f248 0210 	movw	r2, #32784	; 0x8010
 8012da6:	441a      	add	r2, r3
 8012da8:	231f      	movs	r3, #31
 8012daa:	2101      	movs	r1, #1
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f005 faac 	bl	801830a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8012db2:	bf00      	nop
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	53425355 	.word	0x53425355

08012dc0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b084      	sub	sp, #16
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012dce:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012dd0:	68fa      	ldr	r2, [r7, #12]
 8012dd2:	f248 031c 	movw	r3, #32796	; 0x801c
 8012dd6:	4413      	add	r3, r2
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d10e      	bne.n	8012dfc <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8012dde:	68fa      	ldr	r2, [r7, #12]
 8012de0:	f248 0318 	movw	r3, #32792	; 0x8018
 8012de4:	4413      	add	r3, r2
 8012de6:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d007      	beq.n	8012dfc <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d103      	bne.n	8012dfc <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012df4:	2101      	movs	r1, #1
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f005 f9dd 	bl	80181b6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012dfc:	2181      	movs	r1, #129	; 0x81
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f005 f9d9 	bl	80181b6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	7a5b      	ldrb	r3, [r3, #9]
 8012e08:	2b02      	cmp	r3, #2
 8012e0a:	d107      	bne.n	8012e1c <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012e0c:	2181      	movs	r1, #129	; 0x81
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f005 f9d1 	bl	80181b6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012e14:	2101      	movs	r1, #1
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f005 f9cd 	bl	80181b6 <USBD_LL_StallEP>
  }
}
 8012e1c:	bf00      	nop
 8012e1e:	3710      	adds	r7, #16
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e36:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	7a5b      	ldrb	r3, [r3, #9]
 8012e3c:	2b02      	cmp	r3, #2
 8012e3e:	d108      	bne.n	8012e52 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012e40:	2181      	movs	r1, #129	; 0x81
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f005 f9b7 	bl	80181b6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012e48:	2101      	movs	r1, #1
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f005 f9b3 	bl	80181b6 <USBD_LL_StallEP>
 8012e50:	e00d      	b.n	8012e6e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	da08      	bge.n	8012e6c <MSC_BOT_CplClrFeature+0x48>
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	7a5b      	ldrb	r3, [r3, #9]
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	d004      	beq.n	8012e6c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012e62:	2101      	movs	r1, #1
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7ff ff79 	bl	8012d5c <MSC_BOT_SendCSW>
 8012e6a:	e000      	b.n	8012e6e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8012e6c:	bf00      	nop
  }
}
 8012e6e:	3710      	adds	r7, #16
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}

08012e74 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b086      	sub	sp, #24
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	60f8      	str	r0, [r7, #12]
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	607a      	str	r2, [r7, #4]
 8012e80:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e88:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	2b25      	cmp	r3, #37	; 0x25
 8012e90:	d06e      	beq.n	8012f70 <SCSI_ProcessCmd+0xfc>
 8012e92:	2b25      	cmp	r3, #37	; 0x25
 8012e94:	dc11      	bgt.n	8012eba <SCSI_ProcessCmd+0x46>
 8012e96:	2b1a      	cmp	r3, #26
 8012e98:	d04f      	beq.n	8012f3a <SCSI_ProcessCmd+0xc6>
 8012e9a:	2b1a      	cmp	r3, #26
 8012e9c:	dc06      	bgt.n	8012eac <SCSI_ProcessCmd+0x38>
 8012e9e:	2b03      	cmp	r3, #3
 8012ea0:	d027      	beq.n	8012ef2 <SCSI_ProcessCmd+0x7e>
 8012ea2:	2b12      	cmp	r3, #18
 8012ea4:	d02e      	beq.n	8012f04 <SCSI_ProcessCmd+0x90>
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d01a      	beq.n	8012ee0 <SCSI_ProcessCmd+0x6c>
 8012eaa:	e0a0      	b.n	8012fee <SCSI_ProcessCmd+0x17a>
 8012eac:	2b1e      	cmp	r3, #30
 8012eae:	d03b      	beq.n	8012f28 <SCSI_ProcessCmd+0xb4>
 8012eb0:	2b23      	cmp	r3, #35	; 0x23
 8012eb2:	d054      	beq.n	8012f5e <SCSI_ProcessCmd+0xea>
 8012eb4:	2b1b      	cmp	r3, #27
 8012eb6:	d02e      	beq.n	8012f16 <SCSI_ProcessCmd+0xa2>
 8012eb8:	e099      	b.n	8012fee <SCSI_ProcessCmd+0x17a>
 8012eba:	2b5a      	cmp	r3, #90	; 0x5a
 8012ebc:	d046      	beq.n	8012f4c <SCSI_ProcessCmd+0xd8>
 8012ebe:	2b5a      	cmp	r3, #90	; 0x5a
 8012ec0:	dc07      	bgt.n	8012ed2 <SCSI_ProcessCmd+0x5e>
 8012ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8012ec4:	d078      	beq.n	8012fb8 <SCSI_ProcessCmd+0x144>
 8012ec6:	2b2f      	cmp	r3, #47	; 0x2f
 8012ec8:	f000 8088 	beq.w	8012fdc <SCSI_ProcessCmd+0x168>
 8012ecc:	2b28      	cmp	r3, #40	; 0x28
 8012ece:	d061      	beq.n	8012f94 <SCSI_ProcessCmd+0x120>
 8012ed0:	e08d      	b.n	8012fee <SCSI_ProcessCmd+0x17a>
 8012ed2:	2ba8      	cmp	r3, #168	; 0xa8
 8012ed4:	d067      	beq.n	8012fa6 <SCSI_ProcessCmd+0x132>
 8012ed6:	2baa      	cmp	r3, #170	; 0xaa
 8012ed8:	d077      	beq.n	8012fca <SCSI_ProcessCmd+0x156>
 8012eda:	2b9e      	cmp	r3, #158	; 0x9e
 8012edc:	d051      	beq.n	8012f82 <SCSI_ProcessCmd+0x10e>
 8012ede:	e086      	b.n	8012fee <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8012ee0:	7afb      	ldrb	r3, [r7, #11]
 8012ee2:	687a      	ldr	r2, [r7, #4]
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	68f8      	ldr	r0, [r7, #12]
 8012ee8:	f000 f893 	bl	8013012 <SCSI_TestUnitReady>
 8012eec:	4603      	mov	r3, r0
 8012eee:	75fb      	strb	r3, [r7, #23]
    break;
 8012ef0:	e089      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8012ef2:	7afb      	ldrb	r3, [r7, #11]
 8012ef4:	687a      	ldr	r2, [r7, #4]
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	68f8      	ldr	r0, [r7, #12]
 8012efa:	f000 fb47 	bl	801358c <SCSI_RequestSense>
 8012efe:	4603      	mov	r3, r0
 8012f00:	75fb      	strb	r3, [r7, #23]
    break;
 8012f02:	e080      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8012f04:	7afb      	ldrb	r3, [r7, #11]
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	4619      	mov	r1, r3
 8012f0a:	68f8      	ldr	r0, [r7, #12]
 8012f0c:	f000 f8d2 	bl	80130b4 <SCSI_Inquiry>
 8012f10:	4603      	mov	r3, r0
 8012f12:	75fb      	strb	r3, [r7, #23]
    break;
 8012f14:	e077      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8012f16:	7afb      	ldrb	r3, [r7, #11]
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	68f8      	ldr	r0, [r7, #12]
 8012f1e:	f000 fc27 	bl	8013770 <SCSI_StartStopUnit>
 8012f22:	4603      	mov	r3, r0
 8012f24:	75fb      	strb	r3, [r7, #23]
    break;
 8012f26:	e06e      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8012f28:	7afb      	ldrb	r3, [r7, #11]
 8012f2a:	687a      	ldr	r2, [r7, #4]
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	68f8      	ldr	r0, [r7, #12]
 8012f30:	f000 fc71 	bl	8013816 <SCSI_AllowPreventRemovable>
 8012f34:	4603      	mov	r3, r0
 8012f36:	75fb      	strb	r3, [r7, #23]
    break;
 8012f38:	e065      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8012f3a:	7afb      	ldrb	r3, [r7, #11]
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	4619      	mov	r1, r3
 8012f40:	68f8      	ldr	r0, [r7, #12]
 8012f42:	f000 fad7 	bl	80134f4 <SCSI_ModeSense6>
 8012f46:	4603      	mov	r3, r0
 8012f48:	75fb      	strb	r3, [r7, #23]
    break;
 8012f4a:	e05c      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8012f4c:	7afb      	ldrb	r3, [r7, #11]
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	4619      	mov	r1, r3
 8012f52:	68f8      	ldr	r0, [r7, #12]
 8012f54:	f000 faf4 	bl	8013540 <SCSI_ModeSense10>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	75fb      	strb	r3, [r7, #23]
    break;
 8012f5c:	e053      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012f5e:	7afb      	ldrb	r3, [r7, #11]
 8012f60:	687a      	ldr	r2, [r7, #4]
 8012f62:	4619      	mov	r1, r3
 8012f64:	68f8      	ldr	r0, [r7, #12]
 8012f66:	f000 fa56 	bl	8013416 <SCSI_ReadFormatCapacity>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	75fb      	strb	r3, [r7, #23]
    break;
 8012f6e:	e04a      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012f70:	7afb      	ldrb	r3, [r7, #11]
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	4619      	mov	r1, r3
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	f000 f910 	bl	801319c <SCSI_ReadCapacity10>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	75fb      	strb	r3, [r7, #23]
    break;
 8012f80:	e041      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012f82:	7afb      	ldrb	r3, [r7, #11]
 8012f84:	687a      	ldr	r2, [r7, #4]
 8012f86:	4619      	mov	r1, r3
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	f000 f98b 	bl	80132a4 <SCSI_ReadCapacity16>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	75fb      	strb	r3, [r7, #23]
    break;
 8012f92:	e038      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8012f94:	7afb      	ldrb	r3, [r7, #11]
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	4619      	mov	r1, r3
 8012f9a:	68f8      	ldr	r0, [r7, #12]
 8012f9c:	f000 fc62 	bl	8013864 <SCSI_Read10>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	75fb      	strb	r3, [r7, #23]
    break;
 8012fa4:	e02f      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8012fa6:	7afb      	ldrb	r3, [r7, #11]
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	4619      	mov	r1, r3
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f000 fd0b 	bl	80139c8 <SCSI_Read12>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	75fb      	strb	r3, [r7, #23]
    break;
 8012fb6:	e026      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8012fb8:	7afb      	ldrb	r3, [r7, #11]
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	68f8      	ldr	r0, [r7, #12]
 8012fc0:	f000 fdbe 	bl	8013b40 <SCSI_Write10>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	75fb      	strb	r3, [r7, #23]
    break;
 8012fc8:	e01d      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8012fca:	7afb      	ldrb	r3, [r7, #11]
 8012fcc:	687a      	ldr	r2, [r7, #4]
 8012fce:	4619      	mov	r1, r3
 8012fd0:	68f8      	ldr	r0, [r7, #12]
 8012fd2:	f000 fe8d 	bl	8013cf0 <SCSI_Write12>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	75fb      	strb	r3, [r7, #23]
    break;
 8012fda:	e014      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8012fdc:	7afb      	ldrb	r3, [r7, #11]
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	68f8      	ldr	r0, [r7, #12]
 8012fe4:	f000 ff6c 	bl	8013ec0 <SCSI_Verify10>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	75fb      	strb	r3, [r7, #23]
    break;
 8012fec:	e00b      	b.n	8013006 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012fee:	7af9      	ldrb	r1, [r7, #11]
 8012ff0:	2320      	movs	r3, #32
 8012ff2:	2205      	movs	r2, #5
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f000 fb61 	bl	80136bc <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	2202      	movs	r2, #2
 8012ffe:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8013000:	23ff      	movs	r3, #255	; 0xff
 8013002:	75fb      	strb	r3, [r7, #23]
    break;
 8013004:	bf00      	nop
  }

  return ret;
 8013006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801300a:	4618      	mov	r0, r3
 801300c:	3718      	adds	r7, #24
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013012:	b580      	push	{r7, lr}
 8013014:	b086      	sub	sp, #24
 8013016:	af00      	add	r7, sp, #0
 8013018:	60f8      	str	r0, [r7, #12]
 801301a:	460b      	mov	r3, r1
 801301c:	607a      	str	r2, [r7, #4]
 801301e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013026:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8013028:	697a      	ldr	r2, [r7, #20]
 801302a:	f248 0318 	movw	r3, #32792	; 0x8018
 801302e:	4413      	add	r3, r2
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d00c      	beq.n	8013050 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013036:	697a      	ldr	r2, [r7, #20]
 8013038:	f248 031d 	movw	r3, #32797	; 0x801d
 801303c:	4413      	add	r3, r2
 801303e:	7819      	ldrb	r1, [r3, #0]
 8013040:	2320      	movs	r3, #32
 8013042:	2205      	movs	r2, #5
 8013044:	68f8      	ldr	r0, [r7, #12]
 8013046:	f000 fb39 	bl	80136bc <SCSI_SenseCode>

    return -1;
 801304a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801304e:	e02c      	b.n	80130aa <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013050:	697a      	ldr	r2, [r7, #20]
 8013052:	f248 0362 	movw	r3, #32866	; 0x8062
 8013056:	4413      	add	r3, r2
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	2b02      	cmp	r3, #2
 801305c:	d10b      	bne.n	8013076 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801305e:	7af9      	ldrb	r1, [r7, #11]
 8013060:	233a      	movs	r3, #58	; 0x3a
 8013062:	2202      	movs	r2, #2
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f000 fb29 	bl	80136bc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	2205      	movs	r2, #5
 801306e:	721a      	strb	r2, [r3, #8]
    return -1;
 8013070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013074:	e019      	b.n	80130aa <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801307c:	689b      	ldr	r3, [r3, #8]
 801307e:	7afa      	ldrb	r2, [r7, #11]
 8013080:	4610      	mov	r0, r2
 8013082:	4798      	blx	r3
 8013084:	4603      	mov	r3, r0
 8013086:	2b00      	cmp	r3, #0
 8013088:	d00b      	beq.n	80130a2 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801308a:	7af9      	ldrb	r1, [r7, #11]
 801308c:	233a      	movs	r3, #58	; 0x3a
 801308e:	2202      	movs	r2, #2
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f000 fb13 	bl	80136bc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2205      	movs	r2, #5
 801309a:	721a      	strb	r2, [r3, #8]

    return -1;
 801309c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130a0:	e003      	b.n	80130aa <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	2200      	movs	r2, #0
 80130a6:	60da      	str	r2, [r3, #12]

  return 0;
 80130a8:	2300      	movs	r3, #0
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3718      	adds	r7, #24
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
	...

080130b4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b088      	sub	sp, #32
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	460b      	mov	r3, r1
 80130be:	607a      	str	r2, [r7, #4]
 80130c0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130c8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80130ca:	69ba      	ldr	r2, [r7, #24]
 80130cc:	f248 0318 	movw	r3, #32792	; 0x8018
 80130d0:	4413      	add	r3, r2
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d10c      	bne.n	80130f2 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80130d8:	69ba      	ldr	r2, [r7, #24]
 80130da:	f248 031d 	movw	r3, #32797	; 0x801d
 80130de:	4413      	add	r3, r2
 80130e0:	7819      	ldrb	r1, [r3, #0]
 80130e2:	2320      	movs	r3, #32
 80130e4:	2205      	movs	r2, #5
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f000 fae8 	bl	80136bc <SCSI_SenseCode>
    return -1;
 80130ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130f0:	e04c      	b.n	801318c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	3301      	adds	r3, #1
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	f003 0301 	and.w	r3, r3, #1
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d022      	beq.n	8013146 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	3302      	adds	r3, #2
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d105      	bne.n	8013116 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801310a:	2206      	movs	r2, #6
 801310c:	4921      	ldr	r1, [pc, #132]	; (8013194 <SCSI_Inquiry+0xe0>)
 801310e:	69b8      	ldr	r0, [r7, #24]
 8013110:	f001 f862 	bl	80141d8 <SCSI_UpdateBotData>
 8013114:	e039      	b.n	801318a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	3302      	adds	r3, #2
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	2b80      	cmp	r3, #128	; 0x80
 801311e:	d105      	bne.n	801312c <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8013120:	2208      	movs	r2, #8
 8013122:	491d      	ldr	r1, [pc, #116]	; (8013198 <SCSI_Inquiry+0xe4>)
 8013124:	69b8      	ldr	r0, [r7, #24]
 8013126:	f001 f857 	bl	80141d8 <SCSI_UpdateBotData>
 801312a:	e02e      	b.n	801318a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801312c:	69ba      	ldr	r2, [r7, #24]
 801312e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013132:	4413      	add	r3, r2
 8013134:	7819      	ldrb	r1, [r3, #0]
 8013136:	2324      	movs	r3, #36	; 0x24
 8013138:	2205      	movs	r2, #5
 801313a:	68f8      	ldr	r0, [r7, #12]
 801313c:	f000 fabe 	bl	80136bc <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8013140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013144:	e022      	b.n	801318c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801314c:	69d9      	ldr	r1, [r3, #28]
 801314e:	7afa      	ldrb	r2, [r7, #11]
 8013150:	4613      	mov	r3, r2
 8013152:	00db      	lsls	r3, r3, #3
 8013154:	4413      	add	r3, r2
 8013156:	009b      	lsls	r3, r3, #2
 8013158:	440b      	add	r3, r1
 801315a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	3304      	adds	r3, #4
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	b29b      	uxth	r3, r3
 8013164:	3305      	adds	r3, #5
 8013166:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	3304      	adds	r3, #4
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	b29b      	uxth	r3, r3
 8013170:	8bfa      	ldrh	r2, [r7, #30]
 8013172:	429a      	cmp	r2, r3
 8013174:	d303      	bcc.n	801317e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	3304      	adds	r3, #4
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801317e:	8bfb      	ldrh	r3, [r7, #30]
 8013180:	461a      	mov	r2, r3
 8013182:	6979      	ldr	r1, [r7, #20]
 8013184:	69b8      	ldr	r0, [r7, #24]
 8013186:	f001 f827 	bl	80141d8 <SCSI_UpdateBotData>
  }

  return 0;
 801318a:	2300      	movs	r3, #0
}
 801318c:	4618      	mov	r0, r3
 801318e:	3720      	adds	r7, #32
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}
 8013194:	240000c0 	.word	0x240000c0
 8013198:	240000c8 	.word	0x240000c8

0801319c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801319c:	b590      	push	{r4, r7, lr}
 801319e:	b087      	sub	sp, #28
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	460b      	mov	r3, r1
 80131a6:	607a      	str	r2, [r7, #4]
 80131a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80131b0:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80131b8:	685c      	ldr	r4, [r3, #4]
 80131ba:	697a      	ldr	r2, [r7, #20]
 80131bc:	f248 0368 	movw	r3, #32872	; 0x8068
 80131c0:	4413      	add	r3, r2
 80131c2:	6979      	ldr	r1, [r7, #20]
 80131c4:	f248 0264 	movw	r2, #32868	; 0x8064
 80131c8:	440a      	add	r2, r1
 80131ca:	7af8      	ldrb	r0, [r7, #11]
 80131cc:	4619      	mov	r1, r3
 80131ce:	47a0      	blx	r4
 80131d0:	4603      	mov	r3, r0
 80131d2:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80131d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d106      	bne.n	80131ea <SCSI_ReadCapacity10+0x4e>
 80131dc:	697a      	ldr	r2, [r7, #20]
 80131de:	f248 0362 	movw	r3, #32866	; 0x8062
 80131e2:	4413      	add	r3, r2
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	2b02      	cmp	r3, #2
 80131e8:	d108      	bne.n	80131fc <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131ea:	7af9      	ldrb	r1, [r7, #11]
 80131ec:	233a      	movs	r3, #58	; 0x3a
 80131ee:	2202      	movs	r2, #2
 80131f0:	68f8      	ldr	r0, [r7, #12]
 80131f2:	f000 fa63 	bl	80136bc <SCSI_SenseCode>
    return -1;
 80131f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131fa:	e04f      	b.n	801329c <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80131fc:	697a      	ldr	r2, [r7, #20]
 80131fe:	f248 0368 	movw	r3, #32872	; 0x8068
 8013202:	4413      	add	r3, r2
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	3b01      	subs	r3, #1
 8013208:	0e1b      	lsrs	r3, r3, #24
 801320a:	b2da      	uxtb	r2, r3
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8013210:	697a      	ldr	r2, [r7, #20]
 8013212:	f248 0368 	movw	r3, #32872	; 0x8068
 8013216:	4413      	add	r3, r2
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	3b01      	subs	r3, #1
 801321c:	0c1b      	lsrs	r3, r3, #16
 801321e:	b2da      	uxtb	r2, r3
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013224:	697a      	ldr	r2, [r7, #20]
 8013226:	f248 0368 	movw	r3, #32872	; 0x8068
 801322a:	4413      	add	r3, r2
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	3b01      	subs	r3, #1
 8013230:	0a1b      	lsrs	r3, r3, #8
 8013232:	b2da      	uxtb	r2, r3
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8013238:	697a      	ldr	r2, [r7, #20]
 801323a:	f248 0368 	movw	r3, #32872	; 0x8068
 801323e:	4413      	add	r3, r2
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	b2db      	uxtb	r3, r3
 8013244:	3b01      	subs	r3, #1
 8013246:	b2da      	uxtb	r2, r3
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801324c:	697a      	ldr	r2, [r7, #20]
 801324e:	f248 0364 	movw	r3, #32868	; 0x8064
 8013252:	4413      	add	r3, r2
 8013254:	881b      	ldrh	r3, [r3, #0]
 8013256:	161b      	asrs	r3, r3, #24
 8013258:	b2da      	uxtb	r2, r3
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801325e:	697a      	ldr	r2, [r7, #20]
 8013260:	f248 0364 	movw	r3, #32868	; 0x8064
 8013264:	4413      	add	r3, r2
 8013266:	881b      	ldrh	r3, [r3, #0]
 8013268:	141b      	asrs	r3, r3, #16
 801326a:	b2da      	uxtb	r2, r3
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8013270:	697a      	ldr	r2, [r7, #20]
 8013272:	f248 0364 	movw	r3, #32868	; 0x8064
 8013276:	4413      	add	r3, r2
 8013278:	881b      	ldrh	r3, [r3, #0]
 801327a:	0a1b      	lsrs	r3, r3, #8
 801327c:	b29b      	uxth	r3, r3
 801327e:	b2da      	uxtb	r2, r3
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8013284:	697a      	ldr	r2, [r7, #20]
 8013286:	f248 0364 	movw	r3, #32868	; 0x8064
 801328a:	4413      	add	r3, r2
 801328c:	881b      	ldrh	r3, [r3, #0]
 801328e:	b2da      	uxtb	r2, r3
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	2208      	movs	r2, #8
 8013298:	60da      	str	r2, [r3, #12]

  return 0;
 801329a:	2300      	movs	r3, #0

}
 801329c:	4618      	mov	r0, r3
 801329e:	371c      	adds	r7, #28
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd90      	pop	{r4, r7, pc}

080132a4 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80132a4:	b590      	push	{r4, r7, lr}
 80132a6:	b089      	sub	sp, #36	; 0x24
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	460b      	mov	r3, r1
 80132ae:	607a      	str	r2, [r7, #4]
 80132b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132b8:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132c0:	685c      	ldr	r4, [r3, #4]
 80132c2:	69ba      	ldr	r2, [r7, #24]
 80132c4:	f248 0368 	movw	r3, #32872	; 0x8068
 80132c8:	4413      	add	r3, r2
 80132ca:	69b9      	ldr	r1, [r7, #24]
 80132cc:	f248 0264 	movw	r2, #32868	; 0x8064
 80132d0:	440a      	add	r2, r1
 80132d2:	7af8      	ldrb	r0, [r7, #11]
 80132d4:	4619      	mov	r1, r3
 80132d6:	47a0      	blx	r4
 80132d8:	4603      	mov	r3, r0
 80132da:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80132dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d106      	bne.n	80132f2 <SCSI_ReadCapacity16+0x4e>
 80132e4:	69ba      	ldr	r2, [r7, #24]
 80132e6:	f248 0362 	movw	r3, #32866	; 0x8062
 80132ea:	4413      	add	r3, r2
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	2b02      	cmp	r3, #2
 80132f0:	d108      	bne.n	8013304 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80132f2:	7af9      	ldrb	r1, [r7, #11]
 80132f4:	233a      	movs	r3, #58	; 0x3a
 80132f6:	2202      	movs	r2, #2
 80132f8:	68f8      	ldr	r0, [r7, #12]
 80132fa:	f000 f9df 	bl	80136bc <SCSI_SenseCode>
    return -1;
 80132fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013302:	e084      	b.n	801340e <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	330a      	adds	r3, #10
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	330b      	adds	r3, #11
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013314:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	330c      	adds	r3, #12
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801331e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	320d      	adds	r2, #13
 8013324:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8013326:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801332c:	2300      	movs	r3, #0
 801332e:	77fb      	strb	r3, [r7, #31]
 8013330:	e007      	b.n	8013342 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8013332:	7ffb      	ldrb	r3, [r7, #31]
 8013334:	69ba      	ldr	r2, [r7, #24]
 8013336:	4413      	add	r3, r2
 8013338:	2200      	movs	r2, #0
 801333a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801333c:	7ffb      	ldrb	r3, [r7, #31]
 801333e:	3301      	adds	r3, #1
 8013340:	77fb      	strb	r3, [r7, #31]
 8013342:	7ffa      	ldrb	r2, [r7, #31]
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	429a      	cmp	r2, r3
 801334a:	d3f2      	bcc.n	8013332 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801334c:	69ba      	ldr	r2, [r7, #24]
 801334e:	f248 0368 	movw	r3, #32872	; 0x8068
 8013352:	4413      	add	r3, r2
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	3b01      	subs	r3, #1
 8013358:	0e1b      	lsrs	r3, r3, #24
 801335a:	b2da      	uxtb	r2, r3
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8013360:	69ba      	ldr	r2, [r7, #24]
 8013362:	f248 0368 	movw	r3, #32872	; 0x8068
 8013366:	4413      	add	r3, r2
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	3b01      	subs	r3, #1
 801336c:	0c1b      	lsrs	r3, r3, #16
 801336e:	b2da      	uxtb	r2, r3
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013374:	69ba      	ldr	r2, [r7, #24]
 8013376:	f248 0368 	movw	r3, #32872	; 0x8068
 801337a:	4413      	add	r3, r2
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	3b01      	subs	r3, #1
 8013380:	0a1b      	lsrs	r3, r3, #8
 8013382:	b2da      	uxtb	r2, r3
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8013388:	69ba      	ldr	r2, [r7, #24]
 801338a:	f248 0368 	movw	r3, #32872	; 0x8068
 801338e:	4413      	add	r3, r2
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	b2db      	uxtb	r3, r3
 8013394:	3b01      	subs	r3, #1
 8013396:	b2da      	uxtb	r2, r3
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801339c:	69ba      	ldr	r2, [r7, #24]
 801339e:	f248 0364 	movw	r3, #32868	; 0x8064
 80133a2:	4413      	add	r3, r2
 80133a4:	881b      	ldrh	r3, [r3, #0]
 80133a6:	161b      	asrs	r3, r3, #24
 80133a8:	b2da      	uxtb	r2, r3
 80133aa:	69bb      	ldr	r3, [r7, #24]
 80133ac:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80133ae:	69ba      	ldr	r2, [r7, #24]
 80133b0:	f248 0364 	movw	r3, #32868	; 0x8064
 80133b4:	4413      	add	r3, r2
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	141b      	asrs	r3, r3, #16
 80133ba:	b2da      	uxtb	r2, r3
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80133c0:	69ba      	ldr	r2, [r7, #24]
 80133c2:	f248 0364 	movw	r3, #32868	; 0x8064
 80133c6:	4413      	add	r3, r2
 80133c8:	881b      	ldrh	r3, [r3, #0]
 80133ca:	0a1b      	lsrs	r3, r3, #8
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	b2da      	uxtb	r2, r3
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80133d4:	69ba      	ldr	r2, [r7, #24]
 80133d6:	f248 0364 	movw	r3, #32868	; 0x8064
 80133da:	4413      	add	r3, r2
 80133dc:	881b      	ldrh	r3, [r3, #0]
 80133de:	b2da      	uxtb	r2, r3
 80133e0:	69bb      	ldr	r3, [r7, #24]
 80133e2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	330a      	adds	r3, #10
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	330b      	adds	r3, #11
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80133f4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	330c      	adds	r3, #12
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80133fe:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	320d      	adds	r2, #13
 8013404:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8013406:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8013408:	69bb      	ldr	r3, [r7, #24]
 801340a:	60da      	str	r2, [r3, #12]

  return 0;
 801340c:	2300      	movs	r3, #0
}
 801340e:	4618      	mov	r0, r3
 8013410:	3724      	adds	r7, #36	; 0x24
 8013412:	46bd      	mov	sp, r7
 8013414:	bd90      	pop	{r4, r7, pc}

08013416 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013416:	b580      	push	{r7, lr}
 8013418:	b088      	sub	sp, #32
 801341a:	af00      	add	r7, sp, #0
 801341c:	60f8      	str	r0, [r7, #12]
 801341e:	460b      	mov	r3, r1
 8013420:	607a      	str	r2, [r7, #4]
 8013422:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801342a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	f107 0214 	add.w	r2, r7, #20
 8013438:	f107 0110 	add.w	r1, r7, #16
 801343c:	7af8      	ldrb	r0, [r7, #11]
 801343e:	4798      	blx	r3
 8013440:	4603      	mov	r3, r0
 8013442:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8013444:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d106      	bne.n	801345a <SCSI_ReadFormatCapacity+0x44>
 801344c:	69ba      	ldr	r2, [r7, #24]
 801344e:	f248 0362 	movw	r3, #32866	; 0x8062
 8013452:	4413      	add	r3, r2
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	2b02      	cmp	r3, #2
 8013458:	d108      	bne.n	801346c <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801345a:	7af9      	ldrb	r1, [r7, #11]
 801345c:	233a      	movs	r3, #58	; 0x3a
 801345e:	2202      	movs	r2, #2
 8013460:	68f8      	ldr	r0, [r7, #12]
 8013462:	f000 f92b 	bl	80136bc <SCSI_SenseCode>
    return -1;
 8013466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801346a:	e03e      	b.n	80134ea <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 801346c:	2300      	movs	r3, #0
 801346e:	83fb      	strh	r3, [r7, #30]
 8013470:	e007      	b.n	8013482 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8013472:	8bfb      	ldrh	r3, [r7, #30]
 8013474:	69ba      	ldr	r2, [r7, #24]
 8013476:	4413      	add	r3, r2
 8013478:	2200      	movs	r2, #0
 801347a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801347c:	8bfb      	ldrh	r3, [r7, #30]
 801347e:	3301      	adds	r3, #1
 8013480:	83fb      	strh	r3, [r7, #30]
 8013482:	8bfb      	ldrh	r3, [r7, #30]
 8013484:	2b0b      	cmp	r3, #11
 8013486:	d9f4      	bls.n	8013472 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8013488:	69bb      	ldr	r3, [r7, #24]
 801348a:	2208      	movs	r2, #8
 801348c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	3b01      	subs	r3, #1
 8013492:	0e1b      	lsrs	r3, r3, #24
 8013494:	b2da      	uxtb	r2, r3
 8013496:	69bb      	ldr	r3, [r7, #24]
 8013498:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	3b01      	subs	r3, #1
 801349e:	0c1b      	lsrs	r3, r3, #16
 80134a0:	b2da      	uxtb	r2, r3
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	3b01      	subs	r3, #1
 80134aa:	0a1b      	lsrs	r3, r3, #8
 80134ac:	b2da      	uxtb	r2, r3
 80134ae:	69bb      	ldr	r3, [r7, #24]
 80134b0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	b2db      	uxtb	r3, r3
 80134b6:	3b01      	subs	r3, #1
 80134b8:	b2da      	uxtb	r2, r3
 80134ba:	69bb      	ldr	r3, [r7, #24]
 80134bc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80134be:	69bb      	ldr	r3, [r7, #24]
 80134c0:	2202      	movs	r2, #2
 80134c2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80134c4:	8abb      	ldrh	r3, [r7, #20]
 80134c6:	141b      	asrs	r3, r3, #16
 80134c8:	b2da      	uxtb	r2, r3
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80134ce:	8abb      	ldrh	r3, [r7, #20]
 80134d0:	0a1b      	lsrs	r3, r3, #8
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	b2da      	uxtb	r2, r3
 80134d6:	69bb      	ldr	r3, [r7, #24]
 80134d8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80134da:	8abb      	ldrh	r3, [r7, #20]
 80134dc:	b2da      	uxtb	r2, r3
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	220c      	movs	r2, #12
 80134e6:	60da      	str	r2, [r3, #12]

  return 0;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3720      	adds	r7, #32
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
	...

080134f4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b086      	sub	sp, #24
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	460b      	mov	r3, r1
 80134fe:	607a      	str	r2, [r7, #4]
 8013500:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013508:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801350a:	2317      	movs	r3, #23
 801350c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	3304      	adds	r3, #4
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	b29b      	uxth	r3, r3
 8013516:	8afa      	ldrh	r2, [r7, #22]
 8013518:	429a      	cmp	r2, r3
 801351a:	d303      	bcc.n	8013524 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	3304      	adds	r3, #4
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8013524:	8afb      	ldrh	r3, [r7, #22]
 8013526:	461a      	mov	r2, r3
 8013528:	4904      	ldr	r1, [pc, #16]	; (801353c <SCSI_ModeSense6+0x48>)
 801352a:	6938      	ldr	r0, [r7, #16]
 801352c:	f000 fe54 	bl	80141d8 <SCSI_UpdateBotData>

  return 0;
 8013530:	2300      	movs	r3, #0
}
 8013532:	4618      	mov	r0, r3
 8013534:	3718      	adds	r7, #24
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	240000d0 	.word	0x240000d0

08013540 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b086      	sub	sp, #24
 8013544:	af00      	add	r7, sp, #0
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	460b      	mov	r3, r1
 801354a:	607a      	str	r2, [r7, #4]
 801354c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013554:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8013556:	231b      	movs	r3, #27
 8013558:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	3308      	adds	r3, #8
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	b29b      	uxth	r3, r3
 8013562:	8afa      	ldrh	r2, [r7, #22]
 8013564:	429a      	cmp	r2, r3
 8013566:	d303      	bcc.n	8013570 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	3308      	adds	r3, #8
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8013570:	8afb      	ldrh	r3, [r7, #22]
 8013572:	461a      	mov	r2, r3
 8013574:	4904      	ldr	r1, [pc, #16]	; (8013588 <SCSI_ModeSense10+0x48>)
 8013576:	6938      	ldr	r0, [r7, #16]
 8013578:	f000 fe2e 	bl	80141d8 <SCSI_UpdateBotData>

  return 0;
 801357c:	2300      	movs	r3, #0
}
 801357e:	4618      	mov	r0, r3
 8013580:	3718      	adds	r7, #24
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	240000e8 	.word	0x240000e8

0801358c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b086      	sub	sp, #24
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	460b      	mov	r3, r1
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80135a0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80135a2:	693a      	ldr	r2, [r7, #16]
 80135a4:	f248 0318 	movw	r3, #32792	; 0x8018
 80135a8:	4413      	add	r3, r2
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d10c      	bne.n	80135ca <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80135b0:	693a      	ldr	r2, [r7, #16]
 80135b2:	f248 031d 	movw	r3, #32797	; 0x801d
 80135b6:	4413      	add	r3, r2
 80135b8:	7819      	ldrb	r1, [r3, #0]
 80135ba:	2320      	movs	r3, #32
 80135bc:	2205      	movs	r2, #5
 80135be:	68f8      	ldr	r0, [r7, #12]
 80135c0:	f000 f87c 	bl	80136bc <SCSI_SenseCode>
    return -1;
 80135c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135c8:	e074      	b.n	80136b4 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80135ca:	2300      	movs	r3, #0
 80135cc:	75fb      	strb	r3, [r7, #23]
 80135ce:	e007      	b.n	80135e0 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 80135d0:	7dfb      	ldrb	r3, [r7, #23]
 80135d2:	693a      	ldr	r2, [r7, #16]
 80135d4:	4413      	add	r3, r2
 80135d6:	2200      	movs	r2, #0
 80135d8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80135da:	7dfb      	ldrb	r3, [r7, #23]
 80135dc:	3301      	adds	r3, #1
 80135de:	75fb      	strb	r3, [r7, #23]
 80135e0:	7dfb      	ldrb	r3, [r7, #23]
 80135e2:	2b11      	cmp	r3, #17
 80135e4:	d9f4      	bls.n	80135d0 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	2270      	movs	r2, #112	; 0x70
 80135ea:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	220c      	movs	r2, #12
 80135f0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80135f2:	693a      	ldr	r2, [r7, #16]
 80135f4:	f248 0360 	movw	r3, #32864	; 0x8060
 80135f8:	4413      	add	r3, r2
 80135fa:	781a      	ldrb	r2, [r3, #0]
 80135fc:	6939      	ldr	r1, [r7, #16]
 80135fe:	f248 0361 	movw	r3, #32865	; 0x8061
 8013602:	440b      	add	r3, r1
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	429a      	cmp	r2, r3
 8013608:	d045      	beq.n	8013696 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801360a:	693a      	ldr	r2, [r7, #16]
 801360c:	f248 0360 	movw	r3, #32864	; 0x8060
 8013610:	4413      	add	r3, r2
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	4619      	mov	r1, r3
 8013616:	693a      	ldr	r2, [r7, #16]
 8013618:	f241 0308 	movw	r3, #4104	; 0x1008
 801361c:	440b      	add	r3, r1
 801361e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8013626:	693a      	ldr	r2, [r7, #16]
 8013628:	f248 0360 	movw	r3, #32864	; 0x8060
 801362c:	4413      	add	r3, r2
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	4619      	mov	r1, r3
 8013632:	693a      	ldr	r2, [r7, #16]
 8013634:	f241 0308 	movw	r3, #4104	; 0x1008
 8013638:	440b      	add	r3, r1
 801363a:	00db      	lsls	r3, r3, #3
 801363c:	4413      	add	r3, r2
 801363e:	791a      	ldrb	r2, [r3, #4]
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8013644:	693a      	ldr	r2, [r7, #16]
 8013646:	f248 0360 	movw	r3, #32864	; 0x8060
 801364a:	4413      	add	r3, r2
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	4619      	mov	r1, r3
 8013650:	693a      	ldr	r2, [r7, #16]
 8013652:	f241 0308 	movw	r3, #4104	; 0x1008
 8013656:	440b      	add	r3, r1
 8013658:	00db      	lsls	r3, r3, #3
 801365a:	4413      	add	r3, r2
 801365c:	795a      	ldrb	r2, [r3, #5]
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8013662:	693a      	ldr	r2, [r7, #16]
 8013664:	f248 0360 	movw	r3, #32864	; 0x8060
 8013668:	4413      	add	r3, r2
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	3301      	adds	r3, #1
 801366e:	b2d9      	uxtb	r1, r3
 8013670:	693a      	ldr	r2, [r7, #16]
 8013672:	f248 0360 	movw	r3, #32864	; 0x8060
 8013676:	4413      	add	r3, r2
 8013678:	460a      	mov	r2, r1
 801367a:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801367c:	693a      	ldr	r2, [r7, #16]
 801367e:	f248 0360 	movw	r3, #32864	; 0x8060
 8013682:	4413      	add	r3, r2
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	2b04      	cmp	r3, #4
 8013688:	d105      	bne.n	8013696 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 801368a:	693a      	ldr	r2, [r7, #16]
 801368c:	f248 0360 	movw	r3, #32864	; 0x8060
 8013690:	4413      	add	r3, r2
 8013692:	2200      	movs	r2, #0
 8013694:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	2212      	movs	r2, #18
 801369a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	3304      	adds	r3, #4
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	2b12      	cmp	r3, #18
 80136a4:	d805      	bhi.n	80136b2 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	3304      	adds	r3, #4
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	461a      	mov	r2, r3
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80136b2:	2300      	movs	r3, #0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3718      	adds	r7, #24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80136bc:	b480      	push	{r7}
 80136be:	b085      	sub	sp, #20
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	4608      	mov	r0, r1
 80136c6:	4611      	mov	r1, r2
 80136c8:	461a      	mov	r2, r3
 80136ca:	4603      	mov	r3, r0
 80136cc:	70fb      	strb	r3, [r7, #3]
 80136ce:	460b      	mov	r3, r1
 80136d0:	70bb      	strb	r3, [r7, #2]
 80136d2:	4613      	mov	r3, r2
 80136d4:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136dc:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80136de:	68fa      	ldr	r2, [r7, #12]
 80136e0:	f248 0361 	movw	r3, #32865	; 0x8061
 80136e4:	4413      	add	r3, r2
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	4619      	mov	r1, r3
 80136ea:	68fa      	ldr	r2, [r7, #12]
 80136ec:	f241 0308 	movw	r3, #4104	; 0x1008
 80136f0:	440b      	add	r3, r1
 80136f2:	78b9      	ldrb	r1, [r7, #2]
 80136f4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80136f8:	68fa      	ldr	r2, [r7, #12]
 80136fa:	f248 0361 	movw	r3, #32865	; 0x8061
 80136fe:	4413      	add	r3, r2
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	4619      	mov	r1, r3
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	f241 0308 	movw	r3, #4104	; 0x1008
 801370a:	440b      	add	r3, r1
 801370c:	00db      	lsls	r3, r3, #3
 801370e:	4413      	add	r3, r2
 8013710:	787a      	ldrb	r2, [r7, #1]
 8013712:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	f248 0361 	movw	r3, #32865	; 0x8061
 801371a:	4413      	add	r3, r2
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	4619      	mov	r1, r3
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	f241 0308 	movw	r3, #4104	; 0x1008
 8013726:	440b      	add	r3, r1
 8013728:	00db      	lsls	r3, r3, #3
 801372a:	4413      	add	r3, r2
 801372c:	2200      	movs	r2, #0
 801372e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8013730:	68fa      	ldr	r2, [r7, #12]
 8013732:	f248 0361 	movw	r3, #32865	; 0x8061
 8013736:	4413      	add	r3, r2
 8013738:	781b      	ldrb	r3, [r3, #0]
 801373a:	3301      	adds	r3, #1
 801373c:	b2d9      	uxtb	r1, r3
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	f248 0361 	movw	r3, #32865	; 0x8061
 8013744:	4413      	add	r3, r2
 8013746:	460a      	mov	r2, r1
 8013748:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801374a:	68fa      	ldr	r2, [r7, #12]
 801374c:	f248 0361 	movw	r3, #32865	; 0x8061
 8013750:	4413      	add	r3, r2
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	2b04      	cmp	r3, #4
 8013756:	d105      	bne.n	8013764 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8013758:	68fa      	ldr	r2, [r7, #12]
 801375a:	f248 0361 	movw	r3, #32865	; 0x8061
 801375e:	4413      	add	r3, r2
 8013760:	2200      	movs	r2, #0
 8013762:	701a      	strb	r2, [r3, #0]
  }
}
 8013764:	bf00      	nop
 8013766:	3714      	adds	r7, #20
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b086      	sub	sp, #24
 8013774:	af00      	add	r7, sp, #0
 8013776:	60f8      	str	r0, [r7, #12]
 8013778:	460b      	mov	r3, r1
 801377a:	607a      	str	r2, [r7, #4]
 801377c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013784:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8013786:	697a      	ldr	r2, [r7, #20]
 8013788:	f248 0362 	movw	r3, #32866	; 0x8062
 801378c:	4413      	add	r3, r2
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	2b01      	cmp	r3, #1
 8013792:	d10f      	bne.n	80137b4 <SCSI_StartStopUnit+0x44>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	3304      	adds	r3, #4
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	f003 0303 	and.w	r3, r3, #3
 801379e:	2b02      	cmp	r3, #2
 80137a0:	d108      	bne.n	80137b4 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80137a2:	7af9      	ldrb	r1, [r7, #11]
 80137a4:	2324      	movs	r3, #36	; 0x24
 80137a6:	2205      	movs	r2, #5
 80137a8:	68f8      	ldr	r0, [r7, #12]
 80137aa:	f7ff ff87 	bl	80136bc <SCSI_SenseCode>

    return -1;
 80137ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137b2:	e02c      	b.n	801380e <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	3304      	adds	r3, #4
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	f003 0303 	and.w	r3, r3, #3
 80137be:	2b01      	cmp	r3, #1
 80137c0:	d106      	bne.n	80137d0 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80137c2:	697a      	ldr	r2, [r7, #20]
 80137c4:	f248 0362 	movw	r3, #32866	; 0x8062
 80137c8:	4413      	add	r3, r2
 80137ca:	2200      	movs	r2, #0
 80137cc:	701a      	strb	r2, [r3, #0]
 80137ce:	e01a      	b.n	8013806 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	3304      	adds	r3, #4
 80137d4:	781b      	ldrb	r3, [r3, #0]
 80137d6:	f003 0303 	and.w	r3, r3, #3
 80137da:	2b02      	cmp	r3, #2
 80137dc:	d106      	bne.n	80137ec <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80137de:	697a      	ldr	r2, [r7, #20]
 80137e0:	f248 0362 	movw	r3, #32866	; 0x8062
 80137e4:	4413      	add	r3, r2
 80137e6:	2202      	movs	r2, #2
 80137e8:	701a      	strb	r2, [r3, #0]
 80137ea:	e00c      	b.n	8013806 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	3304      	adds	r3, #4
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	f003 0303 	and.w	r3, r3, #3
 80137f6:	2b03      	cmp	r3, #3
 80137f8:	d105      	bne.n	8013806 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80137fa:	697a      	ldr	r2, [r7, #20]
 80137fc:	f248 0362 	movw	r3, #32866	; 0x8062
 8013800:	4413      	add	r3, r2
 8013802:	2200      	movs	r2, #0
 8013804:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8013806:	697b      	ldr	r3, [r7, #20]
 8013808:	2200      	movs	r2, #0
 801380a:	60da      	str	r2, [r3, #12]

  return 0;
 801380c:	2300      	movs	r3, #0
}
 801380e:	4618      	mov	r0, r3
 8013810:	3718      	adds	r7, #24
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}

08013816 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013816:	b480      	push	{r7}
 8013818:	b087      	sub	sp, #28
 801381a:	af00      	add	r7, sp, #0
 801381c:	60f8      	str	r0, [r7, #12]
 801381e:	460b      	mov	r3, r1
 8013820:	607a      	str	r2, [r7, #4]
 8013822:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801382a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	3304      	adds	r3, #4
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d106      	bne.n	8013844 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013836:	697a      	ldr	r2, [r7, #20]
 8013838:	f248 0362 	movw	r3, #32866	; 0x8062
 801383c:	4413      	add	r3, r2
 801383e:	2200      	movs	r2, #0
 8013840:	701a      	strb	r2, [r3, #0]
 8013842:	e005      	b.n	8013850 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8013844:	697a      	ldr	r2, [r7, #20]
 8013846:	f248 0362 	movw	r3, #32866	; 0x8062
 801384a:	4413      	add	r3, r2
 801384c:	2201      	movs	r2, #1
 801384e:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	2200      	movs	r2, #0
 8013854:	60da      	str	r2, [r3, #12]

  return 0;
 8013856:	2300      	movs	r3, #0
}
 8013858:	4618      	mov	r0, r3
 801385a:	371c      	adds	r7, #28
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr

08013864 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b086      	sub	sp, #24
 8013868:	af00      	add	r7, sp, #0
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	460b      	mov	r3, r1
 801386e:	607a      	str	r2, [r7, #4]
 8013870:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013878:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	7a1b      	ldrb	r3, [r3, #8]
 801387e:	2b00      	cmp	r3, #0
 8013880:	f040 8094 	bne.w	80139ac <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013884:	697a      	ldr	r2, [r7, #20]
 8013886:	f248 031c 	movw	r3, #32796	; 0x801c
 801388a:	4413      	add	r3, r2
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	b25b      	sxtb	r3, r3
 8013890:	2b00      	cmp	r3, #0
 8013892:	db0c      	blt.n	80138ae <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013894:	697a      	ldr	r2, [r7, #20]
 8013896:	f248 031d 	movw	r3, #32797	; 0x801d
 801389a:	4413      	add	r3, r2
 801389c:	7819      	ldrb	r1, [r3, #0]
 801389e:	2320      	movs	r3, #32
 80138a0:	2205      	movs	r2, #5
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	f7ff ff0a 	bl	80136bc <SCSI_SenseCode>
      return -1;
 80138a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138ac:	e088      	b.n	80139c0 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80138ae:	697a      	ldr	r2, [r7, #20]
 80138b0:	f248 0362 	movw	r3, #32866	; 0x8062
 80138b4:	4413      	add	r3, r2
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	2b02      	cmp	r3, #2
 80138ba:	d108      	bne.n	80138ce <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80138bc:	7af9      	ldrb	r1, [r7, #11]
 80138be:	233a      	movs	r3, #58	; 0x3a
 80138c0:	2202      	movs	r2, #2
 80138c2:	68f8      	ldr	r0, [r7, #12]
 80138c4:	f7ff fefa 	bl	80136bc <SCSI_SenseCode>

      return -1;
 80138c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138cc:	e078      	b.n	80139c0 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80138d4:	689b      	ldr	r3, [r3, #8]
 80138d6:	7afa      	ldrb	r2, [r7, #11]
 80138d8:	4610      	mov	r0, r2
 80138da:	4798      	blx	r3
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d008      	beq.n	80138f4 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80138e2:	7af9      	ldrb	r1, [r7, #11]
 80138e4:	233a      	movs	r3, #58	; 0x3a
 80138e6:	2202      	movs	r2, #2
 80138e8:	68f8      	ldr	r0, [r7, #12]
 80138ea:	f7ff fee7 	bl	80136bc <SCSI_SenseCode>
      return -1;
 80138ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138f2:	e065      	b.n	80139c0 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	3302      	adds	r3, #2
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	3303      	adds	r3, #3
 8013900:	781b      	ldrb	r3, [r3, #0]
 8013902:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013904:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	3304      	adds	r3, #4
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801390e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013910:	687a      	ldr	r2, [r7, #4]
 8013912:	3205      	adds	r2, #5
 8013914:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013916:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013918:	6979      	ldr	r1, [r7, #20]
 801391a:	f248 036c 	movw	r3, #32876	; 0x806c
 801391e:	440b      	add	r3, r1
 8013920:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	3307      	adds	r3, #7
 8013926:	781b      	ldrb	r3, [r3, #0]
 8013928:	021b      	lsls	r3, r3, #8
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	3208      	adds	r2, #8
 801392e:	7812      	ldrb	r2, [r2, #0]
 8013930:	431a      	orrs	r2, r3
 8013932:	6979      	ldr	r1, [r7, #20]
 8013934:	f248 0370 	movw	r3, #32880	; 0x8070
 8013938:	440b      	add	r3, r1
 801393a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801393c:	697a      	ldr	r2, [r7, #20]
 801393e:	f248 036c 	movw	r3, #32876	; 0x806c
 8013942:	4413      	add	r3, r2
 8013944:	6818      	ldr	r0, [r3, #0]
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	f248 0370 	movw	r3, #32880	; 0x8070
 801394c:	4413      	add	r3, r2
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	7af9      	ldrb	r1, [r7, #11]
 8013952:	4602      	mov	r2, r0
 8013954:	68f8      	ldr	r0, [r7, #12]
 8013956:	f000 faeb 	bl	8013f30 <SCSI_CheckAddressRange>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	da02      	bge.n	8013966 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013964:	e02c      	b.n	80139c0 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013966:	697a      	ldr	r2, [r7, #20]
 8013968:	f248 0318 	movw	r3, #32792	; 0x8018
 801396c:	4413      	add	r3, r2
 801396e:	681a      	ldr	r2, [r3, #0]
 8013970:	6979      	ldr	r1, [r7, #20]
 8013972:	f248 0370 	movw	r3, #32880	; 0x8070
 8013976:	440b      	add	r3, r1
 8013978:	6819      	ldr	r1, [r3, #0]
 801397a:	6978      	ldr	r0, [r7, #20]
 801397c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013980:	4403      	add	r3, r0
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	fb03 f301 	mul.w	r3, r3, r1
 8013988:	429a      	cmp	r2, r3
 801398a:	d00c      	beq.n	80139a6 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801398c:	697a      	ldr	r2, [r7, #20]
 801398e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013992:	4413      	add	r3, r2
 8013994:	7819      	ldrb	r1, [r3, #0]
 8013996:	2320      	movs	r3, #32
 8013998:	2205      	movs	r2, #5
 801399a:	68f8      	ldr	r0, [r7, #12]
 801399c:	f7ff fe8e 	bl	80136bc <SCSI_SenseCode>
      return -1;
 80139a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139a4:	e00c      	b.n	80139c0 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	2202      	movs	r2, #2
 80139aa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80139b2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80139b4:	7afb      	ldrb	r3, [r7, #11]
 80139b6:	4619      	mov	r1, r3
 80139b8:	68f8      	ldr	r0, [r7, #12]
 80139ba:	f000 fadd 	bl	8013f78 <SCSI_ProcessRead>
 80139be:	4603      	mov	r3, r0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3718      	adds	r7, #24
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b086      	sub	sp, #24
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	460b      	mov	r3, r1
 80139d2:	607a      	str	r2, [r7, #4]
 80139d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139dc:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	7a1b      	ldrb	r3, [r3, #8]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	f040 809e 	bne.w	8013b24 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80139e8:	697a      	ldr	r2, [r7, #20]
 80139ea:	f248 031c 	movw	r3, #32796	; 0x801c
 80139ee:	4413      	add	r3, r2
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	b25b      	sxtb	r3, r3
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	db0c      	blt.n	8013a12 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80139f8:	697a      	ldr	r2, [r7, #20]
 80139fa:	f248 031d 	movw	r3, #32797	; 0x801d
 80139fe:	4413      	add	r3, r2
 8013a00:	7819      	ldrb	r1, [r3, #0]
 8013a02:	2320      	movs	r3, #32
 8013a04:	2205      	movs	r2, #5
 8013a06:	68f8      	ldr	r0, [r7, #12]
 8013a08:	f7ff fe58 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a10:	e092      	b.n	8013b38 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013a12:	697a      	ldr	r2, [r7, #20]
 8013a14:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a18:	4413      	add	r3, r2
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	2b02      	cmp	r3, #2
 8013a1e:	d108      	bne.n	8013a32 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a20:	7af9      	ldrb	r1, [r7, #11]
 8013a22:	233a      	movs	r3, #58	; 0x3a
 8013a24:	2202      	movs	r2, #2
 8013a26:	68f8      	ldr	r0, [r7, #12]
 8013a28:	f7ff fe48 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a30:	e082      	b.n	8013b38 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	7afa      	ldrb	r2, [r7, #11]
 8013a3c:	4610      	mov	r0, r2
 8013a3e:	4798      	blx	r3
 8013a40:	4603      	mov	r3, r0
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d008      	beq.n	8013a58 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013a46:	7af9      	ldrb	r1, [r7, #11]
 8013a48:	233a      	movs	r3, #58	; 0x3a
 8013a4a:	2202      	movs	r2, #2
 8013a4c:	68f8      	ldr	r0, [r7, #12]
 8013a4e:	f7ff fe35 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a56:	e06f      	b.n	8013b38 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	3302      	adds	r3, #2
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	3303      	adds	r3, #3
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a68:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013a72:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013a74:	687a      	ldr	r2, [r7, #4]
 8013a76:	3205      	adds	r2, #5
 8013a78:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013a7a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013a7c:	6979      	ldr	r1, [r7, #20]
 8013a7e:	f248 036c 	movw	r3, #32876	; 0x806c
 8013a82:	440b      	add	r3, r1
 8013a84:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	3306      	adds	r3, #6
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	3307      	adds	r3, #7
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013a96:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	3308      	adds	r3, #8
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013aa0:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	3209      	adds	r2, #9
 8013aa6:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013aa8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013aaa:	6979      	ldr	r1, [r7, #20]
 8013aac:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ab0:	440b      	add	r3, r1
 8013ab2:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013ab4:	697a      	ldr	r2, [r7, #20]
 8013ab6:	f248 036c 	movw	r3, #32876	; 0x806c
 8013aba:	4413      	add	r3, r2
 8013abc:	6818      	ldr	r0, [r3, #0]
 8013abe:	697a      	ldr	r2, [r7, #20]
 8013ac0:	f248 0370 	movw	r3, #32880	; 0x8070
 8013ac4:	4413      	add	r3, r2
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	7af9      	ldrb	r1, [r7, #11]
 8013aca:	4602      	mov	r2, r0
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f000 fa2f 	bl	8013f30 <SCSI_CheckAddressRange>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	da02      	bge.n	8013ade <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013adc:	e02c      	b.n	8013b38 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013ade:	697a      	ldr	r2, [r7, #20]
 8013ae0:	f248 0318 	movw	r3, #32792	; 0x8018
 8013ae4:	4413      	add	r3, r2
 8013ae6:	681a      	ldr	r2, [r3, #0]
 8013ae8:	6979      	ldr	r1, [r7, #20]
 8013aea:	f248 0370 	movw	r3, #32880	; 0x8070
 8013aee:	440b      	add	r3, r1
 8013af0:	6819      	ldr	r1, [r3, #0]
 8013af2:	6978      	ldr	r0, [r7, #20]
 8013af4:	f248 0364 	movw	r3, #32868	; 0x8064
 8013af8:	4403      	add	r3, r0
 8013afa:	881b      	ldrh	r3, [r3, #0]
 8013afc:	fb03 f301 	mul.w	r3, r3, r1
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d00c      	beq.n	8013b1e <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b04:	697a      	ldr	r2, [r7, #20]
 8013b06:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b0a:	4413      	add	r3, r2
 8013b0c:	7819      	ldrb	r1, [r3, #0]
 8013b0e:	2320      	movs	r3, #32
 8013b10:	2205      	movs	r2, #5
 8013b12:	68f8      	ldr	r0, [r7, #12]
 8013b14:	f7ff fdd2 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b1c:	e00c      	b.n	8013b38 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	2202      	movs	r2, #2
 8013b22:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013b2a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013b2c:	7afb      	ldrb	r3, [r7, #11]
 8013b2e:	4619      	mov	r1, r3
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	f000 fa21 	bl	8013f78 <SCSI_ProcessRead>
 8013b36:	4603      	mov	r3, r0
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3718      	adds	r7, #24
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b086      	sub	sp, #24
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	60f8      	str	r0, [r7, #12]
 8013b48:	460b      	mov	r3, r1
 8013b4a:	607a      	str	r2, [r7, #4]
 8013b4c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b54:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	7a1b      	ldrb	r3, [r3, #8]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f040 80be 	bne.w	8013cdc <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013b60:	697a      	ldr	r2, [r7, #20]
 8013b62:	f248 0318 	movw	r3, #32792	; 0x8018
 8013b66:	4413      	add	r3, r2
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d10c      	bne.n	8013b88 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b6e:	697a      	ldr	r2, [r7, #20]
 8013b70:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b74:	4413      	add	r3, r2
 8013b76:	7819      	ldrb	r1, [r3, #0]
 8013b78:	2320      	movs	r3, #32
 8013b7a:	2205      	movs	r2, #5
 8013b7c:	68f8      	ldr	r0, [r7, #12]
 8013b7e:	f7ff fd9d 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b86:	e0af      	b.n	8013ce8 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013b88:	697a      	ldr	r2, [r7, #20]
 8013b8a:	f248 031c 	movw	r3, #32796	; 0x801c
 8013b8e:	4413      	add	r3, r2
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	b25b      	sxtb	r3, r3
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	da0c      	bge.n	8013bb2 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b98:	697a      	ldr	r2, [r7, #20]
 8013b9a:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b9e:	4413      	add	r3, r2
 8013ba0:	7819      	ldrb	r1, [r3, #0]
 8013ba2:	2320      	movs	r3, #32
 8013ba4:	2205      	movs	r2, #5
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f7ff fd88 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bb0:	e09a      	b.n	8013ce8 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013bb8:	689b      	ldr	r3, [r3, #8]
 8013bba:	7afa      	ldrb	r2, [r7, #11]
 8013bbc:	4610      	mov	r0, r2
 8013bbe:	4798      	blx	r3
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d008      	beq.n	8013bd8 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013bc6:	7af9      	ldrb	r1, [r7, #11]
 8013bc8:	233a      	movs	r3, #58	; 0x3a
 8013bca:	2202      	movs	r2, #2
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f7ff fd75 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bd6:	e087      	b.n	8013ce8 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	7afa      	ldrb	r2, [r7, #11]
 8013be2:	4610      	mov	r0, r2
 8013be4:	4798      	blx	r3
 8013be6:	4603      	mov	r3, r0
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d008      	beq.n	8013bfe <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013bec:	7af9      	ldrb	r1, [r7, #11]
 8013bee:	2327      	movs	r3, #39	; 0x27
 8013bf0:	2202      	movs	r2, #2
 8013bf2:	68f8      	ldr	r0, [r7, #12]
 8013bf4:	f7ff fd62 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bfc:	e074      	b.n	8013ce8 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	3302      	adds	r3, #2
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	3303      	adds	r3, #3
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013c0e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	3304      	adds	r3, #4
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013c18:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	3205      	adds	r2, #5
 8013c1e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013c20:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013c22:	6979      	ldr	r1, [r7, #20]
 8013c24:	f248 036c 	movw	r3, #32876	; 0x806c
 8013c28:	440b      	add	r3, r1
 8013c2a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	3307      	adds	r3, #7
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	3208      	adds	r2, #8
 8013c38:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013c3a:	431a      	orrs	r2, r3
 8013c3c:	6979      	ldr	r1, [r7, #20]
 8013c3e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c42:	440b      	add	r3, r1
 8013c44:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013c46:	697a      	ldr	r2, [r7, #20]
 8013c48:	f248 036c 	movw	r3, #32876	; 0x806c
 8013c4c:	4413      	add	r3, r2
 8013c4e:	6818      	ldr	r0, [r3, #0]
 8013c50:	697a      	ldr	r2, [r7, #20]
 8013c52:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c56:	4413      	add	r3, r2
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	7af9      	ldrb	r1, [r7, #11]
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	68f8      	ldr	r0, [r7, #12]
 8013c60:	f000 f966 	bl	8013f30 <SCSI_CheckAddressRange>
 8013c64:	4603      	mov	r3, r0
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	da02      	bge.n	8013c70 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c6e:	e03b      	b.n	8013ce8 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013c70:	697a      	ldr	r2, [r7, #20]
 8013c72:	f248 0370 	movw	r3, #32880	; 0x8070
 8013c76:	4413      	add	r3, r2
 8013c78:	681a      	ldr	r2, [r3, #0]
 8013c7a:	6979      	ldr	r1, [r7, #20]
 8013c7c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013c80:	440b      	add	r3, r1
 8013c82:	881b      	ldrh	r3, [r3, #0]
 8013c84:	fb03 f302 	mul.w	r3, r3, r2
 8013c88:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013c8a:	697a      	ldr	r2, [r7, #20]
 8013c8c:	f248 0318 	movw	r3, #32792	; 0x8018
 8013c90:	4413      	add	r3, r2
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	693a      	ldr	r2, [r7, #16]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d00c      	beq.n	8013cb4 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c9a:	697a      	ldr	r2, [r7, #20]
 8013c9c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013ca0:	4413      	add	r3, r2
 8013ca2:	7819      	ldrb	r1, [r3, #0]
 8013ca4:	2320      	movs	r3, #32
 8013ca6:	2205      	movs	r2, #5
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	f7ff fd07 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013cb2:	e019      	b.n	8013ce8 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013cba:	bf28      	it	cs
 8013cbc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013cc0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	2201      	movs	r2, #1
 8013cc6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	f103 0210 	add.w	r2, r3, #16
 8013cce:	693b      	ldr	r3, [r7, #16]
 8013cd0:	2101      	movs	r1, #1
 8013cd2:	68f8      	ldr	r0, [r7, #12]
 8013cd4:	f004 fb19 	bl	801830a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	e005      	b.n	8013ce8 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8013cdc:	7afb      	ldrb	r3, [r7, #11]
 8013cde:	4619      	mov	r1, r3
 8013ce0:	68f8      	ldr	r0, [r7, #12]
 8013ce2:	f000 f9d7 	bl	8014094 <SCSI_ProcessWrite>
 8013ce6:	4603      	mov	r3, r0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3718      	adds	r7, #24
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	607a      	str	r2, [r7, #4]
 8013cfc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d04:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	7a1b      	ldrb	r3, [r3, #8]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	f040 80ce 	bne.w	8013eac <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013d10:	697a      	ldr	r2, [r7, #20]
 8013d12:	f248 0318 	movw	r3, #32792	; 0x8018
 8013d16:	4413      	add	r3, r2
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d10c      	bne.n	8013d38 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d1e:	697a      	ldr	r2, [r7, #20]
 8013d20:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d24:	4413      	add	r3, r2
 8013d26:	7819      	ldrb	r1, [r3, #0]
 8013d28:	2320      	movs	r3, #32
 8013d2a:	2205      	movs	r2, #5
 8013d2c:	68f8      	ldr	r0, [r7, #12]
 8013d2e:	f7ff fcc5 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d36:	e0bf      	b.n	8013eb8 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013d38:	697a      	ldr	r2, [r7, #20]
 8013d3a:	f248 031c 	movw	r3, #32796	; 0x801c
 8013d3e:	4413      	add	r3, r2
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	b25b      	sxtb	r3, r3
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	da0c      	bge.n	8013d62 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013d48:	697a      	ldr	r2, [r7, #20]
 8013d4a:	f248 031d 	movw	r3, #32797	; 0x801d
 8013d4e:	4413      	add	r3, r2
 8013d50:	7819      	ldrb	r1, [r3, #0]
 8013d52:	2320      	movs	r3, #32
 8013d54:	2205      	movs	r2, #5
 8013d56:	68f8      	ldr	r0, [r7, #12]
 8013d58:	f7ff fcb0 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d60:	e0aa      	b.n	8013eb8 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d68:	689b      	ldr	r3, [r3, #8]
 8013d6a:	7afa      	ldrb	r2, [r7, #11]
 8013d6c:	4610      	mov	r0, r2
 8013d6e:	4798      	blx	r3
 8013d70:	4603      	mov	r3, r0
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00b      	beq.n	8013d8e <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013d76:	7af9      	ldrb	r1, [r7, #11]
 8013d78:	233a      	movs	r3, #58	; 0x3a
 8013d7a:	2202      	movs	r2, #2
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	f7ff fc9d 	bl	80136bc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	2205      	movs	r2, #5
 8013d86:	721a      	strb	r2, [r3, #8]
      return -1;
 8013d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d8c:	e094      	b.n	8013eb8 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d94:	68db      	ldr	r3, [r3, #12]
 8013d96:	7afa      	ldrb	r2, [r7, #11]
 8013d98:	4610      	mov	r0, r2
 8013d9a:	4798      	blx	r3
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d00b      	beq.n	8013dba <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013da2:	7af9      	ldrb	r1, [r7, #11]
 8013da4:	2327      	movs	r3, #39	; 0x27
 8013da6:	2202      	movs	r2, #2
 8013da8:	68f8      	ldr	r0, [r7, #12]
 8013daa:	f7ff fc87 	bl	80136bc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	2205      	movs	r2, #5
 8013db2:	721a      	strb	r2, [r3, #8]
      return -1;
 8013db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013db8:	e07e      	b.n	8013eb8 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	3302      	adds	r3, #2
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3303      	adds	r3, #3
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013dca:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	3304      	adds	r3, #4
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013dd4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	3205      	adds	r2, #5
 8013dda:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013ddc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013dde:	6979      	ldr	r1, [r7, #20]
 8013de0:	f248 036c 	movw	r3, #32876	; 0x806c
 8013de4:	440b      	add	r3, r1
 8013de6:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	3306      	adds	r3, #6
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	3307      	adds	r3, #7
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013df8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	3308      	adds	r3, #8
 8013dfe:	781b      	ldrb	r3, [r3, #0]
 8013e00:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8013e02:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013e04:	687a      	ldr	r2, [r7, #4]
 8013e06:	3209      	adds	r2, #9
 8013e08:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013e0a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013e0c:	6979      	ldr	r1, [r7, #20]
 8013e0e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e12:	440b      	add	r3, r1
 8013e14:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013e16:	697a      	ldr	r2, [r7, #20]
 8013e18:	f248 036c 	movw	r3, #32876	; 0x806c
 8013e1c:	4413      	add	r3, r2
 8013e1e:	6818      	ldr	r0, [r3, #0]
 8013e20:	697a      	ldr	r2, [r7, #20]
 8013e22:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e26:	4413      	add	r3, r2
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	7af9      	ldrb	r1, [r7, #11]
 8013e2c:	4602      	mov	r2, r0
 8013e2e:	68f8      	ldr	r0, [r7, #12]
 8013e30:	f000 f87e 	bl	8013f30 <SCSI_CheckAddressRange>
 8013e34:	4603      	mov	r3, r0
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	da02      	bge.n	8013e40 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e3e:	e03b      	b.n	8013eb8 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013e40:	697a      	ldr	r2, [r7, #20]
 8013e42:	f248 0370 	movw	r3, #32880	; 0x8070
 8013e46:	4413      	add	r3, r2
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	6979      	ldr	r1, [r7, #20]
 8013e4c:	f248 0364 	movw	r3, #32868	; 0x8064
 8013e50:	440b      	add	r3, r1
 8013e52:	881b      	ldrh	r3, [r3, #0]
 8013e54:	fb03 f302 	mul.w	r3, r3, r2
 8013e58:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013e5a:	697a      	ldr	r2, [r7, #20]
 8013e5c:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e60:	4413      	add	r3, r2
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	693a      	ldr	r2, [r7, #16]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d00c      	beq.n	8013e84 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013e6a:	697a      	ldr	r2, [r7, #20]
 8013e6c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013e70:	4413      	add	r3, r2
 8013e72:	7819      	ldrb	r1, [r3, #0]
 8013e74:	2320      	movs	r3, #32
 8013e76:	2205      	movs	r2, #5
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f7ff fc1f 	bl	80136bc <SCSI_SenseCode>
      return -1;
 8013e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e82:	e019      	b.n	8013eb8 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e8a:	bf28      	it	cs
 8013e8c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013e90:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2201      	movs	r2, #1
 8013e96:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	f103 0210 	add.w	r2, r3, #16
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	2101      	movs	r1, #1
 8013ea2:	68f8      	ldr	r0, [r7, #12]
 8013ea4:	f004 fa31 	bl	801830a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	e005      	b.n	8013eb8 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8013eac:	7afb      	ldrb	r3, [r7, #11]
 8013eae:	4619      	mov	r1, r3
 8013eb0:	68f8      	ldr	r0, [r7, #12]
 8013eb2:	f000 f8ef 	bl	8014094 <SCSI_ProcessWrite>
 8013eb6:	4603      	mov	r3, r0
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3718      	adds	r7, #24
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b086      	sub	sp, #24
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	60f8      	str	r0, [r7, #12]
 8013ec8:	460b      	mov	r3, r1
 8013eca:	607a      	str	r2, [r7, #4]
 8013ecc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ed4:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	3301      	adds	r3, #1
 8013eda:	781b      	ldrb	r3, [r3, #0]
 8013edc:	f003 0302 	and.w	r3, r3, #2
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d008      	beq.n	8013ef6 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013ee4:	7af9      	ldrb	r1, [r7, #11]
 8013ee6:	2324      	movs	r3, #36	; 0x24
 8013ee8:	2205      	movs	r2, #5
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f7ff fbe6 	bl	80136bc <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8013ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ef4:	e018      	b.n	8013f28 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8013ef6:	697a      	ldr	r2, [r7, #20]
 8013ef8:	f248 036c 	movw	r3, #32876	; 0x806c
 8013efc:	4413      	add	r3, r2
 8013efe:	6818      	ldr	r0, [r3, #0]
 8013f00:	697a      	ldr	r2, [r7, #20]
 8013f02:	f248 0370 	movw	r3, #32880	; 0x8070
 8013f06:	4413      	add	r3, r2
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	7af9      	ldrb	r1, [r7, #11]
 8013f0c:	4602      	mov	r2, r0
 8013f0e:	68f8      	ldr	r0, [r7, #12]
 8013f10:	f000 f80e 	bl	8013f30 <SCSI_CheckAddressRange>
 8013f14:	4603      	mov	r3, r0
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	da02      	bge.n	8013f20 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8013f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f1e:	e003      	b.n	8013f28 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	2200      	movs	r2, #0
 8013f24:	60da      	str	r2, [r3, #12]

  return 0;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3718      	adds	r7, #24
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b086      	sub	sp, #24
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	607a      	str	r2, [r7, #4]
 8013f3a:	603b      	str	r3, [r7, #0]
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f46:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	441a      	add	r2, r3
 8013f4e:	6979      	ldr	r1, [r7, #20]
 8013f50:	f248 0368 	movw	r3, #32872	; 0x8068
 8013f54:	440b      	add	r3, r1
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d908      	bls.n	8013f6e <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013f5c:	7af9      	ldrb	r1, [r7, #11]
 8013f5e:	2321      	movs	r3, #33	; 0x21
 8013f60:	2205      	movs	r2, #5
 8013f62:	68f8      	ldr	r0, [r7, #12]
 8013f64:	f7ff fbaa 	bl	80136bc <SCSI_SenseCode>
    return -1;
 8013f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f6c:	e000      	b.n	8013f70 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8013f6e:	2300      	movs	r3, #0
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3718      	adds	r7, #24
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}

08013f78 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013f78:	b5b0      	push	{r4, r5, r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	460b      	mov	r3, r1
 8013f82:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f8a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013f8c:	68fa      	ldr	r2, [r7, #12]
 8013f8e:	f248 0370 	movw	r3, #32880	; 0x8070
 8013f92:	4413      	add	r3, r2
 8013f94:	681a      	ldr	r2, [r3, #0]
 8013f96:	68f9      	ldr	r1, [r7, #12]
 8013f98:	f248 0364 	movw	r3, #32868	; 0x8064
 8013f9c:	440b      	add	r3, r1
 8013f9e:	881b      	ldrh	r3, [r3, #0]
 8013fa0:	fb03 f302 	mul.w	r3, r3, r2
 8013fa4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013fac:	bf28      	it	cs
 8013fae:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8013fb2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fba:	691c      	ldr	r4, [r3, #16]
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	f103 0110 	add.w	r1, r3, #16
 8013fc2:	68fa      	ldr	r2, [r7, #12]
 8013fc4:	f248 036c 	movw	r3, #32876	; 0x806c
 8013fc8:	4413      	add	r3, r2
 8013fca:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013fcc:	68fa      	ldr	r2, [r7, #12]
 8013fce:	f248 0364 	movw	r3, #32868	; 0x8064
 8013fd2:	4413      	add	r3, r2
 8013fd4:	881b      	ldrh	r3, [r3, #0]
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8013fde:	b29b      	uxth	r3, r3
 8013fe0:	78f8      	ldrb	r0, [r7, #3]
 8013fe2:	462a      	mov	r2, r5
 8013fe4:	47a0      	blx	r4
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	da08      	bge.n	8013ffe <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013fec:	78f9      	ldrb	r1, [r7, #3]
 8013fee:	2311      	movs	r3, #17
 8013ff0:	2204      	movs	r2, #4
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f7ff fb62 	bl	80136bc <SCSI_SenseCode>
    return -1;
 8013ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ffc:	e046      	b.n	801408c <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	f103 0210 	add.w	r2, r3, #16
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	2181      	movs	r1, #129	; 0x81
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f004 f95d 	bl	80182c8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801400e:	68fa      	ldr	r2, [r7, #12]
 8014010:	f248 036c 	movw	r3, #32876	; 0x806c
 8014014:	4413      	add	r3, r2
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	68f9      	ldr	r1, [r7, #12]
 801401a:	f248 0364 	movw	r3, #32868	; 0x8064
 801401e:	440b      	add	r3, r1
 8014020:	881b      	ldrh	r3, [r3, #0]
 8014022:	4619      	mov	r1, r3
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	fbb3 f3f1 	udiv	r3, r3, r1
 801402a:	441a      	add	r2, r3
 801402c:	68f9      	ldr	r1, [r7, #12]
 801402e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014032:	440b      	add	r3, r1
 8014034:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8014036:	68fa      	ldr	r2, [r7, #12]
 8014038:	f248 0370 	movw	r3, #32880	; 0x8070
 801403c:	4413      	add	r3, r2
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	68f9      	ldr	r1, [r7, #12]
 8014042:	f248 0364 	movw	r3, #32868	; 0x8064
 8014046:	440b      	add	r3, r1
 8014048:	881b      	ldrh	r3, [r3, #0]
 801404a:	4619      	mov	r1, r3
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014052:	1ad2      	subs	r2, r2, r3
 8014054:	68f9      	ldr	r1, [r7, #12]
 8014056:	f248 0370 	movw	r3, #32880	; 0x8070
 801405a:	440b      	add	r3, r1
 801405c:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801405e:	68fa      	ldr	r2, [r7, #12]
 8014060:	f248 0338 	movw	r3, #32824	; 0x8038
 8014064:	4413      	add	r3, r2
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	1ad2      	subs	r2, r2, r3
 801406c:	68f9      	ldr	r1, [r7, #12]
 801406e:	f248 0338 	movw	r3, #32824	; 0x8038
 8014072:	440b      	add	r3, r1
 8014074:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8014076:	68fa      	ldr	r2, [r7, #12]
 8014078:	f248 0370 	movw	r3, #32880	; 0x8070
 801407c:	4413      	add	r3, r2
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d102      	bne.n	801408a <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	2203      	movs	r2, #3
 8014088:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801408a:	2300      	movs	r3, #0
}
 801408c:	4618      	mov	r0, r3
 801408e:	3710      	adds	r7, #16
 8014090:	46bd      	mov	sp, r7
 8014092:	bdb0      	pop	{r4, r5, r7, pc}

08014094 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014094:	b5b0      	push	{r4, r5, r7, lr}
 8014096:	b084      	sub	sp, #16
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	460b      	mov	r3, r1
 801409e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140a6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80140a8:	68fa      	ldr	r2, [r7, #12]
 80140aa:	f248 0370 	movw	r3, #32880	; 0x8070
 80140ae:	4413      	add	r3, r2
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	68f9      	ldr	r1, [r7, #12]
 80140b4:	f248 0364 	movw	r3, #32868	; 0x8064
 80140b8:	440b      	add	r3, r1
 80140ba:	881b      	ldrh	r3, [r3, #0]
 80140bc:	fb03 f302 	mul.w	r3, r3, r2
 80140c0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80140c8:	bf28      	it	cs
 80140ca:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80140ce:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140d6:	695c      	ldr	r4, [r3, #20]
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	f103 0110 	add.w	r1, r3, #16
 80140de:	68fa      	ldr	r2, [r7, #12]
 80140e0:	f248 036c 	movw	r3, #32876	; 0x806c
 80140e4:	4413      	add	r3, r2
 80140e6:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	f248 0364 	movw	r3, #32868	; 0x8064
 80140ee:	4413      	add	r3, r2
 80140f0:	881b      	ldrh	r3, [r3, #0]
 80140f2:	461a      	mov	r2, r3
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	78f8      	ldrb	r0, [r7, #3]
 80140fe:	462a      	mov	r2, r5
 8014100:	47a0      	blx	r4
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	da08      	bge.n	801411a <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8014108:	78f9      	ldrb	r1, [r7, #3]
 801410a:	2303      	movs	r3, #3
 801410c:	2204      	movs	r2, #4
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f7ff fad4 	bl	80136bc <SCSI_SenseCode>
    return -1;
 8014114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014118:	e05a      	b.n	80141d0 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801411a:	68fa      	ldr	r2, [r7, #12]
 801411c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014120:	4413      	add	r3, r2
 8014122:	681a      	ldr	r2, [r3, #0]
 8014124:	68f9      	ldr	r1, [r7, #12]
 8014126:	f248 0364 	movw	r3, #32868	; 0x8064
 801412a:	440b      	add	r3, r1
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	4619      	mov	r1, r3
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	fbb3 f3f1 	udiv	r3, r3, r1
 8014136:	441a      	add	r2, r3
 8014138:	68f9      	ldr	r1, [r7, #12]
 801413a:	f248 036c 	movw	r3, #32876	; 0x806c
 801413e:	440b      	add	r3, r1
 8014140:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8014142:	68fa      	ldr	r2, [r7, #12]
 8014144:	f248 0370 	movw	r3, #32880	; 0x8070
 8014148:	4413      	add	r3, r2
 801414a:	681a      	ldr	r2, [r3, #0]
 801414c:	68f9      	ldr	r1, [r7, #12]
 801414e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014152:	440b      	add	r3, r1
 8014154:	881b      	ldrh	r3, [r3, #0]
 8014156:	4619      	mov	r1, r3
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	fbb3 f3f1 	udiv	r3, r3, r1
 801415e:	1ad2      	subs	r2, r2, r3
 8014160:	68f9      	ldr	r1, [r7, #12]
 8014162:	f248 0370 	movw	r3, #32880	; 0x8070
 8014166:	440b      	add	r3, r1
 8014168:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801416a:	68fa      	ldr	r2, [r7, #12]
 801416c:	f248 0338 	movw	r3, #32824	; 0x8038
 8014170:	4413      	add	r3, r2
 8014172:	681a      	ldr	r2, [r3, #0]
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	1ad2      	subs	r2, r2, r3
 8014178:	68f9      	ldr	r1, [r7, #12]
 801417a:	f248 0338 	movw	r3, #32824	; 0x8038
 801417e:	440b      	add	r3, r1
 8014180:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8014182:	68fa      	ldr	r2, [r7, #12]
 8014184:	f248 0370 	movw	r3, #32880	; 0x8070
 8014188:	4413      	add	r3, r2
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d104      	bne.n	801419a <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014190:	2100      	movs	r1, #0
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f7fe fde2 	bl	8012d5c <MSC_BOT_SendCSW>
 8014198:	e019      	b.n	80141ce <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801419a:	68fa      	ldr	r2, [r7, #12]
 801419c:	f248 0370 	movw	r3, #32880	; 0x8070
 80141a0:	4413      	add	r3, r2
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	68f9      	ldr	r1, [r7, #12]
 80141a6:	f248 0364 	movw	r3, #32868	; 0x8064
 80141aa:	440b      	add	r3, r1
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	fb03 f302 	mul.w	r3, r3, r2
 80141b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80141b6:	bf28      	it	cs
 80141b8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80141bc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	f103 0210 	add.w	r2, r3, #16
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	2101      	movs	r1, #1
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f004 f89e 	bl	801830a <USBD_LL_PrepareReceive>
  }

  return 0;
 80141ce:	2300      	movs	r3, #0
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3710      	adds	r7, #16
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bdb0      	pop	{r4, r5, r7, pc}

080141d8 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80141d8:	b480      	push	{r7}
 80141da:	b087      	sub	sp, #28
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	4613      	mov	r3, r2
 80141e4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80141e6:	88fb      	ldrh	r3, [r7, #6]
 80141e8:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80141ea:	8afa      	ldrh	r2, [r7, #22]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80141f0:	e00b      	b.n	801420a <SCSI_UpdateBotData+0x32>
  {
    len--;
 80141f2:	8afb      	ldrh	r3, [r7, #22]
 80141f4:	3b01      	subs	r3, #1
 80141f6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80141f8:	8afb      	ldrh	r3, [r7, #22]
 80141fa:	68ba      	ldr	r2, [r7, #8]
 80141fc:	441a      	add	r2, r3
 80141fe:	8afb      	ldrh	r3, [r7, #22]
 8014200:	7811      	ldrb	r1, [r2, #0]
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	4413      	add	r3, r2
 8014206:	460a      	mov	r2, r1
 8014208:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801420a:	8afb      	ldrh	r3, [r7, #22]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d1f0      	bne.n	80141f2 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8014210:	2300      	movs	r3, #0
}
 8014212:	4618      	mov	r0, r3
 8014214:	371c      	adds	r7, #28
 8014216:	46bd      	mov	sp, r7
 8014218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421c:	4770      	bx	lr

0801421e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b086      	sub	sp, #24
 8014222:	af00      	add	r7, sp, #0
 8014224:	60f8      	str	r0, [r7, #12]
 8014226:	60b9      	str	r1, [r7, #8]
 8014228:	4613      	mov	r3, r2
 801422a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d101      	bne.n	8014236 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014232:	2303      	movs	r3, #3
 8014234:	e025      	b.n	8014282 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801423c:	2b00      	cmp	r3, #0
 801423e:	d003      	beq.n	8014248 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	2200      	movs	r2, #0
 8014244:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801424e:	2b00      	cmp	r3, #0
 8014250:	d003      	beq.n	801425a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	2200      	movs	r2, #0
 8014256:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d003      	beq.n	8014268 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	68ba      	ldr	r2, [r7, #8]
 8014264:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	2201      	movs	r2, #1
 801426c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	79fa      	ldrb	r2, [r7, #7]
 8014274:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014276:	68f8      	ldr	r0, [r7, #12]
 8014278:	f003 fece 	bl	8018018 <USBD_LL_Init>
 801427c:	4603      	mov	r3, r0
 801427e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014280:	7dfb      	ldrb	r3, [r7, #23]
}
 8014282:	4618      	mov	r0, r3
 8014284:	3718      	adds	r7, #24
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}

0801428a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801428a:	b580      	push	{r7, lr}
 801428c:	b084      	sub	sp, #16
 801428e:	af00      	add	r7, sp, #0
 8014290:	6078      	str	r0, [r7, #4]
 8014292:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014294:	2300      	movs	r3, #0
 8014296:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014298:	683b      	ldr	r3, [r7, #0]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d101      	bne.n	80142a2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801429e:	2303      	movs	r3, #3
 80142a0:	e010      	b.n	80142c4 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	683a      	ldr	r2, [r7, #0]
 80142a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142b2:	f107 020e 	add.w	r2, r7, #14
 80142b6:	4610      	mov	r0, r2
 80142b8:	4798      	blx	r3
 80142ba:	4602      	mov	r2, r0
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80142c2:	2300      	movs	r3, #0
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3710      	adds	r7, #16
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f003 feef 	bl	80180b8 <USBD_LL_Start>
 80142da:	4603      	mov	r3, r0
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80142ec:	2300      	movs	r3, #0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	370c      	adds	r7, #12
 80142f2:	46bd      	mov	sp, r7
 80142f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f8:	4770      	bx	lr

080142fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80142fa:	b580      	push	{r7, lr}
 80142fc:	b084      	sub	sp, #16
 80142fe:	af00      	add	r7, sp, #0
 8014300:	6078      	str	r0, [r7, #4]
 8014302:	460b      	mov	r3, r1
 8014304:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014306:	2303      	movs	r3, #3
 8014308:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014310:	2b00      	cmp	r3, #0
 8014312:	d009      	beq.n	8014328 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	78fa      	ldrb	r2, [r7, #3]
 801431e:	4611      	mov	r1, r2
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	4798      	blx	r3
 8014324:	4603      	mov	r3, r0
 8014326:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014328:	7bfb      	ldrb	r3, [r7, #15]
}
 801432a:	4618      	mov	r0, r3
 801432c:	3710      	adds	r7, #16
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}

08014332 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014332:	b580      	push	{r7, lr}
 8014334:	b082      	sub	sp, #8
 8014336:	af00      	add	r7, sp, #0
 8014338:	6078      	str	r0, [r7, #4]
 801433a:	460b      	mov	r3, r1
 801433c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014344:	2b00      	cmp	r3, #0
 8014346:	d007      	beq.n	8014358 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	78fa      	ldrb	r2, [r7, #3]
 8014352:	4611      	mov	r1, r2
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	4798      	blx	r3
  }

  return USBD_OK;
 8014358:	2300      	movs	r3, #0
}
 801435a:	4618      	mov	r0, r3
 801435c:	3708      	adds	r7, #8
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}

08014362 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014362:	b580      	push	{r7, lr}
 8014364:	b084      	sub	sp, #16
 8014366:	af00      	add	r7, sp, #0
 8014368:	6078      	str	r0, [r7, #4]
 801436a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014372:	6839      	ldr	r1, [r7, #0]
 8014374:	4618      	mov	r0, r3
 8014376:	f000 ff2b 	bl	80151d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2201      	movs	r2, #1
 801437e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014388:	461a      	mov	r2, r3
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014396:	f003 031f 	and.w	r3, r3, #31
 801439a:	2b01      	cmp	r3, #1
 801439c:	d00e      	beq.n	80143bc <USBD_LL_SetupStage+0x5a>
 801439e:	2b01      	cmp	r3, #1
 80143a0:	d302      	bcc.n	80143a8 <USBD_LL_SetupStage+0x46>
 80143a2:	2b02      	cmp	r3, #2
 80143a4:	d014      	beq.n	80143d0 <USBD_LL_SetupStage+0x6e>
 80143a6:	e01d      	b.n	80143e4 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80143ae:	4619      	mov	r1, r3
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 fa17 	bl	80147e4 <USBD_StdDevReq>
 80143b6:	4603      	mov	r3, r0
 80143b8:	73fb      	strb	r3, [r7, #15]
      break;
 80143ba:	e020      	b.n	80143fe <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80143c2:	4619      	mov	r1, r3
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f000 fa7b 	bl	80148c0 <USBD_StdItfReq>
 80143ca:	4603      	mov	r3, r0
 80143cc:	73fb      	strb	r3, [r7, #15]
      break;
 80143ce:	e016      	b.n	80143fe <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80143d6:	4619      	mov	r1, r3
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f000 fab7 	bl	801494c <USBD_StdEPReq>
 80143de:	4603      	mov	r3, r0
 80143e0:	73fb      	strb	r3, [r7, #15]
      break;
 80143e2:	e00c      	b.n	80143fe <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80143ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	4619      	mov	r1, r3
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f003 fedf 	bl	80181b6 <USBD_LL_StallEP>
 80143f8:	4603      	mov	r3, r0
 80143fa:	73fb      	strb	r3, [r7, #15]
      break;
 80143fc:	bf00      	nop
  }

  return ret;
 80143fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014400:	4618      	mov	r0, r3
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b086      	sub	sp, #24
 801440c:	af00      	add	r7, sp, #0
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	460b      	mov	r3, r1
 8014412:	607a      	str	r2, [r7, #4]
 8014414:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014416:	7afb      	ldrb	r3, [r7, #11]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d137      	bne.n	801448c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014422:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801442a:	2b03      	cmp	r3, #3
 801442c:	d14a      	bne.n	80144c4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	689a      	ldr	r2, [r3, #8]
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	68db      	ldr	r3, [r3, #12]
 8014436:	429a      	cmp	r2, r3
 8014438:	d913      	bls.n	8014462 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	689a      	ldr	r2, [r3, #8]
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	68db      	ldr	r3, [r3, #12]
 8014442:	1ad2      	subs	r2, r2, r3
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	68da      	ldr	r2, [r3, #12]
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	689b      	ldr	r3, [r3, #8]
 8014450:	4293      	cmp	r3, r2
 8014452:	bf28      	it	cs
 8014454:	4613      	movcs	r3, r2
 8014456:	461a      	mov	r2, r3
 8014458:	6879      	ldr	r1, [r7, #4]
 801445a:	68f8      	ldr	r0, [r7, #12]
 801445c:	f000 ff8f 	bl	801537e <USBD_CtlContinueRx>
 8014460:	e030      	b.n	80144c4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014468:	691b      	ldr	r3, [r3, #16]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d00a      	beq.n	8014484 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014474:	2b03      	cmp	r3, #3
 8014476:	d105      	bne.n	8014484 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801447e:	691b      	ldr	r3, [r3, #16]
 8014480:	68f8      	ldr	r0, [r7, #12]
 8014482:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f000 ff8b 	bl	80153a0 <USBD_CtlSendStatus>
 801448a:	e01b      	b.n	80144c4 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014492:	699b      	ldr	r3, [r3, #24]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d013      	beq.n	80144c0 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801449e:	2b03      	cmp	r3, #3
 80144a0:	d10e      	bne.n	80144c0 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144a8:	699b      	ldr	r3, [r3, #24]
 80144aa:	7afa      	ldrb	r2, [r7, #11]
 80144ac:	4611      	mov	r1, r2
 80144ae:	68f8      	ldr	r0, [r7, #12]
 80144b0:	4798      	blx	r3
 80144b2:	4603      	mov	r3, r0
 80144b4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80144b6:	7dfb      	ldrb	r3, [r7, #23]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d003      	beq.n	80144c4 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80144bc:	7dfb      	ldrb	r3, [r7, #23]
 80144be:	e002      	b.n	80144c6 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80144c0:	2303      	movs	r3, #3
 80144c2:	e000      	b.n	80144c6 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80144c4:	2300      	movs	r3, #0
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3718      	adds	r7, #24
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}

080144ce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b086      	sub	sp, #24
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	60f8      	str	r0, [r7, #12]
 80144d6:	460b      	mov	r3, r1
 80144d8:	607a      	str	r2, [r7, #4]
 80144da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80144dc:	7afb      	ldrb	r3, [r7, #11]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d16a      	bne.n	80145b8 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	3314      	adds	r3, #20
 80144e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80144ee:	2b02      	cmp	r3, #2
 80144f0:	d155      	bne.n	801459e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	689a      	ldr	r2, [r3, #8]
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	68db      	ldr	r3, [r3, #12]
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d914      	bls.n	8014528 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	689a      	ldr	r2, [r3, #8]
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	68db      	ldr	r3, [r3, #12]
 8014506:	1ad2      	subs	r2, r2, r3
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	689b      	ldr	r3, [r3, #8]
 8014510:	461a      	mov	r2, r3
 8014512:	6879      	ldr	r1, [r7, #4]
 8014514:	68f8      	ldr	r0, [r7, #12]
 8014516:	f000 ff21 	bl	801535c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801451a:	2300      	movs	r3, #0
 801451c:	2200      	movs	r2, #0
 801451e:	2100      	movs	r1, #0
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	f003 fef2 	bl	801830a <USBD_LL_PrepareReceive>
 8014526:	e03a      	b.n	801459e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	68da      	ldr	r2, [r3, #12]
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	689b      	ldr	r3, [r3, #8]
 8014530:	429a      	cmp	r2, r3
 8014532:	d11c      	bne.n	801456e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	685a      	ldr	r2, [r3, #4]
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801453c:	429a      	cmp	r2, r3
 801453e:	d316      	bcc.n	801456e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	685a      	ldr	r2, [r3, #4]
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801454a:	429a      	cmp	r2, r3
 801454c:	d20f      	bcs.n	801456e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801454e:	2200      	movs	r2, #0
 8014550:	2100      	movs	r1, #0
 8014552:	68f8      	ldr	r0, [r7, #12]
 8014554:	f000 ff02 	bl	801535c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	2200      	movs	r2, #0
 801455c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014560:	2300      	movs	r3, #0
 8014562:	2200      	movs	r2, #0
 8014564:	2100      	movs	r1, #0
 8014566:	68f8      	ldr	r0, [r7, #12]
 8014568:	f003 fecf 	bl	801830a <USBD_LL_PrepareReceive>
 801456c:	e017      	b.n	801459e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014574:	68db      	ldr	r3, [r3, #12]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d00a      	beq.n	8014590 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014580:	2b03      	cmp	r3, #3
 8014582:	d105      	bne.n	8014590 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014590:	2180      	movs	r1, #128	; 0x80
 8014592:	68f8      	ldr	r0, [r7, #12]
 8014594:	f003 fe0f 	bl	80181b6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014598:	68f8      	ldr	r0, [r7, #12]
 801459a:	f000 ff14 	bl	80153c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80145a4:	2b01      	cmp	r3, #1
 80145a6:	d123      	bne.n	80145f0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80145a8:	68f8      	ldr	r0, [r7, #12]
 80145aa:	f7ff fe9b 	bl	80142e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	2200      	movs	r2, #0
 80145b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80145b6:	e01b      	b.n	80145f0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145be:	695b      	ldr	r3, [r3, #20]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d013      	beq.n	80145ec <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80145ca:	2b03      	cmp	r3, #3
 80145cc:	d10e      	bne.n	80145ec <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145d4:	695b      	ldr	r3, [r3, #20]
 80145d6:	7afa      	ldrb	r2, [r7, #11]
 80145d8:	4611      	mov	r1, r2
 80145da:	68f8      	ldr	r0, [r7, #12]
 80145dc:	4798      	blx	r3
 80145de:	4603      	mov	r3, r0
 80145e0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80145e2:	7dfb      	ldrb	r3, [r7, #23]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d003      	beq.n	80145f0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80145e8:	7dfb      	ldrb	r3, [r7, #23]
 80145ea:	e002      	b.n	80145f2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80145ec:	2303      	movs	r3, #3
 80145ee:	e000      	b.n	80145f2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80145f0:	2300      	movs	r3, #0
}
 80145f2:	4618      	mov	r0, r3
 80145f4:	3718      	adds	r7, #24
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}

080145fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80145fa:	b580      	push	{r7, lr}
 80145fc:	b082      	sub	sp, #8
 80145fe:	af00      	add	r7, sp, #0
 8014600:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	2201      	movs	r2, #1
 8014606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2200      	movs	r2, #0
 801460e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2200      	movs	r2, #0
 8014616:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014626:	2b00      	cmp	r3, #0
 8014628:	d009      	beq.n	801463e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014630:	685b      	ldr	r3, [r3, #4]
 8014632:	687a      	ldr	r2, [r7, #4]
 8014634:	6852      	ldr	r2, [r2, #4]
 8014636:	b2d2      	uxtb	r2, r2
 8014638:	4611      	mov	r1, r2
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801463e:	2340      	movs	r3, #64	; 0x40
 8014640:	2200      	movs	r2, #0
 8014642:	2100      	movs	r1, #0
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f003 fd52 	bl	80180ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	2201      	movs	r2, #1
 801464e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2240      	movs	r2, #64	; 0x40
 8014656:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801465a:	2340      	movs	r3, #64	; 0x40
 801465c:	2200      	movs	r2, #0
 801465e:	2180      	movs	r1, #128	; 0x80
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f003 fd44 	bl	80180ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2201      	movs	r2, #1
 801466a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2240      	movs	r2, #64	; 0x40
 8014670:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014672:	2300      	movs	r3, #0
}
 8014674:	4618      	mov	r0, r3
 8014676:	3708      	adds	r7, #8
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}

0801467c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801467c:	b480      	push	{r7}
 801467e:	b083      	sub	sp, #12
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	460b      	mov	r3, r1
 8014686:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	78fa      	ldrb	r2, [r7, #3]
 801468c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801468e:	2300      	movs	r3, #0
}
 8014690:	4618      	mov	r0, r3
 8014692:	370c      	adds	r7, #12
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801469c:	b480      	push	{r7}
 801469e:	b083      	sub	sp, #12
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2204      	movs	r2, #4
 80146b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80146b8:	2300      	movs	r3, #0
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr

080146c6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80146c6:	b480      	push	{r7}
 80146c8:	b083      	sub	sp, #12
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146d4:	2b04      	cmp	r3, #4
 80146d6:	d105      	bne.n	80146e4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80146e4:	2300      	movs	r3, #0
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	370c      	adds	r7, #12
 80146ea:	46bd      	mov	sp, r7
 80146ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f0:	4770      	bx	lr

080146f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80146f2:	b580      	push	{r7, lr}
 80146f4:	b082      	sub	sp, #8
 80146f6:	af00      	add	r7, sp, #0
 80146f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014700:	2b03      	cmp	r3, #3
 8014702:	d10b      	bne.n	801471c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801470a:	69db      	ldr	r3, [r3, #28]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d005      	beq.n	801471c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014716:	69db      	ldr	r3, [r3, #28]
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801471c:	2300      	movs	r3, #0
}
 801471e:	4618      	mov	r0, r3
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}

08014726 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014726:	b480      	push	{r7}
 8014728:	b083      	sub	sp, #12
 801472a:	af00      	add	r7, sp, #0
 801472c:	6078      	str	r0, [r7, #4]
 801472e:	460b      	mov	r3, r1
 8014730:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8014732:	2300      	movs	r3, #0
}
 8014734:	4618      	mov	r0, r3
 8014736:	370c      	adds	r7, #12
 8014738:	46bd      	mov	sp, r7
 801473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473e:	4770      	bx	lr

08014740 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	460b      	mov	r3, r1
 801474a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801474c:	2300      	movs	r3, #0
}
 801474e:	4618      	mov	r0, r3
 8014750:	370c      	adds	r7, #12
 8014752:	46bd      	mov	sp, r7
 8014754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014758:	4770      	bx	lr

0801475a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801475a:	b480      	push	{r7}
 801475c:	b083      	sub	sp, #12
 801475e:	af00      	add	r7, sp, #0
 8014760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014762:	2300      	movs	r3, #0
}
 8014764:	4618      	mov	r0, r3
 8014766:	370c      	adds	r7, #12
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr

08014770 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2201      	movs	r2, #1
 801477c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014786:	2b00      	cmp	r3, #0
 8014788:	d009      	beq.n	801479e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	6852      	ldr	r2, [r2, #4]
 8014796:	b2d2      	uxtb	r2, r2
 8014798:	4611      	mov	r1, r2
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	4798      	blx	r3
  }

  return USBD_OK;
 801479e:	2300      	movs	r3, #0
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	3708      	adds	r7, #8
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}

080147a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80147a8:	b480      	push	{r7}
 80147aa:	b087      	sub	sp, #28
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	781b      	ldrb	r3, [r3, #0]
 80147b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	3301      	adds	r3, #1
 80147be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80147c6:	8a3b      	ldrh	r3, [r7, #16]
 80147c8:	021b      	lsls	r3, r3, #8
 80147ca:	b21a      	sxth	r2, r3
 80147cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147d0:	4313      	orrs	r3, r2
 80147d2:	b21b      	sxth	r3, r3
 80147d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80147d6:	89fb      	ldrh	r3, [r7, #14]
}
 80147d8:	4618      	mov	r0, r3
 80147da:	371c      	adds	r7, #28
 80147dc:	46bd      	mov	sp, r7
 80147de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e2:	4770      	bx	lr

080147e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b084      	sub	sp, #16
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80147ee:	2300      	movs	r3, #0
 80147f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80147fa:	2b20      	cmp	r3, #32
 80147fc:	d004      	beq.n	8014808 <USBD_StdDevReq+0x24>
 80147fe:	2b40      	cmp	r3, #64	; 0x40
 8014800:	d002      	beq.n	8014808 <USBD_StdDevReq+0x24>
 8014802:	2b00      	cmp	r3, #0
 8014804:	d00a      	beq.n	801481c <USBD_StdDevReq+0x38>
 8014806:	e050      	b.n	80148aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801480e:	689b      	ldr	r3, [r3, #8]
 8014810:	6839      	ldr	r1, [r7, #0]
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	4798      	blx	r3
 8014816:	4603      	mov	r3, r0
 8014818:	73fb      	strb	r3, [r7, #15]
    break;
 801481a:	e04b      	b.n	80148b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	785b      	ldrb	r3, [r3, #1]
 8014820:	2b09      	cmp	r3, #9
 8014822:	d83c      	bhi.n	801489e <USBD_StdDevReq+0xba>
 8014824:	a201      	add	r2, pc, #4	; (adr r2, 801482c <USBD_StdDevReq+0x48>)
 8014826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801482a:	bf00      	nop
 801482c:	08014881 	.word	0x08014881
 8014830:	08014895 	.word	0x08014895
 8014834:	0801489f 	.word	0x0801489f
 8014838:	0801488b 	.word	0x0801488b
 801483c:	0801489f 	.word	0x0801489f
 8014840:	0801485f 	.word	0x0801485f
 8014844:	08014855 	.word	0x08014855
 8014848:	0801489f 	.word	0x0801489f
 801484c:	08014877 	.word	0x08014877
 8014850:	08014869 	.word	0x08014869
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8014854:	6839      	ldr	r1, [r7, #0]
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 f9ce 	bl	8014bf8 <USBD_GetDescriptor>
      break;
 801485c:	e024      	b.n	80148a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801485e:	6839      	ldr	r1, [r7, #0]
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f000 fb33 	bl	8014ecc <USBD_SetAddress>
      break;
 8014866:	e01f      	b.n	80148a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8014868:	6839      	ldr	r1, [r7, #0]
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 fb70 	bl	8014f50 <USBD_SetConfig>
 8014870:	4603      	mov	r3, r0
 8014872:	73fb      	strb	r3, [r7, #15]
      break;
 8014874:	e018      	b.n	80148a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8014876:	6839      	ldr	r1, [r7, #0]
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f000 fc0d 	bl	8015098 <USBD_GetConfig>
      break;
 801487e:	e013      	b.n	80148a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8014880:	6839      	ldr	r1, [r7, #0]
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f000 fc3c 	bl	8015100 <USBD_GetStatus>
      break;
 8014888:	e00e      	b.n	80148a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801488a:	6839      	ldr	r1, [r7, #0]
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 fc6a 	bl	8015166 <USBD_SetFeature>
      break;
 8014892:	e009      	b.n	80148a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 fc79 	bl	801518e <USBD_ClrFeature>
      break;
 801489c:	e004      	b.n	80148a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801489e:	6839      	ldr	r1, [r7, #0]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f000 fccf 	bl	8015244 <USBD_CtlError>
      break;
 80148a6:	bf00      	nop
    }
    break;
 80148a8:	e004      	b.n	80148b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80148aa:	6839      	ldr	r1, [r7, #0]
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 fcc9 	bl	8015244 <USBD_CtlError>
    break;
 80148b2:	bf00      	nop
  }

  return ret;
 80148b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop

080148c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b084      	sub	sp, #16
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148ca:	2300      	movs	r3, #0
 80148cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148d6:	2b20      	cmp	r3, #32
 80148d8:	d003      	beq.n	80148e2 <USBD_StdItfReq+0x22>
 80148da:	2b40      	cmp	r3, #64	; 0x40
 80148dc:	d001      	beq.n	80148e2 <USBD_StdItfReq+0x22>
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d12a      	bne.n	8014938 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148e8:	3b01      	subs	r3, #1
 80148ea:	2b02      	cmp	r3, #2
 80148ec:	d81d      	bhi.n	801492a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	889b      	ldrh	r3, [r3, #4]
 80148f2:	b2db      	uxtb	r3, r3
 80148f4:	2b01      	cmp	r3, #1
 80148f6:	d813      	bhi.n	8014920 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148fe:	689b      	ldr	r3, [r3, #8]
 8014900:	6839      	ldr	r1, [r7, #0]
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	4798      	blx	r3
 8014906:	4603      	mov	r3, r0
 8014908:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	88db      	ldrh	r3, [r3, #6]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d110      	bne.n	8014934 <USBD_StdItfReq+0x74>
 8014912:	7bfb      	ldrb	r3, [r7, #15]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d10d      	bne.n	8014934 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f000 fd41 	bl	80153a0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801491e:	e009      	b.n	8014934 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8014920:	6839      	ldr	r1, [r7, #0]
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f000 fc8e 	bl	8015244 <USBD_CtlError>
      break;
 8014928:	e004      	b.n	8014934 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801492a:	6839      	ldr	r1, [r7, #0]
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f000 fc89 	bl	8015244 <USBD_CtlError>
      break;
 8014932:	e000      	b.n	8014936 <USBD_StdItfReq+0x76>
      break;
 8014934:	bf00      	nop
    }
    break;
 8014936:	e004      	b.n	8014942 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8014938:	6839      	ldr	r1, [r7, #0]
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 fc82 	bl	8015244 <USBD_CtlError>
    break;
 8014940:	bf00      	nop
  }

  return ret;
 8014942:	7bfb      	ldrb	r3, [r7, #15]
}
 8014944:	4618      	mov	r0, r3
 8014946:	3710      	adds	r7, #16
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014956:	2300      	movs	r3, #0
 8014958:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	889b      	ldrh	r3, [r3, #4]
 801495e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	781b      	ldrb	r3, [r3, #0]
 8014964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014968:	2b20      	cmp	r3, #32
 801496a:	d004      	beq.n	8014976 <USBD_StdEPReq+0x2a>
 801496c:	2b40      	cmp	r3, #64	; 0x40
 801496e:	d002      	beq.n	8014976 <USBD_StdEPReq+0x2a>
 8014970:	2b00      	cmp	r3, #0
 8014972:	d00a      	beq.n	801498a <USBD_StdEPReq+0x3e>
 8014974:	e135      	b.n	8014be2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801497c:	689b      	ldr	r3, [r3, #8]
 801497e:	6839      	ldr	r1, [r7, #0]
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	4798      	blx	r3
 8014984:	4603      	mov	r3, r0
 8014986:	73fb      	strb	r3, [r7, #15]
    break;
 8014988:	e130      	b.n	8014bec <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	785b      	ldrb	r3, [r3, #1]
 801498e:	2b01      	cmp	r3, #1
 8014990:	d03e      	beq.n	8014a10 <USBD_StdEPReq+0xc4>
 8014992:	2b03      	cmp	r3, #3
 8014994:	d002      	beq.n	801499c <USBD_StdEPReq+0x50>
 8014996:	2b00      	cmp	r3, #0
 8014998:	d077      	beq.n	8014a8a <USBD_StdEPReq+0x13e>
 801499a:	e11c      	b.n	8014bd6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149a2:	2b02      	cmp	r3, #2
 80149a4:	d002      	beq.n	80149ac <USBD_StdEPReq+0x60>
 80149a6:	2b03      	cmp	r3, #3
 80149a8:	d015      	beq.n	80149d6 <USBD_StdEPReq+0x8a>
 80149aa:	e02b      	b.n	8014a04 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80149ac:	7bbb      	ldrb	r3, [r7, #14]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d00c      	beq.n	80149cc <USBD_StdEPReq+0x80>
 80149b2:	7bbb      	ldrb	r3, [r7, #14]
 80149b4:	2b80      	cmp	r3, #128	; 0x80
 80149b6:	d009      	beq.n	80149cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80149b8:	7bbb      	ldrb	r3, [r7, #14]
 80149ba:	4619      	mov	r1, r3
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f003 fbfa 	bl	80181b6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80149c2:	2180      	movs	r1, #128	; 0x80
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f003 fbf6 	bl	80181b6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80149ca:	e020      	b.n	8014a0e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80149cc:	6839      	ldr	r1, [r7, #0]
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 fc38 	bl	8015244 <USBD_CtlError>
        break;
 80149d4:	e01b      	b.n	8014a0e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	885b      	ldrh	r3, [r3, #2]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d10e      	bne.n	80149fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80149de:	7bbb      	ldrb	r3, [r7, #14]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d00b      	beq.n	80149fc <USBD_StdEPReq+0xb0>
 80149e4:	7bbb      	ldrb	r3, [r7, #14]
 80149e6:	2b80      	cmp	r3, #128	; 0x80
 80149e8:	d008      	beq.n	80149fc <USBD_StdEPReq+0xb0>
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	88db      	ldrh	r3, [r3, #6]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d104      	bne.n	80149fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80149f2:	7bbb      	ldrb	r3, [r7, #14]
 80149f4:	4619      	mov	r1, r3
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f003 fbdd 	bl	80181b6 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f000 fccf 	bl	80153a0 <USBD_CtlSendStatus>

        break;
 8014a02:	e004      	b.n	8014a0e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8014a04:	6839      	ldr	r1, [r7, #0]
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f000 fc1c 	bl	8015244 <USBD_CtlError>
        break;
 8014a0c:	bf00      	nop
      }
      break;
 8014a0e:	e0e7      	b.n	8014be0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a16:	2b02      	cmp	r3, #2
 8014a18:	d002      	beq.n	8014a20 <USBD_StdEPReq+0xd4>
 8014a1a:	2b03      	cmp	r3, #3
 8014a1c:	d015      	beq.n	8014a4a <USBD_StdEPReq+0xfe>
 8014a1e:	e02d      	b.n	8014a7c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a20:	7bbb      	ldrb	r3, [r7, #14]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d00c      	beq.n	8014a40 <USBD_StdEPReq+0xf4>
 8014a26:	7bbb      	ldrb	r3, [r7, #14]
 8014a28:	2b80      	cmp	r3, #128	; 0x80
 8014a2a:	d009      	beq.n	8014a40 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a2c:	7bbb      	ldrb	r3, [r7, #14]
 8014a2e:	4619      	mov	r1, r3
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f003 fbc0 	bl	80181b6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a36:	2180      	movs	r1, #128	; 0x80
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f003 fbbc 	bl	80181b6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8014a3e:	e023      	b.n	8014a88 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8014a40:	6839      	ldr	r1, [r7, #0]
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 fbfe 	bl	8015244 <USBD_CtlError>
        break;
 8014a48:	e01e      	b.n	8014a88 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	885b      	ldrh	r3, [r3, #2]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d119      	bne.n	8014a86 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8014a52:	7bbb      	ldrb	r3, [r7, #14]
 8014a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d004      	beq.n	8014a66 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014a5c:	7bbb      	ldrb	r3, [r7, #14]
 8014a5e:	4619      	mov	r1, r3
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f003 fbc7 	bl	80181f4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f000 fc9a 	bl	80153a0 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a72:	689b      	ldr	r3, [r3, #8]
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	4798      	blx	r3
        }
        break;
 8014a7a:	e004      	b.n	8014a86 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8014a7c:	6839      	ldr	r1, [r7, #0]
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f000 fbe0 	bl	8015244 <USBD_CtlError>
        break;
 8014a84:	e000      	b.n	8014a88 <USBD_StdEPReq+0x13c>
        break;
 8014a86:	bf00      	nop
      }
      break;
 8014a88:	e0aa      	b.n	8014be0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a90:	2b02      	cmp	r3, #2
 8014a92:	d002      	beq.n	8014a9a <USBD_StdEPReq+0x14e>
 8014a94:	2b03      	cmp	r3, #3
 8014a96:	d032      	beq.n	8014afe <USBD_StdEPReq+0x1b2>
 8014a98:	e097      	b.n	8014bca <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a9a:	7bbb      	ldrb	r3, [r7, #14]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d007      	beq.n	8014ab0 <USBD_StdEPReq+0x164>
 8014aa0:	7bbb      	ldrb	r3, [r7, #14]
 8014aa2:	2b80      	cmp	r3, #128	; 0x80
 8014aa4:	d004      	beq.n	8014ab0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8014aa6:	6839      	ldr	r1, [r7, #0]
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f000 fbcb 	bl	8015244 <USBD_CtlError>
          break;
 8014aae:	e091      	b.n	8014bd4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	da0b      	bge.n	8014ad0 <USBD_StdEPReq+0x184>
 8014ab8:	7bbb      	ldrb	r3, [r7, #14]
 8014aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014abe:	4613      	mov	r3, r2
 8014ac0:	009b      	lsls	r3, r3, #2
 8014ac2:	4413      	add	r3, r2
 8014ac4:	009b      	lsls	r3, r3, #2
 8014ac6:	3310      	adds	r3, #16
 8014ac8:	687a      	ldr	r2, [r7, #4]
 8014aca:	4413      	add	r3, r2
 8014acc:	3304      	adds	r3, #4
 8014ace:	e00b      	b.n	8014ae8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014ad0:	7bbb      	ldrb	r3, [r7, #14]
 8014ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4413      	add	r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	3304      	adds	r3, #4
 8014ae8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	2200      	movs	r2, #0
 8014aee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	2202      	movs	r2, #2
 8014af4:	4619      	mov	r1, r3
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	f000 fc15 	bl	8015326 <USBD_CtlSendData>
        break;
 8014afc:	e06a      	b.n	8014bd4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8014afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	da11      	bge.n	8014b2a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014b06:	7bbb      	ldrb	r3, [r7, #14]
 8014b08:	f003 020f 	and.w	r2, r3, #15
 8014b0c:	6879      	ldr	r1, [r7, #4]
 8014b0e:	4613      	mov	r3, r2
 8014b10:	009b      	lsls	r3, r3, #2
 8014b12:	4413      	add	r3, r2
 8014b14:	009b      	lsls	r3, r3, #2
 8014b16:	440b      	add	r3, r1
 8014b18:	3324      	adds	r3, #36	; 0x24
 8014b1a:	881b      	ldrh	r3, [r3, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d117      	bne.n	8014b50 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014b20:	6839      	ldr	r1, [r7, #0]
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f000 fb8e 	bl	8015244 <USBD_CtlError>
            break;
 8014b28:	e054      	b.n	8014bd4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014b2a:	7bbb      	ldrb	r3, [r7, #14]
 8014b2c:	f003 020f 	and.w	r2, r3, #15
 8014b30:	6879      	ldr	r1, [r7, #4]
 8014b32:	4613      	mov	r3, r2
 8014b34:	009b      	lsls	r3, r3, #2
 8014b36:	4413      	add	r3, r2
 8014b38:	009b      	lsls	r3, r3, #2
 8014b3a:	440b      	add	r3, r1
 8014b3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d104      	bne.n	8014b50 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8014b46:	6839      	ldr	r1, [r7, #0]
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f000 fb7b 	bl	8015244 <USBD_CtlError>
            break;
 8014b4e:	e041      	b.n	8014bd4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	da0b      	bge.n	8014b70 <USBD_StdEPReq+0x224>
 8014b58:	7bbb      	ldrb	r3, [r7, #14]
 8014b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014b5e:	4613      	mov	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4413      	add	r3, r2
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	3310      	adds	r3, #16
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	3304      	adds	r3, #4
 8014b6e:	e00b      	b.n	8014b88 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8014b70:	7bbb      	ldrb	r3, [r7, #14]
 8014b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b76:	4613      	mov	r3, r2
 8014b78:	009b      	lsls	r3, r3, #2
 8014b7a:	4413      	add	r3, r2
 8014b7c:	009b      	lsls	r3, r3, #2
 8014b7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	4413      	add	r3, r2
 8014b86:	3304      	adds	r3, #4
 8014b88:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014b8a:	7bbb      	ldrb	r3, [r7, #14]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d002      	beq.n	8014b96 <USBD_StdEPReq+0x24a>
 8014b90:	7bbb      	ldrb	r3, [r7, #14]
 8014b92:	2b80      	cmp	r3, #128	; 0x80
 8014b94:	d103      	bne.n	8014b9e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	601a      	str	r2, [r3, #0]
 8014b9c:	e00e      	b.n	8014bbc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014b9e:	7bbb      	ldrb	r3, [r7, #14]
 8014ba0:	4619      	mov	r1, r3
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f003 fb45 	bl	8018232 <USBD_LL_IsStallEP>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d003      	beq.n	8014bb6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	2201      	movs	r2, #1
 8014bb2:	601a      	str	r2, [r3, #0]
 8014bb4:	e002      	b.n	8014bbc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	2202      	movs	r2, #2
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f000 fbaf 	bl	8015326 <USBD_CtlSendData>
          break;
 8014bc8:	e004      	b.n	8014bd4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8014bca:	6839      	ldr	r1, [r7, #0]
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f000 fb39 	bl	8015244 <USBD_CtlError>
        break;
 8014bd2:	bf00      	nop
      }
      break;
 8014bd4:	e004      	b.n	8014be0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8014bd6:	6839      	ldr	r1, [r7, #0]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 fb33 	bl	8015244 <USBD_CtlError>
      break;
 8014bde:	bf00      	nop
    }
    break;
 8014be0:	e004      	b.n	8014bec <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8014be2:	6839      	ldr	r1, [r7, #0]
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f000 fb2d 	bl	8015244 <USBD_CtlError>
    break;
 8014bea:	bf00      	nop
  }

  return ret;
 8014bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3710      	adds	r7, #16
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
	...

08014bf8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014c02:	2300      	movs	r3, #0
 8014c04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014c06:	2300      	movs	r3, #0
 8014c08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	885b      	ldrh	r3, [r3, #2]
 8014c12:	0a1b      	lsrs	r3, r3, #8
 8014c14:	b29b      	uxth	r3, r3
 8014c16:	3b01      	subs	r3, #1
 8014c18:	2b06      	cmp	r3, #6
 8014c1a:	f200 8128 	bhi.w	8014e6e <USBD_GetDescriptor+0x276>
 8014c1e:	a201      	add	r2, pc, #4	; (adr r2, 8014c24 <USBD_GetDescriptor+0x2c>)
 8014c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c24:	08014c41 	.word	0x08014c41
 8014c28:	08014c59 	.word	0x08014c59
 8014c2c:	08014c99 	.word	0x08014c99
 8014c30:	08014e6f 	.word	0x08014e6f
 8014c34:	08014e6f 	.word	0x08014e6f
 8014c38:	08014e0f 	.word	0x08014e0f
 8014c3c:	08014e3b 	.word	0x08014e3b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	7c12      	ldrb	r2, [r2, #16]
 8014c4c:	f107 0108 	add.w	r1, r7, #8
 8014c50:	4610      	mov	r0, r2
 8014c52:	4798      	blx	r3
 8014c54:	60f8      	str	r0, [r7, #12]
    break;
 8014c56:	e112      	b.n	8014e7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	7c1b      	ldrb	r3, [r3, #16]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d10d      	bne.n	8014c7c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c68:	f107 0208 	add.w	r2, r7, #8
 8014c6c:	4610      	mov	r0, r2
 8014c6e:	4798      	blx	r3
 8014c70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	3301      	adds	r3, #1
 8014c76:	2202      	movs	r2, #2
 8014c78:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8014c7a:	e100      	b.n	8014e7e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c84:	f107 0208 	add.w	r2, r7, #8
 8014c88:	4610      	mov	r0, r2
 8014c8a:	4798      	blx	r3
 8014c8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	3301      	adds	r3, #1
 8014c92:	2202      	movs	r2, #2
 8014c94:	701a      	strb	r2, [r3, #0]
    break;
 8014c96:	e0f2      	b.n	8014e7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	885b      	ldrh	r3, [r3, #2]
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	2b05      	cmp	r3, #5
 8014ca0:	f200 80ac 	bhi.w	8014dfc <USBD_GetDescriptor+0x204>
 8014ca4:	a201      	add	r2, pc, #4	; (adr r2, 8014cac <USBD_GetDescriptor+0xb4>)
 8014ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014caa:	bf00      	nop
 8014cac:	08014cc5 	.word	0x08014cc5
 8014cb0:	08014cf9 	.word	0x08014cf9
 8014cb4:	08014d2d 	.word	0x08014d2d
 8014cb8:	08014d61 	.word	0x08014d61
 8014cbc:	08014d95 	.word	0x08014d95
 8014cc0:	08014dc9 	.word	0x08014dc9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cca:	685b      	ldr	r3, [r3, #4]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d00b      	beq.n	8014ce8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cd6:	685b      	ldr	r3, [r3, #4]
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	7c12      	ldrb	r2, [r2, #16]
 8014cdc:	f107 0108 	add.w	r1, r7, #8
 8014ce0:	4610      	mov	r0, r2
 8014ce2:	4798      	blx	r3
 8014ce4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ce6:	e091      	b.n	8014e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014ce8:	6839      	ldr	r1, [r7, #0]
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f000 faaa 	bl	8015244 <USBD_CtlError>
        err++;
 8014cf0:	7afb      	ldrb	r3, [r7, #11]
 8014cf2:	3301      	adds	r3, #1
 8014cf4:	72fb      	strb	r3, [r7, #11]
      break;
 8014cf6:	e089      	b.n	8014e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cfe:	689b      	ldr	r3, [r3, #8]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d00b      	beq.n	8014d1c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	687a      	ldr	r2, [r7, #4]
 8014d0e:	7c12      	ldrb	r2, [r2, #16]
 8014d10:	f107 0108 	add.w	r1, r7, #8
 8014d14:	4610      	mov	r0, r2
 8014d16:	4798      	blx	r3
 8014d18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d1a:	e077      	b.n	8014e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d1c:	6839      	ldr	r1, [r7, #0]
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f000 fa90 	bl	8015244 <USBD_CtlError>
        err++;
 8014d24:	7afb      	ldrb	r3, [r7, #11]
 8014d26:	3301      	adds	r3, #1
 8014d28:	72fb      	strb	r3, [r7, #11]
      break;
 8014d2a:	e06f      	b.n	8014e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d32:	68db      	ldr	r3, [r3, #12]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d00b      	beq.n	8014d50 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d3e:	68db      	ldr	r3, [r3, #12]
 8014d40:	687a      	ldr	r2, [r7, #4]
 8014d42:	7c12      	ldrb	r2, [r2, #16]
 8014d44:	f107 0108 	add.w	r1, r7, #8
 8014d48:	4610      	mov	r0, r2
 8014d4a:	4798      	blx	r3
 8014d4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d4e:	e05d      	b.n	8014e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d50:	6839      	ldr	r1, [r7, #0]
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f000 fa76 	bl	8015244 <USBD_CtlError>
        err++;
 8014d58:	7afb      	ldrb	r3, [r7, #11]
 8014d5a:	3301      	adds	r3, #1
 8014d5c:	72fb      	strb	r3, [r7, #11]
      break;
 8014d5e:	e055      	b.n	8014e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d66:	691b      	ldr	r3, [r3, #16]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d00b      	beq.n	8014d84 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d72:	691b      	ldr	r3, [r3, #16]
 8014d74:	687a      	ldr	r2, [r7, #4]
 8014d76:	7c12      	ldrb	r2, [r2, #16]
 8014d78:	f107 0108 	add.w	r1, r7, #8
 8014d7c:	4610      	mov	r0, r2
 8014d7e:	4798      	blx	r3
 8014d80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d82:	e043      	b.n	8014e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014d84:	6839      	ldr	r1, [r7, #0]
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f000 fa5c 	bl	8015244 <USBD_CtlError>
        err++;
 8014d8c:	7afb      	ldrb	r3, [r7, #11]
 8014d8e:	3301      	adds	r3, #1
 8014d90:	72fb      	strb	r3, [r7, #11]
      break;
 8014d92:	e03b      	b.n	8014e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d9a:	695b      	ldr	r3, [r3, #20]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d00b      	beq.n	8014db8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014da6:	695b      	ldr	r3, [r3, #20]
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	7c12      	ldrb	r2, [r2, #16]
 8014dac:	f107 0108 	add.w	r1, r7, #8
 8014db0:	4610      	mov	r0, r2
 8014db2:	4798      	blx	r3
 8014db4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014db6:	e029      	b.n	8014e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014db8:	6839      	ldr	r1, [r7, #0]
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f000 fa42 	bl	8015244 <USBD_CtlError>
        err++;
 8014dc0:	7afb      	ldrb	r3, [r7, #11]
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	72fb      	strb	r3, [r7, #11]
      break;
 8014dc6:	e021      	b.n	8014e0c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dce:	699b      	ldr	r3, [r3, #24]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d00b      	beq.n	8014dec <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dda:	699b      	ldr	r3, [r3, #24]
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	7c12      	ldrb	r2, [r2, #16]
 8014de0:	f107 0108 	add.w	r1, r7, #8
 8014de4:	4610      	mov	r0, r2
 8014de6:	4798      	blx	r3
 8014de8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dea:	e00f      	b.n	8014e0c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8014dec:	6839      	ldr	r1, [r7, #0]
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f000 fa28 	bl	8015244 <USBD_CtlError>
        err++;
 8014df4:	7afb      	ldrb	r3, [r7, #11]
 8014df6:	3301      	adds	r3, #1
 8014df8:	72fb      	strb	r3, [r7, #11]
      break;
 8014dfa:	e007      	b.n	8014e0c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8014dfc:	6839      	ldr	r1, [r7, #0]
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f000 fa20 	bl	8015244 <USBD_CtlError>
      err++;
 8014e04:	7afb      	ldrb	r3, [r7, #11]
 8014e06:	3301      	adds	r3, #1
 8014e08:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8014e0a:	bf00      	nop
    }
    break;
 8014e0c:	e037      	b.n	8014e7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	7c1b      	ldrb	r3, [r3, #16]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d109      	bne.n	8014e2a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e1e:	f107 0208 	add.w	r2, r7, #8
 8014e22:	4610      	mov	r0, r2
 8014e24:	4798      	blx	r3
 8014e26:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014e28:	e029      	b.n	8014e7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014e2a:	6839      	ldr	r1, [r7, #0]
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f000 fa09 	bl	8015244 <USBD_CtlError>
      err++;
 8014e32:	7afb      	ldrb	r3, [r7, #11]
 8014e34:	3301      	adds	r3, #1
 8014e36:	72fb      	strb	r3, [r7, #11]
    break;
 8014e38:	e021      	b.n	8014e7e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	7c1b      	ldrb	r3, [r3, #16]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d10d      	bne.n	8014e5e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e4a:	f107 0208 	add.w	r2, r7, #8
 8014e4e:	4610      	mov	r0, r2
 8014e50:	4798      	blx	r3
 8014e52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	3301      	adds	r3, #1
 8014e58:	2207      	movs	r2, #7
 8014e5a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8014e5c:	e00f      	b.n	8014e7e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8014e5e:	6839      	ldr	r1, [r7, #0]
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f000 f9ef 	bl	8015244 <USBD_CtlError>
      err++;
 8014e66:	7afb      	ldrb	r3, [r7, #11]
 8014e68:	3301      	adds	r3, #1
 8014e6a:	72fb      	strb	r3, [r7, #11]
    break;
 8014e6c:	e007      	b.n	8014e7e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8014e6e:	6839      	ldr	r1, [r7, #0]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f000 f9e7 	bl	8015244 <USBD_CtlError>
    err++;
 8014e76:	7afb      	ldrb	r3, [r7, #11]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	72fb      	strb	r3, [r7, #11]
    break;
 8014e7c:	bf00      	nop
  }

  if (err != 0U)
 8014e7e:	7afb      	ldrb	r3, [r7, #11]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d11e      	bne.n	8014ec2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	88db      	ldrh	r3, [r3, #6]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d016      	beq.n	8014eba <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8014e8c:	893b      	ldrh	r3, [r7, #8]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d00e      	beq.n	8014eb0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	88da      	ldrh	r2, [r3, #6]
 8014e96:	893b      	ldrh	r3, [r7, #8]
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	bf28      	it	cs
 8014e9c:	4613      	movcs	r3, r2
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014ea2:	893b      	ldrh	r3, [r7, #8]
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	68f9      	ldr	r1, [r7, #12]
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f000 fa3c 	bl	8015326 <USBD_CtlSendData>
 8014eae:	e009      	b.n	8014ec4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8014eb0:	6839      	ldr	r1, [r7, #0]
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f000 f9c6 	bl	8015244 <USBD_CtlError>
 8014eb8:	e004      	b.n	8014ec4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 fa70 	bl	80153a0 <USBD_CtlSendStatus>
 8014ec0:	e000      	b.n	8014ec4 <USBD_GetDescriptor+0x2cc>
    return;
 8014ec2:	bf00      	nop
    }
  }
}
 8014ec4:	3710      	adds	r7, #16
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop

08014ecc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b084      	sub	sp, #16
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	889b      	ldrh	r3, [r3, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d130      	bne.n	8014f40 <USBD_SetAddress+0x74>
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	88db      	ldrh	r3, [r3, #6]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d12c      	bne.n	8014f40 <USBD_SetAddress+0x74>
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	885b      	ldrh	r3, [r3, #2]
 8014eea:	2b7f      	cmp	r3, #127	; 0x7f
 8014eec:	d828      	bhi.n	8014f40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	885b      	ldrh	r3, [r3, #2]
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ef8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f00:	2b03      	cmp	r3, #3
 8014f02:	d104      	bne.n	8014f0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014f04:	6839      	ldr	r1, [r7, #0]
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f000 f99c 	bl	8015244 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f0c:	e01c      	b.n	8014f48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	7bfa      	ldrb	r2, [r7, #15]
 8014f12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014f16:	7bfb      	ldrb	r3, [r7, #15]
 8014f18:	4619      	mov	r1, r3
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f003 f9b5 	bl	801828a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f000 fa3d 	bl	80153a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014f26:	7bfb      	ldrb	r3, [r7, #15]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d004      	beq.n	8014f36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2202      	movs	r2, #2
 8014f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f34:	e008      	b.n	8014f48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	2201      	movs	r2, #1
 8014f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f3e:	e003      	b.n	8014f48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014f40:	6839      	ldr	r1, [r7, #0]
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f000 f97e 	bl	8015244 <USBD_CtlError>
  }
}
 8014f48:	bf00      	nop
 8014f4a:	3710      	adds	r7, #16
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}

08014f50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b084      	sub	sp, #16
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	885b      	ldrh	r3, [r3, #2]
 8014f62:	b2da      	uxtb	r2, r3
 8014f64:	4b4b      	ldr	r3, [pc, #300]	; (8015094 <USBD_SetConfig+0x144>)
 8014f66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f68:	4b4a      	ldr	r3, [pc, #296]	; (8015094 <USBD_SetConfig+0x144>)
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d905      	bls.n	8014f7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014f70:	6839      	ldr	r1, [r7, #0]
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f000 f966 	bl	8015244 <USBD_CtlError>
    return USBD_FAIL;
 8014f78:	2303      	movs	r3, #3
 8014f7a:	e087      	b.n	801508c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f82:	2b02      	cmp	r3, #2
 8014f84:	d002      	beq.n	8014f8c <USBD_SetConfig+0x3c>
 8014f86:	2b03      	cmp	r3, #3
 8014f88:	d025      	beq.n	8014fd6 <USBD_SetConfig+0x86>
 8014f8a:	e071      	b.n	8015070 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8014f8c:	4b41      	ldr	r3, [pc, #260]	; (8015094 <USBD_SetConfig+0x144>)
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d01c      	beq.n	8014fce <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8014f94:	4b3f      	ldr	r3, [pc, #252]	; (8015094 <USBD_SetConfig+0x144>)
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	461a      	mov	r2, r3
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014f9e:	4b3d      	ldr	r3, [pc, #244]	; (8015094 <USBD_SetConfig+0x144>)
 8014fa0:	781b      	ldrb	r3, [r3, #0]
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f7ff f9a8 	bl	80142fa <USBD_SetClassConfig>
 8014faa:	4603      	mov	r3, r0
 8014fac:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8014fae:	7bfb      	ldrb	r3, [r7, #15]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d004      	beq.n	8014fbe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8014fb4:	6839      	ldr	r1, [r7, #0]
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f000 f944 	bl	8015244 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8014fbc:	e065      	b.n	801508a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f000 f9ee 	bl	80153a0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2203      	movs	r2, #3
 8014fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8014fcc:	e05d      	b.n	801508a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f000 f9e6 	bl	80153a0 <USBD_CtlSendStatus>
    break;
 8014fd4:	e059      	b.n	801508a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8014fd6:	4b2f      	ldr	r3, [pc, #188]	; (8015094 <USBD_SetConfig+0x144>)
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d112      	bne.n	8015004 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2202      	movs	r2, #2
 8014fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8014fe6:	4b2b      	ldr	r3, [pc, #172]	; (8015094 <USBD_SetConfig+0x144>)
 8014fe8:	781b      	ldrb	r3, [r3, #0]
 8014fea:	461a      	mov	r2, r3
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014ff0:	4b28      	ldr	r3, [pc, #160]	; (8015094 <USBD_SetConfig+0x144>)
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f7ff f99b 	bl	8014332 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f000 f9cf 	bl	80153a0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015002:	e042      	b.n	801508a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8015004:	4b23      	ldr	r3, [pc, #140]	; (8015094 <USBD_SetConfig+0x144>)
 8015006:	781b      	ldrb	r3, [r3, #0]
 8015008:	461a      	mov	r2, r3
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	429a      	cmp	r2, r3
 8015010:	d02a      	beq.n	8015068 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	b2db      	uxtb	r3, r3
 8015018:	4619      	mov	r1, r3
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f7ff f989 	bl	8014332 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8015020:	4b1c      	ldr	r3, [pc, #112]	; (8015094 <USBD_SetConfig+0x144>)
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	461a      	mov	r2, r3
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801502a:	4b1a      	ldr	r3, [pc, #104]	; (8015094 <USBD_SetConfig+0x144>)
 801502c:	781b      	ldrb	r3, [r3, #0]
 801502e:	4619      	mov	r1, r3
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f7ff f962 	bl	80142fa <USBD_SetClassConfig>
 8015036:	4603      	mov	r3, r0
 8015038:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801503a:	7bfb      	ldrb	r3, [r7, #15]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00f      	beq.n	8015060 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8015040:	6839      	ldr	r1, [r7, #0]
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f000 f8fe 	bl	8015244 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	b2db      	uxtb	r3, r3
 801504e:	4619      	mov	r1, r3
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f7ff f96e 	bl	8014332 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2202      	movs	r2, #2
 801505a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801505e:	e014      	b.n	801508a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f000 f99d 	bl	80153a0 <USBD_CtlSendStatus>
    break;
 8015066:	e010      	b.n	801508a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f000 f999 	bl	80153a0 <USBD_CtlSendStatus>
    break;
 801506e:	e00c      	b.n	801508a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8015070:	6839      	ldr	r1, [r7, #0]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 f8e6 	bl	8015244 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015078:	4b06      	ldr	r3, [pc, #24]	; (8015094 <USBD_SetConfig+0x144>)
 801507a:	781b      	ldrb	r3, [r3, #0]
 801507c:	4619      	mov	r1, r3
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f7ff f957 	bl	8014332 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8015084:	2303      	movs	r3, #3
 8015086:	73fb      	strb	r3, [r7, #15]
    break;
 8015088:	bf00      	nop
  }

  return ret;
 801508a:	7bfb      	ldrb	r3, [r7, #15]
}
 801508c:	4618      	mov	r0, r3
 801508e:	3710      	adds	r7, #16
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}
 8015094:	2404034c 	.word	0x2404034c

08015098 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	88db      	ldrh	r3, [r3, #6]
 80150a6:	2b01      	cmp	r3, #1
 80150a8:	d004      	beq.n	80150b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80150aa:	6839      	ldr	r1, [r7, #0]
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f000 f8c9 	bl	8015244 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80150b2:	e021      	b.n	80150f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150ba:	2b01      	cmp	r3, #1
 80150bc:	db17      	blt.n	80150ee <USBD_GetConfig+0x56>
 80150be:	2b02      	cmp	r3, #2
 80150c0:	dd02      	ble.n	80150c8 <USBD_GetConfig+0x30>
 80150c2:	2b03      	cmp	r3, #3
 80150c4:	d00b      	beq.n	80150de <USBD_GetConfig+0x46>
 80150c6:	e012      	b.n	80150ee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2200      	movs	r2, #0
 80150cc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	3308      	adds	r3, #8
 80150d2:	2201      	movs	r2, #1
 80150d4:	4619      	mov	r1, r3
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f000 f925 	bl	8015326 <USBD_CtlSendData>
      break;
 80150dc:	e00c      	b.n	80150f8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	3304      	adds	r3, #4
 80150e2:	2201      	movs	r2, #1
 80150e4:	4619      	mov	r1, r3
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f000 f91d 	bl	8015326 <USBD_CtlSendData>
      break;
 80150ec:	e004      	b.n	80150f8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80150ee:	6839      	ldr	r1, [r7, #0]
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f000 f8a7 	bl	8015244 <USBD_CtlError>
      break;
 80150f6:	bf00      	nop
}
 80150f8:	bf00      	nop
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015110:	3b01      	subs	r3, #1
 8015112:	2b02      	cmp	r3, #2
 8015114:	d81e      	bhi.n	8015154 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	88db      	ldrh	r3, [r3, #6]
 801511a:	2b02      	cmp	r3, #2
 801511c:	d004      	beq.n	8015128 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801511e:	6839      	ldr	r1, [r7, #0]
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f000 f88f 	bl	8015244 <USBD_CtlError>
      break;
 8015126:	e01a      	b.n	801515e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2201      	movs	r2, #1
 801512c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015134:	2b00      	cmp	r3, #0
 8015136:	d005      	beq.n	8015144 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	68db      	ldr	r3, [r3, #12]
 801513c:	f043 0202 	orr.w	r2, r3, #2
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	330c      	adds	r3, #12
 8015148:	2202      	movs	r2, #2
 801514a:	4619      	mov	r1, r3
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	f000 f8ea 	bl	8015326 <USBD_CtlSendData>
    break;
 8015152:	e004      	b.n	801515e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8015154:	6839      	ldr	r1, [r7, #0]
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f000 f874 	bl	8015244 <USBD_CtlError>
    break;
 801515c:	bf00      	nop
  }
}
 801515e:	bf00      	nop
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}

08015166 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b082      	sub	sp, #8
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
 801516e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	885b      	ldrh	r3, [r3, #2]
 8015174:	2b01      	cmp	r3, #1
 8015176:	d106      	bne.n	8015186 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2201      	movs	r2, #1
 801517c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f000 f90d 	bl	80153a0 <USBD_CtlSendStatus>
  }
}
 8015186:	bf00      	nop
 8015188:	3708      	adds	r7, #8
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801518e:	b580      	push	{r7, lr}
 8015190:	b082      	sub	sp, #8
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
 8015196:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801519e:	3b01      	subs	r3, #1
 80151a0:	2b02      	cmp	r3, #2
 80151a2:	d80b      	bhi.n	80151bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	885b      	ldrh	r3, [r3, #2]
 80151a8:	2b01      	cmp	r3, #1
 80151aa:	d10c      	bne.n	80151c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2200      	movs	r2, #0
 80151b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f000 f8f3 	bl	80153a0 <USBD_CtlSendStatus>
      }
      break;
 80151ba:	e004      	b.n	80151c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80151bc:	6839      	ldr	r1, [r7, #0]
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f000 f840 	bl	8015244 <USBD_CtlError>
      break;
 80151c4:	e000      	b.n	80151c8 <USBD_ClrFeature+0x3a>
      break;
 80151c6:	bf00      	nop
  }
}
 80151c8:	bf00      	nop
 80151ca:	3708      	adds	r7, #8
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b084      	sub	sp, #16
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	781a      	ldrb	r2, [r3, #0]
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	3301      	adds	r3, #1
 80151ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	781a      	ldrb	r2, [r3, #0]
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	3301      	adds	r3, #1
 80151f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	f7ff fad4 	bl	80147a8 <SWAPBYTE>
 8015200:	4603      	mov	r3, r0
 8015202:	461a      	mov	r2, r3
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	3301      	adds	r3, #1
 801520c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	3301      	adds	r3, #1
 8015212:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015214:	68f8      	ldr	r0, [r7, #12]
 8015216:	f7ff fac7 	bl	80147a8 <SWAPBYTE>
 801521a:	4603      	mov	r3, r0
 801521c:	461a      	mov	r2, r3
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	3301      	adds	r3, #1
 8015226:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	3301      	adds	r3, #1
 801522c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801522e:	68f8      	ldr	r0, [r7, #12]
 8015230:	f7ff faba 	bl	80147a8 <SWAPBYTE>
 8015234:	4603      	mov	r3, r0
 8015236:	461a      	mov	r2, r3
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	80da      	strh	r2, [r3, #6]
}
 801523c:	bf00      	nop
 801523e:	3710      	adds	r7, #16
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801524e:	2180      	movs	r1, #128	; 0x80
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f002 ffb0 	bl	80181b6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015256:	2100      	movs	r1, #0
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f002 ffac 	bl	80181b6 <USBD_LL_StallEP>
}
 801525e:	bf00      	nop
 8015260:	3708      	adds	r7, #8
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}

08015266 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015266:	b580      	push	{r7, lr}
 8015268:	b086      	sub	sp, #24
 801526a:	af00      	add	r7, sp, #0
 801526c:	60f8      	str	r0, [r7, #12]
 801526e:	60b9      	str	r1, [r7, #8]
 8015270:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015272:	2300      	movs	r3, #0
 8015274:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d036      	beq.n	80152ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015280:	6938      	ldr	r0, [r7, #16]
 8015282:	f000 f836 	bl	80152f2 <USBD_GetLen>
 8015286:	4603      	mov	r3, r0
 8015288:	3301      	adds	r3, #1
 801528a:	b29b      	uxth	r3, r3
 801528c:	005b      	lsls	r3, r3, #1
 801528e:	b29a      	uxth	r2, r3
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015294:	7dfb      	ldrb	r3, [r7, #23]
 8015296:	68ba      	ldr	r2, [r7, #8]
 8015298:	4413      	add	r3, r2
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	7812      	ldrb	r2, [r2, #0]
 801529e:	701a      	strb	r2, [r3, #0]
  idx++;
 80152a0:	7dfb      	ldrb	r3, [r7, #23]
 80152a2:	3301      	adds	r3, #1
 80152a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80152a6:	7dfb      	ldrb	r3, [r7, #23]
 80152a8:	68ba      	ldr	r2, [r7, #8]
 80152aa:	4413      	add	r3, r2
 80152ac:	2203      	movs	r2, #3
 80152ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80152b0:	7dfb      	ldrb	r3, [r7, #23]
 80152b2:	3301      	adds	r3, #1
 80152b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80152b6:	e013      	b.n	80152e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80152b8:	7dfb      	ldrb	r3, [r7, #23]
 80152ba:	68ba      	ldr	r2, [r7, #8]
 80152bc:	4413      	add	r3, r2
 80152be:	693a      	ldr	r2, [r7, #16]
 80152c0:	7812      	ldrb	r2, [r2, #0]
 80152c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	3301      	adds	r3, #1
 80152c8:	613b      	str	r3, [r7, #16]
    idx++;
 80152ca:	7dfb      	ldrb	r3, [r7, #23]
 80152cc:	3301      	adds	r3, #1
 80152ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80152d0:	7dfb      	ldrb	r3, [r7, #23]
 80152d2:	68ba      	ldr	r2, [r7, #8]
 80152d4:	4413      	add	r3, r2
 80152d6:	2200      	movs	r2, #0
 80152d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80152da:	7dfb      	ldrb	r3, [r7, #23]
 80152dc:	3301      	adds	r3, #1
 80152de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	781b      	ldrb	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d1e7      	bne.n	80152b8 <USBD_GetString+0x52>
 80152e8:	e000      	b.n	80152ec <USBD_GetString+0x86>
    return;
 80152ea:	bf00      	nop
  }
}
 80152ec:	3718      	adds	r7, #24
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80152f2:	b480      	push	{r7}
 80152f4:	b085      	sub	sp, #20
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80152fa:	2300      	movs	r3, #0
 80152fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015302:	e005      	b.n	8015310 <USBD_GetLen+0x1e>
  {
    len++;
 8015304:	7bfb      	ldrb	r3, [r7, #15]
 8015306:	3301      	adds	r3, #1
 8015308:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801530a:	68bb      	ldr	r3, [r7, #8]
 801530c:	3301      	adds	r3, #1
 801530e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d1f5      	bne.n	8015304 <USBD_GetLen+0x12>
  }

  return len;
 8015318:	7bfb      	ldrb	r3, [r7, #15]
}
 801531a:	4618      	mov	r0, r3
 801531c:	3714      	adds	r7, #20
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr

08015326 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015326:	b580      	push	{r7, lr}
 8015328:	b084      	sub	sp, #16
 801532a:	af00      	add	r7, sp, #0
 801532c:	60f8      	str	r0, [r7, #12]
 801532e:	60b9      	str	r1, [r7, #8]
 8015330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2202      	movs	r2, #2
 8015336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	68ba      	ldr	r2, [r7, #8]
 801534a:	2100      	movs	r1, #0
 801534c:	68f8      	ldr	r0, [r7, #12]
 801534e:	f002 ffbb 	bl	80182c8 <USBD_LL_Transmit>

  return USBD_OK;
 8015352:	2300      	movs	r3, #0
}
 8015354:	4618      	mov	r0, r3
 8015356:	3710      	adds	r7, #16
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}

0801535c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b084      	sub	sp, #16
 8015360:	af00      	add	r7, sp, #0
 8015362:	60f8      	str	r0, [r7, #12]
 8015364:	60b9      	str	r1, [r7, #8]
 8015366:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	68ba      	ldr	r2, [r7, #8]
 801536c:	2100      	movs	r1, #0
 801536e:	68f8      	ldr	r0, [r7, #12]
 8015370:	f002 ffaa 	bl	80182c8 <USBD_LL_Transmit>

  return USBD_OK;
 8015374:	2300      	movs	r3, #0
}
 8015376:	4618      	mov	r0, r3
 8015378:	3710      	adds	r7, #16
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}

0801537e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801537e:	b580      	push	{r7, lr}
 8015380:	b084      	sub	sp, #16
 8015382:	af00      	add	r7, sp, #0
 8015384:	60f8      	str	r0, [r7, #12]
 8015386:	60b9      	str	r1, [r7, #8]
 8015388:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	68ba      	ldr	r2, [r7, #8]
 801538e:	2100      	movs	r1, #0
 8015390:	68f8      	ldr	r0, [r7, #12]
 8015392:	f002 ffba 	bl	801830a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015396:	2300      	movs	r3, #0
}
 8015398:	4618      	mov	r0, r3
 801539a:	3710      	adds	r7, #16
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2204      	movs	r2, #4
 80153ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80153b0:	2300      	movs	r3, #0
 80153b2:	2200      	movs	r2, #0
 80153b4:	2100      	movs	r1, #0
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f002 ff86 	bl	80182c8 <USBD_LL_Transmit>

  return USBD_OK;
 80153bc:	2300      	movs	r3, #0
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3708      	adds	r7, #8
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2205      	movs	r2, #5
 80153d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153d6:	2300      	movs	r3, #0
 80153d8:	2200      	movs	r2, #0
 80153da:	2100      	movs	r1, #0
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f002 ff94 	bl	801830a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153e2:	2300      	movs	r3, #0
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3708      	adds	r7, #8
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	4603      	mov	r3, r0
 80153f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80153f6:	79fb      	ldrb	r3, [r7, #7]
 80153f8:	4a08      	ldr	r2, [pc, #32]	; (801541c <disk_status+0x30>)
 80153fa:	009b      	lsls	r3, r3, #2
 80153fc:	4413      	add	r3, r2
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	685b      	ldr	r3, [r3, #4]
 8015402:	79fa      	ldrb	r2, [r7, #7]
 8015404:	4905      	ldr	r1, [pc, #20]	; (801541c <disk_status+0x30>)
 8015406:	440a      	add	r2, r1
 8015408:	7a12      	ldrb	r2, [r2, #8]
 801540a:	4610      	mov	r0, r2
 801540c:	4798      	blx	r3
 801540e:	4603      	mov	r3, r0
 8015410:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015412:	7bfb      	ldrb	r3, [r7, #15]
}
 8015414:	4618      	mov	r0, r3
 8015416:	3710      	adds	r7, #16
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	24040378 	.word	0x24040378

08015420 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	4603      	mov	r3, r0
 8015428:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801542a:	2300      	movs	r3, #0
 801542c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801542e:	79fb      	ldrb	r3, [r7, #7]
 8015430:	4a0d      	ldr	r2, [pc, #52]	; (8015468 <disk_initialize+0x48>)
 8015432:	5cd3      	ldrb	r3, [r2, r3]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d111      	bne.n	801545c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015438:	79fb      	ldrb	r3, [r7, #7]
 801543a:	4a0b      	ldr	r2, [pc, #44]	; (8015468 <disk_initialize+0x48>)
 801543c:	2101      	movs	r1, #1
 801543e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015440:	79fb      	ldrb	r3, [r7, #7]
 8015442:	4a09      	ldr	r2, [pc, #36]	; (8015468 <disk_initialize+0x48>)
 8015444:	009b      	lsls	r3, r3, #2
 8015446:	4413      	add	r3, r2
 8015448:	685b      	ldr	r3, [r3, #4]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	79fa      	ldrb	r2, [r7, #7]
 801544e:	4906      	ldr	r1, [pc, #24]	; (8015468 <disk_initialize+0x48>)
 8015450:	440a      	add	r2, r1
 8015452:	7a12      	ldrb	r2, [r2, #8]
 8015454:	4610      	mov	r0, r2
 8015456:	4798      	blx	r3
 8015458:	4603      	mov	r3, r0
 801545a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801545c:	7bfb      	ldrb	r3, [r7, #15]
}
 801545e:	4618      	mov	r0, r3
 8015460:	3710      	adds	r7, #16
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}
 8015466:	bf00      	nop
 8015468:	24040378 	.word	0x24040378

0801546c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801546c:	b590      	push	{r4, r7, lr}
 801546e:	b087      	sub	sp, #28
 8015470:	af00      	add	r7, sp, #0
 8015472:	60b9      	str	r1, [r7, #8]
 8015474:	607a      	str	r2, [r7, #4]
 8015476:	603b      	str	r3, [r7, #0]
 8015478:	4603      	mov	r3, r0
 801547a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801547c:	7bfb      	ldrb	r3, [r7, #15]
 801547e:	4a0a      	ldr	r2, [pc, #40]	; (80154a8 <disk_read+0x3c>)
 8015480:	009b      	lsls	r3, r3, #2
 8015482:	4413      	add	r3, r2
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	689c      	ldr	r4, [r3, #8]
 8015488:	7bfb      	ldrb	r3, [r7, #15]
 801548a:	4a07      	ldr	r2, [pc, #28]	; (80154a8 <disk_read+0x3c>)
 801548c:	4413      	add	r3, r2
 801548e:	7a18      	ldrb	r0, [r3, #8]
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	687a      	ldr	r2, [r7, #4]
 8015494:	68b9      	ldr	r1, [r7, #8]
 8015496:	47a0      	blx	r4
 8015498:	4603      	mov	r3, r0
 801549a:	75fb      	strb	r3, [r7, #23]
  return res;
 801549c:	7dfb      	ldrb	r3, [r7, #23]
}
 801549e:	4618      	mov	r0, r3
 80154a0:	371c      	adds	r7, #28
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd90      	pop	{r4, r7, pc}
 80154a6:	bf00      	nop
 80154a8:	24040378 	.word	0x24040378

080154ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80154ac:	b590      	push	{r4, r7, lr}
 80154ae:	b087      	sub	sp, #28
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	60b9      	str	r1, [r7, #8]
 80154b4:	607a      	str	r2, [r7, #4]
 80154b6:	603b      	str	r3, [r7, #0]
 80154b8:	4603      	mov	r3, r0
 80154ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80154bc:	7bfb      	ldrb	r3, [r7, #15]
 80154be:	4a0a      	ldr	r2, [pc, #40]	; (80154e8 <disk_write+0x3c>)
 80154c0:	009b      	lsls	r3, r3, #2
 80154c2:	4413      	add	r3, r2
 80154c4:	685b      	ldr	r3, [r3, #4]
 80154c6:	68dc      	ldr	r4, [r3, #12]
 80154c8:	7bfb      	ldrb	r3, [r7, #15]
 80154ca:	4a07      	ldr	r2, [pc, #28]	; (80154e8 <disk_write+0x3c>)
 80154cc:	4413      	add	r3, r2
 80154ce:	7a18      	ldrb	r0, [r3, #8]
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	687a      	ldr	r2, [r7, #4]
 80154d4:	68b9      	ldr	r1, [r7, #8]
 80154d6:	47a0      	blx	r4
 80154d8:	4603      	mov	r3, r0
 80154da:	75fb      	strb	r3, [r7, #23]
  return res;
 80154dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80154de:	4618      	mov	r0, r3
 80154e0:	371c      	adds	r7, #28
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd90      	pop	{r4, r7, pc}
 80154e6:	bf00      	nop
 80154e8:	24040378 	.word	0x24040378

080154ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	4603      	mov	r3, r0
 80154f4:	603a      	str	r2, [r7, #0]
 80154f6:	71fb      	strb	r3, [r7, #7]
 80154f8:	460b      	mov	r3, r1
 80154fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80154fc:	79fb      	ldrb	r3, [r7, #7]
 80154fe:	4a09      	ldr	r2, [pc, #36]	; (8015524 <disk_ioctl+0x38>)
 8015500:	009b      	lsls	r3, r3, #2
 8015502:	4413      	add	r3, r2
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	691b      	ldr	r3, [r3, #16]
 8015508:	79fa      	ldrb	r2, [r7, #7]
 801550a:	4906      	ldr	r1, [pc, #24]	; (8015524 <disk_ioctl+0x38>)
 801550c:	440a      	add	r2, r1
 801550e:	7a10      	ldrb	r0, [r2, #8]
 8015510:	79b9      	ldrb	r1, [r7, #6]
 8015512:	683a      	ldr	r2, [r7, #0]
 8015514:	4798      	blx	r3
 8015516:	4603      	mov	r3, r0
 8015518:	73fb      	strb	r3, [r7, #15]
  return res;
 801551a:	7bfb      	ldrb	r3, [r7, #15]
}
 801551c:	4618      	mov	r0, r3
 801551e:	3710      	adds	r7, #16
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	24040378 	.word	0x24040378

08015528 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015528:	b480      	push	{r7}
 801552a:	b085      	sub	sp, #20
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	3301      	adds	r3, #1
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015538:	89fb      	ldrh	r3, [r7, #14]
 801553a:	021b      	lsls	r3, r3, #8
 801553c:	b21a      	sxth	r2, r3
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	b21b      	sxth	r3, r3
 8015544:	4313      	orrs	r3, r2
 8015546:	b21b      	sxth	r3, r3
 8015548:	81fb      	strh	r3, [r7, #14]
	return rv;
 801554a:	89fb      	ldrh	r3, [r7, #14]
}
 801554c:	4618      	mov	r0, r3
 801554e:	3714      	adds	r7, #20
 8015550:	46bd      	mov	sp, r7
 8015552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015556:	4770      	bx	lr

08015558 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015558:	b480      	push	{r7}
 801555a:	b085      	sub	sp, #20
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	3303      	adds	r3, #3
 8015564:	781b      	ldrb	r3, [r3, #0]
 8015566:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	021b      	lsls	r3, r3, #8
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	3202      	adds	r2, #2
 8015570:	7812      	ldrb	r2, [r2, #0]
 8015572:	4313      	orrs	r3, r2
 8015574:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	021b      	lsls	r3, r3, #8
 801557a:	687a      	ldr	r2, [r7, #4]
 801557c:	3201      	adds	r2, #1
 801557e:	7812      	ldrb	r2, [r2, #0]
 8015580:	4313      	orrs	r3, r2
 8015582:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	021b      	lsls	r3, r3, #8
 8015588:	687a      	ldr	r2, [r7, #4]
 801558a:	7812      	ldrb	r2, [r2, #0]
 801558c:	4313      	orrs	r3, r2
 801558e:	60fb      	str	r3, [r7, #12]
	return rv;
 8015590:	68fb      	ldr	r3, [r7, #12]
}
 8015592:	4618      	mov	r0, r3
 8015594:	3714      	adds	r7, #20
 8015596:	46bd      	mov	sp, r7
 8015598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559c:	4770      	bx	lr

0801559e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801559e:	b480      	push	{r7}
 80155a0:	b083      	sub	sp, #12
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	6078      	str	r0, [r7, #4]
 80155a6:	460b      	mov	r3, r1
 80155a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	1c5a      	adds	r2, r3, #1
 80155ae:	607a      	str	r2, [r7, #4]
 80155b0:	887a      	ldrh	r2, [r7, #2]
 80155b2:	b2d2      	uxtb	r2, r2
 80155b4:	701a      	strb	r2, [r3, #0]
 80155b6:	887b      	ldrh	r3, [r7, #2]
 80155b8:	0a1b      	lsrs	r3, r3, #8
 80155ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	1c5a      	adds	r2, r3, #1
 80155c0:	607a      	str	r2, [r7, #4]
 80155c2:	887a      	ldrh	r2, [r7, #2]
 80155c4:	b2d2      	uxtb	r2, r2
 80155c6:	701a      	strb	r2, [r3, #0]
}
 80155c8:	bf00      	nop
 80155ca:	370c      	adds	r7, #12
 80155cc:	46bd      	mov	sp, r7
 80155ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d2:	4770      	bx	lr

080155d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80155d4:	b480      	push	{r7}
 80155d6:	b083      	sub	sp, #12
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
 80155dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	1c5a      	adds	r2, r3, #1
 80155e2:	607a      	str	r2, [r7, #4]
 80155e4:	683a      	ldr	r2, [r7, #0]
 80155e6:	b2d2      	uxtb	r2, r2
 80155e8:	701a      	strb	r2, [r3, #0]
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	0a1b      	lsrs	r3, r3, #8
 80155ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	1c5a      	adds	r2, r3, #1
 80155f4:	607a      	str	r2, [r7, #4]
 80155f6:	683a      	ldr	r2, [r7, #0]
 80155f8:	b2d2      	uxtb	r2, r2
 80155fa:	701a      	strb	r2, [r3, #0]
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	0a1b      	lsrs	r3, r3, #8
 8015600:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	1c5a      	adds	r2, r3, #1
 8015606:	607a      	str	r2, [r7, #4]
 8015608:	683a      	ldr	r2, [r7, #0]
 801560a:	b2d2      	uxtb	r2, r2
 801560c:	701a      	strb	r2, [r3, #0]
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	0a1b      	lsrs	r3, r3, #8
 8015612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	1c5a      	adds	r2, r3, #1
 8015618:	607a      	str	r2, [r7, #4]
 801561a:	683a      	ldr	r2, [r7, #0]
 801561c:	b2d2      	uxtb	r2, r2
 801561e:	701a      	strb	r2, [r3, #0]
}
 8015620:	bf00      	nop
 8015622:	370c      	adds	r7, #12
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr

0801562c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801562c:	b480      	push	{r7}
 801562e:	b087      	sub	sp, #28
 8015630:	af00      	add	r7, sp, #0
 8015632:	60f8      	str	r0, [r7, #12]
 8015634:	60b9      	str	r1, [r7, #8]
 8015636:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d00d      	beq.n	8015662 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015646:	693a      	ldr	r2, [r7, #16]
 8015648:	1c53      	adds	r3, r2, #1
 801564a:	613b      	str	r3, [r7, #16]
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	1c59      	adds	r1, r3, #1
 8015650:	6179      	str	r1, [r7, #20]
 8015652:	7812      	ldrb	r2, [r2, #0]
 8015654:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	3b01      	subs	r3, #1
 801565a:	607b      	str	r3, [r7, #4]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d1f1      	bne.n	8015646 <mem_cpy+0x1a>
	}
}
 8015662:	bf00      	nop
 8015664:	371c      	adds	r7, #28
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr

0801566e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801566e:	b480      	push	{r7}
 8015670:	b087      	sub	sp, #28
 8015672:	af00      	add	r7, sp, #0
 8015674:	60f8      	str	r0, [r7, #12]
 8015676:	60b9      	str	r1, [r7, #8]
 8015678:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	1c5a      	adds	r2, r3, #1
 8015682:	617a      	str	r2, [r7, #20]
 8015684:	68ba      	ldr	r2, [r7, #8]
 8015686:	b2d2      	uxtb	r2, r2
 8015688:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	3b01      	subs	r3, #1
 801568e:	607b      	str	r3, [r7, #4]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d1f3      	bne.n	801567e <mem_set+0x10>
}
 8015696:	bf00      	nop
 8015698:	371c      	adds	r7, #28
 801569a:	46bd      	mov	sp, r7
 801569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a0:	4770      	bx	lr

080156a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80156a2:	b480      	push	{r7}
 80156a4:	b089      	sub	sp, #36	; 0x24
 80156a6:	af00      	add	r7, sp, #0
 80156a8:	60f8      	str	r0, [r7, #12]
 80156aa:	60b9      	str	r1, [r7, #8]
 80156ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	61fb      	str	r3, [r7, #28]
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80156b6:	2300      	movs	r3, #0
 80156b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80156ba:	69fb      	ldr	r3, [r7, #28]
 80156bc:	1c5a      	adds	r2, r3, #1
 80156be:	61fa      	str	r2, [r7, #28]
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	4619      	mov	r1, r3
 80156c4:	69bb      	ldr	r3, [r7, #24]
 80156c6:	1c5a      	adds	r2, r3, #1
 80156c8:	61ba      	str	r2, [r7, #24]
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	1acb      	subs	r3, r1, r3
 80156ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	3b01      	subs	r3, #1
 80156d4:	607b      	str	r3, [r7, #4]
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d002      	beq.n	80156e2 <mem_cmp+0x40>
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d0eb      	beq.n	80156ba <mem_cmp+0x18>

	return r;
 80156e2:	697b      	ldr	r3, [r7, #20]
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	3724      	adds	r7, #36	; 0x24
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80156f0:	b480      	push	{r7}
 80156f2:	b083      	sub	sp, #12
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80156fa:	e002      	b.n	8015702 <chk_chr+0x12>
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	3301      	adds	r3, #1
 8015700:	607b      	str	r3, [r7, #4]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	781b      	ldrb	r3, [r3, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d005      	beq.n	8015716 <chk_chr+0x26>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	461a      	mov	r2, r3
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	4293      	cmp	r3, r2
 8015714:	d1f2      	bne.n	80156fc <chk_chr+0xc>
	return *str;
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	781b      	ldrb	r3, [r3, #0]
}
 801571a:	4618      	mov	r0, r3
 801571c:	370c      	adds	r7, #12
 801571e:	46bd      	mov	sp, r7
 8015720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015724:	4770      	bx	lr
	...

08015728 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015728:	b480      	push	{r7}
 801572a:	b085      	sub	sp, #20
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015732:	2300      	movs	r3, #0
 8015734:	60bb      	str	r3, [r7, #8]
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	60fb      	str	r3, [r7, #12]
 801573a:	e029      	b.n	8015790 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801573c:	4a27      	ldr	r2, [pc, #156]	; (80157dc <chk_lock+0xb4>)
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	011b      	lsls	r3, r3, #4
 8015742:	4413      	add	r3, r2
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d01d      	beq.n	8015786 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801574a:	4a24      	ldr	r2, [pc, #144]	; (80157dc <chk_lock+0xb4>)
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	011b      	lsls	r3, r3, #4
 8015750:	4413      	add	r3, r2
 8015752:	681a      	ldr	r2, [r3, #0]
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	429a      	cmp	r2, r3
 801575a:	d116      	bne.n	801578a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801575c:	4a1f      	ldr	r2, [pc, #124]	; (80157dc <chk_lock+0xb4>)
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	011b      	lsls	r3, r3, #4
 8015762:	4413      	add	r3, r2
 8015764:	3304      	adds	r3, #4
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801576c:	429a      	cmp	r2, r3
 801576e:	d10c      	bne.n	801578a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015770:	4a1a      	ldr	r2, [pc, #104]	; (80157dc <chk_lock+0xb4>)
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	011b      	lsls	r3, r3, #4
 8015776:	4413      	add	r3, r2
 8015778:	3308      	adds	r3, #8
 801577a:	681a      	ldr	r2, [r3, #0]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8015780:	429a      	cmp	r2, r3
 8015782:	d102      	bne.n	801578a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015784:	e007      	b.n	8015796 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8015786:	2301      	movs	r3, #1
 8015788:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	3301      	adds	r3, #1
 801578e:	60fb      	str	r3, [r7, #12]
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	2b01      	cmp	r3, #1
 8015794:	d9d2      	bls.n	801573c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	2b02      	cmp	r3, #2
 801579a:	d109      	bne.n	80157b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d102      	bne.n	80157a8 <chk_lock+0x80>
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	2b02      	cmp	r3, #2
 80157a6:	d101      	bne.n	80157ac <chk_lock+0x84>
 80157a8:	2300      	movs	r3, #0
 80157aa:	e010      	b.n	80157ce <chk_lock+0xa6>
 80157ac:	2312      	movs	r3, #18
 80157ae:	e00e      	b.n	80157ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80157b0:	683b      	ldr	r3, [r7, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d108      	bne.n	80157c8 <chk_lock+0xa0>
 80157b6:	4a09      	ldr	r2, [pc, #36]	; (80157dc <chk_lock+0xb4>)
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	011b      	lsls	r3, r3, #4
 80157bc:	4413      	add	r3, r2
 80157be:	330c      	adds	r3, #12
 80157c0:	881b      	ldrh	r3, [r3, #0]
 80157c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157c6:	d101      	bne.n	80157cc <chk_lock+0xa4>
 80157c8:	2310      	movs	r3, #16
 80157ca:	e000      	b.n	80157ce <chk_lock+0xa6>
 80157cc:	2300      	movs	r3, #0
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3714      	adds	r7, #20
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr
 80157da:	bf00      	nop
 80157dc:	24040358 	.word	0x24040358

080157e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80157e0:	b480      	push	{r7}
 80157e2:	b083      	sub	sp, #12
 80157e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80157e6:	2300      	movs	r3, #0
 80157e8:	607b      	str	r3, [r7, #4]
 80157ea:	e002      	b.n	80157f2 <enq_lock+0x12>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	3301      	adds	r3, #1
 80157f0:	607b      	str	r3, [r7, #4]
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2b01      	cmp	r3, #1
 80157f6:	d806      	bhi.n	8015806 <enq_lock+0x26>
 80157f8:	4a09      	ldr	r2, [pc, #36]	; (8015820 <enq_lock+0x40>)
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	011b      	lsls	r3, r3, #4
 80157fe:	4413      	add	r3, r2
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d1f2      	bne.n	80157ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2b02      	cmp	r3, #2
 801580a:	bf14      	ite	ne
 801580c:	2301      	movne	r3, #1
 801580e:	2300      	moveq	r3, #0
 8015810:	b2db      	uxtb	r3, r3
}
 8015812:	4618      	mov	r0, r3
 8015814:	370c      	adds	r7, #12
 8015816:	46bd      	mov	sp, r7
 8015818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop
 8015820:	24040358 	.word	0x24040358

08015824 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015824:	b480      	push	{r7}
 8015826:	b085      	sub	sp, #20
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801582e:	2300      	movs	r3, #0
 8015830:	60fb      	str	r3, [r7, #12]
 8015832:	e01f      	b.n	8015874 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8015834:	4a41      	ldr	r2, [pc, #260]	; (801593c <inc_lock+0x118>)
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	011b      	lsls	r3, r3, #4
 801583a:	4413      	add	r3, r2
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	429a      	cmp	r2, r3
 8015844:	d113      	bne.n	801586e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015846:	4a3d      	ldr	r2, [pc, #244]	; (801593c <inc_lock+0x118>)
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	011b      	lsls	r3, r3, #4
 801584c:	4413      	add	r3, r2
 801584e:	3304      	adds	r3, #4
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015856:	429a      	cmp	r2, r3
 8015858:	d109      	bne.n	801586e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801585a:	4a38      	ldr	r2, [pc, #224]	; (801593c <inc_lock+0x118>)
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	011b      	lsls	r3, r3, #4
 8015860:	4413      	add	r3, r2
 8015862:	3308      	adds	r3, #8
 8015864:	681a      	ldr	r2, [r3, #0]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801586a:	429a      	cmp	r2, r3
 801586c:	d006      	beq.n	801587c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	3301      	adds	r3, #1
 8015872:	60fb      	str	r3, [r7, #12]
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	2b01      	cmp	r3, #1
 8015878:	d9dc      	bls.n	8015834 <inc_lock+0x10>
 801587a:	e000      	b.n	801587e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801587c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2b02      	cmp	r3, #2
 8015882:	d132      	bne.n	80158ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015884:	2300      	movs	r3, #0
 8015886:	60fb      	str	r3, [r7, #12]
 8015888:	e002      	b.n	8015890 <inc_lock+0x6c>
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	3301      	adds	r3, #1
 801588e:	60fb      	str	r3, [r7, #12]
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2b01      	cmp	r3, #1
 8015894:	d806      	bhi.n	80158a4 <inc_lock+0x80>
 8015896:	4a29      	ldr	r2, [pc, #164]	; (801593c <inc_lock+0x118>)
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	011b      	lsls	r3, r3, #4
 801589c:	4413      	add	r3, r2
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d1f2      	bne.n	801588a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2b02      	cmp	r3, #2
 80158a8:	d101      	bne.n	80158ae <inc_lock+0x8a>
 80158aa:	2300      	movs	r3, #0
 80158ac:	e040      	b.n	8015930 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681a      	ldr	r2, [r3, #0]
 80158b2:	4922      	ldr	r1, [pc, #136]	; (801593c <inc_lock+0x118>)
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	011b      	lsls	r3, r3, #4
 80158b8:	440b      	add	r3, r1
 80158ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	689a      	ldr	r2, [r3, #8]
 80158c0:	491e      	ldr	r1, [pc, #120]	; (801593c <inc_lock+0x118>)
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	011b      	lsls	r3, r3, #4
 80158c6:	440b      	add	r3, r1
 80158c8:	3304      	adds	r3, #4
 80158ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	695a      	ldr	r2, [r3, #20]
 80158d0:	491a      	ldr	r1, [pc, #104]	; (801593c <inc_lock+0x118>)
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	011b      	lsls	r3, r3, #4
 80158d6:	440b      	add	r3, r1
 80158d8:	3308      	adds	r3, #8
 80158da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80158dc:	4a17      	ldr	r2, [pc, #92]	; (801593c <inc_lock+0x118>)
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	011b      	lsls	r3, r3, #4
 80158e2:	4413      	add	r3, r2
 80158e4:	330c      	adds	r3, #12
 80158e6:	2200      	movs	r2, #0
 80158e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d009      	beq.n	8015904 <inc_lock+0xe0>
 80158f0:	4a12      	ldr	r2, [pc, #72]	; (801593c <inc_lock+0x118>)
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	011b      	lsls	r3, r3, #4
 80158f6:	4413      	add	r3, r2
 80158f8:	330c      	adds	r3, #12
 80158fa:	881b      	ldrh	r3, [r3, #0]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d001      	beq.n	8015904 <inc_lock+0xe0>
 8015900:	2300      	movs	r3, #0
 8015902:	e015      	b.n	8015930 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d108      	bne.n	801591c <inc_lock+0xf8>
 801590a:	4a0c      	ldr	r2, [pc, #48]	; (801593c <inc_lock+0x118>)
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	011b      	lsls	r3, r3, #4
 8015910:	4413      	add	r3, r2
 8015912:	330c      	adds	r3, #12
 8015914:	881b      	ldrh	r3, [r3, #0]
 8015916:	3301      	adds	r3, #1
 8015918:	b29a      	uxth	r2, r3
 801591a:	e001      	b.n	8015920 <inc_lock+0xfc>
 801591c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015920:	4906      	ldr	r1, [pc, #24]	; (801593c <inc_lock+0x118>)
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	011b      	lsls	r3, r3, #4
 8015926:	440b      	add	r3, r1
 8015928:	330c      	adds	r3, #12
 801592a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	3301      	adds	r3, #1
}
 8015930:	4618      	mov	r0, r3
 8015932:	3714      	adds	r7, #20
 8015934:	46bd      	mov	sp, r7
 8015936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593a:	4770      	bx	lr
 801593c:	24040358 	.word	0x24040358

08015940 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8015940:	b480      	push	{r7}
 8015942:	b085      	sub	sp, #20
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	3b01      	subs	r3, #1
 801594c:	607b      	str	r3, [r7, #4]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	2b01      	cmp	r3, #1
 8015952:	d825      	bhi.n	80159a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8015954:	4a17      	ldr	r2, [pc, #92]	; (80159b4 <dec_lock+0x74>)
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	011b      	lsls	r3, r3, #4
 801595a:	4413      	add	r3, r2
 801595c:	330c      	adds	r3, #12
 801595e:	881b      	ldrh	r3, [r3, #0]
 8015960:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8015962:	89fb      	ldrh	r3, [r7, #14]
 8015964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015968:	d101      	bne.n	801596e <dec_lock+0x2e>
 801596a:	2300      	movs	r3, #0
 801596c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801596e:	89fb      	ldrh	r3, [r7, #14]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d002      	beq.n	801597a <dec_lock+0x3a>
 8015974:	89fb      	ldrh	r3, [r7, #14]
 8015976:	3b01      	subs	r3, #1
 8015978:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801597a:	4a0e      	ldr	r2, [pc, #56]	; (80159b4 <dec_lock+0x74>)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	011b      	lsls	r3, r3, #4
 8015980:	4413      	add	r3, r2
 8015982:	330c      	adds	r3, #12
 8015984:	89fa      	ldrh	r2, [r7, #14]
 8015986:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015988:	89fb      	ldrh	r3, [r7, #14]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d105      	bne.n	801599a <dec_lock+0x5a>
 801598e:	4a09      	ldr	r2, [pc, #36]	; (80159b4 <dec_lock+0x74>)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	011b      	lsls	r3, r3, #4
 8015994:	4413      	add	r3, r2
 8015996:	2200      	movs	r2, #0
 8015998:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801599a:	2300      	movs	r3, #0
 801599c:	737b      	strb	r3, [r7, #13]
 801599e:	e001      	b.n	80159a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80159a0:	2302      	movs	r3, #2
 80159a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80159a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80159a6:	4618      	mov	r0, r3
 80159a8:	3714      	adds	r7, #20
 80159aa:	46bd      	mov	sp, r7
 80159ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b0:	4770      	bx	lr
 80159b2:	bf00      	nop
 80159b4:	24040358 	.word	0x24040358

080159b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80159b8:	b480      	push	{r7}
 80159ba:	b085      	sub	sp, #20
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80159c0:	2300      	movs	r3, #0
 80159c2:	60fb      	str	r3, [r7, #12]
 80159c4:	e010      	b.n	80159e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80159c6:	4a0d      	ldr	r2, [pc, #52]	; (80159fc <clear_lock+0x44>)
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	011b      	lsls	r3, r3, #4
 80159cc:	4413      	add	r3, r2
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d105      	bne.n	80159e2 <clear_lock+0x2a>
 80159d6:	4a09      	ldr	r2, [pc, #36]	; (80159fc <clear_lock+0x44>)
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	011b      	lsls	r3, r3, #4
 80159dc:	4413      	add	r3, r2
 80159de:	2200      	movs	r2, #0
 80159e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	3301      	adds	r3, #1
 80159e6:	60fb      	str	r3, [r7, #12]
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2b01      	cmp	r3, #1
 80159ec:	d9eb      	bls.n	80159c6 <clear_lock+0xe>
	}
}
 80159ee:	bf00      	nop
 80159f0:	3714      	adds	r7, #20
 80159f2:	46bd      	mov	sp, r7
 80159f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f8:	4770      	bx	lr
 80159fa:	bf00      	nop
 80159fc:	24040358 	.word	0x24040358

08015a00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b086      	sub	sp, #24
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	78db      	ldrb	r3, [r3, #3]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d034      	beq.n	8015a7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	7858      	ldrb	r0, [r3, #1]
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a24:	2301      	movs	r3, #1
 8015a26:	697a      	ldr	r2, [r7, #20]
 8015a28:	f7ff fd40 	bl	80154ac <disk_write>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d002      	beq.n	8015a38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015a32:	2301      	movs	r3, #1
 8015a34:	73fb      	strb	r3, [r7, #15]
 8015a36:	e022      	b.n	8015a7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	6a1b      	ldr	r3, [r3, #32]
 8015a42:	697a      	ldr	r2, [r7, #20]
 8015a44:	1ad2      	subs	r2, r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	699b      	ldr	r3, [r3, #24]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d217      	bcs.n	8015a7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	789b      	ldrb	r3, [r3, #2]
 8015a52:	613b      	str	r3, [r7, #16]
 8015a54:	e010      	b.n	8015a78 <sync_window+0x78>
					wsect += fs->fsize;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	699b      	ldr	r3, [r3, #24]
 8015a5a:	697a      	ldr	r2, [r7, #20]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	7858      	ldrb	r0, [r3, #1]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	697a      	ldr	r2, [r7, #20]
 8015a6e:	f7ff fd1d 	bl	80154ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015a72:	693b      	ldr	r3, [r7, #16]
 8015a74:	3b01      	subs	r3, #1
 8015a76:	613b      	str	r3, [r7, #16]
 8015a78:	693b      	ldr	r3, [r7, #16]
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	d8eb      	bhi.n	8015a56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a80:	4618      	mov	r0, r3
 8015a82:	3718      	adds	r7, #24
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015a92:	2300      	movs	r3, #0
 8015a94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a9a:	683a      	ldr	r2, [r7, #0]
 8015a9c:	429a      	cmp	r2, r3
 8015a9e:	d01b      	beq.n	8015ad8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015aa0:	6878      	ldr	r0, [r7, #4]
 8015aa2:	f7ff ffad 	bl	8015a00 <sync_window>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015aaa:	7bfb      	ldrb	r3, [r7, #15]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d113      	bne.n	8015ad8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	7858      	ldrb	r0, [r3, #1]
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015aba:	2301      	movs	r3, #1
 8015abc:	683a      	ldr	r2, [r7, #0]
 8015abe:	f7ff fcd5 	bl	801546c <disk_read>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d004      	beq.n	8015ad2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015acc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015ace:	2301      	movs	r3, #1
 8015ad0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	683a      	ldr	r2, [r7, #0]
 8015ad6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8015ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3710      	adds	r7, #16
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
	...

08015ae4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f7ff ff87 	bl	8015a00 <sync_window>
 8015af2:	4603      	mov	r3, r0
 8015af4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015af6:	7bfb      	ldrb	r3, [r7, #15]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d158      	bne.n	8015bae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	2b03      	cmp	r3, #3
 8015b02:	d148      	bne.n	8015b96 <sync_fs+0xb2>
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	791b      	ldrb	r3, [r3, #4]
 8015b08:	2b01      	cmp	r3, #1
 8015b0a:	d144      	bne.n	8015b96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	3330      	adds	r3, #48	; 0x30
 8015b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b14:	2100      	movs	r1, #0
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7ff fda9 	bl	801566e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	3330      	adds	r3, #48	; 0x30
 8015b20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b24:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7ff fd38 	bl	801559e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	3330      	adds	r3, #48	; 0x30
 8015b32:	4921      	ldr	r1, [pc, #132]	; (8015bb8 <sync_fs+0xd4>)
 8015b34:	4618      	mov	r0, r3
 8015b36:	f7ff fd4d 	bl	80155d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	3330      	adds	r3, #48	; 0x30
 8015b3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015b42:	491e      	ldr	r1, [pc, #120]	; (8015bbc <sync_fs+0xd8>)
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7ff fd45 	bl	80155d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	3330      	adds	r3, #48	; 0x30
 8015b4e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	691b      	ldr	r3, [r3, #16]
 8015b56:	4619      	mov	r1, r3
 8015b58:	4610      	mov	r0, r2
 8015b5a:	f7ff fd3b 	bl	80155d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	3330      	adds	r3, #48	; 0x30
 8015b62:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	68db      	ldr	r3, [r3, #12]
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	4610      	mov	r0, r2
 8015b6e:	f7ff fd31 	bl	80155d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	69db      	ldr	r3, [r3, #28]
 8015b76:	1c5a      	adds	r2, r3, #1
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	7858      	ldrb	r0, [r3, #1]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	f7ff fc8e 	bl	80154ac <disk_write>
			fs->fsi_flag = 0;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2200      	movs	r2, #0
 8015b94:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	785b      	ldrb	r3, [r3, #1]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	2100      	movs	r1, #0
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7ff fca4 	bl	80154ec <disk_ioctl>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d001      	beq.n	8015bae <sync_fs+0xca>
 8015baa:	2301      	movs	r3, #1
 8015bac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	3710      	adds	r7, #16
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}
 8015bb8:	41615252 	.word	0x41615252
 8015bbc:	61417272 	.word	0x61417272

08015bc0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015bc0:	b480      	push	{r7}
 8015bc2:	b083      	sub	sp, #12
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
 8015bc8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	3b02      	subs	r3, #2
 8015bce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	695b      	ldr	r3, [r3, #20]
 8015bd4:	3b02      	subs	r3, #2
 8015bd6:	683a      	ldr	r2, [r7, #0]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d301      	bcc.n	8015be0 <clust2sect+0x20>
 8015bdc:	2300      	movs	r3, #0
 8015bde:	e008      	b.n	8015bf2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	895b      	ldrh	r3, [r3, #10]
 8015be4:	461a      	mov	r2, r3
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	fb03 f202 	mul.w	r2, r3, r2
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf0:	4413      	add	r3, r2
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	370c      	adds	r7, #12
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfc:	4770      	bx	lr

08015bfe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015bfe:	b580      	push	{r7, lr}
 8015c00:	b086      	sub	sp, #24
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	6078      	str	r0, [r7, #4]
 8015c06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	2b01      	cmp	r3, #1
 8015c12:	d904      	bls.n	8015c1e <get_fat+0x20>
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	695b      	ldr	r3, [r3, #20]
 8015c18:	683a      	ldr	r2, [r7, #0]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d302      	bcc.n	8015c24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015c1e:	2301      	movs	r3, #1
 8015c20:	617b      	str	r3, [r7, #20]
 8015c22:	e08c      	b.n	8015d3e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	781b      	ldrb	r3, [r3, #0]
 8015c2e:	2b02      	cmp	r3, #2
 8015c30:	d045      	beq.n	8015cbe <get_fat+0xc0>
 8015c32:	2b03      	cmp	r3, #3
 8015c34:	d05d      	beq.n	8015cf2 <get_fat+0xf4>
 8015c36:	2b01      	cmp	r3, #1
 8015c38:	d177      	bne.n	8015d2a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	60fb      	str	r3, [r7, #12]
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	085b      	lsrs	r3, r3, #1
 8015c42:	68fa      	ldr	r2, [r7, #12]
 8015c44:	4413      	add	r3, r2
 8015c46:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	6a1a      	ldr	r2, [r3, #32]
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	0a5b      	lsrs	r3, r3, #9
 8015c50:	4413      	add	r3, r2
 8015c52:	4619      	mov	r1, r3
 8015c54:	6938      	ldr	r0, [r7, #16]
 8015c56:	f7ff ff17 	bl	8015a88 <move_window>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d167      	bne.n	8015d30 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	1c5a      	adds	r2, r3, #1
 8015c64:	60fa      	str	r2, [r7, #12]
 8015c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c6a:	693a      	ldr	r2, [r7, #16]
 8015c6c:	4413      	add	r3, r2
 8015c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c72:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	6a1a      	ldr	r2, [r3, #32]
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	0a5b      	lsrs	r3, r3, #9
 8015c7c:	4413      	add	r3, r2
 8015c7e:	4619      	mov	r1, r3
 8015c80:	6938      	ldr	r0, [r7, #16]
 8015c82:	f7ff ff01 	bl	8015a88 <move_window>
 8015c86:	4603      	mov	r3, r0
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d153      	bne.n	8015d34 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c92:	693a      	ldr	r2, [r7, #16]
 8015c94:	4413      	add	r3, r2
 8015c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c9a:	021b      	lsls	r3, r3, #8
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	4313      	orrs	r3, r2
 8015ca2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	f003 0301 	and.w	r3, r3, #1
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d002      	beq.n	8015cb4 <get_fat+0xb6>
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	091b      	lsrs	r3, r3, #4
 8015cb2:	e002      	b.n	8015cba <get_fat+0xbc>
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015cba:	617b      	str	r3, [r7, #20]
			break;
 8015cbc:	e03f      	b.n	8015d3e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	6a1a      	ldr	r2, [r3, #32]
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	0a1b      	lsrs	r3, r3, #8
 8015cc6:	4413      	add	r3, r2
 8015cc8:	4619      	mov	r1, r3
 8015cca:	6938      	ldr	r0, [r7, #16]
 8015ccc:	f7ff fedc 	bl	8015a88 <move_window>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d130      	bne.n	8015d38 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	005b      	lsls	r3, r3, #1
 8015ce0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015ce4:	4413      	add	r3, r2
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7ff fc1e 	bl	8015528 <ld_word>
 8015cec:	4603      	mov	r3, r0
 8015cee:	617b      	str	r3, [r7, #20]
			break;
 8015cf0:	e025      	b.n	8015d3e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015cf2:	693b      	ldr	r3, [r7, #16]
 8015cf4:	6a1a      	ldr	r2, [r3, #32]
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	09db      	lsrs	r3, r3, #7
 8015cfa:	4413      	add	r3, r2
 8015cfc:	4619      	mov	r1, r3
 8015cfe:	6938      	ldr	r0, [r7, #16]
 8015d00:	f7ff fec2 	bl	8015a88 <move_window>
 8015d04:	4603      	mov	r3, r0
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d118      	bne.n	8015d3c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	009b      	lsls	r3, r3, #2
 8015d14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015d18:	4413      	add	r3, r2
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7ff fc1c 	bl	8015558 <ld_dword>
 8015d20:	4603      	mov	r3, r0
 8015d22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015d26:	617b      	str	r3, [r7, #20]
			break;
 8015d28:	e009      	b.n	8015d3e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	617b      	str	r3, [r7, #20]
 8015d2e:	e006      	b.n	8015d3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d30:	bf00      	nop
 8015d32:	e004      	b.n	8015d3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015d34:	bf00      	nop
 8015d36:	e002      	b.n	8015d3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015d38:	bf00      	nop
 8015d3a:	e000      	b.n	8015d3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015d3c:	bf00      	nop
		}
	}

	return val;
 8015d3e:	697b      	ldr	r3, [r7, #20]
}
 8015d40:	4618      	mov	r0, r3
 8015d42:	3718      	adds	r7, #24
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}

08015d48 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015d48:	b590      	push	{r4, r7, lr}
 8015d4a:	b089      	sub	sp, #36	; 0x24
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015d54:	2302      	movs	r3, #2
 8015d56:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015d58:	68bb      	ldr	r3, [r7, #8]
 8015d5a:	2b01      	cmp	r3, #1
 8015d5c:	f240 80d6 	bls.w	8015f0c <put_fat+0x1c4>
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	695b      	ldr	r3, [r3, #20]
 8015d64:	68ba      	ldr	r2, [r7, #8]
 8015d66:	429a      	cmp	r2, r3
 8015d68:	f080 80d0 	bcs.w	8015f0c <put_fat+0x1c4>
		switch (fs->fs_type) {
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	2b02      	cmp	r3, #2
 8015d72:	d073      	beq.n	8015e5c <put_fat+0x114>
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	f000 8091 	beq.w	8015e9c <put_fat+0x154>
 8015d7a:	2b01      	cmp	r3, #1
 8015d7c:	f040 80c6 	bne.w	8015f0c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	61bb      	str	r3, [r7, #24]
 8015d84:	69bb      	ldr	r3, [r7, #24]
 8015d86:	085b      	lsrs	r3, r3, #1
 8015d88:	69ba      	ldr	r2, [r7, #24]
 8015d8a:	4413      	add	r3, r2
 8015d8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	6a1a      	ldr	r2, [r3, #32]
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	0a5b      	lsrs	r3, r3, #9
 8015d96:	4413      	add	r3, r2
 8015d98:	4619      	mov	r1, r3
 8015d9a:	68f8      	ldr	r0, [r7, #12]
 8015d9c:	f7ff fe74 	bl	8015a88 <move_window>
 8015da0:	4603      	mov	r3, r0
 8015da2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015da4:	7ffb      	ldrb	r3, [r7, #31]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	f040 80a9 	bne.w	8015efe <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015db2:	69bb      	ldr	r3, [r7, #24]
 8015db4:	1c59      	adds	r1, r3, #1
 8015db6:	61b9      	str	r1, [r7, #24]
 8015db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015dbc:	4413      	add	r3, r2
 8015dbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	f003 0301 	and.w	r3, r3, #1
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d00d      	beq.n	8015de6 <put_fat+0x9e>
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	781b      	ldrb	r3, [r3, #0]
 8015dce:	b25b      	sxtb	r3, r3
 8015dd0:	f003 030f 	and.w	r3, r3, #15
 8015dd4:	b25a      	sxtb	r2, r3
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	b2db      	uxtb	r3, r3
 8015dda:	011b      	lsls	r3, r3, #4
 8015ddc:	b25b      	sxtb	r3, r3
 8015dde:	4313      	orrs	r3, r2
 8015de0:	b25b      	sxtb	r3, r3
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	e001      	b.n	8015dea <put_fat+0xa2>
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	b2db      	uxtb	r3, r3
 8015dea:	697a      	ldr	r2, [r7, #20]
 8015dec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	2201      	movs	r2, #1
 8015df2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	6a1a      	ldr	r2, [r3, #32]
 8015df8:	69bb      	ldr	r3, [r7, #24]
 8015dfa:	0a5b      	lsrs	r3, r3, #9
 8015dfc:	4413      	add	r3, r2
 8015dfe:	4619      	mov	r1, r3
 8015e00:	68f8      	ldr	r0, [r7, #12]
 8015e02:	f7ff fe41 	bl	8015a88 <move_window>
 8015e06:	4603      	mov	r3, r0
 8015e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015e0a:	7ffb      	ldrb	r3, [r7, #31]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d178      	bne.n	8015f02 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e16:	69bb      	ldr	r3, [r7, #24]
 8015e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e1c:	4413      	add	r3, r2
 8015e1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	f003 0301 	and.w	r3, r3, #1
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d003      	beq.n	8015e32 <put_fat+0xea>
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	091b      	lsrs	r3, r3, #4
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	e00e      	b.n	8015e50 <put_fat+0x108>
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	781b      	ldrb	r3, [r3, #0]
 8015e36:	b25b      	sxtb	r3, r3
 8015e38:	f023 030f 	bic.w	r3, r3, #15
 8015e3c:	b25a      	sxtb	r2, r3
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	0a1b      	lsrs	r3, r3, #8
 8015e42:	b25b      	sxtb	r3, r3
 8015e44:	f003 030f 	and.w	r3, r3, #15
 8015e48:	b25b      	sxtb	r3, r3
 8015e4a:	4313      	orrs	r3, r2
 8015e4c:	b25b      	sxtb	r3, r3
 8015e4e:	b2db      	uxtb	r3, r3
 8015e50:	697a      	ldr	r2, [r7, #20]
 8015e52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	2201      	movs	r2, #1
 8015e58:	70da      	strb	r2, [r3, #3]
			break;
 8015e5a:	e057      	b.n	8015f0c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	6a1a      	ldr	r2, [r3, #32]
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	0a1b      	lsrs	r3, r3, #8
 8015e64:	4413      	add	r3, r2
 8015e66:	4619      	mov	r1, r3
 8015e68:	68f8      	ldr	r0, [r7, #12]
 8015e6a:	f7ff fe0d 	bl	8015a88 <move_window>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015e72:	7ffb      	ldrb	r3, [r7, #31]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d146      	bne.n	8015f06 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	005b      	lsls	r3, r3, #1
 8015e82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015e86:	4413      	add	r3, r2
 8015e88:	687a      	ldr	r2, [r7, #4]
 8015e8a:	b292      	uxth	r2, r2
 8015e8c:	4611      	mov	r1, r2
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7ff fb85 	bl	801559e <st_word>
			fs->wflag = 1;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	2201      	movs	r2, #1
 8015e98:	70da      	strb	r2, [r3, #3]
			break;
 8015e9a:	e037      	b.n	8015f0c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	6a1a      	ldr	r2, [r3, #32]
 8015ea0:	68bb      	ldr	r3, [r7, #8]
 8015ea2:	09db      	lsrs	r3, r3, #7
 8015ea4:	4413      	add	r3, r2
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	68f8      	ldr	r0, [r7, #12]
 8015eaa:	f7ff fded 	bl	8015a88 <move_window>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015eb2:	7ffb      	ldrb	r3, [r7, #31]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d128      	bne.n	8015f0a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	009b      	lsls	r3, r3, #2
 8015ec8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015ecc:	4413      	add	r3, r2
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7ff fb42 	bl	8015558 <ld_dword>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015eda:	4323      	orrs	r3, r4
 8015edc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015eec:	4413      	add	r3, r2
 8015eee:	6879      	ldr	r1, [r7, #4]
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f7ff fb6f 	bl	80155d4 <st_dword>
			fs->wflag = 1;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	2201      	movs	r2, #1
 8015efa:	70da      	strb	r2, [r3, #3]
			break;
 8015efc:	e006      	b.n	8015f0c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015efe:	bf00      	nop
 8015f00:	e004      	b.n	8015f0c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015f02:	bf00      	nop
 8015f04:	e002      	b.n	8015f0c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015f06:	bf00      	nop
 8015f08:	e000      	b.n	8015f0c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8015f0a:	bf00      	nop
		}
	}
	return res;
 8015f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	3724      	adds	r7, #36	; 0x24
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd90      	pop	{r4, r7, pc}

08015f16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015f16:	b580      	push	{r7, lr}
 8015f18:	b088      	sub	sp, #32
 8015f1a:	af00      	add	r7, sp, #0
 8015f1c:	60f8      	str	r0, [r7, #12]
 8015f1e:	60b9      	str	r1, [r7, #8]
 8015f20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015f22:	2300      	movs	r3, #0
 8015f24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015f2c:	68bb      	ldr	r3, [r7, #8]
 8015f2e:	2b01      	cmp	r3, #1
 8015f30:	d904      	bls.n	8015f3c <remove_chain+0x26>
 8015f32:	69bb      	ldr	r3, [r7, #24]
 8015f34:	695b      	ldr	r3, [r3, #20]
 8015f36:	68ba      	ldr	r2, [r7, #8]
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d301      	bcc.n	8015f40 <remove_chain+0x2a>
 8015f3c:	2302      	movs	r3, #2
 8015f3e:	e04b      	b.n	8015fd8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d00c      	beq.n	8015f60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f4a:	6879      	ldr	r1, [r7, #4]
 8015f4c:	69b8      	ldr	r0, [r7, #24]
 8015f4e:	f7ff fefb 	bl	8015d48 <put_fat>
 8015f52:	4603      	mov	r3, r0
 8015f54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015f56:	7ffb      	ldrb	r3, [r7, #31]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d001      	beq.n	8015f60 <remove_chain+0x4a>
 8015f5c:	7ffb      	ldrb	r3, [r7, #31]
 8015f5e:	e03b      	b.n	8015fd8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015f60:	68b9      	ldr	r1, [r7, #8]
 8015f62:	68f8      	ldr	r0, [r7, #12]
 8015f64:	f7ff fe4b 	bl	8015bfe <get_fat>
 8015f68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d031      	beq.n	8015fd4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	2b01      	cmp	r3, #1
 8015f74:	d101      	bne.n	8015f7a <remove_chain+0x64>
 8015f76:	2302      	movs	r3, #2
 8015f78:	e02e      	b.n	8015fd8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f80:	d101      	bne.n	8015f86 <remove_chain+0x70>
 8015f82:	2301      	movs	r3, #1
 8015f84:	e028      	b.n	8015fd8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015f86:	2200      	movs	r2, #0
 8015f88:	68b9      	ldr	r1, [r7, #8]
 8015f8a:	69b8      	ldr	r0, [r7, #24]
 8015f8c:	f7ff fedc 	bl	8015d48 <put_fat>
 8015f90:	4603      	mov	r3, r0
 8015f92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015f94:	7ffb      	ldrb	r3, [r7, #31]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d001      	beq.n	8015f9e <remove_chain+0x88>
 8015f9a:	7ffb      	ldrb	r3, [r7, #31]
 8015f9c:	e01c      	b.n	8015fd8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015f9e:	69bb      	ldr	r3, [r7, #24]
 8015fa0:	691a      	ldr	r2, [r3, #16]
 8015fa2:	69bb      	ldr	r3, [r7, #24]
 8015fa4:	695b      	ldr	r3, [r3, #20]
 8015fa6:	3b02      	subs	r3, #2
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d20b      	bcs.n	8015fc4 <remove_chain+0xae>
			fs->free_clst++;
 8015fac:	69bb      	ldr	r3, [r7, #24]
 8015fae:	691b      	ldr	r3, [r3, #16]
 8015fb0:	1c5a      	adds	r2, r3, #1
 8015fb2:	69bb      	ldr	r3, [r7, #24]
 8015fb4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8015fb6:	69bb      	ldr	r3, [r7, #24]
 8015fb8:	791b      	ldrb	r3, [r3, #4]
 8015fba:	f043 0301 	orr.w	r3, r3, #1
 8015fbe:	b2da      	uxtb	r2, r3
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015fc8:	69bb      	ldr	r3, [r7, #24]
 8015fca:	695b      	ldr	r3, [r3, #20]
 8015fcc:	68ba      	ldr	r2, [r7, #8]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d3c6      	bcc.n	8015f60 <remove_chain+0x4a>
 8015fd2:	e000      	b.n	8015fd6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015fd4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015fd6:	2300      	movs	r3, #0
}
 8015fd8:	4618      	mov	r0, r3
 8015fda:	3720      	adds	r7, #32
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}

08015fe0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b088      	sub	sp, #32
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015ff0:	683b      	ldr	r3, [r7, #0]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d10d      	bne.n	8016012 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	68db      	ldr	r3, [r3, #12]
 8015ffa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015ffc:	69bb      	ldr	r3, [r7, #24]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d004      	beq.n	801600c <create_chain+0x2c>
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	695b      	ldr	r3, [r3, #20]
 8016006:	69ba      	ldr	r2, [r7, #24]
 8016008:	429a      	cmp	r2, r3
 801600a:	d31b      	bcc.n	8016044 <create_chain+0x64>
 801600c:	2301      	movs	r3, #1
 801600e:	61bb      	str	r3, [r7, #24]
 8016010:	e018      	b.n	8016044 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016012:	6839      	ldr	r1, [r7, #0]
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	f7ff fdf2 	bl	8015bfe <get_fat>
 801601a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2b01      	cmp	r3, #1
 8016020:	d801      	bhi.n	8016026 <create_chain+0x46>
 8016022:	2301      	movs	r3, #1
 8016024:	e070      	b.n	8016108 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801602c:	d101      	bne.n	8016032 <create_chain+0x52>
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	e06a      	b.n	8016108 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	695b      	ldr	r3, [r3, #20]
 8016036:	68fa      	ldr	r2, [r7, #12]
 8016038:	429a      	cmp	r2, r3
 801603a:	d201      	bcs.n	8016040 <create_chain+0x60>
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	e063      	b.n	8016108 <create_chain+0x128>
		scl = clst;
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016044:	69bb      	ldr	r3, [r7, #24]
 8016046:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8016048:	69fb      	ldr	r3, [r7, #28]
 801604a:	3301      	adds	r3, #1
 801604c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801604e:	693b      	ldr	r3, [r7, #16]
 8016050:	695b      	ldr	r3, [r3, #20]
 8016052:	69fa      	ldr	r2, [r7, #28]
 8016054:	429a      	cmp	r2, r3
 8016056:	d307      	bcc.n	8016068 <create_chain+0x88>
				ncl = 2;
 8016058:	2302      	movs	r3, #2
 801605a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801605c:	69fa      	ldr	r2, [r7, #28]
 801605e:	69bb      	ldr	r3, [r7, #24]
 8016060:	429a      	cmp	r2, r3
 8016062:	d901      	bls.n	8016068 <create_chain+0x88>
 8016064:	2300      	movs	r3, #0
 8016066:	e04f      	b.n	8016108 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8016068:	69f9      	ldr	r1, [r7, #28]
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7ff fdc7 	bl	8015bfe <get_fat>
 8016070:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d00e      	beq.n	8016096 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	2b01      	cmp	r3, #1
 801607c:	d003      	beq.n	8016086 <create_chain+0xa6>
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016084:	d101      	bne.n	801608a <create_chain+0xaa>
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	e03e      	b.n	8016108 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801608a:	69fa      	ldr	r2, [r7, #28]
 801608c:	69bb      	ldr	r3, [r7, #24]
 801608e:	429a      	cmp	r2, r3
 8016090:	d1da      	bne.n	8016048 <create_chain+0x68>
 8016092:	2300      	movs	r3, #0
 8016094:	e038      	b.n	8016108 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8016096:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8016098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801609c:	69f9      	ldr	r1, [r7, #28]
 801609e:	6938      	ldr	r0, [r7, #16]
 80160a0:	f7ff fe52 	bl	8015d48 <put_fat>
 80160a4:	4603      	mov	r3, r0
 80160a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80160a8:	7dfb      	ldrb	r3, [r7, #23]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d109      	bne.n	80160c2 <create_chain+0xe2>
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d006      	beq.n	80160c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80160b4:	69fa      	ldr	r2, [r7, #28]
 80160b6:	6839      	ldr	r1, [r7, #0]
 80160b8:	6938      	ldr	r0, [r7, #16]
 80160ba:	f7ff fe45 	bl	8015d48 <put_fat>
 80160be:	4603      	mov	r3, r0
 80160c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80160c2:	7dfb      	ldrb	r3, [r7, #23]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d116      	bne.n	80160f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	69fa      	ldr	r2, [r7, #28]
 80160cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80160ce:	693b      	ldr	r3, [r7, #16]
 80160d0:	691a      	ldr	r2, [r3, #16]
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	695b      	ldr	r3, [r3, #20]
 80160d6:	3b02      	subs	r3, #2
 80160d8:	429a      	cmp	r2, r3
 80160da:	d804      	bhi.n	80160e6 <create_chain+0x106>
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	691b      	ldr	r3, [r3, #16]
 80160e0:	1e5a      	subs	r2, r3, #1
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	791b      	ldrb	r3, [r3, #4]
 80160ea:	f043 0301 	orr.w	r3, r3, #1
 80160ee:	b2da      	uxtb	r2, r3
 80160f0:	693b      	ldr	r3, [r7, #16]
 80160f2:	711a      	strb	r2, [r3, #4]
 80160f4:	e007      	b.n	8016106 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80160f6:	7dfb      	ldrb	r3, [r7, #23]
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	d102      	bne.n	8016102 <create_chain+0x122>
 80160fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016100:	e000      	b.n	8016104 <create_chain+0x124>
 8016102:	2301      	movs	r3, #1
 8016104:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8016106:	69fb      	ldr	r3, [r7, #28]
}
 8016108:	4618      	mov	r0, r3
 801610a:	3720      	adds	r7, #32
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}

08016110 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016110:	b480      	push	{r7}
 8016112:	b087      	sub	sp, #28
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016124:	3304      	adds	r3, #4
 8016126:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	0a5b      	lsrs	r3, r3, #9
 801612c:	68fa      	ldr	r2, [r7, #12]
 801612e:	8952      	ldrh	r2, [r2, #10]
 8016130:	fbb3 f3f2 	udiv	r3, r3, r2
 8016134:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	1d1a      	adds	r2, r3, #4
 801613a:	613a      	str	r2, [r7, #16]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d101      	bne.n	801614a <clmt_clust+0x3a>
 8016146:	2300      	movs	r3, #0
 8016148:	e010      	b.n	801616c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801614a:	697a      	ldr	r2, [r7, #20]
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	429a      	cmp	r2, r3
 8016150:	d307      	bcc.n	8016162 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8016152:	697a      	ldr	r2, [r7, #20]
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	1ad3      	subs	r3, r2, r3
 8016158:	617b      	str	r3, [r7, #20]
 801615a:	693b      	ldr	r3, [r7, #16]
 801615c:	3304      	adds	r3, #4
 801615e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016160:	e7e9      	b.n	8016136 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8016162:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8016164:	693b      	ldr	r3, [r7, #16]
 8016166:	681a      	ldr	r2, [r3, #0]
 8016168:	697b      	ldr	r3, [r7, #20]
 801616a:	4413      	add	r3, r2
}
 801616c:	4618      	mov	r0, r3
 801616e:	371c      	adds	r7, #28
 8016170:	46bd      	mov	sp, r7
 8016172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016176:	4770      	bx	lr

08016178 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b086      	sub	sp, #24
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801618e:	d204      	bcs.n	801619a <dir_sdi+0x22>
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	f003 031f 	and.w	r3, r3, #31
 8016196:	2b00      	cmp	r3, #0
 8016198:	d001      	beq.n	801619e <dir_sdi+0x26>
		return FR_INT_ERR;
 801619a:	2302      	movs	r3, #2
 801619c:	e063      	b.n	8016266 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	683a      	ldr	r2, [r7, #0]
 80161a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	689b      	ldr	r3, [r3, #8]
 80161a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d106      	bne.n	80161be <dir_sdi+0x46>
 80161b0:	693b      	ldr	r3, [r7, #16]
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	2b02      	cmp	r3, #2
 80161b6:	d902      	bls.n	80161be <dir_sdi+0x46>
		clst = fs->dirbase;
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80161be:	697b      	ldr	r3, [r7, #20]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d10c      	bne.n	80161de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	095b      	lsrs	r3, r3, #5
 80161c8:	693a      	ldr	r2, [r7, #16]
 80161ca:	8912      	ldrh	r2, [r2, #8]
 80161cc:	4293      	cmp	r3, r2
 80161ce:	d301      	bcc.n	80161d4 <dir_sdi+0x5c>
 80161d0:	2302      	movs	r3, #2
 80161d2:	e048      	b.n	8016266 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80161d4:	693b      	ldr	r3, [r7, #16]
 80161d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	61da      	str	r2, [r3, #28]
 80161dc:	e029      	b.n	8016232 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80161de:	693b      	ldr	r3, [r7, #16]
 80161e0:	895b      	ldrh	r3, [r3, #10]
 80161e2:	025b      	lsls	r3, r3, #9
 80161e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80161e6:	e019      	b.n	801621c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	6979      	ldr	r1, [r7, #20]
 80161ec:	4618      	mov	r0, r3
 80161ee:	f7ff fd06 	bl	8015bfe <get_fat>
 80161f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80161f4:	697b      	ldr	r3, [r7, #20]
 80161f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80161fa:	d101      	bne.n	8016200 <dir_sdi+0x88>
 80161fc:	2301      	movs	r3, #1
 80161fe:	e032      	b.n	8016266 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	2b01      	cmp	r3, #1
 8016204:	d904      	bls.n	8016210 <dir_sdi+0x98>
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	695b      	ldr	r3, [r3, #20]
 801620a:	697a      	ldr	r2, [r7, #20]
 801620c:	429a      	cmp	r2, r3
 801620e:	d301      	bcc.n	8016214 <dir_sdi+0x9c>
 8016210:	2302      	movs	r3, #2
 8016212:	e028      	b.n	8016266 <dir_sdi+0xee>
			ofs -= csz;
 8016214:	683a      	ldr	r2, [r7, #0]
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	1ad3      	subs	r3, r2, r3
 801621a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801621c:	683a      	ldr	r2, [r7, #0]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	429a      	cmp	r2, r3
 8016222:	d2e1      	bcs.n	80161e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8016224:	6979      	ldr	r1, [r7, #20]
 8016226:	6938      	ldr	r0, [r7, #16]
 8016228:	f7ff fcca 	bl	8015bc0 <clust2sect>
 801622c:	4602      	mov	r2, r0
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	697a      	ldr	r2, [r7, #20]
 8016236:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	69db      	ldr	r3, [r3, #28]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d101      	bne.n	8016244 <dir_sdi+0xcc>
 8016240:	2302      	movs	r3, #2
 8016242:	e010      	b.n	8016266 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	69da      	ldr	r2, [r3, #28]
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	0a5b      	lsrs	r3, r3, #9
 801624c:	441a      	add	r2, r3
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016258:	683b      	ldr	r3, [r7, #0]
 801625a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801625e:	441a      	add	r2, r3
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016264:	2300      	movs	r3, #0
}
 8016266:	4618      	mov	r0, r3
 8016268:	3718      	adds	r7, #24
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801626e:	b580      	push	{r7, lr}
 8016270:	b086      	sub	sp, #24
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
 8016276:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	695b      	ldr	r3, [r3, #20]
 8016282:	3320      	adds	r3, #32
 8016284:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	69db      	ldr	r3, [r3, #28]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d003      	beq.n	8016296 <dir_next+0x28>
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016294:	d301      	bcc.n	801629a <dir_next+0x2c>
 8016296:	2304      	movs	r3, #4
 8016298:	e0aa      	b.n	80163f0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f040 8098 	bne.w	80163d6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	69db      	ldr	r3, [r3, #28]
 80162aa:	1c5a      	adds	r2, r3, #1
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	699b      	ldr	r3, [r3, #24]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d10b      	bne.n	80162d0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	095b      	lsrs	r3, r3, #5
 80162bc:	68fa      	ldr	r2, [r7, #12]
 80162be:	8912      	ldrh	r2, [r2, #8]
 80162c0:	4293      	cmp	r3, r2
 80162c2:	f0c0 8088 	bcc.w	80163d6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2200      	movs	r2, #0
 80162ca:	61da      	str	r2, [r3, #28]
 80162cc:	2304      	movs	r3, #4
 80162ce:	e08f      	b.n	80163f0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80162d0:	68bb      	ldr	r3, [r7, #8]
 80162d2:	0a5b      	lsrs	r3, r3, #9
 80162d4:	68fa      	ldr	r2, [r7, #12]
 80162d6:	8952      	ldrh	r2, [r2, #10]
 80162d8:	3a01      	subs	r2, #1
 80162da:	4013      	ands	r3, r2
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d17a      	bne.n	80163d6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80162e0:	687a      	ldr	r2, [r7, #4]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	699b      	ldr	r3, [r3, #24]
 80162e6:	4619      	mov	r1, r3
 80162e8:	4610      	mov	r0, r2
 80162ea:	f7ff fc88 	bl	8015bfe <get_fat>
 80162ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	2b01      	cmp	r3, #1
 80162f4:	d801      	bhi.n	80162fa <dir_next+0x8c>
 80162f6:	2302      	movs	r3, #2
 80162f8:	e07a      	b.n	80163f0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016300:	d101      	bne.n	8016306 <dir_next+0x98>
 8016302:	2301      	movs	r3, #1
 8016304:	e074      	b.n	80163f0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	695b      	ldr	r3, [r3, #20]
 801630a:	697a      	ldr	r2, [r7, #20]
 801630c:	429a      	cmp	r2, r3
 801630e:	d358      	bcc.n	80163c2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d104      	bne.n	8016320 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2200      	movs	r2, #0
 801631a:	61da      	str	r2, [r3, #28]
 801631c:	2304      	movs	r3, #4
 801631e:	e067      	b.n	80163f0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	699b      	ldr	r3, [r3, #24]
 8016326:	4619      	mov	r1, r3
 8016328:	4610      	mov	r0, r2
 801632a:	f7ff fe59 	bl	8015fe0 <create_chain>
 801632e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d101      	bne.n	801633a <dir_next+0xcc>
 8016336:	2307      	movs	r3, #7
 8016338:	e05a      	b.n	80163f0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	2b01      	cmp	r3, #1
 801633e:	d101      	bne.n	8016344 <dir_next+0xd6>
 8016340:	2302      	movs	r3, #2
 8016342:	e055      	b.n	80163f0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801634a:	d101      	bne.n	8016350 <dir_next+0xe2>
 801634c:	2301      	movs	r3, #1
 801634e:	e04f      	b.n	80163f0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016350:	68f8      	ldr	r0, [r7, #12]
 8016352:	f7ff fb55 	bl	8015a00 <sync_window>
 8016356:	4603      	mov	r3, r0
 8016358:	2b00      	cmp	r3, #0
 801635a:	d001      	beq.n	8016360 <dir_next+0xf2>
 801635c:	2301      	movs	r3, #1
 801635e:	e047      	b.n	80163f0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	3330      	adds	r3, #48	; 0x30
 8016364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016368:	2100      	movs	r1, #0
 801636a:	4618      	mov	r0, r3
 801636c:	f7ff f97f 	bl	801566e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016370:	2300      	movs	r3, #0
 8016372:	613b      	str	r3, [r7, #16]
 8016374:	6979      	ldr	r1, [r7, #20]
 8016376:	68f8      	ldr	r0, [r7, #12]
 8016378:	f7ff fc22 	bl	8015bc0 <clust2sect>
 801637c:	4602      	mov	r2, r0
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	62da      	str	r2, [r3, #44]	; 0x2c
 8016382:	e012      	b.n	80163aa <dir_next+0x13c>
						fs->wflag = 1;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2201      	movs	r2, #1
 8016388:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801638a:	68f8      	ldr	r0, [r7, #12]
 801638c:	f7ff fb38 	bl	8015a00 <sync_window>
 8016390:	4603      	mov	r3, r0
 8016392:	2b00      	cmp	r3, #0
 8016394:	d001      	beq.n	801639a <dir_next+0x12c>
 8016396:	2301      	movs	r3, #1
 8016398:	e02a      	b.n	80163f0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	3301      	adds	r3, #1
 801639e:	613b      	str	r3, [r7, #16]
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163a4:	1c5a      	adds	r2, r3, #1
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	895b      	ldrh	r3, [r3, #10]
 80163ae:	461a      	mov	r2, r3
 80163b0:	693b      	ldr	r3, [r7, #16]
 80163b2:	4293      	cmp	r3, r2
 80163b4:	d3e6      	bcc.n	8016384 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	1ad2      	subs	r2, r2, r3
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	697a      	ldr	r2, [r7, #20]
 80163c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80163c8:	6979      	ldr	r1, [r7, #20]
 80163ca:	68f8      	ldr	r0, [r7, #12]
 80163cc:	f7ff fbf8 	bl	8015bc0 <clust2sect>
 80163d0:	4602      	mov	r2, r0
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	68ba      	ldr	r2, [r7, #8]
 80163da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80163e8:	441a      	add	r2, r3
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80163ee:	2300      	movs	r3, #0
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	3718      	adds	r7, #24
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}

080163f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b086      	sub	sp, #24
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016408:	2100      	movs	r1, #0
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	f7ff feb4 	bl	8016178 <dir_sdi>
 8016410:	4603      	mov	r3, r0
 8016412:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016414:	7dfb      	ldrb	r3, [r7, #23]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d12b      	bne.n	8016472 <dir_alloc+0x7a>
		n = 0;
 801641a:	2300      	movs	r3, #0
 801641c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	69db      	ldr	r3, [r3, #28]
 8016422:	4619      	mov	r1, r3
 8016424:	68f8      	ldr	r0, [r7, #12]
 8016426:	f7ff fb2f 	bl	8015a88 <move_window>
 801642a:	4603      	mov	r3, r0
 801642c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801642e:	7dfb      	ldrb	r3, [r7, #23]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d11d      	bne.n	8016470 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6a1b      	ldr	r3, [r3, #32]
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	2be5      	cmp	r3, #229	; 0xe5
 801643c:	d004      	beq.n	8016448 <dir_alloc+0x50>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6a1b      	ldr	r3, [r3, #32]
 8016442:	781b      	ldrb	r3, [r3, #0]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d107      	bne.n	8016458 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016448:	693b      	ldr	r3, [r7, #16]
 801644a:	3301      	adds	r3, #1
 801644c:	613b      	str	r3, [r7, #16]
 801644e:	693a      	ldr	r2, [r7, #16]
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	429a      	cmp	r2, r3
 8016454:	d102      	bne.n	801645c <dir_alloc+0x64>
 8016456:	e00c      	b.n	8016472 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016458:	2300      	movs	r3, #0
 801645a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801645c:	2101      	movs	r1, #1
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f7ff ff05 	bl	801626e <dir_next>
 8016464:	4603      	mov	r3, r0
 8016466:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016468:	7dfb      	ldrb	r3, [r7, #23]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d0d7      	beq.n	801641e <dir_alloc+0x26>
 801646e:	e000      	b.n	8016472 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8016470:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016472:	7dfb      	ldrb	r3, [r7, #23]
 8016474:	2b04      	cmp	r3, #4
 8016476:	d101      	bne.n	801647c <dir_alloc+0x84>
 8016478:	2307      	movs	r3, #7
 801647a:	75fb      	strb	r3, [r7, #23]
	return res;
 801647c:	7dfb      	ldrb	r3, [r7, #23]
}
 801647e:	4618      	mov	r0, r3
 8016480:	3718      	adds	r7, #24
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}

08016486 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016486:	b580      	push	{r7, lr}
 8016488:	b084      	sub	sp, #16
 801648a:	af00      	add	r7, sp, #0
 801648c:	6078      	str	r0, [r7, #4]
 801648e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	331a      	adds	r3, #26
 8016494:	4618      	mov	r0, r3
 8016496:	f7ff f847 	bl	8015528 <ld_word>
 801649a:	4603      	mov	r3, r0
 801649c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	2b03      	cmp	r3, #3
 80164a4:	d109      	bne.n	80164ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	3314      	adds	r3, #20
 80164aa:	4618      	mov	r0, r3
 80164ac:	f7ff f83c 	bl	8015528 <ld_word>
 80164b0:	4603      	mov	r3, r0
 80164b2:	041b      	lsls	r3, r3, #16
 80164b4:	68fa      	ldr	r2, [r7, #12]
 80164b6:	4313      	orrs	r3, r2
 80164b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80164ba:	68fb      	ldr	r3, [r7, #12]
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}

080164c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b084      	sub	sp, #16
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	60f8      	str	r0, [r7, #12]
 80164cc:	60b9      	str	r1, [r7, #8]
 80164ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	331a      	adds	r3, #26
 80164d4:	687a      	ldr	r2, [r7, #4]
 80164d6:	b292      	uxth	r2, r2
 80164d8:	4611      	mov	r1, r2
 80164da:	4618      	mov	r0, r3
 80164dc:	f7ff f85f 	bl	801559e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	781b      	ldrb	r3, [r3, #0]
 80164e4:	2b03      	cmp	r3, #3
 80164e6:	d109      	bne.n	80164fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	f103 0214 	add.w	r2, r3, #20
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	0c1b      	lsrs	r3, r3, #16
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	4619      	mov	r1, r3
 80164f6:	4610      	mov	r0, r2
 80164f8:	f7ff f851 	bl	801559e <st_word>
	}
}
 80164fc:	bf00      	nop
 80164fe:	3710      	adds	r7, #16
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}

08016504 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b086      	sub	sp, #24
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016512:	2100      	movs	r1, #0
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f7ff fe2f 	bl	8016178 <dir_sdi>
 801651a:	4603      	mov	r3, r0
 801651c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801651e:	7dfb      	ldrb	r3, [r7, #23]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d001      	beq.n	8016528 <dir_find+0x24>
 8016524:	7dfb      	ldrb	r3, [r7, #23]
 8016526:	e03e      	b.n	80165a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	69db      	ldr	r3, [r3, #28]
 801652c:	4619      	mov	r1, r3
 801652e:	6938      	ldr	r0, [r7, #16]
 8016530:	f7ff faaa 	bl	8015a88 <move_window>
 8016534:	4603      	mov	r3, r0
 8016536:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016538:	7dfb      	ldrb	r3, [r7, #23]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d12f      	bne.n	801659e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6a1b      	ldr	r3, [r3, #32]
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016546:	7bfb      	ldrb	r3, [r7, #15]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d102      	bne.n	8016552 <dir_find+0x4e>
 801654c:	2304      	movs	r3, #4
 801654e:	75fb      	strb	r3, [r7, #23]
 8016550:	e028      	b.n	80165a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6a1b      	ldr	r3, [r3, #32]
 8016556:	330b      	adds	r3, #11
 8016558:	781b      	ldrb	r3, [r3, #0]
 801655a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801655e:	b2da      	uxtb	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6a1b      	ldr	r3, [r3, #32]
 8016568:	330b      	adds	r3, #11
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	f003 0308 	and.w	r3, r3, #8
 8016570:	2b00      	cmp	r3, #0
 8016572:	d10a      	bne.n	801658a <dir_find+0x86>
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	6a18      	ldr	r0, [r3, #32]
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	3324      	adds	r3, #36	; 0x24
 801657c:	220b      	movs	r2, #11
 801657e:	4619      	mov	r1, r3
 8016580:	f7ff f88f 	bl	80156a2 <mem_cmp>
 8016584:	4603      	mov	r3, r0
 8016586:	2b00      	cmp	r3, #0
 8016588:	d00b      	beq.n	80165a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801658a:	2100      	movs	r1, #0
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f7ff fe6e 	bl	801626e <dir_next>
 8016592:	4603      	mov	r3, r0
 8016594:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016596:	7dfb      	ldrb	r3, [r7, #23]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d0c5      	beq.n	8016528 <dir_find+0x24>
 801659c:	e002      	b.n	80165a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 801659e:	bf00      	nop
 80165a0:	e000      	b.n	80165a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80165a2:	bf00      	nop

	return res;
 80165a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3718      	adds	r7, #24
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80165ae:	b580      	push	{r7, lr}
 80165b0:	b084      	sub	sp, #16
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80165bc:	2101      	movs	r1, #1
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f7ff ff1a 	bl	80163f8 <dir_alloc>
 80165c4:	4603      	mov	r3, r0
 80165c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80165c8:	7bfb      	ldrb	r3, [r7, #15]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d11c      	bne.n	8016608 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	69db      	ldr	r3, [r3, #28]
 80165d2:	4619      	mov	r1, r3
 80165d4:	68b8      	ldr	r0, [r7, #8]
 80165d6:	f7ff fa57 	bl	8015a88 <move_window>
 80165da:	4603      	mov	r3, r0
 80165dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80165de:	7bfb      	ldrb	r3, [r7, #15]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d111      	bne.n	8016608 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6a1b      	ldr	r3, [r3, #32]
 80165e8:	2220      	movs	r2, #32
 80165ea:	2100      	movs	r1, #0
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7ff f83e 	bl	801566e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	6a18      	ldr	r0, [r3, #32]
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	3324      	adds	r3, #36	; 0x24
 80165fa:	220b      	movs	r2, #11
 80165fc:	4619      	mov	r1, r3
 80165fe:	f7ff f815 	bl	801562c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	2201      	movs	r2, #1
 8016606:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016608:	7bfb      	ldrb	r3, [r7, #15]
}
 801660a:	4618      	mov	r0, r3
 801660c:	3710      	adds	r7, #16
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}
	...

08016614 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b088      	sub	sp, #32
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801661e:	683b      	ldr	r3, [r7, #0]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	60fb      	str	r3, [r7, #12]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	3324      	adds	r3, #36	; 0x24
 8016628:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801662a:	220b      	movs	r2, #11
 801662c:	2120      	movs	r1, #32
 801662e:	68b8      	ldr	r0, [r7, #8]
 8016630:	f7ff f81d 	bl	801566e <mem_set>
	si = i = 0; ni = 8;
 8016634:	2300      	movs	r3, #0
 8016636:	613b      	str	r3, [r7, #16]
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	617b      	str	r3, [r7, #20]
 801663c:	2308      	movs	r3, #8
 801663e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8016640:	697b      	ldr	r3, [r7, #20]
 8016642:	1c5a      	adds	r2, r3, #1
 8016644:	617a      	str	r2, [r7, #20]
 8016646:	68fa      	ldr	r2, [r7, #12]
 8016648:	4413      	add	r3, r2
 801664a:	781b      	ldrb	r3, [r3, #0]
 801664c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801664e:	7ffb      	ldrb	r3, [r7, #31]
 8016650:	2b20      	cmp	r3, #32
 8016652:	d94e      	bls.n	80166f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8016654:	7ffb      	ldrb	r3, [r7, #31]
 8016656:	2b2f      	cmp	r3, #47	; 0x2f
 8016658:	d006      	beq.n	8016668 <create_name+0x54>
 801665a:	7ffb      	ldrb	r3, [r7, #31]
 801665c:	2b5c      	cmp	r3, #92	; 0x5c
 801665e:	d110      	bne.n	8016682 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016660:	e002      	b.n	8016668 <create_name+0x54>
 8016662:	697b      	ldr	r3, [r7, #20]
 8016664:	3301      	adds	r3, #1
 8016666:	617b      	str	r3, [r7, #20]
 8016668:	68fa      	ldr	r2, [r7, #12]
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	4413      	add	r3, r2
 801666e:	781b      	ldrb	r3, [r3, #0]
 8016670:	2b2f      	cmp	r3, #47	; 0x2f
 8016672:	d0f6      	beq.n	8016662 <create_name+0x4e>
 8016674:	68fa      	ldr	r2, [r7, #12]
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	4413      	add	r3, r2
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	2b5c      	cmp	r3, #92	; 0x5c
 801667e:	d0f0      	beq.n	8016662 <create_name+0x4e>
			break;
 8016680:	e038      	b.n	80166f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8016682:	7ffb      	ldrb	r3, [r7, #31]
 8016684:	2b2e      	cmp	r3, #46	; 0x2e
 8016686:	d003      	beq.n	8016690 <create_name+0x7c>
 8016688:	693a      	ldr	r2, [r7, #16]
 801668a:	69bb      	ldr	r3, [r7, #24]
 801668c:	429a      	cmp	r2, r3
 801668e:	d30c      	bcc.n	80166aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8016690:	69bb      	ldr	r3, [r7, #24]
 8016692:	2b0b      	cmp	r3, #11
 8016694:	d002      	beq.n	801669c <create_name+0x88>
 8016696:	7ffb      	ldrb	r3, [r7, #31]
 8016698:	2b2e      	cmp	r3, #46	; 0x2e
 801669a:	d001      	beq.n	80166a0 <create_name+0x8c>
 801669c:	2306      	movs	r3, #6
 801669e:	e044      	b.n	801672a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80166a0:	2308      	movs	r3, #8
 80166a2:	613b      	str	r3, [r7, #16]
 80166a4:	230b      	movs	r3, #11
 80166a6:	61bb      	str	r3, [r7, #24]
			continue;
 80166a8:	e022      	b.n	80166f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80166aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	da04      	bge.n	80166bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80166b2:	7ffb      	ldrb	r3, [r7, #31]
 80166b4:	3b80      	subs	r3, #128	; 0x80
 80166b6:	4a1f      	ldr	r2, [pc, #124]	; (8016734 <create_name+0x120>)
 80166b8:	5cd3      	ldrb	r3, [r2, r3]
 80166ba:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80166bc:	7ffb      	ldrb	r3, [r7, #31]
 80166be:	4619      	mov	r1, r3
 80166c0:	481d      	ldr	r0, [pc, #116]	; (8016738 <create_name+0x124>)
 80166c2:	f7ff f815 	bl	80156f0 <chk_chr>
 80166c6:	4603      	mov	r3, r0
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d001      	beq.n	80166d0 <create_name+0xbc>
 80166cc:	2306      	movs	r3, #6
 80166ce:	e02c      	b.n	801672a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80166d0:	7ffb      	ldrb	r3, [r7, #31]
 80166d2:	2b60      	cmp	r3, #96	; 0x60
 80166d4:	d905      	bls.n	80166e2 <create_name+0xce>
 80166d6:	7ffb      	ldrb	r3, [r7, #31]
 80166d8:	2b7a      	cmp	r3, #122	; 0x7a
 80166da:	d802      	bhi.n	80166e2 <create_name+0xce>
 80166dc:	7ffb      	ldrb	r3, [r7, #31]
 80166de:	3b20      	subs	r3, #32
 80166e0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	1c5a      	adds	r2, r3, #1
 80166e6:	613a      	str	r2, [r7, #16]
 80166e8:	68ba      	ldr	r2, [r7, #8]
 80166ea:	4413      	add	r3, r2
 80166ec:	7ffa      	ldrb	r2, [r7, #31]
 80166ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80166f0:	e7a6      	b.n	8016640 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80166f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80166f4:	68fa      	ldr	r2, [r7, #12]
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	441a      	add	r2, r3
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d101      	bne.n	8016708 <create_name+0xf4>
 8016704:	2306      	movs	r3, #6
 8016706:	e010      	b.n	801672a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	2be5      	cmp	r3, #229	; 0xe5
 801670e:	d102      	bne.n	8016716 <create_name+0x102>
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	2205      	movs	r2, #5
 8016714:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016716:	7ffb      	ldrb	r3, [r7, #31]
 8016718:	2b20      	cmp	r3, #32
 801671a:	d801      	bhi.n	8016720 <create_name+0x10c>
 801671c:	2204      	movs	r2, #4
 801671e:	e000      	b.n	8016722 <create_name+0x10e>
 8016720:	2200      	movs	r2, #0
 8016722:	68bb      	ldr	r3, [r7, #8]
 8016724:	330b      	adds	r3, #11
 8016726:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016728:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801672a:	4618      	mov	r0, r3
 801672c:	3720      	adds	r7, #32
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	08019f00 	.word	0x08019f00
 8016738:	08019e24 	.word	0x08019e24

0801673c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b086      	sub	sp, #24
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016750:	e002      	b.n	8016758 <follow_path+0x1c>
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	3301      	adds	r3, #1
 8016756:	603b      	str	r3, [r7, #0]
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	781b      	ldrb	r3, [r3, #0]
 801675c:	2b2f      	cmp	r3, #47	; 0x2f
 801675e:	d0f8      	beq.n	8016752 <follow_path+0x16>
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	781b      	ldrb	r3, [r3, #0]
 8016764:	2b5c      	cmp	r3, #92	; 0x5c
 8016766:	d0f4      	beq.n	8016752 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016768:	693b      	ldr	r3, [r7, #16]
 801676a:	2200      	movs	r2, #0
 801676c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801676e:	683b      	ldr	r3, [r7, #0]
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	2b1f      	cmp	r3, #31
 8016774:	d80a      	bhi.n	801678c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	2280      	movs	r2, #128	; 0x80
 801677a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801677e:	2100      	movs	r1, #0
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f7ff fcf9 	bl	8016178 <dir_sdi>
 8016786:	4603      	mov	r3, r0
 8016788:	75fb      	strb	r3, [r7, #23]
 801678a:	e043      	b.n	8016814 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801678c:	463b      	mov	r3, r7
 801678e:	4619      	mov	r1, r3
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f7ff ff3f 	bl	8016614 <create_name>
 8016796:	4603      	mov	r3, r0
 8016798:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801679a:	7dfb      	ldrb	r3, [r7, #23]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d134      	bne.n	801680a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f7ff feaf 	bl	8016504 <dir_find>
 80167a6:	4603      	mov	r3, r0
 80167a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80167b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80167b2:	7dfb      	ldrb	r3, [r7, #23]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d00a      	beq.n	80167ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80167b8:	7dfb      	ldrb	r3, [r7, #23]
 80167ba:	2b04      	cmp	r3, #4
 80167bc:	d127      	bne.n	801680e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80167be:	7afb      	ldrb	r3, [r7, #11]
 80167c0:	f003 0304 	and.w	r3, r3, #4
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d122      	bne.n	801680e <follow_path+0xd2>
 80167c8:	2305      	movs	r3, #5
 80167ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80167cc:	e01f      	b.n	801680e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80167ce:	7afb      	ldrb	r3, [r7, #11]
 80167d0:	f003 0304 	and.w	r3, r3, #4
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d11c      	bne.n	8016812 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	799b      	ldrb	r3, [r3, #6]
 80167dc:	f003 0310 	and.w	r3, r3, #16
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d102      	bne.n	80167ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80167e4:	2305      	movs	r3, #5
 80167e6:	75fb      	strb	r3, [r7, #23]
 80167e8:	e014      	b.n	8016814 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	695b      	ldr	r3, [r3, #20]
 80167f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80167f8:	4413      	add	r3, r2
 80167fa:	4619      	mov	r1, r3
 80167fc:	68f8      	ldr	r0, [r7, #12]
 80167fe:	f7ff fe42 	bl	8016486 <ld_clust>
 8016802:	4602      	mov	r2, r0
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016808:	e7c0      	b.n	801678c <follow_path+0x50>
			if (res != FR_OK) break;
 801680a:	bf00      	nop
 801680c:	e002      	b.n	8016814 <follow_path+0xd8>
				break;
 801680e:	bf00      	nop
 8016810:	e000      	b.n	8016814 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016812:	bf00      	nop
			}
		}
	}

	return res;
 8016814:	7dfb      	ldrb	r3, [r7, #23]
}
 8016816:	4618      	mov	r0, r3
 8016818:	3718      	adds	r7, #24
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}

0801681e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801681e:	b480      	push	{r7}
 8016820:	b087      	sub	sp, #28
 8016822:	af00      	add	r7, sp, #0
 8016824:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801682a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d031      	beq.n	8016898 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	617b      	str	r3, [r7, #20]
 801683a:	e002      	b.n	8016842 <get_ldnumber+0x24>
 801683c:	697b      	ldr	r3, [r7, #20]
 801683e:	3301      	adds	r3, #1
 8016840:	617b      	str	r3, [r7, #20]
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	2b20      	cmp	r3, #32
 8016848:	d903      	bls.n	8016852 <get_ldnumber+0x34>
 801684a:	697b      	ldr	r3, [r7, #20]
 801684c:	781b      	ldrb	r3, [r3, #0]
 801684e:	2b3a      	cmp	r3, #58	; 0x3a
 8016850:	d1f4      	bne.n	801683c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	781b      	ldrb	r3, [r3, #0]
 8016856:	2b3a      	cmp	r3, #58	; 0x3a
 8016858:	d11c      	bne.n	8016894 <get_ldnumber+0x76>
			tp = *path;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	1c5a      	adds	r2, r3, #1
 8016864:	60fa      	str	r2, [r7, #12]
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	3b30      	subs	r3, #48	; 0x30
 801686a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	2b09      	cmp	r3, #9
 8016870:	d80e      	bhi.n	8016890 <get_ldnumber+0x72>
 8016872:	68fa      	ldr	r2, [r7, #12]
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	429a      	cmp	r2, r3
 8016878:	d10a      	bne.n	8016890 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d107      	bne.n	8016890 <get_ldnumber+0x72>
					vol = (int)i;
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	3301      	adds	r3, #1
 8016888:	617b      	str	r3, [r7, #20]
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	697a      	ldr	r2, [r7, #20]
 801688e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	e002      	b.n	801689a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016894:	2300      	movs	r3, #0
 8016896:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016898:	693b      	ldr	r3, [r7, #16]
}
 801689a:	4618      	mov	r0, r3
 801689c:	371c      	adds	r7, #28
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr
	...

080168a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
 80168b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2200      	movs	r2, #0
 80168b6:	70da      	strb	r2, [r3, #3]
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80168be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80168c0:	6839      	ldr	r1, [r7, #0]
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f7ff f8e0 	bl	8015a88 <move_window>
 80168c8:	4603      	mov	r3, r0
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d001      	beq.n	80168d2 <check_fs+0x2a>
 80168ce:	2304      	movs	r3, #4
 80168d0:	e038      	b.n	8016944 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	3330      	adds	r3, #48	; 0x30
 80168d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80168da:	4618      	mov	r0, r3
 80168dc:	f7fe fe24 	bl	8015528 <ld_word>
 80168e0:	4603      	mov	r3, r0
 80168e2:	461a      	mov	r2, r3
 80168e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80168e8:	429a      	cmp	r2, r3
 80168ea:	d001      	beq.n	80168f0 <check_fs+0x48>
 80168ec:	2303      	movs	r3, #3
 80168ee:	e029      	b.n	8016944 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80168f6:	2be9      	cmp	r3, #233	; 0xe9
 80168f8:	d009      	beq.n	801690e <check_fs+0x66>
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016900:	2beb      	cmp	r3, #235	; 0xeb
 8016902:	d11e      	bne.n	8016942 <check_fs+0x9a>
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801690a:	2b90      	cmp	r3, #144	; 0x90
 801690c:	d119      	bne.n	8016942 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	3330      	adds	r3, #48	; 0x30
 8016912:	3336      	adds	r3, #54	; 0x36
 8016914:	4618      	mov	r0, r3
 8016916:	f7fe fe1f 	bl	8015558 <ld_dword>
 801691a:	4603      	mov	r3, r0
 801691c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016920:	4a0a      	ldr	r2, [pc, #40]	; (801694c <check_fs+0xa4>)
 8016922:	4293      	cmp	r3, r2
 8016924:	d101      	bne.n	801692a <check_fs+0x82>
 8016926:	2300      	movs	r3, #0
 8016928:	e00c      	b.n	8016944 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	3330      	adds	r3, #48	; 0x30
 801692e:	3352      	adds	r3, #82	; 0x52
 8016930:	4618      	mov	r0, r3
 8016932:	f7fe fe11 	bl	8015558 <ld_dword>
 8016936:	4602      	mov	r2, r0
 8016938:	4b05      	ldr	r3, [pc, #20]	; (8016950 <check_fs+0xa8>)
 801693a:	429a      	cmp	r2, r3
 801693c:	d101      	bne.n	8016942 <check_fs+0x9a>
 801693e:	2300      	movs	r3, #0
 8016940:	e000      	b.n	8016944 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016942:	2302      	movs	r3, #2
}
 8016944:	4618      	mov	r0, r3
 8016946:	3708      	adds	r7, #8
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}
 801694c:	00544146 	.word	0x00544146
 8016950:	33544146 	.word	0x33544146

08016954 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b096      	sub	sp, #88	; 0x58
 8016958:	af00      	add	r7, sp, #0
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	60b9      	str	r1, [r7, #8]
 801695e:	4613      	mov	r3, r2
 8016960:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	2200      	movs	r2, #0
 8016966:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016968:	68f8      	ldr	r0, [r7, #12]
 801696a:	f7ff ff58 	bl	801681e <get_ldnumber>
 801696e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016972:	2b00      	cmp	r3, #0
 8016974:	da01      	bge.n	801697a <find_volume+0x26>
 8016976:	230b      	movs	r3, #11
 8016978:	e22e      	b.n	8016dd8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801697a:	4aa8      	ldr	r2, [pc, #672]	; (8016c1c <find_volume+0x2c8>)
 801697c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801697e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016982:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016986:	2b00      	cmp	r3, #0
 8016988:	d101      	bne.n	801698e <find_volume+0x3a>
 801698a:	230c      	movs	r3, #12
 801698c:	e224      	b.n	8016dd8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016992:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016994:	79fb      	ldrb	r3, [r7, #7]
 8016996:	f023 0301 	bic.w	r3, r3, #1
 801699a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d01a      	beq.n	80169da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80169a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169a6:	785b      	ldrb	r3, [r3, #1]
 80169a8:	4618      	mov	r0, r3
 80169aa:	f7fe fd1f 	bl	80153ec <disk_status>
 80169ae:	4603      	mov	r3, r0
 80169b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80169b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169b8:	f003 0301 	and.w	r3, r3, #1
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d10c      	bne.n	80169da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80169c0:	79fb      	ldrb	r3, [r7, #7]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d007      	beq.n	80169d6 <find_volume+0x82>
 80169c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169ca:	f003 0304 	and.w	r3, r3, #4
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d001      	beq.n	80169d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80169d2:	230a      	movs	r3, #10
 80169d4:	e200      	b.n	8016dd8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80169d6:	2300      	movs	r3, #0
 80169d8:	e1fe      	b.n	8016dd8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80169da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169dc:	2200      	movs	r2, #0
 80169de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80169e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169e2:	b2da      	uxtb	r2, r3
 80169e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80169e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169ea:	785b      	ldrb	r3, [r3, #1]
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7fe fd17 	bl	8015420 <disk_initialize>
 80169f2:	4603      	mov	r3, r0
 80169f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80169f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169fc:	f003 0301 	and.w	r3, r3, #1
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d001      	beq.n	8016a08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016a04:	2303      	movs	r3, #3
 8016a06:	e1e7      	b.n	8016dd8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016a08:	79fb      	ldrb	r3, [r7, #7]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d007      	beq.n	8016a1e <find_volume+0xca>
 8016a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a12:	f003 0304 	and.w	r3, r3, #4
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d001      	beq.n	8016a1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016a1a:	230a      	movs	r3, #10
 8016a1c:	e1dc      	b.n	8016dd8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016a22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016a26:	f7ff ff3f 	bl	80168a8 <check_fs>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016a30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a34:	2b02      	cmp	r3, #2
 8016a36:	d14b      	bne.n	8016ad0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016a38:	2300      	movs	r3, #0
 8016a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8016a3c:	e01f      	b.n	8016a7e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a46:	011b      	lsls	r3, r3, #4
 8016a48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016a4c:	4413      	add	r3, r2
 8016a4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a52:	3304      	adds	r3, #4
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d006      	beq.n	8016a68 <find_volume+0x114>
 8016a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a5c:	3308      	adds	r3, #8
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7fe fd7a 	bl	8015558 <ld_dword>
 8016a64:	4602      	mov	r2, r0
 8016a66:	e000      	b.n	8016a6a <find_volume+0x116>
 8016a68:	2200      	movs	r2, #0
 8016a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a6c:	009b      	lsls	r3, r3, #2
 8016a6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016a72:	440b      	add	r3, r1
 8016a74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8016a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a80:	2b03      	cmp	r3, #3
 8016a82:	d9dc      	bls.n	8016a3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016a84:	2300      	movs	r3, #0
 8016a86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d002      	beq.n	8016a94 <find_volume+0x140>
 8016a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a90:	3b01      	subs	r3, #1
 8016a92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a96:	009b      	lsls	r3, r3, #2
 8016a98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016a9c:	4413      	add	r3, r2
 8016a9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016aa2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d005      	beq.n	8016ab6 <find_volume+0x162>
 8016aaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016aae:	f7ff fefb 	bl	80168a8 <check_fs>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	e000      	b.n	8016ab8 <find_volume+0x164>
 8016ab6:	2303      	movs	r3, #3
 8016ab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ac0:	2b01      	cmp	r3, #1
 8016ac2:	d905      	bls.n	8016ad0 <find_volume+0x17c>
 8016ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8016aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016acc:	2b03      	cmp	r3, #3
 8016ace:	d9e1      	bls.n	8016a94 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ad4:	2b04      	cmp	r3, #4
 8016ad6:	d101      	bne.n	8016adc <find_volume+0x188>
 8016ad8:	2301      	movs	r3, #1
 8016ada:	e17d      	b.n	8016dd8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016adc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ae0:	2b01      	cmp	r3, #1
 8016ae2:	d901      	bls.n	8016ae8 <find_volume+0x194>
 8016ae4:	230d      	movs	r3, #13
 8016ae6:	e177      	b.n	8016dd8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aea:	3330      	adds	r3, #48	; 0x30
 8016aec:	330b      	adds	r3, #11
 8016aee:	4618      	mov	r0, r3
 8016af0:	f7fe fd1a 	bl	8015528 <ld_word>
 8016af4:	4603      	mov	r3, r0
 8016af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016afa:	d001      	beq.n	8016b00 <find_volume+0x1ac>
 8016afc:	230d      	movs	r3, #13
 8016afe:	e16b      	b.n	8016dd8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b02:	3330      	adds	r3, #48	; 0x30
 8016b04:	3316      	adds	r3, #22
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fe fd0e 	bl	8015528 <ld_word>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d106      	bne.n	8016b24 <find_volume+0x1d0>
 8016b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b18:	3330      	adds	r3, #48	; 0x30
 8016b1a:	3324      	adds	r3, #36	; 0x24
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7fe fd1b 	bl	8015558 <ld_dword>
 8016b22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b28:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b2c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8016b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b36:	789b      	ldrb	r3, [r3, #2]
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d005      	beq.n	8016b48 <find_volume+0x1f4>
 8016b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b3e:	789b      	ldrb	r3, [r3, #2]
 8016b40:	2b02      	cmp	r3, #2
 8016b42:	d001      	beq.n	8016b48 <find_volume+0x1f4>
 8016b44:	230d      	movs	r3, #13
 8016b46:	e147      	b.n	8016dd8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b4a:	789b      	ldrb	r3, [r3, #2]
 8016b4c:	461a      	mov	r2, r3
 8016b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b50:	fb02 f303 	mul.w	r3, r2, r3
 8016b54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016b5c:	b29a      	uxth	r2, r3
 8016b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b64:	895b      	ldrh	r3, [r3, #10]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d008      	beq.n	8016b7c <find_volume+0x228>
 8016b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b6c:	895b      	ldrh	r3, [r3, #10]
 8016b6e:	461a      	mov	r2, r3
 8016b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b72:	895b      	ldrh	r3, [r3, #10]
 8016b74:	3b01      	subs	r3, #1
 8016b76:	4013      	ands	r3, r2
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d001      	beq.n	8016b80 <find_volume+0x22c>
 8016b7c:	230d      	movs	r3, #13
 8016b7e:	e12b      	b.n	8016dd8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b82:	3330      	adds	r3, #48	; 0x30
 8016b84:	3311      	adds	r3, #17
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7fe fcce 	bl	8015528 <ld_word>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	461a      	mov	r2, r3
 8016b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b96:	891b      	ldrh	r3, [r3, #8]
 8016b98:	f003 030f 	and.w	r3, r3, #15
 8016b9c:	b29b      	uxth	r3, r3
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d001      	beq.n	8016ba6 <find_volume+0x252>
 8016ba2:	230d      	movs	r3, #13
 8016ba4:	e118      	b.n	8016dd8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ba8:	3330      	adds	r3, #48	; 0x30
 8016baa:	3313      	adds	r3, #19
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7fe fcbb 	bl	8015528 <ld_word>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d106      	bne.n	8016bca <find_volume+0x276>
 8016bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bbe:	3330      	adds	r3, #48	; 0x30
 8016bc0:	3320      	adds	r3, #32
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7fe fcc8 	bl	8015558 <ld_dword>
 8016bc8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bcc:	3330      	adds	r3, #48	; 0x30
 8016bce:	330e      	adds	r3, #14
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f7fe fca9 	bl	8015528 <ld_word>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d101      	bne.n	8016be4 <find_volume+0x290>
 8016be0:	230d      	movs	r3, #13
 8016be2:	e0f9      	b.n	8016dd8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016be4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016be8:	4413      	add	r3, r2
 8016bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016bec:	8912      	ldrh	r2, [r2, #8]
 8016bee:	0912      	lsrs	r2, r2, #4
 8016bf0:	b292      	uxth	r2, r2
 8016bf2:	4413      	add	r3, r2
 8016bf4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bfa:	429a      	cmp	r2, r3
 8016bfc:	d201      	bcs.n	8016c02 <find_volume+0x2ae>
 8016bfe:	230d      	movs	r3, #13
 8016c00:	e0ea      	b.n	8016dd8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c06:	1ad3      	subs	r3, r2, r3
 8016c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c0a:	8952      	ldrh	r2, [r2, #10]
 8016c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c10:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d103      	bne.n	8016c20 <find_volume+0x2cc>
 8016c18:	230d      	movs	r3, #13
 8016c1a:	e0dd      	b.n	8016dd8 <find_volume+0x484>
 8016c1c:	24040350 	.word	0x24040350
		fmt = FS_FAT32;
 8016c20:	2303      	movs	r3, #3
 8016c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016c2c:	4293      	cmp	r3, r2
 8016c2e:	d802      	bhi.n	8016c36 <find_volume+0x2e2>
 8016c30:	2302      	movs	r3, #2
 8016c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c38:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	d802      	bhi.n	8016c46 <find_volume+0x2f2>
 8016c40:	2301      	movs	r3, #1
 8016c42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c48:	1c9a      	adds	r2, r3, #2
 8016c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c4c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8016c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c52:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016c54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c58:	441a      	add	r2, r3
 8016c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c5c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8016c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c62:	441a      	add	r2, r3
 8016c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c66:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016c68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016c6c:	2b03      	cmp	r3, #3
 8016c6e:	d11e      	bne.n	8016cae <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c72:	3330      	adds	r3, #48	; 0x30
 8016c74:	332a      	adds	r3, #42	; 0x2a
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7fe fc56 	bl	8015528 <ld_word>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d001      	beq.n	8016c86 <find_volume+0x332>
 8016c82:	230d      	movs	r3, #13
 8016c84:	e0a8      	b.n	8016dd8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c88:	891b      	ldrh	r3, [r3, #8]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d001      	beq.n	8016c92 <find_volume+0x33e>
 8016c8e:	230d      	movs	r3, #13
 8016c90:	e0a2      	b.n	8016dd8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c94:	3330      	adds	r3, #48	; 0x30
 8016c96:	332c      	adds	r3, #44	; 0x2c
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7fe fc5d 	bl	8015558 <ld_dword>
 8016c9e:	4602      	mov	r2, r0
 8016ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca6:	695b      	ldr	r3, [r3, #20]
 8016ca8:	009b      	lsls	r3, r3, #2
 8016caa:	647b      	str	r3, [r7, #68]	; 0x44
 8016cac:	e01f      	b.n	8016cee <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb0:	891b      	ldrh	r3, [r3, #8]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d101      	bne.n	8016cba <find_volume+0x366>
 8016cb6:	230d      	movs	r3, #13
 8016cb8:	e08e      	b.n	8016dd8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cbc:	6a1a      	ldr	r2, [r3, #32]
 8016cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016cc0:	441a      	add	r2, r3
 8016cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d103      	bne.n	8016cd6 <find_volume+0x382>
 8016cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd0:	695b      	ldr	r3, [r3, #20]
 8016cd2:	005b      	lsls	r3, r3, #1
 8016cd4:	e00a      	b.n	8016cec <find_volume+0x398>
 8016cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd8:	695a      	ldr	r2, [r3, #20]
 8016cda:	4613      	mov	r3, r2
 8016cdc:	005b      	lsls	r3, r3, #1
 8016cde:	4413      	add	r3, r2
 8016ce0:	085a      	lsrs	r2, r3, #1
 8016ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ce4:	695b      	ldr	r3, [r3, #20]
 8016ce6:	f003 0301 	and.w	r3, r3, #1
 8016cea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016cec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf0:	699a      	ldr	r2, [r3, #24]
 8016cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cf4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016cf8:	0a5b      	lsrs	r3, r3, #9
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d201      	bcs.n	8016d02 <find_volume+0x3ae>
 8016cfe:	230d      	movs	r3, #13
 8016d00:	e06a      	b.n	8016dd8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d08:	611a      	str	r2, [r3, #16]
 8016d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d0c:	691a      	ldr	r2, [r3, #16]
 8016d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d10:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8016d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d14:	2280      	movs	r2, #128	; 0x80
 8016d16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016d18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d1c:	2b03      	cmp	r3, #3
 8016d1e:	d149      	bne.n	8016db4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d22:	3330      	adds	r3, #48	; 0x30
 8016d24:	3330      	adds	r3, #48	; 0x30
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7fe fbfe 	bl	8015528 <ld_word>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	2b01      	cmp	r3, #1
 8016d30:	d140      	bne.n	8016db4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d34:	3301      	adds	r3, #1
 8016d36:	4619      	mov	r1, r3
 8016d38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016d3a:	f7fe fea5 	bl	8015a88 <move_window>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d137      	bne.n	8016db4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8016d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d46:	2200      	movs	r2, #0
 8016d48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d4c:	3330      	adds	r3, #48	; 0x30
 8016d4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016d52:	4618      	mov	r0, r3
 8016d54:	f7fe fbe8 	bl	8015528 <ld_word>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016d60:	429a      	cmp	r2, r3
 8016d62:	d127      	bne.n	8016db4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d66:	3330      	adds	r3, #48	; 0x30
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f7fe fbf5 	bl	8015558 <ld_dword>
 8016d6e:	4602      	mov	r2, r0
 8016d70:	4b1b      	ldr	r3, [pc, #108]	; (8016de0 <find_volume+0x48c>)
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d11e      	bne.n	8016db4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d78:	3330      	adds	r3, #48	; 0x30
 8016d7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7fe fbea 	bl	8015558 <ld_dword>
 8016d84:	4602      	mov	r2, r0
 8016d86:	4b17      	ldr	r3, [pc, #92]	; (8016de4 <find_volume+0x490>)
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d113      	bne.n	8016db4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d8e:	3330      	adds	r3, #48	; 0x30
 8016d90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7fe fbdf 	bl	8015558 <ld_dword>
 8016d9a:	4602      	mov	r2, r0
 8016d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d9e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da2:	3330      	adds	r3, #48	; 0x30
 8016da4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7fe fbd5 	bl	8015558 <ld_dword>
 8016dae:	4602      	mov	r2, r0
 8016db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016dba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016dbc:	4b0a      	ldr	r3, [pc, #40]	; (8016de8 <find_volume+0x494>)
 8016dbe:	881b      	ldrh	r3, [r3, #0]
 8016dc0:	3301      	adds	r3, #1
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	4b08      	ldr	r3, [pc, #32]	; (8016de8 <find_volume+0x494>)
 8016dc6:	801a      	strh	r2, [r3, #0]
 8016dc8:	4b07      	ldr	r3, [pc, #28]	; (8016de8 <find_volume+0x494>)
 8016dca:	881a      	ldrh	r2, [r3, #0]
 8016dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016dd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016dd2:	f7fe fdf1 	bl	80159b8 <clear_lock>
#endif
	return FR_OK;
 8016dd6:	2300      	movs	r3, #0
}
 8016dd8:	4618      	mov	r0, r3
 8016dda:	3758      	adds	r7, #88	; 0x58
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd80      	pop	{r7, pc}
 8016de0:	41615252 	.word	0x41615252
 8016de4:	61417272 	.word	0x61417272
 8016de8:	24040354 	.word	0x24040354

08016dec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b084      	sub	sp, #16
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
 8016df4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016df6:	2309      	movs	r3, #9
 8016df8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d01c      	beq.n	8016e3a <validate+0x4e>
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d018      	beq.n	8016e3a <validate+0x4e>
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d013      	beq.n	8016e3a <validate+0x4e>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	889a      	ldrh	r2, [r3, #4]
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	88db      	ldrh	r3, [r3, #6]
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d10c      	bne.n	8016e3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	785b      	ldrb	r3, [r3, #1]
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7fe fae0 	bl	80153ec <disk_status>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	f003 0301 	and.w	r3, r3, #1
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d101      	bne.n	8016e3a <validate+0x4e>
			res = FR_OK;
 8016e36:	2300      	movs	r3, #0
 8016e38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016e3a:	7bfb      	ldrb	r3, [r7, #15]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d102      	bne.n	8016e46 <validate+0x5a>
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	e000      	b.n	8016e48 <validate+0x5c>
 8016e46:	2300      	movs	r3, #0
 8016e48:	683a      	ldr	r2, [r7, #0]
 8016e4a:	6013      	str	r3, [r2, #0]
	return res;
 8016e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3710      	adds	r7, #16
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
	...

08016e58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b088      	sub	sp, #32
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	60f8      	str	r0, [r7, #12]
 8016e60:	60b9      	str	r1, [r7, #8]
 8016e62:	4613      	mov	r3, r2
 8016e64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016e6a:	f107 0310 	add.w	r3, r7, #16
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7ff fcd5 	bl	801681e <get_ldnumber>
 8016e74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016e76:	69fb      	ldr	r3, [r7, #28]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	da01      	bge.n	8016e80 <f_mount+0x28>
 8016e7c:	230b      	movs	r3, #11
 8016e7e:	e02b      	b.n	8016ed8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016e80:	4a17      	ldr	r2, [pc, #92]	; (8016ee0 <f_mount+0x88>)
 8016e82:	69fb      	ldr	r3, [r7, #28]
 8016e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016e8a:	69bb      	ldr	r3, [r7, #24]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d005      	beq.n	8016e9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016e90:	69b8      	ldr	r0, [r7, #24]
 8016e92:	f7fe fd91 	bl	80159b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016e96:	69bb      	ldr	r3, [r7, #24]
 8016e98:	2200      	movs	r2, #0
 8016e9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d002      	beq.n	8016ea8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016ea8:	68fa      	ldr	r2, [r7, #12]
 8016eaa:	490d      	ldr	r1, [pc, #52]	; (8016ee0 <f_mount+0x88>)
 8016eac:	69fb      	ldr	r3, [r7, #28]
 8016eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d002      	beq.n	8016ebe <f_mount+0x66>
 8016eb8:	79fb      	ldrb	r3, [r7, #7]
 8016eba:	2b01      	cmp	r3, #1
 8016ebc:	d001      	beq.n	8016ec2 <f_mount+0x6a>
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	e00a      	b.n	8016ed8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016ec2:	f107 010c 	add.w	r1, r7, #12
 8016ec6:	f107 0308 	add.w	r3, r7, #8
 8016eca:	2200      	movs	r2, #0
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7ff fd41 	bl	8016954 <find_volume>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3720      	adds	r7, #32
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}
 8016ee0:	24040350 	.word	0x24040350

08016ee4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b098      	sub	sp, #96	; 0x60
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	60f8      	str	r0, [r7, #12]
 8016eec:	60b9      	str	r1, [r7, #8]
 8016eee:	4613      	mov	r3, r2
 8016ef0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d101      	bne.n	8016efc <f_open+0x18>
 8016ef8:	2309      	movs	r3, #9
 8016efa:	e1ad      	b.n	8017258 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016efc:	79fb      	ldrb	r3, [r7, #7]
 8016efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016f02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016f04:	79fa      	ldrb	r2, [r7, #7]
 8016f06:	f107 0110 	add.w	r1, r7, #16
 8016f0a:	f107 0308 	add.w	r3, r7, #8
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7ff fd20 	bl	8016954 <find_volume>
 8016f14:	4603      	mov	r3, r0
 8016f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8016f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	f040 8191 	bne.w	8017246 <f_open+0x362>
		dj.obj.fs = fs;
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016f28:	68ba      	ldr	r2, [r7, #8]
 8016f2a:	f107 0314 	add.w	r3, r7, #20
 8016f2e:	4611      	mov	r1, r2
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7ff fc03 	bl	801673c <follow_path>
 8016f36:	4603      	mov	r3, r0
 8016f38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d11a      	bne.n	8016f7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016f44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016f48:	b25b      	sxtb	r3, r3
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	da03      	bge.n	8016f56 <f_open+0x72>
				res = FR_INVALID_NAME;
 8016f4e:	2306      	movs	r3, #6
 8016f50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016f54:	e011      	b.n	8016f7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016f56:	79fb      	ldrb	r3, [r7, #7]
 8016f58:	f023 0301 	bic.w	r3, r3, #1
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	bf14      	ite	ne
 8016f60:	2301      	movne	r3, #1
 8016f62:	2300      	moveq	r3, #0
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	461a      	mov	r2, r3
 8016f68:	f107 0314 	add.w	r3, r7, #20
 8016f6c:	4611      	mov	r1, r2
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7fe fbda 	bl	8015728 <chk_lock>
 8016f74:	4603      	mov	r3, r0
 8016f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016f7a:	79fb      	ldrb	r3, [r7, #7]
 8016f7c:	f003 031c 	and.w	r3, r3, #28
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d07f      	beq.n	8017084 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d017      	beq.n	8016fbc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f90:	2b04      	cmp	r3, #4
 8016f92:	d10e      	bne.n	8016fb2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016f94:	f7fe fc24 	bl	80157e0 <enq_lock>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d006      	beq.n	8016fac <f_open+0xc8>
 8016f9e:	f107 0314 	add.w	r3, r7, #20
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7ff fb03 	bl	80165ae <dir_register>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	e000      	b.n	8016fae <f_open+0xca>
 8016fac:	2312      	movs	r3, #18
 8016fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016fb2:	79fb      	ldrb	r3, [r7, #7]
 8016fb4:	f043 0308 	orr.w	r3, r3, #8
 8016fb8:	71fb      	strb	r3, [r7, #7]
 8016fba:	e010      	b.n	8016fde <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016fbc:	7ebb      	ldrb	r3, [r7, #26]
 8016fbe:	f003 0311 	and.w	r3, r3, #17
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d003      	beq.n	8016fce <f_open+0xea>
					res = FR_DENIED;
 8016fc6:	2307      	movs	r3, #7
 8016fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016fcc:	e007      	b.n	8016fde <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016fce:	79fb      	ldrb	r3, [r7, #7]
 8016fd0:	f003 0304 	and.w	r3, r3, #4
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d002      	beq.n	8016fde <f_open+0xfa>
 8016fd8:	2308      	movs	r3, #8
 8016fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d168      	bne.n	80170b8 <f_open+0x1d4>
 8016fe6:	79fb      	ldrb	r3, [r7, #7]
 8016fe8:	f003 0308 	and.w	r3, r3, #8
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d063      	beq.n	80170b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016ff0:	f7fb f8fe 	bl	80121f0 <get_fattime>
 8016ff4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ff8:	330e      	adds	r3, #14
 8016ffa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7fe fae9 	bl	80155d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017004:	3316      	adds	r3, #22
 8017006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017008:	4618      	mov	r0, r3
 801700a:	f7fe fae3 	bl	80155d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017010:	330b      	adds	r3, #11
 8017012:	2220      	movs	r2, #32
 8017014:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801701a:	4611      	mov	r1, r2
 801701c:	4618      	mov	r0, r3
 801701e:	f7ff fa32 	bl	8016486 <ld_clust>
 8017022:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017028:	2200      	movs	r2, #0
 801702a:	4618      	mov	r0, r3
 801702c:	f7ff fa4a 	bl	80164c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017032:	331c      	adds	r3, #28
 8017034:	2100      	movs	r1, #0
 8017036:	4618      	mov	r0, r3
 8017038:	f7fe facc 	bl	80155d4 <st_dword>
					fs->wflag = 1;
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	2201      	movs	r2, #1
 8017040:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017044:	2b00      	cmp	r3, #0
 8017046:	d037      	beq.n	80170b8 <f_open+0x1d4>
						dw = fs->winsect;
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801704c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801704e:	f107 0314 	add.w	r3, r7, #20
 8017052:	2200      	movs	r2, #0
 8017054:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017056:	4618      	mov	r0, r3
 8017058:	f7fe ff5d 	bl	8015f16 <remove_chain>
 801705c:	4603      	mov	r3, r0
 801705e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8017062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017066:	2b00      	cmp	r3, #0
 8017068:	d126      	bne.n	80170b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801706a:	693b      	ldr	r3, [r7, #16]
 801706c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801706e:	4618      	mov	r0, r3
 8017070:	f7fe fd0a 	bl	8015a88 <move_window>
 8017074:	4603      	mov	r3, r0
 8017076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801707a:	693b      	ldr	r3, [r7, #16]
 801707c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801707e:	3a01      	subs	r2, #1
 8017080:	60da      	str	r2, [r3, #12]
 8017082:	e019      	b.n	80170b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017088:	2b00      	cmp	r3, #0
 801708a:	d115      	bne.n	80170b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801708c:	7ebb      	ldrb	r3, [r7, #26]
 801708e:	f003 0310 	and.w	r3, r3, #16
 8017092:	2b00      	cmp	r3, #0
 8017094:	d003      	beq.n	801709e <f_open+0x1ba>
					res = FR_NO_FILE;
 8017096:	2304      	movs	r3, #4
 8017098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801709c:	e00c      	b.n	80170b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801709e:	79fb      	ldrb	r3, [r7, #7]
 80170a0:	f003 0302 	and.w	r3, r3, #2
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d007      	beq.n	80170b8 <f_open+0x1d4>
 80170a8:	7ebb      	ldrb	r3, [r7, #26]
 80170aa:	f003 0301 	and.w	r3, r3, #1
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d002      	beq.n	80170b8 <f_open+0x1d4>
						res = FR_DENIED;
 80170b2:	2307      	movs	r3, #7
 80170b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80170b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d128      	bne.n	8017112 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80170c0:	79fb      	ldrb	r3, [r7, #7]
 80170c2:	f003 0308 	and.w	r3, r3, #8
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d003      	beq.n	80170d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80170ca:	79fb      	ldrb	r3, [r7, #7]
 80170cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80170d2:	693b      	ldr	r3, [r7, #16]
 80170d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80170da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80170e0:	79fb      	ldrb	r3, [r7, #7]
 80170e2:	f023 0301 	bic.w	r3, r3, #1
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	bf14      	ite	ne
 80170ea:	2301      	movne	r3, #1
 80170ec:	2300      	moveq	r3, #0
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	461a      	mov	r2, r3
 80170f2:	f107 0314 	add.w	r3, r7, #20
 80170f6:	4611      	mov	r1, r2
 80170f8:	4618      	mov	r0, r3
 80170fa:	f7fe fb93 	bl	8015824 <inc_lock>
 80170fe:	4602      	mov	r2, r0
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	691b      	ldr	r3, [r3, #16]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d102      	bne.n	8017112 <f_open+0x22e>
 801710c:	2302      	movs	r3, #2
 801710e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8017112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017116:	2b00      	cmp	r3, #0
 8017118:	f040 8095 	bne.w	8017246 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801711c:	693b      	ldr	r3, [r7, #16]
 801711e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017120:	4611      	mov	r1, r2
 8017122:	4618      	mov	r0, r3
 8017124:	f7ff f9af 	bl	8016486 <ld_clust>
 8017128:	4602      	mov	r2, r0
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017130:	331c      	adds	r3, #28
 8017132:	4618      	mov	r0, r3
 8017134:	f7fe fa10 	bl	8015558 <ld_dword>
 8017138:	4602      	mov	r2, r0
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	2200      	movs	r2, #0
 8017142:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017144:	693a      	ldr	r2, [r7, #16]
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	88da      	ldrh	r2, [r3, #6]
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	79fa      	ldrb	r2, [r7, #7]
 8017156:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2200      	movs	r2, #0
 801715c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	2200      	movs	r2, #0
 8017162:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	2200      	movs	r2, #0
 8017168:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	3330      	adds	r3, #48	; 0x30
 801716e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017172:	2100      	movs	r1, #0
 8017174:	4618      	mov	r0, r3
 8017176:	f7fe fa7a 	bl	801566e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801717a:	79fb      	ldrb	r3, [r7, #7]
 801717c:	f003 0320 	and.w	r3, r3, #32
 8017180:	2b00      	cmp	r3, #0
 8017182:	d060      	beq.n	8017246 <f_open+0x362>
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d05c      	beq.n	8017246 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	68da      	ldr	r2, [r3, #12]
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017194:	693b      	ldr	r3, [r7, #16]
 8017196:	895b      	ldrh	r3, [r3, #10]
 8017198:	025b      	lsls	r3, r3, #9
 801719a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	689b      	ldr	r3, [r3, #8]
 80171a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	68db      	ldr	r3, [r3, #12]
 80171a6:	657b      	str	r3, [r7, #84]	; 0x54
 80171a8:	e016      	b.n	80171d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7fe fd25 	bl	8015bfe <get_fat>
 80171b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80171b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171b8:	2b01      	cmp	r3, #1
 80171ba:	d802      	bhi.n	80171c2 <f_open+0x2de>
 80171bc:	2302      	movs	r3, #2
 80171be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80171c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80171c8:	d102      	bne.n	80171d0 <f_open+0x2ec>
 80171ca:	2301      	movs	r3, #1
 80171cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80171d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80171d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171d4:	1ad3      	subs	r3, r2, r3
 80171d6:	657b      	str	r3, [r7, #84]	; 0x54
 80171d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d103      	bne.n	80171e8 <f_open+0x304>
 80171e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80171e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171e4:	429a      	cmp	r2, r3
 80171e6:	d8e0      	bhi.n	80171aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80171ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80171ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d127      	bne.n	8017246 <f_open+0x362>
 80171f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d022      	beq.n	8017246 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017200:	693b      	ldr	r3, [r7, #16]
 8017202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017204:	4618      	mov	r0, r3
 8017206:	f7fe fcdb 	bl	8015bc0 <clust2sect>
 801720a:	6478      	str	r0, [r7, #68]	; 0x44
 801720c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801720e:	2b00      	cmp	r3, #0
 8017210:	d103      	bne.n	801721a <f_open+0x336>
						res = FR_INT_ERR;
 8017212:	2302      	movs	r3, #2
 8017214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017218:	e015      	b.n	8017246 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801721a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801721c:	0a5a      	lsrs	r2, r3, #9
 801721e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017220:	441a      	add	r2, r3
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017226:	693b      	ldr	r3, [r7, #16]
 8017228:	7858      	ldrb	r0, [r3, #1]
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	6a1a      	ldr	r2, [r3, #32]
 8017234:	2301      	movs	r3, #1
 8017236:	f7fe f919 	bl	801546c <disk_read>
 801723a:	4603      	mov	r3, r0
 801723c:	2b00      	cmp	r3, #0
 801723e:	d002      	beq.n	8017246 <f_open+0x362>
 8017240:	2301      	movs	r3, #1
 8017242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801724a:	2b00      	cmp	r3, #0
 801724c:	d002      	beq.n	8017254 <f_open+0x370>
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	2200      	movs	r2, #0
 8017252:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8017258:	4618      	mov	r0, r3
 801725a:	3760      	adds	r7, #96	; 0x60
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}

08017260 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b08e      	sub	sp, #56	; 0x38
 8017264:	af00      	add	r7, sp, #0
 8017266:	60f8      	str	r0, [r7, #12]
 8017268:	60b9      	str	r1, [r7, #8]
 801726a:	607a      	str	r2, [r7, #4]
 801726c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801726e:	68bb      	ldr	r3, [r7, #8]
 8017270:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	2200      	movs	r2, #0
 8017276:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	f107 0214 	add.w	r2, r7, #20
 801727e:	4611      	mov	r1, r2
 8017280:	4618      	mov	r0, r3
 8017282:	f7ff fdb3 	bl	8016dec <validate>
 8017286:	4603      	mov	r3, r0
 8017288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801728c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017290:	2b00      	cmp	r3, #0
 8017292:	d107      	bne.n	80172a4 <f_read+0x44>
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	7d5b      	ldrb	r3, [r3, #21]
 8017298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801729c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d002      	beq.n	80172aa <f_read+0x4a>
 80172a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80172a8:	e115      	b.n	80174d6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	7d1b      	ldrb	r3, [r3, #20]
 80172ae:	f003 0301 	and.w	r3, r3, #1
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d101      	bne.n	80172ba <f_read+0x5a>
 80172b6:	2307      	movs	r3, #7
 80172b8:	e10d      	b.n	80174d6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	68da      	ldr	r2, [r3, #12]
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	699b      	ldr	r3, [r3, #24]
 80172c2:	1ad3      	subs	r3, r2, r3
 80172c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80172c6:	687a      	ldr	r2, [r7, #4]
 80172c8:	6a3b      	ldr	r3, [r7, #32]
 80172ca:	429a      	cmp	r2, r3
 80172cc:	f240 80fe 	bls.w	80174cc <f_read+0x26c>
 80172d0:	6a3b      	ldr	r3, [r7, #32]
 80172d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80172d4:	e0fa      	b.n	80174cc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	699b      	ldr	r3, [r3, #24]
 80172da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172de:	2b00      	cmp	r3, #0
 80172e0:	f040 80c6 	bne.w	8017470 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	699b      	ldr	r3, [r3, #24]
 80172e8:	0a5b      	lsrs	r3, r3, #9
 80172ea:	697a      	ldr	r2, [r7, #20]
 80172ec:	8952      	ldrh	r2, [r2, #10]
 80172ee:	3a01      	subs	r2, #1
 80172f0:	4013      	ands	r3, r2
 80172f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80172f4:	69fb      	ldr	r3, [r7, #28]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d12f      	bne.n	801735a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	699b      	ldr	r3, [r3, #24]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d103      	bne.n	801730a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	689b      	ldr	r3, [r3, #8]
 8017306:	633b      	str	r3, [r7, #48]	; 0x30
 8017308:	e013      	b.n	8017332 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801730e:	2b00      	cmp	r3, #0
 8017310:	d007      	beq.n	8017322 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	699b      	ldr	r3, [r3, #24]
 8017316:	4619      	mov	r1, r3
 8017318:	68f8      	ldr	r0, [r7, #12]
 801731a:	f7fe fef9 	bl	8016110 <clmt_clust>
 801731e:	6338      	str	r0, [r7, #48]	; 0x30
 8017320:	e007      	b.n	8017332 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017322:	68fa      	ldr	r2, [r7, #12]
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	69db      	ldr	r3, [r3, #28]
 8017328:	4619      	mov	r1, r3
 801732a:	4610      	mov	r0, r2
 801732c:	f7fe fc67 	bl	8015bfe <get_fat>
 8017330:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017334:	2b01      	cmp	r3, #1
 8017336:	d804      	bhi.n	8017342 <f_read+0xe2>
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2202      	movs	r2, #2
 801733c:	755a      	strb	r2, [r3, #21]
 801733e:	2302      	movs	r3, #2
 8017340:	e0c9      	b.n	80174d6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017348:	d104      	bne.n	8017354 <f_read+0xf4>
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	2201      	movs	r2, #1
 801734e:	755a      	strb	r2, [r3, #21]
 8017350:	2301      	movs	r3, #1
 8017352:	e0c0      	b.n	80174d6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017358:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801735a:	697a      	ldr	r2, [r7, #20]
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	69db      	ldr	r3, [r3, #28]
 8017360:	4619      	mov	r1, r3
 8017362:	4610      	mov	r0, r2
 8017364:	f7fe fc2c 	bl	8015bc0 <clust2sect>
 8017368:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801736a:	69bb      	ldr	r3, [r7, #24]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d104      	bne.n	801737a <f_read+0x11a>
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	2202      	movs	r2, #2
 8017374:	755a      	strb	r2, [r3, #21]
 8017376:	2302      	movs	r3, #2
 8017378:	e0ad      	b.n	80174d6 <f_read+0x276>
			sect += csect;
 801737a:	69ba      	ldr	r2, [r7, #24]
 801737c:	69fb      	ldr	r3, [r7, #28]
 801737e:	4413      	add	r3, r2
 8017380:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	0a5b      	lsrs	r3, r3, #9
 8017386:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801738a:	2b00      	cmp	r3, #0
 801738c:	d039      	beq.n	8017402 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801738e:	69fa      	ldr	r2, [r7, #28]
 8017390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017392:	4413      	add	r3, r2
 8017394:	697a      	ldr	r2, [r7, #20]
 8017396:	8952      	ldrh	r2, [r2, #10]
 8017398:	4293      	cmp	r3, r2
 801739a:	d905      	bls.n	80173a8 <f_read+0x148>
					cc = fs->csize - csect;
 801739c:	697b      	ldr	r3, [r7, #20]
 801739e:	895b      	ldrh	r3, [r3, #10]
 80173a0:	461a      	mov	r2, r3
 80173a2:	69fb      	ldr	r3, [r7, #28]
 80173a4:	1ad3      	subs	r3, r2, r3
 80173a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	7858      	ldrb	r0, [r3, #1]
 80173ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ae:	69ba      	ldr	r2, [r7, #24]
 80173b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80173b2:	f7fe f85b 	bl	801546c <disk_read>
 80173b6:	4603      	mov	r3, r0
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d004      	beq.n	80173c6 <f_read+0x166>
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	2201      	movs	r2, #1
 80173c0:	755a      	strb	r2, [r3, #21]
 80173c2:	2301      	movs	r3, #1
 80173c4:	e087      	b.n	80174d6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	7d1b      	ldrb	r3, [r3, #20]
 80173ca:	b25b      	sxtb	r3, r3
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	da14      	bge.n	80173fa <f_read+0x19a>
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	6a1a      	ldr	r2, [r3, #32]
 80173d4:	69bb      	ldr	r3, [r7, #24]
 80173d6:	1ad3      	subs	r3, r2, r3
 80173d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173da:	429a      	cmp	r2, r3
 80173dc:	d90d      	bls.n	80173fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	6a1a      	ldr	r2, [r3, #32]
 80173e2:	69bb      	ldr	r3, [r7, #24]
 80173e4:	1ad3      	subs	r3, r2, r3
 80173e6:	025b      	lsls	r3, r3, #9
 80173e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173ea:	18d0      	adds	r0, r2, r3
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	3330      	adds	r3, #48	; 0x30
 80173f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80173f4:	4619      	mov	r1, r3
 80173f6:	f7fe f919 	bl	801562c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80173fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173fc:	025b      	lsls	r3, r3, #9
 80173fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8017400:	e050      	b.n	80174a4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	6a1b      	ldr	r3, [r3, #32]
 8017406:	69ba      	ldr	r2, [r7, #24]
 8017408:	429a      	cmp	r2, r3
 801740a:	d02e      	beq.n	801746a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	7d1b      	ldrb	r3, [r3, #20]
 8017410:	b25b      	sxtb	r3, r3
 8017412:	2b00      	cmp	r3, #0
 8017414:	da18      	bge.n	8017448 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017416:	697b      	ldr	r3, [r7, #20]
 8017418:	7858      	ldrb	r0, [r3, #1]
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	6a1a      	ldr	r2, [r3, #32]
 8017424:	2301      	movs	r3, #1
 8017426:	f7fe f841 	bl	80154ac <disk_write>
 801742a:	4603      	mov	r3, r0
 801742c:	2b00      	cmp	r3, #0
 801742e:	d004      	beq.n	801743a <f_read+0x1da>
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	2201      	movs	r2, #1
 8017434:	755a      	strb	r2, [r3, #21]
 8017436:	2301      	movs	r3, #1
 8017438:	e04d      	b.n	80174d6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	7d1b      	ldrb	r3, [r3, #20]
 801743e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017442:	b2da      	uxtb	r2, r3
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8017448:	697b      	ldr	r3, [r7, #20]
 801744a:	7858      	ldrb	r0, [r3, #1]
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017452:	2301      	movs	r3, #1
 8017454:	69ba      	ldr	r2, [r7, #24]
 8017456:	f7fe f809 	bl	801546c <disk_read>
 801745a:	4603      	mov	r3, r0
 801745c:	2b00      	cmp	r3, #0
 801745e:	d004      	beq.n	801746a <f_read+0x20a>
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	2201      	movs	r2, #1
 8017464:	755a      	strb	r2, [r3, #21]
 8017466:	2301      	movs	r3, #1
 8017468:	e035      	b.n	80174d6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	69ba      	ldr	r2, [r7, #24]
 801746e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	699b      	ldr	r3, [r3, #24]
 8017474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017478:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801747c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801747e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	429a      	cmp	r2, r3
 8017484:	d901      	bls.n	801748a <f_read+0x22a>
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	699b      	ldr	r3, [r3, #24]
 8017494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017498:	4413      	add	r3, r2
 801749a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801749c:	4619      	mov	r1, r3
 801749e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174a0:	f7fe f8c4 	bl	801562c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80174a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a8:	4413      	add	r3, r2
 80174aa:	627b      	str	r3, [r7, #36]	; 0x24
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	699a      	ldr	r2, [r3, #24]
 80174b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b2:	441a      	add	r2, r3
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	619a      	str	r2, [r3, #24]
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	681a      	ldr	r2, [r3, #0]
 80174bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174be:	441a      	add	r2, r3
 80174c0:	683b      	ldr	r3, [r7, #0]
 80174c2:	601a      	str	r2, [r3, #0]
 80174c4:	687a      	ldr	r2, [r7, #4]
 80174c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c8:	1ad3      	subs	r3, r2, r3
 80174ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	f47f af01 	bne.w	80172d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80174d4:	2300      	movs	r3, #0
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3738      	adds	r7, #56	; 0x38
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}

080174de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80174de:	b580      	push	{r7, lr}
 80174e0:	b08c      	sub	sp, #48	; 0x30
 80174e2:	af00      	add	r7, sp, #0
 80174e4:	60f8      	str	r0, [r7, #12]
 80174e6:	60b9      	str	r1, [r7, #8]
 80174e8:	607a      	str	r2, [r7, #4]
 80174ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80174f0:	683b      	ldr	r3, [r7, #0]
 80174f2:	2200      	movs	r2, #0
 80174f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	f107 0210 	add.w	r2, r7, #16
 80174fc:	4611      	mov	r1, r2
 80174fe:	4618      	mov	r0, r3
 8017500:	f7ff fc74 	bl	8016dec <validate>
 8017504:	4603      	mov	r3, r0
 8017506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801750a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801750e:	2b00      	cmp	r3, #0
 8017510:	d107      	bne.n	8017522 <f_write+0x44>
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	7d5b      	ldrb	r3, [r3, #21]
 8017516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801751a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801751e:	2b00      	cmp	r3, #0
 8017520:	d002      	beq.n	8017528 <f_write+0x4a>
 8017522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017526:	e14b      	b.n	80177c0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	7d1b      	ldrb	r3, [r3, #20]
 801752c:	f003 0302 	and.w	r3, r3, #2
 8017530:	2b00      	cmp	r3, #0
 8017532:	d101      	bne.n	8017538 <f_write+0x5a>
 8017534:	2307      	movs	r3, #7
 8017536:	e143      	b.n	80177c0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	699a      	ldr	r2, [r3, #24]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	441a      	add	r2, r3
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	699b      	ldr	r3, [r3, #24]
 8017544:	429a      	cmp	r2, r3
 8017546:	f080 812d 	bcs.w	80177a4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	699b      	ldr	r3, [r3, #24]
 801754e:	43db      	mvns	r3, r3
 8017550:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8017552:	e127      	b.n	80177a4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	699b      	ldr	r3, [r3, #24]
 8017558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801755c:	2b00      	cmp	r3, #0
 801755e:	f040 80e3 	bne.w	8017728 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	699b      	ldr	r3, [r3, #24]
 8017566:	0a5b      	lsrs	r3, r3, #9
 8017568:	693a      	ldr	r2, [r7, #16]
 801756a:	8952      	ldrh	r2, [r2, #10]
 801756c:	3a01      	subs	r2, #1
 801756e:	4013      	ands	r3, r2
 8017570:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8017572:	69bb      	ldr	r3, [r7, #24]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d143      	bne.n	8017600 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	699b      	ldr	r3, [r3, #24]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d10c      	bne.n	801759a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	689b      	ldr	r3, [r3, #8]
 8017584:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017588:	2b00      	cmp	r3, #0
 801758a:	d11a      	bne.n	80175c2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	2100      	movs	r1, #0
 8017590:	4618      	mov	r0, r3
 8017592:	f7fe fd25 	bl	8015fe0 <create_chain>
 8017596:	62b8      	str	r0, [r7, #40]	; 0x28
 8017598:	e013      	b.n	80175c2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d007      	beq.n	80175b2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	699b      	ldr	r3, [r3, #24]
 80175a6:	4619      	mov	r1, r3
 80175a8:	68f8      	ldr	r0, [r7, #12]
 80175aa:	f7fe fdb1 	bl	8016110 <clmt_clust>
 80175ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80175b0:	e007      	b.n	80175c2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80175b2:	68fa      	ldr	r2, [r7, #12]
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	69db      	ldr	r3, [r3, #28]
 80175b8:	4619      	mov	r1, r3
 80175ba:	4610      	mov	r0, r2
 80175bc:	f7fe fd10 	bl	8015fe0 <create_chain>
 80175c0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80175c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	f000 80f2 	beq.w	80177ae <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80175ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175cc:	2b01      	cmp	r3, #1
 80175ce:	d104      	bne.n	80175da <f_write+0xfc>
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2202      	movs	r2, #2
 80175d4:	755a      	strb	r2, [r3, #21]
 80175d6:	2302      	movs	r3, #2
 80175d8:	e0f2      	b.n	80177c0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80175da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80175e0:	d104      	bne.n	80175ec <f_write+0x10e>
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	2201      	movs	r2, #1
 80175e6:	755a      	strb	r2, [r3, #21]
 80175e8:	2301      	movs	r3, #1
 80175ea:	e0e9      	b.n	80177c0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175f0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	689b      	ldr	r3, [r3, #8]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d102      	bne.n	8017600 <f_write+0x122>
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175fe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	7d1b      	ldrb	r3, [r3, #20]
 8017604:	b25b      	sxtb	r3, r3
 8017606:	2b00      	cmp	r3, #0
 8017608:	da18      	bge.n	801763c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801760a:	693b      	ldr	r3, [r7, #16]
 801760c:	7858      	ldrb	r0, [r3, #1]
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	6a1a      	ldr	r2, [r3, #32]
 8017618:	2301      	movs	r3, #1
 801761a:	f7fd ff47 	bl	80154ac <disk_write>
 801761e:	4603      	mov	r3, r0
 8017620:	2b00      	cmp	r3, #0
 8017622:	d004      	beq.n	801762e <f_write+0x150>
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	2201      	movs	r2, #1
 8017628:	755a      	strb	r2, [r3, #21]
 801762a:	2301      	movs	r3, #1
 801762c:	e0c8      	b.n	80177c0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	7d1b      	ldrb	r3, [r3, #20]
 8017632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017636:	b2da      	uxtb	r2, r3
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801763c:	693a      	ldr	r2, [r7, #16]
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	69db      	ldr	r3, [r3, #28]
 8017642:	4619      	mov	r1, r3
 8017644:	4610      	mov	r0, r2
 8017646:	f7fe fabb 	bl	8015bc0 <clust2sect>
 801764a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d104      	bne.n	801765c <f_write+0x17e>
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	2202      	movs	r2, #2
 8017656:	755a      	strb	r2, [r3, #21]
 8017658:	2302      	movs	r3, #2
 801765a:	e0b1      	b.n	80177c0 <f_write+0x2e2>
			sect += csect;
 801765c:	697a      	ldr	r2, [r7, #20]
 801765e:	69bb      	ldr	r3, [r7, #24]
 8017660:	4413      	add	r3, r2
 8017662:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	0a5b      	lsrs	r3, r3, #9
 8017668:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801766a:	6a3b      	ldr	r3, [r7, #32]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d03c      	beq.n	80176ea <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017670:	69ba      	ldr	r2, [r7, #24]
 8017672:	6a3b      	ldr	r3, [r7, #32]
 8017674:	4413      	add	r3, r2
 8017676:	693a      	ldr	r2, [r7, #16]
 8017678:	8952      	ldrh	r2, [r2, #10]
 801767a:	4293      	cmp	r3, r2
 801767c:	d905      	bls.n	801768a <f_write+0x1ac>
					cc = fs->csize - csect;
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	895b      	ldrh	r3, [r3, #10]
 8017682:	461a      	mov	r2, r3
 8017684:	69bb      	ldr	r3, [r7, #24]
 8017686:	1ad3      	subs	r3, r2, r3
 8017688:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	7858      	ldrb	r0, [r3, #1]
 801768e:	6a3b      	ldr	r3, [r7, #32]
 8017690:	697a      	ldr	r2, [r7, #20]
 8017692:	69f9      	ldr	r1, [r7, #28]
 8017694:	f7fd ff0a 	bl	80154ac <disk_write>
 8017698:	4603      	mov	r3, r0
 801769a:	2b00      	cmp	r3, #0
 801769c:	d004      	beq.n	80176a8 <f_write+0x1ca>
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	2201      	movs	r2, #1
 80176a2:	755a      	strb	r2, [r3, #21]
 80176a4:	2301      	movs	r3, #1
 80176a6:	e08b      	b.n	80177c0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	6a1a      	ldr	r2, [r3, #32]
 80176ac:	697b      	ldr	r3, [r7, #20]
 80176ae:	1ad3      	subs	r3, r2, r3
 80176b0:	6a3a      	ldr	r2, [r7, #32]
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d915      	bls.n	80176e2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	6a1a      	ldr	r2, [r3, #32]
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	1ad3      	subs	r3, r2, r3
 80176c4:	025b      	lsls	r3, r3, #9
 80176c6:	69fa      	ldr	r2, [r7, #28]
 80176c8:	4413      	add	r3, r2
 80176ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176ce:	4619      	mov	r1, r3
 80176d0:	f7fd ffac 	bl	801562c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	7d1b      	ldrb	r3, [r3, #20]
 80176d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176dc:	b2da      	uxtb	r2, r3
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80176e2:	6a3b      	ldr	r3, [r7, #32]
 80176e4:	025b      	lsls	r3, r3, #9
 80176e6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80176e8:	e03f      	b.n	801776a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	6a1b      	ldr	r3, [r3, #32]
 80176ee:	697a      	ldr	r2, [r7, #20]
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d016      	beq.n	8017722 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	699a      	ldr	r2, [r3, #24]
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80176fc:	429a      	cmp	r2, r3
 80176fe:	d210      	bcs.n	8017722 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017700:	693b      	ldr	r3, [r7, #16]
 8017702:	7858      	ldrb	r0, [r3, #1]
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801770a:	2301      	movs	r3, #1
 801770c:	697a      	ldr	r2, [r7, #20]
 801770e:	f7fd fead 	bl	801546c <disk_read>
 8017712:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017714:	2b00      	cmp	r3, #0
 8017716:	d004      	beq.n	8017722 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	2201      	movs	r2, #1
 801771c:	755a      	strb	r2, [r3, #21]
 801771e:	2301      	movs	r3, #1
 8017720:	e04e      	b.n	80177c0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	697a      	ldr	r2, [r7, #20]
 8017726:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	699b      	ldr	r3, [r3, #24]
 801772c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017730:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017734:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	429a      	cmp	r2, r3
 801773c:	d901      	bls.n	8017742 <f_write+0x264>
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	699b      	ldr	r3, [r3, #24]
 801774c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017750:	4413      	add	r3, r2
 8017752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017754:	69f9      	ldr	r1, [r7, #28]
 8017756:	4618      	mov	r0, r3
 8017758:	f7fd ff68 	bl	801562c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	7d1b      	ldrb	r3, [r3, #20]
 8017760:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017764:	b2da      	uxtb	r2, r3
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801776a:	69fa      	ldr	r2, [r7, #28]
 801776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801776e:	4413      	add	r3, r2
 8017770:	61fb      	str	r3, [r7, #28]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	699a      	ldr	r2, [r3, #24]
 8017776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017778:	441a      	add	r2, r3
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	619a      	str	r2, [r3, #24]
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	68da      	ldr	r2, [r3, #12]
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	699b      	ldr	r3, [r3, #24]
 8017786:	429a      	cmp	r2, r3
 8017788:	bf38      	it	cc
 801778a:	461a      	movcc	r2, r3
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	60da      	str	r2, [r3, #12]
 8017790:	683b      	ldr	r3, [r7, #0]
 8017792:	681a      	ldr	r2, [r3, #0]
 8017794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017796:	441a      	add	r2, r3
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	601a      	str	r2, [r3, #0]
 801779c:	687a      	ldr	r2, [r7, #4]
 801779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a0:	1ad3      	subs	r3, r2, r3
 80177a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	f47f aed4 	bne.w	8017554 <f_write+0x76>
 80177ac:	e000      	b.n	80177b0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80177ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	7d1b      	ldrb	r3, [r3, #20]
 80177b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177b8:	b2da      	uxtb	r2, r3
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80177be:	2300      	movs	r3, #0
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	3730      	adds	r7, #48	; 0x30
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}

080177c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b086      	sub	sp, #24
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	f107 0208 	add.w	r2, r7, #8
 80177d6:	4611      	mov	r1, r2
 80177d8:	4618      	mov	r0, r3
 80177da:	f7ff fb07 	bl	8016dec <validate>
 80177de:	4603      	mov	r3, r0
 80177e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80177e2:	7dfb      	ldrb	r3, [r7, #23]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d168      	bne.n	80178ba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	7d1b      	ldrb	r3, [r3, #20]
 80177ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d062      	beq.n	80178ba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	7d1b      	ldrb	r3, [r3, #20]
 80177f8:	b25b      	sxtb	r3, r3
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	da15      	bge.n	801782a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80177fe:	68bb      	ldr	r3, [r7, #8]
 8017800:	7858      	ldrb	r0, [r3, #1]
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6a1a      	ldr	r2, [r3, #32]
 801780c:	2301      	movs	r3, #1
 801780e:	f7fd fe4d 	bl	80154ac <disk_write>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d001      	beq.n	801781c <f_sync+0x54>
 8017818:	2301      	movs	r3, #1
 801781a:	e04f      	b.n	80178bc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	7d1b      	ldrb	r3, [r3, #20]
 8017820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017824:	b2da      	uxtb	r2, r3
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801782a:	f7fa fce1 	bl	80121f0 <get_fattime>
 801782e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017830:	68ba      	ldr	r2, [r7, #8]
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017836:	4619      	mov	r1, r3
 8017838:	4610      	mov	r0, r2
 801783a:	f7fe f925 	bl	8015a88 <move_window>
 801783e:	4603      	mov	r3, r0
 8017840:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017842:	7dfb      	ldrb	r3, [r7, #23]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d138      	bne.n	80178ba <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801784c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	330b      	adds	r3, #11
 8017852:	781a      	ldrb	r2, [r3, #0]
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	330b      	adds	r3, #11
 8017858:	f042 0220 	orr.w	r2, r2, #32
 801785c:	b2d2      	uxtb	r2, r2
 801785e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	6818      	ldr	r0, [r3, #0]
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	689b      	ldr	r3, [r3, #8]
 8017868:	461a      	mov	r2, r3
 801786a:	68f9      	ldr	r1, [r7, #12]
 801786c:	f7fe fe2a 	bl	80164c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	f103 021c 	add.w	r2, r3, #28
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	68db      	ldr	r3, [r3, #12]
 801787a:	4619      	mov	r1, r3
 801787c:	4610      	mov	r0, r2
 801787e:	f7fd fea9 	bl	80155d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	3316      	adds	r3, #22
 8017886:	6939      	ldr	r1, [r7, #16]
 8017888:	4618      	mov	r0, r3
 801788a:	f7fd fea3 	bl	80155d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	3312      	adds	r3, #18
 8017892:	2100      	movs	r1, #0
 8017894:	4618      	mov	r0, r3
 8017896:	f7fd fe82 	bl	801559e <st_word>
					fs->wflag = 1;
 801789a:	68bb      	ldr	r3, [r7, #8]
 801789c:	2201      	movs	r2, #1
 801789e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	4618      	mov	r0, r3
 80178a4:	f7fe f91e 	bl	8015ae4 <sync_fs>
 80178a8:	4603      	mov	r3, r0
 80178aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	7d1b      	ldrb	r3, [r3, #20]
 80178b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80178b4:	b2da      	uxtb	r2, r3
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80178ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80178bc:	4618      	mov	r0, r3
 80178be:	3718      	adds	r7, #24
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}

080178c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b084      	sub	sp, #16
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f7ff ff7b 	bl	80177c8 <f_sync>
 80178d2:	4603      	mov	r3, r0
 80178d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80178d6:	7bfb      	ldrb	r3, [r7, #15]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d118      	bne.n	801790e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	f107 0208 	add.w	r2, r7, #8
 80178e2:	4611      	mov	r1, r2
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7ff fa81 	bl	8016dec <validate>
 80178ea:	4603      	mov	r3, r0
 80178ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80178ee:	7bfb      	ldrb	r3, [r7, #15]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d10c      	bne.n	801790e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	691b      	ldr	r3, [r3, #16]
 80178f8:	4618      	mov	r0, r3
 80178fa:	f7fe f821 	bl	8015940 <dec_lock>
 80178fe:	4603      	mov	r3, r0
 8017900:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017902:	7bfb      	ldrb	r3, [r7, #15]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d102      	bne.n	801790e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2200      	movs	r2, #0
 801790c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017910:	4618      	mov	r0, r3
 8017912:	3710      	adds	r7, #16
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}

08017918 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017918:	b480      	push	{r7}
 801791a:	b087      	sub	sp, #28
 801791c:	af00      	add	r7, sp, #0
 801791e:	60f8      	str	r0, [r7, #12]
 8017920:	60b9      	str	r1, [r7, #8]
 8017922:	4613      	mov	r3, r2
 8017924:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017926:	2301      	movs	r3, #1
 8017928:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801792a:	2300      	movs	r3, #0
 801792c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801792e:	4b1f      	ldr	r3, [pc, #124]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 8017930:	7a5b      	ldrb	r3, [r3, #9]
 8017932:	b2db      	uxtb	r3, r3
 8017934:	2b00      	cmp	r3, #0
 8017936:	d131      	bne.n	801799c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017938:	4b1c      	ldr	r3, [pc, #112]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 801793a:	7a5b      	ldrb	r3, [r3, #9]
 801793c:	b2db      	uxtb	r3, r3
 801793e:	461a      	mov	r2, r3
 8017940:	4b1a      	ldr	r3, [pc, #104]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 8017942:	2100      	movs	r1, #0
 8017944:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017946:	4b19      	ldr	r3, [pc, #100]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 8017948:	7a5b      	ldrb	r3, [r3, #9]
 801794a:	b2db      	uxtb	r3, r3
 801794c:	4a17      	ldr	r2, [pc, #92]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 801794e:	009b      	lsls	r3, r3, #2
 8017950:	4413      	add	r3, r2
 8017952:	68fa      	ldr	r2, [r7, #12]
 8017954:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017956:	4b15      	ldr	r3, [pc, #84]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 8017958:	7a5b      	ldrb	r3, [r3, #9]
 801795a:	b2db      	uxtb	r3, r3
 801795c:	461a      	mov	r2, r3
 801795e:	4b13      	ldr	r3, [pc, #76]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 8017960:	4413      	add	r3, r2
 8017962:	79fa      	ldrb	r2, [r7, #7]
 8017964:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017966:	4b11      	ldr	r3, [pc, #68]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 8017968:	7a5b      	ldrb	r3, [r3, #9]
 801796a:	b2db      	uxtb	r3, r3
 801796c:	1c5a      	adds	r2, r3, #1
 801796e:	b2d1      	uxtb	r1, r2
 8017970:	4a0e      	ldr	r2, [pc, #56]	; (80179ac <FATFS_LinkDriverEx+0x94>)
 8017972:	7251      	strb	r1, [r2, #9]
 8017974:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017976:	7dbb      	ldrb	r3, [r7, #22]
 8017978:	3330      	adds	r3, #48	; 0x30
 801797a:	b2da      	uxtb	r2, r3
 801797c:	68bb      	ldr	r3, [r7, #8]
 801797e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017980:	68bb      	ldr	r3, [r7, #8]
 8017982:	3301      	adds	r3, #1
 8017984:	223a      	movs	r2, #58	; 0x3a
 8017986:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	3302      	adds	r3, #2
 801798c:	222f      	movs	r2, #47	; 0x2f
 801798e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	3303      	adds	r3, #3
 8017994:	2200      	movs	r2, #0
 8017996:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017998:	2300      	movs	r3, #0
 801799a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801799c:	7dfb      	ldrb	r3, [r7, #23]
}
 801799e:	4618      	mov	r0, r3
 80179a0:	371c      	adds	r7, #28
 80179a2:	46bd      	mov	sp, r7
 80179a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a8:	4770      	bx	lr
 80179aa:	bf00      	nop
 80179ac:	24040378 	.word	0x24040378

080179b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b082      	sub	sp, #8
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80179ba:	2200      	movs	r2, #0
 80179bc:	6839      	ldr	r1, [r7, #0]
 80179be:	6878      	ldr	r0, [r7, #4]
 80179c0:	f7ff ffaa 	bl	8017918 <FATFS_LinkDriverEx>
 80179c4:	4603      	mov	r3, r0
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3708      	adds	r7, #8
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}
	...

080179d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80179d4:	2200      	movs	r2, #0
 80179d6:	4913      	ldr	r1, [pc, #76]	; (8017a24 <MX_USB_DEVICE_Init+0x54>)
 80179d8:	4813      	ldr	r0, [pc, #76]	; (8017a28 <MX_USB_DEVICE_Init+0x58>)
 80179da:	f7fc fc20 	bl	801421e <USBD_Init>
 80179de:	4603      	mov	r3, r0
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d001      	beq.n	80179e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80179e4:	f7eb f8ee 	bl	8002bc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80179e8:	4910      	ldr	r1, [pc, #64]	; (8017a2c <MX_USB_DEVICE_Init+0x5c>)
 80179ea:	480f      	ldr	r0, [pc, #60]	; (8017a28 <MX_USB_DEVICE_Init+0x58>)
 80179ec:	f7fc fc4d 	bl	801428a <USBD_RegisterClass>
 80179f0:	4603      	mov	r3, r0
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d001      	beq.n	80179fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80179f6:	f7eb f8e5 	bl	8002bc4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80179fa:	490d      	ldr	r1, [pc, #52]	; (8017a30 <MX_USB_DEVICE_Init+0x60>)
 80179fc:	480a      	ldr	r0, [pc, #40]	; (8017a28 <MX_USB_DEVICE_Init+0x58>)
 80179fe:	f7fa fff7 	bl	80129f0 <USBD_MSC_RegisterStorage>
 8017a02:	4603      	mov	r3, r0
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d001      	beq.n	8017a0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017a08:	f7eb f8dc 	bl	8002bc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017a0c:	4806      	ldr	r0, [pc, #24]	; (8017a28 <MX_USB_DEVICE_Init+0x58>)
 8017a0e:	f7fc fc5d 	bl	80142cc <USBD_Start>
 8017a12:	4603      	mov	r3, r0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d001      	beq.n	8017a1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017a18:	f7eb f8d4 	bl	8002bc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017a1c:	f7f0 fe2e 	bl	800867c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017a20:	bf00      	nop
 8017a22:	bd80      	pop	{r7, pc}
 8017a24:	24000104 	.word	0x24000104
 8017a28:	240413ac 	.word	0x240413ac
 8017a2c:	2400001c 	.word	0x2400001c
 8017a30:	24000154 	.word	0x24000154

08017a34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a34:	b480      	push	{r7}
 8017a36:	b083      	sub	sp, #12
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	6039      	str	r1, [r7, #0]
 8017a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017a40:	683b      	ldr	r3, [r7, #0]
 8017a42:	2212      	movs	r2, #18
 8017a44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017a46:	4b03      	ldr	r3, [pc, #12]	; (8017a54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	370c      	adds	r7, #12
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a52:	4770      	bx	lr
 8017a54:	24000120 	.word	0x24000120

08017a58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a58:	b480      	push	{r7}
 8017a5a:	b083      	sub	sp, #12
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	4603      	mov	r3, r0
 8017a60:	6039      	str	r1, [r7, #0]
 8017a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	2204      	movs	r2, #4
 8017a68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017a6a:	4b03      	ldr	r3, [pc, #12]	; (8017a78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	370c      	adds	r7, #12
 8017a70:	46bd      	mov	sp, r7
 8017a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a76:	4770      	bx	lr
 8017a78:	24000134 	.word	0x24000134

08017a7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	4603      	mov	r3, r0
 8017a84:	6039      	str	r1, [r7, #0]
 8017a86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a88:	79fb      	ldrb	r3, [r7, #7]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d105      	bne.n	8017a9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017a8e:	683a      	ldr	r2, [r7, #0]
 8017a90:	4907      	ldr	r1, [pc, #28]	; (8017ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8017a92:	4808      	ldr	r0, [pc, #32]	; (8017ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8017a94:	f7fd fbe7 	bl	8015266 <USBD_GetString>
 8017a98:	e004      	b.n	8017aa4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017a9a:	683a      	ldr	r2, [r7, #0]
 8017a9c:	4904      	ldr	r1, [pc, #16]	; (8017ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8017a9e:	4805      	ldr	r0, [pc, #20]	; (8017ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8017aa0:	f7fd fbe1 	bl	8015266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017aa4:	4b02      	ldr	r3, [pc, #8]	; (8017ab0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	3708      	adds	r7, #8
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	2404167c 	.word	0x2404167c
 8017ab4:	08019e68 	.word	0x08019e68

08017ab8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b082      	sub	sp, #8
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	4603      	mov	r3, r0
 8017ac0:	6039      	str	r1, [r7, #0]
 8017ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017ac4:	683a      	ldr	r2, [r7, #0]
 8017ac6:	4904      	ldr	r1, [pc, #16]	; (8017ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017ac8:	4804      	ldr	r0, [pc, #16]	; (8017adc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017aca:	f7fd fbcc 	bl	8015266 <USBD_GetString>
  return USBD_StrDesc;
 8017ace:	4b02      	ldr	r3, [pc, #8]	; (8017ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	3708      	adds	r7, #8
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}
 8017ad8:	2404167c 	.word	0x2404167c
 8017adc:	08019e7c 	.word	0x08019e7c

08017ae0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b082      	sub	sp, #8
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	6039      	str	r1, [r7, #0]
 8017aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	221a      	movs	r2, #26
 8017af0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017af2:	f000 f843 	bl	8017b7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017af6:	4b02      	ldr	r3, [pc, #8]	; (8017b00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017af8:	4618      	mov	r0, r3
 8017afa:	3708      	adds	r7, #8
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}
 8017b00:	24000138 	.word	0x24000138

08017b04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	6039      	str	r1, [r7, #0]
 8017b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017b10:	79fb      	ldrb	r3, [r7, #7]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d105      	bne.n	8017b22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017b16:	683a      	ldr	r2, [r7, #0]
 8017b18:	4907      	ldr	r1, [pc, #28]	; (8017b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017b1a:	4808      	ldr	r0, [pc, #32]	; (8017b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017b1c:	f7fd fba3 	bl	8015266 <USBD_GetString>
 8017b20:	e004      	b.n	8017b2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017b22:	683a      	ldr	r2, [r7, #0]
 8017b24:	4904      	ldr	r1, [pc, #16]	; (8017b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017b26:	4805      	ldr	r0, [pc, #20]	; (8017b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017b28:	f7fd fb9d 	bl	8015266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b2c:	4b02      	ldr	r3, [pc, #8]	; (8017b38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017b2e:	4618      	mov	r0, r3
 8017b30:	3708      	adds	r7, #8
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bd80      	pop	{r7, pc}
 8017b36:	bf00      	nop
 8017b38:	2404167c 	.word	0x2404167c
 8017b3c:	08019e90 	.word	0x08019e90

08017b40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	4603      	mov	r3, r0
 8017b48:	6039      	str	r1, [r7, #0]
 8017b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017b4c:	79fb      	ldrb	r3, [r7, #7]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d105      	bne.n	8017b5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017b52:	683a      	ldr	r2, [r7, #0]
 8017b54:	4907      	ldr	r1, [pc, #28]	; (8017b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017b56:	4808      	ldr	r0, [pc, #32]	; (8017b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017b58:	f7fd fb85 	bl	8015266 <USBD_GetString>
 8017b5c:	e004      	b.n	8017b68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017b5e:	683a      	ldr	r2, [r7, #0]
 8017b60:	4904      	ldr	r1, [pc, #16]	; (8017b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017b62:	4805      	ldr	r0, [pc, #20]	; (8017b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017b64:	f7fd fb7f 	bl	8015266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b68:	4b02      	ldr	r3, [pc, #8]	; (8017b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	3708      	adds	r7, #8
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
 8017b72:	bf00      	nop
 8017b74:	2404167c 	.word	0x2404167c
 8017b78:	08019e9c 	.word	0x08019e9c

08017b7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b084      	sub	sp, #16
 8017b80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017b82:	4b0f      	ldr	r3, [pc, #60]	; (8017bc0 <Get_SerialNum+0x44>)
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017b88:	4b0e      	ldr	r3, [pc, #56]	; (8017bc4 <Get_SerialNum+0x48>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017b8e:	4b0e      	ldr	r3, [pc, #56]	; (8017bc8 <Get_SerialNum+0x4c>)
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017b94:	68fa      	ldr	r2, [r7, #12]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	4413      	add	r3, r2
 8017b9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d009      	beq.n	8017bb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017ba2:	2208      	movs	r2, #8
 8017ba4:	4909      	ldr	r1, [pc, #36]	; (8017bcc <Get_SerialNum+0x50>)
 8017ba6:	68f8      	ldr	r0, [r7, #12]
 8017ba8:	f000 f814 	bl	8017bd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017bac:	2204      	movs	r2, #4
 8017bae:	4908      	ldr	r1, [pc, #32]	; (8017bd0 <Get_SerialNum+0x54>)
 8017bb0:	68b8      	ldr	r0, [r7, #8]
 8017bb2:	f000 f80f 	bl	8017bd4 <IntToUnicode>
  }
}
 8017bb6:	bf00      	nop
 8017bb8:	3710      	adds	r7, #16
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop
 8017bc0:	1ff1e800 	.word	0x1ff1e800
 8017bc4:	1ff1e804 	.word	0x1ff1e804
 8017bc8:	1ff1e808 	.word	0x1ff1e808
 8017bcc:	2400013a 	.word	0x2400013a
 8017bd0:	2400014a 	.word	0x2400014a

08017bd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017bd4:	b480      	push	{r7}
 8017bd6:	b087      	sub	sp, #28
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	60f8      	str	r0, [r7, #12]
 8017bdc:	60b9      	str	r1, [r7, #8]
 8017bde:	4613      	mov	r3, r2
 8017be0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017be2:	2300      	movs	r3, #0
 8017be4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017be6:	2300      	movs	r3, #0
 8017be8:	75fb      	strb	r3, [r7, #23]
 8017bea:	e027      	b.n	8017c3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	0f1b      	lsrs	r3, r3, #28
 8017bf0:	2b09      	cmp	r3, #9
 8017bf2:	d80b      	bhi.n	8017c0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	0f1b      	lsrs	r3, r3, #28
 8017bf8:	b2da      	uxtb	r2, r3
 8017bfa:	7dfb      	ldrb	r3, [r7, #23]
 8017bfc:	005b      	lsls	r3, r3, #1
 8017bfe:	4619      	mov	r1, r3
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	440b      	add	r3, r1
 8017c04:	3230      	adds	r2, #48	; 0x30
 8017c06:	b2d2      	uxtb	r2, r2
 8017c08:	701a      	strb	r2, [r3, #0]
 8017c0a:	e00a      	b.n	8017c22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	0f1b      	lsrs	r3, r3, #28
 8017c10:	b2da      	uxtb	r2, r3
 8017c12:	7dfb      	ldrb	r3, [r7, #23]
 8017c14:	005b      	lsls	r3, r3, #1
 8017c16:	4619      	mov	r1, r3
 8017c18:	68bb      	ldr	r3, [r7, #8]
 8017c1a:	440b      	add	r3, r1
 8017c1c:	3237      	adds	r2, #55	; 0x37
 8017c1e:	b2d2      	uxtb	r2, r2
 8017c20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	011b      	lsls	r3, r3, #4
 8017c26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017c28:	7dfb      	ldrb	r3, [r7, #23]
 8017c2a:	005b      	lsls	r3, r3, #1
 8017c2c:	3301      	adds	r3, #1
 8017c2e:	68ba      	ldr	r2, [r7, #8]
 8017c30:	4413      	add	r3, r2
 8017c32:	2200      	movs	r2, #0
 8017c34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017c36:	7dfb      	ldrb	r3, [r7, #23]
 8017c38:	3301      	adds	r3, #1
 8017c3a:	75fb      	strb	r3, [r7, #23]
 8017c3c:	7dfa      	ldrb	r2, [r7, #23]
 8017c3e:	79fb      	ldrb	r3, [r7, #7]
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d3d3      	bcc.n	8017bec <IntToUnicode+0x18>
  }
}
 8017c44:	bf00      	nop
 8017c46:	371c      	adds	r7, #28
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4e:	4770      	bx	lr

08017c50 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8017c50:	b480      	push	{r7}
 8017c52:	b083      	sub	sp, #12
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	4603      	mov	r3, r0
 8017c58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8017c5a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	370c      	adds	r7, #12
 8017c60:	46bd      	mov	sp, r7
 8017c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c66:	4770      	bx	lr

08017c68 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b08e      	sub	sp, #56	; 0x38
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	4603      	mov	r3, r0
 8017c70:	60b9      	str	r1, [r7, #8]
 8017c72:	607a      	str	r2, [r7, #4]
 8017c74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8017c76:	23ff      	movs	r3, #255	; 0xff
 8017c78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8017c7c:	f107 0310 	add.w	r3, r7, #16
 8017c80:	4619      	mov	r1, r3
 8017c82:	480a      	ldr	r0, [pc, #40]	; (8017cac <STORAGE_GetCapacity_FS+0x44>)
 8017c84:	f7f5 f89a 	bl	800cdbc <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8017c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c8a:	1e5a      	subs	r2, r3, #1
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8017c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c92:	b29a      	uxth	r2, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8017c9e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3738      	adds	r7, #56	; 0x38
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
 8017caa:	bf00      	nop
 8017cac:	24040c48 	.word	0x24040c48

08017cb0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017cb0:	b480      	push	{r7}
 8017cb2:	b083      	sub	sp, #12
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017cba:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	370c      	adds	r7, #12
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc6:	4770      	bx	lr

08017cc8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017cc8:	b480      	push	{r7}
 8017cca:	b083      	sub	sp, #12
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	4603      	mov	r3, r0
 8017cd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017cd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	370c      	adds	r7, #12
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cde:	4770      	bx	lr

08017ce0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b088      	sub	sp, #32
 8017ce4:	af02      	add	r7, sp, #8
 8017ce6:	60b9      	str	r1, [r7, #8]
 8017ce8:	607a      	str	r2, [r7, #4]
 8017cea:	461a      	mov	r2, r3
 8017cec:	4603      	mov	r3, r0
 8017cee:	73fb      	strb	r3, [r7, #15]
 8017cf0:	4613      	mov	r3, r2
 8017cf2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8017cf4:	23ff      	movs	r3, #255	; 0xff
 8017cf6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017cf8:	89ba      	ldrh	r2, [r7, #12]
 8017cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017cfe:	9300      	str	r3, [sp, #0]
 8017d00:	4613      	mov	r3, r2
 8017d02:	687a      	ldr	r2, [r7, #4]
 8017d04:	68b9      	ldr	r1, [r7, #8]
 8017d06:	4809      	ldr	r0, [pc, #36]	; (8017d2c <STORAGE_Read_FS+0x4c>)
 8017d08:	f7f3 ffca 	bl	800bca0 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017d0c:	bf00      	nop
 8017d0e:	4807      	ldr	r0, [pc, #28]	; (8017d2c <STORAGE_Read_FS+0x4c>)
 8017d10:	f7f5 f92a 	bl	800cf68 <HAL_SD_GetCardState>
 8017d14:	4603      	mov	r3, r0
 8017d16:	2b04      	cmp	r3, #4
 8017d18:	d1f9      	bne.n	8017d0e <STORAGE_Read_FS+0x2e>
	ret = 0;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3718      	adds	r7, #24
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}
 8017d2a:	bf00      	nop
 8017d2c:	24040c48 	.word	0x24040c48

08017d30 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b088      	sub	sp, #32
 8017d34:	af02      	add	r7, sp, #8
 8017d36:	60b9      	str	r1, [r7, #8]
 8017d38:	607a      	str	r2, [r7, #4]
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	73fb      	strb	r3, [r7, #15]
 8017d40:	4613      	mov	r3, r2
 8017d42:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8017d44:	23ff      	movs	r3, #255	; 0xff
 8017d46:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017d48:	89ba      	ldrh	r2, [r7, #12]
 8017d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d4e:	9300      	str	r3, [sp, #0]
 8017d50:	4613      	mov	r3, r2
 8017d52:	687a      	ldr	r2, [r7, #4]
 8017d54:	68b9      	ldr	r1, [r7, #8]
 8017d56:	4809      	ldr	r0, [pc, #36]	; (8017d7c <STORAGE_Write_FS+0x4c>)
 8017d58:	f7f4 f92c 	bl	800bfb4 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8017d5c:	bf00      	nop
 8017d5e:	4807      	ldr	r0, [pc, #28]	; (8017d7c <STORAGE_Write_FS+0x4c>)
 8017d60:	f7f5 f902 	bl	800cf68 <HAL_SD_GetCardState>
 8017d64:	4603      	mov	r3, r0
 8017d66:	2b04      	cmp	r3, #4
 8017d68:	d1f9      	bne.n	8017d5e <STORAGE_Write_FS+0x2e>
	ret = 0;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	75fb      	strb	r3, [r7, #23]
	return ret;
 8017d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	3718      	adds	r7, #24
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
 8017d7a:	bf00      	nop
 8017d7c:	24040c48 	.word	0x24040c48

08017d80 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017d80:	b480      	push	{r7}
 8017d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8017d84:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8e:	4770      	bx	lr

08017d90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b08a      	sub	sp, #40	; 0x28
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d98:	f107 0314 	add.w	r3, r7, #20
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	601a      	str	r2, [r3, #0]
 8017da0:	605a      	str	r2, [r3, #4]
 8017da2:	609a      	str	r2, [r3, #8]
 8017da4:	60da      	str	r2, [r3, #12]
 8017da6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	4a1e      	ldr	r2, [pc, #120]	; (8017e28 <HAL_PCD_MspInit+0x98>)
 8017dae:	4293      	cmp	r3, r2
 8017db0:	d136      	bne.n	8017e20 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017db2:	4b1e      	ldr	r3, [pc, #120]	; (8017e2c <HAL_PCD_MspInit+0x9c>)
 8017db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017db8:	4a1c      	ldr	r2, [pc, #112]	; (8017e2c <HAL_PCD_MspInit+0x9c>)
 8017dba:	f043 0301 	orr.w	r3, r3, #1
 8017dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8017dc2:	4b1a      	ldr	r3, [pc, #104]	; (8017e2c <HAL_PCD_MspInit+0x9c>)
 8017dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017dc8:	f003 0301 	and.w	r3, r3, #1
 8017dcc:	613b      	str	r3, [r7, #16]
 8017dce:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017dd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017dd6:	2302      	movs	r3, #2
 8017dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dda:	2300      	movs	r3, #0
 8017ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017dde:	2300      	movs	r3, #0
 8017de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017de2:	230a      	movs	r3, #10
 8017de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017de6:	f107 0314 	add.w	r3, r7, #20
 8017dea:	4619      	mov	r1, r3
 8017dec:	4810      	ldr	r0, [pc, #64]	; (8017e30 <HAL_PCD_MspInit+0xa0>)
 8017dee:	f7ee ff2f 	bl	8006c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017df2:	4b0e      	ldr	r3, [pc, #56]	; (8017e2c <HAL_PCD_MspInit+0x9c>)
 8017df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017df8:	4a0c      	ldr	r2, [pc, #48]	; (8017e2c <HAL_PCD_MspInit+0x9c>)
 8017dfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017dfe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017e02:	4b0a      	ldr	r3, [pc, #40]	; (8017e2c <HAL_PCD_MspInit+0x9c>)
 8017e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017e0c:	60fb      	str	r3, [r7, #12]
 8017e0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017e10:	2200      	movs	r2, #0
 8017e12:	2100      	movs	r1, #0
 8017e14:	2065      	movs	r0, #101	; 0x65
 8017e16:	f7eb fcd2 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017e1a:	2065      	movs	r0, #101	; 0x65
 8017e1c:	f7eb fce9 	bl	80037f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017e20:	bf00      	nop
 8017e22:	3728      	adds	r7, #40	; 0x28
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}
 8017e28:	40080000 	.word	0x40080000
 8017e2c:	58024400 	.word	0x58024400
 8017e30:	58020000 	.word	0x58020000

08017e34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b082      	sub	sp, #8
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017e48:	4619      	mov	r1, r3
 8017e4a:	4610      	mov	r0, r2
 8017e4c:	f7fc fa89 	bl	8014362 <USBD_LL_SetupStage>
}
 8017e50:	bf00      	nop
 8017e52:	3708      	adds	r7, #8
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bd80      	pop	{r7, pc}

08017e58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b082      	sub	sp, #8
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
 8017e60:	460b      	mov	r3, r1
 8017e62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017e6a:	78fa      	ldrb	r2, [r7, #3]
 8017e6c:	6879      	ldr	r1, [r7, #4]
 8017e6e:	4613      	mov	r3, r2
 8017e70:	00db      	lsls	r3, r3, #3
 8017e72:	1a9b      	subs	r3, r3, r2
 8017e74:	009b      	lsls	r3, r3, #2
 8017e76:	440b      	add	r3, r1
 8017e78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017e7c:	681a      	ldr	r2, [r3, #0]
 8017e7e:	78fb      	ldrb	r3, [r7, #3]
 8017e80:	4619      	mov	r1, r3
 8017e82:	f7fc fac1 	bl	8014408 <USBD_LL_DataOutStage>
}
 8017e86:	bf00      	nop
 8017e88:	3708      	adds	r7, #8
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}

08017e8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e8e:	b580      	push	{r7, lr}
 8017e90:	b082      	sub	sp, #8
 8017e92:	af00      	add	r7, sp, #0
 8017e94:	6078      	str	r0, [r7, #4]
 8017e96:	460b      	mov	r3, r1
 8017e98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017ea0:	78fa      	ldrb	r2, [r7, #3]
 8017ea2:	6879      	ldr	r1, [r7, #4]
 8017ea4:	4613      	mov	r3, r2
 8017ea6:	00db      	lsls	r3, r3, #3
 8017ea8:	1a9b      	subs	r3, r3, r2
 8017eaa:	009b      	lsls	r3, r3, #2
 8017eac:	440b      	add	r3, r1
 8017eae:	3348      	adds	r3, #72	; 0x48
 8017eb0:	681a      	ldr	r2, [r3, #0]
 8017eb2:	78fb      	ldrb	r3, [r7, #3]
 8017eb4:	4619      	mov	r1, r3
 8017eb6:	f7fc fb0a 	bl	80144ce <USBD_LL_DataInStage>
}
 8017eba:	bf00      	nop
 8017ebc:	3708      	adds	r7, #8
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd80      	pop	{r7, pc}

08017ec2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ec2:	b580      	push	{r7, lr}
 8017ec4:	b082      	sub	sp, #8
 8017ec6:	af00      	add	r7, sp, #0
 8017ec8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7fc fc0e 	bl	80146f2 <USBD_LL_SOF>
}
 8017ed6:	bf00      	nop
 8017ed8:	3708      	adds	r7, #8
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}

08017ede <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ede:	b580      	push	{r7, lr}
 8017ee0:	b084      	sub	sp, #16
 8017ee2:	af00      	add	r7, sp, #0
 8017ee4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d102      	bne.n	8017ef8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	73fb      	strb	r3, [r7, #15]
 8017ef6:	e008      	b.n	8017f0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	68db      	ldr	r3, [r3, #12]
 8017efc:	2b02      	cmp	r3, #2
 8017efe:	d102      	bne.n	8017f06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017f00:	2301      	movs	r3, #1
 8017f02:	73fb      	strb	r3, [r7, #15]
 8017f04:	e001      	b.n	8017f0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017f06:	f7ea fe5d 	bl	8002bc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f10:	7bfa      	ldrb	r2, [r7, #15]
 8017f12:	4611      	mov	r1, r2
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7fc fbb1 	bl	801467c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7fc fb6a 	bl	80145fa <USBD_LL_Reset>
}
 8017f26:	bf00      	nop
 8017f28:	3710      	adds	r7, #16
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}
	...

08017f30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b082      	sub	sp, #8
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7fc fbac 	bl	801469c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	687a      	ldr	r2, [r7, #4]
 8017f50:	6812      	ldr	r2, [r2, #0]
 8017f52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017f56:	f043 0301 	orr.w	r3, r3, #1
 8017f5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	6a1b      	ldr	r3, [r3, #32]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d005      	beq.n	8017f70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017f64:	4b04      	ldr	r3, [pc, #16]	; (8017f78 <HAL_PCD_SuspendCallback+0x48>)
 8017f66:	691b      	ldr	r3, [r3, #16]
 8017f68:	4a03      	ldr	r2, [pc, #12]	; (8017f78 <HAL_PCD_SuspendCallback+0x48>)
 8017f6a:	f043 0306 	orr.w	r3, r3, #6
 8017f6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017f70:	bf00      	nop
 8017f72:	3708      	adds	r7, #8
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}
 8017f78:	e000ed00 	.word	0xe000ed00

08017f7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b082      	sub	sp, #8
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7fc fb9b 	bl	80146c6 <USBD_LL_Resume>
}
 8017f90:	bf00      	nop
 8017f92:	3708      	adds	r7, #8
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}

08017f98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b082      	sub	sp, #8
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
 8017fa0:	460b      	mov	r3, r1
 8017fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017faa:	78fa      	ldrb	r2, [r7, #3]
 8017fac:	4611      	mov	r1, r2
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7fc fbc6 	bl	8014740 <USBD_LL_IsoOUTIncomplete>
}
 8017fb4:	bf00      	nop
 8017fb6:	3708      	adds	r7, #8
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b082      	sub	sp, #8
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
 8017fc4:	460b      	mov	r3, r1
 8017fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017fce:	78fa      	ldrb	r2, [r7, #3]
 8017fd0:	4611      	mov	r1, r2
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7fc fba7 	bl	8014726 <USBD_LL_IsoINIncomplete>
}
 8017fd8:	bf00      	nop
 8017fda:	3708      	adds	r7, #8
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b082      	sub	sp, #8
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f7fc fbb3 	bl	801475a <USBD_LL_DevConnected>
}
 8017ff4:	bf00      	nop
 8017ff6:	3708      	adds	r7, #8
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b082      	sub	sp, #8
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801800a:	4618      	mov	r0, r3
 801800c:	f7fc fbb0 	bl	8014770 <USBD_LL_DevDisconnected>
}
 8018010:	bf00      	nop
 8018012:	3708      	adds	r7, #8
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}

08018018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b082      	sub	sp, #8
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	781b      	ldrb	r3, [r3, #0]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d13e      	bne.n	80180a6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018028:	4a21      	ldr	r2, [pc, #132]	; (80180b0 <USBD_LL_Init+0x98>)
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	4a1f      	ldr	r2, [pc, #124]	; (80180b0 <USBD_LL_Init+0x98>)
 8018034:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018038:	4b1d      	ldr	r3, [pc, #116]	; (80180b0 <USBD_LL_Init+0x98>)
 801803a:	4a1e      	ldr	r2, [pc, #120]	; (80180b4 <USBD_LL_Init+0x9c>)
 801803c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801803e:	4b1c      	ldr	r3, [pc, #112]	; (80180b0 <USBD_LL_Init+0x98>)
 8018040:	2209      	movs	r2, #9
 8018042:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018044:	4b1a      	ldr	r3, [pc, #104]	; (80180b0 <USBD_LL_Init+0x98>)
 8018046:	2202      	movs	r2, #2
 8018048:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801804a:	4b19      	ldr	r3, [pc, #100]	; (80180b0 <USBD_LL_Init+0x98>)
 801804c:	2200      	movs	r2, #0
 801804e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018050:	4b17      	ldr	r3, [pc, #92]	; (80180b0 <USBD_LL_Init+0x98>)
 8018052:	2202      	movs	r2, #2
 8018054:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018056:	4b16      	ldr	r3, [pc, #88]	; (80180b0 <USBD_LL_Init+0x98>)
 8018058:	2200      	movs	r2, #0
 801805a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801805c:	4b14      	ldr	r3, [pc, #80]	; (80180b0 <USBD_LL_Init+0x98>)
 801805e:	2200      	movs	r2, #0
 8018060:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018062:	4b13      	ldr	r3, [pc, #76]	; (80180b0 <USBD_LL_Init+0x98>)
 8018064:	2200      	movs	r2, #0
 8018066:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8018068:	4b11      	ldr	r3, [pc, #68]	; (80180b0 <USBD_LL_Init+0x98>)
 801806a:	2200      	movs	r2, #0
 801806c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801806e:	4b10      	ldr	r3, [pc, #64]	; (80180b0 <USBD_LL_Init+0x98>)
 8018070:	2200      	movs	r2, #0
 8018072:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018074:	4b0e      	ldr	r3, [pc, #56]	; (80180b0 <USBD_LL_Init+0x98>)
 8018076:	2200      	movs	r2, #0
 8018078:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801807a:	480d      	ldr	r0, [pc, #52]	; (80180b0 <USBD_LL_Init+0x98>)
 801807c:	f7ef f822 	bl	80070c4 <HAL_PCD_Init>
 8018080:	4603      	mov	r3, r0
 8018082:	2b00      	cmp	r3, #0
 8018084:	d001      	beq.n	801808a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018086:	f7ea fd9d 	bl	8002bc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801808a:	2180      	movs	r1, #128	; 0x80
 801808c:	4808      	ldr	r0, [pc, #32]	; (80180b0 <USBD_LL_Init+0x98>)
 801808e:	f7f0 f9e0 	bl	8008452 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018092:	2240      	movs	r2, #64	; 0x40
 8018094:	2100      	movs	r1, #0
 8018096:	4806      	ldr	r0, [pc, #24]	; (80180b0 <USBD_LL_Init+0x98>)
 8018098:	f7f0 f994 	bl	80083c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801809c:	2280      	movs	r2, #128	; 0x80
 801809e:	2101      	movs	r1, #1
 80180a0:	4803      	ldr	r0, [pc, #12]	; (80180b0 <USBD_LL_Init+0x98>)
 80180a2:	f7f0 f98f 	bl	80083c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80180a6:	2300      	movs	r3, #0
}
 80180a8:	4618      	mov	r0, r3
 80180aa:	3708      	adds	r7, #8
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}
 80180b0:	2404187c 	.word	0x2404187c
 80180b4:	40080000 	.word	0x40080000

080180b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b084      	sub	sp, #16
 80180bc:	af00      	add	r7, sp, #0
 80180be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180c0:	2300      	movs	r3, #0
 80180c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180c4:	2300      	movs	r3, #0
 80180c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80180ce:	4618      	mov	r0, r3
 80180d0:	f7ef f91c 	bl	800730c <HAL_PCD_Start>
 80180d4:	4603      	mov	r3, r0
 80180d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180d8:	7bfb      	ldrb	r3, [r7, #15]
 80180da:	4618      	mov	r0, r3
 80180dc:	f000 f94a 	bl	8018374 <USBD_Get_USB_Status>
 80180e0:	4603      	mov	r3, r0
 80180e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80180e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	3710      	adds	r7, #16
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}

080180ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80180ee:	b580      	push	{r7, lr}
 80180f0:	b084      	sub	sp, #16
 80180f2:	af00      	add	r7, sp, #0
 80180f4:	6078      	str	r0, [r7, #4]
 80180f6:	4608      	mov	r0, r1
 80180f8:	4611      	mov	r1, r2
 80180fa:	461a      	mov	r2, r3
 80180fc:	4603      	mov	r3, r0
 80180fe:	70fb      	strb	r3, [r7, #3]
 8018100:	460b      	mov	r3, r1
 8018102:	70bb      	strb	r3, [r7, #2]
 8018104:	4613      	mov	r3, r2
 8018106:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018108:	2300      	movs	r3, #0
 801810a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801810c:	2300      	movs	r3, #0
 801810e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018116:	78bb      	ldrb	r3, [r7, #2]
 8018118:	883a      	ldrh	r2, [r7, #0]
 801811a:	78f9      	ldrb	r1, [r7, #3]
 801811c:	f7ef fd2d 	bl	8007b7a <HAL_PCD_EP_Open>
 8018120:	4603      	mov	r3, r0
 8018122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018124:	7bfb      	ldrb	r3, [r7, #15]
 8018126:	4618      	mov	r0, r3
 8018128:	f000 f924 	bl	8018374 <USBD_Get_USB_Status>
 801812c:	4603      	mov	r3, r0
 801812e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018130:	7bbb      	ldrb	r3, [r7, #14]
}
 8018132:	4618      	mov	r0, r3
 8018134:	3710      	adds	r7, #16
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}

0801813a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801813a:	b580      	push	{r7, lr}
 801813c:	b084      	sub	sp, #16
 801813e:	af00      	add	r7, sp, #0
 8018140:	6078      	str	r0, [r7, #4]
 8018142:	460b      	mov	r3, r1
 8018144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018146:	2300      	movs	r3, #0
 8018148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801814a:	2300      	movs	r3, #0
 801814c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018154:	78fa      	ldrb	r2, [r7, #3]
 8018156:	4611      	mov	r1, r2
 8018158:	4618      	mov	r0, r3
 801815a:	f7ef fd76 	bl	8007c4a <HAL_PCD_EP_Close>
 801815e:	4603      	mov	r3, r0
 8018160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018162:	7bfb      	ldrb	r3, [r7, #15]
 8018164:	4618      	mov	r0, r3
 8018166:	f000 f905 	bl	8018374 <USBD_Get_USB_Status>
 801816a:	4603      	mov	r3, r0
 801816c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801816e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018170:	4618      	mov	r0, r3
 8018172:	3710      	adds	r7, #16
 8018174:	46bd      	mov	sp, r7
 8018176:	bd80      	pop	{r7, pc}

08018178 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b084      	sub	sp, #16
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
 8018180:	460b      	mov	r3, r1
 8018182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018184:	2300      	movs	r3, #0
 8018186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018188:	2300      	movs	r3, #0
 801818a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018192:	78fa      	ldrb	r2, [r7, #3]
 8018194:	4611      	mov	r1, r2
 8018196:	4618      	mov	r0, r3
 8018198:	f7ef ff08 	bl	8007fac <HAL_PCD_EP_Flush>
 801819c:	4603      	mov	r3, r0
 801819e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181a0:	7bfb      	ldrb	r3, [r7, #15]
 80181a2:	4618      	mov	r0, r3
 80181a4:	f000 f8e6 	bl	8018374 <USBD_Get_USB_Status>
 80181a8:	4603      	mov	r3, r0
 80181aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80181ae:	4618      	mov	r0, r3
 80181b0:	3710      	adds	r7, #16
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bd80      	pop	{r7, pc}

080181b6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181b6:	b580      	push	{r7, lr}
 80181b8:	b084      	sub	sp, #16
 80181ba:	af00      	add	r7, sp, #0
 80181bc:	6078      	str	r0, [r7, #4]
 80181be:	460b      	mov	r3, r1
 80181c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181c2:	2300      	movs	r3, #0
 80181c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181c6:	2300      	movs	r3, #0
 80181c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80181d0:	78fa      	ldrb	r2, [r7, #3]
 80181d2:	4611      	mov	r1, r2
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7ef fe2f 	bl	8007e38 <HAL_PCD_EP_SetStall>
 80181da:	4603      	mov	r3, r0
 80181dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181de:	7bfb      	ldrb	r3, [r7, #15]
 80181e0:	4618      	mov	r0, r3
 80181e2:	f000 f8c7 	bl	8018374 <USBD_Get_USB_Status>
 80181e6:	4603      	mov	r3, r0
 80181e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	3710      	adds	r7, #16
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}

080181f4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b084      	sub	sp, #16
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
 80181fc:	460b      	mov	r3, r1
 80181fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018200:	2300      	movs	r3, #0
 8018202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018204:	2300      	movs	r3, #0
 8018206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801820e:	78fa      	ldrb	r2, [r7, #3]
 8018210:	4611      	mov	r1, r2
 8018212:	4618      	mov	r0, r3
 8018214:	f7ef fe74 	bl	8007f00 <HAL_PCD_EP_ClrStall>
 8018218:	4603      	mov	r3, r0
 801821a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801821c:	7bfb      	ldrb	r3, [r7, #15]
 801821e:	4618      	mov	r0, r3
 8018220:	f000 f8a8 	bl	8018374 <USBD_Get_USB_Status>
 8018224:	4603      	mov	r3, r0
 8018226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018228:	7bbb      	ldrb	r3, [r7, #14]
}
 801822a:	4618      	mov	r0, r3
 801822c:	3710      	adds	r7, #16
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}

08018232 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018232:	b480      	push	{r7}
 8018234:	b085      	sub	sp, #20
 8018236:	af00      	add	r7, sp, #0
 8018238:	6078      	str	r0, [r7, #4]
 801823a:	460b      	mov	r3, r1
 801823c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018244:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801824a:	2b00      	cmp	r3, #0
 801824c:	da0b      	bge.n	8018266 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801824e:	78fb      	ldrb	r3, [r7, #3]
 8018250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018254:	68f9      	ldr	r1, [r7, #12]
 8018256:	4613      	mov	r3, r2
 8018258:	00db      	lsls	r3, r3, #3
 801825a:	1a9b      	subs	r3, r3, r2
 801825c:	009b      	lsls	r3, r3, #2
 801825e:	440b      	add	r3, r1
 8018260:	333e      	adds	r3, #62	; 0x3e
 8018262:	781b      	ldrb	r3, [r3, #0]
 8018264:	e00b      	b.n	801827e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018266:	78fb      	ldrb	r3, [r7, #3]
 8018268:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801826c:	68f9      	ldr	r1, [r7, #12]
 801826e:	4613      	mov	r3, r2
 8018270:	00db      	lsls	r3, r3, #3
 8018272:	1a9b      	subs	r3, r3, r2
 8018274:	009b      	lsls	r3, r3, #2
 8018276:	440b      	add	r3, r1
 8018278:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801827c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801827e:	4618      	mov	r0, r3
 8018280:	3714      	adds	r7, #20
 8018282:	46bd      	mov	sp, r7
 8018284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018288:	4770      	bx	lr

0801828a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801828a:	b580      	push	{r7, lr}
 801828c:	b084      	sub	sp, #16
 801828e:	af00      	add	r7, sp, #0
 8018290:	6078      	str	r0, [r7, #4]
 8018292:	460b      	mov	r3, r1
 8018294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018296:	2300      	movs	r3, #0
 8018298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801829a:	2300      	movs	r3, #0
 801829c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80182a4:	78fa      	ldrb	r2, [r7, #3]
 80182a6:	4611      	mov	r1, r2
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7ef fc41 	bl	8007b30 <HAL_PCD_SetAddress>
 80182ae:	4603      	mov	r3, r0
 80182b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182b2:	7bfb      	ldrb	r3, [r7, #15]
 80182b4:	4618      	mov	r0, r3
 80182b6:	f000 f85d 	bl	8018374 <USBD_Get_USB_Status>
 80182ba:	4603      	mov	r3, r0
 80182bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182be:	7bbb      	ldrb	r3, [r7, #14]
}
 80182c0:	4618      	mov	r0, r3
 80182c2:	3710      	adds	r7, #16
 80182c4:	46bd      	mov	sp, r7
 80182c6:	bd80      	pop	{r7, pc}

080182c8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b086      	sub	sp, #24
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	60f8      	str	r0, [r7, #12]
 80182d0:	607a      	str	r2, [r7, #4]
 80182d2:	603b      	str	r3, [r7, #0]
 80182d4:	460b      	mov	r3, r1
 80182d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182d8:	2300      	movs	r3, #0
 80182da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182dc:	2300      	movs	r3, #0
 80182de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80182e6:	7af9      	ldrb	r1, [r7, #11]
 80182e8:	683b      	ldr	r3, [r7, #0]
 80182ea:	687a      	ldr	r2, [r7, #4]
 80182ec:	f7ef fd5a 	bl	8007da4 <HAL_PCD_EP_Transmit>
 80182f0:	4603      	mov	r3, r0
 80182f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182f4:	7dfb      	ldrb	r3, [r7, #23]
 80182f6:	4618      	mov	r0, r3
 80182f8:	f000 f83c 	bl	8018374 <USBD_Get_USB_Status>
 80182fc:	4603      	mov	r3, r0
 80182fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018300:	7dbb      	ldrb	r3, [r7, #22]
}
 8018302:	4618      	mov	r0, r3
 8018304:	3718      	adds	r7, #24
 8018306:	46bd      	mov	sp, r7
 8018308:	bd80      	pop	{r7, pc}

0801830a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801830a:	b580      	push	{r7, lr}
 801830c:	b086      	sub	sp, #24
 801830e:	af00      	add	r7, sp, #0
 8018310:	60f8      	str	r0, [r7, #12]
 8018312:	607a      	str	r2, [r7, #4]
 8018314:	603b      	str	r3, [r7, #0]
 8018316:	460b      	mov	r3, r1
 8018318:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801831a:	2300      	movs	r3, #0
 801831c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801831e:	2300      	movs	r3, #0
 8018320:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018328:	7af9      	ldrb	r1, [r7, #11]
 801832a:	683b      	ldr	r3, [r7, #0]
 801832c:	687a      	ldr	r2, [r7, #4]
 801832e:	f7ef fcd6 	bl	8007cde <HAL_PCD_EP_Receive>
 8018332:	4603      	mov	r3, r0
 8018334:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018336:	7dfb      	ldrb	r3, [r7, #23]
 8018338:	4618      	mov	r0, r3
 801833a:	f000 f81b 	bl	8018374 <USBD_Get_USB_Status>
 801833e:	4603      	mov	r3, r0
 8018340:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018342:	7dbb      	ldrb	r3, [r7, #22]
}
 8018344:	4618      	mov	r0, r3
 8018346:	3718      	adds	r7, #24
 8018348:	46bd      	mov	sp, r7
 801834a:	bd80      	pop	{r7, pc}

0801834c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b082      	sub	sp, #8
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
 8018354:	460b      	mov	r3, r1
 8018356:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801835e:	78fa      	ldrb	r2, [r7, #3]
 8018360:	4611      	mov	r1, r2
 8018362:	4618      	mov	r0, r3
 8018364:	f7ef fd06 	bl	8007d74 <HAL_PCD_EP_GetRxCount>
 8018368:	4603      	mov	r3, r0
}
 801836a:	4618      	mov	r0, r3
 801836c:	3708      	adds	r7, #8
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
	...

08018374 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018374:	b480      	push	{r7}
 8018376:	b085      	sub	sp, #20
 8018378:	af00      	add	r7, sp, #0
 801837a:	4603      	mov	r3, r0
 801837c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801837e:	2300      	movs	r3, #0
 8018380:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018382:	79fb      	ldrb	r3, [r7, #7]
 8018384:	2b03      	cmp	r3, #3
 8018386:	d817      	bhi.n	80183b8 <USBD_Get_USB_Status+0x44>
 8018388:	a201      	add	r2, pc, #4	; (adr r2, 8018390 <USBD_Get_USB_Status+0x1c>)
 801838a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801838e:	bf00      	nop
 8018390:	080183a1 	.word	0x080183a1
 8018394:	080183a7 	.word	0x080183a7
 8018398:	080183ad 	.word	0x080183ad
 801839c:	080183b3 	.word	0x080183b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80183a0:	2300      	movs	r3, #0
 80183a2:	73fb      	strb	r3, [r7, #15]
    break;
 80183a4:	e00b      	b.n	80183be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80183a6:	2303      	movs	r3, #3
 80183a8:	73fb      	strb	r3, [r7, #15]
    break;
 80183aa:	e008      	b.n	80183be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80183ac:	2301      	movs	r3, #1
 80183ae:	73fb      	strb	r3, [r7, #15]
    break;
 80183b0:	e005      	b.n	80183be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80183b2:	2303      	movs	r3, #3
 80183b4:	73fb      	strb	r3, [r7, #15]
    break;
 80183b6:	e002      	b.n	80183be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80183b8:	2303      	movs	r3, #3
 80183ba:	73fb      	strb	r3, [r7, #15]
    break;
 80183bc:	bf00      	nop
  }
  return usb_status;
 80183be:	7bfb      	ldrb	r3, [r7, #15]
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	3714      	adds	r7, #20
 80183c4:	46bd      	mov	sp, r7
 80183c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ca:	4770      	bx	lr

080183cc <__errno>:
 80183cc:	4b01      	ldr	r3, [pc, #4]	; (80183d4 <__errno+0x8>)
 80183ce:	6818      	ldr	r0, [r3, #0]
 80183d0:	4770      	bx	lr
 80183d2:	bf00      	nop
 80183d4:	24000174 	.word	0x24000174

080183d8 <__libc_init_array>:
 80183d8:	b570      	push	{r4, r5, r6, lr}
 80183da:	4e0d      	ldr	r6, [pc, #52]	; (8018410 <__libc_init_array+0x38>)
 80183dc:	4c0d      	ldr	r4, [pc, #52]	; (8018414 <__libc_init_array+0x3c>)
 80183de:	1ba4      	subs	r4, r4, r6
 80183e0:	10a4      	asrs	r4, r4, #2
 80183e2:	2500      	movs	r5, #0
 80183e4:	42a5      	cmp	r5, r4
 80183e6:	d109      	bne.n	80183fc <__libc_init_array+0x24>
 80183e8:	4e0b      	ldr	r6, [pc, #44]	; (8018418 <__libc_init_array+0x40>)
 80183ea:	4c0c      	ldr	r4, [pc, #48]	; (801841c <__libc_init_array+0x44>)
 80183ec:	f001 f972 	bl	80196d4 <_init>
 80183f0:	1ba4      	subs	r4, r4, r6
 80183f2:	10a4      	asrs	r4, r4, #2
 80183f4:	2500      	movs	r5, #0
 80183f6:	42a5      	cmp	r5, r4
 80183f8:	d105      	bne.n	8018406 <__libc_init_array+0x2e>
 80183fa:	bd70      	pop	{r4, r5, r6, pc}
 80183fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018400:	4798      	blx	r3
 8018402:	3501      	adds	r5, #1
 8018404:	e7ee      	b.n	80183e4 <__libc_init_array+0xc>
 8018406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801840a:	4798      	blx	r3
 801840c:	3501      	adds	r5, #1
 801840e:	e7f2      	b.n	80183f6 <__libc_init_array+0x1e>
 8018410:	0801a044 	.word	0x0801a044
 8018414:	0801a044 	.word	0x0801a044
 8018418:	0801a044 	.word	0x0801a044
 801841c:	0801a048 	.word	0x0801a048

08018420 <malloc>:
 8018420:	4b02      	ldr	r3, [pc, #8]	; (801842c <malloc+0xc>)
 8018422:	4601      	mov	r1, r0
 8018424:	6818      	ldr	r0, [r3, #0]
 8018426:	f000 b86d 	b.w	8018504 <_malloc_r>
 801842a:	bf00      	nop
 801842c:	24000174 	.word	0x24000174

08018430 <free>:
 8018430:	4b02      	ldr	r3, [pc, #8]	; (801843c <free+0xc>)
 8018432:	4601      	mov	r1, r0
 8018434:	6818      	ldr	r0, [r3, #0]
 8018436:	f000 b817 	b.w	8018468 <_free_r>
 801843a:	bf00      	nop
 801843c:	24000174 	.word	0x24000174

08018440 <memcpy>:
 8018440:	b510      	push	{r4, lr}
 8018442:	1e43      	subs	r3, r0, #1
 8018444:	440a      	add	r2, r1
 8018446:	4291      	cmp	r1, r2
 8018448:	d100      	bne.n	801844c <memcpy+0xc>
 801844a:	bd10      	pop	{r4, pc}
 801844c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018454:	e7f7      	b.n	8018446 <memcpy+0x6>

08018456 <memset>:
 8018456:	4402      	add	r2, r0
 8018458:	4603      	mov	r3, r0
 801845a:	4293      	cmp	r3, r2
 801845c:	d100      	bne.n	8018460 <memset+0xa>
 801845e:	4770      	bx	lr
 8018460:	f803 1b01 	strb.w	r1, [r3], #1
 8018464:	e7f9      	b.n	801845a <memset+0x4>
	...

08018468 <_free_r>:
 8018468:	b538      	push	{r3, r4, r5, lr}
 801846a:	4605      	mov	r5, r0
 801846c:	2900      	cmp	r1, #0
 801846e:	d045      	beq.n	80184fc <_free_r+0x94>
 8018470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018474:	1f0c      	subs	r4, r1, #4
 8018476:	2b00      	cmp	r3, #0
 8018478:	bfb8      	it	lt
 801847a:	18e4      	addlt	r4, r4, r3
 801847c:	f000 fc1a 	bl	8018cb4 <__malloc_lock>
 8018480:	4a1f      	ldr	r2, [pc, #124]	; (8018500 <_free_r+0x98>)
 8018482:	6813      	ldr	r3, [r2, #0]
 8018484:	4610      	mov	r0, r2
 8018486:	b933      	cbnz	r3, 8018496 <_free_r+0x2e>
 8018488:	6063      	str	r3, [r4, #4]
 801848a:	6014      	str	r4, [r2, #0]
 801848c:	4628      	mov	r0, r5
 801848e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018492:	f000 bc10 	b.w	8018cb6 <__malloc_unlock>
 8018496:	42a3      	cmp	r3, r4
 8018498:	d90c      	bls.n	80184b4 <_free_r+0x4c>
 801849a:	6821      	ldr	r1, [r4, #0]
 801849c:	1862      	adds	r2, r4, r1
 801849e:	4293      	cmp	r3, r2
 80184a0:	bf04      	itt	eq
 80184a2:	681a      	ldreq	r2, [r3, #0]
 80184a4:	685b      	ldreq	r3, [r3, #4]
 80184a6:	6063      	str	r3, [r4, #4]
 80184a8:	bf04      	itt	eq
 80184aa:	1852      	addeq	r2, r2, r1
 80184ac:	6022      	streq	r2, [r4, #0]
 80184ae:	6004      	str	r4, [r0, #0]
 80184b0:	e7ec      	b.n	801848c <_free_r+0x24>
 80184b2:	4613      	mov	r3, r2
 80184b4:	685a      	ldr	r2, [r3, #4]
 80184b6:	b10a      	cbz	r2, 80184bc <_free_r+0x54>
 80184b8:	42a2      	cmp	r2, r4
 80184ba:	d9fa      	bls.n	80184b2 <_free_r+0x4a>
 80184bc:	6819      	ldr	r1, [r3, #0]
 80184be:	1858      	adds	r0, r3, r1
 80184c0:	42a0      	cmp	r0, r4
 80184c2:	d10b      	bne.n	80184dc <_free_r+0x74>
 80184c4:	6820      	ldr	r0, [r4, #0]
 80184c6:	4401      	add	r1, r0
 80184c8:	1858      	adds	r0, r3, r1
 80184ca:	4282      	cmp	r2, r0
 80184cc:	6019      	str	r1, [r3, #0]
 80184ce:	d1dd      	bne.n	801848c <_free_r+0x24>
 80184d0:	6810      	ldr	r0, [r2, #0]
 80184d2:	6852      	ldr	r2, [r2, #4]
 80184d4:	605a      	str	r2, [r3, #4]
 80184d6:	4401      	add	r1, r0
 80184d8:	6019      	str	r1, [r3, #0]
 80184da:	e7d7      	b.n	801848c <_free_r+0x24>
 80184dc:	d902      	bls.n	80184e4 <_free_r+0x7c>
 80184de:	230c      	movs	r3, #12
 80184e0:	602b      	str	r3, [r5, #0]
 80184e2:	e7d3      	b.n	801848c <_free_r+0x24>
 80184e4:	6820      	ldr	r0, [r4, #0]
 80184e6:	1821      	adds	r1, r4, r0
 80184e8:	428a      	cmp	r2, r1
 80184ea:	bf04      	itt	eq
 80184ec:	6811      	ldreq	r1, [r2, #0]
 80184ee:	6852      	ldreq	r2, [r2, #4]
 80184f0:	6062      	str	r2, [r4, #4]
 80184f2:	bf04      	itt	eq
 80184f4:	1809      	addeq	r1, r1, r0
 80184f6:	6021      	streq	r1, [r4, #0]
 80184f8:	605c      	str	r4, [r3, #4]
 80184fa:	e7c7      	b.n	801848c <_free_r+0x24>
 80184fc:	bd38      	pop	{r3, r4, r5, pc}
 80184fe:	bf00      	nop
 8018500:	24040384 	.word	0x24040384

08018504 <_malloc_r>:
 8018504:	b570      	push	{r4, r5, r6, lr}
 8018506:	1ccd      	adds	r5, r1, #3
 8018508:	f025 0503 	bic.w	r5, r5, #3
 801850c:	3508      	adds	r5, #8
 801850e:	2d0c      	cmp	r5, #12
 8018510:	bf38      	it	cc
 8018512:	250c      	movcc	r5, #12
 8018514:	2d00      	cmp	r5, #0
 8018516:	4606      	mov	r6, r0
 8018518:	db01      	blt.n	801851e <_malloc_r+0x1a>
 801851a:	42a9      	cmp	r1, r5
 801851c:	d903      	bls.n	8018526 <_malloc_r+0x22>
 801851e:	230c      	movs	r3, #12
 8018520:	6033      	str	r3, [r6, #0]
 8018522:	2000      	movs	r0, #0
 8018524:	bd70      	pop	{r4, r5, r6, pc}
 8018526:	f000 fbc5 	bl	8018cb4 <__malloc_lock>
 801852a:	4a21      	ldr	r2, [pc, #132]	; (80185b0 <_malloc_r+0xac>)
 801852c:	6814      	ldr	r4, [r2, #0]
 801852e:	4621      	mov	r1, r4
 8018530:	b991      	cbnz	r1, 8018558 <_malloc_r+0x54>
 8018532:	4c20      	ldr	r4, [pc, #128]	; (80185b4 <_malloc_r+0xb0>)
 8018534:	6823      	ldr	r3, [r4, #0]
 8018536:	b91b      	cbnz	r3, 8018540 <_malloc_r+0x3c>
 8018538:	4630      	mov	r0, r6
 801853a:	f000 f8b9 	bl	80186b0 <_sbrk_r>
 801853e:	6020      	str	r0, [r4, #0]
 8018540:	4629      	mov	r1, r5
 8018542:	4630      	mov	r0, r6
 8018544:	f000 f8b4 	bl	80186b0 <_sbrk_r>
 8018548:	1c43      	adds	r3, r0, #1
 801854a:	d124      	bne.n	8018596 <_malloc_r+0x92>
 801854c:	230c      	movs	r3, #12
 801854e:	6033      	str	r3, [r6, #0]
 8018550:	4630      	mov	r0, r6
 8018552:	f000 fbb0 	bl	8018cb6 <__malloc_unlock>
 8018556:	e7e4      	b.n	8018522 <_malloc_r+0x1e>
 8018558:	680b      	ldr	r3, [r1, #0]
 801855a:	1b5b      	subs	r3, r3, r5
 801855c:	d418      	bmi.n	8018590 <_malloc_r+0x8c>
 801855e:	2b0b      	cmp	r3, #11
 8018560:	d90f      	bls.n	8018582 <_malloc_r+0x7e>
 8018562:	600b      	str	r3, [r1, #0]
 8018564:	50cd      	str	r5, [r1, r3]
 8018566:	18cc      	adds	r4, r1, r3
 8018568:	4630      	mov	r0, r6
 801856a:	f000 fba4 	bl	8018cb6 <__malloc_unlock>
 801856e:	f104 000b 	add.w	r0, r4, #11
 8018572:	1d23      	adds	r3, r4, #4
 8018574:	f020 0007 	bic.w	r0, r0, #7
 8018578:	1ac3      	subs	r3, r0, r3
 801857a:	d0d3      	beq.n	8018524 <_malloc_r+0x20>
 801857c:	425a      	negs	r2, r3
 801857e:	50e2      	str	r2, [r4, r3]
 8018580:	e7d0      	b.n	8018524 <_malloc_r+0x20>
 8018582:	428c      	cmp	r4, r1
 8018584:	684b      	ldr	r3, [r1, #4]
 8018586:	bf16      	itet	ne
 8018588:	6063      	strne	r3, [r4, #4]
 801858a:	6013      	streq	r3, [r2, #0]
 801858c:	460c      	movne	r4, r1
 801858e:	e7eb      	b.n	8018568 <_malloc_r+0x64>
 8018590:	460c      	mov	r4, r1
 8018592:	6849      	ldr	r1, [r1, #4]
 8018594:	e7cc      	b.n	8018530 <_malloc_r+0x2c>
 8018596:	1cc4      	adds	r4, r0, #3
 8018598:	f024 0403 	bic.w	r4, r4, #3
 801859c:	42a0      	cmp	r0, r4
 801859e:	d005      	beq.n	80185ac <_malloc_r+0xa8>
 80185a0:	1a21      	subs	r1, r4, r0
 80185a2:	4630      	mov	r0, r6
 80185a4:	f000 f884 	bl	80186b0 <_sbrk_r>
 80185a8:	3001      	adds	r0, #1
 80185aa:	d0cf      	beq.n	801854c <_malloc_r+0x48>
 80185ac:	6025      	str	r5, [r4, #0]
 80185ae:	e7db      	b.n	8018568 <_malloc_r+0x64>
 80185b0:	24040384 	.word	0x24040384
 80185b4:	24040388 	.word	0x24040388

080185b8 <iprintf>:
 80185b8:	b40f      	push	{r0, r1, r2, r3}
 80185ba:	4b0a      	ldr	r3, [pc, #40]	; (80185e4 <iprintf+0x2c>)
 80185bc:	b513      	push	{r0, r1, r4, lr}
 80185be:	681c      	ldr	r4, [r3, #0]
 80185c0:	b124      	cbz	r4, 80185cc <iprintf+0x14>
 80185c2:	69a3      	ldr	r3, [r4, #24]
 80185c4:	b913      	cbnz	r3, 80185cc <iprintf+0x14>
 80185c6:	4620      	mov	r0, r4
 80185c8:	f000 fa86 	bl	8018ad8 <__sinit>
 80185cc:	ab05      	add	r3, sp, #20
 80185ce:	9a04      	ldr	r2, [sp, #16]
 80185d0:	68a1      	ldr	r1, [r4, #8]
 80185d2:	9301      	str	r3, [sp, #4]
 80185d4:	4620      	mov	r0, r4
 80185d6:	f000 fceb 	bl	8018fb0 <_vfiprintf_r>
 80185da:	b002      	add	sp, #8
 80185dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185e0:	b004      	add	sp, #16
 80185e2:	4770      	bx	lr
 80185e4:	24000174 	.word	0x24000174

080185e8 <_puts_r>:
 80185e8:	b570      	push	{r4, r5, r6, lr}
 80185ea:	460e      	mov	r6, r1
 80185ec:	4605      	mov	r5, r0
 80185ee:	b118      	cbz	r0, 80185f8 <_puts_r+0x10>
 80185f0:	6983      	ldr	r3, [r0, #24]
 80185f2:	b90b      	cbnz	r3, 80185f8 <_puts_r+0x10>
 80185f4:	f000 fa70 	bl	8018ad8 <__sinit>
 80185f8:	69ab      	ldr	r3, [r5, #24]
 80185fa:	68ac      	ldr	r4, [r5, #8]
 80185fc:	b913      	cbnz	r3, 8018604 <_puts_r+0x1c>
 80185fe:	4628      	mov	r0, r5
 8018600:	f000 fa6a 	bl	8018ad8 <__sinit>
 8018604:	4b23      	ldr	r3, [pc, #140]	; (8018694 <_puts_r+0xac>)
 8018606:	429c      	cmp	r4, r3
 8018608:	d117      	bne.n	801863a <_puts_r+0x52>
 801860a:	686c      	ldr	r4, [r5, #4]
 801860c:	89a3      	ldrh	r3, [r4, #12]
 801860e:	071b      	lsls	r3, r3, #28
 8018610:	d51d      	bpl.n	801864e <_puts_r+0x66>
 8018612:	6923      	ldr	r3, [r4, #16]
 8018614:	b1db      	cbz	r3, 801864e <_puts_r+0x66>
 8018616:	3e01      	subs	r6, #1
 8018618:	68a3      	ldr	r3, [r4, #8]
 801861a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801861e:	3b01      	subs	r3, #1
 8018620:	60a3      	str	r3, [r4, #8]
 8018622:	b9e9      	cbnz	r1, 8018660 <_puts_r+0x78>
 8018624:	2b00      	cmp	r3, #0
 8018626:	da2e      	bge.n	8018686 <_puts_r+0x9e>
 8018628:	4622      	mov	r2, r4
 801862a:	210a      	movs	r1, #10
 801862c:	4628      	mov	r0, r5
 801862e:	f000 f8a3 	bl	8018778 <__swbuf_r>
 8018632:	3001      	adds	r0, #1
 8018634:	d011      	beq.n	801865a <_puts_r+0x72>
 8018636:	200a      	movs	r0, #10
 8018638:	e011      	b.n	801865e <_puts_r+0x76>
 801863a:	4b17      	ldr	r3, [pc, #92]	; (8018698 <_puts_r+0xb0>)
 801863c:	429c      	cmp	r4, r3
 801863e:	d101      	bne.n	8018644 <_puts_r+0x5c>
 8018640:	68ac      	ldr	r4, [r5, #8]
 8018642:	e7e3      	b.n	801860c <_puts_r+0x24>
 8018644:	4b15      	ldr	r3, [pc, #84]	; (801869c <_puts_r+0xb4>)
 8018646:	429c      	cmp	r4, r3
 8018648:	bf08      	it	eq
 801864a:	68ec      	ldreq	r4, [r5, #12]
 801864c:	e7de      	b.n	801860c <_puts_r+0x24>
 801864e:	4621      	mov	r1, r4
 8018650:	4628      	mov	r0, r5
 8018652:	f000 f8e3 	bl	801881c <__swsetup_r>
 8018656:	2800      	cmp	r0, #0
 8018658:	d0dd      	beq.n	8018616 <_puts_r+0x2e>
 801865a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801865e:	bd70      	pop	{r4, r5, r6, pc}
 8018660:	2b00      	cmp	r3, #0
 8018662:	da04      	bge.n	801866e <_puts_r+0x86>
 8018664:	69a2      	ldr	r2, [r4, #24]
 8018666:	429a      	cmp	r2, r3
 8018668:	dc06      	bgt.n	8018678 <_puts_r+0x90>
 801866a:	290a      	cmp	r1, #10
 801866c:	d004      	beq.n	8018678 <_puts_r+0x90>
 801866e:	6823      	ldr	r3, [r4, #0]
 8018670:	1c5a      	adds	r2, r3, #1
 8018672:	6022      	str	r2, [r4, #0]
 8018674:	7019      	strb	r1, [r3, #0]
 8018676:	e7cf      	b.n	8018618 <_puts_r+0x30>
 8018678:	4622      	mov	r2, r4
 801867a:	4628      	mov	r0, r5
 801867c:	f000 f87c 	bl	8018778 <__swbuf_r>
 8018680:	3001      	adds	r0, #1
 8018682:	d1c9      	bne.n	8018618 <_puts_r+0x30>
 8018684:	e7e9      	b.n	801865a <_puts_r+0x72>
 8018686:	6823      	ldr	r3, [r4, #0]
 8018688:	200a      	movs	r0, #10
 801868a:	1c5a      	adds	r2, r3, #1
 801868c:	6022      	str	r2, [r4, #0]
 801868e:	7018      	strb	r0, [r3, #0]
 8018690:	e7e5      	b.n	801865e <_puts_r+0x76>
 8018692:	bf00      	nop
 8018694:	08019fc8 	.word	0x08019fc8
 8018698:	08019fe8 	.word	0x08019fe8
 801869c:	08019fa8 	.word	0x08019fa8

080186a0 <puts>:
 80186a0:	4b02      	ldr	r3, [pc, #8]	; (80186ac <puts+0xc>)
 80186a2:	4601      	mov	r1, r0
 80186a4:	6818      	ldr	r0, [r3, #0]
 80186a6:	f7ff bf9f 	b.w	80185e8 <_puts_r>
 80186aa:	bf00      	nop
 80186ac:	24000174 	.word	0x24000174

080186b0 <_sbrk_r>:
 80186b0:	b538      	push	{r3, r4, r5, lr}
 80186b2:	4c06      	ldr	r4, [pc, #24]	; (80186cc <_sbrk_r+0x1c>)
 80186b4:	2300      	movs	r3, #0
 80186b6:	4605      	mov	r5, r0
 80186b8:	4608      	mov	r0, r1
 80186ba:	6023      	str	r3, [r4, #0]
 80186bc:	f7ea fdf8 	bl	80032b0 <_sbrk>
 80186c0:	1c43      	adds	r3, r0, #1
 80186c2:	d102      	bne.n	80186ca <_sbrk_r+0x1a>
 80186c4:	6823      	ldr	r3, [r4, #0]
 80186c6:	b103      	cbz	r3, 80186ca <_sbrk_r+0x1a>
 80186c8:	602b      	str	r3, [r5, #0]
 80186ca:	bd38      	pop	{r3, r4, r5, pc}
 80186cc:	24041c84 	.word	0x24041c84

080186d0 <sniprintf>:
 80186d0:	b40c      	push	{r2, r3}
 80186d2:	b530      	push	{r4, r5, lr}
 80186d4:	4b17      	ldr	r3, [pc, #92]	; (8018734 <sniprintf+0x64>)
 80186d6:	1e0c      	subs	r4, r1, #0
 80186d8:	b09d      	sub	sp, #116	; 0x74
 80186da:	681d      	ldr	r5, [r3, #0]
 80186dc:	da08      	bge.n	80186f0 <sniprintf+0x20>
 80186de:	238b      	movs	r3, #139	; 0x8b
 80186e0:	602b      	str	r3, [r5, #0]
 80186e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80186e6:	b01d      	add	sp, #116	; 0x74
 80186e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80186ec:	b002      	add	sp, #8
 80186ee:	4770      	bx	lr
 80186f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80186f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80186f8:	bf14      	ite	ne
 80186fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80186fe:	4623      	moveq	r3, r4
 8018700:	9304      	str	r3, [sp, #16]
 8018702:	9307      	str	r3, [sp, #28]
 8018704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018708:	9002      	str	r0, [sp, #8]
 801870a:	9006      	str	r0, [sp, #24]
 801870c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018710:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018712:	ab21      	add	r3, sp, #132	; 0x84
 8018714:	a902      	add	r1, sp, #8
 8018716:	4628      	mov	r0, r5
 8018718:	9301      	str	r3, [sp, #4]
 801871a:	f000 fb27 	bl	8018d6c <_svfiprintf_r>
 801871e:	1c43      	adds	r3, r0, #1
 8018720:	bfbc      	itt	lt
 8018722:	238b      	movlt	r3, #139	; 0x8b
 8018724:	602b      	strlt	r3, [r5, #0]
 8018726:	2c00      	cmp	r4, #0
 8018728:	d0dd      	beq.n	80186e6 <sniprintf+0x16>
 801872a:	9b02      	ldr	r3, [sp, #8]
 801872c:	2200      	movs	r2, #0
 801872e:	701a      	strb	r2, [r3, #0]
 8018730:	e7d9      	b.n	80186e6 <sniprintf+0x16>
 8018732:	bf00      	nop
 8018734:	24000174 	.word	0x24000174

08018738 <siprintf>:
 8018738:	b40e      	push	{r1, r2, r3}
 801873a:	b500      	push	{lr}
 801873c:	b09c      	sub	sp, #112	; 0x70
 801873e:	ab1d      	add	r3, sp, #116	; 0x74
 8018740:	9002      	str	r0, [sp, #8]
 8018742:	9006      	str	r0, [sp, #24]
 8018744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018748:	4809      	ldr	r0, [pc, #36]	; (8018770 <siprintf+0x38>)
 801874a:	9107      	str	r1, [sp, #28]
 801874c:	9104      	str	r1, [sp, #16]
 801874e:	4909      	ldr	r1, [pc, #36]	; (8018774 <siprintf+0x3c>)
 8018750:	f853 2b04 	ldr.w	r2, [r3], #4
 8018754:	9105      	str	r1, [sp, #20]
 8018756:	6800      	ldr	r0, [r0, #0]
 8018758:	9301      	str	r3, [sp, #4]
 801875a:	a902      	add	r1, sp, #8
 801875c:	f000 fb06 	bl	8018d6c <_svfiprintf_r>
 8018760:	9b02      	ldr	r3, [sp, #8]
 8018762:	2200      	movs	r2, #0
 8018764:	701a      	strb	r2, [r3, #0]
 8018766:	b01c      	add	sp, #112	; 0x70
 8018768:	f85d eb04 	ldr.w	lr, [sp], #4
 801876c:	b003      	add	sp, #12
 801876e:	4770      	bx	lr
 8018770:	24000174 	.word	0x24000174
 8018774:	ffff0208 	.word	0xffff0208

08018778 <__swbuf_r>:
 8018778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801877a:	460e      	mov	r6, r1
 801877c:	4614      	mov	r4, r2
 801877e:	4605      	mov	r5, r0
 8018780:	b118      	cbz	r0, 801878a <__swbuf_r+0x12>
 8018782:	6983      	ldr	r3, [r0, #24]
 8018784:	b90b      	cbnz	r3, 801878a <__swbuf_r+0x12>
 8018786:	f000 f9a7 	bl	8018ad8 <__sinit>
 801878a:	4b21      	ldr	r3, [pc, #132]	; (8018810 <__swbuf_r+0x98>)
 801878c:	429c      	cmp	r4, r3
 801878e:	d12a      	bne.n	80187e6 <__swbuf_r+0x6e>
 8018790:	686c      	ldr	r4, [r5, #4]
 8018792:	69a3      	ldr	r3, [r4, #24]
 8018794:	60a3      	str	r3, [r4, #8]
 8018796:	89a3      	ldrh	r3, [r4, #12]
 8018798:	071a      	lsls	r2, r3, #28
 801879a:	d52e      	bpl.n	80187fa <__swbuf_r+0x82>
 801879c:	6923      	ldr	r3, [r4, #16]
 801879e:	b363      	cbz	r3, 80187fa <__swbuf_r+0x82>
 80187a0:	6923      	ldr	r3, [r4, #16]
 80187a2:	6820      	ldr	r0, [r4, #0]
 80187a4:	1ac0      	subs	r0, r0, r3
 80187a6:	6963      	ldr	r3, [r4, #20]
 80187a8:	b2f6      	uxtb	r6, r6
 80187aa:	4283      	cmp	r3, r0
 80187ac:	4637      	mov	r7, r6
 80187ae:	dc04      	bgt.n	80187ba <__swbuf_r+0x42>
 80187b0:	4621      	mov	r1, r4
 80187b2:	4628      	mov	r0, r5
 80187b4:	f000 f926 	bl	8018a04 <_fflush_r>
 80187b8:	bb28      	cbnz	r0, 8018806 <__swbuf_r+0x8e>
 80187ba:	68a3      	ldr	r3, [r4, #8]
 80187bc:	3b01      	subs	r3, #1
 80187be:	60a3      	str	r3, [r4, #8]
 80187c0:	6823      	ldr	r3, [r4, #0]
 80187c2:	1c5a      	adds	r2, r3, #1
 80187c4:	6022      	str	r2, [r4, #0]
 80187c6:	701e      	strb	r6, [r3, #0]
 80187c8:	6963      	ldr	r3, [r4, #20]
 80187ca:	3001      	adds	r0, #1
 80187cc:	4283      	cmp	r3, r0
 80187ce:	d004      	beq.n	80187da <__swbuf_r+0x62>
 80187d0:	89a3      	ldrh	r3, [r4, #12]
 80187d2:	07db      	lsls	r3, r3, #31
 80187d4:	d519      	bpl.n	801880a <__swbuf_r+0x92>
 80187d6:	2e0a      	cmp	r6, #10
 80187d8:	d117      	bne.n	801880a <__swbuf_r+0x92>
 80187da:	4621      	mov	r1, r4
 80187dc:	4628      	mov	r0, r5
 80187de:	f000 f911 	bl	8018a04 <_fflush_r>
 80187e2:	b190      	cbz	r0, 801880a <__swbuf_r+0x92>
 80187e4:	e00f      	b.n	8018806 <__swbuf_r+0x8e>
 80187e6:	4b0b      	ldr	r3, [pc, #44]	; (8018814 <__swbuf_r+0x9c>)
 80187e8:	429c      	cmp	r4, r3
 80187ea:	d101      	bne.n	80187f0 <__swbuf_r+0x78>
 80187ec:	68ac      	ldr	r4, [r5, #8]
 80187ee:	e7d0      	b.n	8018792 <__swbuf_r+0x1a>
 80187f0:	4b09      	ldr	r3, [pc, #36]	; (8018818 <__swbuf_r+0xa0>)
 80187f2:	429c      	cmp	r4, r3
 80187f4:	bf08      	it	eq
 80187f6:	68ec      	ldreq	r4, [r5, #12]
 80187f8:	e7cb      	b.n	8018792 <__swbuf_r+0x1a>
 80187fa:	4621      	mov	r1, r4
 80187fc:	4628      	mov	r0, r5
 80187fe:	f000 f80d 	bl	801881c <__swsetup_r>
 8018802:	2800      	cmp	r0, #0
 8018804:	d0cc      	beq.n	80187a0 <__swbuf_r+0x28>
 8018806:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801880a:	4638      	mov	r0, r7
 801880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801880e:	bf00      	nop
 8018810:	08019fc8 	.word	0x08019fc8
 8018814:	08019fe8 	.word	0x08019fe8
 8018818:	08019fa8 	.word	0x08019fa8

0801881c <__swsetup_r>:
 801881c:	4b32      	ldr	r3, [pc, #200]	; (80188e8 <__swsetup_r+0xcc>)
 801881e:	b570      	push	{r4, r5, r6, lr}
 8018820:	681d      	ldr	r5, [r3, #0]
 8018822:	4606      	mov	r6, r0
 8018824:	460c      	mov	r4, r1
 8018826:	b125      	cbz	r5, 8018832 <__swsetup_r+0x16>
 8018828:	69ab      	ldr	r3, [r5, #24]
 801882a:	b913      	cbnz	r3, 8018832 <__swsetup_r+0x16>
 801882c:	4628      	mov	r0, r5
 801882e:	f000 f953 	bl	8018ad8 <__sinit>
 8018832:	4b2e      	ldr	r3, [pc, #184]	; (80188ec <__swsetup_r+0xd0>)
 8018834:	429c      	cmp	r4, r3
 8018836:	d10f      	bne.n	8018858 <__swsetup_r+0x3c>
 8018838:	686c      	ldr	r4, [r5, #4]
 801883a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801883e:	b29a      	uxth	r2, r3
 8018840:	0715      	lsls	r5, r2, #28
 8018842:	d42c      	bmi.n	801889e <__swsetup_r+0x82>
 8018844:	06d0      	lsls	r0, r2, #27
 8018846:	d411      	bmi.n	801886c <__swsetup_r+0x50>
 8018848:	2209      	movs	r2, #9
 801884a:	6032      	str	r2, [r6, #0]
 801884c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018850:	81a3      	strh	r3, [r4, #12]
 8018852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018856:	e03e      	b.n	80188d6 <__swsetup_r+0xba>
 8018858:	4b25      	ldr	r3, [pc, #148]	; (80188f0 <__swsetup_r+0xd4>)
 801885a:	429c      	cmp	r4, r3
 801885c:	d101      	bne.n	8018862 <__swsetup_r+0x46>
 801885e:	68ac      	ldr	r4, [r5, #8]
 8018860:	e7eb      	b.n	801883a <__swsetup_r+0x1e>
 8018862:	4b24      	ldr	r3, [pc, #144]	; (80188f4 <__swsetup_r+0xd8>)
 8018864:	429c      	cmp	r4, r3
 8018866:	bf08      	it	eq
 8018868:	68ec      	ldreq	r4, [r5, #12]
 801886a:	e7e6      	b.n	801883a <__swsetup_r+0x1e>
 801886c:	0751      	lsls	r1, r2, #29
 801886e:	d512      	bpl.n	8018896 <__swsetup_r+0x7a>
 8018870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018872:	b141      	cbz	r1, 8018886 <__swsetup_r+0x6a>
 8018874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018878:	4299      	cmp	r1, r3
 801887a:	d002      	beq.n	8018882 <__swsetup_r+0x66>
 801887c:	4630      	mov	r0, r6
 801887e:	f7ff fdf3 	bl	8018468 <_free_r>
 8018882:	2300      	movs	r3, #0
 8018884:	6363      	str	r3, [r4, #52]	; 0x34
 8018886:	89a3      	ldrh	r3, [r4, #12]
 8018888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801888c:	81a3      	strh	r3, [r4, #12]
 801888e:	2300      	movs	r3, #0
 8018890:	6063      	str	r3, [r4, #4]
 8018892:	6923      	ldr	r3, [r4, #16]
 8018894:	6023      	str	r3, [r4, #0]
 8018896:	89a3      	ldrh	r3, [r4, #12]
 8018898:	f043 0308 	orr.w	r3, r3, #8
 801889c:	81a3      	strh	r3, [r4, #12]
 801889e:	6923      	ldr	r3, [r4, #16]
 80188a0:	b94b      	cbnz	r3, 80188b6 <__swsetup_r+0x9a>
 80188a2:	89a3      	ldrh	r3, [r4, #12]
 80188a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80188a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80188ac:	d003      	beq.n	80188b6 <__swsetup_r+0x9a>
 80188ae:	4621      	mov	r1, r4
 80188b0:	4630      	mov	r0, r6
 80188b2:	f000 f9bf 	bl	8018c34 <__smakebuf_r>
 80188b6:	89a2      	ldrh	r2, [r4, #12]
 80188b8:	f012 0301 	ands.w	r3, r2, #1
 80188bc:	d00c      	beq.n	80188d8 <__swsetup_r+0xbc>
 80188be:	2300      	movs	r3, #0
 80188c0:	60a3      	str	r3, [r4, #8]
 80188c2:	6963      	ldr	r3, [r4, #20]
 80188c4:	425b      	negs	r3, r3
 80188c6:	61a3      	str	r3, [r4, #24]
 80188c8:	6923      	ldr	r3, [r4, #16]
 80188ca:	b953      	cbnz	r3, 80188e2 <__swsetup_r+0xc6>
 80188cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80188d4:	d1ba      	bne.n	801884c <__swsetup_r+0x30>
 80188d6:	bd70      	pop	{r4, r5, r6, pc}
 80188d8:	0792      	lsls	r2, r2, #30
 80188da:	bf58      	it	pl
 80188dc:	6963      	ldrpl	r3, [r4, #20]
 80188de:	60a3      	str	r3, [r4, #8]
 80188e0:	e7f2      	b.n	80188c8 <__swsetup_r+0xac>
 80188e2:	2000      	movs	r0, #0
 80188e4:	e7f7      	b.n	80188d6 <__swsetup_r+0xba>
 80188e6:	bf00      	nop
 80188e8:	24000174 	.word	0x24000174
 80188ec:	08019fc8 	.word	0x08019fc8
 80188f0:	08019fe8 	.word	0x08019fe8
 80188f4:	08019fa8 	.word	0x08019fa8

080188f8 <__sflush_r>:
 80188f8:	898a      	ldrh	r2, [r1, #12]
 80188fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188fe:	4605      	mov	r5, r0
 8018900:	0710      	lsls	r0, r2, #28
 8018902:	460c      	mov	r4, r1
 8018904:	d458      	bmi.n	80189b8 <__sflush_r+0xc0>
 8018906:	684b      	ldr	r3, [r1, #4]
 8018908:	2b00      	cmp	r3, #0
 801890a:	dc05      	bgt.n	8018918 <__sflush_r+0x20>
 801890c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801890e:	2b00      	cmp	r3, #0
 8018910:	dc02      	bgt.n	8018918 <__sflush_r+0x20>
 8018912:	2000      	movs	r0, #0
 8018914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801891a:	2e00      	cmp	r6, #0
 801891c:	d0f9      	beq.n	8018912 <__sflush_r+0x1a>
 801891e:	2300      	movs	r3, #0
 8018920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018924:	682f      	ldr	r7, [r5, #0]
 8018926:	6a21      	ldr	r1, [r4, #32]
 8018928:	602b      	str	r3, [r5, #0]
 801892a:	d032      	beq.n	8018992 <__sflush_r+0x9a>
 801892c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801892e:	89a3      	ldrh	r3, [r4, #12]
 8018930:	075a      	lsls	r2, r3, #29
 8018932:	d505      	bpl.n	8018940 <__sflush_r+0x48>
 8018934:	6863      	ldr	r3, [r4, #4]
 8018936:	1ac0      	subs	r0, r0, r3
 8018938:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801893a:	b10b      	cbz	r3, 8018940 <__sflush_r+0x48>
 801893c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801893e:	1ac0      	subs	r0, r0, r3
 8018940:	2300      	movs	r3, #0
 8018942:	4602      	mov	r2, r0
 8018944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018946:	6a21      	ldr	r1, [r4, #32]
 8018948:	4628      	mov	r0, r5
 801894a:	47b0      	blx	r6
 801894c:	1c43      	adds	r3, r0, #1
 801894e:	89a3      	ldrh	r3, [r4, #12]
 8018950:	d106      	bne.n	8018960 <__sflush_r+0x68>
 8018952:	6829      	ldr	r1, [r5, #0]
 8018954:	291d      	cmp	r1, #29
 8018956:	d848      	bhi.n	80189ea <__sflush_r+0xf2>
 8018958:	4a29      	ldr	r2, [pc, #164]	; (8018a00 <__sflush_r+0x108>)
 801895a:	40ca      	lsrs	r2, r1
 801895c:	07d6      	lsls	r6, r2, #31
 801895e:	d544      	bpl.n	80189ea <__sflush_r+0xf2>
 8018960:	2200      	movs	r2, #0
 8018962:	6062      	str	r2, [r4, #4]
 8018964:	04d9      	lsls	r1, r3, #19
 8018966:	6922      	ldr	r2, [r4, #16]
 8018968:	6022      	str	r2, [r4, #0]
 801896a:	d504      	bpl.n	8018976 <__sflush_r+0x7e>
 801896c:	1c42      	adds	r2, r0, #1
 801896e:	d101      	bne.n	8018974 <__sflush_r+0x7c>
 8018970:	682b      	ldr	r3, [r5, #0]
 8018972:	b903      	cbnz	r3, 8018976 <__sflush_r+0x7e>
 8018974:	6560      	str	r0, [r4, #84]	; 0x54
 8018976:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018978:	602f      	str	r7, [r5, #0]
 801897a:	2900      	cmp	r1, #0
 801897c:	d0c9      	beq.n	8018912 <__sflush_r+0x1a>
 801897e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018982:	4299      	cmp	r1, r3
 8018984:	d002      	beq.n	801898c <__sflush_r+0x94>
 8018986:	4628      	mov	r0, r5
 8018988:	f7ff fd6e 	bl	8018468 <_free_r>
 801898c:	2000      	movs	r0, #0
 801898e:	6360      	str	r0, [r4, #52]	; 0x34
 8018990:	e7c0      	b.n	8018914 <__sflush_r+0x1c>
 8018992:	2301      	movs	r3, #1
 8018994:	4628      	mov	r0, r5
 8018996:	47b0      	blx	r6
 8018998:	1c41      	adds	r1, r0, #1
 801899a:	d1c8      	bne.n	801892e <__sflush_r+0x36>
 801899c:	682b      	ldr	r3, [r5, #0]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d0c5      	beq.n	801892e <__sflush_r+0x36>
 80189a2:	2b1d      	cmp	r3, #29
 80189a4:	d001      	beq.n	80189aa <__sflush_r+0xb2>
 80189a6:	2b16      	cmp	r3, #22
 80189a8:	d101      	bne.n	80189ae <__sflush_r+0xb6>
 80189aa:	602f      	str	r7, [r5, #0]
 80189ac:	e7b1      	b.n	8018912 <__sflush_r+0x1a>
 80189ae:	89a3      	ldrh	r3, [r4, #12]
 80189b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189b4:	81a3      	strh	r3, [r4, #12]
 80189b6:	e7ad      	b.n	8018914 <__sflush_r+0x1c>
 80189b8:	690f      	ldr	r7, [r1, #16]
 80189ba:	2f00      	cmp	r7, #0
 80189bc:	d0a9      	beq.n	8018912 <__sflush_r+0x1a>
 80189be:	0793      	lsls	r3, r2, #30
 80189c0:	680e      	ldr	r6, [r1, #0]
 80189c2:	bf08      	it	eq
 80189c4:	694b      	ldreq	r3, [r1, #20]
 80189c6:	600f      	str	r7, [r1, #0]
 80189c8:	bf18      	it	ne
 80189ca:	2300      	movne	r3, #0
 80189cc:	eba6 0807 	sub.w	r8, r6, r7
 80189d0:	608b      	str	r3, [r1, #8]
 80189d2:	f1b8 0f00 	cmp.w	r8, #0
 80189d6:	dd9c      	ble.n	8018912 <__sflush_r+0x1a>
 80189d8:	4643      	mov	r3, r8
 80189da:	463a      	mov	r2, r7
 80189dc:	6a21      	ldr	r1, [r4, #32]
 80189de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80189e0:	4628      	mov	r0, r5
 80189e2:	47b0      	blx	r6
 80189e4:	2800      	cmp	r0, #0
 80189e6:	dc06      	bgt.n	80189f6 <__sflush_r+0xfe>
 80189e8:	89a3      	ldrh	r3, [r4, #12]
 80189ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189ee:	81a3      	strh	r3, [r4, #12]
 80189f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80189f4:	e78e      	b.n	8018914 <__sflush_r+0x1c>
 80189f6:	4407      	add	r7, r0
 80189f8:	eba8 0800 	sub.w	r8, r8, r0
 80189fc:	e7e9      	b.n	80189d2 <__sflush_r+0xda>
 80189fe:	bf00      	nop
 8018a00:	20400001 	.word	0x20400001

08018a04 <_fflush_r>:
 8018a04:	b538      	push	{r3, r4, r5, lr}
 8018a06:	690b      	ldr	r3, [r1, #16]
 8018a08:	4605      	mov	r5, r0
 8018a0a:	460c      	mov	r4, r1
 8018a0c:	b1db      	cbz	r3, 8018a46 <_fflush_r+0x42>
 8018a0e:	b118      	cbz	r0, 8018a18 <_fflush_r+0x14>
 8018a10:	6983      	ldr	r3, [r0, #24]
 8018a12:	b90b      	cbnz	r3, 8018a18 <_fflush_r+0x14>
 8018a14:	f000 f860 	bl	8018ad8 <__sinit>
 8018a18:	4b0c      	ldr	r3, [pc, #48]	; (8018a4c <_fflush_r+0x48>)
 8018a1a:	429c      	cmp	r4, r3
 8018a1c:	d109      	bne.n	8018a32 <_fflush_r+0x2e>
 8018a1e:	686c      	ldr	r4, [r5, #4]
 8018a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a24:	b17b      	cbz	r3, 8018a46 <_fflush_r+0x42>
 8018a26:	4621      	mov	r1, r4
 8018a28:	4628      	mov	r0, r5
 8018a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a2e:	f7ff bf63 	b.w	80188f8 <__sflush_r>
 8018a32:	4b07      	ldr	r3, [pc, #28]	; (8018a50 <_fflush_r+0x4c>)
 8018a34:	429c      	cmp	r4, r3
 8018a36:	d101      	bne.n	8018a3c <_fflush_r+0x38>
 8018a38:	68ac      	ldr	r4, [r5, #8]
 8018a3a:	e7f1      	b.n	8018a20 <_fflush_r+0x1c>
 8018a3c:	4b05      	ldr	r3, [pc, #20]	; (8018a54 <_fflush_r+0x50>)
 8018a3e:	429c      	cmp	r4, r3
 8018a40:	bf08      	it	eq
 8018a42:	68ec      	ldreq	r4, [r5, #12]
 8018a44:	e7ec      	b.n	8018a20 <_fflush_r+0x1c>
 8018a46:	2000      	movs	r0, #0
 8018a48:	bd38      	pop	{r3, r4, r5, pc}
 8018a4a:	bf00      	nop
 8018a4c:	08019fc8 	.word	0x08019fc8
 8018a50:	08019fe8 	.word	0x08019fe8
 8018a54:	08019fa8 	.word	0x08019fa8

08018a58 <std>:
 8018a58:	2300      	movs	r3, #0
 8018a5a:	b510      	push	{r4, lr}
 8018a5c:	4604      	mov	r4, r0
 8018a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8018a62:	6083      	str	r3, [r0, #8]
 8018a64:	8181      	strh	r1, [r0, #12]
 8018a66:	6643      	str	r3, [r0, #100]	; 0x64
 8018a68:	81c2      	strh	r2, [r0, #14]
 8018a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a6e:	6183      	str	r3, [r0, #24]
 8018a70:	4619      	mov	r1, r3
 8018a72:	2208      	movs	r2, #8
 8018a74:	305c      	adds	r0, #92	; 0x5c
 8018a76:	f7ff fcee 	bl	8018456 <memset>
 8018a7a:	4b05      	ldr	r3, [pc, #20]	; (8018a90 <std+0x38>)
 8018a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8018a7e:	4b05      	ldr	r3, [pc, #20]	; (8018a94 <std+0x3c>)
 8018a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a82:	4b05      	ldr	r3, [pc, #20]	; (8018a98 <std+0x40>)
 8018a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a86:	4b05      	ldr	r3, [pc, #20]	; (8018a9c <std+0x44>)
 8018a88:	6224      	str	r4, [r4, #32]
 8018a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8018a8c:	bd10      	pop	{r4, pc}
 8018a8e:	bf00      	nop
 8018a90:	080194ed 	.word	0x080194ed
 8018a94:	0801950f 	.word	0x0801950f
 8018a98:	08019547 	.word	0x08019547
 8018a9c:	0801956b 	.word	0x0801956b

08018aa0 <_cleanup_r>:
 8018aa0:	4901      	ldr	r1, [pc, #4]	; (8018aa8 <_cleanup_r+0x8>)
 8018aa2:	f000 b885 	b.w	8018bb0 <_fwalk_reent>
 8018aa6:	bf00      	nop
 8018aa8:	08018a05 	.word	0x08018a05

08018aac <__sfmoreglue>:
 8018aac:	b570      	push	{r4, r5, r6, lr}
 8018aae:	1e4a      	subs	r2, r1, #1
 8018ab0:	2568      	movs	r5, #104	; 0x68
 8018ab2:	4355      	muls	r5, r2
 8018ab4:	460e      	mov	r6, r1
 8018ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018aba:	f7ff fd23 	bl	8018504 <_malloc_r>
 8018abe:	4604      	mov	r4, r0
 8018ac0:	b140      	cbz	r0, 8018ad4 <__sfmoreglue+0x28>
 8018ac2:	2100      	movs	r1, #0
 8018ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8018ac8:	300c      	adds	r0, #12
 8018aca:	60a0      	str	r0, [r4, #8]
 8018acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018ad0:	f7ff fcc1 	bl	8018456 <memset>
 8018ad4:	4620      	mov	r0, r4
 8018ad6:	bd70      	pop	{r4, r5, r6, pc}

08018ad8 <__sinit>:
 8018ad8:	6983      	ldr	r3, [r0, #24]
 8018ada:	b510      	push	{r4, lr}
 8018adc:	4604      	mov	r4, r0
 8018ade:	bb33      	cbnz	r3, 8018b2e <__sinit+0x56>
 8018ae0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018ae4:	6503      	str	r3, [r0, #80]	; 0x50
 8018ae6:	4b12      	ldr	r3, [pc, #72]	; (8018b30 <__sinit+0x58>)
 8018ae8:	4a12      	ldr	r2, [pc, #72]	; (8018b34 <__sinit+0x5c>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	6282      	str	r2, [r0, #40]	; 0x28
 8018aee:	4298      	cmp	r0, r3
 8018af0:	bf04      	itt	eq
 8018af2:	2301      	moveq	r3, #1
 8018af4:	6183      	streq	r3, [r0, #24]
 8018af6:	f000 f81f 	bl	8018b38 <__sfp>
 8018afa:	6060      	str	r0, [r4, #4]
 8018afc:	4620      	mov	r0, r4
 8018afe:	f000 f81b 	bl	8018b38 <__sfp>
 8018b02:	60a0      	str	r0, [r4, #8]
 8018b04:	4620      	mov	r0, r4
 8018b06:	f000 f817 	bl	8018b38 <__sfp>
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	60e0      	str	r0, [r4, #12]
 8018b0e:	2104      	movs	r1, #4
 8018b10:	6860      	ldr	r0, [r4, #4]
 8018b12:	f7ff ffa1 	bl	8018a58 <std>
 8018b16:	2201      	movs	r2, #1
 8018b18:	2109      	movs	r1, #9
 8018b1a:	68a0      	ldr	r0, [r4, #8]
 8018b1c:	f7ff ff9c 	bl	8018a58 <std>
 8018b20:	2202      	movs	r2, #2
 8018b22:	2112      	movs	r1, #18
 8018b24:	68e0      	ldr	r0, [r4, #12]
 8018b26:	f7ff ff97 	bl	8018a58 <std>
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	61a3      	str	r3, [r4, #24]
 8018b2e:	bd10      	pop	{r4, pc}
 8018b30:	08019fa4 	.word	0x08019fa4
 8018b34:	08018aa1 	.word	0x08018aa1

08018b38 <__sfp>:
 8018b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b3a:	4b1b      	ldr	r3, [pc, #108]	; (8018ba8 <__sfp+0x70>)
 8018b3c:	681e      	ldr	r6, [r3, #0]
 8018b3e:	69b3      	ldr	r3, [r6, #24]
 8018b40:	4607      	mov	r7, r0
 8018b42:	b913      	cbnz	r3, 8018b4a <__sfp+0x12>
 8018b44:	4630      	mov	r0, r6
 8018b46:	f7ff ffc7 	bl	8018ad8 <__sinit>
 8018b4a:	3648      	adds	r6, #72	; 0x48
 8018b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018b50:	3b01      	subs	r3, #1
 8018b52:	d503      	bpl.n	8018b5c <__sfp+0x24>
 8018b54:	6833      	ldr	r3, [r6, #0]
 8018b56:	b133      	cbz	r3, 8018b66 <__sfp+0x2e>
 8018b58:	6836      	ldr	r6, [r6, #0]
 8018b5a:	e7f7      	b.n	8018b4c <__sfp+0x14>
 8018b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018b60:	b16d      	cbz	r5, 8018b7e <__sfp+0x46>
 8018b62:	3468      	adds	r4, #104	; 0x68
 8018b64:	e7f4      	b.n	8018b50 <__sfp+0x18>
 8018b66:	2104      	movs	r1, #4
 8018b68:	4638      	mov	r0, r7
 8018b6a:	f7ff ff9f 	bl	8018aac <__sfmoreglue>
 8018b6e:	6030      	str	r0, [r6, #0]
 8018b70:	2800      	cmp	r0, #0
 8018b72:	d1f1      	bne.n	8018b58 <__sfp+0x20>
 8018b74:	230c      	movs	r3, #12
 8018b76:	603b      	str	r3, [r7, #0]
 8018b78:	4604      	mov	r4, r0
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b7e:	4b0b      	ldr	r3, [pc, #44]	; (8018bac <__sfp+0x74>)
 8018b80:	6665      	str	r5, [r4, #100]	; 0x64
 8018b82:	e9c4 5500 	strd	r5, r5, [r4]
 8018b86:	60a5      	str	r5, [r4, #8]
 8018b88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018b8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018b90:	2208      	movs	r2, #8
 8018b92:	4629      	mov	r1, r5
 8018b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018b98:	f7ff fc5d 	bl	8018456 <memset>
 8018b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018ba4:	e7e9      	b.n	8018b7a <__sfp+0x42>
 8018ba6:	bf00      	nop
 8018ba8:	08019fa4 	.word	0x08019fa4
 8018bac:	ffff0001 	.word	0xffff0001

08018bb0 <_fwalk_reent>:
 8018bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bb4:	4680      	mov	r8, r0
 8018bb6:	4689      	mov	r9, r1
 8018bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018bbc:	2600      	movs	r6, #0
 8018bbe:	b914      	cbnz	r4, 8018bc6 <_fwalk_reent+0x16>
 8018bc0:	4630      	mov	r0, r6
 8018bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018bca:	3f01      	subs	r7, #1
 8018bcc:	d501      	bpl.n	8018bd2 <_fwalk_reent+0x22>
 8018bce:	6824      	ldr	r4, [r4, #0]
 8018bd0:	e7f5      	b.n	8018bbe <_fwalk_reent+0xe>
 8018bd2:	89ab      	ldrh	r3, [r5, #12]
 8018bd4:	2b01      	cmp	r3, #1
 8018bd6:	d907      	bls.n	8018be8 <_fwalk_reent+0x38>
 8018bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018bdc:	3301      	adds	r3, #1
 8018bde:	d003      	beq.n	8018be8 <_fwalk_reent+0x38>
 8018be0:	4629      	mov	r1, r5
 8018be2:	4640      	mov	r0, r8
 8018be4:	47c8      	blx	r9
 8018be6:	4306      	orrs	r6, r0
 8018be8:	3568      	adds	r5, #104	; 0x68
 8018bea:	e7ee      	b.n	8018bca <_fwalk_reent+0x1a>

08018bec <__swhatbuf_r>:
 8018bec:	b570      	push	{r4, r5, r6, lr}
 8018bee:	460e      	mov	r6, r1
 8018bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bf4:	2900      	cmp	r1, #0
 8018bf6:	b096      	sub	sp, #88	; 0x58
 8018bf8:	4614      	mov	r4, r2
 8018bfa:	461d      	mov	r5, r3
 8018bfc:	da07      	bge.n	8018c0e <__swhatbuf_r+0x22>
 8018bfe:	2300      	movs	r3, #0
 8018c00:	602b      	str	r3, [r5, #0]
 8018c02:	89b3      	ldrh	r3, [r6, #12]
 8018c04:	061a      	lsls	r2, r3, #24
 8018c06:	d410      	bmi.n	8018c2a <__swhatbuf_r+0x3e>
 8018c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c0c:	e00e      	b.n	8018c2c <__swhatbuf_r+0x40>
 8018c0e:	466a      	mov	r2, sp
 8018c10:	f000 fcd2 	bl	80195b8 <_fstat_r>
 8018c14:	2800      	cmp	r0, #0
 8018c16:	dbf2      	blt.n	8018bfe <__swhatbuf_r+0x12>
 8018c18:	9a01      	ldr	r2, [sp, #4]
 8018c1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018c1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018c22:	425a      	negs	r2, r3
 8018c24:	415a      	adcs	r2, r3
 8018c26:	602a      	str	r2, [r5, #0]
 8018c28:	e7ee      	b.n	8018c08 <__swhatbuf_r+0x1c>
 8018c2a:	2340      	movs	r3, #64	; 0x40
 8018c2c:	2000      	movs	r0, #0
 8018c2e:	6023      	str	r3, [r4, #0]
 8018c30:	b016      	add	sp, #88	; 0x58
 8018c32:	bd70      	pop	{r4, r5, r6, pc}

08018c34 <__smakebuf_r>:
 8018c34:	898b      	ldrh	r3, [r1, #12]
 8018c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c38:	079d      	lsls	r5, r3, #30
 8018c3a:	4606      	mov	r6, r0
 8018c3c:	460c      	mov	r4, r1
 8018c3e:	d507      	bpl.n	8018c50 <__smakebuf_r+0x1c>
 8018c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c44:	6023      	str	r3, [r4, #0]
 8018c46:	6123      	str	r3, [r4, #16]
 8018c48:	2301      	movs	r3, #1
 8018c4a:	6163      	str	r3, [r4, #20]
 8018c4c:	b002      	add	sp, #8
 8018c4e:	bd70      	pop	{r4, r5, r6, pc}
 8018c50:	ab01      	add	r3, sp, #4
 8018c52:	466a      	mov	r2, sp
 8018c54:	f7ff ffca 	bl	8018bec <__swhatbuf_r>
 8018c58:	9900      	ldr	r1, [sp, #0]
 8018c5a:	4605      	mov	r5, r0
 8018c5c:	4630      	mov	r0, r6
 8018c5e:	f7ff fc51 	bl	8018504 <_malloc_r>
 8018c62:	b948      	cbnz	r0, 8018c78 <__smakebuf_r+0x44>
 8018c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c68:	059a      	lsls	r2, r3, #22
 8018c6a:	d4ef      	bmi.n	8018c4c <__smakebuf_r+0x18>
 8018c6c:	f023 0303 	bic.w	r3, r3, #3
 8018c70:	f043 0302 	orr.w	r3, r3, #2
 8018c74:	81a3      	strh	r3, [r4, #12]
 8018c76:	e7e3      	b.n	8018c40 <__smakebuf_r+0xc>
 8018c78:	4b0d      	ldr	r3, [pc, #52]	; (8018cb0 <__smakebuf_r+0x7c>)
 8018c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018c7c:	89a3      	ldrh	r3, [r4, #12]
 8018c7e:	6020      	str	r0, [r4, #0]
 8018c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c84:	81a3      	strh	r3, [r4, #12]
 8018c86:	9b00      	ldr	r3, [sp, #0]
 8018c88:	6163      	str	r3, [r4, #20]
 8018c8a:	9b01      	ldr	r3, [sp, #4]
 8018c8c:	6120      	str	r0, [r4, #16]
 8018c8e:	b15b      	cbz	r3, 8018ca8 <__smakebuf_r+0x74>
 8018c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c94:	4630      	mov	r0, r6
 8018c96:	f000 fca1 	bl	80195dc <_isatty_r>
 8018c9a:	b128      	cbz	r0, 8018ca8 <__smakebuf_r+0x74>
 8018c9c:	89a3      	ldrh	r3, [r4, #12]
 8018c9e:	f023 0303 	bic.w	r3, r3, #3
 8018ca2:	f043 0301 	orr.w	r3, r3, #1
 8018ca6:	81a3      	strh	r3, [r4, #12]
 8018ca8:	89a3      	ldrh	r3, [r4, #12]
 8018caa:	431d      	orrs	r5, r3
 8018cac:	81a5      	strh	r5, [r4, #12]
 8018cae:	e7cd      	b.n	8018c4c <__smakebuf_r+0x18>
 8018cb0:	08018aa1 	.word	0x08018aa1

08018cb4 <__malloc_lock>:
 8018cb4:	4770      	bx	lr

08018cb6 <__malloc_unlock>:
 8018cb6:	4770      	bx	lr

08018cb8 <__ssputs_r>:
 8018cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cbc:	688e      	ldr	r6, [r1, #8]
 8018cbe:	429e      	cmp	r6, r3
 8018cc0:	4682      	mov	sl, r0
 8018cc2:	460c      	mov	r4, r1
 8018cc4:	4690      	mov	r8, r2
 8018cc6:	4699      	mov	r9, r3
 8018cc8:	d837      	bhi.n	8018d3a <__ssputs_r+0x82>
 8018cca:	898a      	ldrh	r2, [r1, #12]
 8018ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018cd0:	d031      	beq.n	8018d36 <__ssputs_r+0x7e>
 8018cd2:	6825      	ldr	r5, [r4, #0]
 8018cd4:	6909      	ldr	r1, [r1, #16]
 8018cd6:	1a6f      	subs	r7, r5, r1
 8018cd8:	6965      	ldr	r5, [r4, #20]
 8018cda:	2302      	movs	r3, #2
 8018cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ce0:	fb95 f5f3 	sdiv	r5, r5, r3
 8018ce4:	f109 0301 	add.w	r3, r9, #1
 8018ce8:	443b      	add	r3, r7
 8018cea:	429d      	cmp	r5, r3
 8018cec:	bf38      	it	cc
 8018cee:	461d      	movcc	r5, r3
 8018cf0:	0553      	lsls	r3, r2, #21
 8018cf2:	d530      	bpl.n	8018d56 <__ssputs_r+0x9e>
 8018cf4:	4629      	mov	r1, r5
 8018cf6:	f7ff fc05 	bl	8018504 <_malloc_r>
 8018cfa:	4606      	mov	r6, r0
 8018cfc:	b950      	cbnz	r0, 8018d14 <__ssputs_r+0x5c>
 8018cfe:	230c      	movs	r3, #12
 8018d00:	f8ca 3000 	str.w	r3, [sl]
 8018d04:	89a3      	ldrh	r3, [r4, #12]
 8018d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d0a:	81a3      	strh	r3, [r4, #12]
 8018d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d14:	463a      	mov	r2, r7
 8018d16:	6921      	ldr	r1, [r4, #16]
 8018d18:	f7ff fb92 	bl	8018440 <memcpy>
 8018d1c:	89a3      	ldrh	r3, [r4, #12]
 8018d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d26:	81a3      	strh	r3, [r4, #12]
 8018d28:	6126      	str	r6, [r4, #16]
 8018d2a:	6165      	str	r5, [r4, #20]
 8018d2c:	443e      	add	r6, r7
 8018d2e:	1bed      	subs	r5, r5, r7
 8018d30:	6026      	str	r6, [r4, #0]
 8018d32:	60a5      	str	r5, [r4, #8]
 8018d34:	464e      	mov	r6, r9
 8018d36:	454e      	cmp	r6, r9
 8018d38:	d900      	bls.n	8018d3c <__ssputs_r+0x84>
 8018d3a:	464e      	mov	r6, r9
 8018d3c:	4632      	mov	r2, r6
 8018d3e:	4641      	mov	r1, r8
 8018d40:	6820      	ldr	r0, [r4, #0]
 8018d42:	f000 fc6d 	bl	8019620 <memmove>
 8018d46:	68a3      	ldr	r3, [r4, #8]
 8018d48:	1b9b      	subs	r3, r3, r6
 8018d4a:	60a3      	str	r3, [r4, #8]
 8018d4c:	6823      	ldr	r3, [r4, #0]
 8018d4e:	441e      	add	r6, r3
 8018d50:	6026      	str	r6, [r4, #0]
 8018d52:	2000      	movs	r0, #0
 8018d54:	e7dc      	b.n	8018d10 <__ssputs_r+0x58>
 8018d56:	462a      	mov	r2, r5
 8018d58:	f000 fc7b 	bl	8019652 <_realloc_r>
 8018d5c:	4606      	mov	r6, r0
 8018d5e:	2800      	cmp	r0, #0
 8018d60:	d1e2      	bne.n	8018d28 <__ssputs_r+0x70>
 8018d62:	6921      	ldr	r1, [r4, #16]
 8018d64:	4650      	mov	r0, sl
 8018d66:	f7ff fb7f 	bl	8018468 <_free_r>
 8018d6a:	e7c8      	b.n	8018cfe <__ssputs_r+0x46>

08018d6c <_svfiprintf_r>:
 8018d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d70:	461d      	mov	r5, r3
 8018d72:	898b      	ldrh	r3, [r1, #12]
 8018d74:	061f      	lsls	r7, r3, #24
 8018d76:	b09d      	sub	sp, #116	; 0x74
 8018d78:	4680      	mov	r8, r0
 8018d7a:	460c      	mov	r4, r1
 8018d7c:	4616      	mov	r6, r2
 8018d7e:	d50f      	bpl.n	8018da0 <_svfiprintf_r+0x34>
 8018d80:	690b      	ldr	r3, [r1, #16]
 8018d82:	b96b      	cbnz	r3, 8018da0 <_svfiprintf_r+0x34>
 8018d84:	2140      	movs	r1, #64	; 0x40
 8018d86:	f7ff fbbd 	bl	8018504 <_malloc_r>
 8018d8a:	6020      	str	r0, [r4, #0]
 8018d8c:	6120      	str	r0, [r4, #16]
 8018d8e:	b928      	cbnz	r0, 8018d9c <_svfiprintf_r+0x30>
 8018d90:	230c      	movs	r3, #12
 8018d92:	f8c8 3000 	str.w	r3, [r8]
 8018d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d9a:	e0c8      	b.n	8018f2e <_svfiprintf_r+0x1c2>
 8018d9c:	2340      	movs	r3, #64	; 0x40
 8018d9e:	6163      	str	r3, [r4, #20]
 8018da0:	2300      	movs	r3, #0
 8018da2:	9309      	str	r3, [sp, #36]	; 0x24
 8018da4:	2320      	movs	r3, #32
 8018da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018daa:	2330      	movs	r3, #48	; 0x30
 8018dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018db0:	9503      	str	r5, [sp, #12]
 8018db2:	f04f 0b01 	mov.w	fp, #1
 8018db6:	4637      	mov	r7, r6
 8018db8:	463d      	mov	r5, r7
 8018dba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018dbe:	b10b      	cbz	r3, 8018dc4 <_svfiprintf_r+0x58>
 8018dc0:	2b25      	cmp	r3, #37	; 0x25
 8018dc2:	d13e      	bne.n	8018e42 <_svfiprintf_r+0xd6>
 8018dc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8018dc8:	d00b      	beq.n	8018de2 <_svfiprintf_r+0x76>
 8018dca:	4653      	mov	r3, sl
 8018dcc:	4632      	mov	r2, r6
 8018dce:	4621      	mov	r1, r4
 8018dd0:	4640      	mov	r0, r8
 8018dd2:	f7ff ff71 	bl	8018cb8 <__ssputs_r>
 8018dd6:	3001      	adds	r0, #1
 8018dd8:	f000 80a4 	beq.w	8018f24 <_svfiprintf_r+0x1b8>
 8018ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dde:	4453      	add	r3, sl
 8018de0:	9309      	str	r3, [sp, #36]	; 0x24
 8018de2:	783b      	ldrb	r3, [r7, #0]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	f000 809d 	beq.w	8018f24 <_svfiprintf_r+0x1b8>
 8018dea:	2300      	movs	r3, #0
 8018dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018df4:	9304      	str	r3, [sp, #16]
 8018df6:	9307      	str	r3, [sp, #28]
 8018df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8018dfe:	462f      	mov	r7, r5
 8018e00:	2205      	movs	r2, #5
 8018e02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018e06:	4850      	ldr	r0, [pc, #320]	; (8018f48 <_svfiprintf_r+0x1dc>)
 8018e08:	f7e7 fa72 	bl	80002f0 <memchr>
 8018e0c:	9b04      	ldr	r3, [sp, #16]
 8018e0e:	b9d0      	cbnz	r0, 8018e46 <_svfiprintf_r+0xda>
 8018e10:	06d9      	lsls	r1, r3, #27
 8018e12:	bf44      	itt	mi
 8018e14:	2220      	movmi	r2, #32
 8018e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018e1a:	071a      	lsls	r2, r3, #28
 8018e1c:	bf44      	itt	mi
 8018e1e:	222b      	movmi	r2, #43	; 0x2b
 8018e20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018e24:	782a      	ldrb	r2, [r5, #0]
 8018e26:	2a2a      	cmp	r2, #42	; 0x2a
 8018e28:	d015      	beq.n	8018e56 <_svfiprintf_r+0xea>
 8018e2a:	9a07      	ldr	r2, [sp, #28]
 8018e2c:	462f      	mov	r7, r5
 8018e2e:	2000      	movs	r0, #0
 8018e30:	250a      	movs	r5, #10
 8018e32:	4639      	mov	r1, r7
 8018e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e38:	3b30      	subs	r3, #48	; 0x30
 8018e3a:	2b09      	cmp	r3, #9
 8018e3c:	d94d      	bls.n	8018eda <_svfiprintf_r+0x16e>
 8018e3e:	b1b8      	cbz	r0, 8018e70 <_svfiprintf_r+0x104>
 8018e40:	e00f      	b.n	8018e62 <_svfiprintf_r+0xf6>
 8018e42:	462f      	mov	r7, r5
 8018e44:	e7b8      	b.n	8018db8 <_svfiprintf_r+0x4c>
 8018e46:	4a40      	ldr	r2, [pc, #256]	; (8018f48 <_svfiprintf_r+0x1dc>)
 8018e48:	1a80      	subs	r0, r0, r2
 8018e4a:	fa0b f000 	lsl.w	r0, fp, r0
 8018e4e:	4318      	orrs	r0, r3
 8018e50:	9004      	str	r0, [sp, #16]
 8018e52:	463d      	mov	r5, r7
 8018e54:	e7d3      	b.n	8018dfe <_svfiprintf_r+0x92>
 8018e56:	9a03      	ldr	r2, [sp, #12]
 8018e58:	1d11      	adds	r1, r2, #4
 8018e5a:	6812      	ldr	r2, [r2, #0]
 8018e5c:	9103      	str	r1, [sp, #12]
 8018e5e:	2a00      	cmp	r2, #0
 8018e60:	db01      	blt.n	8018e66 <_svfiprintf_r+0xfa>
 8018e62:	9207      	str	r2, [sp, #28]
 8018e64:	e004      	b.n	8018e70 <_svfiprintf_r+0x104>
 8018e66:	4252      	negs	r2, r2
 8018e68:	f043 0302 	orr.w	r3, r3, #2
 8018e6c:	9207      	str	r2, [sp, #28]
 8018e6e:	9304      	str	r3, [sp, #16]
 8018e70:	783b      	ldrb	r3, [r7, #0]
 8018e72:	2b2e      	cmp	r3, #46	; 0x2e
 8018e74:	d10c      	bne.n	8018e90 <_svfiprintf_r+0x124>
 8018e76:	787b      	ldrb	r3, [r7, #1]
 8018e78:	2b2a      	cmp	r3, #42	; 0x2a
 8018e7a:	d133      	bne.n	8018ee4 <_svfiprintf_r+0x178>
 8018e7c:	9b03      	ldr	r3, [sp, #12]
 8018e7e:	1d1a      	adds	r2, r3, #4
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	9203      	str	r2, [sp, #12]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	bfb8      	it	lt
 8018e88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018e8c:	3702      	adds	r7, #2
 8018e8e:	9305      	str	r3, [sp, #20]
 8018e90:	4d2e      	ldr	r5, [pc, #184]	; (8018f4c <_svfiprintf_r+0x1e0>)
 8018e92:	7839      	ldrb	r1, [r7, #0]
 8018e94:	2203      	movs	r2, #3
 8018e96:	4628      	mov	r0, r5
 8018e98:	f7e7 fa2a 	bl	80002f0 <memchr>
 8018e9c:	b138      	cbz	r0, 8018eae <_svfiprintf_r+0x142>
 8018e9e:	2340      	movs	r3, #64	; 0x40
 8018ea0:	1b40      	subs	r0, r0, r5
 8018ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8018ea6:	9b04      	ldr	r3, [sp, #16]
 8018ea8:	4303      	orrs	r3, r0
 8018eaa:	3701      	adds	r7, #1
 8018eac:	9304      	str	r3, [sp, #16]
 8018eae:	7839      	ldrb	r1, [r7, #0]
 8018eb0:	4827      	ldr	r0, [pc, #156]	; (8018f50 <_svfiprintf_r+0x1e4>)
 8018eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018eb6:	2206      	movs	r2, #6
 8018eb8:	1c7e      	adds	r6, r7, #1
 8018eba:	f7e7 fa19 	bl	80002f0 <memchr>
 8018ebe:	2800      	cmp	r0, #0
 8018ec0:	d038      	beq.n	8018f34 <_svfiprintf_r+0x1c8>
 8018ec2:	4b24      	ldr	r3, [pc, #144]	; (8018f54 <_svfiprintf_r+0x1e8>)
 8018ec4:	bb13      	cbnz	r3, 8018f0c <_svfiprintf_r+0x1a0>
 8018ec6:	9b03      	ldr	r3, [sp, #12]
 8018ec8:	3307      	adds	r3, #7
 8018eca:	f023 0307 	bic.w	r3, r3, #7
 8018ece:	3308      	adds	r3, #8
 8018ed0:	9303      	str	r3, [sp, #12]
 8018ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ed4:	444b      	add	r3, r9
 8018ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ed8:	e76d      	b.n	8018db6 <_svfiprintf_r+0x4a>
 8018eda:	fb05 3202 	mla	r2, r5, r2, r3
 8018ede:	2001      	movs	r0, #1
 8018ee0:	460f      	mov	r7, r1
 8018ee2:	e7a6      	b.n	8018e32 <_svfiprintf_r+0xc6>
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	3701      	adds	r7, #1
 8018ee8:	9305      	str	r3, [sp, #20]
 8018eea:	4619      	mov	r1, r3
 8018eec:	250a      	movs	r5, #10
 8018eee:	4638      	mov	r0, r7
 8018ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ef4:	3a30      	subs	r2, #48	; 0x30
 8018ef6:	2a09      	cmp	r2, #9
 8018ef8:	d903      	bls.n	8018f02 <_svfiprintf_r+0x196>
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d0c8      	beq.n	8018e90 <_svfiprintf_r+0x124>
 8018efe:	9105      	str	r1, [sp, #20]
 8018f00:	e7c6      	b.n	8018e90 <_svfiprintf_r+0x124>
 8018f02:	fb05 2101 	mla	r1, r5, r1, r2
 8018f06:	2301      	movs	r3, #1
 8018f08:	4607      	mov	r7, r0
 8018f0a:	e7f0      	b.n	8018eee <_svfiprintf_r+0x182>
 8018f0c:	ab03      	add	r3, sp, #12
 8018f0e:	9300      	str	r3, [sp, #0]
 8018f10:	4622      	mov	r2, r4
 8018f12:	4b11      	ldr	r3, [pc, #68]	; (8018f58 <_svfiprintf_r+0x1ec>)
 8018f14:	a904      	add	r1, sp, #16
 8018f16:	4640      	mov	r0, r8
 8018f18:	f3af 8000 	nop.w
 8018f1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8018f20:	4681      	mov	r9, r0
 8018f22:	d1d6      	bne.n	8018ed2 <_svfiprintf_r+0x166>
 8018f24:	89a3      	ldrh	r3, [r4, #12]
 8018f26:	065b      	lsls	r3, r3, #25
 8018f28:	f53f af35 	bmi.w	8018d96 <_svfiprintf_r+0x2a>
 8018f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f2e:	b01d      	add	sp, #116	; 0x74
 8018f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f34:	ab03      	add	r3, sp, #12
 8018f36:	9300      	str	r3, [sp, #0]
 8018f38:	4622      	mov	r2, r4
 8018f3a:	4b07      	ldr	r3, [pc, #28]	; (8018f58 <_svfiprintf_r+0x1ec>)
 8018f3c:	a904      	add	r1, sp, #16
 8018f3e:	4640      	mov	r0, r8
 8018f40:	f000 f9c2 	bl	80192c8 <_printf_i>
 8018f44:	e7ea      	b.n	8018f1c <_svfiprintf_r+0x1b0>
 8018f46:	bf00      	nop
 8018f48:	0801a008 	.word	0x0801a008
 8018f4c:	0801a00e 	.word	0x0801a00e
 8018f50:	0801a012 	.word	0x0801a012
 8018f54:	00000000 	.word	0x00000000
 8018f58:	08018cb9 	.word	0x08018cb9

08018f5c <__sfputc_r>:
 8018f5c:	6893      	ldr	r3, [r2, #8]
 8018f5e:	3b01      	subs	r3, #1
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	b410      	push	{r4}
 8018f64:	6093      	str	r3, [r2, #8]
 8018f66:	da08      	bge.n	8018f7a <__sfputc_r+0x1e>
 8018f68:	6994      	ldr	r4, [r2, #24]
 8018f6a:	42a3      	cmp	r3, r4
 8018f6c:	db01      	blt.n	8018f72 <__sfputc_r+0x16>
 8018f6e:	290a      	cmp	r1, #10
 8018f70:	d103      	bne.n	8018f7a <__sfputc_r+0x1e>
 8018f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f76:	f7ff bbff 	b.w	8018778 <__swbuf_r>
 8018f7a:	6813      	ldr	r3, [r2, #0]
 8018f7c:	1c58      	adds	r0, r3, #1
 8018f7e:	6010      	str	r0, [r2, #0]
 8018f80:	7019      	strb	r1, [r3, #0]
 8018f82:	4608      	mov	r0, r1
 8018f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f88:	4770      	bx	lr

08018f8a <__sfputs_r>:
 8018f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f8c:	4606      	mov	r6, r0
 8018f8e:	460f      	mov	r7, r1
 8018f90:	4614      	mov	r4, r2
 8018f92:	18d5      	adds	r5, r2, r3
 8018f94:	42ac      	cmp	r4, r5
 8018f96:	d101      	bne.n	8018f9c <__sfputs_r+0x12>
 8018f98:	2000      	movs	r0, #0
 8018f9a:	e007      	b.n	8018fac <__sfputs_r+0x22>
 8018f9c:	463a      	mov	r2, r7
 8018f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fa2:	4630      	mov	r0, r6
 8018fa4:	f7ff ffda 	bl	8018f5c <__sfputc_r>
 8018fa8:	1c43      	adds	r3, r0, #1
 8018faa:	d1f3      	bne.n	8018f94 <__sfputs_r+0xa>
 8018fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018fb0 <_vfiprintf_r>:
 8018fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb4:	460c      	mov	r4, r1
 8018fb6:	b09d      	sub	sp, #116	; 0x74
 8018fb8:	4617      	mov	r7, r2
 8018fba:	461d      	mov	r5, r3
 8018fbc:	4606      	mov	r6, r0
 8018fbe:	b118      	cbz	r0, 8018fc8 <_vfiprintf_r+0x18>
 8018fc0:	6983      	ldr	r3, [r0, #24]
 8018fc2:	b90b      	cbnz	r3, 8018fc8 <_vfiprintf_r+0x18>
 8018fc4:	f7ff fd88 	bl	8018ad8 <__sinit>
 8018fc8:	4b7c      	ldr	r3, [pc, #496]	; (80191bc <_vfiprintf_r+0x20c>)
 8018fca:	429c      	cmp	r4, r3
 8018fcc:	d158      	bne.n	8019080 <_vfiprintf_r+0xd0>
 8018fce:	6874      	ldr	r4, [r6, #4]
 8018fd0:	89a3      	ldrh	r3, [r4, #12]
 8018fd2:	0718      	lsls	r0, r3, #28
 8018fd4:	d55e      	bpl.n	8019094 <_vfiprintf_r+0xe4>
 8018fd6:	6923      	ldr	r3, [r4, #16]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d05b      	beq.n	8019094 <_vfiprintf_r+0xe4>
 8018fdc:	2300      	movs	r3, #0
 8018fde:	9309      	str	r3, [sp, #36]	; 0x24
 8018fe0:	2320      	movs	r3, #32
 8018fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018fe6:	2330      	movs	r3, #48	; 0x30
 8018fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018fec:	9503      	str	r5, [sp, #12]
 8018fee:	f04f 0b01 	mov.w	fp, #1
 8018ff2:	46b8      	mov	r8, r7
 8018ff4:	4645      	mov	r5, r8
 8018ff6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018ffa:	b10b      	cbz	r3, 8019000 <_vfiprintf_r+0x50>
 8018ffc:	2b25      	cmp	r3, #37	; 0x25
 8018ffe:	d154      	bne.n	80190aa <_vfiprintf_r+0xfa>
 8019000:	ebb8 0a07 	subs.w	sl, r8, r7
 8019004:	d00b      	beq.n	801901e <_vfiprintf_r+0x6e>
 8019006:	4653      	mov	r3, sl
 8019008:	463a      	mov	r2, r7
 801900a:	4621      	mov	r1, r4
 801900c:	4630      	mov	r0, r6
 801900e:	f7ff ffbc 	bl	8018f8a <__sfputs_r>
 8019012:	3001      	adds	r0, #1
 8019014:	f000 80c2 	beq.w	801919c <_vfiprintf_r+0x1ec>
 8019018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801901a:	4453      	add	r3, sl
 801901c:	9309      	str	r3, [sp, #36]	; 0x24
 801901e:	f898 3000 	ldrb.w	r3, [r8]
 8019022:	2b00      	cmp	r3, #0
 8019024:	f000 80ba 	beq.w	801919c <_vfiprintf_r+0x1ec>
 8019028:	2300      	movs	r3, #0
 801902a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801902e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019032:	9304      	str	r3, [sp, #16]
 8019034:	9307      	str	r3, [sp, #28]
 8019036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801903a:	931a      	str	r3, [sp, #104]	; 0x68
 801903c:	46a8      	mov	r8, r5
 801903e:	2205      	movs	r2, #5
 8019040:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019044:	485e      	ldr	r0, [pc, #376]	; (80191c0 <_vfiprintf_r+0x210>)
 8019046:	f7e7 f953 	bl	80002f0 <memchr>
 801904a:	9b04      	ldr	r3, [sp, #16]
 801904c:	bb78      	cbnz	r0, 80190ae <_vfiprintf_r+0xfe>
 801904e:	06d9      	lsls	r1, r3, #27
 8019050:	bf44      	itt	mi
 8019052:	2220      	movmi	r2, #32
 8019054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019058:	071a      	lsls	r2, r3, #28
 801905a:	bf44      	itt	mi
 801905c:	222b      	movmi	r2, #43	; 0x2b
 801905e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019062:	782a      	ldrb	r2, [r5, #0]
 8019064:	2a2a      	cmp	r2, #42	; 0x2a
 8019066:	d02a      	beq.n	80190be <_vfiprintf_r+0x10e>
 8019068:	9a07      	ldr	r2, [sp, #28]
 801906a:	46a8      	mov	r8, r5
 801906c:	2000      	movs	r0, #0
 801906e:	250a      	movs	r5, #10
 8019070:	4641      	mov	r1, r8
 8019072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019076:	3b30      	subs	r3, #48	; 0x30
 8019078:	2b09      	cmp	r3, #9
 801907a:	d969      	bls.n	8019150 <_vfiprintf_r+0x1a0>
 801907c:	b360      	cbz	r0, 80190d8 <_vfiprintf_r+0x128>
 801907e:	e024      	b.n	80190ca <_vfiprintf_r+0x11a>
 8019080:	4b50      	ldr	r3, [pc, #320]	; (80191c4 <_vfiprintf_r+0x214>)
 8019082:	429c      	cmp	r4, r3
 8019084:	d101      	bne.n	801908a <_vfiprintf_r+0xda>
 8019086:	68b4      	ldr	r4, [r6, #8]
 8019088:	e7a2      	b.n	8018fd0 <_vfiprintf_r+0x20>
 801908a:	4b4f      	ldr	r3, [pc, #316]	; (80191c8 <_vfiprintf_r+0x218>)
 801908c:	429c      	cmp	r4, r3
 801908e:	bf08      	it	eq
 8019090:	68f4      	ldreq	r4, [r6, #12]
 8019092:	e79d      	b.n	8018fd0 <_vfiprintf_r+0x20>
 8019094:	4621      	mov	r1, r4
 8019096:	4630      	mov	r0, r6
 8019098:	f7ff fbc0 	bl	801881c <__swsetup_r>
 801909c:	2800      	cmp	r0, #0
 801909e:	d09d      	beq.n	8018fdc <_vfiprintf_r+0x2c>
 80190a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190a4:	b01d      	add	sp, #116	; 0x74
 80190a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190aa:	46a8      	mov	r8, r5
 80190ac:	e7a2      	b.n	8018ff4 <_vfiprintf_r+0x44>
 80190ae:	4a44      	ldr	r2, [pc, #272]	; (80191c0 <_vfiprintf_r+0x210>)
 80190b0:	1a80      	subs	r0, r0, r2
 80190b2:	fa0b f000 	lsl.w	r0, fp, r0
 80190b6:	4318      	orrs	r0, r3
 80190b8:	9004      	str	r0, [sp, #16]
 80190ba:	4645      	mov	r5, r8
 80190bc:	e7be      	b.n	801903c <_vfiprintf_r+0x8c>
 80190be:	9a03      	ldr	r2, [sp, #12]
 80190c0:	1d11      	adds	r1, r2, #4
 80190c2:	6812      	ldr	r2, [r2, #0]
 80190c4:	9103      	str	r1, [sp, #12]
 80190c6:	2a00      	cmp	r2, #0
 80190c8:	db01      	blt.n	80190ce <_vfiprintf_r+0x11e>
 80190ca:	9207      	str	r2, [sp, #28]
 80190cc:	e004      	b.n	80190d8 <_vfiprintf_r+0x128>
 80190ce:	4252      	negs	r2, r2
 80190d0:	f043 0302 	orr.w	r3, r3, #2
 80190d4:	9207      	str	r2, [sp, #28]
 80190d6:	9304      	str	r3, [sp, #16]
 80190d8:	f898 3000 	ldrb.w	r3, [r8]
 80190dc:	2b2e      	cmp	r3, #46	; 0x2e
 80190de:	d10e      	bne.n	80190fe <_vfiprintf_r+0x14e>
 80190e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80190e4:	2b2a      	cmp	r3, #42	; 0x2a
 80190e6:	d138      	bne.n	801915a <_vfiprintf_r+0x1aa>
 80190e8:	9b03      	ldr	r3, [sp, #12]
 80190ea:	1d1a      	adds	r2, r3, #4
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	9203      	str	r2, [sp, #12]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	bfb8      	it	lt
 80190f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80190f8:	f108 0802 	add.w	r8, r8, #2
 80190fc:	9305      	str	r3, [sp, #20]
 80190fe:	4d33      	ldr	r5, [pc, #204]	; (80191cc <_vfiprintf_r+0x21c>)
 8019100:	f898 1000 	ldrb.w	r1, [r8]
 8019104:	2203      	movs	r2, #3
 8019106:	4628      	mov	r0, r5
 8019108:	f7e7 f8f2 	bl	80002f0 <memchr>
 801910c:	b140      	cbz	r0, 8019120 <_vfiprintf_r+0x170>
 801910e:	2340      	movs	r3, #64	; 0x40
 8019110:	1b40      	subs	r0, r0, r5
 8019112:	fa03 f000 	lsl.w	r0, r3, r0
 8019116:	9b04      	ldr	r3, [sp, #16]
 8019118:	4303      	orrs	r3, r0
 801911a:	f108 0801 	add.w	r8, r8, #1
 801911e:	9304      	str	r3, [sp, #16]
 8019120:	f898 1000 	ldrb.w	r1, [r8]
 8019124:	482a      	ldr	r0, [pc, #168]	; (80191d0 <_vfiprintf_r+0x220>)
 8019126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801912a:	2206      	movs	r2, #6
 801912c:	f108 0701 	add.w	r7, r8, #1
 8019130:	f7e7 f8de 	bl	80002f0 <memchr>
 8019134:	2800      	cmp	r0, #0
 8019136:	d037      	beq.n	80191a8 <_vfiprintf_r+0x1f8>
 8019138:	4b26      	ldr	r3, [pc, #152]	; (80191d4 <_vfiprintf_r+0x224>)
 801913a:	bb1b      	cbnz	r3, 8019184 <_vfiprintf_r+0x1d4>
 801913c:	9b03      	ldr	r3, [sp, #12]
 801913e:	3307      	adds	r3, #7
 8019140:	f023 0307 	bic.w	r3, r3, #7
 8019144:	3308      	adds	r3, #8
 8019146:	9303      	str	r3, [sp, #12]
 8019148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801914a:	444b      	add	r3, r9
 801914c:	9309      	str	r3, [sp, #36]	; 0x24
 801914e:	e750      	b.n	8018ff2 <_vfiprintf_r+0x42>
 8019150:	fb05 3202 	mla	r2, r5, r2, r3
 8019154:	2001      	movs	r0, #1
 8019156:	4688      	mov	r8, r1
 8019158:	e78a      	b.n	8019070 <_vfiprintf_r+0xc0>
 801915a:	2300      	movs	r3, #0
 801915c:	f108 0801 	add.w	r8, r8, #1
 8019160:	9305      	str	r3, [sp, #20]
 8019162:	4619      	mov	r1, r3
 8019164:	250a      	movs	r5, #10
 8019166:	4640      	mov	r0, r8
 8019168:	f810 2b01 	ldrb.w	r2, [r0], #1
 801916c:	3a30      	subs	r2, #48	; 0x30
 801916e:	2a09      	cmp	r2, #9
 8019170:	d903      	bls.n	801917a <_vfiprintf_r+0x1ca>
 8019172:	2b00      	cmp	r3, #0
 8019174:	d0c3      	beq.n	80190fe <_vfiprintf_r+0x14e>
 8019176:	9105      	str	r1, [sp, #20]
 8019178:	e7c1      	b.n	80190fe <_vfiprintf_r+0x14e>
 801917a:	fb05 2101 	mla	r1, r5, r1, r2
 801917e:	2301      	movs	r3, #1
 8019180:	4680      	mov	r8, r0
 8019182:	e7f0      	b.n	8019166 <_vfiprintf_r+0x1b6>
 8019184:	ab03      	add	r3, sp, #12
 8019186:	9300      	str	r3, [sp, #0]
 8019188:	4622      	mov	r2, r4
 801918a:	4b13      	ldr	r3, [pc, #76]	; (80191d8 <_vfiprintf_r+0x228>)
 801918c:	a904      	add	r1, sp, #16
 801918e:	4630      	mov	r0, r6
 8019190:	f3af 8000 	nop.w
 8019194:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8019198:	4681      	mov	r9, r0
 801919a:	d1d5      	bne.n	8019148 <_vfiprintf_r+0x198>
 801919c:	89a3      	ldrh	r3, [r4, #12]
 801919e:	065b      	lsls	r3, r3, #25
 80191a0:	f53f af7e 	bmi.w	80190a0 <_vfiprintf_r+0xf0>
 80191a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80191a6:	e77d      	b.n	80190a4 <_vfiprintf_r+0xf4>
 80191a8:	ab03      	add	r3, sp, #12
 80191aa:	9300      	str	r3, [sp, #0]
 80191ac:	4622      	mov	r2, r4
 80191ae:	4b0a      	ldr	r3, [pc, #40]	; (80191d8 <_vfiprintf_r+0x228>)
 80191b0:	a904      	add	r1, sp, #16
 80191b2:	4630      	mov	r0, r6
 80191b4:	f000 f888 	bl	80192c8 <_printf_i>
 80191b8:	e7ec      	b.n	8019194 <_vfiprintf_r+0x1e4>
 80191ba:	bf00      	nop
 80191bc:	08019fc8 	.word	0x08019fc8
 80191c0:	0801a008 	.word	0x0801a008
 80191c4:	08019fe8 	.word	0x08019fe8
 80191c8:	08019fa8 	.word	0x08019fa8
 80191cc:	0801a00e 	.word	0x0801a00e
 80191d0:	0801a012 	.word	0x0801a012
 80191d4:	00000000 	.word	0x00000000
 80191d8:	08018f8b 	.word	0x08018f8b

080191dc <_printf_common>:
 80191dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191e0:	4691      	mov	r9, r2
 80191e2:	461f      	mov	r7, r3
 80191e4:	688a      	ldr	r2, [r1, #8]
 80191e6:	690b      	ldr	r3, [r1, #16]
 80191e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80191ec:	4293      	cmp	r3, r2
 80191ee:	bfb8      	it	lt
 80191f0:	4613      	movlt	r3, r2
 80191f2:	f8c9 3000 	str.w	r3, [r9]
 80191f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80191fa:	4606      	mov	r6, r0
 80191fc:	460c      	mov	r4, r1
 80191fe:	b112      	cbz	r2, 8019206 <_printf_common+0x2a>
 8019200:	3301      	adds	r3, #1
 8019202:	f8c9 3000 	str.w	r3, [r9]
 8019206:	6823      	ldr	r3, [r4, #0]
 8019208:	0699      	lsls	r1, r3, #26
 801920a:	bf42      	ittt	mi
 801920c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019210:	3302      	addmi	r3, #2
 8019212:	f8c9 3000 	strmi.w	r3, [r9]
 8019216:	6825      	ldr	r5, [r4, #0]
 8019218:	f015 0506 	ands.w	r5, r5, #6
 801921c:	d107      	bne.n	801922e <_printf_common+0x52>
 801921e:	f104 0a19 	add.w	sl, r4, #25
 8019222:	68e3      	ldr	r3, [r4, #12]
 8019224:	f8d9 2000 	ldr.w	r2, [r9]
 8019228:	1a9b      	subs	r3, r3, r2
 801922a:	42ab      	cmp	r3, r5
 801922c:	dc28      	bgt.n	8019280 <_printf_common+0xa4>
 801922e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019232:	6822      	ldr	r2, [r4, #0]
 8019234:	3300      	adds	r3, #0
 8019236:	bf18      	it	ne
 8019238:	2301      	movne	r3, #1
 801923a:	0692      	lsls	r2, r2, #26
 801923c:	d42d      	bmi.n	801929a <_printf_common+0xbe>
 801923e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019242:	4639      	mov	r1, r7
 8019244:	4630      	mov	r0, r6
 8019246:	47c0      	blx	r8
 8019248:	3001      	adds	r0, #1
 801924a:	d020      	beq.n	801928e <_printf_common+0xb2>
 801924c:	6823      	ldr	r3, [r4, #0]
 801924e:	68e5      	ldr	r5, [r4, #12]
 8019250:	f8d9 2000 	ldr.w	r2, [r9]
 8019254:	f003 0306 	and.w	r3, r3, #6
 8019258:	2b04      	cmp	r3, #4
 801925a:	bf08      	it	eq
 801925c:	1aad      	subeq	r5, r5, r2
 801925e:	68a3      	ldr	r3, [r4, #8]
 8019260:	6922      	ldr	r2, [r4, #16]
 8019262:	bf0c      	ite	eq
 8019264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019268:	2500      	movne	r5, #0
 801926a:	4293      	cmp	r3, r2
 801926c:	bfc4      	itt	gt
 801926e:	1a9b      	subgt	r3, r3, r2
 8019270:	18ed      	addgt	r5, r5, r3
 8019272:	f04f 0900 	mov.w	r9, #0
 8019276:	341a      	adds	r4, #26
 8019278:	454d      	cmp	r5, r9
 801927a:	d11a      	bne.n	80192b2 <_printf_common+0xd6>
 801927c:	2000      	movs	r0, #0
 801927e:	e008      	b.n	8019292 <_printf_common+0xb6>
 8019280:	2301      	movs	r3, #1
 8019282:	4652      	mov	r2, sl
 8019284:	4639      	mov	r1, r7
 8019286:	4630      	mov	r0, r6
 8019288:	47c0      	blx	r8
 801928a:	3001      	adds	r0, #1
 801928c:	d103      	bne.n	8019296 <_printf_common+0xba>
 801928e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019296:	3501      	adds	r5, #1
 8019298:	e7c3      	b.n	8019222 <_printf_common+0x46>
 801929a:	18e1      	adds	r1, r4, r3
 801929c:	1c5a      	adds	r2, r3, #1
 801929e:	2030      	movs	r0, #48	; 0x30
 80192a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80192a4:	4422      	add	r2, r4
 80192a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80192aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80192ae:	3302      	adds	r3, #2
 80192b0:	e7c5      	b.n	801923e <_printf_common+0x62>
 80192b2:	2301      	movs	r3, #1
 80192b4:	4622      	mov	r2, r4
 80192b6:	4639      	mov	r1, r7
 80192b8:	4630      	mov	r0, r6
 80192ba:	47c0      	blx	r8
 80192bc:	3001      	adds	r0, #1
 80192be:	d0e6      	beq.n	801928e <_printf_common+0xb2>
 80192c0:	f109 0901 	add.w	r9, r9, #1
 80192c4:	e7d8      	b.n	8019278 <_printf_common+0x9c>
	...

080192c8 <_printf_i>:
 80192c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80192d0:	460c      	mov	r4, r1
 80192d2:	7e09      	ldrb	r1, [r1, #24]
 80192d4:	b085      	sub	sp, #20
 80192d6:	296e      	cmp	r1, #110	; 0x6e
 80192d8:	4617      	mov	r7, r2
 80192da:	4606      	mov	r6, r0
 80192dc:	4698      	mov	r8, r3
 80192de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80192e0:	f000 80b3 	beq.w	801944a <_printf_i+0x182>
 80192e4:	d822      	bhi.n	801932c <_printf_i+0x64>
 80192e6:	2963      	cmp	r1, #99	; 0x63
 80192e8:	d036      	beq.n	8019358 <_printf_i+0x90>
 80192ea:	d80a      	bhi.n	8019302 <_printf_i+0x3a>
 80192ec:	2900      	cmp	r1, #0
 80192ee:	f000 80b9 	beq.w	8019464 <_printf_i+0x19c>
 80192f2:	2958      	cmp	r1, #88	; 0x58
 80192f4:	f000 8083 	beq.w	80193fe <_printf_i+0x136>
 80192f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80192fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019300:	e032      	b.n	8019368 <_printf_i+0xa0>
 8019302:	2964      	cmp	r1, #100	; 0x64
 8019304:	d001      	beq.n	801930a <_printf_i+0x42>
 8019306:	2969      	cmp	r1, #105	; 0x69
 8019308:	d1f6      	bne.n	80192f8 <_printf_i+0x30>
 801930a:	6820      	ldr	r0, [r4, #0]
 801930c:	6813      	ldr	r3, [r2, #0]
 801930e:	0605      	lsls	r5, r0, #24
 8019310:	f103 0104 	add.w	r1, r3, #4
 8019314:	d52a      	bpl.n	801936c <_printf_i+0xa4>
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	6011      	str	r1, [r2, #0]
 801931a:	2b00      	cmp	r3, #0
 801931c:	da03      	bge.n	8019326 <_printf_i+0x5e>
 801931e:	222d      	movs	r2, #45	; 0x2d
 8019320:	425b      	negs	r3, r3
 8019322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019326:	486f      	ldr	r0, [pc, #444]	; (80194e4 <_printf_i+0x21c>)
 8019328:	220a      	movs	r2, #10
 801932a:	e039      	b.n	80193a0 <_printf_i+0xd8>
 801932c:	2973      	cmp	r1, #115	; 0x73
 801932e:	f000 809d 	beq.w	801946c <_printf_i+0x1a4>
 8019332:	d808      	bhi.n	8019346 <_printf_i+0x7e>
 8019334:	296f      	cmp	r1, #111	; 0x6f
 8019336:	d020      	beq.n	801937a <_printf_i+0xb2>
 8019338:	2970      	cmp	r1, #112	; 0x70
 801933a:	d1dd      	bne.n	80192f8 <_printf_i+0x30>
 801933c:	6823      	ldr	r3, [r4, #0]
 801933e:	f043 0320 	orr.w	r3, r3, #32
 8019342:	6023      	str	r3, [r4, #0]
 8019344:	e003      	b.n	801934e <_printf_i+0x86>
 8019346:	2975      	cmp	r1, #117	; 0x75
 8019348:	d017      	beq.n	801937a <_printf_i+0xb2>
 801934a:	2978      	cmp	r1, #120	; 0x78
 801934c:	d1d4      	bne.n	80192f8 <_printf_i+0x30>
 801934e:	2378      	movs	r3, #120	; 0x78
 8019350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019354:	4864      	ldr	r0, [pc, #400]	; (80194e8 <_printf_i+0x220>)
 8019356:	e055      	b.n	8019404 <_printf_i+0x13c>
 8019358:	6813      	ldr	r3, [r2, #0]
 801935a:	1d19      	adds	r1, r3, #4
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	6011      	str	r1, [r2, #0]
 8019360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019368:	2301      	movs	r3, #1
 801936a:	e08c      	b.n	8019486 <_printf_i+0x1be>
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	6011      	str	r1, [r2, #0]
 8019370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019374:	bf18      	it	ne
 8019376:	b21b      	sxthne	r3, r3
 8019378:	e7cf      	b.n	801931a <_printf_i+0x52>
 801937a:	6813      	ldr	r3, [r2, #0]
 801937c:	6825      	ldr	r5, [r4, #0]
 801937e:	1d18      	adds	r0, r3, #4
 8019380:	6010      	str	r0, [r2, #0]
 8019382:	0628      	lsls	r0, r5, #24
 8019384:	d501      	bpl.n	801938a <_printf_i+0xc2>
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	e002      	b.n	8019390 <_printf_i+0xc8>
 801938a:	0668      	lsls	r0, r5, #25
 801938c:	d5fb      	bpl.n	8019386 <_printf_i+0xbe>
 801938e:	881b      	ldrh	r3, [r3, #0]
 8019390:	4854      	ldr	r0, [pc, #336]	; (80194e4 <_printf_i+0x21c>)
 8019392:	296f      	cmp	r1, #111	; 0x6f
 8019394:	bf14      	ite	ne
 8019396:	220a      	movne	r2, #10
 8019398:	2208      	moveq	r2, #8
 801939a:	2100      	movs	r1, #0
 801939c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80193a0:	6865      	ldr	r5, [r4, #4]
 80193a2:	60a5      	str	r5, [r4, #8]
 80193a4:	2d00      	cmp	r5, #0
 80193a6:	f2c0 8095 	blt.w	80194d4 <_printf_i+0x20c>
 80193aa:	6821      	ldr	r1, [r4, #0]
 80193ac:	f021 0104 	bic.w	r1, r1, #4
 80193b0:	6021      	str	r1, [r4, #0]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d13d      	bne.n	8019432 <_printf_i+0x16a>
 80193b6:	2d00      	cmp	r5, #0
 80193b8:	f040 808e 	bne.w	80194d8 <_printf_i+0x210>
 80193bc:	4665      	mov	r5, ip
 80193be:	2a08      	cmp	r2, #8
 80193c0:	d10b      	bne.n	80193da <_printf_i+0x112>
 80193c2:	6823      	ldr	r3, [r4, #0]
 80193c4:	07db      	lsls	r3, r3, #31
 80193c6:	d508      	bpl.n	80193da <_printf_i+0x112>
 80193c8:	6923      	ldr	r3, [r4, #16]
 80193ca:	6862      	ldr	r2, [r4, #4]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	bfde      	ittt	le
 80193d0:	2330      	movle	r3, #48	; 0x30
 80193d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80193d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80193da:	ebac 0305 	sub.w	r3, ip, r5
 80193de:	6123      	str	r3, [r4, #16]
 80193e0:	f8cd 8000 	str.w	r8, [sp]
 80193e4:	463b      	mov	r3, r7
 80193e6:	aa03      	add	r2, sp, #12
 80193e8:	4621      	mov	r1, r4
 80193ea:	4630      	mov	r0, r6
 80193ec:	f7ff fef6 	bl	80191dc <_printf_common>
 80193f0:	3001      	adds	r0, #1
 80193f2:	d14d      	bne.n	8019490 <_printf_i+0x1c8>
 80193f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80193f8:	b005      	add	sp, #20
 80193fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193fe:	4839      	ldr	r0, [pc, #228]	; (80194e4 <_printf_i+0x21c>)
 8019400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019404:	6813      	ldr	r3, [r2, #0]
 8019406:	6821      	ldr	r1, [r4, #0]
 8019408:	1d1d      	adds	r5, r3, #4
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	6015      	str	r5, [r2, #0]
 801940e:	060a      	lsls	r2, r1, #24
 8019410:	d50b      	bpl.n	801942a <_printf_i+0x162>
 8019412:	07ca      	lsls	r2, r1, #31
 8019414:	bf44      	itt	mi
 8019416:	f041 0120 	orrmi.w	r1, r1, #32
 801941a:	6021      	strmi	r1, [r4, #0]
 801941c:	b91b      	cbnz	r3, 8019426 <_printf_i+0x15e>
 801941e:	6822      	ldr	r2, [r4, #0]
 8019420:	f022 0220 	bic.w	r2, r2, #32
 8019424:	6022      	str	r2, [r4, #0]
 8019426:	2210      	movs	r2, #16
 8019428:	e7b7      	b.n	801939a <_printf_i+0xd2>
 801942a:	064d      	lsls	r5, r1, #25
 801942c:	bf48      	it	mi
 801942e:	b29b      	uxthmi	r3, r3
 8019430:	e7ef      	b.n	8019412 <_printf_i+0x14a>
 8019432:	4665      	mov	r5, ip
 8019434:	fbb3 f1f2 	udiv	r1, r3, r2
 8019438:	fb02 3311 	mls	r3, r2, r1, r3
 801943c:	5cc3      	ldrb	r3, [r0, r3]
 801943e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019442:	460b      	mov	r3, r1
 8019444:	2900      	cmp	r1, #0
 8019446:	d1f5      	bne.n	8019434 <_printf_i+0x16c>
 8019448:	e7b9      	b.n	80193be <_printf_i+0xf6>
 801944a:	6813      	ldr	r3, [r2, #0]
 801944c:	6825      	ldr	r5, [r4, #0]
 801944e:	6961      	ldr	r1, [r4, #20]
 8019450:	1d18      	adds	r0, r3, #4
 8019452:	6010      	str	r0, [r2, #0]
 8019454:	0628      	lsls	r0, r5, #24
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	d501      	bpl.n	801945e <_printf_i+0x196>
 801945a:	6019      	str	r1, [r3, #0]
 801945c:	e002      	b.n	8019464 <_printf_i+0x19c>
 801945e:	066a      	lsls	r2, r5, #25
 8019460:	d5fb      	bpl.n	801945a <_printf_i+0x192>
 8019462:	8019      	strh	r1, [r3, #0]
 8019464:	2300      	movs	r3, #0
 8019466:	6123      	str	r3, [r4, #16]
 8019468:	4665      	mov	r5, ip
 801946a:	e7b9      	b.n	80193e0 <_printf_i+0x118>
 801946c:	6813      	ldr	r3, [r2, #0]
 801946e:	1d19      	adds	r1, r3, #4
 8019470:	6011      	str	r1, [r2, #0]
 8019472:	681d      	ldr	r5, [r3, #0]
 8019474:	6862      	ldr	r2, [r4, #4]
 8019476:	2100      	movs	r1, #0
 8019478:	4628      	mov	r0, r5
 801947a:	f7e6 ff39 	bl	80002f0 <memchr>
 801947e:	b108      	cbz	r0, 8019484 <_printf_i+0x1bc>
 8019480:	1b40      	subs	r0, r0, r5
 8019482:	6060      	str	r0, [r4, #4]
 8019484:	6863      	ldr	r3, [r4, #4]
 8019486:	6123      	str	r3, [r4, #16]
 8019488:	2300      	movs	r3, #0
 801948a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801948e:	e7a7      	b.n	80193e0 <_printf_i+0x118>
 8019490:	6923      	ldr	r3, [r4, #16]
 8019492:	462a      	mov	r2, r5
 8019494:	4639      	mov	r1, r7
 8019496:	4630      	mov	r0, r6
 8019498:	47c0      	blx	r8
 801949a:	3001      	adds	r0, #1
 801949c:	d0aa      	beq.n	80193f4 <_printf_i+0x12c>
 801949e:	6823      	ldr	r3, [r4, #0]
 80194a0:	079b      	lsls	r3, r3, #30
 80194a2:	d413      	bmi.n	80194cc <_printf_i+0x204>
 80194a4:	68e0      	ldr	r0, [r4, #12]
 80194a6:	9b03      	ldr	r3, [sp, #12]
 80194a8:	4298      	cmp	r0, r3
 80194aa:	bfb8      	it	lt
 80194ac:	4618      	movlt	r0, r3
 80194ae:	e7a3      	b.n	80193f8 <_printf_i+0x130>
 80194b0:	2301      	movs	r3, #1
 80194b2:	464a      	mov	r2, r9
 80194b4:	4639      	mov	r1, r7
 80194b6:	4630      	mov	r0, r6
 80194b8:	47c0      	blx	r8
 80194ba:	3001      	adds	r0, #1
 80194bc:	d09a      	beq.n	80193f4 <_printf_i+0x12c>
 80194be:	3501      	adds	r5, #1
 80194c0:	68e3      	ldr	r3, [r4, #12]
 80194c2:	9a03      	ldr	r2, [sp, #12]
 80194c4:	1a9b      	subs	r3, r3, r2
 80194c6:	42ab      	cmp	r3, r5
 80194c8:	dcf2      	bgt.n	80194b0 <_printf_i+0x1e8>
 80194ca:	e7eb      	b.n	80194a4 <_printf_i+0x1dc>
 80194cc:	2500      	movs	r5, #0
 80194ce:	f104 0919 	add.w	r9, r4, #25
 80194d2:	e7f5      	b.n	80194c0 <_printf_i+0x1f8>
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d1ac      	bne.n	8019432 <_printf_i+0x16a>
 80194d8:	7803      	ldrb	r3, [r0, #0]
 80194da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80194de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80194e2:	e76c      	b.n	80193be <_printf_i+0xf6>
 80194e4:	0801a019 	.word	0x0801a019
 80194e8:	0801a02a 	.word	0x0801a02a

080194ec <__sread>:
 80194ec:	b510      	push	{r4, lr}
 80194ee:	460c      	mov	r4, r1
 80194f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194f4:	f000 f8d4 	bl	80196a0 <_read_r>
 80194f8:	2800      	cmp	r0, #0
 80194fa:	bfab      	itete	ge
 80194fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80194fe:	89a3      	ldrhlt	r3, [r4, #12]
 8019500:	181b      	addge	r3, r3, r0
 8019502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019506:	bfac      	ite	ge
 8019508:	6563      	strge	r3, [r4, #84]	; 0x54
 801950a:	81a3      	strhlt	r3, [r4, #12]
 801950c:	bd10      	pop	{r4, pc}

0801950e <__swrite>:
 801950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019512:	461f      	mov	r7, r3
 8019514:	898b      	ldrh	r3, [r1, #12]
 8019516:	05db      	lsls	r3, r3, #23
 8019518:	4605      	mov	r5, r0
 801951a:	460c      	mov	r4, r1
 801951c:	4616      	mov	r6, r2
 801951e:	d505      	bpl.n	801952c <__swrite+0x1e>
 8019520:	2302      	movs	r3, #2
 8019522:	2200      	movs	r2, #0
 8019524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019528:	f000 f868 	bl	80195fc <_lseek_r>
 801952c:	89a3      	ldrh	r3, [r4, #12]
 801952e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019536:	81a3      	strh	r3, [r4, #12]
 8019538:	4632      	mov	r2, r6
 801953a:	463b      	mov	r3, r7
 801953c:	4628      	mov	r0, r5
 801953e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019542:	f000 b817 	b.w	8019574 <_write_r>

08019546 <__sseek>:
 8019546:	b510      	push	{r4, lr}
 8019548:	460c      	mov	r4, r1
 801954a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801954e:	f000 f855 	bl	80195fc <_lseek_r>
 8019552:	1c43      	adds	r3, r0, #1
 8019554:	89a3      	ldrh	r3, [r4, #12]
 8019556:	bf15      	itete	ne
 8019558:	6560      	strne	r0, [r4, #84]	; 0x54
 801955a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801955e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019562:	81a3      	strheq	r3, [r4, #12]
 8019564:	bf18      	it	ne
 8019566:	81a3      	strhne	r3, [r4, #12]
 8019568:	bd10      	pop	{r4, pc}

0801956a <__sclose>:
 801956a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801956e:	f000 b813 	b.w	8019598 <_close_r>
	...

08019574 <_write_r>:
 8019574:	b538      	push	{r3, r4, r5, lr}
 8019576:	4c07      	ldr	r4, [pc, #28]	; (8019594 <_write_r+0x20>)
 8019578:	4605      	mov	r5, r0
 801957a:	4608      	mov	r0, r1
 801957c:	4611      	mov	r1, r2
 801957e:	2200      	movs	r2, #0
 8019580:	6022      	str	r2, [r4, #0]
 8019582:	461a      	mov	r2, r3
 8019584:	f7e9 fb4f 	bl	8002c26 <_write>
 8019588:	1c43      	adds	r3, r0, #1
 801958a:	d102      	bne.n	8019592 <_write_r+0x1e>
 801958c:	6823      	ldr	r3, [r4, #0]
 801958e:	b103      	cbz	r3, 8019592 <_write_r+0x1e>
 8019590:	602b      	str	r3, [r5, #0]
 8019592:	bd38      	pop	{r3, r4, r5, pc}
 8019594:	24041c84 	.word	0x24041c84

08019598 <_close_r>:
 8019598:	b538      	push	{r3, r4, r5, lr}
 801959a:	4c06      	ldr	r4, [pc, #24]	; (80195b4 <_close_r+0x1c>)
 801959c:	2300      	movs	r3, #0
 801959e:	4605      	mov	r5, r0
 80195a0:	4608      	mov	r0, r1
 80195a2:	6023      	str	r3, [r4, #0]
 80195a4:	f7e9 fe4f 	bl	8003246 <_close>
 80195a8:	1c43      	adds	r3, r0, #1
 80195aa:	d102      	bne.n	80195b2 <_close_r+0x1a>
 80195ac:	6823      	ldr	r3, [r4, #0]
 80195ae:	b103      	cbz	r3, 80195b2 <_close_r+0x1a>
 80195b0:	602b      	str	r3, [r5, #0]
 80195b2:	bd38      	pop	{r3, r4, r5, pc}
 80195b4:	24041c84 	.word	0x24041c84

080195b8 <_fstat_r>:
 80195b8:	b538      	push	{r3, r4, r5, lr}
 80195ba:	4c07      	ldr	r4, [pc, #28]	; (80195d8 <_fstat_r+0x20>)
 80195bc:	2300      	movs	r3, #0
 80195be:	4605      	mov	r5, r0
 80195c0:	4608      	mov	r0, r1
 80195c2:	4611      	mov	r1, r2
 80195c4:	6023      	str	r3, [r4, #0]
 80195c6:	f7e9 fe4a 	bl	800325e <_fstat>
 80195ca:	1c43      	adds	r3, r0, #1
 80195cc:	d102      	bne.n	80195d4 <_fstat_r+0x1c>
 80195ce:	6823      	ldr	r3, [r4, #0]
 80195d0:	b103      	cbz	r3, 80195d4 <_fstat_r+0x1c>
 80195d2:	602b      	str	r3, [r5, #0]
 80195d4:	bd38      	pop	{r3, r4, r5, pc}
 80195d6:	bf00      	nop
 80195d8:	24041c84 	.word	0x24041c84

080195dc <_isatty_r>:
 80195dc:	b538      	push	{r3, r4, r5, lr}
 80195de:	4c06      	ldr	r4, [pc, #24]	; (80195f8 <_isatty_r+0x1c>)
 80195e0:	2300      	movs	r3, #0
 80195e2:	4605      	mov	r5, r0
 80195e4:	4608      	mov	r0, r1
 80195e6:	6023      	str	r3, [r4, #0]
 80195e8:	f7e9 fe49 	bl	800327e <_isatty>
 80195ec:	1c43      	adds	r3, r0, #1
 80195ee:	d102      	bne.n	80195f6 <_isatty_r+0x1a>
 80195f0:	6823      	ldr	r3, [r4, #0]
 80195f2:	b103      	cbz	r3, 80195f6 <_isatty_r+0x1a>
 80195f4:	602b      	str	r3, [r5, #0]
 80195f6:	bd38      	pop	{r3, r4, r5, pc}
 80195f8:	24041c84 	.word	0x24041c84

080195fc <_lseek_r>:
 80195fc:	b538      	push	{r3, r4, r5, lr}
 80195fe:	4c07      	ldr	r4, [pc, #28]	; (801961c <_lseek_r+0x20>)
 8019600:	4605      	mov	r5, r0
 8019602:	4608      	mov	r0, r1
 8019604:	4611      	mov	r1, r2
 8019606:	2200      	movs	r2, #0
 8019608:	6022      	str	r2, [r4, #0]
 801960a:	461a      	mov	r2, r3
 801960c:	f7e9 fe42 	bl	8003294 <_lseek>
 8019610:	1c43      	adds	r3, r0, #1
 8019612:	d102      	bne.n	801961a <_lseek_r+0x1e>
 8019614:	6823      	ldr	r3, [r4, #0]
 8019616:	b103      	cbz	r3, 801961a <_lseek_r+0x1e>
 8019618:	602b      	str	r3, [r5, #0]
 801961a:	bd38      	pop	{r3, r4, r5, pc}
 801961c:	24041c84 	.word	0x24041c84

08019620 <memmove>:
 8019620:	4288      	cmp	r0, r1
 8019622:	b510      	push	{r4, lr}
 8019624:	eb01 0302 	add.w	r3, r1, r2
 8019628:	d807      	bhi.n	801963a <memmove+0x1a>
 801962a:	1e42      	subs	r2, r0, #1
 801962c:	4299      	cmp	r1, r3
 801962e:	d00a      	beq.n	8019646 <memmove+0x26>
 8019630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019634:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019638:	e7f8      	b.n	801962c <memmove+0xc>
 801963a:	4283      	cmp	r3, r0
 801963c:	d9f5      	bls.n	801962a <memmove+0xa>
 801963e:	1881      	adds	r1, r0, r2
 8019640:	1ad2      	subs	r2, r2, r3
 8019642:	42d3      	cmn	r3, r2
 8019644:	d100      	bne.n	8019648 <memmove+0x28>
 8019646:	bd10      	pop	{r4, pc}
 8019648:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801964c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019650:	e7f7      	b.n	8019642 <memmove+0x22>

08019652 <_realloc_r>:
 8019652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019654:	4607      	mov	r7, r0
 8019656:	4614      	mov	r4, r2
 8019658:	460e      	mov	r6, r1
 801965a:	b921      	cbnz	r1, 8019666 <_realloc_r+0x14>
 801965c:	4611      	mov	r1, r2
 801965e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019662:	f7fe bf4f 	b.w	8018504 <_malloc_r>
 8019666:	b922      	cbnz	r2, 8019672 <_realloc_r+0x20>
 8019668:	f7fe fefe 	bl	8018468 <_free_r>
 801966c:	4625      	mov	r5, r4
 801966e:	4628      	mov	r0, r5
 8019670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019672:	f000 f827 	bl	80196c4 <_malloc_usable_size_r>
 8019676:	42a0      	cmp	r0, r4
 8019678:	d20f      	bcs.n	801969a <_realloc_r+0x48>
 801967a:	4621      	mov	r1, r4
 801967c:	4638      	mov	r0, r7
 801967e:	f7fe ff41 	bl	8018504 <_malloc_r>
 8019682:	4605      	mov	r5, r0
 8019684:	2800      	cmp	r0, #0
 8019686:	d0f2      	beq.n	801966e <_realloc_r+0x1c>
 8019688:	4631      	mov	r1, r6
 801968a:	4622      	mov	r2, r4
 801968c:	f7fe fed8 	bl	8018440 <memcpy>
 8019690:	4631      	mov	r1, r6
 8019692:	4638      	mov	r0, r7
 8019694:	f7fe fee8 	bl	8018468 <_free_r>
 8019698:	e7e9      	b.n	801966e <_realloc_r+0x1c>
 801969a:	4635      	mov	r5, r6
 801969c:	e7e7      	b.n	801966e <_realloc_r+0x1c>
	...

080196a0 <_read_r>:
 80196a0:	b538      	push	{r3, r4, r5, lr}
 80196a2:	4c07      	ldr	r4, [pc, #28]	; (80196c0 <_read_r+0x20>)
 80196a4:	4605      	mov	r5, r0
 80196a6:	4608      	mov	r0, r1
 80196a8:	4611      	mov	r1, r2
 80196aa:	2200      	movs	r2, #0
 80196ac:	6022      	str	r2, [r4, #0]
 80196ae:	461a      	mov	r2, r3
 80196b0:	f7e9 fdac 	bl	800320c <_read>
 80196b4:	1c43      	adds	r3, r0, #1
 80196b6:	d102      	bne.n	80196be <_read_r+0x1e>
 80196b8:	6823      	ldr	r3, [r4, #0]
 80196ba:	b103      	cbz	r3, 80196be <_read_r+0x1e>
 80196bc:	602b      	str	r3, [r5, #0]
 80196be:	bd38      	pop	{r3, r4, r5, pc}
 80196c0:	24041c84 	.word	0x24041c84

080196c4 <_malloc_usable_size_r>:
 80196c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196c8:	1f18      	subs	r0, r3, #4
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	bfbc      	itt	lt
 80196ce:	580b      	ldrlt	r3, [r1, r0]
 80196d0:	18c0      	addlt	r0, r0, r3
 80196d2:	4770      	bx	lr

080196d4 <_init>:
 80196d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196d6:	bf00      	nop
 80196d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196da:	bc08      	pop	{r3}
 80196dc:	469e      	mov	lr, r3
 80196de:	4770      	bx	lr

080196e0 <_fini>:
 80196e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196e2:	bf00      	nop
 80196e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196e6:	bc08      	pop	{r3}
 80196e8:	469e      	mov	lr, r3
 80196ea:	4770      	bx	lr

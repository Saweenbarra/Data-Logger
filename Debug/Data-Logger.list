
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011078  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08011318  08011318  00021318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011528  08011528  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011528  08011528  00021528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011530  08011530  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011530  08011530  00021530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011534  08011534  00021534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  08011538  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a4  240001e8  08011720  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400238c  08011720  0003238c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000371bc  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005d2f  00000000  00000000  000673d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c70  00000000  00000000  0006d108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a28  00000000  00000000  0006ed78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003e696  00000000  00000000  000707a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d661  00000000  00000000  000aee36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016e6a7  00000000  00000000  000cc497  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0023ab3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008094  00000000  00000000  0023abbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011300 	.word	0x08011300

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08011300 	.word	0x08011300

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <gps_msg_config>:
#include <string.h>
#include <stdint.h>
#include <GPS.h>
#include "main.h"

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	; 0x78
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f7ff fe1f 	bl	80002e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d001      	beq.n	80006ac <gps_msg_config+0x1c>
 80006a8:	2301      	movs	r3, #1
 80006aa:	e052      	b.n	8000752 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80006ac:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <gps_msg_config+0xcc>)
 80006b8:	211f      	movs	r1, #31
 80006ba:	f00f fe09 	bl	80102d0 <sniprintf>

	int checksum_int = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80006c6:	e00b      	b.n	80006e0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80006c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d6:	4053      	eors	r3, r2
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006dc:	3301      	adds	r3, #1
 80006de:	66bb      	str	r3, [r7, #104]	; 0x68
 80006e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <gps_msg_config+0x64>
 80006ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dde9      	ble.n	80006c8 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80006f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80006f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <gps_msg_config+0xd0>)
 80006fc:	2107      	movs	r1, #7
 80006fe:	f00f fde7 	bl	80102d0 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000702:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000706:	f107 0014 	add.w	r0, r7, #20
 800070a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <gps_msg_config+0xd4>)
 8000714:	2129      	movs	r1, #41	; 0x29
 8000716:	f00f fddb 	bl	80102d0 <sniprintf>
	printf("\n\rSending: ");
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <gps_msg_config+0xd8>)
 800071c:	f00f fd9c 	bl	8010258 <iprintf>
	printf("%s", messagetosend);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <gps_msg_config+0xdc>)
 8000728:	f00f fd96 	bl	8010258 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd5 	bl	80002e0 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 0114 	add.w	r1, r7, #20
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f009 feaa 	bl	800a49a <HAL_UART_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <gps_msg_config+0xc0>
		Error_Handler();
 800074c:	f000 fd64 	bl	8001218 <Error_Handler>
	}
	return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3770      	adds	r7, #112	; 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08011318 	.word	0x08011318
 8000760:	08011330 	.word	0x08011330
 8000764:	08011338 	.word	0x08011338
 8000768:	08011340 	.word	0x08011340
 800076c:	0801134c 	.word	0x0801134c

08000770 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	817b      	strh	r3, [r7, #10]
 8000782:	460b      	mov	r3, r1
 8000784:	813b      	strh	r3, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800078a:	2306      	movs	r3, #6
 800078c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800078e:	23b5      	movs	r3, #181	; 0xb5
 8000790:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000792:	2362      	movs	r3, #98	; 0x62
 8000794:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000796:	2306      	movs	r3, #6
 8000798:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800079a:	2308      	movs	r3, #8
 800079c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800079e:	8bfb      	ldrh	r3, [r7, #30]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 80007a8:	897b      	ldrh	r3, [r7, #10]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 80007b2:	893b      	ldrh	r3, [r7, #8]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	e013      	b.n	8000800 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	4413      	add	r3, r2
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80007ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f4:	4413      	add	r3, r2
 80007f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	3301      	adds	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	dde8      	ble.n	80007d8 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800080a:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 800080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000810:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000812:	f107 0110 	add.w	r1, r7, #16
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	220e      	movs	r2, #14
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f009 fe3d 	bl	800a49a <HAL_UART_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <gps_rate_config+0xbe>
				Error_Handler();
 8000826:	f000 fcf7 	bl	8001218 <Error_Handler>
				return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <gps_rate_config+0xc0>
			}
		return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000844:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d013      	beq.n	8000878 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000850:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000854:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000858:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00b      	beq.n	8000878 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000860:	e000      	b.n	8000864 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000862:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000864:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f9      	beq.n	8000862 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800086e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_write>:
static void MX_UART8_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ffc7 	bl	8000838 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x16>
  return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f001 f83d 	bl	8001948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f8cf 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 fb91 	bl	8000ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d6:	f000 fb6f 	bl	8000fb8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80008da:	f000 fa5d 	bl	8000d98 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008de:	f00d f911 	bl	800db04 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80008e2:	f00e fee5 	bl	800f6b0 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80008e6:	f000 f98f 	bl	8000c08 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008ea:	f000 f9f1 	bl	8000cd0 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80008ee:	f000 facb 	bl	8000e88 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80008f2:	f000 fb15 	bl	8000f20 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80008f6:	f000 fa71 	bl	8000ddc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <main+0x14c>)
 8000902:	f003 fff9 	bl	80048f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_INT_GPIO_Port, GPS_INT_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090c:	4840      	ldr	r0, [pc, #256]	; (8000a10 <main+0x14c>)
 800090e:	f003 fff3 	bl	80048f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2101      	movs	r1, #1
 8000916:	483f      	ldr	r0, [pc, #252]	; (8000a14 <main+0x150>)
 8000918:	f003 ffee 	bl	80048f8 <HAL_GPIO_WritePin>


  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 800091c:	2246      	movs	r2, #70	; 0x46
 800091e:	493e      	ldr	r1, [pc, #248]	; (8000a18 <main+0x154>)
 8000920:	483e      	ldr	r0, [pc, #248]	; (8000a1c <main+0x158>)
 8000922:	f009 fe51 	bl	800a5c8 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);
 8000926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092a:	f001 f89f 	bl	8001a6c <HAL_Delay>
  uint16_t measRate = 100;
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	80fb      	strh	r3, [r7, #6]
  uint16_t navRate = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	80bb      	strh	r3, [r7, #4]
  uint16_t timeRef = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	807b      	strh	r3, [r7, #2]

  gps_rate_config(&huart3, measRate, navRate, timeRef);
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	88ba      	ldrh	r2, [r7, #4]
 800093e:	88f9      	ldrh	r1, [r7, #6]
 8000940:	4836      	ldr	r0, [pc, #216]	; (8000a1c <main+0x158>)
 8000942:	f7ff ff15 	bl	8000770 <gps_rate_config>

    gps_msg_config(&huart3, "DTM", 0);//ERROR
 8000946:	2200      	movs	r2, #0
 8000948:	4935      	ldr	r1, [pc, #212]	; (8000a20 <main+0x15c>)
 800094a:	4834      	ldr	r0, [pc, #208]	; (8000a1c <main+0x158>)
 800094c:	f7ff fea0 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GAQ", 0);
 8000950:	2200      	movs	r2, #0
 8000952:	4934      	ldr	r1, [pc, #208]	; (8000a24 <main+0x160>)
 8000954:	4831      	ldr	r0, [pc, #196]	; (8000a1c <main+0x158>)
 8000956:	f7ff fe9b 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GBQ", 0);
 800095a:	2200      	movs	r2, #0
 800095c:	4932      	ldr	r1, [pc, #200]	; (8000a28 <main+0x164>)
 800095e:	482f      	ldr	r0, [pc, #188]	; (8000a1c <main+0x158>)
 8000960:	f7ff fe96 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GBS", 0);//ERROR
 8000964:	2200      	movs	r2, #0
 8000966:	4931      	ldr	r1, [pc, #196]	; (8000a2c <main+0x168>)
 8000968:	482c      	ldr	r0, [pc, #176]	; (8000a1c <main+0x158>)
 800096a:	f7ff fe91 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GGA", 0);//ERROR
 800096e:	2200      	movs	r2, #0
 8000970:	492f      	ldr	r1, [pc, #188]	; (8000a30 <main+0x16c>)
 8000972:	482a      	ldr	r0, [pc, #168]	; (8000a1c <main+0x158>)
 8000974:	f7ff fe8c 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GLL", 0);//ERROR
 8000978:	2200      	movs	r2, #0
 800097a:	492e      	ldr	r1, [pc, #184]	; (8000a34 <main+0x170>)
 800097c:	4827      	ldr	r0, [pc, #156]	; (8000a1c <main+0x158>)
 800097e:	f7ff fe87 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GLQ", 0);
 8000982:	2200      	movs	r2, #0
 8000984:	492c      	ldr	r1, [pc, #176]	; (8000a38 <main+0x174>)
 8000986:	4825      	ldr	r0, [pc, #148]	; (8000a1c <main+0x158>)
 8000988:	f7ff fe82 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GNQ", 0);
 800098c:	2200      	movs	r2, #0
 800098e:	492b      	ldr	r1, [pc, #172]	; (8000a3c <main+0x178>)
 8000990:	4822      	ldr	r0, [pc, #136]	; (8000a1c <main+0x158>)
 8000992:	f7ff fe7d 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GNS", 0);//ERROR
 8000996:	2200      	movs	r2, #0
 8000998:	4929      	ldr	r1, [pc, #164]	; (8000a40 <main+0x17c>)
 800099a:	4820      	ldr	r0, [pc, #128]	; (8000a1c <main+0x158>)
 800099c:	f7ff fe78 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GPQ", 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	4928      	ldr	r1, [pc, #160]	; (8000a44 <main+0x180>)
 80009a4:	481d      	ldr	r0, [pc, #116]	; (8000a1c <main+0x158>)
 80009a6:	f7ff fe73 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GRS", 0);//ERROR
 80009aa:	2200      	movs	r2, #0
 80009ac:	4926      	ldr	r1, [pc, #152]	; (8000a48 <main+0x184>)
 80009ae:	481b      	ldr	r0, [pc, #108]	; (8000a1c <main+0x158>)
 80009b0:	f7ff fe6e 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GSA", 0);//ERROR
 80009b4:	2200      	movs	r2, #0
 80009b6:	4925      	ldr	r1, [pc, #148]	; (8000a4c <main+0x188>)
 80009b8:	4818      	ldr	r0, [pc, #96]	; (8000a1c <main+0x158>)
 80009ba:	f7ff fe69 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GST", 0);//ERROR
 80009be:	2200      	movs	r2, #0
 80009c0:	4923      	ldr	r1, [pc, #140]	; (8000a50 <main+0x18c>)
 80009c2:	4816      	ldr	r0, [pc, #88]	; (8000a1c <main+0x158>)
 80009c4:	f7ff fe64 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GSV", 0);//ERROR
 80009c8:	2200      	movs	r2, #0
 80009ca:	4922      	ldr	r1, [pc, #136]	; (8000a54 <main+0x190>)
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <main+0x158>)
 80009ce:	f7ff fe5f 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "RLM", 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	4920      	ldr	r1, [pc, #128]	; (8000a58 <main+0x194>)
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <main+0x158>)
 80009d8:	f7ff fe5a 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "RMC", 1);//ERROR
 80009dc:	2201      	movs	r2, #1
 80009de:	491f      	ldr	r1, [pc, #124]	; (8000a5c <main+0x198>)
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <main+0x158>)
 80009e2:	f7ff fe55 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "TXT", 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	491d      	ldr	r1, [pc, #116]	; (8000a60 <main+0x19c>)
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <main+0x158>)
 80009ec:	f7ff fe50 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "VLW", 0);//ERROR
 80009f0:	2200      	movs	r2, #0
 80009f2:	491c      	ldr	r1, [pc, #112]	; (8000a64 <main+0x1a0>)
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <main+0x158>)
 80009f6:	f7ff fe4b 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "VTG", 0);//ERROR
 80009fa:	2200      	movs	r2, #0
 80009fc:	491a      	ldr	r1, [pc, #104]	; (8000a68 <main+0x1a4>)
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <main+0x158>)
 8000a00:	f7ff fe46 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8000a04:	2200      	movs	r2, #0
 8000a06:	4919      	ldr	r1, [pc, #100]	; (8000a6c <main+0x1a8>)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <main+0x158>)
 8000a0a:	f7ff fe41 	bl	8000690 <gps_msg_config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <main+0x14a>
 8000a10:	58020c00 	.word	0x58020c00
 8000a14:	58020400 	.word	0x58020400
 8000a18:	240003a8 	.word	0x240003a8
 8000a1c:	2400029c 	.word	0x2400029c
 8000a20:	08011358 	.word	0x08011358
 8000a24:	0801135c 	.word	0x0801135c
 8000a28:	08011360 	.word	0x08011360
 8000a2c:	08011364 	.word	0x08011364
 8000a30:	08011368 	.word	0x08011368
 8000a34:	0801136c 	.word	0x0801136c
 8000a38:	08011370 	.word	0x08011370
 8000a3c:	08011374 	.word	0x08011374
 8000a40:	08011378 	.word	0x08011378
 8000a44:	0801137c 	.word	0x0801137c
 8000a48:	08011380 	.word	0x08011380
 8000a4c:	08011384 	.word	0x08011384
 8000a50:	08011388 	.word	0x08011388
 8000a54:	0801138c 	.word	0x0801138c
 8000a58:	08011390 	.word	0x08011390
 8000a5c:	08011394 	.word	0x08011394
 8000a60:	08011398 	.word	0x08011398
 8000a64:	0801139c 	.word	0x0801139c
 8000a68:	080113a0 	.word	0x080113a0
 8000a6c:	080113a4 	.word	0x080113a4

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0cc      	sub	sp, #304	; 0x130
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a7a:	224c      	movs	r2, #76	; 0x4c
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00f fb39 	bl	80100f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a88:	2220      	movs	r2, #32
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f00f fb32 	bl	80100f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4618      	mov	r0, r3
 8000a98:	23bc      	movs	r3, #188	; 0xbc
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f00f fb2a 	bl	80100f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f005 f938 	bl	8005d18 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	4b53      	ldr	r3, [pc, #332]	; (8000bfc <SystemClock_Config+0x18c>)
 8000ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab2:	4a52      	ldr	r2, [pc, #328]	; (8000bfc <SystemClock_Config+0x18c>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aba:	4b50      	ldr	r3, [pc, #320]	; (8000bfc <SystemClock_Config+0x18c>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	f003 0201 	and.w	r2, r3, #1
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	4b4e      	ldr	r3, [pc, #312]	; (8000c00 <SystemClock_Config+0x190>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ace:	4a4c      	ldr	r2, [pc, #304]	; (8000c00 <SystemClock_Config+0x190>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6193      	str	r3, [r2, #24]
 8000ad6:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <SystemClock_Config+0x190>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae6:	bf00      	nop
 8000ae8:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <SystemClock_Config+0x190>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af4:	d1f8      	bne.n	8000ae8 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000af6:	2303      	movs	r3, #3
 8000af8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000b22:	2330      	movs	r3, #48	; 0x30
 8000b24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f005 f92b 	bl	8005dac <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000b5c:	f000 fb5c 	bl	8001218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	233f      	movs	r3, #63	; 0x3f
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 fd18 	bl	80065cc <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000ba2:	f000 fb39 	bl	8001218 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <SystemClock_Config+0x194>)
 8000bac:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2200      	movs	r2, #0
 8000bcc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 f878 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x17e>
  {
    Error_Handler();
 8000bea:	f000 fb15 	bl	8001218 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000bee:	f005 f8cd 	bl	8005d8c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000bf2:	bf00      	nop
 8000bf4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	58000400 	.word	0x58000400
 8000c00:	58024800 	.word	0x58024800
 8000c04:	00059002 	.word	0x00059002

08000c08 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <MX_FDCAN1_Init+0xc4>)
 8000c10:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c92:	2204      	movs	r2, #4
 8000c94:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_FDCAN1_Init+0xc0>)
 8000cb6:	f003 f8ef 	bl	8003e98 <HAL_FDCAN_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000cc0:	f000 faaa 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	240003f0 	.word	0x240003f0
 8000ccc:	4000a000 	.word	0x4000a000

08000cd0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000cd4:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <MX_FDCAN2_Init+0xc4>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000cf2:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d42:	2204      	movs	r2, #4
 8000d44:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_FDCAN2_Init+0xc0>)
 8000d7e:	f003 f88b 	bl	8003e98 <HAL_FDCAN_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000d88:	f000 fa46 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	240005a4 	.word	0x240005a4
 8000d94:	4000a400 	.word	0x4000a400

08000d98 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <MX_SDMMC1_SD_Init+0x40>)
 8000da0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000db0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	24000328 	.word	0x24000328
 8000dd8:	52007000 	.word	0x52007000

08000ddc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <MX_SPI1_Init+0xa8>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000de8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_SPI1_Init+0xa4>)
 8000e6c:	f009 f9b2 	bl	800a1d4 <HAL_SPI_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e76:	f000 f9cf 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2400051c 	.word	0x2400051c
 8000e84:	40013000 	.word	0x40013000

08000e88 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_UART8_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_UART8_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_UART8_Init+0x90>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_UART8_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_UART8_Init+0x90>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_UART8_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_UART8_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ed2:	f009 fa92 	bl	800a3fa <HAL_UART_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000edc:	f000 f99c 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ee4:	f00a fc22 	bl	800b72c <HAL_UARTEx_SetTxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f000 f993 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <MX_UART8_Init+0x90>)
 8000ef6:	f00a fc57 	bl	800b7a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f000 f98a 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_UART8_Init+0x90>)
 8000f06:	f00a fbd8 	bl	800b6ba <HAL_UARTEx_DisableFifoMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f000 f982 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24000490 	.word	0x24000490
 8000f1c:	40007c00 	.word	0x40007c00

08000f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <MX_USART3_UART_Init+0x94>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f2c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f6a:	f009 fa46 	bl	800a3fa <HAL_UART_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f74:	f000 f950 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f7c:	f00a fbd6 	bl	800b72c <HAL_UARTEx_SetTxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f86:	f000 f947 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f8e:	f00a fc0b 	bl	800b7a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f000 f93e 	bl	8001218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f9e:	f00a fb8c 	bl	800b6ba <HAL_UARTEx_DisableFifoMode>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f000 f936 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2400029c 	.word	0x2400029c
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	200b      	movs	r0, #11
 8000fe2:	f000 fe4c 	bl	8001c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fe6:	200b      	movs	r0, #11
 8000fe8:	f000 fe63 	bl	8001cb2 <HAL_NVIC_EnableIRQ>

}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	58024400 	.word	0x58024400

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	4b6c      	ldr	r3, [pc, #432]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a6a      	ldr	r2, [pc, #424]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b68      	ldr	r3, [pc, #416]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a63      	ldr	r2, [pc, #396]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a5b      	ldr	r2, [pc, #364]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b55      	ldr	r3, [pc, #340]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a54      	ldr	r2, [pc, #336]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 800108e:	f043 0302 	orr.w	r3, r3, #2
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001096:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a4:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	4a45      	ldr	r2, [pc, #276]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <MX_GPIO_Init+0x1c8>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	210c      	movs	r1, #12
 80010c6:	483f      	ldr	r0, [pc, #252]	; (80011c4 <MX_GPIO_Init+0x1cc>)
 80010c8:	f003 fc16 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2103      	movs	r1, #3
 80010d0:	483d      	ldr	r0, [pc, #244]	; (80011c8 <MX_GPIO_Init+0x1d0>)
 80010d2:	f003 fc11 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2101      	movs	r1, #1
 80010da:	483c      	ldr	r0, [pc, #240]	; (80011cc <MX_GPIO_Init+0x1d4>)
 80010dc:	f003 fc0c 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e6:	483a      	ldr	r0, [pc, #232]	; (80011d0 <MX_GPIO_Init+0x1d8>)
 80010e8:	f003 fc06 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_INT_GPIO_Port, GPS_INT_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	4837      	ldr	r0, [pc, #220]	; (80011d0 <MX_GPIO_Init+0x1d8>)
 80010f4:	f003 fc00 	bl	80048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 80010f8:	230c      	movs	r3, #12
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	482d      	ldr	r0, [pc, #180]	; (80011c4 <MX_GPIO_Init+0x1cc>)
 8001110:	f003 fa2a 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8001114:	2303      	movs	r3, #3
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4827      	ldr	r0, [pc, #156]	; (80011c8 <MX_GPIO_Init+0x1d0>)
 800112c:	f003 fa1c 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8001130:	2304      	movs	r3, #4
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <MX_GPIO_Init+0x1dc>)
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4821      	ldr	r0, [pc, #132]	; (80011c8 <MX_GPIO_Init+0x1d0>)
 8001144:	f003 fa10 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	481b      	ldr	r0, [pc, #108]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001160:	f003 fa02 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8001164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_GPIO_Init+0x1dc>)
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_GPIO_Init+0x1cc>)
 800117a:	f003 f9f5 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_RST_Pin GPS_INT_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|GPS_INT_Pin;
 800117e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <MX_GPIO_Init+0x1d8>)
 8001198:	f003 f9e6 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 800119c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_GPIO_Init+0x1d0>)
 80011b2:	f003 f9d9 	bl	8004568 <HAL_GPIO_Init>

}
 80011b6:	bf00      	nop
 80011b8:	3730      	adds	r7, #48	; 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	58024400 	.word	0x58024400
 80011c4:	58021000 	.word	0x58021000
 80011c8:	58020000 	.word	0x58020000
 80011cc:	58020400 	.word	0x58020400
 80011d0:	58020c00 	.word	0x58020c00
 80011d4:	11110000 	.word	0x11110000

080011d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011e0:	2101      	movs	r1, #1
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_UART_RxCpltCallback+0x38>)
 80011e4:	f003 fba1 	bl	800492a <HAL_GPIO_TogglePin>
  //CDC_Transmit_FS(rxBuf, sizeof(rxBuf));
  for(int i=0; i<BUFFLENGTH; i++){
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e009      	b.n	8001202 <HAL_UART_RxCpltCallback+0x2a>
	  printf("%c",rxBuf[i]);
 80011ee:	4a09      	ldr	r2, [pc, #36]	; (8001214 <HAL_UART_RxCpltCallback+0x3c>)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00f f846 	bl	8010288 <putchar>
  for(int i=0; i<BUFFLENGTH; i++){
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b45      	cmp	r3, #69	; 0x45
 8001206:	ddf2      	ble.n	80011ee <HAL_UART_RxCpltCallback+0x16>
  /*
  for(int i=0; i<BUFFLENGTH; i++){
	  printf("%c", rxBuf[i]);
  }
	*/
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58020400 	.word	0x58020400
 8001214:	240003a8 	.word	0x240003a8

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121e:	e7fe      	b.n	800121e <Error_Handler+0x6>

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_MspInit+0x30>)
 8001228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_MspInit+0x30>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_MspInit+0x30>)
 8001238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	58024400 	.word	0x58024400

08001254 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a3d      	ldr	r2, [pc, #244]	; (8001368 <HAL_FDCAN_MspInit+0x114>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d138      	bne.n	80012e8 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_FDCAN_MspInit+0x118>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a3b      	ldr	r2, [pc, #236]	; (800136c <HAL_FDCAN_MspInit+0x118>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_FDCAN_MspInit+0x118>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10e      	bne.n	80012a6 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 800128a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800128e:	4a38      	ldr	r2, [pc, #224]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001298:	4b35      	ldr	r3, [pc, #212]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 800129a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a30      	ldr	r2, [pc, #192]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80012d6:	2309      	movs	r3, #9
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4824      	ldr	r0, [pc, #144]	; (8001374 <HAL_FDCAN_MspInit+0x120>)
 80012e2:	f003 f941 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80012e6:	e03b      	b.n	8001360 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a22      	ldr	r2, [pc, #136]	; (8001378 <HAL_FDCAN_MspInit+0x124>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d136      	bne.n	8001360 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <HAL_FDCAN_MspInit+0x118>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_FDCAN_MspInit+0x118>)
 80012fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_FDCAN_MspInit+0x118>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10e      	bne.n	8001322 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 8001306:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 8001316:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800131a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_FDCAN_MspInit+0x11c>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001340:	2360      	movs	r3, #96	; 0x60
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001350:	2309      	movs	r3, #9
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <HAL_FDCAN_MspInit+0x120>)
 800135c:	f003 f904 	bl	8004568 <HAL_GPIO_Init>
}
 8001360:	bf00      	nop
 8001362:	3730      	adds	r7, #48	; 0x30
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	4000a000 	.word	0x4000a000
 800136c:	24000204 	.word	0x24000204
 8001370:	58024400 	.word	0x58024400
 8001374:	58020400 	.word	0x58020400
 8001378:	4000a400 	.word	0x4000a400

0800137c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a2a      	ldr	r2, [pc, #168]	; (8001444 <HAL_SD_MspInit+0xc8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d14d      	bne.n	800143a <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013a4:	4a28      	ldr	r2, [pc, #160]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_SD_MspInit+0xcc>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013f8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800140a:	230c      	movs	r3, #12
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <HAL_SD_MspInit+0xd0>)
 8001416:	f003 f8a7 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800141a:	2304      	movs	r3, #4
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800142a:	230c      	movs	r3, #12
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <HAL_SD_MspInit+0xd4>)
 8001436:	f003 f897 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	; 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	52007000 	.word	0x52007000
 8001448:	58024400 	.word	0x58024400
 800144c:	58020800 	.word	0x58020800
 8001450:	58020c00 	.word	0x58020c00

08001454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <HAL_SPI_MspInit+0x88>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12d      	bne.n	80014d2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800147c:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 800147e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001482:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 8001488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800148c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_SPI_MspInit+0x8c>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014b2:	23e0      	movs	r3, #224	; 0xe0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c2:	2305      	movs	r3, #5
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_SPI_MspInit+0x90>)
 80014ce:	f003 f84b 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40013000 	.word	0x40013000
 80014e0:	58024400 	.word	0x58024400
 80014e4:	58020000 	.word	0x58020000

080014e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_UART_MspInit+0x14c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12e      	bne.n	8001568 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800150a:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <HAL_UART_MspInit+0x150>)
 800150c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001510:	4a49      	ldr	r2, [pc, #292]	; (8001638 <HAL_UART_MspInit+0x150>)
 8001512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001516:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_UART_MspInit+0x150>)
 800151c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001528:	4b43      	ldr	r3, [pc, #268]	; (8001638 <HAL_UART_MspInit+0x150>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	4a42      	ldr	r2, [pc, #264]	; (8001638 <HAL_UART_MspInit+0x150>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <HAL_UART_MspInit+0x150>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001546:	2303      	movs	r3, #3
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001556:	2308      	movs	r3, #8
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4836      	ldr	r0, [pc, #216]	; (800163c <HAL_UART_MspInit+0x154>)
 8001562:	f003 f801 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001566:	e061      	b.n	800162c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a34      	ldr	r2, [pc, #208]	; (8001640 <HAL_UART_MspInit+0x158>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d15c      	bne.n	800162c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_UART_MspInit+0x150>)
 8001574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001578:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <HAL_UART_MspInit+0x150>)
 800157a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_UART_MspInit+0x150>)
 8001584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_UART_MspInit+0x150>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	4a28      	ldr	r2, [pc, #160]	; (8001638 <HAL_UART_MspInit+0x150>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_UART_MspInit+0x150>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c0:	2307      	movs	r3, #7
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	481e      	ldr	r0, [pc, #120]	; (8001644 <HAL_UART_MspInit+0x15c>)
 80015cc:	f002 ffcc 	bl	8004568 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_UART_MspInit+0x160>)
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <HAL_UART_MspInit+0x164>)
 80015d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_UART_MspInit+0x160>)
 80015d8:	222d      	movs	r2, #45	; 0x2d
 80015da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_UART_MspInit+0x160>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_UART_MspInit+0x160>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_UART_MspInit+0x160>)
 80015ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_UART_MspInit+0x160>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_UART_MspInit+0x160>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_UART_MspInit+0x160>)
 80015fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001602:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_UART_MspInit+0x160>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_UART_MspInit+0x160>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <HAL_UART_MspInit+0x160>)
 8001612:	f000 fb69 	bl	8001ce8 <HAL_DMA_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_UART_MspInit+0x138>
      Error_Handler();
 800161c:	f7ff fdfc 	bl	8001218 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_UART_MspInit+0x160>)
 8001624:	679a      	str	r2, [r3, #120]	; 0x78
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_UART_MspInit+0x160>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800162c:	bf00      	nop
 800162e:	3730      	adds	r7, #48	; 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40007c00 	.word	0x40007c00
 8001638:	58024400 	.word	0x58024400
 800163c:	58021000 	.word	0x58021000
 8001640:	40004800 	.word	0x40004800
 8001644:	58020c00 	.word	0x58020c00
 8001648:	24000224 	.word	0x24000224
 800164c:	40020010 	.word	0x40020010

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f9c6 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Stream0_IRQHandler+0x10>)
 80016aa:	f001 f8e3 	bl	8002874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000224 	.word	0x24000224

080016b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <OTG_FS_IRQHandler+0x10>)
 80016be:	f003 faa6 	bl	8004c0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	24001f80 	.word	0x24001f80

080016cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e00a      	b.n	80016f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016de:	f3af 8000 	nop.w
 80016e2:	4601      	mov	r1, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf0      	blt.n	80016de <_read+0x12>
	}

return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
	return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172e:	605a      	str	r2, [r3, #4]
	return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_isatty>:

int _isatty(int file)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
	return 1;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
	return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f00e fc64 	bl	801006c <__errno>
 80017a4:	4602      	mov	r2, r0
 80017a6:	230c      	movs	r3, #12
 80017a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	24080000 	.word	0x24080000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	24000208 	.word	0x24000208
 80017d8:	24002390 	.word	0x24002390

080017dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <SystemInit+0xec>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a38      	ldr	r2, [pc, #224]	; (80018c8 <SystemInit+0xec>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <SystemInit+0xf0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	d807      	bhi.n	800180c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <SystemInit+0xf0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 030f 	bic.w	r3, r3, #15
 8001804:	4a31      	ldr	r2, [pc, #196]	; (80018cc <SystemInit+0xf0>)
 8001806:	f043 0307 	orr.w	r3, r3, #7
 800180a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <SystemInit+0xf4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2f      	ldr	r2, [pc, #188]	; (80018d0 <SystemInit+0xf4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <SystemInit+0xf4>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <SystemInit+0xf4>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	492b      	ldr	r1, [pc, #172]	; (80018d0 <SystemInit+0xf4>)
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <SystemInit+0xf8>)
 8001826:	4013      	ands	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <SystemInit+0xf0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	2b07      	cmp	r3, #7
 8001834:	d907      	bls.n	8001846 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <SystemInit+0xf0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 030f 	bic.w	r3, r3, #15
 800183e:	4a23      	ldr	r2, [pc, #140]	; (80018cc <SystemInit+0xf0>)
 8001840:	f043 0307 	orr.w	r3, r3, #7
 8001844:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <SystemInit+0xf4>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <SystemInit+0xf4>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <SystemInit+0xf4>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <SystemInit+0xf4>)
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <SystemInit+0xfc>)
 800185c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <SystemInit+0xf4>)
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <SystemInit+0x100>)
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <SystemInit+0xf4>)
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <SystemInit+0x104>)
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <SystemInit+0xf4>)
 800186c:	2200      	movs	r2, #0
 800186e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <SystemInit+0xf4>)
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <SystemInit+0x104>)
 8001874:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <SystemInit+0xf4>)
 8001878:	2200      	movs	r2, #0
 800187a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <SystemInit+0xf4>)
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <SystemInit+0x104>)
 8001880:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <SystemInit+0xf4>)
 8001884:	2200      	movs	r2, #0
 8001886:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <SystemInit+0xf4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <SystemInit+0xf4>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001892:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <SystemInit+0xf4>)
 8001896:	2200      	movs	r2, #0
 8001898:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <SystemInit+0x108>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <SystemInit+0x10c>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018a6:	d202      	bcs.n	80018ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <SystemInit+0x110>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <SystemInit+0x114>)
 80018b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SystemInit+0xec>)
 80018b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018bc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	52002000 	.word	0x52002000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80018d8:	02020200 	.word	0x02020200
 80018dc:	01ff0000 	.word	0x01ff0000
 80018e0:	01010280 	.word	0x01010280
 80018e4:	5c001000 	.word	0x5c001000
 80018e8:	ffff0000 	.word	0xffff0000
 80018ec:	51008108 	.word	0x51008108
 80018f0:	52004000 	.word	0x52004000

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800192c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018f8:	f7ff ff70 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018fe:	e003      	b.n	8001908 <LoopCopyDataInit>

08001900 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001902:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001904:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001906:	3104      	adds	r1, #4

08001908 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001908:	480a      	ldr	r0, [pc, #40]	; (8001934 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800190c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800190e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001910:	d3f6      	bcc.n	8001900 <CopyDataInit>
  ldr  r2, =_sbss
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001914:	e002      	b.n	800191c <LoopFillZerobss>

08001916 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001916:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001918:	f842 3b04 	str.w	r3, [r2], #4

0800191c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800191e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001920:	d3f9      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001922:	f00e fba9 	bl	8010078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7fe ffcd 	bl	80008c4 <main>
  bx  lr    
 800192a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800192c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001930:	08011538 	.word	0x08011538
  ldr  r0, =_sdata
 8001934:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001938:	240001e8 	.word	0x240001e8
  ldr  r2, =_sbss
 800193c:	240001e8 	.word	0x240001e8
  ldr  r3, = _ebss
 8001940:	2400238c 	.word	0x2400238c

08001944 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC3_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194e:	2003      	movs	r0, #3
 8001950:	f000 f98a 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001954:	f004 fff0 	bl	8006938 <HAL_RCC_GetSysClockFreq>
 8001958:	4601      	mov	r1, r0
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_Init+0x68>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_Init+0x6c>)
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	fa21 f303 	lsr.w	r3, r1, r3
 8001970:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_Init+0x68>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_Init+0x6c>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_Init+0x70>)
 800198a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_Init+0x74>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f814 	bl	80019c0 <HAL_InitTick>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e002      	b.n	80019a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019a2:	f7ff fc3d 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	58024400 	.word	0x58024400
 80019b4:	0801144c 	.word	0x0801144c
 80019b8:	24000004 	.word	0x24000004
 80019bc:	24000000 	.word	0x24000000

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_InitTick+0x60>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e021      	b.n	8001a18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_InitTick+0x64>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_InitTick+0x60>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f96f 	bl	8001cce <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 f939 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x68>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2400000c 	.word	0x2400000c
 8001a24:	24000000 	.word	0x24000000
 8001a28:	24000008 	.word	0x24000008

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2400000c 	.word	0x2400000c
 8001a50:	24000644 	.word	0x24000644

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	24000644 	.word	0x24000644

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_Delay+0x40>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2400000c 	.word	0x2400000c

08001ab0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetREVID+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	5c001000 	.word	0x5c001000

08001ac8 <__NVIC_SetPriorityGrouping>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <__NVIC_SetPriorityGrouping+0x40>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <__NVIC_SetPriorityGrouping+0x40>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00
 8001b0c:	05fa0000 	.word	0x05fa0000

08001b10 <__NVIC_GetPriorityGrouping>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff29 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff40 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff33 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa4 	bl	8001c24 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff feb0 	bl	8001a54 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e316      	b.n	800232e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <HAL_DMA_Init+0x1b8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d04a      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <HAL_DMA_Init+0x1bc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d045      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a63      	ldr	r2, [pc, #396]	; (8001ea8 <HAL_DMA_Init+0x1c0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d040      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a62      	ldr	r2, [pc, #392]	; (8001eac <HAL_DMA_Init+0x1c4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d03b      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a60      	ldr	r2, [pc, #384]	; (8001eb0 <HAL_DMA_Init+0x1c8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d036      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a5f      	ldr	r2, [pc, #380]	; (8001eb4 <HAL_DMA_Init+0x1cc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d031      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a5d      	ldr	r2, [pc, #372]	; (8001eb8 <HAL_DMA_Init+0x1d0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02c      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a5c      	ldr	r2, [pc, #368]	; (8001ebc <HAL_DMA_Init+0x1d4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d027      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a5a      	ldr	r2, [pc, #360]	; (8001ec0 <HAL_DMA_Init+0x1d8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d022      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a59      	ldr	r2, [pc, #356]	; (8001ec4 <HAL_DMA_Init+0x1dc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d01d      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a57      	ldr	r2, [pc, #348]	; (8001ec8 <HAL_DMA_Init+0x1e0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d018      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a56      	ldr	r2, [pc, #344]	; (8001ecc <HAL_DMA_Init+0x1e4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a54      	ldr	r2, [pc, #336]	; (8001ed0 <HAL_DMA_Init+0x1e8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a53      	ldr	r2, [pc, #332]	; (8001ed4 <HAL_DMA_Init+0x1ec>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <HAL_DMA_Init+0x1f0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_DMA_Init+0xb8>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a50      	ldr	r2, [pc, #320]	; (8001edc <HAL_DMA_Init+0x1f4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_DMA_Init+0xbc>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_Init+0xbe>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 813b 	beq.w	8002022 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a37      	ldr	r2, [pc, #220]	; (8001ea0 <HAL_DMA_Init+0x1b8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d04a      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a36      	ldr	r2, [pc, #216]	; (8001ea4 <HAL_DMA_Init+0x1bc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d045      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a34      	ldr	r2, [pc, #208]	; (8001ea8 <HAL_DMA_Init+0x1c0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d040      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a33      	ldr	r2, [pc, #204]	; (8001eac <HAL_DMA_Init+0x1c4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d03b      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a31      	ldr	r2, [pc, #196]	; (8001eb0 <HAL_DMA_Init+0x1c8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d036      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a30      	ldr	r2, [pc, #192]	; (8001eb4 <HAL_DMA_Init+0x1cc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d031      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <HAL_DMA_Init+0x1d0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02c      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <HAL_DMA_Init+0x1d4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d027      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <HAL_DMA_Init+0x1d8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d022      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <HAL_DMA_Init+0x1dc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d01d      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_DMA_Init+0x1e0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d018      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_DMA_Init+0x1e4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <HAL_DMA_Init+0x1e8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00e      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a24      	ldr	r2, [pc, #144]	; (8001ed4 <HAL_DMA_Init+0x1ec>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d009      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_DMA_Init+0x1f0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_Init+0x174>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a21      	ldr	r2, [pc, #132]	; (8001edc <HAL_DMA_Init+0x1f4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d108      	bne.n	8001e6e <HAL_DMA_Init+0x186>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e007      	b.n	8001e7e <HAL_DMA_Init+0x196>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e7e:	e02f      	b.n	8001ee0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e80:	f7ff fde8 	bl	8001a54 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d928      	bls.n	8001ee0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2203      	movs	r2, #3
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e246      	b.n	800232e <HAL_DMA_Init+0x646>
 8001ea0:	40020010 	.word	0x40020010
 8001ea4:	40020028 	.word	0x40020028
 8001ea8:	40020040 	.word	0x40020040
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	40020070 	.word	0x40020070
 8001eb4:	40020088 	.word	0x40020088
 8001eb8:	400200a0 	.word	0x400200a0
 8001ebc:	400200b8 	.word	0x400200b8
 8001ec0:	40020410 	.word	0x40020410
 8001ec4:	40020428 	.word	0x40020428
 8001ec8:	40020440 	.word	0x40020440
 8001ecc:	40020458 	.word	0x40020458
 8001ed0:	40020470 	.word	0x40020470
 8001ed4:	40020488 	.word	0x40020488
 8001ed8:	400204a0 	.word	0x400204a0
 8001edc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1c8      	bne.n	8001e80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4b83      	ldr	r3, [pc, #524]	; (8002108 <HAL_DMA_Init+0x420>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d107      	bne.n	8001f44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001f44:	4b71      	ldr	r3, [pc, #452]	; (800210c <HAL_DMA_Init+0x424>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b71      	ldr	r3, [pc, #452]	; (8002110 <HAL_DMA_Init+0x428>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f50:	d328      	bcc.n	8001fa4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b28      	cmp	r3, #40	; 0x28
 8001f58:	d903      	bls.n	8001f62 <HAL_DMA_Init+0x27a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8001f60:	d917      	bls.n	8001f92 <HAL_DMA_Init+0x2aa>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b3e      	cmp	r3, #62	; 0x3e
 8001f68:	d903      	bls.n	8001f72 <HAL_DMA_Init+0x28a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b42      	cmp	r3, #66	; 0x42
 8001f70:	d90f      	bls.n	8001f92 <HAL_DMA_Init+0x2aa>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b46      	cmp	r3, #70	; 0x46
 8001f78:	d903      	bls.n	8001f82 <HAL_DMA_Init+0x29a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b48      	cmp	r3, #72	; 0x48
 8001f80:	d907      	bls.n	8001f92 <HAL_DMA_Init+0x2aa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b4e      	cmp	r3, #78	; 0x4e
 8001f88:	d905      	bls.n	8001f96 <HAL_DMA_Init+0x2ae>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b52      	cmp	r3, #82	; 0x52
 8001f90:	d801      	bhi.n	8001f96 <HAL_DMA_Init+0x2ae>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_DMA_Init+0x2b0>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0307 	bic.w	r3, r3, #7
 8001fba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d117      	bne.n	8001ffe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00e      	beq.n	8001ffe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 fdcf 	bl	8003b84 <DMA_CheckFifoParam>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e197      	b.n	800232e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f001 fd0a 	bl	8003a20 <DMA_CalcBaseAndBitshift>
 800200c:	4603      	mov	r3, r0
 800200e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	e0cd      	b.n	80021be <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <HAL_DMA_Init+0x42c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a39      	ldr	r2, [pc, #228]	; (8002118 <HAL_DMA_Init+0x430>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01d      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a38      	ldr	r2, [pc, #224]	; (800211c <HAL_DMA_Init+0x434>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d018      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a36      	ldr	r2, [pc, #216]	; (8002120 <HAL_DMA_Init+0x438>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a35      	ldr	r2, [pc, #212]	; (8002124 <HAL_DMA_Init+0x43c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00e      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a33      	ldr	r2, [pc, #204]	; (8002128 <HAL_DMA_Init+0x440>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a32      	ldr	r2, [pc, #200]	; (800212c <HAL_DMA_Init+0x444>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d004      	beq.n	8002072 <HAL_DMA_Init+0x38a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_DMA_Init+0x448>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_DMA_Init+0x38e>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_DMA_Init+0x390>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 8097 	beq.w	80021ac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a24      	ldr	r2, [pc, #144]	; (8002114 <HAL_DMA_Init+0x42c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d021      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a22      	ldr	r2, [pc, #136]	; (8002118 <HAL_DMA_Init+0x430>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01c      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a21      	ldr	r2, [pc, #132]	; (800211c <HAL_DMA_Init+0x434>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d017      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <HAL_DMA_Init+0x438>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d012      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <HAL_DMA_Init+0x43c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00d      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <HAL_DMA_Init+0x440>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d008      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1b      	ldr	r2, [pc, #108]	; (800212c <HAL_DMA_Init+0x444>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_Init+0x3e4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_DMA_Init+0x448>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_DMA_Init+0x44c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d020      	beq.n	8002138 <HAL_DMA_Init+0x450>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d102      	bne.n	8002104 <HAL_DMA_Init+0x41c>
 80020fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002102:	e01a      	b.n	800213a <HAL_DMA_Init+0x452>
 8002104:	2300      	movs	r3, #0
 8002106:	e018      	b.n	800213a <HAL_DMA_Init+0x452>
 8002108:	fe10803f 	.word	0xfe10803f
 800210c:	5c001000 	.word	0x5c001000
 8002110:	ffff0000 	.word	0xffff0000
 8002114:	58025408 	.word	0x58025408
 8002118:	5802541c 	.word	0x5802541c
 800211c:	58025430 	.word	0x58025430
 8002120:	58025444 	.word	0x58025444
 8002124:	58025458 	.word	0x58025458
 8002128:	5802546c 	.word	0x5802546c
 800212c:	58025480 	.word	0x58025480
 8002130:	58025494 	.word	0x58025494
 8002134:	fffe000f 	.word	0xfffe000f
 8002138:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68d2      	ldr	r2, [r2, #12]
 800213e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002160:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002168:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b6e      	ldr	r3, [pc, #440]	; (8002338 <HAL_DMA_Init+0x650>)
 8002180:	4413      	add	r3, r2
 8002182:	4a6e      	ldr	r2, [pc, #440]	; (800233c <HAL_DMA_Init+0x654>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	009a      	lsls	r2, r3, #2
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f001 fc45 	bl	8003a20 <DMA_CalcBaseAndBitshift>
 8002196:	4603      	mov	r3, r0
 8002198:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2201      	movs	r2, #1
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	e008      	b.n	80021be <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0b7      	b.n	800232e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5f      	ldr	r2, [pc, #380]	; (8002340 <HAL_DMA_Init+0x658>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d072      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <HAL_DMA_Init+0x65c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d06d      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <HAL_DMA_Init+0x660>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d068      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_DMA_Init+0x664>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d063      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a59      	ldr	r2, [pc, #356]	; (8002350 <HAL_DMA_Init+0x668>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d05e      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a57      	ldr	r2, [pc, #348]	; (8002354 <HAL_DMA_Init+0x66c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d059      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a56      	ldr	r2, [pc, #344]	; (8002358 <HAL_DMA_Init+0x670>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d054      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_DMA_Init+0x674>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d04f      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a53      	ldr	r2, [pc, #332]	; (8002360 <HAL_DMA_Init+0x678>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d04a      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a51      	ldr	r2, [pc, #324]	; (8002364 <HAL_DMA_Init+0x67c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d045      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a50      	ldr	r2, [pc, #320]	; (8002368 <HAL_DMA_Init+0x680>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d040      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a4e      	ldr	r2, [pc, #312]	; (800236c <HAL_DMA_Init+0x684>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d03b      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a4d      	ldr	r2, [pc, #308]	; (8002370 <HAL_DMA_Init+0x688>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d036      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_DMA_Init+0x68c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d031      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_DMA_Init+0x690>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d02c      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a48      	ldr	r2, [pc, #288]	; (800237c <HAL_DMA_Init+0x694>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d027      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a47      	ldr	r2, [pc, #284]	; (8002380 <HAL_DMA_Init+0x698>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a45      	ldr	r2, [pc, #276]	; (8002384 <HAL_DMA_Init+0x69c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01d      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a44      	ldr	r2, [pc, #272]	; (8002388 <HAL_DMA_Init+0x6a0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d018      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a42      	ldr	r2, [pc, #264]	; (800238c <HAL_DMA_Init+0x6a4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a41      	ldr	r2, [pc, #260]	; (8002390 <HAL_DMA_Init+0x6a8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00e      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3f      	ldr	r2, [pc, #252]	; (8002394 <HAL_DMA_Init+0x6ac>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a3e      	ldr	r2, [pc, #248]	; (8002398 <HAL_DMA_Init+0x6b0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_Init+0x5c6>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3c      	ldr	r2, [pc, #240]	; (800239c <HAL_DMA_Init+0x6b4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_DMA_Init+0x5ca>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_DMA_Init+0x5cc>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d032      	beq.n	800231e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 fcdf 	bl	8003c7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b80      	cmp	r3, #128	; 0x80
 80022c4:	d102      	bne.n	80022cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_DMA_Init+0x624>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d80c      	bhi.n	800230c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f001 fd5c 	bl	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	e008      	b.n	800231e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	a7fdabf8 	.word	0xa7fdabf8
 800233c:	cccccccd 	.word	0xcccccccd
 8002340:	40020010 	.word	0x40020010
 8002344:	40020028 	.word	0x40020028
 8002348:	40020040 	.word	0x40020040
 800234c:	40020058 	.word	0x40020058
 8002350:	40020070 	.word	0x40020070
 8002354:	40020088 	.word	0x40020088
 8002358:	400200a0 	.word	0x400200a0
 800235c:	400200b8 	.word	0x400200b8
 8002360:	40020410 	.word	0x40020410
 8002364:	40020428 	.word	0x40020428
 8002368:	40020440 	.word	0x40020440
 800236c:	40020458 	.word	0x40020458
 8002370:	40020470 	.word	0x40020470
 8002374:	40020488 	.word	0x40020488
 8002378:	400204a0 	.word	0x400204a0
 800237c:	400204b8 	.word	0x400204b8
 8002380:	58025408 	.word	0x58025408
 8002384:	5802541c 	.word	0x5802541c
 8002388:	58025430 	.word	0x58025430
 800238c:	58025444 	.word	0x58025444
 8002390:	58025458 	.word	0x58025458
 8002394:	5802546c 	.word	0x5802546c
 8002398:	58025480 	.word	0x58025480
 800239c:	58025494 	.word	0x58025494

080023a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e226      	b.n	800280a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_DMA_Start_IT+0x2a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e21f      	b.n	800280a <HAL_DMA_Start_IT+0x46a>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f040 820a 	bne.w	80027f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a68      	ldr	r2, [pc, #416]	; (8002594 <HAL_DMA_Start_IT+0x1f4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d04a      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a66      	ldr	r2, [pc, #408]	; (8002598 <HAL_DMA_Start_IT+0x1f8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d045      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a65      	ldr	r2, [pc, #404]	; (800259c <HAL_DMA_Start_IT+0x1fc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d040      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a63      	ldr	r2, [pc, #396]	; (80025a0 <HAL_DMA_Start_IT+0x200>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d03b      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a62      	ldr	r2, [pc, #392]	; (80025a4 <HAL_DMA_Start_IT+0x204>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d036      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a60      	ldr	r2, [pc, #384]	; (80025a8 <HAL_DMA_Start_IT+0x208>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d031      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5f      	ldr	r2, [pc, #380]	; (80025ac <HAL_DMA_Start_IT+0x20c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d02c      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <HAL_DMA_Start_IT+0x210>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d027      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <HAL_DMA_Start_IT+0x214>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d022      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a5a      	ldr	r2, [pc, #360]	; (80025b8 <HAL_DMA_Start_IT+0x218>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d01d      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a59      	ldr	r2, [pc, #356]	; (80025bc <HAL_DMA_Start_IT+0x21c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d018      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_DMA_Start_IT+0x220>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a56      	ldr	r2, [pc, #344]	; (80025c4 <HAL_DMA_Start_IT+0x224>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <HAL_DMA_Start_IT+0x228>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a53      	ldr	r2, [pc, #332]	; (80025cc <HAL_DMA_Start_IT+0x22c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_DMA_Start_IT+0xee>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a51      	ldr	r2, [pc, #324]	; (80025d0 <HAL_DMA_Start_IT+0x230>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d108      	bne.n	80024a0 <HAL_DMA_Start_IT+0x100>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e007      	b.n	80024b0 <HAL_DMA_Start_IT+0x110>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f001 f906 	bl	80036c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a34      	ldr	r2, [pc, #208]	; (8002594 <HAL_DMA_Start_IT+0x1f4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04a      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a33      	ldr	r2, [pc, #204]	; (8002598 <HAL_DMA_Start_IT+0x1f8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d045      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a31      	ldr	r2, [pc, #196]	; (800259c <HAL_DMA_Start_IT+0x1fc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d040      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a30      	ldr	r2, [pc, #192]	; (80025a0 <HAL_DMA_Start_IT+0x200>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d03b      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2e      	ldr	r2, [pc, #184]	; (80025a4 <HAL_DMA_Start_IT+0x204>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d036      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <HAL_DMA_Start_IT+0x208>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d031      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2b      	ldr	r2, [pc, #172]	; (80025ac <HAL_DMA_Start_IT+0x20c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02c      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <HAL_DMA_Start_IT+0x210>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d027      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <HAL_DMA_Start_IT+0x214>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d022      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_DMA_Start_IT+0x218>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01d      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a25      	ldr	r2, [pc, #148]	; (80025bc <HAL_DMA_Start_IT+0x21c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d018      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a24      	ldr	r2, [pc, #144]	; (80025c0 <HAL_DMA_Start_IT+0x220>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_DMA_Start_IT+0x224>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <HAL_DMA_Start_IT+0x228>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_DMA_Start_IT+0x22c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_DMA_Start_IT+0x1bc>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_DMA_Start_IT+0x230>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Start_IT+0x1c0>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_DMA_Start_IT+0x1c2>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d036      	beq.n	80025d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 021e 	bic.w	r2, r3, #30
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0216 	orr.w	r2, r2, #22
 8002578:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03e      	beq.n	8002600 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0208 	orr.w	r2, r2, #8
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e035      	b.n	8002600 <HAL_DMA_Start_IT+0x260>
 8002594:	40020010 	.word	0x40020010
 8002598:	40020028 	.word	0x40020028
 800259c:	40020040 	.word	0x40020040
 80025a0:	40020058 	.word	0x40020058
 80025a4:	40020070 	.word	0x40020070
 80025a8:	40020088 	.word	0x40020088
 80025ac:	400200a0 	.word	0x400200a0
 80025b0:	400200b8 	.word	0x400200b8
 80025b4:	40020410 	.word	0x40020410
 80025b8:	40020428 	.word	0x40020428
 80025bc:	40020440 	.word	0x40020440
 80025c0:	40020458 	.word	0x40020458
 80025c4:	40020470 	.word	0x40020470
 80025c8:	40020488 	.word	0x40020488
 80025cc:	400204a0 	.word	0x400204a0
 80025d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 020e 	bic.w	r2, r3, #14
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 020a 	orr.w	r2, r2, #10
 80025e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0204 	orr.w	r2, r2, #4
 80025fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a83      	ldr	r2, [pc, #524]	; (8002814 <HAL_DMA_Start_IT+0x474>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d072      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a82      	ldr	r2, [pc, #520]	; (8002818 <HAL_DMA_Start_IT+0x478>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d06d      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a80      	ldr	r2, [pc, #512]	; (800281c <HAL_DMA_Start_IT+0x47c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d068      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7f      	ldr	r2, [pc, #508]	; (8002820 <HAL_DMA_Start_IT+0x480>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d063      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7d      	ldr	r2, [pc, #500]	; (8002824 <HAL_DMA_Start_IT+0x484>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d05e      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7c      	ldr	r2, [pc, #496]	; (8002828 <HAL_DMA_Start_IT+0x488>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d059      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a7a      	ldr	r2, [pc, #488]	; (800282c <HAL_DMA_Start_IT+0x48c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d054      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a79      	ldr	r2, [pc, #484]	; (8002830 <HAL_DMA_Start_IT+0x490>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04f      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a77      	ldr	r2, [pc, #476]	; (8002834 <HAL_DMA_Start_IT+0x494>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d04a      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a76      	ldr	r2, [pc, #472]	; (8002838 <HAL_DMA_Start_IT+0x498>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d045      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a74      	ldr	r2, [pc, #464]	; (800283c <HAL_DMA_Start_IT+0x49c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d040      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a73      	ldr	r2, [pc, #460]	; (8002840 <HAL_DMA_Start_IT+0x4a0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d03b      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a71      	ldr	r2, [pc, #452]	; (8002844 <HAL_DMA_Start_IT+0x4a4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d036      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a70      	ldr	r2, [pc, #448]	; (8002848 <HAL_DMA_Start_IT+0x4a8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d031      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6e      	ldr	r2, [pc, #440]	; (800284c <HAL_DMA_Start_IT+0x4ac>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d02c      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6d      	ldr	r2, [pc, #436]	; (8002850 <HAL_DMA_Start_IT+0x4b0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d027      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6b      	ldr	r2, [pc, #428]	; (8002854 <HAL_DMA_Start_IT+0x4b4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d022      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6a      	ldr	r2, [pc, #424]	; (8002858 <HAL_DMA_Start_IT+0x4b8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d01d      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	; (800285c <HAL_DMA_Start_IT+0x4bc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d018      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a67      	ldr	r2, [pc, #412]	; (8002860 <HAL_DMA_Start_IT+0x4c0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a65      	ldr	r2, [pc, #404]	; (8002864 <HAL_DMA_Start_IT+0x4c4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00e      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a64      	ldr	r2, [pc, #400]	; (8002868 <HAL_DMA_Start_IT+0x4c8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a62      	ldr	r2, [pc, #392]	; (800286c <HAL_DMA_Start_IT+0x4cc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_Start_IT+0x350>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a61      	ldr	r2, [pc, #388]	; (8002870 <HAL_DMA_Start_IT+0x4d0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Start_IT+0x354>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_DMA_Start_IT+0x356>
 80026f4:	2300      	movs	r3, #0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01a      	beq.n	8002730 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002716:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a37      	ldr	r2, [pc, #220]	; (8002814 <HAL_DMA_Start_IT+0x474>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d04a      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a36      	ldr	r2, [pc, #216]	; (8002818 <HAL_DMA_Start_IT+0x478>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d045      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a34      	ldr	r2, [pc, #208]	; (800281c <HAL_DMA_Start_IT+0x47c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d040      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a33      	ldr	r2, [pc, #204]	; (8002820 <HAL_DMA_Start_IT+0x480>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d03b      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a31      	ldr	r2, [pc, #196]	; (8002824 <HAL_DMA_Start_IT+0x484>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d036      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a30      	ldr	r2, [pc, #192]	; (8002828 <HAL_DMA_Start_IT+0x488>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d031      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2e      	ldr	r2, [pc, #184]	; (800282c <HAL_DMA_Start_IT+0x48c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d02c      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2d      	ldr	r2, [pc, #180]	; (8002830 <HAL_DMA_Start_IT+0x490>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d027      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <HAL_DMA_Start_IT+0x494>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d022      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <HAL_DMA_Start_IT+0x498>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d01d      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a28      	ldr	r2, [pc, #160]	; (800283c <HAL_DMA_Start_IT+0x49c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d018      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_DMA_Start_IT+0x4a0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a25      	ldr	r2, [pc, #148]	; (8002844 <HAL_DMA_Start_IT+0x4a4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a24      	ldr	r2, [pc, #144]	; (8002848 <HAL_DMA_Start_IT+0x4a8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_DMA_Start_IT+0x4ac>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_DMA_Start_IT+0x430>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_DMA_Start_IT+0x4b0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d108      	bne.n	80027e2 <HAL_DMA_Start_IT+0x442>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e012      	b.n	8002808 <HAL_DMA_Start_IT+0x468>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e009      	b.n	8002808 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002802:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002808:	7dfb      	ldrb	r3, [r7, #23]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40020010 	.word	0x40020010
 8002818:	40020028 	.word	0x40020028
 800281c:	40020040 	.word	0x40020040
 8002820:	40020058 	.word	0x40020058
 8002824:	40020070 	.word	0x40020070
 8002828:	40020088 	.word	0x40020088
 800282c:	400200a0 	.word	0x400200a0
 8002830:	400200b8 	.word	0x400200b8
 8002834:	40020410 	.word	0x40020410
 8002838:	40020428 	.word	0x40020428
 800283c:	40020440 	.word	0x40020440
 8002840:	40020458 	.word	0x40020458
 8002844:	40020470 	.word	0x40020470
 8002848:	40020488 	.word	0x40020488
 800284c:	400204a0 	.word	0x400204a0
 8002850:	400204b8 	.word	0x400204b8
 8002854:	58025408 	.word	0x58025408
 8002858:	5802541c 	.word	0x5802541c
 800285c:	58025430 	.word	0x58025430
 8002860:	58025444 	.word	0x58025444
 8002864:	58025458 	.word	0x58025458
 8002868:	5802546c 	.word	0x5802546c
 800286c:	58025480 	.word	0x58025480
 8002870:	58025494 	.word	0x58025494

08002874 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002880:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_DMA_IRQHandler+0x1ac>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a67      	ldr	r2, [pc, #412]	; (8002a24 <HAL_DMA_IRQHandler+0x1b0>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0a9b      	lsrs	r3, r3, #10
 800288c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5f      	ldr	r2, [pc, #380]	; (8002a28 <HAL_DMA_IRQHandler+0x1b4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d04a      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a5d      	ldr	r2, [pc, #372]	; (8002a2c <HAL_DMA_IRQHandler+0x1b8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d045      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5c      	ldr	r2, [pc, #368]	; (8002a30 <HAL_DMA_IRQHandler+0x1bc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d040      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5a      	ldr	r2, [pc, #360]	; (8002a34 <HAL_DMA_IRQHandler+0x1c0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d03b      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a59      	ldr	r2, [pc, #356]	; (8002a38 <HAL_DMA_IRQHandler+0x1c4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d036      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a57      	ldr	r2, [pc, #348]	; (8002a3c <HAL_DMA_IRQHandler+0x1c8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d031      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a56      	ldr	r2, [pc, #344]	; (8002a40 <HAL_DMA_IRQHandler+0x1cc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d02c      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <HAL_DMA_IRQHandler+0x1d0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d027      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_DMA_IRQHandler+0x1d4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a51      	ldr	r2, [pc, #324]	; (8002a4c <HAL_DMA_IRQHandler+0x1d8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01d      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a50      	ldr	r2, [pc, #320]	; (8002a50 <HAL_DMA_IRQHandler+0x1dc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d018      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <HAL_DMA_IRQHandler+0x1e0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_DMA_IRQHandler+0x1e4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4b      	ldr	r2, [pc, #300]	; (8002a5c <HAL_DMA_IRQHandler+0x1e8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d009      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_DMA_IRQHandler+0x1ec>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d004      	beq.n	8002946 <HAL_DMA_IRQHandler+0xd2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a48      	ldr	r2, [pc, #288]	; (8002a64 <HAL_DMA_IRQHandler+0x1f0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_DMA_IRQHandler+0xd6>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_DMA_IRQHandler+0xd8>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 842b 	beq.w	80031a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2208      	movs	r2, #8
 800295c:	409a      	lsls	r2, r3
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80a2 	beq.w	8002aac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2e      	ldr	r2, [pc, #184]	; (8002a28 <HAL_DMA_IRQHandler+0x1b4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d04a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <HAL_DMA_IRQHandler+0x1b8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d045      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2b      	ldr	r2, [pc, #172]	; (8002a30 <HAL_DMA_IRQHandler+0x1bc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d040      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <HAL_DMA_IRQHandler+0x1c0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d03b      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a28      	ldr	r2, [pc, #160]	; (8002a38 <HAL_DMA_IRQHandler+0x1c4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d036      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <HAL_DMA_IRQHandler+0x1c8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d031      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_DMA_IRQHandler+0x1cc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d02c      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <HAL_DMA_IRQHandler+0x1d0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d027      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <HAL_DMA_IRQHandler+0x1d4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d022      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <HAL_DMA_IRQHandler+0x1d8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d01d      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <HAL_DMA_IRQHandler+0x1dc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d018      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_DMA_IRQHandler+0x1e0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d013      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_DMA_IRQHandler+0x1e4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <HAL_DMA_IRQHandler+0x1e8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d009      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <HAL_DMA_IRQHandler+0x1ec>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x194>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_DMA_IRQHandler+0x1f0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d12f      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x1f4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e02e      	b.n	8002a7c <HAL_DMA_IRQHandler+0x208>
 8002a1e:	bf00      	nop
 8002a20:	24000000 	.word	0x24000000
 8002a24:	1b4e81b5 	.word	0x1b4e81b5
 8002a28:	40020010 	.word	0x40020010
 8002a2c:	40020028 	.word	0x40020028
 8002a30:	40020040 	.word	0x40020040
 8002a34:	40020058 	.word	0x40020058
 8002a38:	40020070 	.word	0x40020070
 8002a3c:	40020088 	.word	0x40020088
 8002a40:	400200a0 	.word	0x400200a0
 8002a44:	400200b8 	.word	0x400200b8
 8002a48:	40020410 	.word	0x40020410
 8002a4c:	40020428 	.word	0x40020428
 8002a50:	40020440 	.word	0x40020440
 8002a54:	40020458 	.word	0x40020458
 8002a58:	40020470 	.word	0x40020470
 8002a5c:	40020488 	.word	0x40020488
 8002a60:	400204a0 	.word	0x400204a0
 8002a64:	400204b8 	.word	0x400204b8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2208      	movs	r2, #8
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d06e      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a69      	ldr	r2, [pc, #420]	; (8002c6c <HAL_DMA_IRQHandler+0x3f8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d04a      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a67      	ldr	r2, [pc, #412]	; (8002c70 <HAL_DMA_IRQHandler+0x3fc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d045      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a66      	ldr	r2, [pc, #408]	; (8002c74 <HAL_DMA_IRQHandler+0x400>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d040      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a64      	ldr	r2, [pc, #400]	; (8002c78 <HAL_DMA_IRQHandler+0x404>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d03b      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a63      	ldr	r2, [pc, #396]	; (8002c7c <HAL_DMA_IRQHandler+0x408>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d036      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a61      	ldr	r2, [pc, #388]	; (8002c80 <HAL_DMA_IRQHandler+0x40c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d031      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <HAL_DMA_IRQHandler+0x410>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d02c      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5e      	ldr	r2, [pc, #376]	; (8002c88 <HAL_DMA_IRQHandler+0x414>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d027      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5d      	ldr	r2, [pc, #372]	; (8002c8c <HAL_DMA_IRQHandler+0x418>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5b      	ldr	r2, [pc, #364]	; (8002c90 <HAL_DMA_IRQHandler+0x41c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5a      	ldr	r2, [pc, #360]	; (8002c94 <HAL_DMA_IRQHandler+0x420>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_DMA_IRQHandler+0x424>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a57      	ldr	r2, [pc, #348]	; (8002c9c <HAL_DMA_IRQHandler+0x428>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a55      	ldr	r2, [pc, #340]	; (8002ca0 <HAL_DMA_IRQHandler+0x42c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a54      	ldr	r2, [pc, #336]	; (8002ca4 <HAL_DMA_IRQHandler+0x430>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2ee>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_DMA_IRQHandler+0x434>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10a      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x304>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e003      	b.n	8002b80 <HAL_DMA_IRQHandler+0x30c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f043 0202 	orr.w	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2204      	movs	r2, #4
 8002baa:	409a      	lsls	r2, r3
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 808f 	beq.w	8002cd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2c      	ldr	r2, [pc, #176]	; (8002c6c <HAL_DMA_IRQHandler+0x3f8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d04a      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <HAL_DMA_IRQHandler+0x3fc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d045      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <HAL_DMA_IRQHandler+0x400>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d040      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <HAL_DMA_IRQHandler+0x404>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d03b      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <HAL_DMA_IRQHandler+0x408>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d036      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_DMA_IRQHandler+0x40c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d031      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <HAL_DMA_IRQHandler+0x410>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d02c      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_DMA_IRQHandler+0x414>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d027      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_DMA_IRQHandler+0x418>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d022      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_DMA_IRQHandler+0x41c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d01d      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <HAL_DMA_IRQHandler+0x420>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d018      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_DMA_IRQHandler+0x424>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <HAL_DMA_IRQHandler+0x428>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00e      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_DMA_IRQHandler+0x42c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_DMA_IRQHandler+0x430>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d004      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x3e2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_DMA_IRQHandler+0x434>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12a      	bne.n	8002cac <HAL_DMA_IRQHandler+0x438>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e023      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x440>
 8002c6c:	40020010 	.word	0x40020010
 8002c70:	40020028 	.word	0x40020028
 8002c74:	40020040 	.word	0x40020040
 8002c78:	40020058 	.word	0x40020058
 8002c7c:	40020070 	.word	0x40020070
 8002c80:	40020088 	.word	0x40020088
 8002c84:	400200a0 	.word	0x400200a0
 8002c88:	400200b8 	.word	0x400200b8
 8002c8c:	40020410 	.word	0x40020410
 8002c90:	40020428 	.word	0x40020428
 8002c94:	40020440 	.word	0x40020440
 8002c98:	40020458 	.word	0x40020458
 8002c9c:	40020470 	.word	0x40020470
 8002ca0:	40020488 	.word	0x40020488
 8002ca4:	400204a0 	.word	0x400204a0
 8002ca8:	400204b8 	.word	0x400204b8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2210      	movs	r2, #16
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a6 	beq.w	8002e36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a85      	ldr	r2, [pc, #532]	; (8002f04 <HAL_DMA_IRQHandler+0x690>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d04a      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a83      	ldr	r2, [pc, #524]	; (8002f08 <HAL_DMA_IRQHandler+0x694>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d045      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a82      	ldr	r2, [pc, #520]	; (8002f0c <HAL_DMA_IRQHandler+0x698>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d040      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a80      	ldr	r2, [pc, #512]	; (8002f10 <HAL_DMA_IRQHandler+0x69c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d03b      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7f      	ldr	r2, [pc, #508]	; (8002f14 <HAL_DMA_IRQHandler+0x6a0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d036      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7d      	ldr	r2, [pc, #500]	; (8002f18 <HAL_DMA_IRQHandler+0x6a4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7c      	ldr	r2, [pc, #496]	; (8002f1c <HAL_DMA_IRQHandler+0x6a8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d02c      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_DMA_IRQHandler+0x6ac>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d027      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a79      	ldr	r2, [pc, #484]	; (8002f24 <HAL_DMA_IRQHandler+0x6b0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a77      	ldr	r2, [pc, #476]	; (8002f28 <HAL_DMA_IRQHandler+0x6b4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a76      	ldr	r2, [pc, #472]	; (8002f2c <HAL_DMA_IRQHandler+0x6b8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a74      	ldr	r2, [pc, #464]	; (8002f30 <HAL_DMA_IRQHandler+0x6bc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a73      	ldr	r2, [pc, #460]	; (8002f34 <HAL_DMA_IRQHandler+0x6c0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a71      	ldr	r2, [pc, #452]	; (8002f38 <HAL_DMA_IRQHandler+0x6c4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a70      	ldr	r2, [pc, #448]	; (8002f3c <HAL_DMA_IRQHandler+0x6c8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d004      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x516>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_DMA_IRQHandler+0x6cc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10a      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x52c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e009      	b.n	8002db4 <HAL_DMA_IRQHandler+0x540>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d03e      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d018      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d108      	bne.n	8002df6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d024      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
 8002df4:	e01f      	b.n	8002e36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d01b      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
 8002e06:	e016      	b.n	8002e36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d107      	bne.n	8002e26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0208 	bic.w	r2, r2, #8
 8002e24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2220      	movs	r2, #32
 8002e40:	409a      	lsls	r2, r3
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8110 	beq.w	800306c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <HAL_DMA_IRQHandler+0x690>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d04a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2b      	ldr	r2, [pc, #172]	; (8002f08 <HAL_DMA_IRQHandler+0x694>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d045      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <HAL_DMA_IRQHandler+0x698>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d040      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a28      	ldr	r2, [pc, #160]	; (8002f10 <HAL_DMA_IRQHandler+0x69c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d03b      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <HAL_DMA_IRQHandler+0x6a0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d036      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <HAL_DMA_IRQHandler+0x6a4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d031      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a23      	ldr	r2, [pc, #140]	; (8002f1c <HAL_DMA_IRQHandler+0x6a8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d02c      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <HAL_DMA_IRQHandler+0x6ac>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d027      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <HAL_DMA_IRQHandler+0x6b0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_DMA_IRQHandler+0x6b4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01d      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_DMA_IRQHandler+0x6b8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_DMA_IRQHandler+0x6bc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <HAL_DMA_IRQHandler+0x6c0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_DMA_IRQHandler+0x6c4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_DMA_IRQHandler+0x6c8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_IRQHandler+0x678>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_DMA_IRQHandler+0x6cc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d12b      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x6d0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e02a      	b.n	8002f58 <HAL_DMA_IRQHandler+0x6e4>
 8002f02:	bf00      	nop
 8002f04:	40020010 	.word	0x40020010
 8002f08:	40020028 	.word	0x40020028
 8002f0c:	40020040 	.word	0x40020040
 8002f10:	40020058 	.word	0x40020058
 8002f14:	40020070 	.word	0x40020070
 8002f18:	40020088 	.word	0x40020088
 8002f1c:	400200a0 	.word	0x400200a0
 8002f20:	400200b8 	.word	0x400200b8
 8002f24:	40020410 	.word	0x40020410
 8002f28:	40020428 	.word	0x40020428
 8002f2c:	40020440 	.word	0x40020440
 8002f30:	40020458 	.word	0x40020458
 8002f34:	40020470 	.word	0x40020470
 8002f38:	40020488 	.word	0x40020488
 8002f3c:	400204a0 	.word	0x400204a0
 8002f40:	400204b8 	.word	0x400204b8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8087 	beq.w	800306c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2220      	movs	r2, #32
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d139      	bne.n	8002fee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0216 	bic.w	r2, r2, #22
 8002f88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <HAL_DMA_IRQHandler+0x736>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0208 	bic.w	r2, r2, #8
 8002fb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	223f      	movs	r2, #63	; 0x3f
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 834a 	beq.w	8003678 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
          }
          return;
 8002fec:	e344      	b.n	8003678 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d018      	beq.n	800302e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d108      	bne.n	800301c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02c      	beq.n	800306c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
 800301a:	e027      	b.n	800306c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e01e      	b.n	800306c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8306 	beq.w	8003682 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8088 	beq.w	8003194 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2204      	movs	r2, #4
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a7a      	ldr	r2, [pc, #488]	; (800327c <HAL_DMA_IRQHandler+0xa08>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d04a      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a79      	ldr	r2, [pc, #484]	; (8003280 <HAL_DMA_IRQHandler+0xa0c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d045      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a77      	ldr	r2, [pc, #476]	; (8003284 <HAL_DMA_IRQHandler+0xa10>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d040      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a76      	ldr	r2, [pc, #472]	; (8003288 <HAL_DMA_IRQHandler+0xa14>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d03b      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a74      	ldr	r2, [pc, #464]	; (800328c <HAL_DMA_IRQHandler+0xa18>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d036      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a73      	ldr	r2, [pc, #460]	; (8003290 <HAL_DMA_IRQHandler+0xa1c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d031      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a71      	ldr	r2, [pc, #452]	; (8003294 <HAL_DMA_IRQHandler+0xa20>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02c      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a70      	ldr	r2, [pc, #448]	; (8003298 <HAL_DMA_IRQHandler+0xa24>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d027      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6e      	ldr	r2, [pc, #440]	; (800329c <HAL_DMA_IRQHandler+0xa28>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d022      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6d      	ldr	r2, [pc, #436]	; (80032a0 <HAL_DMA_IRQHandler+0xa2c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d01d      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6b      	ldr	r2, [pc, #428]	; (80032a4 <HAL_DMA_IRQHandler+0xa30>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d018      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6a      	ldr	r2, [pc, #424]	; (80032a8 <HAL_DMA_IRQHandler+0xa34>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a68      	ldr	r2, [pc, #416]	; (80032ac <HAL_DMA_IRQHandler+0xa38>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00e      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a67      	ldr	r2, [pc, #412]	; (80032b0 <HAL_DMA_IRQHandler+0xa3c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a65      	ldr	r2, [pc, #404]	; (80032b4 <HAL_DMA_IRQHandler+0xa40>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_DMA_IRQHandler+0x8b8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a64      	ldr	r2, [pc, #400]	; (80032b8 <HAL_DMA_IRQHandler+0xa44>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d108      	bne.n	800313e <HAL_DMA_IRQHandler+0x8ca>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e007      	b.n	800314e <HAL_DMA_IRQHandler+0x8da>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3301      	adds	r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003156:	429a      	cmp	r2, r3
 8003158:	d307      	bcc.n	800316a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f2      	bne.n	800314e <HAL_DMA_IRQHandler+0x8da>
 8003168:	e000      	b.n	800316c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800316a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2203      	movs	r2, #3
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800318a:	e003      	b.n	8003194 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8272 	beq.w	8003682 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
 80031a6:	e26c      	b.n	8003682 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a43      	ldr	r2, [pc, #268]	; (80032bc <HAL_DMA_IRQHandler+0xa48>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d022      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x984>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a42      	ldr	r2, [pc, #264]	; (80032c0 <HAL_DMA_IRQHandler+0xa4c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d01d      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x984>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a40      	ldr	r2, [pc, #256]	; (80032c4 <HAL_DMA_IRQHandler+0xa50>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d018      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x984>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <HAL_DMA_IRQHandler+0xa54>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x984>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a3d      	ldr	r2, [pc, #244]	; (80032cc <HAL_DMA_IRQHandler+0xa58>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00e      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x984>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3c      	ldr	r2, [pc, #240]	; (80032d0 <HAL_DMA_IRQHandler+0xa5c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d009      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x984>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3a      	ldr	r2, [pc, #232]	; (80032d4 <HAL_DMA_IRQHandler+0xa60>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x984>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a39      	ldr	r2, [pc, #228]	; (80032d8 <HAL_DMA_IRQHandler+0xa64>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_DMA_IRQHandler+0x988>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_DMA_IRQHandler+0x98a>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 823f 	beq.w	8003682 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2204      	movs	r2, #4
 8003216:	409a      	lsls	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80cd 	beq.w	80033bc <HAL_DMA_IRQHandler+0xb48>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80c7 	beq.w	80033bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2204      	movs	r2, #4
 8003238:	409a      	lsls	r2, r3
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d049      	beq.n	80032dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8210 	beq.w	800367c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003264:	e20a      	b.n	800367c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8206 	beq.w	800367c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003278:	e200      	b.n	800367c <HAL_DMA_IRQHandler+0xe08>
 800327a:	bf00      	nop
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
 80032bc:	58025408 	.word	0x58025408
 80032c0:	5802541c 	.word	0x5802541c
 80032c4:	58025430 	.word	0x58025430
 80032c8:	58025444 	.word	0x58025444
 80032cc:	58025458 	.word	0x58025458
 80032d0:	5802546c 	.word	0x5802546c
 80032d4:	58025480 	.word	0x58025480
 80032d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d160      	bne.n	80033a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a8c      	ldr	r2, [pc, #560]	; (800351c <HAL_DMA_IRQHandler+0xca8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04a      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a8a      	ldr	r2, [pc, #552]	; (8003520 <HAL_DMA_IRQHandler+0xcac>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a89      	ldr	r2, [pc, #548]	; (8003524 <HAL_DMA_IRQHandler+0xcb0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a87      	ldr	r2, [pc, #540]	; (8003528 <HAL_DMA_IRQHandler+0xcb4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d03b      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a86      	ldr	r2, [pc, #536]	; (800352c <HAL_DMA_IRQHandler+0xcb8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a84      	ldr	r2, [pc, #528]	; (8003530 <HAL_DMA_IRQHandler+0xcbc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d031      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a83      	ldr	r2, [pc, #524]	; (8003534 <HAL_DMA_IRQHandler+0xcc0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a81      	ldr	r2, [pc, #516]	; (8003538 <HAL_DMA_IRQHandler+0xcc4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a80      	ldr	r2, [pc, #512]	; (800353c <HAL_DMA_IRQHandler+0xcc8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a7e      	ldr	r2, [pc, #504]	; (8003540 <HAL_DMA_IRQHandler+0xccc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7d      	ldr	r2, [pc, #500]	; (8003544 <HAL_DMA_IRQHandler+0xcd0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a7b      	ldr	r2, [pc, #492]	; (8003548 <HAL_DMA_IRQHandler+0xcd4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7a      	ldr	r2, [pc, #488]	; (800354c <HAL_DMA_IRQHandler+0xcd8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a78      	ldr	r2, [pc, #480]	; (8003550 <HAL_DMA_IRQHandler+0xcdc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a77      	ldr	r2, [pc, #476]	; (8003554 <HAL_DMA_IRQHandler+0xce0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_IRQHandler+0xb12>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a75      	ldr	r2, [pc, #468]	; (8003558 <HAL_DMA_IRQHandler+0xce4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <HAL_DMA_IRQHandler+0xb24>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0208 	bic.w	r2, r2, #8
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <HAL_DMA_IRQHandler+0xb34>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0204 	bic.w	r2, r2, #4
 80033a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8165 	beq.w	800367c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ba:	e15f      	b.n	800367c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2202      	movs	r2, #2
 80033c6:	409a      	lsls	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80c5 	beq.w	800355c <HAL_DMA_IRQHandler+0xce8>
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80bf 	beq.w	800355c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2202      	movs	r2, #2
 80033e8:	409a      	lsls	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d018      	beq.n	800342a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 813a 	beq.w	8003680 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003414:	e134      	b.n	8003680 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8130 	beq.w	8003680 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003428:	e12a      	b.n	8003680 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d168      	bne.n	8003506 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a38      	ldr	r2, [pc, #224]	; (800351c <HAL_DMA_IRQHandler+0xca8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a37      	ldr	r2, [pc, #220]	; (8003520 <HAL_DMA_IRQHandler+0xcac>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d045      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a35      	ldr	r2, [pc, #212]	; (8003524 <HAL_DMA_IRQHandler+0xcb0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d040      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a34      	ldr	r2, [pc, #208]	; (8003528 <HAL_DMA_IRQHandler+0xcb4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03b      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a32      	ldr	r2, [pc, #200]	; (800352c <HAL_DMA_IRQHandler+0xcb8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d036      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a31      	ldr	r2, [pc, #196]	; (8003530 <HAL_DMA_IRQHandler+0xcbc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d031      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <HAL_DMA_IRQHandler+0xcc0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02c      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2e      	ldr	r2, [pc, #184]	; (8003538 <HAL_DMA_IRQHandler+0xcc4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d027      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2c      	ldr	r2, [pc, #176]	; (800353c <HAL_DMA_IRQHandler+0xcc8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <HAL_DMA_IRQHandler+0xccc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01d      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_DMA_IRQHandler+0xcd0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a28      	ldr	r2, [pc, #160]	; (8003548 <HAL_DMA_IRQHandler+0xcd4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <HAL_DMA_IRQHandler+0xcd8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_DMA_IRQHandler+0xcdc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <HAL_DMA_IRQHandler+0xce0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xc60>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a22      	ldr	r2, [pc, #136]	; (8003558 <HAL_DMA_IRQHandler+0xce4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <HAL_DMA_IRQHandler+0xc72>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0214 	bic.w	r2, r2, #20
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e007      	b.n	80034f6 <HAL_DMA_IRQHandler+0xc82>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 020a 	bic.w	r2, r2, #10
 80034f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80b8 	beq.w	8003680 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003518:	e0b2      	b.n	8003680 <HAL_DMA_IRQHandler+0xe0c>
 800351a:	bf00      	nop
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2208      	movs	r2, #8
 8003566:	409a      	lsls	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8088 	beq.w	8003682 <HAL_DMA_IRQHandler+0xe0e>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8082 	beq.w	8003682 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a41      	ldr	r2, [pc, #260]	; (8003688 <HAL_DMA_IRQHandler+0xe14>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04a      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a3f      	ldr	r2, [pc, #252]	; (800368c <HAL_DMA_IRQHandler+0xe18>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d045      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a3e      	ldr	r2, [pc, #248]	; (8003690 <HAL_DMA_IRQHandler+0xe1c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d040      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <HAL_DMA_IRQHandler+0xe20>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03b      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a3b      	ldr	r2, [pc, #236]	; (8003698 <HAL_DMA_IRQHandler+0xe24>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d036      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a39      	ldr	r2, [pc, #228]	; (800369c <HAL_DMA_IRQHandler+0xe28>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d031      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <HAL_DMA_IRQHandler+0xe2c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d02c      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a36      	ldr	r2, [pc, #216]	; (80036a4 <HAL_DMA_IRQHandler+0xe30>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d027      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a35      	ldr	r2, [pc, #212]	; (80036a8 <HAL_DMA_IRQHandler+0xe34>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a33      	ldr	r2, [pc, #204]	; (80036ac <HAL_DMA_IRQHandler+0xe38>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01d      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a32      	ldr	r2, [pc, #200]	; (80036b0 <HAL_DMA_IRQHandler+0xe3c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a30      	ldr	r2, [pc, #192]	; (80036b4 <HAL_DMA_IRQHandler+0xe40>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2f      	ldr	r2, [pc, #188]	; (80036b8 <HAL_DMA_IRQHandler+0xe44>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <HAL_DMA_IRQHandler+0xe48>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <HAL_DMA_IRQHandler+0xe4c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_DMA_IRQHandler+0xdaa>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <HAL_DMA_IRQHandler+0xe50>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <HAL_DMA_IRQHandler+0xdbc>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 021c 	bic.w	r2, r2, #28
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e007      	b.n	8003640 <HAL_DMA_IRQHandler+0xdcc>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 020e 	bic.w	r2, r2, #14
 800363e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2201      	movs	r2, #1
 800364a:	409a      	lsls	r2, r3
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
 8003676:	e004      	b.n	8003682 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003678:	bf00      	nop
 800367a:	e002      	b.n	8003682 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003680:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003682:	3728      	adds	r7, #40	; 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40020010 	.word	0x40020010
 800368c:	40020028 	.word	0x40020028
 8003690:	40020040 	.word	0x40020040
 8003694:	40020058 	.word	0x40020058
 8003698:	40020070 	.word	0x40020070
 800369c:	40020088 	.word	0x40020088
 80036a0:	400200a0 	.word	0x400200a0
 80036a4:	400200b8 	.word	0x400200b8
 80036a8:	40020410 	.word	0x40020410
 80036ac:	40020428 	.word	0x40020428
 80036b0:	40020440 	.word	0x40020440
 80036b4:	40020458 	.word	0x40020458
 80036b8:	40020470 	.word	0x40020470
 80036bc:	40020488 	.word	0x40020488
 80036c0:	400204a0 	.word	0x400204a0
 80036c4:	400204b8 	.word	0x400204b8

080036c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a84      	ldr	r2, [pc, #528]	; (80038f8 <DMA_SetConfig+0x230>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d072      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a82      	ldr	r2, [pc, #520]	; (80038fc <DMA_SetConfig+0x234>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d06d      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a81      	ldr	r2, [pc, #516]	; (8003900 <DMA_SetConfig+0x238>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d068      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a7f      	ldr	r2, [pc, #508]	; (8003904 <DMA_SetConfig+0x23c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d063      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7e      	ldr	r2, [pc, #504]	; (8003908 <DMA_SetConfig+0x240>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d05e      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a7c      	ldr	r2, [pc, #496]	; (800390c <DMA_SetConfig+0x244>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d059      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7b      	ldr	r2, [pc, #492]	; (8003910 <DMA_SetConfig+0x248>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d054      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a79      	ldr	r2, [pc, #484]	; (8003914 <DMA_SetConfig+0x24c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04f      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a78      	ldr	r2, [pc, #480]	; (8003918 <DMA_SetConfig+0x250>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04a      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a76      	ldr	r2, [pc, #472]	; (800391c <DMA_SetConfig+0x254>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d045      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a75      	ldr	r2, [pc, #468]	; (8003920 <DMA_SetConfig+0x258>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d040      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a73      	ldr	r2, [pc, #460]	; (8003924 <DMA_SetConfig+0x25c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d03b      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a72      	ldr	r2, [pc, #456]	; (8003928 <DMA_SetConfig+0x260>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d036      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a70      	ldr	r2, [pc, #448]	; (800392c <DMA_SetConfig+0x264>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d031      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a6f      	ldr	r2, [pc, #444]	; (8003930 <DMA_SetConfig+0x268>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d02c      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a6d      	ldr	r2, [pc, #436]	; (8003934 <DMA_SetConfig+0x26c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d027      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6c      	ldr	r2, [pc, #432]	; (8003938 <DMA_SetConfig+0x270>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6a      	ldr	r2, [pc, #424]	; (800393c <DMA_SetConfig+0x274>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01d      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a69      	ldr	r2, [pc, #420]	; (8003940 <DMA_SetConfig+0x278>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a67      	ldr	r2, [pc, #412]	; (8003944 <DMA_SetConfig+0x27c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a66      	ldr	r2, [pc, #408]	; (8003948 <DMA_SetConfig+0x280>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a64      	ldr	r2, [pc, #400]	; (800394c <DMA_SetConfig+0x284>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a63      	ldr	r2, [pc, #396]	; (8003950 <DMA_SetConfig+0x288>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <DMA_SetConfig+0x10a>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a61      	ldr	r2, [pc, #388]	; (8003954 <DMA_SetConfig+0x28c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <DMA_SetConfig+0x10e>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <DMA_SetConfig+0x110>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a3e      	ldr	r2, [pc, #248]	; (80038f8 <DMA_SetConfig+0x230>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04a      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a3d      	ldr	r2, [pc, #244]	; (80038fc <DMA_SetConfig+0x234>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d045      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a3b      	ldr	r2, [pc, #236]	; (8003900 <DMA_SetConfig+0x238>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d040      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a3a      	ldr	r2, [pc, #232]	; (8003904 <DMA_SetConfig+0x23c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d03b      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <DMA_SetConfig+0x240>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d036      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a37      	ldr	r2, [pc, #220]	; (800390c <DMA_SetConfig+0x244>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d031      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a35      	ldr	r2, [pc, #212]	; (8003910 <DMA_SetConfig+0x248>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d02c      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a34      	ldr	r2, [pc, #208]	; (8003914 <DMA_SetConfig+0x24c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d027      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a32      	ldr	r2, [pc, #200]	; (8003918 <DMA_SetConfig+0x250>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d022      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a31      	ldr	r2, [pc, #196]	; (800391c <DMA_SetConfig+0x254>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d01d      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a2f      	ldr	r2, [pc, #188]	; (8003920 <DMA_SetConfig+0x258>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d018      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2e      	ldr	r2, [pc, #184]	; (8003924 <DMA_SetConfig+0x25c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <DMA_SetConfig+0x260>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00e      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2b      	ldr	r2, [pc, #172]	; (800392c <DMA_SetConfig+0x264>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d009      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a29      	ldr	r2, [pc, #164]	; (8003930 <DMA_SetConfig+0x268>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <DMA_SetConfig+0x1d0>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a28      	ldr	r2, [pc, #160]	; (8003934 <DMA_SetConfig+0x26c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <DMA_SetConfig+0x1d4>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <DMA_SetConfig+0x1d6>
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d05a      	beq.n	8003958 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	223f      	movs	r2, #63	; 0x3f
 80038ac:	409a      	lsls	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d108      	bne.n	80038e4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038e2:	e087      	b.n	80039f4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
}
 80038f4:	e07e      	b.n	80039f4 <DMA_SetConfig+0x32c>
 80038f6:	bf00      	nop
 80038f8:	40020010 	.word	0x40020010
 80038fc:	40020028 	.word	0x40020028
 8003900:	40020040 	.word	0x40020040
 8003904:	40020058 	.word	0x40020058
 8003908:	40020070 	.word	0x40020070
 800390c:	40020088 	.word	0x40020088
 8003910:	400200a0 	.word	0x400200a0
 8003914:	400200b8 	.word	0x400200b8
 8003918:	40020410 	.word	0x40020410
 800391c:	40020428 	.word	0x40020428
 8003920:	40020440 	.word	0x40020440
 8003924:	40020458 	.word	0x40020458
 8003928:	40020470 	.word	0x40020470
 800392c:	40020488 	.word	0x40020488
 8003930:	400204a0 	.word	0x400204a0
 8003934:	400204b8 	.word	0x400204b8
 8003938:	58025408 	.word	0x58025408
 800393c:	5802541c 	.word	0x5802541c
 8003940:	58025430 	.word	0x58025430
 8003944:	58025444 	.word	0x58025444
 8003948:	58025458 	.word	0x58025458
 800394c:	5802546c 	.word	0x5802546c
 8003950:	58025480 	.word	0x58025480
 8003954:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a28      	ldr	r2, [pc, #160]	; (8003a00 <DMA_SetConfig+0x338>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d022      	beq.n	80039a8 <DMA_SetConfig+0x2e0>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a27      	ldr	r2, [pc, #156]	; (8003a04 <DMA_SetConfig+0x33c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d01d      	beq.n	80039a8 <DMA_SetConfig+0x2e0>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <DMA_SetConfig+0x340>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d018      	beq.n	80039a8 <DMA_SetConfig+0x2e0>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a24      	ldr	r2, [pc, #144]	; (8003a0c <DMA_SetConfig+0x344>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <DMA_SetConfig+0x2e0>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <DMA_SetConfig+0x348>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00e      	beq.n	80039a8 <DMA_SetConfig+0x2e0>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a21      	ldr	r2, [pc, #132]	; (8003a14 <DMA_SetConfig+0x34c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d009      	beq.n	80039a8 <DMA_SetConfig+0x2e0>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <DMA_SetConfig+0x350>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <DMA_SetConfig+0x2e0>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <DMA_SetConfig+0x354>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <DMA_SetConfig+0x2e4>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <DMA_SetConfig+0x2e6>
 80039ac:	2300      	movs	r3, #0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d020      	beq.n	80039f4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2201      	movs	r2, #1
 80039bc:	409a      	lsls	r2, r3
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d108      	bne.n	80039e4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	60da      	str	r2, [r3, #12]
}
 80039e2:	e007      	b.n	80039f4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	58025408 	.word	0x58025408
 8003a04:	5802541c 	.word	0x5802541c
 8003a08:	58025430 	.word	0x58025430
 8003a0c:	58025444 	.word	0x58025444
 8003a10:	58025458 	.word	0x58025458
 8003a14:	5802546c 	.word	0x5802546c
 8003a18:	58025480 	.word	0x58025480
 8003a1c:	58025494 	.word	0x58025494

08003a20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <DMA_CalcBaseAndBitshift+0x118>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d04a      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a41      	ldr	r2, [pc, #260]	; (8003b3c <DMA_CalcBaseAndBitshift+0x11c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d045      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3f      	ldr	r2, [pc, #252]	; (8003b40 <DMA_CalcBaseAndBitshift+0x120>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d040      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <DMA_CalcBaseAndBitshift+0x124>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d03b      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <DMA_CalcBaseAndBitshift+0x128>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d036      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <DMA_CalcBaseAndBitshift+0x12c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d031      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a39      	ldr	r2, [pc, #228]	; (8003b50 <DMA_CalcBaseAndBitshift+0x130>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02c      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a38      	ldr	r2, [pc, #224]	; (8003b54 <DMA_CalcBaseAndBitshift+0x134>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d027      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a36      	ldr	r2, [pc, #216]	; (8003b58 <DMA_CalcBaseAndBitshift+0x138>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d022      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a35      	ldr	r2, [pc, #212]	; (8003b5c <DMA_CalcBaseAndBitshift+0x13c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d01d      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a33      	ldr	r2, [pc, #204]	; (8003b60 <DMA_CalcBaseAndBitshift+0x140>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d018      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <DMA_CalcBaseAndBitshift+0x144>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <DMA_CalcBaseAndBitshift+0x148>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00e      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <DMA_CalcBaseAndBitshift+0x14c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <DMA_CalcBaseAndBitshift+0x150>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <DMA_CalcBaseAndBitshift+0xa8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	; (8003b74 <DMA_CalcBaseAndBitshift+0x154>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <DMA_CalcBaseAndBitshift+0xac>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <DMA_CalcBaseAndBitshift+0xae>
 8003acc:	2300      	movs	r3, #0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d024      	beq.n	8003b1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3b10      	subs	r3, #16
 8003ada:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <DMA_CalcBaseAndBitshift+0x158>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <DMA_CalcBaseAndBitshift+0x15c>)
 8003aec:	5cd3      	ldrb	r3, [r2, r3]
 8003aee:	461a      	mov	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d908      	bls.n	8003b0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <DMA_CalcBaseAndBitshift+0x160>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	1d1a      	adds	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	659a      	str	r2, [r3, #88]	; 0x58
 8003b0a:	e00d      	b.n	8003b28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <DMA_CalcBaseAndBitshift+0x160>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6593      	str	r3, [r2, #88]	; 0x58
 8003b1a:	e005      	b.n	8003b28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40020010 	.word	0x40020010
 8003b3c:	40020028 	.word	0x40020028
 8003b40:	40020040 	.word	0x40020040
 8003b44:	40020058 	.word	0x40020058
 8003b48:	40020070 	.word	0x40020070
 8003b4c:	40020088 	.word	0x40020088
 8003b50:	400200a0 	.word	0x400200a0
 8003b54:	400200b8 	.word	0x400200b8
 8003b58:	40020410 	.word	0x40020410
 8003b5c:	40020428 	.word	0x40020428
 8003b60:	40020440 	.word	0x40020440
 8003b64:	40020458 	.word	0x40020458
 8003b68:	40020470 	.word	0x40020470
 8003b6c:	40020488 	.word	0x40020488
 8003b70:	400204a0 	.word	0x400204a0
 8003b74:	400204b8 	.word	0x400204b8
 8003b78:	aaaaaaab 	.word	0xaaaaaaab
 8003b7c:	0801145c 	.word	0x0801145c
 8003b80:	fffffc00 	.word	0xfffffc00

08003b84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d120      	bne.n	8003bda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d858      	bhi.n	8003c52 <DMA_CheckFifoParam+0xce>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <DMA_CheckFifoParam+0x24>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bcb 	.word	0x08003bcb
 8003bb0:	08003bb9 	.word	0x08003bb9
 8003bb4:	08003c53 	.word	0x08003c53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d048      	beq.n	8003c56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bc8:	e045      	b.n	8003c56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bd2:	d142      	bne.n	8003c5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bd8:	e03f      	b.n	8003c5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be2:	d123      	bne.n	8003c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d838      	bhi.n	8003c5e <DMA_CheckFifoParam+0xda>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <DMA_CheckFifoParam+0x70>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c0b 	.word	0x08003c0b
 8003bfc:	08003c05 	.word	0x08003c05
 8003c00:	08003c1d 	.word	0x08003c1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
        break;
 8003c08:	e030      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d025      	beq.n	8003c62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c1a:	e022      	b.n	8003c62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c24:	d11f      	bne.n	8003c66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c2a:	e01c      	b.n	8003c66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d902      	bls.n	8003c3a <DMA_CheckFifoParam+0xb6>
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d003      	beq.n	8003c40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c38:	e018      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c3e:	e015      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8003c50:	e00b      	b.n	8003c6a <DMA_CheckFifoParam+0xe6>
        break;
 8003c52:	bf00      	nop
 8003c54:	e00a      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
        break;
 8003c56:	bf00      	nop
 8003c58:	e008      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e006      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e004      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
        break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
        break;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <DMA_CheckFifoParam+0xe8>
    break;
 8003c6a:	bf00      	nop
    }
  }

  return status;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop

08003c7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d022      	beq.n	8003cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a36      	ldr	r2, [pc, #216]	; (8003d74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a35      	ldr	r2, [pc, #212]	; (8003d78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d018      	beq.n	8003cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a32      	ldr	r2, [pc, #200]	; (8003d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00e      	beq.n	8003cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a30      	ldr	r2, [pc, #192]	; (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2d      	ldr	r2, [pc, #180]	; (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01a      	beq.n	8003d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3b08      	subs	r3, #8
 8003cec:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2201      	movs	r2, #1
 8003d12:	409a      	lsls	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d18:	e024      	b.n	8003d64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3b10      	subs	r3, #16
 8003d22:	4a1e      	ldr	r2, [pc, #120]	; (8003d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d806      	bhi.n	8003d42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d902      	bls.n	8003d42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3308      	adds	r3, #8
 8003d40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a16      	ldr	r2, [pc, #88]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	58025408 	.word	0x58025408
 8003d74:	5802541c 	.word	0x5802541c
 8003d78:	58025430 	.word	0x58025430
 8003d7c:	58025444 	.word	0x58025444
 8003d80:	58025458 	.word	0x58025458
 8003d84:	5802546c 	.word	0x5802546c
 8003d88:	58025480 	.word	0x58025480
 8003d8c:	58025494 	.word	0x58025494
 8003d90:	cccccccd 	.word	0xcccccccd
 8003d94:	16009600 	.word	0x16009600
 8003d98:	58025880 	.word	0x58025880
 8003d9c:	aaaaaaab 	.word	0xaaaaaaab
 8003da0:	400204b8 	.word	0x400204b8
 8003da4:	4002040f 	.word	0x4002040f
 8003da8:	10008200 	.word	0x10008200
 8003dac:	40020880 	.word	0x40020880

08003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d04a      	beq.n	8003e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d847      	bhi.n	8003e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d022      	beq.n	8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d01d      	beq.n	8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d018      	beq.n	8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d009      	beq.n	8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e20:	2300      	movs	r3, #0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e38:	671a      	str	r2, [r3, #112]	; 0x70
 8003e3a:	e009      	b.n	8003e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	2201      	movs	r2, #1
 8003e56:	409a      	lsls	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	58025408 	.word	0x58025408
 8003e6c:	5802541c 	.word	0x5802541c
 8003e70:	58025430 	.word	0x58025430
 8003e74:	58025444 	.word	0x58025444
 8003e78:	58025458 	.word	0x58025458
 8003e7c:	5802546c 	.word	0x5802546c
 8003e80:	58025480 	.word	0x58025480
 8003e84:	58025494 	.word	0x58025494
 8003e88:	1600963f 	.word	0x1600963f
 8003e8c:	58025940 	.word	0x58025940
 8003e90:	1000823f 	.word	0x1000823f
 8003e94:	40020940 	.word	0x40020940

08003e98 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b098      	sub	sp, #96	; 0x60
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003ea0:	4a84      	ldr	r2, [pc, #528]	; (80040b4 <HAL_FDCAN_Init+0x21c>)
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	224c      	movs	r2, #76	; 0x4c
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f00c f918 	bl	80100e0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1ca      	b.n	8004250 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7e      	ldr	r2, [pc, #504]	; (80040b8 <HAL_FDCAN_Init+0x220>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d106      	bne.n	8003ed2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd f9b4 	bl	8001254 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0210 	bic.w	r2, r2, #16
 8003efa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003efc:	f7fd fdaa 	bl	8001a54 <HAL_GetTick>
 8003f00:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f02:	e014      	b.n	8003f2e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f04:	f7fd fda6 	bl	8001a54 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b0a      	cmp	r3, #10
 8003f10:	d90d      	bls.n	8003f2e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f18:	f043 0201 	orr.w	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2203      	movs	r2, #3
 8003f26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e190      	b.n	8004250 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d0e3      	beq.n	8003f04 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4c:	f7fd fd82 	bl	8001a54 <HAL_GetTick>
 8003f50:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f52:	e014      	b.n	8003f7e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003f54:	f7fd fd7e 	bl	8001a54 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b0a      	cmp	r3, #10
 8003f60:	d90d      	bls.n	8003f7e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2203      	movs	r2, #3
 8003f76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e168      	b.n	8004250 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0e3      	beq.n	8003f54 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0202 	orr.w	r2, r2, #2
 8003f9a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7c1b      	ldrb	r3, [r3, #16]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d108      	bne.n	8003fb6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb2:	619a      	str	r2, [r3, #24]
 8003fb4:	e007      	b.n	8003fc6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7c5b      	ldrb	r3, [r3, #17]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d108      	bne.n	8003fe0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fdc:	619a      	str	r2, [r3, #24]
 8003fde:	e007      	b.n	8003ff0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fee:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7c9b      	ldrb	r3, [r3, #18]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d108      	bne.n	800400a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004006:	619a      	str	r2, [r3, #24]
 8004008:	e007      	b.n	800401a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699a      	ldr	r2, [r3, #24]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004018:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800403e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0210 	bic.w	r2, r2, #16
 800404e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d108      	bne.n	800406a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0204 	orr.w	r2, r2, #4
 8004066:	619a      	str	r2, [r3, #24]
 8004068:	e030      	b.n	80040cc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02c      	beq.n	80040cc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d020      	beq.n	80040bc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004088:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0210 	orr.w	r2, r2, #16
 8004098:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d114      	bne.n	80040cc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0220 	orr.w	r2, r2, #32
 80040b0:	619a      	str	r2, [r3, #24]
 80040b2:	e00b      	b.n	80040cc <HAL_FDCAN_Init+0x234>
 80040b4:	080113a8 	.word	0x080113a8
 80040b8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0220 	orr.w	r2, r2, #32
 80040ca:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	3b01      	subs	r3, #1
 80040da:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040dc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80040e4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80040f4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80040f6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004100:	d115      	bne.n	800412e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	3b01      	subs	r3, #1
 800410e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004110:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	3b01      	subs	r3, #1
 8004118:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800411a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	3b01      	subs	r3, #1
 8004124:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800412a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800412c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004154:	4413      	add	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004162:	f023 0107 	bic.w	r1, r3, #7
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004170:	4413      	add	r3, r2
 8004172:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004190:	f023 0107 	bic.w	r1, r3, #7
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800419e:	4413      	add	r3, r2
 80041a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d013      	beq.n	80041de <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041be:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041cc:	4413      	add	r3, r2
 80041ce:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80041d2:	011a      	lsls	r2, r3, #4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d013      	beq.n	800420e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041ee:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041fc:	4413      	add	r3, r2
 80041fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004202:	021a      	lsls	r2, r3, #8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a11      	ldr	r2, [pc, #68]	; (8004258 <HAL_FDCAN_Init+0x3c0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d107      	bne.n	8004228 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f022 0203 	bic.w	r2, r2, #3
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f80b 	bl	800425c <FDCAN_CalcultateRamBlockAddresses>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800424c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004250:	4618      	mov	r0, r3
 8004252:	3760      	adds	r7, #96	; 0x60
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	4000a000 	.word	0x4000a000

0800425c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004268:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004272:	4ba7      	ldr	r3, [pc, #668]	; (8004510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004274:	4013      	ands	r3, r2
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	0091      	lsls	r1, r2, #2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	430b      	orrs	r3, r1
 8004280:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	041a      	lsls	r2, r3, #16
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	4413      	add	r3, r2
 80042a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042b2:	4b97      	ldr	r3, [pc, #604]	; (8004510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	0091      	lsls	r1, r2, #2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	430b      	orrs	r3, r1
 80042c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	041a      	lsls	r2, r3, #16
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4413      	add	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80042f4:	4b86      	ldr	r3, [pc, #536]	; (8004510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	0091      	lsls	r1, r2, #2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800430e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	041a      	lsls	r2, r3, #16
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	4413      	add	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800433c:	4b74      	ldr	r3, [pc, #464]	; (8004510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800433e:	4013      	ands	r3, r2
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	0091      	lsls	r1, r2, #2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	430b      	orrs	r3, r1
 800434a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004356:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435e:	041a      	lsls	r2, r3, #16
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4413      	add	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004384:	4b62      	ldr	r3, [pc, #392]	; (8004510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004386:	4013      	ands	r3, r2
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	0091      	lsls	r1, r2, #2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4413      	add	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80043b0:	4b57      	ldr	r3, [pc, #348]	; (8004510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	0091      	lsls	r1, r2, #2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	430b      	orrs	r3, r1
 80043be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	041a      	lsls	r2, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	4413      	add	r3, r2
 80043e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043f2:	4b47      	ldr	r3, [pc, #284]	; (8004510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	0091      	lsls	r1, r2, #2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	430b      	orrs	r3, r1
 8004400:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800440c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	041a      	lsls	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004428:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004430:	061a      	lsls	r2, r3, #24
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004440:	4b34      	ldr	r3, [pc, #208]	; (8004514 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004442:	4413      	add	r3, r2
 8004444:	009a      	lsls	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	441a      	add	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	441a      	add	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d915      	bls.n	8004538 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800450c:	e006      	b.n	800451c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800450e:	bf00      	nop
 8004510:	ffff0003 	.word	0xffff0003
 8004514:	10002b00 	.word	0x10002b00
 8004518:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2203      	movs	r2, #3
 8004530:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e010      	b.n	800455a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e005      	b.n	800454c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3304      	adds	r3, #4
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	429a      	cmp	r2, r3
 8004556:	d3f3      	bcc.n	8004540 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop

08004568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004576:	4b89      	ldr	r3, [pc, #548]	; (800479c <HAL_GPIO_Init+0x234>)
 8004578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800457a:	e194      	b.n	80048a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8186 	beq.w	80048a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d00b      	beq.n	80045b4 <HAL_GPIO_Init+0x4c>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d007      	beq.n	80045b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045a8:	2b11      	cmp	r3, #17
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b12      	cmp	r3, #18
 80045b2:	d130      	bne.n	8004616 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	2203      	movs	r2, #3
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ea:	2201      	movs	r2, #1
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0201 	and.w	r2, r3, #1
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	2203      	movs	r2, #3
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_Init+0xee>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b12      	cmp	r3, #18
 8004654:	d123      	bne.n	800469e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	08da      	lsrs	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3208      	adds	r2, #8
 800465e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	220f      	movs	r2, #15
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4013      	ands	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	08da      	lsrs	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3208      	adds	r2, #8
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	2203      	movs	r2, #3
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0203 	and.w	r2, r3, #3
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80e0 	beq.w	80048a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e0:	4b2f      	ldr	r3, [pc, #188]	; (80047a0 <HAL_GPIO_Init+0x238>)
 80046e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046e6:	4a2e      	ldr	r2, [pc, #184]	; (80047a0 <HAL_GPIO_Init+0x238>)
 80046e8:	f043 0302 	orr.w	r3, r3, #2
 80046ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_GPIO_Init+0x238>)
 80046f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046fe:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <HAL_GPIO_Init+0x23c>)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	3302      	adds	r3, #2
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a20      	ldr	r2, [pc, #128]	; (80047a8 <HAL_GPIO_Init+0x240>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d052      	beq.n	80047d0 <HAL_GPIO_Init+0x268>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <HAL_GPIO_Init+0x244>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d031      	beq.n	8004796 <HAL_GPIO_Init+0x22e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_GPIO_Init+0x248>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d02b      	beq.n	8004792 <HAL_GPIO_Init+0x22a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_GPIO_Init+0x24c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d025      	beq.n	800478e <HAL_GPIO_Init+0x226>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <HAL_GPIO_Init+0x250>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01f      	beq.n	800478a <HAL_GPIO_Init+0x222>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <HAL_GPIO_Init+0x254>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d019      	beq.n	8004786 <HAL_GPIO_Init+0x21e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <HAL_GPIO_Init+0x258>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_GPIO_Init+0x21a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <HAL_GPIO_Init+0x25c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00d      	beq.n	800477e <HAL_GPIO_Init+0x216>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_GPIO_Init+0x260>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <HAL_GPIO_Init+0x212>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_GPIO_Init+0x264>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d101      	bne.n	8004776 <HAL_GPIO_Init+0x20e>
 8004772:	2309      	movs	r3, #9
 8004774:	e02d      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 8004776:	230a      	movs	r3, #10
 8004778:	e02b      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 800477a:	2308      	movs	r3, #8
 800477c:	e029      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 800477e:	2307      	movs	r3, #7
 8004780:	e027      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 8004782:	2306      	movs	r3, #6
 8004784:	e025      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 8004786:	2305      	movs	r3, #5
 8004788:	e023      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 800478a:	2304      	movs	r3, #4
 800478c:	e021      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 800478e:	2303      	movs	r3, #3
 8004790:	e01f      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 8004792:	2302      	movs	r3, #2
 8004794:	e01d      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 8004796:	2301      	movs	r3, #1
 8004798:	e01b      	b.n	80047d2 <HAL_GPIO_Init+0x26a>
 800479a:	bf00      	nop
 800479c:	58000080 	.word	0x58000080
 80047a0:	58024400 	.word	0x58024400
 80047a4:	58000400 	.word	0x58000400
 80047a8:	58020000 	.word	0x58020000
 80047ac:	58020400 	.word	0x58020400
 80047b0:	58020800 	.word	0x58020800
 80047b4:	58020c00 	.word	0x58020c00
 80047b8:	58021000 	.word	0x58021000
 80047bc:	58021400 	.word	0x58021400
 80047c0:	58021800 	.word	0x58021800
 80047c4:	58021c00 	.word	0x58021c00
 80047c8:	58022000 	.word	0x58022000
 80047cc:	58022400 	.word	0x58022400
 80047d0:	2300      	movs	r3, #0
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	f002 0203 	and.w	r2, r2, #3
 80047d8:	0092      	lsls	r2, r2, #2
 80047da:	4093      	lsls	r3, r2
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e2:	4938      	ldr	r1, [pc, #224]	; (80048c4 <HAL_GPIO_Init+0x35c>)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800486a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f ae63 	bne.w	800457c <HAL_GPIO_Init+0x14>
  }
}
 80048b6:	bf00      	nop
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	58000400 	.word	0x58000400

080048c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e001      	b.n	80048ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]
 8004904:	4613      	mov	r3, r2
 8004906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004908:	787b      	ldrb	r3, [r7, #1]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004914:	e003      	b.n	800491e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	041a      	lsls	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	887b      	ldrh	r3, [r7, #2]
 800493c:	401a      	ands	r2, r3
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	429a      	cmp	r2, r3
 8004942:	d104      	bne.n	800494e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	041a      	lsls	r2, r3, #16
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800494c:	e002      	b.n	8004954 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	619a      	str	r2, [r3, #24]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004962:	b08f      	sub	sp, #60	; 0x3c
 8004964:	af0a      	add	r7, sp, #40	; 0x28
 8004966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e116      	b.n	8004ba0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f00b f86f 	bl	800fa70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2203      	movs	r2, #3
 8004996:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f007 fea0 	bl	800c6f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	687e      	ldr	r6, [r7, #4]
 80049be:	466d      	mov	r5, sp
 80049c0:	f106 0410 	add.w	r4, r6, #16
 80049c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80049d4:	1d33      	adds	r3, r6, #4
 80049d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d8:	6838      	ldr	r0, [r7, #0]
 80049da:	f007 fd77 	bl	800c4cc <USB_CoreInit>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0d7      	b.n	8004ba0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f007 fe8e 	bl	800c718 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	73fb      	strb	r3, [r7, #15]
 8004a00:	e04a      	b.n	8004a98 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a02:	7bfa      	ldrb	r2, [r7, #15]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	333d      	adds	r3, #61	; 0x3d
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a16:	7bfa      	ldrb	r2, [r7, #15]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	333c      	adds	r3, #60	; 0x3c
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	b298      	uxth	r0, r3
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3342      	adds	r3, #66	; 0x42
 8004a3e:	4602      	mov	r2, r0
 8004a40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a42:	7bfa      	ldrb	r2, [r7, #15]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	333f      	adds	r3, #63	; 0x3f
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3344      	adds	r3, #68	; 0x44
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3348      	adds	r3, #72	; 0x48
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3350      	adds	r3, #80	; 0x50
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	3301      	adds	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d3af      	bcc.n	8004a02 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
 8004aa6:	e044      	b.n	8004b32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aa8:	7bfa      	ldrb	r2, [r7, #15]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004ad0:	7bfa      	ldrb	r2, [r7, #15]
 8004ad2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ad4:	7bfa      	ldrb	r2, [r7, #15]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004aea:	7bfa      	ldrb	r2, [r7, #15]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d3b5      	bcc.n	8004aa8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	687e      	ldr	r6, [r7, #4]
 8004b44:	466d      	mov	r5, sp
 8004b46:	f106 0410 	add.w	r4, r6, #16
 8004b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b56:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b5a:	1d33      	adds	r3, r6, #4
 8004b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b5e:	6838      	ldr	r0, [r7, #0]
 8004b60:	f007 fe04 	bl	800c76c <USB_DevInit>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e014      	b.n	8004ba0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d102      	bne.n	8004b94 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f001 f892 	bl	8005cb8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f008 fe43 	bl	800d824 <USB_DevDisconnect>

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ba8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_PCD_Start+0x1c>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e020      	b.n	8004c06 <HAL_PCD_Start+0x5e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d109      	bne.n	8004be8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d005      	beq.n	8004be8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f008 fe01 	bl	800d7f4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f007 fd6c 	bl	800c6d4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c0e:	b590      	push	{r4, r7, lr}
 8004c10:	b08d      	sub	sp, #52	; 0x34
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f008 fea8 	bl	800d97a <USB_GetMode>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 83ca 	bne.w	80053c6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f008 fe0c 	bl	800d854 <USB_ReadInterrupts>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 83c0 	beq.w	80053c4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f008 fe03 	bl	800d854 <USB_ReadInterrupts>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d107      	bne.n	8004c68 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f002 0202 	and.w	r2, r2, #2
 8004c66:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f008 fdf1 	bl	800d854 <USB_ReadInterrupts>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d161      	bne.n	8004d40 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0210 	bic.w	r2, r2, #16
 8004c8a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3304      	adds	r3, #4
 8004caa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	0c5b      	lsrs	r3, r3, #17
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d124      	bne.n	8004d02 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d035      	beq.n	8004d30 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6a38      	ldr	r0, [r7, #32]
 8004cd8:	f008 fc69 	bl	800d5ae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ce8:	441a      	add	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cfa:	441a      	add	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	619a      	str	r2, [r3, #24]
 8004d00:	e016      	b.n	8004d30 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	0c5b      	lsrs	r3, r3, #17
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d110      	bne.n	8004d30 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d14:	2208      	movs	r2, #8
 8004d16:	4619      	mov	r1, r3
 8004d18:	6a38      	ldr	r0, [r7, #32]
 8004d1a:	f008 fc48 	bl	800d5ae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d2a:	441a      	add	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0210 	orr.w	r2, r2, #16
 8004d3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f008 fd85 	bl	800d854 <USB_ReadInterrupts>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d54:	d16e      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f008 fd8b 	bl	800d87a <USB_ReadDevAllOutEpInterrupt>
 8004d64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d66:	e062      	b.n	8004e2e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d057      	beq.n	8004e22 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f008 fdb0 	bl	800d8e2 <USB_ReadDevOutEPInterrupt>
 8004d82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fdde 	bl	8005964 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00c      	beq.n	8004dcc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2308      	movs	r3, #8
 8004dc2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fed8 	bl	8005b7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	461a      	mov	r2, r3
 8004de4:	2310      	movs	r3, #16
 8004de6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfe:	461a      	mov	r2, r3
 8004e00:	2320      	movs	r3, #32
 8004e02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e20:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	3301      	adds	r3, #1
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d199      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f008 fd0b 	bl	800d854 <USB_ReadInterrupts>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e48:	f040 80c0 	bne.w	8004fcc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f008 fd2c 	bl	800d8ae <USB_ReadDevAllInEpInterrupt>
 8004e56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004e5c:	e0b2      	b.n	8004fc4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a7 	beq.w	8004fb8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	4611      	mov	r1, r2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f008 fd52 	bl	800d91e <USB_ReadDevInEPInterrupt>
 8004e7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d057      	beq.n	8004f36 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2301      	movs	r3, #1
 8004eba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d132      	bne.n	8004f2a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	4613      	mov	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	3348      	adds	r3, #72	; 0x48
 8004ed4:	6819      	ldr	r1, [r3, #0]
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4403      	add	r3, r0
 8004ee4:	3344      	adds	r3, #68	; 0x44
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4419      	add	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	4613      	mov	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4403      	add	r3, r0
 8004ef8:	3348      	adds	r3, #72	; 0x48
 8004efa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d113      	bne.n	8004f2a <HAL_PCD_IRQHandler+0x31c>
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3350      	adds	r3, #80	; 0x50
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f22:	461a      	mov	r2, r3
 8004f24:	2101      	movs	r1, #1
 8004f26:	f008 fd5b 	bl	800d9e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f00a fe1c 	bl	800fb6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2308      	movs	r3, #8
 8004f50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2310      	movs	r3, #16
 8004f6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	461a      	mov	r2, r3
 8004f86:	2340      	movs	r3, #64	; 0x40
 8004f88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fc48 	bl	8005848 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	3301      	adds	r3, #1
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f47f af49 	bne.w	8004e5e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f008 fc3f 	bl	800d854 <USB_ReadInterrupts>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe0:	d122      	bne.n	8005028 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d108      	bne.n	8005012 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005008:	2100      	movs	r1, #0
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fe78 	bl	8005d00 <HAL_PCDEx_LPM_Callback>
 8005010:	e002      	b.n	8005018 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f00a fe22 	bl	800fc5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005026:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f008 fc11 	bl	800d854 <USB_ReadInterrupts>
 8005032:	4603      	mov	r3, r0
 8005034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503c:	d112      	bne.n	8005064 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d102      	bne.n	8005054 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f00a fdde 	bl	800fc10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005062:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f008 fbf3 	bl	800d854 <USB_ReadInterrupts>
 800506e:	4603      	mov	r3, r0
 8005070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005078:	d121      	bne.n	80050be <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005088:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d111      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050ae:	2101      	movs	r1, #1
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fe25 	bl	8005d00 <HAL_PCDEx_LPM_Callback>
 80050b6:	e002      	b.n	80050be <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f00a fda9 	bl	800fc10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f008 fbc6 	bl	800d854 <USB_ReadInterrupts>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	f040 80c7 	bne.w	8005264 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2110      	movs	r1, #16
 80050f0:	4618      	mov	r0, r3
 80050f2:	f007 fc99 	bl	800ca28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fa:	e056      	b.n	80051aa <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005108:	461a      	mov	r2, r3
 800510a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800510e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800512e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800514e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	461a      	mov	r2, r3
 800515e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005162:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005182:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	3301      	adds	r3, #1
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d3a3      	bcc.n	80050fc <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80051c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d016      	beq.n	80051fe <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e0:	f043 030b 	orr.w	r3, r3, #11
 80051e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f6:	f043 030b 	orr.w	r3, r3, #11
 80051fa:	6453      	str	r3, [r2, #68]	; 0x44
 80051fc:	e015      	b.n	800522a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	4619      	mov	r1, r3
 800520e:	f242 032b 	movw	r3, #8235	; 0x202b
 8005212:	4313      	orrs	r3, r2
 8005214:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005224:	f043 030b 	orr.w	r3, r3, #11
 8005228:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005238:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800523c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800524e:	461a      	mov	r2, r3
 8005250:	f008 fbc6 	bl	800d9e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005262:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f008 faf3 	bl	800d854 <USB_ReadInterrupts>
 800526e:	4603      	mov	r3, r0
 8005270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005278:	d124      	bne.n	80052c4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f008 fb8a 	bl	800d998 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f007 fc2e 	bl	800caea <USB_GetDevSpeed>
 800528e:	4603      	mov	r3, r0
 8005290:	461a      	mov	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681c      	ldr	r4, [r3, #0]
 800529a:	f001 fcbf 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 800529e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	4620      	mov	r0, r4
 80052aa:	f007 f971 	bl	800c590 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f00a fc85 	bl	800fbbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695a      	ldr	r2, [r3, #20]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80052c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f008 fac3 	bl	800d854 <USB_ReadInterrupts>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d10a      	bne.n	80052ee <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f00a fc62 	bl	800fba2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f002 0208 	and.w	r2, r2, #8
 80052ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f008 faae 	bl	800d854 <USB_ReadInterrupts>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005302:	d10f      	bne.n	8005324 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	b2db      	uxtb	r3, r3
 800530c:	4619      	mov	r1, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f00a fcc4 	bl	800fc9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f008 fa93 	bl	800d854 <USB_ReadInterrupts>
 800532e:	4603      	mov	r3, r0
 8005330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005338:	d10f      	bne.n	800535a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	b2db      	uxtb	r3, r3
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f00a fc97 	bl	800fc78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f008 fa78 	bl	800d854 <USB_ReadInterrupts>
 8005364:	4603      	mov	r3, r0
 8005366:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536e:	d10a      	bne.n	8005386 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f00a fca5 	bl	800fcc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f008 fa62 	bl	800d854 <USB_ReadInterrupts>
 8005390:	4603      	mov	r3, r0
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b04      	cmp	r3, #4
 8005398:	d115      	bne.n	80053c6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f00a fc95 	bl	800fcdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	e000      	b.n	80053c6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80053c4:	bf00      	nop
    }
  }
}
 80053c6:	3734      	adds	r7, #52	; 0x34
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd90      	pop	{r4, r7, pc}

080053cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_PCD_SetAddress+0x1a>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e013      	b.n	800540e <HAL_PCD_SetAddress+0x42>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f008 f9d2 	bl	800d7a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	4608      	mov	r0, r1
 8005420:	4611      	mov	r1, r2
 8005422:	461a      	mov	r2, r3
 8005424:	4603      	mov	r3, r0
 8005426:	70fb      	strb	r3, [r7, #3]
 8005428:	460b      	mov	r3, r1
 800542a:	803b      	strh	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005438:	2b00      	cmp	r3, #0
 800543a:	da0f      	bge.n	800545c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	f003 020f 	and.w	r2, r3, #15
 8005442:	4613      	mov	r3, r2
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	3338      	adds	r3, #56	; 0x38
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4413      	add	r3, r2
 8005450:	3304      	adds	r3, #4
 8005452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	705a      	strb	r2, [r3, #1]
 800545a:	e00f      	b.n	800547c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	4613      	mov	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	3304      	adds	r3, #4
 8005474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	b2da      	uxtb	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005488:	883a      	ldrh	r2, [r7, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	78ba      	ldrb	r2, [r7, #2]
 8005492:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054a6:	78bb      	ldrb	r3, [r7, #2]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d102      	bne.n	80054b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_PCD_EP_Open+0xaa>
 80054bc:	2302      	movs	r3, #2
 80054be:	e00e      	b.n	80054de <HAL_PCD_EP_Open+0xc8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f007 fb30 	bl	800cb34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80054dc:	7afb      	ldrb	r3, [r7, #11]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da0f      	bge.n	800551a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	3338      	adds	r3, #56	; 0x38
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	3304      	adds	r3, #4
 8005510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	705a      	strb	r2, [r3, #1]
 8005518:	e00f      	b.n	800553a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	3304      	adds	r3, #4
 8005532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_PCD_EP_Close+0x6e>
 8005550:	2302      	movs	r3, #2
 8005552:	e00e      	b.n	8005572 <HAL_PCD_EP_Close+0x8c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68f9      	ldr	r1, [r7, #12]
 8005562:	4618      	mov	r0, r3
 8005564:	f007 fb6e 	bl	800cc44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	460b      	mov	r3, r1
 8005588:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800558a:	7afb      	ldrb	r3, [r7, #11]
 800558c:	f003 020f 	and.w	r2, r3, #15
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	3304      	adds	r3, #4
 80055a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2200      	movs	r2, #0
 80055b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055bc:	7afb      	ldrb	r3, [r7, #11]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d102      	bne.n	80055d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055d6:	7afb      	ldrb	r3, [r7, #11]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	6979      	ldr	r1, [r7, #20]
 80055ee:	f007 fe51 	bl	800d294 <USB_EP0StartXfer>
 80055f2:	e008      	b.n	8005606 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	6979      	ldr	r1, [r7, #20]
 8005602:	f007 fbfb 	bl	800cdfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005632:	681b      	ldr	r3, [r3, #0]
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	460b      	mov	r3, r1
 800564e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005650:	7afb      	ldrb	r3, [r7, #11]
 8005652:	f003 020f 	and.w	r2, r3, #15
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	3338      	adds	r3, #56	; 0x38
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	3304      	adds	r3, #4
 8005666:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2200      	movs	r2, #0
 8005678:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2201      	movs	r2, #1
 800567e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005680:	7afb      	ldrb	r3, [r7, #11]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	b2da      	uxtb	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d102      	bne.n	800569a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800569a:	7afb      	ldrb	r3, [r7, #11]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	6979      	ldr	r1, [r7, #20]
 80056b2:	f007 fdef 	bl	800d294 <USB_EP0StartXfer>
 80056b6:	e008      	b.n	80056ca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	6979      	ldr	r1, [r7, #20]
 80056c6:	f007 fb99 	bl	800cdfc <USB_EPStartXfer>
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	f003 020f 	and.w	r2, r3, #15
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d901      	bls.n	80056f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e050      	b.n	8005794 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	da0f      	bge.n	800571a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	f003 020f 	and.w	r2, r3, #15
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	3338      	adds	r3, #56	; 0x38
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	3304      	adds	r3, #4
 8005710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	705a      	strb	r2, [r3, #1]
 8005718:	e00d      	b.n	8005736 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800571a:	78fa      	ldrb	r2, [r7, #3]
 800571c:	4613      	mov	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	4413      	add	r3, r2
 800572c:	3304      	adds	r3, #4
 800572e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_PCD_EP_SetStall+0x82>
 8005752:	2302      	movs	r3, #2
 8005754:	e01e      	b.n	8005794 <HAL_PCD_EP_SetStall+0xc0>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	4618      	mov	r0, r3
 8005766:	f007 ff4b 	bl	800d600 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	b2d9      	uxtb	r1, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005784:	461a      	mov	r2, r3
 8005786:	f008 f92b 	bl	800d9e0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	f003 020f 	and.w	r2, r3, #15
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d901      	bls.n	80057ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e042      	b.n	8005840 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da0f      	bge.n	80057e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	3338      	adds	r3, #56	; 0x38
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	4413      	add	r3, r2
 80057d6:	3304      	adds	r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	705a      	strb	r2, [r3, #1]
 80057e0:	e00f      	b.n	8005802 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	1a9b      	subs	r3, r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	3304      	adds	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_PCD_EP_ClrStall+0x86>
 800581e:	2302      	movs	r3, #2
 8005820:	e00e      	b.n	8005840 <HAL_PCD_EP_ClrStall+0xa4>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	4618      	mov	r0, r3
 8005832:	f007 ff53 	bl	800d6dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	; 0x28
 800584c:	af02      	add	r7, sp, #8
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	3338      	adds	r3, #56	; 0x38
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	3304      	adds	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	d901      	bls.n	8005880 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e06c      	b.n	800595a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	429a      	cmp	r2, r3
 8005894:	d902      	bls.n	800589c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	3303      	adds	r3, #3
 80058a0:	089b      	lsrs	r3, r3, #2
 80058a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058a4:	e02b      	b.n	80058fe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d902      	bls.n	80058c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3303      	adds	r3, #3
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68d9      	ldr	r1, [r3, #12]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	4603      	mov	r3, r0
 80058e0:	6978      	ldr	r0, [r7, #20]
 80058e2:	f007 fe2f 	bl	800d544 <USB_WritePacket>

    ep->xfer_buff  += len;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	441a      	add	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	441a      	add	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	b29b      	uxth	r3, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	429a      	cmp	r2, r3
 8005912:	d809      	bhi.n	8005928 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800591c:	429a      	cmp	r2, r3
 800591e:	d203      	bcs.n	8005928 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1be      	bne.n	80058a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	429a      	cmp	r2, r3
 8005932:	d811      	bhi.n	8005958 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	2201      	movs	r2, #1
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	43db      	mvns	r3, r3
 800594e:	6939      	ldr	r1, [r7, #16]
 8005950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005954:	4013      	ands	r3, r2
 8005956:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	333c      	adds	r3, #60	; 0x3c
 800597c:	3304      	adds	r3, #4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b01      	cmp	r3, #1
 8005998:	f040 80a0 	bne.w	8005adc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d015      	beq.n	80059d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a72      	ldr	r2, [pc, #456]	; (8005b74 <PCD_EP_OutXfrComplete_int+0x210>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	f240 80dd 	bls.w	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80d7 	beq.w	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	461a      	mov	r2, r3
 80059ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ce:	6093      	str	r3, [r2, #8]
 80059d0:	e0cb      	b.n	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	461a      	mov	r2, r3
 80059ea:	2320      	movs	r3, #32
 80059ec:	6093      	str	r3, [r2, #8]
 80059ee:	e0bc      	b.n	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 80b7 	bne.w	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a5d      	ldr	r2, [pc, #372]	; (8005b74 <PCD_EP_OutXfrComplete_int+0x210>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d90f      	bls.n	8005a24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a20:	6093      	str	r3, [r2, #8]
 8005a22:	e0a2      	b.n	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	0159      	lsls	r1, r3, #5
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	440b      	add	r3, r1
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005a4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4403      	add	r3, r0
 8005a5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005a5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a72:	6819      	ldr	r1, [r3, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4403      	add	r3, r0
 8005a82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4419      	add	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4403      	add	r3, r0
 8005a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d114      	bne.n	8005ace <PCD_EP_OutXfrComplete_int+0x16a>
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d108      	bne.n	8005ace <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2101      	movs	r1, #1
 8005aca:	f007 ff89 	bl	800d9e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f00a f82f 	bl	800fb38 <HAL_PCD_DataOutStageCallback>
 8005ada:	e046      	b.n	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a26      	ldr	r2, [pc, #152]	; (8005b78 <PCD_EP_OutXfrComplete_int+0x214>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d124      	bne.n	8005b2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	461a      	mov	r2, r3
 8005afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b00:	6093      	str	r3, [r2, #8]
 8005b02:	e032      	b.n	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f00a f806 	bl	800fb38 <HAL_PCD_DataOutStageCallback>
 8005b2c:	e01d      	b.n	8005b6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d114      	bne.n	8005b5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b56:	461a      	mov	r2, r3
 8005b58:	2100      	movs	r1, #0
 8005b5a:	f007 ff41 	bl	800d9e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f009 ffe7 	bl	800fb38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	4f54300a 	.word	0x4f54300a
 8005b78:	4f54310a 	.word	0x4f54310a

08005b7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	333c      	adds	r3, #60	; 0x3c
 8005b94:	3304      	adds	r3, #4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a15      	ldr	r2, [pc, #84]	; (8005c04 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d90e      	bls.n	8005bd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f009 ff9f 	bl	800fb14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a0a      	ldr	r2, [pc, #40]	; (8005c04 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d90c      	bls.n	8005bf8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d108      	bne.n	8005bf8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	f007 fef4 	bl	800d9e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	4f54300a 	.word	0x4f54300a

08005c08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
 8005c14:	4613      	mov	r3, r2
 8005c16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d107      	bne.n	8005c36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c26:	883b      	ldrh	r3, [r7, #0]
 8005c28:	0419      	lsls	r1, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28
 8005c34:	e028      	b.n	8005c88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	4413      	add	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
 8005c48:	e00d      	b.n	8005c66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	3340      	adds	r3, #64	; 0x40
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	3301      	adds	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
 8005c66:	7bfa      	ldrb	r2, [r7, #15]
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d3ec      	bcc.n	8005c4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c70:	883b      	ldrh	r3, [r7, #0]
 8005c72:	0418      	lsls	r0, r3, #16
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6819      	ldr	r1, [r3, #0]
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4302      	orrs	r2, r0
 8005c80:	3340      	adds	r3, #64	; 0x40
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	887a      	ldrh	r2, [r7, #2]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_PCDEx_ActivateLPM+0x44>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	10000003 	.word	0x10000003

08005d00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d20:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d00a      	beq.n	8005d42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d2c:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d001      	beq.n	8005d3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e01f      	b.n	8005d7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e01d      	b.n	8005d7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f023 0207 	bic.w	r2, r3, #7
 8005d4a:	490f      	ldr	r1, [pc, #60]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d52:	f7fb fe7f 	bl	8001a54 <HAL_GetTick>
 8005d56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d58:	e009      	b.n	8005d6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d5a:	f7fb fe7b 	bl	8001a54 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d68:	d901      	bls.n	8005d6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e007      	b.n	8005d7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <HAL_PWREx_ConfigSupply+0x70>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7a:	d1ee      	bne.n	8005d5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	58024800 	.word	0x58024800

08005d8c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d9a:	60d3      	str	r3, [r2, #12]
}
 8005d9c:	bf00      	nop
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	58024800 	.word	0x58024800

08005dac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e3ff      	b.n	80065be <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8087 	beq.w	8005eda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dcc:	4b99      	ldr	r3, [pc, #612]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dd6:	4b97      	ldr	r3, [pc, #604]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d007      	beq.n	8005df2 <HAL_RCC_OscConfig+0x46>
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	2b18      	cmp	r3, #24
 8005de6:	d110      	bne.n	8005e0a <HAL_RCC_OscConfig+0x5e>
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d10b      	bne.n	8005e0a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df2:	4b90      	ldr	r3, [pc, #576]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d06c      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x12c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d168      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e3d9      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e12:	d106      	bne.n	8005e22 <HAL_RCC_OscConfig+0x76>
 8005e14:	4b87      	ldr	r3, [pc, #540]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a86      	ldr	r2, [pc, #536]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	e02e      	b.n	8005e80 <HAL_RCC_OscConfig+0xd4>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10c      	bne.n	8005e44 <HAL_RCC_OscConfig+0x98>
 8005e2a:	4b82      	ldr	r3, [pc, #520]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a81      	ldr	r2, [pc, #516]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b7f      	ldr	r3, [pc, #508]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a7e      	ldr	r2, [pc, #504]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e01d      	b.n	8005e80 <HAL_RCC_OscConfig+0xd4>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCC_OscConfig+0xbc>
 8005e4e:	4b79      	ldr	r3, [pc, #484]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a78      	ldr	r2, [pc, #480]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	4b76      	ldr	r3, [pc, #472]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a75      	ldr	r2, [pc, #468]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e00b      	b.n	8005e80 <HAL_RCC_OscConfig+0xd4>
 8005e68:	4b72      	ldr	r3, [pc, #456]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a71      	ldr	r2, [pc, #452]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4b6f      	ldr	r3, [pc, #444]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a6e      	ldr	r2, [pc, #440]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fb fde4 	bl	8001a54 <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fb fde0 	bl	8001a54 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e38d      	b.n	80065be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ea2:	4b64      	ldr	r3, [pc, #400]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0xe4>
 8005eae:	e014      	b.n	8005eda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fb fdd0 	bl	8001a54 <HAL_GetTick>
 8005eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb8:	f7fb fdcc 	bl	8001a54 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	; 0x64
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e379      	b.n	80065be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eca:	4b5a      	ldr	r3, [pc, #360]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x10c>
 8005ed6:	e000      	b.n	8005eda <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80ae 	beq.w	8006044 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee8:	4b52      	ldr	r3, [pc, #328]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ef2:	4b50      	ldr	r3, [pc, #320]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_RCC_OscConfig+0x162>
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	2b18      	cmp	r3, #24
 8005f02:	d13a      	bne.n	8005f7a <HAL_RCC_OscConfig+0x1ce>
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d135      	bne.n	8005f7a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0e:	4b49      	ldr	r3, [pc, #292]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_RCC_OscConfig+0x17a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e34b      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f26:	f7fb fdc3 	bl	8001ab0 <HAL_GetREVID>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d817      	bhi.n	8005f64 <HAL_RCC_OscConfig+0x1b8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b40      	cmp	r3, #64	; 0x40
 8005f3a:	d108      	bne.n	8005f4e <HAL_RCC_OscConfig+0x1a2>
 8005f3c:	4b3d      	ldr	r3, [pc, #244]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f44:	4a3b      	ldr	r2, [pc, #236]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f4a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f4c:	e07a      	b.n	8006044 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4e:	4b39      	ldr	r3, [pc, #228]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	031b      	lsls	r3, r3, #12
 8005f5c:	4935      	ldr	r1, [pc, #212]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f62:	e06f      	b.n	8006044 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f64:	4b33      	ldr	r3, [pc, #204]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	061b      	lsls	r3, r3, #24
 8005f72:	4930      	ldr	r1, [pc, #192]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f78:	e064      	b.n	8006044 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d045      	beq.n	800600e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f82:	4b2c      	ldr	r3, [pc, #176]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 0219 	bic.w	r2, r3, #25
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	4929      	ldr	r1, [pc, #164]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fb fd5e 	bl	8001a54 <HAL_GetTick>
 8005f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f9c:	f7fb fd5a 	bl	8001a54 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e307      	b.n	80065be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fae:	4b21      	ldr	r3, [pc, #132]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fba:	f7fb fd79 	bl	8001ab0 <HAL_GetREVID>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d817      	bhi.n	8005ff8 <HAL_RCC_OscConfig+0x24c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	d108      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x236>
 8005fd0:	4b18      	ldr	r3, [pc, #96]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fd8:	4a16      	ldr	r2, [pc, #88]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fde:	6053      	str	r3, [r2, #4]
 8005fe0:	e030      	b.n	8006044 <HAL_RCC_OscConfig+0x298>
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	031b      	lsls	r3, r3, #12
 8005ff0:	4910      	ldr	r1, [pc, #64]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	604b      	str	r3, [r1, #4]
 8005ff6:	e025      	b.n	8006044 <HAL_RCC_OscConfig+0x298>
 8005ff8:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	061b      	lsls	r3, r3, #24
 8006006:	490b      	ldr	r1, [pc, #44]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8006008:	4313      	orrs	r3, r2
 800600a:	604b      	str	r3, [r1, #4]
 800600c:	e01a      	b.n	8006044 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800600e:	4b09      	ldr	r3, [pc, #36]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a08      	ldr	r2, [pc, #32]	; (8006034 <HAL_RCC_OscConfig+0x288>)
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601a:	f7fb fd1b 	bl	8001a54 <HAL_GetTick>
 800601e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006020:	e00a      	b.n	8006038 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006022:	f7fb fd17 	bl	8001a54 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d903      	bls.n	8006038 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e2c4      	b.n	80065be <HAL_RCC_OscConfig+0x812>
 8006034:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006038:	4ba4      	ldr	r3, [pc, #656]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1ee      	bne.n	8006022 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80a9 	beq.w	80061a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006052:	4b9e      	ldr	r3, [pc, #632]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800605a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800605c:	4b9b      	ldr	r3, [pc, #620]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d007      	beq.n	8006078 <HAL_RCC_OscConfig+0x2cc>
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b18      	cmp	r3, #24
 800606c:	d13a      	bne.n	80060e4 <HAL_RCC_OscConfig+0x338>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	2b01      	cmp	r3, #1
 8006076:	d135      	bne.n	80060e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006078:	4b94      	ldr	r3, [pc, #592]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_RCC_OscConfig+0x2e4>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	2b80      	cmp	r3, #128	; 0x80
 800608a:	d001      	beq.n	8006090 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e296      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006090:	f7fb fd0e 	bl	8001ab0 <HAL_GetREVID>
 8006094:	4602      	mov	r2, r0
 8006096:	f241 0303 	movw	r3, #4099	; 0x1003
 800609a:	429a      	cmp	r2, r3
 800609c:	d817      	bhi.n	80060ce <HAL_RCC_OscConfig+0x322>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d108      	bne.n	80060b8 <HAL_RCC_OscConfig+0x30c>
 80060a6:	4b89      	ldr	r3, [pc, #548]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060ae:	4a87      	ldr	r2, [pc, #540]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80060b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060b6:	e075      	b.n	80061a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b8:	4b84      	ldr	r3, [pc, #528]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	069b      	lsls	r3, r3, #26
 80060c6:	4981      	ldr	r1, [pc, #516]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060cc:	e06a      	b.n	80061a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060ce:	4b7f      	ldr	r3, [pc, #508]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	061b      	lsls	r3, r3, #24
 80060dc:	497b      	ldr	r1, [pc, #492]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060e2:	e05f      	b.n	80061a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d042      	beq.n	8006172 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060ec:	4b77      	ldr	r3, [pc, #476]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a76      	ldr	r2, [pc, #472]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80060f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fb fcac 	bl	8001a54 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006100:	f7fb fca8 	bl	8001a54 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e255      	b.n	80065be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006112:	4b6e      	ldr	r3, [pc, #440]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800611e:	f7fb fcc7 	bl	8001ab0 <HAL_GetREVID>
 8006122:	4602      	mov	r2, r0
 8006124:	f241 0303 	movw	r3, #4099	; 0x1003
 8006128:	429a      	cmp	r2, r3
 800612a:	d817      	bhi.n	800615c <HAL_RCC_OscConfig+0x3b0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	2b20      	cmp	r3, #32
 8006132:	d108      	bne.n	8006146 <HAL_RCC_OscConfig+0x39a>
 8006134:	4b65      	ldr	r3, [pc, #404]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800613c:	4a63      	ldr	r2, [pc, #396]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800613e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006142:	6053      	str	r3, [r2, #4]
 8006144:	e02e      	b.n	80061a4 <HAL_RCC_OscConfig+0x3f8>
 8006146:	4b61      	ldr	r3, [pc, #388]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	069b      	lsls	r3, r3, #26
 8006154:	495d      	ldr	r1, [pc, #372]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006156:	4313      	orrs	r3, r2
 8006158:	604b      	str	r3, [r1, #4]
 800615a:	e023      	b.n	80061a4 <HAL_RCC_OscConfig+0x3f8>
 800615c:	4b5b      	ldr	r3, [pc, #364]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	061b      	lsls	r3, r3, #24
 800616a:	4958      	ldr	r1, [pc, #352]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800616c:	4313      	orrs	r3, r2
 800616e:	60cb      	str	r3, [r1, #12]
 8006170:	e018      	b.n	80061a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006172:	4b56      	ldr	r3, [pc, #344]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a55      	ldr	r2, [pc, #340]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617e:	f7fb fc69 	bl	8001a54 <HAL_GetTick>
 8006182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006184:	e008      	b.n	8006198 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006186:	f7fb fc65 	bl	8001a54 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e212      	b.n	80065be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006198:	4b4c      	ldr	r3, [pc, #304]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f0      	bne.n	8006186 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d036      	beq.n	800621e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d019      	beq.n	80061ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061b8:	4b44      	ldr	r3, [pc, #272]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80061ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061bc:	4a43      	ldr	r2, [pc, #268]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c4:	f7fb fc46 	bl	8001a54 <HAL_GetTick>
 80061c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061cc:	f7fb fc42 	bl	8001a54 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e1ef      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061de:	4b3b      	ldr	r3, [pc, #236]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80061e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f0      	beq.n	80061cc <HAL_RCC_OscConfig+0x420>
 80061ea:	e018      	b.n	800621e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ec:	4b37      	ldr	r3, [pc, #220]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80061ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f0:	4a36      	ldr	r2, [pc, #216]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f8:	f7fb fc2c 	bl	8001a54 <HAL_GetTick>
 80061fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006200:	f7fb fc28 	bl	8001a54 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e1d5      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f0      	bne.n	8006200 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b00      	cmp	r3, #0
 8006228:	d036      	beq.n	8006298 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d019      	beq.n	8006266 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006232:	4b26      	ldr	r3, [pc, #152]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a25      	ldr	r2, [pc, #148]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800623c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800623e:	f7fb fc09 	bl	8001a54 <HAL_GetTick>
 8006242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006246:	f7fb fc05 	bl	8001a54 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e1b2      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006258:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x49a>
 8006264:	e018      	b.n	8006298 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006266:	4b19      	ldr	r3, [pc, #100]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a18      	ldr	r2, [pc, #96]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800626c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006270:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006272:	f7fb fbef 	bl	8001a54 <HAL_GetTick>
 8006276:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800627a:	f7fb fbeb 	bl	8001a54 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e198      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800628c:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <HAL_RCC_OscConfig+0x520>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f0      	bne.n	800627a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8085 	beq.w	80063b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <HAL_RCC_OscConfig+0x524>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <HAL_RCC_OscConfig+0x524>)
 80062ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062b2:	f7fb fbcf 	bl	8001a54 <HAL_GetTick>
 80062b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062b8:	e00c      	b.n	80062d4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062ba:	f7fb fbcb 	bl	8001a54 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b64      	cmp	r3, #100	; 0x64
 80062c6:	d905      	bls.n	80062d4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e178      	b.n	80065be <HAL_RCC_OscConfig+0x812>
 80062cc:	58024400 	.word	0x58024400
 80062d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062d4:	4b96      	ldr	r3, [pc, #600]	; (8006530 <HAL_RCC_OscConfig+0x784>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0ec      	beq.n	80062ba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d106      	bne.n	80062f6 <HAL_RCC_OscConfig+0x54a>
 80062e8:	4b92      	ldr	r3, [pc, #584]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80062ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ec:	4a91      	ldr	r2, [pc, #580]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	6713      	str	r3, [r2, #112]	; 0x70
 80062f4:	e02d      	b.n	8006352 <HAL_RCC_OscConfig+0x5a6>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10c      	bne.n	8006318 <HAL_RCC_OscConfig+0x56c>
 80062fe:	4b8d      	ldr	r3, [pc, #564]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	4a8c      	ldr	r2, [pc, #560]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	6713      	str	r3, [r2, #112]	; 0x70
 800630a:	4b8a      	ldr	r3, [pc, #552]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4a89      	ldr	r2, [pc, #548]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006310:	f023 0304 	bic.w	r3, r3, #4
 8006314:	6713      	str	r3, [r2, #112]	; 0x70
 8006316:	e01c      	b.n	8006352 <HAL_RCC_OscConfig+0x5a6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b05      	cmp	r3, #5
 800631e:	d10c      	bne.n	800633a <HAL_RCC_OscConfig+0x58e>
 8006320:	4b84      	ldr	r3, [pc, #528]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006324:	4a83      	ldr	r2, [pc, #524]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006326:	f043 0304 	orr.w	r3, r3, #4
 800632a:	6713      	str	r3, [r2, #112]	; 0x70
 800632c:	4b81      	ldr	r3, [pc, #516]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	4a80      	ldr	r2, [pc, #512]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	6713      	str	r3, [r2, #112]	; 0x70
 8006338:	e00b      	b.n	8006352 <HAL_RCC_OscConfig+0x5a6>
 800633a:	4b7e      	ldr	r3, [pc, #504]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	4a7d      	ldr	r2, [pc, #500]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	6713      	str	r3, [r2, #112]	; 0x70
 8006346:	4b7b      	ldr	r3, [pc, #492]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	4a7a      	ldr	r2, [pc, #488]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800634c:	f023 0304 	bic.w	r3, r3, #4
 8006350:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d015      	beq.n	8006386 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635a:	f7fb fb7b 	bl	8001a54 <HAL_GetTick>
 800635e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006360:	e00a      	b.n	8006378 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006362:	f7fb fb77 	bl	8001a54 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006370:	4293      	cmp	r3, r2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e122      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006378:	4b6e      	ldr	r3, [pc, #440]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0ee      	beq.n	8006362 <HAL_RCC_OscConfig+0x5b6>
 8006384:	e014      	b.n	80063b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006386:	f7fb fb65 	bl	8001a54 <HAL_GetTick>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800638c:	e00a      	b.n	80063a4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800638e:	f7fb fb61 	bl	8001a54 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	f241 3288 	movw	r2, #5000	; 0x1388
 800639c:	4293      	cmp	r3, r2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e10c      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063a4:	4b63      	ldr	r3, [pc, #396]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ee      	bne.n	800638e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8101 	beq.w	80065bc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063ba:	4b5e      	ldr	r3, [pc, #376]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063c2:	2b18      	cmp	r3, #24
 80063c4:	f000 80bc 	beq.w	8006540 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f040 8095 	bne.w	80064fc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d2:	4b58      	ldr	r3, [pc, #352]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a57      	ldr	r2, [pc, #348]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80063d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063de:	f7fb fb39 	bl	8001a54 <HAL_GetTick>
 80063e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e6:	f7fb fb35 	bl	8001a54 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0e2      	b.n	80065be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063f8:	4b4e      	ldr	r3, [pc, #312]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f0      	bne.n	80063e6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006404:	4b4b      	ldr	r3, [pc, #300]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006408:	4b4b      	ldr	r3, [pc, #300]	; (8006538 <HAL_RCC_OscConfig+0x78c>)
 800640a:	4013      	ands	r3, r2
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006414:	0112      	lsls	r2, r2, #4
 8006416:	430a      	orrs	r2, r1
 8006418:	4946      	ldr	r1, [pc, #280]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800641a:	4313      	orrs	r3, r2
 800641c:	628b      	str	r3, [r1, #40]	; 0x28
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	3b01      	subs	r3, #1
 8006424:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	3b01      	subs	r3, #1
 800642e:	025b      	lsls	r3, r3, #9
 8006430:	b29b      	uxth	r3, r3
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	3b01      	subs	r3, #1
 800643a:	041b      	lsls	r3, r3, #16
 800643c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	3b01      	subs	r3, #1
 8006448:	061b      	lsls	r3, r3, #24
 800644a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800644e:	4939      	ldr	r1, [pc, #228]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006450:	4313      	orrs	r3, r2
 8006452:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006454:	4b37      	ldr	r3, [pc, #220]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a36      	ldr	r2, [pc, #216]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006460:	4b34      	ldr	r3, [pc, #208]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006464:	4b35      	ldr	r3, [pc, #212]	; (800653c <HAL_RCC_OscConfig+0x790>)
 8006466:	4013      	ands	r3, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800646c:	00d2      	lsls	r2, r2, #3
 800646e:	4931      	ldr	r1, [pc, #196]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006470:	4313      	orrs	r3, r2
 8006472:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006474:	4b2f      	ldr	r3, [pc, #188]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	f023 020c 	bic.w	r2, r3, #12
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	492c      	ldr	r1, [pc, #176]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006482:	4313      	orrs	r3, r2
 8006484:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006486:	4b2b      	ldr	r3, [pc, #172]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648a:	f023 0202 	bic.w	r2, r3, #2
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	4928      	ldr	r1, [pc, #160]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006494:	4313      	orrs	r3, r2
 8006496:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006498:	4b26      	ldr	r3, [pc, #152]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	4a25      	ldr	r2, [pc, #148]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 800649e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a4:	4b23      	ldr	r3, [pc, #140]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4a22      	ldr	r2, [pc, #136]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064b0:	4b20      	ldr	r3, [pc, #128]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	4a1f      	ldr	r2, [pc, #124]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80064bc:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	4a1c      	ldr	r2, [pc, #112]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a19      	ldr	r2, [pc, #100]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fb fabe 	bl	8001a54 <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fb faba 	bl	8001a54 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e067      	b.n	80065be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064ee:	4b11      	ldr	r3, [pc, #68]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0x730>
 80064fa:	e05f      	b.n	80065bc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fc:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0c      	ldr	r2, [pc, #48]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fb faa4 	bl	8001a54 <HAL_GetTick>
 800650c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006510:	f7fb faa0 	bl	8001a54 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e04d      	b.n	80065be <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006522:	4b04      	ldr	r3, [pc, #16]	; (8006534 <HAL_RCC_OscConfig+0x788>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f0      	bne.n	8006510 <HAL_RCC_OscConfig+0x764>
 800652e:	e045      	b.n	80065bc <HAL_RCC_OscConfig+0x810>
 8006530:	58024800 	.word	0x58024800
 8006534:	58024400 	.word	0x58024400
 8006538:	fffffc0c 	.word	0xfffffc0c
 800653c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006540:	4b21      	ldr	r3, [pc, #132]	; (80065c8 <HAL_RCC_OscConfig+0x81c>)
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006546:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <HAL_RCC_OscConfig+0x81c>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b01      	cmp	r3, #1
 8006552:	d031      	beq.n	80065b8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f003 0203 	and.w	r2, r3, #3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655e:	429a      	cmp	r2, r3
 8006560:	d12a      	bne.n	80065b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	429a      	cmp	r2, r3
 8006570:	d122      	bne.n	80065b8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d11a      	bne.n	80065b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	0a5b      	lsrs	r3, r3, #9
 8006586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006590:	429a      	cmp	r2, r3
 8006592:	d111      	bne.n	80065b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	0c1b      	lsrs	r3, r3, #16
 8006598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d108      	bne.n	80065b8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	0e1b      	lsrs	r3, r3, #24
 80065aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3730      	adds	r7, #48	; 0x30
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	58024400 	.word	0x58024400

080065cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e19c      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065e0:	4b8a      	ldr	r3, [pc, #552]	; (800680c <HAL_RCC_ClockConfig+0x240>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d910      	bls.n	8006610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ee:	4b87      	ldr	r3, [pc, #540]	; (800680c <HAL_RCC_ClockConfig+0x240>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 020f 	bic.w	r2, r3, #15
 80065f6:	4985      	ldr	r1, [pc, #532]	; (800680c <HAL_RCC_ClockConfig+0x240>)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fe:	4b83      	ldr	r3, [pc, #524]	; (800680c <HAL_RCC_ClockConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d001      	beq.n	8006610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e184      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	4b7b      	ldr	r3, [pc, #492]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006628:	429a      	cmp	r2, r3
 800662a:	d908      	bls.n	800663e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800662c:	4b78      	ldr	r3, [pc, #480]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	4975      	ldr	r1, [pc, #468]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800663a:	4313      	orrs	r3, r2
 800663c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	4b70      	ldr	r3, [pc, #448]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006656:	429a      	cmp	r2, r3
 8006658:	d908      	bls.n	800666c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800665a:	4b6d      	ldr	r3, [pc, #436]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	496a      	ldr	r1, [pc, #424]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006668:	4313      	orrs	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	d010      	beq.n	800669a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	4b64      	ldr	r3, [pc, #400]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006684:	429a      	cmp	r2, r3
 8006686:	d908      	bls.n	800669a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006688:	4b61      	ldr	r3, [pc, #388]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	495e      	ldr	r1, [pc, #376]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006696:	4313      	orrs	r3, r2
 8006698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d010      	beq.n	80066c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	4b59      	ldr	r3, [pc, #356]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d908      	bls.n	80066c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80066b6:	4b56      	ldr	r3, [pc, #344]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	4953      	ldr	r1, [pc, #332]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d010      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	4b4d      	ldr	r3, [pc, #308]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d908      	bls.n	80066f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e4:	4b4a      	ldr	r3, [pc, #296]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f023 020f 	bic.w	r2, r3, #15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4947      	ldr	r1, [pc, #284]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d055      	beq.n	80067ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006702:	4b43      	ldr	r3, [pc, #268]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	4940      	ldr	r1, [pc, #256]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006710:	4313      	orrs	r3, r2
 8006712:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d107      	bne.n	800672c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800671c:	4b3c      	ldr	r3, [pc, #240]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d121      	bne.n	800676c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0f6      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d107      	bne.n	8006744 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006734:	4b36      	ldr	r3, [pc, #216]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d115      	bne.n	800676c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0ea      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d107      	bne.n	800675c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800674c:	4b30      	ldr	r3, [pc, #192]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0de      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800675c:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0d6      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800676c:	4b28      	ldr	r3, [pc, #160]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f023 0207 	bic.w	r2, r3, #7
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	4925      	ldr	r1, [pc, #148]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800677a:	4313      	orrs	r3, r2
 800677c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677e:	f7fb f969 	bl	8001a54 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006784:	e00a      	b.n	800679c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006786:	f7fb f965 	bl	8001a54 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f241 3288 	movw	r2, #5000	; 0x1388
 8006794:	4293      	cmp	r3, r2
 8006796:	d901      	bls.n	800679c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e0be      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d1eb      	bne.n	8006786 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d010      	beq.n	80067dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d208      	bcs.n	80067dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f023 020f 	bic.w	r2, r3, #15
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	490e      	ldr	r1, [pc, #56]	; (8006810 <HAL_RCC_ClockConfig+0x244>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <HAL_RCC_ClockConfig+0x240>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d214      	bcs.n	8006814 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ea:	4b08      	ldr	r3, [pc, #32]	; (800680c <HAL_RCC_ClockConfig+0x240>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f023 020f 	bic.w	r2, r3, #15
 80067f2:	4906      	ldr	r1, [pc, #24]	; (800680c <HAL_RCC_ClockConfig+0x240>)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fa:	4b04      	ldr	r3, [pc, #16]	; (800680c <HAL_RCC_ClockConfig+0x240>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d005      	beq.n	8006814 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e086      	b.n	800691a <HAL_RCC_ClockConfig+0x34e>
 800680c:	52002000 	.word	0x52002000
 8006810:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	4b3f      	ldr	r3, [pc, #252]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800682c:	429a      	cmp	r2, r3
 800682e:	d208      	bcs.n	8006842 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006830:	4b3c      	ldr	r3, [pc, #240]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	4939      	ldr	r1, [pc, #228]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 800683e:	4313      	orrs	r3, r2
 8006840:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d010      	beq.n	8006870 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	4b34      	ldr	r3, [pc, #208]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800685a:	429a      	cmp	r2, r3
 800685c:	d208      	bcs.n	8006870 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800685e:	4b31      	ldr	r3, [pc, #196]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	492e      	ldr	r1, [pc, #184]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 800686c:	4313      	orrs	r3, r2
 800686e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d010      	beq.n	800689e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	4b28      	ldr	r3, [pc, #160]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006888:	429a      	cmp	r2, r3
 800688a:	d208      	bcs.n	800689e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	4922      	ldr	r1, [pc, #136]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 800689a:	4313      	orrs	r3, r2
 800689c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d010      	beq.n	80068cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69da      	ldr	r2, [r3, #28]
 80068ae:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d208      	bcs.n	80068cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068ba:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	4917      	ldr	r1, [pc, #92]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068cc:	f000 f834 	bl	8006938 <HAL_RCC_GetSysClockFreq>
 80068d0:	4601      	mov	r1, r0
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	0a1b      	lsrs	r3, r3, #8
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	4a12      	ldr	r2, [pc, #72]	; (8006928 <HAL_RCC_ClockConfig+0x35c>)
 80068de:	5cd3      	ldrb	r3, [r2, r3]
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	fa21 f303 	lsr.w	r3, r1, r3
 80068e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068ea:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <HAL_RCC_ClockConfig+0x358>)
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <HAL_RCC_ClockConfig+0x35c>)
 80068f4:	5cd3      	ldrb	r3, [r2, r3]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006900:	4a0a      	ldr	r2, [pc, #40]	; (800692c <HAL_RCC_ClockConfig+0x360>)
 8006902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006904:	4a0a      	ldr	r2, [pc, #40]	; (8006930 <HAL_RCC_ClockConfig+0x364>)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <HAL_RCC_ClockConfig+0x368>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7fb f856 	bl	80019c0 <HAL_InitTick>
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	58024400 	.word	0x58024400
 8006928:	0801144c 	.word	0x0801144c
 800692c:	24000004 	.word	0x24000004
 8006930:	24000000 	.word	0x24000000
 8006934:	24000008 	.word	0x24000008

08006938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006938:	b480      	push	{r7}
 800693a:	b089      	sub	sp, #36	; 0x24
 800693c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800693e:	4baf      	ldr	r3, [pc, #700]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006946:	2b18      	cmp	r3, #24
 8006948:	f200 814e 	bhi.w	8006be8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	080069b9 	.word	0x080069b9
 8006958:	08006be9 	.word	0x08006be9
 800695c:	08006be9 	.word	0x08006be9
 8006960:	08006be9 	.word	0x08006be9
 8006964:	08006be9 	.word	0x08006be9
 8006968:	08006be9 	.word	0x08006be9
 800696c:	08006be9 	.word	0x08006be9
 8006970:	08006be9 	.word	0x08006be9
 8006974:	080069df 	.word	0x080069df
 8006978:	08006be9 	.word	0x08006be9
 800697c:	08006be9 	.word	0x08006be9
 8006980:	08006be9 	.word	0x08006be9
 8006984:	08006be9 	.word	0x08006be9
 8006988:	08006be9 	.word	0x08006be9
 800698c:	08006be9 	.word	0x08006be9
 8006990:	08006be9 	.word	0x08006be9
 8006994:	080069e5 	.word	0x080069e5
 8006998:	08006be9 	.word	0x08006be9
 800699c:	08006be9 	.word	0x08006be9
 80069a0:	08006be9 	.word	0x08006be9
 80069a4:	08006be9 	.word	0x08006be9
 80069a8:	08006be9 	.word	0x08006be9
 80069ac:	08006be9 	.word	0x08006be9
 80069b0:	08006be9 	.word	0x08006be9
 80069b4:	080069eb 	.word	0x080069eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069b8:	4b90      	ldr	r3, [pc, #576]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069c4:	4b8d      	ldr	r3, [pc, #564]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	08db      	lsrs	r3, r3, #3
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	4a8c      	ldr	r2, [pc, #560]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
 80069d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80069d6:	e10a      	b.n	8006bee <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069d8:	4b89      	ldr	r3, [pc, #548]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80069da:	61bb      	str	r3, [r7, #24]
    break;
 80069dc:	e107      	b.n	8006bee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80069de:	4b89      	ldr	r3, [pc, #548]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80069e0:	61bb      	str	r3, [r7, #24]
    break;
 80069e2:	e104      	b.n	8006bee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80069e4:	4b88      	ldr	r3, [pc, #544]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80069e6:	61bb      	str	r3, [r7, #24]
    break;
 80069e8:	e101      	b.n	8006bee <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ea:	4b84      	ldr	r3, [pc, #528]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80069f4:	4b81      	ldr	r3, [pc, #516]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a00:	4b7e      	ldr	r3, [pc, #504]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a0a:	4b7c      	ldr	r3, [pc, #496]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0e:	08db      	lsrs	r3, r3, #3
 8006a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80da 	beq.w	8006be2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d05a      	beq.n	8006aea <HAL_RCC_GetSysClockFreq+0x1b2>
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d302      	bcc.n	8006a3e <HAL_RCC_GetSysClockFreq+0x106>
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d078      	beq.n	8006b2e <HAL_RCC_GetSysClockFreq+0x1f6>
 8006a3c:	e099      	b.n	8006b72 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a3e:	4b6f      	ldr	r3, [pc, #444]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02d      	beq.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a4a:	4b6c      	ldr	r3, [pc, #432]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	08db      	lsrs	r3, r3, #3
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	4a6a      	ldr	r2, [pc, #424]	; (8006c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a56:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a74:	4b61      	ldr	r3, [pc, #388]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a84:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a88:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006aa4:	e087      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006c10 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab8:	4b50      	ldr	r3, [pc, #320]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006acc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae8:	e065      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	ee07 3a90 	vmov	s15, r3
 8006af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006c14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afc:	4b3f      	ldr	r3, [pc, #252]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b10:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b2c:	e043      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b38:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006c18 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b40:	4b2e      	ldr	r3, [pc, #184]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b50:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b54:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b70:	e021      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006c14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b84:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8c:	ee07 3a90 	vmov	s15, r3
 8006b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b94:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b98:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bb4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006bb6:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	0a5b      	lsrs	r3, r3, #9
 8006bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bda:	ee17 3a90 	vmov	r3, s15
 8006bde:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006be0:	e005      	b.n	8006bee <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
    break;
 8006be6:	e002      	b.n	8006bee <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006be8:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006bea:	61bb      	str	r3, [r7, #24]
    break;
 8006bec:	bf00      	nop
  }

  return sysclockfreq;
 8006bee:	69bb      	ldr	r3, [r7, #24]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3724      	adds	r7, #36	; 0x24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	03d09000 	.word	0x03d09000
 8006c04:	003d0900 	.word	0x003d0900
 8006c08:	017d7840 	.word	0x017d7840
 8006c0c:	46000000 	.word	0x46000000
 8006c10:	4c742400 	.word	0x4c742400
 8006c14:	4a742400 	.word	0x4a742400
 8006c18:	4bbebc20 	.word	0x4bbebc20

08006c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c22:	f7ff fe89 	bl	8006938 <HAL_RCC_GetSysClockFreq>
 8006c26:	4601      	mov	r1, r0
 8006c28:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	0a1b      	lsrs	r3, r3, #8
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a0f      	ldr	r2, [pc, #60]	; (8006c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c34:	5cd3      	ldrb	r3, [r2, r3]
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8006c3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c4a:	5cd3      	ldrb	r3, [r2, r3]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	fa22 f303 	lsr.w	r3, r2, r3
 8006c56:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c5a:	4a07      	ldr	r2, [pc, #28]	; (8006c78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	0801144c 	.word	0x0801144c
 8006c74:	24000004 	.word	0x24000004
 8006c78:	24000000 	.word	0x24000000

08006c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c80:	f7ff ffcc 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8006c84:	4601      	mov	r1, r0
 8006c86:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	091b      	lsrs	r3, r3, #4
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	4a04      	ldr	r2, [pc, #16]	; (8006ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c92:	5cd3      	ldrb	r3, [r2, r3]
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	58024400 	.word	0x58024400
 8006ca4:	0801144c 	.word	0x0801144c

08006ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cac:	f7ff ffb6 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8006cb0:	4601      	mov	r1, r0
 8006cb2:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	4a04      	ldr	r2, [pc, #16]	; (8006cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cbe:	5cd3      	ldrb	r3, [r2, r3]
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	58024400 	.word	0x58024400
 8006cd0:	0801144c 	.word	0x0801144c

08006cd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d03d      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf8:	d013      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfe:	d802      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006d04:	e01f      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d0a:	d013      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006d0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d10:	d01c      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006d12:	e018      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d14:	4baf      	ldr	r3, [pc, #700]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	4aae      	ldr	r2, [pc, #696]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d20:	e015      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3304      	adds	r3, #4
 8006d26:	2102      	movs	r1, #2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 fd33 	bl	8008794 <RCCEx_PLL2_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d32:	e00c      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3324      	adds	r3, #36	; 0x24
 8006d38:	2102      	movs	r1, #2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 fddc 	bl	80088f8 <RCCEx_PLL3_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4a:	e000      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d109      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d54:	4b9f      	ldr	r3, [pc, #636]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d60:	499c      	ldr	r1, [pc, #624]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	650b      	str	r3, [r1, #80]	; 0x50
 8006d66:	e001      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d03d      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d826      	bhi.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006d80:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006d9d 	.word	0x08006d9d
 8006d8c:	08006dab 	.word	0x08006dab
 8006d90:	08006dbd 	.word	0x08006dbd
 8006d94:	08006dd5 	.word	0x08006dd5
 8006d98:	08006dd5 	.word	0x08006dd5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d9c:	4b8d      	ldr	r3, [pc, #564]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	4a8c      	ldr	r2, [pc, #560]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006da8:	e015      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 fcef 	bl	8008794 <RCCEx_PLL2_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dba:	e00c      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3324      	adds	r3, #36	; 0x24
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 fd98 	bl	80088f8 <RCCEx_PLL3_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dcc:	e003      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d109      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ddc:	4b7d      	ldr	r3, [pc, #500]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de0:	f023 0207 	bic.w	r2, r3, #7
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de8:	497a      	ldr	r1, [pc, #488]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	650b      	str	r3, [r1, #80]	; 0x50
 8006dee:	e001      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d03e      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e04:	2b80      	cmp	r3, #128	; 0x80
 8006e06:	d01c      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006e08:	2b80      	cmp	r3, #128	; 0x80
 8006e0a:	d804      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	d00d      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006e14:	e01e      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006e16:	2bc0      	cmp	r3, #192	; 0xc0
 8006e18:	d01f      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1e:	d01e      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e20:	e018      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e22:	4b6c      	ldr	r3, [pc, #432]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	4a6b      	ldr	r2, [pc, #428]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e2e:	e017      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 fcac 	bl	8008794 <RCCEx_PLL2_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e40:	e00e      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3324      	adds	r3, #36	; 0x24
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 fd55 	bl	80088f8 <RCCEx_PLL3_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e52:	e005      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75fb      	strb	r3, [r7, #23]
      break;
 8006e58:	e002      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e000      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e66:	4b5b      	ldr	r3, [pc, #364]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e72:	4958      	ldr	r1, [pc, #352]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	650b      	str	r3, [r1, #80]	; 0x50
 8006e78:	e001      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
 8006e7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d044      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e94:	d01f      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e9a:	d805      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ea4:	d00e      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006ea6:	e01f      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006ea8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006eac:	d01f      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006eae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eb2:	d01e      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006eb4:	e018      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb6:	4b47      	ldr	r3, [pc, #284]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	4a46      	ldr	r2, [pc, #280]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ec2:	e017      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 fc62 	bl	8008794 <RCCEx_PLL2_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ed4:	e00e      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3324      	adds	r3, #36	; 0x24
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 fd0b 	bl	80088f8 <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ee6:	e005      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
      break;
 8006eec:	e002      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e000      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006efa:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f08:	4932      	ldr	r1, [pc, #200]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	658b      	str	r3, [r1, #88]	; 0x58
 8006f0e:	e001      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d044      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f2a:	d01f      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006f2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f30:	d805      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006f36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f3a:	d00e      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006f3c:	e01f      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006f3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f42:	d01f      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f48:	d01e      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f4a:	e018      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f4c:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	4a20      	ldr	r2, [pc, #128]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f58:	e017      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 fc17 	bl	8008794 <RCCEx_PLL2_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f6a:	e00e      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3324      	adds	r3, #36	; 0x24
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fcc0 	bl	80088f8 <RCCEx_PLL3_Config>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f7c:	e005      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	75fb      	strb	r3, [r7, #23]
      break;
 8006f82:	e002      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f84:	bf00      	nop
 8006f86:	e000      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f90:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f94:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f9e:	490d      	ldr	r1, [pc, #52]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	658b      	str	r3, [r1, #88]	; 0x58
 8006fa4:	e001      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d035      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d00c      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006fbe:	2b10      	cmp	r3, #16
 8006fc0:	d802      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01b      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006fc6:	e017      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d00c      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006fcc:	2b30      	cmp	r3, #48	; 0x30
 8006fce:	d018      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006fd0:	e012      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006fd2:	bf00      	nop
 8006fd4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd8:	4baf      	ldr	r3, [pc, #700]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4aae      	ldr	r2, [pc, #696]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006fe4:	e00e      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	2102      	movs	r1, #2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 fbd1 	bl	8008794 <RCCEx_PLL2_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ff6:	e005      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffc:	e002      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006ffe:	bf00      	nop
 8007000:	e000      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800700a:	4ba3      	ldr	r3, [pc, #652]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007016:	49a0      	ldr	r1, [pc, #640]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007018:	4313      	orrs	r3, r2
 800701a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800701c:	e001      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d042      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007036:	d01f      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800703c:	d805      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007046:	d00e      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007048:	e01f      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800704a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800704e:	d01f      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007054:	d01e      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007056:	e018      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007058:	4b8f      	ldr	r3, [pc, #572]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	4a8e      	ldr	r2, [pc, #568]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800705e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007064:	e017      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3304      	adds	r3, #4
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f001 fb91 	bl	8008794 <RCCEx_PLL2_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007076:	e00e      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3324      	adds	r3, #36	; 0x24
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f001 fc3a 	bl	80088f8 <RCCEx_PLL3_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007088:	e005      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
      break;
 800708e:	e002      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800709c:	4b7e      	ldr	r3, [pc, #504]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800709e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a8:	497b      	ldr	r1, [pc, #492]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	650b      	str	r3, [r1, #80]	; 0x50
 80070ae:	e001      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	7dfb      	ldrb	r3, [r7, #23]
 80070b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d042      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070c8:	d01b      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80070ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ce:	d805      	bhi.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d022      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d00a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80070da:	e01b      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80070dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070e0:	d01d      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80070e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070e6:	d01c      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80070e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070ec:	d01b      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80070ee:	e011      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3304      	adds	r3, #4
 80070f4:	2101      	movs	r1, #1
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 fb4c 	bl	8008794 <RCCEx_PLL2_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007100:	e012      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3324      	adds	r3, #36	; 0x24
 8007106:	2101      	movs	r1, #1
 8007108:	4618      	mov	r0, r3
 800710a:	f001 fbf5 	bl	80088f8 <RCCEx_PLL3_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007112:	e009      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
      break;
 8007118:	e006      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800711a:	bf00      	nop
 800711c:	e004      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800711e:	bf00      	nop
 8007120:	e002      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800712e:	4b5a      	ldr	r3, [pc, #360]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007132:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713a:	4957      	ldr	r1, [pc, #348]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800713c:	4313      	orrs	r3, r2
 800713e:	650b      	str	r3, [r1, #80]	; 0x50
 8007140:	e001      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d044      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715c:	d01b      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800715e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007162:	d805      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d022      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800716e:	e01b      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007174:	d01d      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800717a:	d01c      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800717c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007180:	d01b      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007182:	e011      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	2101      	movs	r1, #1
 800718a:	4618      	mov	r0, r3
 800718c:	f001 fb02 	bl	8008794 <RCCEx_PLL2_Config>
 8007190:	4603      	mov	r3, r0
 8007192:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007194:	e012      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3324      	adds	r3, #36	; 0x24
 800719a:	2101      	movs	r1, #1
 800719c:	4618      	mov	r0, r3
 800719e:	f001 fbab 	bl	80088f8 <RCCEx_PLL3_Config>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80071a6:	e009      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	75fb      	strb	r3, [r7, #23]
      break;
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071ae:	bf00      	nop
 80071b0:	e004      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071b2:	bf00      	nop
 80071b4:	e002      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071b6:	bf00      	nop
 80071b8:	e000      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80071ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071c2:	4b35      	ldr	r3, [pc, #212]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071d0:	4931      	ldr	r1, [pc, #196]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	658b      	str	r3, [r1, #88]	; 0x58
 80071d6:	e001      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d02d      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071f0:	d005      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80071f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f6:	d009      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x538>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d013      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80071fc:	e00f      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fe:	4b26      	ldr	r3, [pc, #152]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	4a25      	ldr	r2, [pc, #148]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007208:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800720a:	e00c      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	2101      	movs	r1, #1
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fabe 	bl	8008794 <RCCEx_PLL2_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800721c:	e003      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	75fb      	strb	r3, [r7, #23]
      break;
 8007222:	e000      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d109      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800722c:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007238:	4917      	ldr	r1, [pc, #92]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800723a:	4313      	orrs	r3, r2
 800723c:	650b      	str	r3, [r1, #80]	; 0x50
 800723e:	e001      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d035      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007254:	2b03      	cmp	r3, #3
 8007256:	d81b      	bhi.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007258:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	0800729d 	.word	0x0800729d
 8007264:	08007271 	.word	0x08007271
 8007268:	0800727f 	.word	0x0800727f
 800726c:	0800729d 	.word	0x0800729d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	4a08      	ldr	r2, [pc, #32]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800727a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800727c:	e00f      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3304      	adds	r3, #4
 8007282:	2102      	movs	r1, #2
 8007284:	4618      	mov	r0, r3
 8007286:	f001 fa85 	bl	8008794 <RCCEx_PLL2_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800728e:	e006      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	75fb      	strb	r3, [r7, #23]
      break;
 8007294:	e003      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007296:	bf00      	nop
 8007298:	58024400 	.word	0x58024400
      break;
 800729c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072a4:	4bba      	ldr	r3, [pc, #744]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a8:	f023 0203 	bic.w	r2, r3, #3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b0:	49b7      	ldr	r1, [pc, #732]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072b6:	e001      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8086 	beq.w	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072ca:	4bb2      	ldr	r3, [pc, #712]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4ab1      	ldr	r2, [pc, #708]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80072d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072d6:	f7fa fbbd 	bl	8001a54 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072dc:	e009      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072de:	f7fa fbb9 	bl	8001a54 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b64      	cmp	r3, #100	; 0x64
 80072ea:	d902      	bls.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	75fb      	strb	r3, [r7, #23]
        break;
 80072f0:	e005      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072f2:	4ba8      	ldr	r3, [pc, #672]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0ef      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d166      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007304:	4ba2      	ldr	r3, [pc, #648]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800730e:	4053      	eors	r3, r2
 8007310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007314:	2b00      	cmp	r3, #0
 8007316:	d013      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007318:	4b9d      	ldr	r3, [pc, #628]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800731a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007320:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007322:	4b9b      	ldr	r3, [pc, #620]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	4a9a      	ldr	r2, [pc, #616]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800732c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800732e:	4b98      	ldr	r3, [pc, #608]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	4a97      	ldr	r2, [pc, #604]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007338:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800733a:	4a95      	ldr	r2, [pc, #596]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734a:	d115      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fa fb82 	bl	8001a54 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007352:	e00b      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007354:	f7fa fb7e 	bl	8001a54 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007362:	4293      	cmp	r3, r2
 8007364:	d902      	bls.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	75fb      	strb	r3, [r7, #23]
            break;
 800736a:	e005      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800736c:	4b88      	ldr	r3, [pc, #544]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800736e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0ed      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d126      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800738c:	d10d      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800738e:	4b80      	ldr	r3, [pc, #512]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800739c:	0919      	lsrs	r1, r3, #4
 800739e:	4b7e      	ldr	r3, [pc, #504]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80073a0:	400b      	ands	r3, r1
 80073a2:	497b      	ldr	r1, [pc, #492]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	610b      	str	r3, [r1, #16]
 80073a8:	e005      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80073aa:	4b79      	ldr	r3, [pc, #484]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	4a78      	ldr	r2, [pc, #480]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80073b4:	6113      	str	r3, [r2, #16]
 80073b6:	4b76      	ldr	r3, [pc, #472]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073c4:	4972      	ldr	r1, [pc, #456]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	670b      	str	r3, [r1, #112]	; 0x70
 80073ca:	e004      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	75bb      	strb	r3, [r7, #22]
 80073d0:	e001      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d07d      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e6:	2b28      	cmp	r3, #40	; 0x28
 80073e8:	d866      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80073ea:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	080074bf 	.word	0x080074bf
 80073f4:	080074b9 	.word	0x080074b9
 80073f8:	080074b9 	.word	0x080074b9
 80073fc:	080074b9 	.word	0x080074b9
 8007400:	080074b9 	.word	0x080074b9
 8007404:	080074b9 	.word	0x080074b9
 8007408:	080074b9 	.word	0x080074b9
 800740c:	080074b9 	.word	0x080074b9
 8007410:	08007495 	.word	0x08007495
 8007414:	080074b9 	.word	0x080074b9
 8007418:	080074b9 	.word	0x080074b9
 800741c:	080074b9 	.word	0x080074b9
 8007420:	080074b9 	.word	0x080074b9
 8007424:	080074b9 	.word	0x080074b9
 8007428:	080074b9 	.word	0x080074b9
 800742c:	080074b9 	.word	0x080074b9
 8007430:	080074a7 	.word	0x080074a7
 8007434:	080074b9 	.word	0x080074b9
 8007438:	080074b9 	.word	0x080074b9
 800743c:	080074b9 	.word	0x080074b9
 8007440:	080074b9 	.word	0x080074b9
 8007444:	080074b9 	.word	0x080074b9
 8007448:	080074b9 	.word	0x080074b9
 800744c:	080074b9 	.word	0x080074b9
 8007450:	080074bf 	.word	0x080074bf
 8007454:	080074b9 	.word	0x080074b9
 8007458:	080074b9 	.word	0x080074b9
 800745c:	080074b9 	.word	0x080074b9
 8007460:	080074b9 	.word	0x080074b9
 8007464:	080074b9 	.word	0x080074b9
 8007468:	080074b9 	.word	0x080074b9
 800746c:	080074b9 	.word	0x080074b9
 8007470:	080074bf 	.word	0x080074bf
 8007474:	080074b9 	.word	0x080074b9
 8007478:	080074b9 	.word	0x080074b9
 800747c:	080074b9 	.word	0x080074b9
 8007480:	080074b9 	.word	0x080074b9
 8007484:	080074b9 	.word	0x080074b9
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074bf 	.word	0x080074bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	2101      	movs	r1, #1
 800749a:	4618      	mov	r0, r3
 800749c:	f001 f97a 	bl	8008794 <RCCEx_PLL2_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80074a4:	e00c      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3324      	adds	r3, #36	; 0x24
 80074aa:	2101      	movs	r1, #1
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fa23 	bl	80088f8 <RCCEx_PLL3_Config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80074b6:	e003      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	75fb      	strb	r3, [r7, #23]
      break;
 80074bc:	e000      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80074be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80074c6:	4b32      	ldr	r3, [pc, #200]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d2:	492f      	ldr	r1, [pc, #188]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	654b      	str	r3, [r1, #84]	; 0x54
 80074d8:	e001      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d037      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d820      	bhi.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	0800753b 	.word	0x0800753b
 80074fc:	08007511 	.word	0x08007511
 8007500:	08007523 	.word	0x08007523
 8007504:	0800753b 	.word	0x0800753b
 8007508:	0800753b 	.word	0x0800753b
 800750c:	0800753b 	.word	0x0800753b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3304      	adds	r3, #4
 8007514:	2101      	movs	r1, #1
 8007516:	4618      	mov	r0, r3
 8007518:	f001 f93c 	bl	8008794 <RCCEx_PLL2_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007520:	e00c      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3324      	adds	r3, #36	; 0x24
 8007526:	2101      	movs	r1, #1
 8007528:	4618      	mov	r0, r3
 800752a:	f001 f9e5 	bl	80088f8 <RCCEx_PLL3_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007532:	e003      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
      break;
 8007538:	e000      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800753a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d109      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	f023 0207 	bic.w	r2, r3, #7
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754e:	4910      	ldr	r1, [pc, #64]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007550:	4313      	orrs	r3, r2
 8007552:	654b      	str	r3, [r1, #84]	; 0x54
 8007554:	e001      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007556:	7dfb      	ldrb	r3, [r7, #23]
 8007558:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	d040      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756c:	2b05      	cmp	r3, #5
 800756e:	d827      	bhi.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	080075c7 	.word	0x080075c7
 800757c:	0800759d 	.word	0x0800759d
 8007580:	080075af 	.word	0x080075af
 8007584:	080075c7 	.word	0x080075c7
 8007588:	080075c7 	.word	0x080075c7
 800758c:	080075c7 	.word	0x080075c7
 8007590:	58024400 	.word	0x58024400
 8007594:	58024800 	.word	0x58024800
 8007598:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3304      	adds	r3, #4
 80075a0:	2101      	movs	r1, #1
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 f8f6 	bl	8008794 <RCCEx_PLL2_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80075ac:	e00c      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3324      	adds	r3, #36	; 0x24
 80075b2:	2101      	movs	r1, #1
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 f99f 	bl	80088f8 <RCCEx_PLL3_Config>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80075be:	e003      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
      break;
 80075c4:	e000      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80075c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075ce:	4bb2      	ldr	r3, [pc, #712]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d2:	f023 0207 	bic.w	r2, r3, #7
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075dc:	49ae      	ldr	r1, [pc, #696]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	658b      	str	r3, [r1, #88]	; 0x58
 80075e2:	e001      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d044      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075fe:	d01b      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007604:	d805      	bhi.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d022      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800760a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800760e:	d00a      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007610:	e01b      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007616:	d01d      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800761c:	d01c      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800761e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007622:	d01b      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007624:	e011      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3304      	adds	r3, #4
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f001 f8b1 	bl	8008794 <RCCEx_PLL2_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007636:	e012      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3324      	adds	r3, #36	; 0x24
 800763c:	2102      	movs	r1, #2
 800763e:	4618      	mov	r0, r3
 8007640:	f001 f95a 	bl	80088f8 <RCCEx_PLL3_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007648:	e009      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
      break;
 800764e:	e006      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007650:	bf00      	nop
 8007652:	e004      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007654:	bf00      	nop
 8007656:	e002      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007658:	bf00      	nop
 800765a:	e000      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800765c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007664:	4b8c      	ldr	r3, [pc, #560]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007668:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007672:	4989      	ldr	r1, [pc, #548]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007674:	4313      	orrs	r3, r2
 8007676:	654b      	str	r3, [r1, #84]	; 0x54
 8007678:	e001      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d044      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007694:	d01b      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800769a:	d805      	bhi.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d022      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80076a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80076a6:	e01b      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80076a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ac:	d01d      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80076ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076b2:	d01c      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80076b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076b8:	d01b      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80076ba:	e011      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 f866 	bl	8008794 <RCCEx_PLL2_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076cc:	e012      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3324      	adds	r3, #36	; 0x24
 80076d2:	2102      	movs	r1, #2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f001 f90f 	bl	80088f8 <RCCEx_PLL3_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076de:	e009      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
      break;
 80076e4:	e006      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076e6:	bf00      	nop
 80076e8:	e004      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076ea:	bf00      	nop
 80076ec:	e002      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076ee:	bf00      	nop
 80076f0:	e000      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80076f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076fa:	4b67      	ldr	r3, [pc, #412]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007708:	4963      	ldr	r1, [pc, #396]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800770a:	4313      	orrs	r3, r2
 800770c:	658b      	str	r3, [r1, #88]	; 0x58
 800770e:	e001      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771c:	2b00      	cmp	r3, #0
 800771e:	d044      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800772a:	d01b      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800772c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007730:	d805      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d022      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773a:	d00a      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800773c:	e01b      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800773e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007742:	d01d      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007744:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007748:	d01c      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800774a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800774e:	d01b      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007750:	e011      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3304      	adds	r3, #4
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f001 f81b 	bl	8008794 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007762:	e012      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3324      	adds	r3, #36	; 0x24
 8007768:	2102      	movs	r1, #2
 800776a:	4618      	mov	r0, r3
 800776c:	f001 f8c4 	bl	80088f8 <RCCEx_PLL3_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007774:	e009      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	75fb      	strb	r3, [r7, #23]
      break;
 800777a:	e006      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800777c:	bf00      	nop
 800777e:	e004      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007780:	bf00      	nop
 8007782:	e002      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007784:	bf00      	nop
 8007786:	e000      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007790:	4b41      	ldr	r3, [pc, #260]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007794:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800779e:	493e      	ldr	r1, [pc, #248]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	658b      	str	r3, [r1, #88]	; 0x58
 80077a4:	e001      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d01a      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c0:	d10a      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3324      	adds	r3, #36	; 0x24
 80077c6:	2102      	movs	r1, #2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 f895 	bl	80088f8 <RCCEx_PLL3_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077d8:	4b2f      	ldr	r3, [pc, #188]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e6:	492c      	ldr	r1, [pc, #176]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01a      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007802:	d10a      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3324      	adds	r3, #36	; 0x24
 8007808:	2102      	movs	r1, #2
 800780a:	4618      	mov	r0, r3
 800780c:	f001 f874 	bl	80088f8 <RCCEx_PLL3_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800781a:	4b1f      	ldr	r3, [pc, #124]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800781c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007828:	491b      	ldr	r1, [pc, #108]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800782a:	4313      	orrs	r3, r2
 800782c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d032      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007844:	d00d      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800784a:	d016      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d111      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f000 ff9c 	bl	8008794 <RCCEx_PLL2_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007860:	e00c      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3324      	adds	r3, #36	; 0x24
 8007866:	2102      	movs	r1, #2
 8007868:	4618      	mov	r0, r3
 800786a:	f001 f845 	bl	80088f8 <RCCEx_PLL3_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007872:	e003      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	75fb      	strb	r3, [r7, #23]
      break;
 8007878:	e000      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800787a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10c      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007882:	4b05      	ldr	r3, [pc, #20]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007886:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007890:	4901      	ldr	r1, [pc, #4]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007892:	4313      	orrs	r3, r2
 8007894:	658b      	str	r3, [r1, #88]	; 0x58
 8007896:	e003      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d02f      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078b6:	d00c      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80078b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078bc:	d015      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80078be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078c2:	d10f      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c4:	4b79      	ldr	r3, [pc, #484]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	4a78      	ldr	r2, [pc, #480]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80078d0:	e00c      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3324      	adds	r3, #36	; 0x24
 80078d6:	2101      	movs	r1, #1
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f80d 	bl	80088f8 <RCCEx_PLL3_Config>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80078e2:	e003      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
      break;
 80078e8:	e000      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80078ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078f2:	4b6e      	ldr	r3, [pc, #440]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007900:	496a      	ldr	r1, [pc, #424]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007902:	4313      	orrs	r3, r2
 8007904:	654b      	str	r3, [r1, #84]	; 0x54
 8007906:	e001      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d029      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007924:	d007      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007926:	e00f      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007928:	4b60      	ldr	r3, [pc, #384]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	4a5f      	ldr	r2, [pc, #380]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007934:	e00b      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	2102      	movs	r1, #2
 800793c:	4618      	mov	r0, r3
 800793e:	f000 ff29 	bl	8008794 <RCCEx_PLL2_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007946:	e002      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	75fb      	strb	r3, [r7, #23]
      break;
 800794c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007954:	4b55      	ldr	r3, [pc, #340]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007960:	4952      	ldr	r1, [pc, #328]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007962:	4313      	orrs	r3, r2
 8007964:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007966:	e001      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3324      	adds	r3, #36	; 0x24
 800797c:	2102      	movs	r1, #2
 800797e:	4618      	mov	r0, r3
 8007980:	f000 ffba 	bl	80088f8 <RCCEx_PLL3_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d02f      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800799e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a2:	d00c      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80079a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a8:	d802      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d011      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80079ae:	e00d      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80079b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b4:	d00f      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80079b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ba:	d00e      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80079bc:	e006      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079be:	4b3b      	ldr	r3, [pc, #236]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	4a3a      	ldr	r2, [pc, #232]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80079ca:	e007      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
      break;
 80079d0:	e004      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80079d2:	bf00      	nop
 80079d4:	e002      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80079d6:	bf00      	nop
 80079d8:	e000      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80079da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079e2:	4b32      	ldr	r3, [pc, #200]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ee:	492f      	ldr	r1, [pc, #188]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	654b      	str	r3, [r1, #84]	; 0x54
 80079f4:	e001      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d008      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a06:	4b29      	ldr	r3, [pc, #164]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	4926      	ldr	r1, [pc, #152]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d009      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a24:	4b21      	ldr	r3, [pc, #132]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a32:	491e      	ldr	r1, [pc, #120]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a44:	4b19      	ldr	r3, [pc, #100]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a50:	4916      	ldr	r1, [pc, #88]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00d      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a62:	4b12      	ldr	r3, [pc, #72]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	4a11      	ldr	r2, [pc, #68]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a6c:	6113      	str	r3, [r2, #16]
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a78:	490c      	ldr	r1, [pc, #48]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da08      	bge.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a92:	4906      	ldr	r1, [pc, #24]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007a98:	7dbb      	ldrb	r3, [r7, #22]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e000      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	58024400 	.word	0x58024400

08007ab0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b090      	sub	sp, #64	; 0x40
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007abe:	d150      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007ac0:	4ba1      	ldr	r3, [pc, #644]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d844      	bhi.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007ad0:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad6:	bf00      	nop
 8007ad8:	08007aed 	.word	0x08007aed
 8007adc:	08007afd 	.word	0x08007afd
 8007ae0:	08007b0d 	.word	0x08007b0d
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b1d 	.word	0x08007b1d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fd03 	bl	80084fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007afa:	e241      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007afc:	f107 0318 	add.w	r3, r7, #24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fa63 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b0a:	e239      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b0c:	f107 030c 	add.w	r3, r7, #12
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fba7 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1a:	e231      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b1c:	4b8a      	ldr	r3, [pc, #552]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b24:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b2c:	4b87      	ldr	r3, [pc, #540]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b30:	e226      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b38:	d102      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007b3a:	4b85      	ldr	r3, [pc, #532]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b3e:	e21f      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b46:	d102      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007b48:	4b82      	ldr	r3, [pc, #520]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b4c:	e218      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b52:	e215      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b54:	4b80      	ldr	r3, [pc, #512]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b58:	e212      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b5e:	bf00      	nop
 8007b60:	e20e      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b68:	d14f      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007b6a:	4b77      	ldr	r3, [pc, #476]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007b72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	2b80      	cmp	r3, #128	; 0x80
 8007b78:	d01c      	beq.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	d804      	bhi.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d008      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d00e      	beq.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007b86:	e03c      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007b88:	2bc0      	cmp	r3, #192	; 0xc0
 8007b8a:	d037      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b90:	d018      	beq.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007b92:	e036      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fcaf 	bl	80084fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ba2:	e1ed      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ba4:	f107 0318 	add.w	r3, r7, #24
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fa0f 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb2:	e1e5      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb4:	f107 030c 	add.w	r3, r7, #12
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fb53 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc2:	e1dd      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bc4:	4b60      	ldr	r3, [pc, #384]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bcc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bd4:	4b5d      	ldr	r3, [pc, #372]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007bd8:	e1d2      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007be0:	d102      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007be2:	4b5b      	ldr	r3, [pc, #364]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be6:	e1cb      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bee:	d102      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007bf0:	4b58      	ldr	r3, [pc, #352]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf4:	e1c4      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bfa:	e1c1      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bfc:	4b56      	ldr	r3, [pc, #344]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c00:	e1be      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c06:	bf00      	nop
 8007c08:	e1ba      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c10:	d153      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007c12:	4b4d      	ldr	r3, [pc, #308]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c16:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007c1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c22:	d01f      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c28:	d805      	bhi.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c32:	d00f      	beq.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007c34:	e03d      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007c36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c3a:	d037      	beq.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007c3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c40:	d018      	beq.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007c42:	e036      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fc57 	bl	80084fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c52:	e195      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c54:	f107 0318 	add.w	r3, r7, #24
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 f9b7 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c62:	e18d      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fafb 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c72:	e185      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c74:	4b34      	ldr	r3, [pc, #208]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c84:	4b31      	ldr	r3, [pc, #196]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c88:	e17a      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c90:	d102      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007c92:	4b2f      	ldr	r3, [pc, #188]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c96:	e173      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007ca0:	4b2c      	ldr	r3, [pc, #176]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca4:	e16c      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007caa:	e169      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cac:	4b2a      	ldr	r3, [pc, #168]	; (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb0:	e166      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb6:	bf00      	nop
 8007cb8:	e162      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc0:	d15d      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007cc2:	4b21      	ldr	r3, [pc, #132]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007cca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cd2:	d01f      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007cd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cd8:	d805      	bhi.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ce2:	d00f      	beq.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007ce4:	e047      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007ce6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cea:	d041      	beq.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cf0:	d018      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007cf2:	e040      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fbff 	bl	80084fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d02:	e13d      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d04:	f107 0318 	add.w	r3, r7, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f95f 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d12:	e135      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 faa3 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d22:	e12d      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d24:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d38:	e122      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d40:	d10c      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007d42:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d46:	e11b      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007d48:	58024400 	.word	0x58024400
 8007d4c:	03d09000 	.word	0x03d09000
 8007d50:	003d0900 	.word	0x003d0900
 8007d54:	017d7840 	.word	0x017d7840
 8007d58:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d62:	d102      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007d64:	4b89      	ldr	r3, [pc, #548]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d68:	e10a      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d6e:	e107      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d70:	4b87      	ldr	r3, [pc, #540]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d74:	e104      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d7a:	bf00      	nop
 8007d7c:	e100      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d84:	d153      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007d86:	4b83      	ldr	r3, [pc, #524]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d96:	d01f      	beq.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9c:	d805      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da6:	d00f      	beq.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007da8:	e03d      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dae:	d037      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007db4:	d018      	beq.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007db6:	e036      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fb9d 	bl	80084fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc6:	e0db      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dc8:	f107 0318 	add.w	r3, r7, #24
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f8fd 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dd6:	e0d3      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dd8:	f107 030c 	add.w	r3, r7, #12
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 fa41 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de6:	e0cb      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007de8:	4b6a      	ldr	r3, [pc, #424]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007df8:	4b67      	ldr	r3, [pc, #412]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007dfc:	e0c0      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e04:	d102      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007e06:	4b65      	ldr	r3, [pc, #404]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0a:	e0b9      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e12:	d102      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007e14:	4b5d      	ldr	r3, [pc, #372]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e18:	e0b2      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1e:	e0af      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e20:	4b5b      	ldr	r3, [pc, #364]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e24:	e0ac      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2a:	bf00      	nop
 8007e2c:	e0a8      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e34:	d13d      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e36:	4b57      	ldr	r3, [pc, #348]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e3e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e46:	d00c      	beq.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e4c:	d011      	beq.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d12b      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e52:	f107 0318 	add.w	r3, r7, #24
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f8b8 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e60:	e08e      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e62:	f107 030c 	add.w	r3, r7, #12
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f9fc 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e70:	e086      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e72:	4b48      	ldr	r3, [pc, #288]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e7a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d102      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e82:	4b45      	ldr	r3, [pc, #276]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e86:	e07b      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e8e:	d102      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007e90:	4b42      	ldr	r3, [pc, #264]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e94:	e074      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9c:	d102      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007e9e:	4b3b      	ldr	r3, [pc, #236]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea2:	e06d      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea8:	e06a      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eae:	bf00      	nop
 8007eb0:	e066      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb8:	d11f      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007eba:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ece:	d008      	beq.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007ed0:	e00f      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fb10 	bl	80084fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee0:	e04e      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee2:	f107 0318 	add.w	r3, r7, #24
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f870 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ef0:	e046      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ef6:	bf00      	nop
 8007ef8:	e042      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f00:	d13c      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007f02:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f06:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007f0a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f12:	d01e      	beq.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f18:	d805      	bhi.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00d      	beq.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f22:	d00e      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007f24:	e026      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2a:	d01d      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f30:	d01d      	beq.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f36:	d014      	beq.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007f38:	e01c      	b.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007f3a:	f000 f831 	bl	8007fa0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007f40:	e01e      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f42:	f107 0318 	add.w	r3, r7, #24
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f840 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f50:	e016      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f52:	f107 030c 	add.w	r3, r7, #12
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f984 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f60:	e00e      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007f62:	4b0d      	ldr	r3, [pc, #52]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f66:	e00b      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6c:	e008      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f72:	e005      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f78:	bf00      	nop
 8007f7a:	e001      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3740      	adds	r7, #64	; 0x40
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	017d7840 	.word	0x017d7840
 8007f90:	00bb8000 	.word	0x00bb8000
 8007f94:	58024400 	.word	0x58024400
 8007f98:	03d09000 	.word	0x03d09000
 8007f9c:	003d0900 	.word	0x003d0900

08007fa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007fa4:	f7fe fe3a 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8007fa8:	4601      	mov	r1, r0
 8007faa:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	091b      	lsrs	r3, r3, #4
 8007fb0:	f003 0307 	and.w	r3, r3, #7
 8007fb4:	4a04      	ldr	r2, [pc, #16]	; (8007fc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007fb6:	5cd3      	ldrb	r3, [r2, r3]
 8007fb8:	f003 031f 	and.w	r3, r3, #31
 8007fbc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	58024400 	.word	0x58024400
 8007fc8:	0801144c 	.word	0x0801144c

08007fcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b089      	sub	sp, #36	; 0x24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fd4:	4b9d      	ldr	r3, [pc, #628]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd8:	f003 0303 	and.w	r3, r3, #3
 8007fdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007fde:	4b9b      	ldr	r3, [pc, #620]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe2:	0b1b      	lsrs	r3, r3, #12
 8007fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fe8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fea:	4b98      	ldr	r3, [pc, #608]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	091b      	lsrs	r3, r3, #4
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007ff6:	4b95      	ldr	r3, [pc, #596]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	08db      	lsrs	r3, r3, #3
 8007ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	fb02 f303 	mul.w	r3, r2, r3
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 810a 	beq.w	800822e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d05a      	beq.n	80080d6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008020:	2b01      	cmp	r3, #1
 8008022:	d302      	bcc.n	800802a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008024:	2b02      	cmp	r3, #2
 8008026:	d078      	beq.n	800811a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008028:	e099      	b.n	800815e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800802a:	4b88      	ldr	r3, [pc, #544]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d02d      	beq.n	8008092 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008036:	4b85      	ldr	r3, [pc, #532]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	08db      	lsrs	r3, r3, #3
 800803c:	f003 0303 	and.w	r3, r3, #3
 8008040:	4a83      	ldr	r2, [pc, #524]	; (8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008042:	fa22 f303 	lsr.w	r3, r2, r3
 8008046:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	ee07 3a90 	vmov	s15, r3
 8008058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008060:	4b7a      	ldr	r3, [pc, #488]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008070:	ed97 6a03 	vldr	s12, [r7, #12]
 8008074:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800807c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008090:	e087      	b.n	80081a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80080a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a4:	4b69      	ldr	r3, [pc, #420]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080d4:	e065      	b.n	80081a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800825c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80080e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e8:	4b58      	ldr	r3, [pc, #352]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f0:	ee07 3a90 	vmov	s15, r3
 80080f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008114:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008118:	e043      	b.n	80081a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008124:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008260 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812c:	4b47      	ldr	r3, [pc, #284]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008140:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008158:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800815c:	e021      	b.n	80081a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	ee07 3a90 	vmov	s15, r3
 8008164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008168:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800825c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800816c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008170:	4b36      	ldr	r3, [pc, #216]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008178:	ee07 3a90 	vmov	s15, r3
 800817c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008180:	ed97 6a03 	vldr	s12, [r7, #12]
 8008184:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081a0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80081a2:	4b2a      	ldr	r3, [pc, #168]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	0a5b      	lsrs	r3, r3, #9
 80081a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ac:	ee07 3a90 	vmov	s15, r3
 80081b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80081c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081c8:	ee17 2a90 	vmov	r2, s15
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80081d0:	4b1e      	ldr	r3, [pc, #120]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	0c1b      	lsrs	r3, r3, #16
 80081d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081f6:	ee17 2a90 	vmov	r2, s15
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081fe:	4b13      	ldr	r3, [pc, #76]	; (800824c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008202:	0e1b      	lsrs	r3, r3, #24
 8008204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008208:	ee07 3a90 	vmov	s15, r3
 800820c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008218:	edd7 6a07 	vldr	s13, [r7, #28]
 800821c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008224:	ee17 2a90 	vmov	r2, s15
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800822c:	e008      	b.n	8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	609a      	str	r2, [r3, #8]
}
 8008240:	bf00      	nop
 8008242:	3724      	adds	r7, #36	; 0x24
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	58024400 	.word	0x58024400
 8008250:	03d09000 	.word	0x03d09000
 8008254:	46000000 	.word	0x46000000
 8008258:	4c742400 	.word	0x4c742400
 800825c:	4a742400 	.word	0x4a742400
 8008260:	4bbebc20 	.word	0x4bbebc20

08008264 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008264:	b480      	push	{r7}
 8008266:	b089      	sub	sp, #36	; 0x24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800826c:	4b9d      	ldr	r3, [pc, #628]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008276:	4b9b      	ldr	r3, [pc, #620]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	0d1b      	lsrs	r3, r3, #20
 800827c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008280:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008282:	4b98      	ldr	r3, [pc, #608]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	0a1b      	lsrs	r3, r3, #8
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800828e:	4b95      	ldr	r3, [pc, #596]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008292:	08db      	lsrs	r3, r3, #3
 8008294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	fb02 f303 	mul.w	r3, r2, r3
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 810a 	beq.w	80084c6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d05a      	beq.n	800836e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d302      	bcc.n	80082c2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d078      	beq.n	80083b2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80082c0:	e099      	b.n	80083f6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082c2:	4b88      	ldr	r3, [pc, #544]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d02d      	beq.n	800832a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082ce:	4b85      	ldr	r3, [pc, #532]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	08db      	lsrs	r3, r3, #3
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	4a83      	ldr	r2, [pc, #524]	; (80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80082da:	fa22 f303 	lsr.w	r3, r2, r3
 80082de:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f8:	4b7a      	ldr	r3, [pc, #488]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008300:	ee07 3a90 	vmov	s15, r3
 8008304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008308:	ed97 6a03 	vldr	s12, [r7, #12]
 800830c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800831c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008324:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008328:	e087      	b.n	800843a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	ee07 3a90 	vmov	s15, r3
 8008330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008334:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80084f0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833c:	4b69      	ldr	r3, [pc, #420]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008344:	ee07 3a90 	vmov	s15, r3
 8008348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008350:	eddf 5a66 	vldr	s11, [pc, #408]	; 80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008354:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008368:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800836c:	e065      	b.n	800843a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	ee07 3a90 	vmov	s15, r3
 8008374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008378:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800837c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008380:	4b58      	ldr	r3, [pc, #352]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008388:	ee07 3a90 	vmov	s15, r3
 800838c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008390:	ed97 6a03 	vldr	s12, [r7, #12]
 8008394:	eddf 5a55 	vldr	s11, [pc, #340]	; 80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b0:	e043      	b.n	800843a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	ee07 3a90 	vmov	s15, r3
 80083b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80083c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c4:	4b47      	ldr	r3, [pc, #284]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80083dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083f4:	e021      	b.n	800843a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008400:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008408:	4b36      	ldr	r3, [pc, #216]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008418:	ed97 6a03 	vldr	s12, [r7, #12]
 800841c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008434:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008438:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800843a:	4b2a      	ldr	r3, [pc, #168]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	0a5b      	lsrs	r3, r3, #9
 8008440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008454:	edd7 6a07 	vldr	s13, [r7, #28]
 8008458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800845c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008460:	ee17 2a90 	vmov	r2, s15
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008468:	4b1e      	ldr	r3, [pc, #120]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800847e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008482:	edd7 6a07 	vldr	s13, [r7, #28]
 8008486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800848a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800848e:	ee17 2a90 	vmov	r2, s15
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008496:	4b13      	ldr	r3, [pc, #76]	; (80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	0e1b      	lsrs	r3, r3, #24
 800849c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084a0:	ee07 3a90 	vmov	s15, r3
 80084a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084bc:	ee17 2a90 	vmov	r2, s15
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084c4:	e008      	b.n	80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	609a      	str	r2, [r3, #8]
}
 80084d8:	bf00      	nop
 80084da:	3724      	adds	r7, #36	; 0x24
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	58024400 	.word	0x58024400
 80084e8:	03d09000 	.word	0x03d09000
 80084ec:	46000000 	.word	0x46000000
 80084f0:	4c742400 	.word	0x4c742400
 80084f4:	4a742400 	.word	0x4a742400
 80084f8:	4bbebc20 	.word	0x4bbebc20

080084fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b089      	sub	sp, #36	; 0x24
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008504:	4b9d      	ldr	r3, [pc, #628]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	f003 0303 	and.w	r3, r3, #3
 800850c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800850e:	4b9b      	ldr	r3, [pc, #620]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008518:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800851a:	4b98      	ldr	r3, [pc, #608]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008524:	4b95      	ldr	r3, [pc, #596]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	08db      	lsrs	r3, r3, #3
 800852a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	fb02 f303 	mul.w	r3, r2, r3
 8008534:	ee07 3a90 	vmov	s15, r3
 8008538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 810a 	beq.w	800875c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d05a      	beq.n	8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800854e:	2b01      	cmp	r3, #1
 8008550:	d302      	bcc.n	8008558 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008552:	2b02      	cmp	r3, #2
 8008554:	d078      	beq.n	8008648 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008556:	e099      	b.n	800868c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008558:	4b88      	ldr	r3, [pc, #544]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02d      	beq.n	80085c0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008564:	4b85      	ldr	r3, [pc, #532]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	08db      	lsrs	r3, r3, #3
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	4a84      	ldr	r2, [pc, #528]	; (8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008570:	fa22 f303 	lsr.w	r3, r2, r3
 8008574:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858e:	4b7b      	ldr	r3, [pc, #492]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859e:	ed97 6a03 	vldr	s12, [r7, #12]
 80085a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008784 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085be:	e087      	b.n	80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80085ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d2:	4b6a      	ldr	r3, [pc, #424]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008784 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008602:	e065      	b.n	80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800878c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008616:	4b59      	ldr	r3, [pc, #356]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008626:	ed97 6a03 	vldr	s12, [r7, #12]
 800862a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008784 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800862e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800863a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008646:	e043      	b.n	80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800865a:	4b48      	ldr	r3, [pc, #288]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800866a:	ed97 6a03 	vldr	s12, [r7, #12]
 800866e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008784 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800867a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800868a:	e021      	b.n	80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800878c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800869a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869e:	4b37      	ldr	r3, [pc, #220]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008784 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80086b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ce:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80086d0:	4b2a      	ldr	r3, [pc, #168]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d4:	0a5b      	lsrs	r3, r3, #9
 80086d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f6:	ee17 2a90 	vmov	r2, s15
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80086fe:	4b1f      	ldr	r3, [pc, #124]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	0c1b      	lsrs	r3, r3, #16
 8008704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008708:	ee07 3a90 	vmov	s15, r3
 800870c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008718:	edd7 6a07 	vldr	s13, [r7, #28]
 800871c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008724:	ee17 2a90 	vmov	r2, s15
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800872c:	4b13      	ldr	r3, [pc, #76]	; (800877c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008730:	0e1b      	lsrs	r3, r3, #24
 8008732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008746:	edd7 6a07 	vldr	s13, [r7, #28]
 800874a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800874e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008752:	ee17 2a90 	vmov	r2, s15
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800875a:	e008      	b.n	800876e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	609a      	str	r2, [r3, #8]
}
 800876e:	bf00      	nop
 8008770:	3724      	adds	r7, #36	; 0x24
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	58024400 	.word	0x58024400
 8008780:	03d09000 	.word	0x03d09000
 8008784:	46000000 	.word	0x46000000
 8008788:	4c742400 	.word	0x4c742400
 800878c:	4a742400 	.word	0x4a742400
 8008790:	4bbebc20 	.word	0x4bbebc20

08008794 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087a2:	4b53      	ldr	r3, [pc, #332]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d101      	bne.n	80087b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e099      	b.n	80088e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087b2:	4b4f      	ldr	r3, [pc, #316]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a4e      	ldr	r2, [pc, #312]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087be:	f7f9 f949 	bl	8001a54 <HAL_GetTick>
 80087c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087c4:	e008      	b.n	80087d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087c6:	f7f9 f945 	bl	8001a54 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d901      	bls.n	80087d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e086      	b.n	80088e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087d8:	4b45      	ldr	r3, [pc, #276]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1f0      	bne.n	80087c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087e4:	4b42      	ldr	r3, [pc, #264]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	031b      	lsls	r3, r3, #12
 80087f2:	493f      	ldr	r1, [pc, #252]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	628b      	str	r3, [r1, #40]	; 0x28
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	3b01      	subs	r3, #1
 8008808:	025b      	lsls	r3, r3, #9
 800880a:	b29b      	uxth	r3, r3
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	3b01      	subs	r3, #1
 8008814:	041b      	lsls	r3, r3, #16
 8008816:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	3b01      	subs	r3, #1
 8008822:	061b      	lsls	r3, r3, #24
 8008824:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008828:	4931      	ldr	r1, [pc, #196]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800882a:	4313      	orrs	r3, r2
 800882c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800882e:	4b30      	ldr	r3, [pc, #192]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	492d      	ldr	r1, [pc, #180]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800883c:	4313      	orrs	r3, r2
 800883e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008840:	4b2b      	ldr	r3, [pc, #172]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	f023 0220 	bic.w	r2, r3, #32
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	4928      	ldr	r1, [pc, #160]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008852:	4b27      	ldr	r3, [pc, #156]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	4a26      	ldr	r2, [pc, #152]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008858:	f023 0310 	bic.w	r3, r3, #16
 800885c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008862:	4b24      	ldr	r3, [pc, #144]	; (80088f4 <RCCEx_PLL2_Config+0x160>)
 8008864:	4013      	ands	r3, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	69d2      	ldr	r2, [r2, #28]
 800886a:	00d2      	lsls	r2, r2, #3
 800886c:	4920      	ldr	r1, [pc, #128]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800886e:	4313      	orrs	r3, r2
 8008870:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008872:	4b1f      	ldr	r3, [pc, #124]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	4a1e      	ldr	r2, [pc, #120]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008878:	f043 0310 	orr.w	r3, r3, #16
 800887c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008884:	4b1a      	ldr	r3, [pc, #104]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	4a19      	ldr	r2, [pc, #100]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800888a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800888e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008890:	e00f      	b.n	80088b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d106      	bne.n	80088a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008898:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	4a14      	ldr	r2, [pc, #80]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800889e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088a4:	e005      	b.n	80088b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088a6:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	4a11      	ldr	r2, [pc, #68]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a0e      	ldr	r2, [pc, #56]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088be:	f7f9 f8c9 	bl	8001a54 <HAL_GetTick>
 80088c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088c4:	e008      	b.n	80088d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088c6:	f7f9 f8c5 	bl	8001a54 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d901      	bls.n	80088d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e006      	b.n	80088e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0f0      	beq.n	80088c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	58024400 	.word	0x58024400
 80088f4:	ffff0007 	.word	0xffff0007

080088f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008906:	4b53      	ldr	r3, [pc, #332]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b03      	cmp	r3, #3
 8008910:	d101      	bne.n	8008916 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e099      	b.n	8008a4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008916:	4b4f      	ldr	r3, [pc, #316]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a4e      	ldr	r2, [pc, #312]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 800891c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008922:	f7f9 f897 	bl	8001a54 <HAL_GetTick>
 8008926:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008928:	e008      	b.n	800893c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800892a:	f7f9 f893 	bl	8001a54 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e086      	b.n	8008a4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800893c:	4b45      	ldr	r3, [pc, #276]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f0      	bne.n	800892a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008948:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 800894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	051b      	lsls	r3, r3, #20
 8008956:	493f      	ldr	r1, [pc, #252]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008958:	4313      	orrs	r3, r2
 800895a:	628b      	str	r3, [r1, #40]	; 0x28
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	3b01      	subs	r3, #1
 8008962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	3b01      	subs	r3, #1
 800896c:	025b      	lsls	r3, r3, #9
 800896e:	b29b      	uxth	r3, r3
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	3b01      	subs	r3, #1
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	3b01      	subs	r3, #1
 8008986:	061b      	lsls	r3, r3, #24
 8008988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800898c:	4931      	ldr	r1, [pc, #196]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 800898e:	4313      	orrs	r3, r2
 8008990:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008992:	4b30      	ldr	r3, [pc, #192]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	492d      	ldr	r1, [pc, #180]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089a4:	4b2b      	ldr	r3, [pc, #172]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	4928      	ldr	r1, [pc, #160]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089b6:	4b27      	ldr	r3, [pc, #156]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	4a26      	ldr	r2, [pc, #152]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089c2:	4b24      	ldr	r3, [pc, #144]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089c6:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <RCCEx_PLL3_Config+0x160>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	69d2      	ldr	r2, [r2, #28]
 80089ce:	00d2      	lsls	r2, r2, #3
 80089d0:	4920      	ldr	r1, [pc, #128]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089d6:	4b1f      	ldr	r3, [pc, #124]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089da:	4a1e      	ldr	r2, [pc, #120]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089e8:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	4a19      	ldr	r2, [pc, #100]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089f4:	e00f      	b.n	8008a16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d106      	bne.n	8008a0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089fc:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	4a14      	ldr	r2, [pc, #80]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a08:	e005      	b.n	8008a16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a0a:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	4a11      	ldr	r2, [pc, #68]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a16:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a0e      	ldr	r2, [pc, #56]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a22:	f7f9 f817 	bl	8001a54 <HAL_GetTick>
 8008a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a28:	e008      	b.n	8008a3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a2a:	f7f9 f813 	bl	8001a54 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d901      	bls.n	8008a3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e006      	b.n	8008a4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a3c:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0f0      	beq.n	8008a2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	58024400 	.word	0x58024400
 8008a58:	ffff0007 	.word	0xffff0007

08008a5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	; 0x28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e07c      	b.n	8008b68 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10c      	bne.n	8008a94 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7f8 fc74 	bl	800137c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2203      	movs	r2, #3
 8008a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f867 	bl	8008b70 <HAL_SD_InitCard>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e05d      	b.n	8008b68 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fdbe 	bl	8009634 <HAL_SD_GetCardStatus>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e052      	b.n	8008b68 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008ac2:	7e3b      	ldrb	r3, [r7, #24]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008ac8:	7e7b      	ldrb	r3, [r7, #25]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d10a      	bne.n	8008aec <HAL_SD_Init+0x90>
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d102      	bne.n	8008ae2 <HAL_SD_Init+0x86>
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d004      	beq.n	8008aec <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008aea:	e00b      	b.n	8008b04 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d104      	bne.n	8008afe <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008afa:	65da      	str	r2, [r3, #92]	; 0x5c
 8008afc:	e002      	b.n	8008b04 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fe74 	bl	80097f8 <HAL_SD_ConfigWideBusOperation>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e026      	b.n	8008b68 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008b1a:	f7f8 ff9b 	bl	8001a54 <HAL_GetTick>
 8008b1e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b20:	e011      	b.n	8008b46 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008b22:	f7f8 ff97 	bl	8001a54 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d109      	bne.n	8008b46 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e010      	b.n	8008b68 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 ff00 	bl	800994c <HAL_SD_GetCardState>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d1e7      	bne.n	8008b22 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3728      	adds	r7, #40	; 0x28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b70:	b5b0      	push	{r4, r5, r7, lr}
 8008b72:	b08e      	sub	sp, #56	; 0x38
 8008b74:	af04      	add	r7, sp, #16
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008b80:	2300      	movs	r3, #0
 8008b82:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008b88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008b8c:	f7fe ff90 	bl	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b90:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	0a1b      	lsrs	r3, r3, #8
 8008b96:	4a40      	ldr	r2, [pc, #256]	; (8008c98 <HAL_SD_InitCard+0x128>)
 8008b98:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9c:	091b      	lsrs	r3, r3, #4
 8008b9e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d107      	bne.n	8008bb8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0210 	orr.w	r2, r2, #16
 8008bb6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681d      	ldr	r5, [r3, #0]
 8008bbc:	466c      	mov	r4, sp
 8008bbe:	f107 0314 	add.w	r3, r7, #20
 8008bc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bca:	f107 0308 	add.w	r3, r7, #8
 8008bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	f002 fe8f 	bl	800b8f4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f002 fed2 	bl	800b984 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008bf2:	4a2a      	ldr	r2, [pc, #168]	; (8008c9c <HAL_SD_InitCard+0x12c>)
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f8 ff35 	bl	8001a6c <HAL_Delay>
 8008c02:	e002      	b.n	8008c0a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008c04:	2002      	movs	r0, #2
 8008c06:	f7f8 ff31 	bl	8001a6c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 ff7c 	bl	8009b08 <SD_PowerON>
 8008c10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00b      	beq.n	8008c30 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	431a      	orrs	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e02e      	b.n	8008c8e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 feab 	bl	800998c <SD_InitCard>
 8008c36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e01b      	b.n	8008c8e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f002 ff26 	bl	800bab0 <SDMMC_CmdBlockLength>
 8008c64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00f      	beq.n	8008c8c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a0b      	ldr	r2, [pc, #44]	; (8008ca0 <HAL_SD_InitCard+0x130>)
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e000      	b.n	8008c8e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3728      	adds	r7, #40	; 0x28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bdb0      	pop	{r4, r5, r7, pc}
 8008c96:	bf00      	nop
 8008c98:	014f8b59 	.word	0x014f8b59
 8008c9c:	00012110 	.word	0x00012110
 8008ca0:	1fe00fff 	.word	0x1fe00fff

08008ca4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b092      	sub	sp, #72	; 0x48
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008cb2:	f7f8 fecf 	bl	8001a54 <HAL_GetTick>
 8008cb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d107      	bne.n	8008cd6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e167      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	f040 815a 	bne.w	8008f98 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	441a      	add	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d907      	bls.n	8008d08 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e14e      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2200      	movs	r2, #0
 8008d16:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d002      	beq.n	8008d26 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d22:	025b      	lsls	r3, r3, #9
 8008d24:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d26:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	025b      	lsls	r3, r3, #9
 8008d30:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d32:	2390      	movs	r3, #144	; 0x90
 8008d34:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d36:	2302      	movs	r3, #2
 8008d38:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f107 0214 	add.w	r2, r7, #20
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f002 fe83 	bl	800ba58 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d60:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d90a      	bls.n	8008d7e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d74:	4618      	mov	r0, r3
 8008d76:	f002 fee1 	bl	800bb3c <SDMMC_CmdReadMultiBlock>
 8008d7a:	6478      	str	r0, [r7, #68]	; 0x44
 8008d7c:	e009      	b.n	8008d92 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 feb3 	bl	800baf6 <SDMMC_CmdReadSingleBlock>
 8008d90:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d012      	beq.n	8008dbe <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a84      	ldr	r2, [pc, #528]	; (8008fb0 <HAL_SD_ReadBlocks+0x30c>)
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da6:	431a      	orrs	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e0f3      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008dc2:	e058      	b.n	8008e76 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d033      	beq.n	8008e3a <HAL_SD_ReadBlocks+0x196>
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd4:	2b1f      	cmp	r3, #31
 8008dd6:	d930      	bls.n	8008e3a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	643b      	str	r3, [r7, #64]	; 0x40
 8008ddc:	e027      	b.n	8008e2e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f002 fdb0 	bl	800b948 <SDMMC_ReadFIFO>
 8008de8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	3301      	adds	r3, #1
 8008df6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	0a1b      	lsrs	r3, r3, #8
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e04:	3301      	adds	r3, #1
 8008e06:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0a:	0c1b      	lsrs	r3, r3, #16
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	3301      	adds	r3, #1
 8008e16:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	0e1b      	lsrs	r3, r3, #24
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	3301      	adds	r3, #1
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e30:	2b07      	cmp	r3, #7
 8008e32:	d9d4      	bls.n	8008dde <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e36:	3b20      	subs	r3, #32
 8008e38:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e3a:	f7f8 fe0b 	bl	8001a54 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d902      	bls.n	8008e50 <HAL_SD_ReadBlocks+0x1ac>
 8008e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d112      	bne.n	8008e76 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a56      	ldr	r2, [pc, #344]	; (8008fb0 <HAL_SD_ReadBlocks+0x30c>)
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e097      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d09f      	beq.n	8008dc4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e92:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d022      	beq.n	8008ee8 <HAL_SD_ReadBlocks+0x244>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d91f      	bls.n	8008ee8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d01b      	beq.n	8008ee8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f002 feab 	bl	800bc10 <SDMMC_CmdStopTransfer>
 8008eba:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d012      	beq.n	8008ee8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a3a      	ldr	r2, [pc, #232]	; (8008fb0 <HAL_SD_ReadBlocks+0x30c>)
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e05e      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eee:	f003 0308 	and.w	r3, r3, #8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d012      	beq.n	8008f1c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a2d      	ldr	r2, [pc, #180]	; (8008fb0 <HAL_SD_ReadBlocks+0x30c>)
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	f043 0208 	orr.w	r2, r3, #8
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e044      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d012      	beq.n	8008f50 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a20      	ldr	r2, [pc, #128]	; (8008fb0 <HAL_SD_ReadBlocks+0x30c>)
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	f043 0202 	orr.w	r2, r3, #2
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e02a      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d012      	beq.n	8008f84 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a13      	ldr	r2, [pc, #76]	; (8008fb0 <HAL_SD_ReadBlocks+0x30c>)
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6a:	f043 0220 	orr.w	r2, r3, #32
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e010      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a0a      	ldr	r2, [pc, #40]	; (8008fb4 <HAL_SD_ReadBlocks+0x310>)
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	e006      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3748      	adds	r7, #72	; 0x48
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	1fe00fff 	.word	0x1fe00fff
 8008fb4:	18000f3a 	.word	0x18000f3a

08008fb8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b092      	sub	sp, #72	; 0x48
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008fc6:	f7f8 fd45 	bl	8001a54 <HAL_GetTick>
 8008fca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d107      	bne.n	8008fea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e16b      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	f040 815e 	bne.w	80092b4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	441a      	add	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009008:	429a      	cmp	r2, r3
 800900a:	d907      	bls.n	800901c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e152      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2203      	movs	r2, #3
 8009020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2200      	movs	r2, #0
 800902a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009030:	2b01      	cmp	r3, #1
 8009032:	d002      	beq.n	800903a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	025b      	lsls	r3, r3, #9
 8009038:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800903a:	f04f 33ff 	mov.w	r3, #4294967295
 800903e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	025b      	lsls	r3, r3, #9
 8009044:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009046:	2390      	movs	r3, #144	; 0x90
 8009048:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800904a:	2300      	movs	r3, #0
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800904e:	2300      	movs	r3, #0
 8009050:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009052:	2300      	movs	r3, #0
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f107 0218 	add.w	r2, r7, #24
 800905e:	4611      	mov	r1, r2
 8009060:	4618      	mov	r0, r3
 8009062:	f002 fcf9 	bl	800ba58 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68da      	ldr	r2, [r3, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009074:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d90a      	bls.n	8009092 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2220      	movs	r2, #32
 8009080:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009088:	4618      	mov	r0, r3
 800908a:	f002 fd9d 	bl	800bbc8 <SDMMC_CmdWriteMultiBlock>
 800908e:	6478      	str	r0, [r7, #68]	; 0x44
 8009090:	e009      	b.n	80090a6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2210      	movs	r2, #16
 8009096:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800909e:	4618      	mov	r0, r3
 80090a0:	f002 fd6f 	bl	800bb82 <SDMMC_CmdWriteSingleBlock>
 80090a4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d012      	beq.n	80090d2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a86      	ldr	r2, [pc, #536]	; (80092cc <HAL_SD_WriteBlocks+0x314>)
 80090b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ba:	431a      	orrs	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e0f7      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80090d6:	e05c      	b.n	8009192 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d037      	beq.n	8009156 <HAL_SD_WriteBlocks+0x19e>
 80090e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e8:	2b1f      	cmp	r3, #31
 80090ea:	d934      	bls.n	8009156 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80090ec:	2300      	movs	r3, #0
 80090ee:	643b      	str	r3, [r7, #64]	; 0x40
 80090f0:	e02b      	b.n	800914a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80090f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80090f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fa:	3301      	adds	r3, #1
 80090fc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80090fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	021a      	lsls	r2, r3, #8
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	4313      	orrs	r3, r2
 8009108:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800910a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910c:	3301      	adds	r3, #1
 800910e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	041a      	lsls	r2, r3, #16
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800911c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911e:	3301      	adds	r3, #1
 8009120:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	061a      	lsls	r2, r3, #24
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	4313      	orrs	r3, r2
 800912c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800912e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009130:	3301      	adds	r3, #1
 8009132:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f107 0214 	add.w	r2, r7, #20
 800913c:	4611      	mov	r1, r2
 800913e:	4618      	mov	r0, r3
 8009140:	f002 fc0f 	bl	800b962 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009146:	3301      	adds	r3, #1
 8009148:	643b      	str	r3, [r7, #64]	; 0x40
 800914a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800914c:	2b07      	cmp	r3, #7
 800914e:	d9d0      	bls.n	80090f2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009152:	3b20      	subs	r3, #32
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009156:	f7f8 fc7d 	bl	8001a54 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009162:	429a      	cmp	r2, r3
 8009164:	d902      	bls.n	800916c <HAL_SD_WriteBlocks+0x1b4>
 8009166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009168:	2b00      	cmp	r3, #0
 800916a:	d112      	bne.n	8009192 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a56      	ldr	r2, [pc, #344]	; (80092cc <HAL_SD_WriteBlocks+0x314>)
 8009172:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800917a:	431a      	orrs	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e097      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009198:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800919c:	2b00      	cmp	r3, #0
 800919e:	d09b      	beq.n	80090d8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ae:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d022      	beq.n	8009204 <HAL_SD_WriteBlocks+0x24c>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d91f      	bls.n	8009204 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d01b      	beq.n	8009204 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f002 fd1d 	bl	800bc10 <SDMMC_CmdStopTransfer>
 80091d6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80091d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d012      	beq.n	8009204 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a3a      	ldr	r2, [pc, #232]	; (80092cc <HAL_SD_WriteBlocks+0x314>)
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ec:	431a      	orrs	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e05e      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920a:	f003 0308 	and.w	r3, r3, #8
 800920e:	2b00      	cmp	r3, #0
 8009210:	d012      	beq.n	8009238 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a2d      	ldr	r2, [pc, #180]	; (80092cc <HAL_SD_WriteBlocks+0x314>)
 8009218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	f043 0208 	orr.w	r2, r3, #8
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e044      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d012      	beq.n	800926c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a20      	ldr	r2, [pc, #128]	; (80092cc <HAL_SD_WriteBlocks+0x314>)
 800924c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009252:	f043 0202 	orr.w	r2, r3, #2
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e02a      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b00      	cmp	r3, #0
 8009278:	d012      	beq.n	80092a0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a13      	ldr	r2, [pc, #76]	; (80092cc <HAL_SD_WriteBlocks+0x314>)
 8009280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	f043 0210 	orr.w	r2, r3, #16
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e010      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a0a      	ldr	r2, [pc, #40]	; (80092d0 <HAL_SD_WriteBlocks+0x318>)
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e006      	b.n	80092c2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
  }
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3748      	adds	r7, #72	; 0x48
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	1fe00fff 	.word	0x1fe00fff
 80092d0:	18000f3a 	.word	0x18000f3a

080092d4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
	...

080092ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092fa:	0f9b      	lsrs	r3, r3, #30
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009306:	0e9b      	lsrs	r3, r3, #26
 8009308:	b2db      	uxtb	r3, r3
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	b2da      	uxtb	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009318:	0e1b      	lsrs	r3, r3, #24
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800932a:	0c1b      	lsrs	r3, r3, #16
 800932c:	b2da      	uxtb	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009336:	0a1b      	lsrs	r3, r3, #8
 8009338:	b2da      	uxtb	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009342:	b2da      	uxtb	r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800934c:	0d1b      	lsrs	r3, r3, #20
 800934e:	b29a      	uxth	r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009358:	0c1b      	lsrs	r3, r3, #16
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	b2da      	uxtb	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800936a:	0bdb      	lsrs	r3, r3, #15
 800936c:	b2db      	uxtb	r3, r3
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	b2da      	uxtb	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800937c:	0b9b      	lsrs	r3, r3, #14
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938e:	0b5b      	lsrs	r3, r3, #13
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a0:	0b1b      	lsrs	r3, r3, #12
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2200      	movs	r2, #0
 80093b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d163      	bne.n	8009484 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093c0:	009a      	lsls	r2, r3, #2
 80093c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093c6:	4013      	ands	r3, r2
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80093cc:	0f92      	lsrs	r2, r2, #30
 80093ce:	431a      	orrs	r2, r3
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d8:	0edb      	lsrs	r3, r3, #27
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 0307 	and.w	r3, r3, #7
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ea:	0e1b      	lsrs	r3, r3, #24
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 0307 	and.w	r3, r3, #7
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093fc:	0d5b      	lsrs	r3, r3, #21
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	b2da      	uxtb	r2, r3
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940e:	0c9b      	lsrs	r3, r3, #18
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	b2da      	uxtb	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009420:	0bdb      	lsrs	r3, r3, #15
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	b2da      	uxtb	r2, r3
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	7e1b      	ldrb	r3, [r3, #24]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	3302      	adds	r3, #2
 8009444:	2201      	movs	r2, #1
 8009446:	fa02 f303 	lsl.w	r3, r2, r3
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800944e:	fb02 f203 	mul.w	r2, r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	7a1b      	ldrb	r3, [r3, #8]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	2201      	movs	r2, #1
 8009462:	409a      	lsls	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009470:	0a52      	lsrs	r2, r2, #9
 8009472:	fb02 f203 	mul.w	r2, r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009480:	659a      	str	r2, [r3, #88]	; 0x58
 8009482:	e031      	b.n	80094e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009488:	2b01      	cmp	r3, #1
 800948a:	d11d      	bne.n	80094c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	431a      	orrs	r2, r3
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	3301      	adds	r3, #1
 80094a8:	029a      	lsls	r2, r3, #10
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094bc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	659a      	str	r2, [r3, #88]	; 0x58
 80094c6:	e00f      	b.n	80094e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a58      	ldr	r2, [pc, #352]	; (8009630 <HAL_SD_GetCardCSD+0x344>)
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e09d      	b.n	8009624 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ec:	0b9b      	lsrs	r3, r3, #14
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094fe:	09db      	lsrs	r3, r3, #7
 8009500:	b2db      	uxtb	r3, r3
 8009502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009506:	b2da      	uxtb	r2, r3
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009520:	0fdb      	lsrs	r3, r3, #31
 8009522:	b2da      	uxtb	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952c:	0f5b      	lsrs	r3, r3, #29
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 0303 	and.w	r3, r3, #3
 8009534:	b2da      	uxtb	r2, r3
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800953e:	0e9b      	lsrs	r3, r3, #26
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	b2da      	uxtb	r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009550:	0d9b      	lsrs	r3, r3, #22
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	b2da      	uxtb	r2, r3
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009562:	0d5b      	lsrs	r3, r3, #21
 8009564:	b2db      	uxtb	r3, r3
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	b2da      	uxtb	r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957e:	0c1b      	lsrs	r3, r3, #16
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009592:	0bdb      	lsrs	r3, r3, #15
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a6:	0b9b      	lsrs	r3, r3, #14
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ba:	0b5b      	lsrs	r3, r3, #13
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ce:	0b1b      	lsrs	r3, r3, #12
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095e2:	0a9b      	lsrs	r3, r3, #10
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f6:	0a1b      	lsrs	r3, r3, #8
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800960a:	085b      	lsrs	r3, r3, #1
 800960c:	b2db      	uxtb	r3, r3
 800960e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009612:	b2da      	uxtb	r2, r3
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	1fe00fff 	.word	0x1fe00fff

08009634 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b094      	sub	sp, #80	; 0x50
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009644:	f107 0308 	add.w	r3, r7, #8
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fb64 	bl	8009d18 <SD_SendSDStatus>
 8009650:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009654:	2b00      	cmp	r3, #0
 8009656:	d011      	beq.n	800967c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a4f      	ldr	r2, [pc, #316]	; (800979c <HAL_SD_GetCardStatus+0x168>)
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800967a:	e070      	b.n	800975e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	099b      	lsrs	r3, r3, #6
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	b2da      	uxtb	r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	095b      	lsrs	r3, r3, #5
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	b2da      	uxtb	r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	0e1b      	lsrs	r3, r3, #24
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	4313      	orrs	r3, r2
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	061a      	lsls	r2, r3, #24
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	021b      	lsls	r3, r3, #8
 80096be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096c2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096cc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	0e1b      	lsrs	r3, r3, #24
 80096d2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	0a1b      	lsrs	r3, r3, #8
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	0d1b      	lsrs	r3, r3, #20
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	b29b      	uxth	r3, r3
 8009700:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009704:	b29a      	uxth	r2, r3
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	b29b      	uxth	r3, r3
 800970a:	b2db      	uxtb	r3, r3
 800970c:	b29b      	uxth	r3, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	b29a      	uxth	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	0a9b      	lsrs	r3, r3, #10
 800971a:	b2db      	uxtb	r3, r3
 800971c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009720:	b2da      	uxtb	r2, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	0a1b      	lsrs	r3, r3, #8
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	b2da      	uxtb	r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	091b      	lsrs	r3, r3, #4
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	b2da      	uxtb	r2, r3
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	b2da      	uxtb	r2, r3
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	b2da      	uxtb	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009766:	4618      	mov	r0, r3
 8009768:	f002 f9a2 	bl	800bab0 <SDMMC_CmdBlockLength>
 800976c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800976e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00d      	beq.n	8009790 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a08      	ldr	r2, [pc, #32]	; (800979c <HAL_SD_GetCardStatus+0x168>)
 800977a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009780:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009790:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009794:	4618      	mov	r0, r3
 8009796:	3750      	adds	r7, #80	; 0x50
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	1fe00fff 	.word	0x1fe00fff

080097a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80097f8:	b5b0      	push	{r4, r5, r7, lr}
 80097fa:	b08e      	sub	sp, #56	; 0x38
 80097fc:	af04      	add	r7, sp, #16
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2203      	movs	r2, #3
 800980c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009814:	2b03      	cmp	r3, #3
 8009816:	d02e      	beq.n	8009876 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800981e:	d106      	bne.n	800982e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	639a      	str	r2, [r3, #56]	; 0x38
 800982c:	e029      	b.n	8009882 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009834:	d10a      	bne.n	800984c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fb66 	bl	8009f08 <SD_WideBus_Enable>
 800983c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	639a      	str	r2, [r3, #56]	; 0x38
 800984a:	e01a      	b.n	8009882 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fba3 	bl	8009f9e <SD_WideBus_Disable>
 8009858:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	431a      	orrs	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	639a      	str	r2, [r3, #56]	; 0x38
 8009866:	e00c      	b.n	8009882 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	639a      	str	r2, [r3, #56]	; 0x38
 8009874:	e005      	b.n	8009882 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a2e      	ldr	r2, [pc, #184]	; (8009948 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009898:	e034      	b.n	8009904 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d903      	bls.n	80098c0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	e012      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c8:	d103      	bne.n	80098d2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	e009      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098da:	d102      	bne.n	80098e2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80098dc:	2302      	movs	r3, #2
 80098de:	61bb      	str	r3, [r7, #24]
 80098e0:	e001      	b.n	80098e6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80098e2:	2304      	movs	r3, #4
 80098e4:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681d      	ldr	r5, [r3, #0]
 80098ea:	466c      	mov	r4, sp
 80098ec:	f107 0314 	add.w	r3, r7, #20
 80098f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098f8:	f107 0308 	add.w	r3, r7, #8
 80098fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098fe:	4628      	mov	r0, r5
 8009900:	f001 fff8 	bl	800b8f4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800990c:	4618      	mov	r0, r3
 800990e:	f002 f8cf 	bl	800bab0 <SDMMC_CmdBlockLength>
 8009912:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00c      	beq.n	8009934 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a0a      	ldr	r2, [pc, #40]	; (8009948 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009920:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	431a      	orrs	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800993c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009940:	4618      	mov	r0, r3
 8009942:	3728      	adds	r7, #40	; 0x28
 8009944:	46bd      	mov	sp, r7
 8009946:	bdb0      	pop	{r4, r5, r7, pc}
 8009948:	1fe00fff 	.word	0x1fe00fff

0800994c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 faaa 	bl	8009eb8 <SD_SendStatus>
 8009964:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	431a      	orrs	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	0a5b      	lsrs	r3, r3, #9
 800997c:	f003 030f 	and.w	r3, r3, #15
 8009980:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009982:	693b      	ldr	r3, [r7, #16]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b091      	sub	sp, #68	; 0x44
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009994:	2301      	movs	r3, #1
 8009996:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4618      	mov	r0, r3
 800999e:	f002 f802 	bl	800b9a6 <SDMMC_GetPowerState>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80099ac:	e0a8      	b.n	8009b00 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	d02e      	beq.n	8009a14 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 fa4e 	bl	800be5c <SDMMC_CmdSendCID>
 80099c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <SD_InitCard+0x40>
    {
      return errorstate;
 80099c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ca:	e099      	b.n	8009b00 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2100      	movs	r1, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f002 f82d 	bl	800ba32 <SDMMC_GetResponse>
 80099d8:	4602      	mov	r2, r0
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2104      	movs	r1, #4
 80099e4:	4618      	mov	r0, r3
 80099e6:	f002 f824 	bl	800ba32 <SDMMC_GetResponse>
 80099ea:	4602      	mov	r2, r0
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2108      	movs	r1, #8
 80099f6:	4618      	mov	r0, r3
 80099f8:	f002 f81b 	bl	800ba32 <SDMMC_GetResponse>
 80099fc:	4602      	mov	r2, r0
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	210c      	movs	r1, #12
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f002 f812 	bl	800ba32 <SDMMC_GetResponse>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d00d      	beq.n	8009a38 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f107 020e 	add.w	r2, r7, #14
 8009a24:	4611      	mov	r1, r2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 fa57 	bl	800beda <SDMMC_CmdSetRelAdd>
 8009a2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <SD_InitCard+0xac>
    {
      return errorstate;
 8009a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a36:	e063      	b.n	8009b00 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d036      	beq.n	8009aae <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a40:	89fb      	ldrh	r3, [r7, #14]
 8009a42:	461a      	mov	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a50:	041b      	lsls	r3, r3, #16
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f002 fa20 	bl	800be9a <SDMMC_CmdSendCSD>
 8009a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <SD_InitCard+0xda>
    {
      return errorstate;
 8009a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a64:	e04c      	b.n	8009b00 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f001 ffe0 	bl	800ba32 <SDMMC_GetResponse>
 8009a72:	4602      	mov	r2, r0
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2104      	movs	r1, #4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f001 ffd7 	bl	800ba32 <SDMMC_GetResponse>
 8009a84:	4602      	mov	r2, r0
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2108      	movs	r1, #8
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 ffce 	bl	800ba32 <SDMMC_GetResponse>
 8009a96:	4602      	mov	r2, r0
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	210c      	movs	r1, #12
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 ffc5 	bl	800ba32 <SDMMC_GetResponse>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2104      	movs	r1, #4
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 ffbc 	bl	800ba32 <SDMMC_GetResponse>
 8009aba:	4603      	mov	r3, r0
 8009abc:	0d1a      	lsrs	r2, r3, #20
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ac2:	f107 0310 	add.w	r3, r7, #16
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff fc0f 	bl	80092ec <HAL_SD_GetCardCSD>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ad4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ad8:	e012      	b.n	8009b00 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6819      	ldr	r1, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ae2:	041b      	lsls	r3, r3, #16
 8009ae4:	f04f 0400 	mov.w	r4, #0
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4623      	mov	r3, r4
 8009aec:	4608      	mov	r0, r1
 8009aee:	f002 f8cb 	bl	800bc88 <SDMMC_CmdSelDesel>
 8009af2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <SD_InitCard+0x172>
  {
    return errorstate;
 8009afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afc:	e000      	b.n	8009b00 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3744      	adds	r7, #68	; 0x44
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd90      	pop	{r4, r7, pc}

08009b08 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	61fb      	str	r3, [r7, #28]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009b1c:	f7f7 ff9a 	bl	8001a54 <HAL_GetTick>
 8009b20:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f002 f8d2 	bl	800bcd0 <SDMMC_CmdGoIdleState>
 8009b2c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <SD_PowerON+0x30>
  {
    return errorstate;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	e0e9      	b.n	8009d0c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f002 f8e5 	bl	800bd0c <SDMMC_CmdOperCond>
 8009b42:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00d      	beq.n	8009b66 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f002 f8bb 	bl	800bcd0 <SDMMC_CmdGoIdleState>
 8009b5a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <SD_PowerON+0x64>
    {
      return errorstate;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	e0d2      	b.n	8009d0c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d137      	bne.n	8009be4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f002 f8e6 	bl	800bd4c <SDMMC_CmdAppCommand>
 8009b80:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d02d      	beq.n	8009be4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b8c:	e0be      	b.n	8009d0c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2100      	movs	r1, #0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f002 f8d9 	bl	800bd4c <SDMMC_CmdAppCommand>
 8009b9a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	e0b2      	b.n	8009d0c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	495a      	ldr	r1, [pc, #360]	; (8009d14 <SD_PowerON+0x20c>)
 8009bac:	4618      	mov	r0, r3
 8009bae:	f002 f8f0 	bl	800bd92 <SDMMC_CmdAppOperCommand>
 8009bb2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bbe:	e0a5      	b.n	8009d0c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 ff33 	bl	800ba32 <SDMMC_GetResponse>
 8009bcc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	0fdb      	lsrs	r3, r3, #31
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <SD_PowerON+0xd2>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <SD_PowerON+0xd4>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61bb      	str	r3, [r7, #24]

    count++;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d802      	bhi.n	8009bf4 <SD_PowerON+0xec>
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d0cc      	beq.n	8009b8e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d902      	bls.n	8009c04 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c02:	e083      	b.n	8009d0c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d07d      	beq.n	8009d0a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d176      	bne.n	8009d0a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d071      	beq.n	8009d0a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c2c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f042 0208 	orr.w	r2, r2, #8
 8009c3c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f002 f9b0 	bl	800bfa8 <SDMMC_CmdVoltageSwitch>
 8009c48:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00c      	beq.n	8009c6a <SD_PowerON+0x162>
        {
          return errorstate;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	e05b      	b.n	8009d0c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c54:	f7f7 fefe 	bl	8001a54 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c62:	d102      	bne.n	8009c6a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009c64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c68:	e050      	b.n	8009d0c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c78:	d1ec      	bne.n	8009c54 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009c82:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c92:	d002      	beq.n	8009c9a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009c94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c98:	e038      	b.n	8009d0c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	f7ff fb1a 	bl	80092d4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0204 	orr.w	r2, r2, #4
 8009cae:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009cb0:	e00a      	b.n	8009cc8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009cb2:	f7f7 fecf 	bl	8001a54 <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc0:	d102      	bne.n	8009cc8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009cc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cc6:	e021      	b.n	8009d0c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cd6:	d1ec      	bne.n	8009cb2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ce0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cf0:	d102      	bne.n	8009cf8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cf6:	e009      	b.n	8009d0c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2213      	movs	r2, #19
 8009cfe:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f04f 32ff 	mov.w	r2, #4294967295
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3720      	adds	r7, #32
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	c1100000 	.word	0xc1100000

08009d18 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08c      	sub	sp, #48	; 0x30
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d22:	f7f7 fe97 	bl	8001a54 <HAL_GetTick>
 8009d26:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fe7d 	bl	800ba32 <SDMMC_GetResponse>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d42:	d102      	bne.n	8009d4a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d48:	e0b0      	b.n	8009eac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2140      	movs	r1, #64	; 0x40
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fead 	bl	800bab0 <SDMMC_CmdBlockLength>
 8009d56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	e0a0      	b.n	8009eac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d72:	041b      	lsls	r3, r3, #16
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f001 ffe8 	bl	800bd4c <SDMMC_CmdAppCommand>
 8009d7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d005      	beq.n	8009d90 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	e08d      	b.n	8009eac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d90:	f04f 33ff 	mov.w	r3, #4294967295
 8009d94:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d9a:	2360      	movs	r3, #96	; 0x60
 8009d9c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d9e:	2302      	movs	r3, #2
 8009da0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009da6:	2301      	movs	r3, #1
 8009da8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f107 0208 	add.w	r2, r7, #8
 8009db2:	4611      	mov	r1, r2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f001 fe4f 	bl	800ba58 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f002 f8d0 	bl	800bf64 <SDMMC_CmdStatusRegister>
 8009dc4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d02b      	beq.n	8009e24 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	e069      	b.n	8009eac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d013      	beq.n	8009e0e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009de6:	2300      	movs	r3, #0
 8009de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dea:	e00d      	b.n	8009e08 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 fda9 	bl	800b948 <SDMMC_ReadFIFO>
 8009df6:	4602      	mov	r2, r0
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	601a      	str	r2, [r3, #0]
        pData++;
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	3304      	adds	r3, #4
 8009e00:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e04:	3301      	adds	r3, #1
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0a:	2b07      	cmp	r3, #7
 8009e0c:	d9ee      	bls.n	8009dec <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e0e:	f7f7 fe21 	bl	8001a54 <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	d102      	bne.n	8009e24 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e22:	e043      	b.n	8009eac <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0d2      	beq.n	8009dd8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e38:	f003 0308 	and.w	r3, r3, #8
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e40:	2308      	movs	r3, #8
 8009e42:	e033      	b.n	8009eac <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e52:	2302      	movs	r3, #2
 8009e54:	e02a      	b.n	8009eac <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d017      	beq.n	8009e94 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009e64:	2320      	movs	r3, #32
 8009e66:	e021      	b.n	8009eac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 fd6b 	bl	800b948 <SDMMC_ReadFIFO>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	601a      	str	r2, [r3, #0]
    pData++;
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e7e:	f7f7 fde9 	bl	8001a54 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8c:	d102      	bne.n	8009e94 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e92:	e00b      	b.n	8009eac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e2      	bne.n	8009e68 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a03      	ldr	r2, [pc, #12]	; (8009eb4 <SD_SendSDStatus+0x19c>)
 8009ea8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3730      	adds	r7, #48	; 0x30
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	18000f3a 	.word	0x18000f3a

08009eb8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009ec8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ecc:	e018      	b.n	8009f00 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ed6:	041b      	lsls	r3, r3, #16
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f002 f81f 	bl	800bf1e <SDMMC_CmdSendStatus>
 8009ee0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <SD_SendStatus+0x34>
  {
    return errorstate;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	e009      	b.n	8009f00 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 fd9d 	bl	800ba32 <SDMMC_GetResponse>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	2300      	movs	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 fd87 	bl	800ba32 <SDMMC_GetResponse>
 8009f24:	4603      	mov	r3, r0
 8009f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f2e:	d102      	bne.n	8009f36 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f34:	e02f      	b.n	8009f96 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f36:	f107 030c 	add.w	r3, r7, #12
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f879 	bl	800a034 <SD_FindSCR>
 8009f42:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	e023      	b.n	8009f96 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01c      	beq.n	8009f92 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f60:	041b      	lsls	r3, r3, #16
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f001 fef1 	bl	800bd4c <SDMMC_CmdAppCommand>
 8009f6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	e00f      	b.n	8009f96 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2102      	movs	r1, #2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f001 ff28 	bl	800bdd2 <SDMMC_CmdBusWidth>
 8009f82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	e003      	b.n	8009f96 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e001      	b.n	8009f96 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
 8009faa:	2300      	movs	r3, #0
 8009fac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 fd3c 	bl	800ba32 <SDMMC_GetResponse>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fc4:	d102      	bne.n	8009fcc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fca:	e02f      	b.n	800a02c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fcc:	f107 030c 	add.w	r3, r7, #12
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f82e 	bl	800a034 <SD_FindSCR>
 8009fd8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	e023      	b.n	800a02c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d01c      	beq.n	800a028 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ff6:	041b      	lsls	r3, r3, #16
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	f001 fea6 	bl	800bd4c <SDMMC_CmdAppCommand>
 800a000:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	e00f      	b.n	800a02c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2100      	movs	r1, #0
 800a012:	4618      	mov	r0, r3
 800a014:	f001 fedd 	bl	800bdd2 <SDMMC_CmdBusWidth>
 800a018:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	e003      	b.n	800a02c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a024:	2300      	movs	r3, #0
 800a026:	e001      	b.n	800a02c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a028:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08e      	sub	sp, #56	; 0x38
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a03e:	f7f7 fd09 	bl	8001a54 <HAL_GetTick>
 800a042:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a048:	2300      	movs	r3, #0
 800a04a:	60bb      	str	r3, [r7, #8]
 800a04c:	2300      	movs	r3, #0
 800a04e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2108      	movs	r1, #8
 800a05a:	4618      	mov	r0, r3
 800a05c:	f001 fd28 	bl	800bab0 <SDMMC_CmdBlockLength>
 800a060:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	e0ad      	b.n	800a1c8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a074:	041b      	lsls	r3, r3, #16
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f001 fe67 	bl	800bd4c <SDMMC_CmdAppCommand>
 800a07e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	e09e      	b.n	800a1c8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a08a:	f04f 33ff 	mov.w	r3, #4294967295
 800a08e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a090:	2308      	movs	r3, #8
 800a092:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a094:	2330      	movs	r3, #48	; 0x30
 800a096:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a098:	2302      	movs	r3, #2
 800a09a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f107 0210 	add.w	r2, r7, #16
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f001 fcd2 	bl	800ba58 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f001 fead 	bl	800be18 <SDMMC_CmdSendSCR>
 800a0be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d027      	beq.n	800a116 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	e07e      	b.n	800a1c8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d113      	bne.n	800a100 <SD_FindSCR+0xcc>
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d110      	bne.n	800a100 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 fc30 	bl	800b948 <SDMMC_ReadFIFO>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 fc29 	bl	800b948 <SDMMC_ReadFIFO>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	60fb      	str	r3, [r7, #12]
      index++;
 800a0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a100:	f7f7 fca8 	bl	8001a54 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10e:	d102      	bne.n	800a116 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a110:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a114:	e058      	b.n	800a1c8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a11c:	f240 532a 	movw	r3, #1322	; 0x52a
 800a120:	4013      	ands	r3, r2
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0d1      	beq.n	800a0ca <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12c:	f003 0308 	and.w	r3, r3, #8
 800a130:	2b00      	cmp	r3, #0
 800a132:	d005      	beq.n	800a140 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2208      	movs	r2, #8
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a13c:	2308      	movs	r3, #8
 800a13e:	e043      	b.n	800a1c8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a146:	f003 0302 	and.w	r3, r3, #2
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d005      	beq.n	800a15a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2202      	movs	r2, #2
 800a154:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a156:	2302      	movs	r3, #2
 800a158:	e036      	b.n	800a1c8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a160:	f003 0320 	and.w	r3, r3, #32
 800a164:	2b00      	cmp	r3, #0
 800a166:	d005      	beq.n	800a174 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2220      	movs	r2, #32
 800a16e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a170:	2320      	movs	r3, #32
 800a172:	e029      	b.n	800a1c8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <SD_FindSCR+0x19c>)
 800a17a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	061a      	lsls	r2, r3, #24
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a188:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	0a1b      	lsrs	r3, r3, #8
 800a18e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a192:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	0e1b      	lsrs	r3, r3, #24
 800a198:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	601a      	str	r2, [r3, #0]
    scr++;
 800a19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	061a      	lsls	r2, r3, #24
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	0a1b      	lsrs	r3, r3, #8
 800a1b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a1ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	0e1b      	lsrs	r3, r3, #24
 800a1c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3738      	adds	r7, #56	; 0x38
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	18000f3a 	.word	0x18000f3a

0800a1d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e0e2      	b.n	800a3b0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a70      	ldr	r2, [pc, #448]	; (800a3b8 <HAL_SPI_Init+0x1e4>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00f      	beq.n	800a21a <HAL_SPI_Init+0x46>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a6f      	ldr	r2, [pc, #444]	; (800a3bc <HAL_SPI_Init+0x1e8>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00a      	beq.n	800a21a <HAL_SPI_Init+0x46>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a6d      	ldr	r2, [pc, #436]	; (800a3c0 <HAL_SPI_Init+0x1ec>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d005      	beq.n	800a21a <HAL_SPI_Init+0x46>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	2b0f      	cmp	r3, #15
 800a214:	d901      	bls.n	800a21a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e0ca      	b.n	800a3b0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f8d2 	bl	800a3c4 <SPI_GetPacketSize>
 800a220:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a64      	ldr	r2, [pc, #400]	; (800a3b8 <HAL_SPI_Init+0x1e4>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00c      	beq.n	800a246 <HAL_SPI_Init+0x72>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a62      	ldr	r2, [pc, #392]	; (800a3bc <HAL_SPI_Init+0x1e8>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d007      	beq.n	800a246 <HAL_SPI_Init+0x72>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a61      	ldr	r2, [pc, #388]	; (800a3c0 <HAL_SPI_Init+0x1ec>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d002      	beq.n	800a246 <HAL_SPI_Init+0x72>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b08      	cmp	r3, #8
 800a244:	d811      	bhi.n	800a26a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a24a:	4a5b      	ldr	r2, [pc, #364]	; (800a3b8 <HAL_SPI_Init+0x1e4>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d009      	beq.n	800a264 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a59      	ldr	r2, [pc, #356]	; (800a3bc <HAL_SPI_Init+0x1e8>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d004      	beq.n	800a264 <HAL_SPI_Init+0x90>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a58      	ldr	r2, [pc, #352]	; (800a3c0 <HAL_SPI_Init+0x1ec>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d104      	bne.n	800a26e <HAL_SPI_Init+0x9a>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b10      	cmp	r3, #16
 800a268:	d901      	bls.n	800a26e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e0a0      	b.n	800a3b0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7f7 f8e6 	bl	8001454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0201 	bic.w	r2, r2, #1
 800a29e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2a8:	d110      	bne.n	800a2cc <HAL_SPI_Init+0xf8>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2b2:	d10b      	bne.n	800a2cc <HAL_SPI_Init+0xf8>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d107      	bne.n	800a2cc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a2ca:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	69da      	ldr	r2, [r3, #28]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d4:	431a      	orrs	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2de:	ea42 0103 	orr.w	r1, r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68da      	ldr	r2, [r3, #12]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fc:	431a      	orrs	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	431a      	orrs	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	431a      	orrs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a32c:	ea42 0103 	orr.w	r1, r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	430a      	orrs	r2, r1
 800a33a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d113      	bne.n	800a36c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a356:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a36a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 0201 	bic.w	r2, r2, #1
 800a37a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00a      	beq.n	800a39e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	40013000 	.word	0x40013000
 800a3bc:	40003800 	.word	0x40003800
 800a3c0:	40003c00 	.word	0x40003c00

0800a3c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d0:	095b      	lsrs	r3, r3, #5
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	3307      	adds	r3, #7
 800a3e2:	08db      	lsrs	r3, r3, #3
 800a3e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e042      	b.n	800a492 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7f7 f862 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2224      	movs	r2, #36	; 0x24
 800a428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 0201 	bic.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f95f 	bl	800a700 <UART_SetConfig>
 800a442:	4603      	mov	r3, r0
 800a444:	2b01      	cmp	r3, #1
 800a446:	d101      	bne.n	800a44c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e022      	b.n	800a492 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 ff03 	bl	800b260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a468:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a478:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f042 0201 	orr.w	r2, r2, #1
 800a488:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 ff8a 	bl	800b3a4 <UART_CheckIdleState>
 800a490:	4603      	mov	r3, r0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b08a      	sub	sp, #40	; 0x28
 800a49e:	af02      	add	r7, sp, #8
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4b0:	2b20      	cmp	r3, #32
 800a4b2:	f040 8083 	bne.w	800a5bc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <HAL_UART_Transmit+0x28>
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e07b      	b.n	800a5be <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_UART_Transmit+0x3a>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e074      	b.n	800a5be <HAL_UART_Transmit+0x124>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2221      	movs	r2, #33	; 0x21
 800a4e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a4ec:	f7f7 fab2 	bl	8001a54 <HAL_GetTick>
 800a4f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	88fa      	ldrh	r2, [r7, #6]
 800a4f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	88fa      	ldrh	r2, [r7, #6]
 800a4fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50a:	d108      	bne.n	800a51e <HAL_UART_Transmit+0x84>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d104      	bne.n	800a51e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a514:	2300      	movs	r3, #0
 800a516:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	61bb      	str	r3, [r7, #24]
 800a51c:	e003      	b.n	800a526 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800a52e:	e02c      	b.n	800a58a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2200      	movs	r2, #0
 800a538:	2180      	movs	r1, #128	; 0x80
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 ff7a 	bl	800b434 <UART_WaitOnFlagUntilTimeout>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a546:	2303      	movs	r3, #3
 800a548:	e039      	b.n	800a5be <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10b      	bne.n	800a568 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	461a      	mov	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a55e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	3302      	adds	r3, #2
 800a564:	61bb      	str	r3, [r7, #24]
 800a566:	e007      	b.n	800a578 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	781a      	ldrb	r2, [r3, #0]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	3301      	adds	r3, #1
 800a576:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a57e:	b29b      	uxth	r3, r3
 800a580:	3b01      	subs	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a590:	b29b      	uxth	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1cc      	bne.n	800a530 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2200      	movs	r2, #0
 800a59e:	2140      	movs	r1, #64	; 0x40
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 ff47 	bl	800b434 <UART_WaitOnFlagUntilTimeout>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e006      	b.n	800a5be <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	e000      	b.n	800a5be <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a5bc:	2302      	movs	r3, #2
  }
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5dc:	2b20      	cmp	r3, #32
 800a5de:	d170      	bne.n	800a6c2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <HAL_UART_Receive_DMA+0x24>
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e069      	b.n	800a6c4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d101      	bne.n	800a5fe <HAL_UART_Receive_DMA+0x36>
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e062      	b.n	800a6c4 <HAL_UART_Receive_DMA+0xfc>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	88fa      	ldrh	r2, [r7, #6]
 800a610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2222      	movs	r2, #34	; 0x22
 800a620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d02c      	beq.n	800a686 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a630:	4a26      	ldr	r2, [pc, #152]	; (800a6cc <HAL_UART_Receive_DMA+0x104>)
 800a632:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a638:	4a25      	ldr	r2, [pc, #148]	; (800a6d0 <HAL_UART_Receive_DMA+0x108>)
 800a63a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a640:	4a24      	ldr	r2, [pc, #144]	; (800a6d4 <HAL_UART_Receive_DMA+0x10c>)
 800a642:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a648:	2200      	movs	r2, #0
 800a64a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3324      	adds	r3, #36	; 0x24
 800a656:	4619      	mov	r1, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a65c:	461a      	mov	r2, r3
 800a65e:	88fb      	ldrh	r3, [r7, #6]
 800a660:	f7f7 fe9e 	bl	80023a0 <HAL_DMA_Start_IT>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00d      	beq.n	800a686 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2210      	movs	r2, #16
 800a66e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2220      	movs	r2, #32
 800a67e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e01e      	b.n	800a6c4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a69c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0201 	orr.w	r2, r2, #1
 800a6ac:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	689a      	ldr	r2, [r3, #8]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6bc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e000      	b.n	800a6c4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800a6c2:	2302      	movs	r3, #2
  }
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	0800b5b9 	.word	0x0800b5b9
 800a6d0:	0800b61f 	.word	0x0800b61f
 800a6d4:	0800b63b 	.word	0x0800b63b

0800a6d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a700:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a704:	b08e      	sub	sp, #56	; 0x38
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	431a      	orrs	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	431a      	orrs	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	69db      	ldr	r3, [r3, #28]
 800a724:	4313      	orrs	r3, r2
 800a726:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a72c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a72e:	4313      	orrs	r3, r2
 800a730:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	4bc1      	ldr	r3, [pc, #772]	; (800aa40 <UART_SetConfig+0x340>)
 800a73a:	4013      	ands	r3, r2
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	6812      	ldr	r2, [r2, #0]
 800a740:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a742:	430b      	orrs	r3, r1
 800a744:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68da      	ldr	r2, [r3, #12]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	430a      	orrs	r2, r1
 800a75a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4ab7      	ldr	r2, [pc, #732]	; (800aa44 <UART_SetConfig+0x344>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d004      	beq.n	800a776 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a772:	4313      	orrs	r3, r2
 800a774:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	4bb2      	ldr	r3, [pc, #712]	; (800aa48 <UART_SetConfig+0x348>)
 800a77e:	4013      	ands	r3, r2
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	6812      	ldr	r2, [r2, #0]
 800a784:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a786:	430b      	orrs	r3, r1
 800a788:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	f023 010f 	bic.w	r1, r3, #15
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	430a      	orrs	r2, r1
 800a79e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4aa9      	ldr	r2, [pc, #676]	; (800aa4c <UART_SetConfig+0x34c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d177      	bne.n	800a89a <UART_SetConfig+0x19a>
 800a7aa:	4ba9      	ldr	r3, [pc, #676]	; (800aa50 <UART_SetConfig+0x350>)
 800a7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7b2:	2b28      	cmp	r3, #40	; 0x28
 800a7b4:	d86c      	bhi.n	800a890 <UART_SetConfig+0x190>
 800a7b6:	a201      	add	r2, pc, #4	; (adr r2, 800a7bc <UART_SetConfig+0xbc>)
 800a7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7bc:	0800a861 	.word	0x0800a861
 800a7c0:	0800a891 	.word	0x0800a891
 800a7c4:	0800a891 	.word	0x0800a891
 800a7c8:	0800a891 	.word	0x0800a891
 800a7cc:	0800a891 	.word	0x0800a891
 800a7d0:	0800a891 	.word	0x0800a891
 800a7d4:	0800a891 	.word	0x0800a891
 800a7d8:	0800a891 	.word	0x0800a891
 800a7dc:	0800a869 	.word	0x0800a869
 800a7e0:	0800a891 	.word	0x0800a891
 800a7e4:	0800a891 	.word	0x0800a891
 800a7e8:	0800a891 	.word	0x0800a891
 800a7ec:	0800a891 	.word	0x0800a891
 800a7f0:	0800a891 	.word	0x0800a891
 800a7f4:	0800a891 	.word	0x0800a891
 800a7f8:	0800a891 	.word	0x0800a891
 800a7fc:	0800a871 	.word	0x0800a871
 800a800:	0800a891 	.word	0x0800a891
 800a804:	0800a891 	.word	0x0800a891
 800a808:	0800a891 	.word	0x0800a891
 800a80c:	0800a891 	.word	0x0800a891
 800a810:	0800a891 	.word	0x0800a891
 800a814:	0800a891 	.word	0x0800a891
 800a818:	0800a891 	.word	0x0800a891
 800a81c:	0800a879 	.word	0x0800a879
 800a820:	0800a891 	.word	0x0800a891
 800a824:	0800a891 	.word	0x0800a891
 800a828:	0800a891 	.word	0x0800a891
 800a82c:	0800a891 	.word	0x0800a891
 800a830:	0800a891 	.word	0x0800a891
 800a834:	0800a891 	.word	0x0800a891
 800a838:	0800a891 	.word	0x0800a891
 800a83c:	0800a881 	.word	0x0800a881
 800a840:	0800a891 	.word	0x0800a891
 800a844:	0800a891 	.word	0x0800a891
 800a848:	0800a891 	.word	0x0800a891
 800a84c:	0800a891 	.word	0x0800a891
 800a850:	0800a891 	.word	0x0800a891
 800a854:	0800a891 	.word	0x0800a891
 800a858:	0800a891 	.word	0x0800a891
 800a85c:	0800a889 	.word	0x0800a889
 800a860:	2301      	movs	r3, #1
 800a862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a866:	e233      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a868:	2304      	movs	r3, #4
 800a86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a86e:	e22f      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a870:	2308      	movs	r3, #8
 800a872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a876:	e22b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a878:	2310      	movs	r3, #16
 800a87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87e:	e227      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a880:	2320      	movs	r3, #32
 800a882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a886:	e223      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a888:	2340      	movs	r3, #64	; 0x40
 800a88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88e:	e21f      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a890:	2380      	movs	r3, #128	; 0x80
 800a892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a896:	bf00      	nop
 800a898:	e21a      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a6d      	ldr	r2, [pc, #436]	; (800aa54 <UART_SetConfig+0x354>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d132      	bne.n	800a90a <UART_SetConfig+0x20a>
 800a8a4:	4b6a      	ldr	r3, [pc, #424]	; (800aa50 <UART_SetConfig+0x350>)
 800a8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a8:	f003 0307 	and.w	r3, r3, #7
 800a8ac:	2b05      	cmp	r3, #5
 800a8ae:	d827      	bhi.n	800a900 <UART_SetConfig+0x200>
 800a8b0:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <UART_SetConfig+0x1b8>)
 800a8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b6:	bf00      	nop
 800a8b8:	0800a8d1 	.word	0x0800a8d1
 800a8bc:	0800a8d9 	.word	0x0800a8d9
 800a8c0:	0800a8e1 	.word	0x0800a8e1
 800a8c4:	0800a8e9 	.word	0x0800a8e9
 800a8c8:	0800a8f1 	.word	0x0800a8f1
 800a8cc:	0800a8f9 	.word	0x0800a8f9
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8d6:	e1fb      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a8d8:	2304      	movs	r3, #4
 800a8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8de:	e1f7      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a8e0:	2308      	movs	r3, #8
 800a8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8e6:	e1f3      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ee:	e1ef      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8f6:	e1eb      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a8f8:	2340      	movs	r3, #64	; 0x40
 800a8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8fe:	e1e7      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a906:	bf00      	nop
 800a908:	e1e2      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a52      	ldr	r2, [pc, #328]	; (800aa58 <UART_SetConfig+0x358>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d132      	bne.n	800a97a <UART_SetConfig+0x27a>
 800a914:	4b4e      	ldr	r3, [pc, #312]	; (800aa50 <UART_SetConfig+0x350>)
 800a916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a918:	f003 0307 	and.w	r3, r3, #7
 800a91c:	2b05      	cmp	r3, #5
 800a91e:	d827      	bhi.n	800a970 <UART_SetConfig+0x270>
 800a920:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <UART_SetConfig+0x228>)
 800a922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a926:	bf00      	nop
 800a928:	0800a941 	.word	0x0800a941
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a951 	.word	0x0800a951
 800a934:	0800a959 	.word	0x0800a959
 800a938:	0800a961 	.word	0x0800a961
 800a93c:	0800a969 	.word	0x0800a969
 800a940:	2300      	movs	r3, #0
 800a942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a946:	e1c3      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a948:	2304      	movs	r3, #4
 800a94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94e:	e1bf      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a950:	2308      	movs	r3, #8
 800a952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a956:	e1bb      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a958:	2310      	movs	r3, #16
 800a95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95e:	e1b7      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a960:	2320      	movs	r3, #32
 800a962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a966:	e1b3      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a968:	2340      	movs	r3, #64	; 0x40
 800a96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a96e:	e1af      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a970:	2380      	movs	r3, #128	; 0x80
 800a972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a976:	bf00      	nop
 800a978:	e1aa      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a37      	ldr	r2, [pc, #220]	; (800aa5c <UART_SetConfig+0x35c>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d132      	bne.n	800a9ea <UART_SetConfig+0x2ea>
 800a984:	4b32      	ldr	r3, [pc, #200]	; (800aa50 <UART_SetConfig+0x350>)
 800a986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	2b05      	cmp	r3, #5
 800a98e:	d827      	bhi.n	800a9e0 <UART_SetConfig+0x2e0>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <UART_SetConfig+0x298>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9b1 	.word	0x0800a9b1
 800a99c:	0800a9b9 	.word	0x0800a9b9
 800a9a0:	0800a9c1 	.word	0x0800a9c1
 800a9a4:	0800a9c9 	.word	0x0800a9c9
 800a9a8:	0800a9d1 	.word	0x0800a9d1
 800a9ac:	0800a9d9 	.word	0x0800a9d9
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b6:	e18b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a9b8:	2304      	movs	r3, #4
 800a9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9be:	e187      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a9c0:	2308      	movs	r3, #8
 800a9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c6:	e183      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a9c8:	2310      	movs	r3, #16
 800a9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ce:	e17f      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9d6:	e17b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a9d8:	2340      	movs	r3, #64	; 0x40
 800a9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9de:	e177      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a9e0:	2380      	movs	r3, #128	; 0x80
 800a9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9e6:	bf00      	nop
 800a9e8:	e172      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a1c      	ldr	r2, [pc, #112]	; (800aa60 <UART_SetConfig+0x360>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d144      	bne.n	800aa7e <UART_SetConfig+0x37e>
 800a9f4:	4b16      	ldr	r3, [pc, #88]	; (800aa50 <UART_SetConfig+0x350>)
 800a9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f8:	f003 0307 	and.w	r3, r3, #7
 800a9fc:	2b05      	cmp	r3, #5
 800a9fe:	d839      	bhi.n	800aa74 <UART_SetConfig+0x374>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <UART_SetConfig+0x308>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa21 	.word	0x0800aa21
 800aa0c:	0800aa29 	.word	0x0800aa29
 800aa10:	0800aa31 	.word	0x0800aa31
 800aa14:	0800aa39 	.word	0x0800aa39
 800aa18:	0800aa65 	.word	0x0800aa65
 800aa1c:	0800aa6d 	.word	0x0800aa6d
 800aa20:	2300      	movs	r3, #0
 800aa22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa26:	e153      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aa28:	2304      	movs	r3, #4
 800aa2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2e:	e14f      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aa30:	2308      	movs	r3, #8
 800aa32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa36:	e14b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aa38:	2310      	movs	r3, #16
 800aa3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa3e:	e147      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aa40:	cfff69f3 	.word	0xcfff69f3
 800aa44:	58000c00 	.word	0x58000c00
 800aa48:	11fff4ff 	.word	0x11fff4ff
 800aa4c:	40011000 	.word	0x40011000
 800aa50:	58024400 	.word	0x58024400
 800aa54:	40004400 	.word	0x40004400
 800aa58:	40004800 	.word	0x40004800
 800aa5c:	40004c00 	.word	0x40004c00
 800aa60:	40005000 	.word	0x40005000
 800aa64:	2320      	movs	r3, #32
 800aa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6a:	e131      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aa6c:	2340      	movs	r3, #64	; 0x40
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e12d      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aa74:	2380      	movs	r3, #128	; 0x80
 800aa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa7a:	bf00      	nop
 800aa7c:	e128      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4ab6      	ldr	r2, [pc, #728]	; (800ad5c <UART_SetConfig+0x65c>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d178      	bne.n	800ab7a <UART_SetConfig+0x47a>
 800aa88:	4bb5      	ldr	r3, [pc, #724]	; (800ad60 <UART_SetConfig+0x660>)
 800aa8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa90:	2b28      	cmp	r3, #40	; 0x28
 800aa92:	d86d      	bhi.n	800ab70 <UART_SetConfig+0x470>
 800aa94:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <UART_SetConfig+0x39c>)
 800aa96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9a:	bf00      	nop
 800aa9c:	0800ab41 	.word	0x0800ab41
 800aaa0:	0800ab71 	.word	0x0800ab71
 800aaa4:	0800ab71 	.word	0x0800ab71
 800aaa8:	0800ab71 	.word	0x0800ab71
 800aaac:	0800ab71 	.word	0x0800ab71
 800aab0:	0800ab71 	.word	0x0800ab71
 800aab4:	0800ab71 	.word	0x0800ab71
 800aab8:	0800ab71 	.word	0x0800ab71
 800aabc:	0800ab49 	.word	0x0800ab49
 800aac0:	0800ab71 	.word	0x0800ab71
 800aac4:	0800ab71 	.word	0x0800ab71
 800aac8:	0800ab71 	.word	0x0800ab71
 800aacc:	0800ab71 	.word	0x0800ab71
 800aad0:	0800ab71 	.word	0x0800ab71
 800aad4:	0800ab71 	.word	0x0800ab71
 800aad8:	0800ab71 	.word	0x0800ab71
 800aadc:	0800ab51 	.word	0x0800ab51
 800aae0:	0800ab71 	.word	0x0800ab71
 800aae4:	0800ab71 	.word	0x0800ab71
 800aae8:	0800ab71 	.word	0x0800ab71
 800aaec:	0800ab71 	.word	0x0800ab71
 800aaf0:	0800ab71 	.word	0x0800ab71
 800aaf4:	0800ab71 	.word	0x0800ab71
 800aaf8:	0800ab71 	.word	0x0800ab71
 800aafc:	0800ab59 	.word	0x0800ab59
 800ab00:	0800ab71 	.word	0x0800ab71
 800ab04:	0800ab71 	.word	0x0800ab71
 800ab08:	0800ab71 	.word	0x0800ab71
 800ab0c:	0800ab71 	.word	0x0800ab71
 800ab10:	0800ab71 	.word	0x0800ab71
 800ab14:	0800ab71 	.word	0x0800ab71
 800ab18:	0800ab71 	.word	0x0800ab71
 800ab1c:	0800ab61 	.word	0x0800ab61
 800ab20:	0800ab71 	.word	0x0800ab71
 800ab24:	0800ab71 	.word	0x0800ab71
 800ab28:	0800ab71 	.word	0x0800ab71
 800ab2c:	0800ab71 	.word	0x0800ab71
 800ab30:	0800ab71 	.word	0x0800ab71
 800ab34:	0800ab71 	.word	0x0800ab71
 800ab38:	0800ab71 	.word	0x0800ab71
 800ab3c:	0800ab69 	.word	0x0800ab69
 800ab40:	2301      	movs	r3, #1
 800ab42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab46:	e0c3      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ab48:	2304      	movs	r3, #4
 800ab4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4e:	e0bf      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ab50:	2308      	movs	r3, #8
 800ab52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab56:	e0bb      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ab58:	2310      	movs	r3, #16
 800ab5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab5e:	e0b7      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ab60:	2320      	movs	r3, #32
 800ab62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab66:	e0b3      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ab68:	2340      	movs	r3, #64	; 0x40
 800ab6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab6e:	e0af      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ab70:	2380      	movs	r3, #128	; 0x80
 800ab72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab76:	bf00      	nop
 800ab78:	e0aa      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a79      	ldr	r2, [pc, #484]	; (800ad64 <UART_SetConfig+0x664>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d132      	bne.n	800abea <UART_SetConfig+0x4ea>
 800ab84:	4b76      	ldr	r3, [pc, #472]	; (800ad60 <UART_SetConfig+0x660>)
 800ab86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab88:	f003 0307 	and.w	r3, r3, #7
 800ab8c:	2b05      	cmp	r3, #5
 800ab8e:	d827      	bhi.n	800abe0 <UART_SetConfig+0x4e0>
 800ab90:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <UART_SetConfig+0x498>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800abb1 	.word	0x0800abb1
 800ab9c:	0800abb9 	.word	0x0800abb9
 800aba0:	0800abc1 	.word	0x0800abc1
 800aba4:	0800abc9 	.word	0x0800abc9
 800aba8:	0800abd1 	.word	0x0800abd1
 800abac:	0800abd9 	.word	0x0800abd9
 800abb0:	2300      	movs	r3, #0
 800abb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb6:	e08b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800abb8:	2304      	movs	r3, #4
 800abba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abbe:	e087      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800abc0:	2308      	movs	r3, #8
 800abc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abc6:	e083      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800abc8:	2310      	movs	r3, #16
 800abca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abce:	e07f      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800abd0:	2320      	movs	r3, #32
 800abd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abd6:	e07b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abde:	e077      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800abe0:	2380      	movs	r3, #128	; 0x80
 800abe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abe6:	bf00      	nop
 800abe8:	e072      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a5e      	ldr	r2, [pc, #376]	; (800ad68 <UART_SetConfig+0x668>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d132      	bne.n	800ac5a <UART_SetConfig+0x55a>
 800abf4:	4b5a      	ldr	r3, [pc, #360]	; (800ad60 <UART_SetConfig+0x660>)
 800abf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	2b05      	cmp	r3, #5
 800abfe:	d827      	bhi.n	800ac50 <UART_SetConfig+0x550>
 800ac00:	a201      	add	r2, pc, #4	; (adr r2, 800ac08 <UART_SetConfig+0x508>)
 800ac02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac06:	bf00      	nop
 800ac08:	0800ac21 	.word	0x0800ac21
 800ac0c:	0800ac29 	.word	0x0800ac29
 800ac10:	0800ac31 	.word	0x0800ac31
 800ac14:	0800ac39 	.word	0x0800ac39
 800ac18:	0800ac41 	.word	0x0800ac41
 800ac1c:	0800ac49 	.word	0x0800ac49
 800ac20:	2300      	movs	r3, #0
 800ac22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac26:	e053      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ac28:	2304      	movs	r3, #4
 800ac2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2e:	e04f      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ac30:	2308      	movs	r3, #8
 800ac32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac36:	e04b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ac38:	2310      	movs	r3, #16
 800ac3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac3e:	e047      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ac40:	2320      	movs	r3, #32
 800ac42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac46:	e043      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ac48:	2340      	movs	r3, #64	; 0x40
 800ac4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac4e:	e03f      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ac50:	2380      	movs	r3, #128	; 0x80
 800ac52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac56:	bf00      	nop
 800ac58:	e03a      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a43      	ldr	r2, [pc, #268]	; (800ad6c <UART_SetConfig+0x66c>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d132      	bne.n	800acca <UART_SetConfig+0x5ca>
 800ac64:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <UART_SetConfig+0x660>)
 800ac66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac68:	f003 0307 	and.w	r3, r3, #7
 800ac6c:	2b05      	cmp	r3, #5
 800ac6e:	d827      	bhi.n	800acc0 <UART_SetConfig+0x5c0>
 800ac70:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <UART_SetConfig+0x578>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800ac91 	.word	0x0800ac91
 800ac7c:	0800ac99 	.word	0x0800ac99
 800ac80:	0800aca1 	.word	0x0800aca1
 800ac84:	0800aca9 	.word	0x0800aca9
 800ac88:	0800acb1 	.word	0x0800acb1
 800ac8c:	0800acb9 	.word	0x0800acb9
 800ac90:	2302      	movs	r3, #2
 800ac92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac96:	e01b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800ac98:	2304      	movs	r3, #4
 800ac9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac9e:	e017      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aca0:	2308      	movs	r3, #8
 800aca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aca6:	e013      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800aca8:	2310      	movs	r3, #16
 800acaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acae:	e00f      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800acb0:	2320      	movs	r3, #32
 800acb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acb6:	e00b      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800acb8:	2340      	movs	r3, #64	; 0x40
 800acba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acbe:	e007      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800acc0:	2380      	movs	r3, #128	; 0x80
 800acc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acc6:	bf00      	nop
 800acc8:	e002      	b.n	800acd0 <UART_SetConfig+0x5d0>
 800acca:	2380      	movs	r3, #128	; 0x80
 800accc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a25      	ldr	r2, [pc, #148]	; (800ad6c <UART_SetConfig+0x66c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	f040 80b8 	bne.w	800ae4c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d019      	beq.n	800ad18 <UART_SetConfig+0x618>
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	dc04      	bgt.n	800acf2 <UART_SetConfig+0x5f2>
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d009      	beq.n	800ad00 <UART_SetConfig+0x600>
 800acec:	2b04      	cmp	r3, #4
 800acee:	d00b      	beq.n	800ad08 <UART_SetConfig+0x608>
 800acf0:	e042      	b.n	800ad78 <UART_SetConfig+0x678>
 800acf2:	2b20      	cmp	r3, #32
 800acf4:	d02b      	beq.n	800ad4e <UART_SetConfig+0x64e>
 800acf6:	2b40      	cmp	r3, #64	; 0x40
 800acf8:	d02c      	beq.n	800ad54 <UART_SetConfig+0x654>
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d014      	beq.n	800ad28 <UART_SetConfig+0x628>
 800acfe:	e03b      	b.n	800ad78 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ad00:	f7fd f94e 	bl	8007fa0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad04:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad06:	e03d      	b.n	800ad84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad08:	f107 0314 	add.w	r3, r7, #20
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fd f95d 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad16:	e035      	b.n	800ad84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad18:	f107 0308 	add.w	r3, r7, #8
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fd faa1 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad26:	e02d      	b.n	800ad84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad28:	4b0d      	ldr	r3, [pc, #52]	; (800ad60 <UART_SetConfig+0x660>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0320 	and.w	r3, r3, #32
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d009      	beq.n	800ad48 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad34:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <UART_SetConfig+0x660>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	08db      	lsrs	r3, r3, #3
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	4a0c      	ldr	r2, [pc, #48]	; (800ad70 <UART_SetConfig+0x670>)
 800ad40:	fa22 f303 	lsr.w	r3, r2, r3
 800ad44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad46:	e01d      	b.n	800ad84 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800ad48:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <UART_SetConfig+0x670>)
 800ad4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad4c:	e01a      	b.n	800ad84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <UART_SetConfig+0x674>)
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad52:	e017      	b.n	800ad84 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad5a:	e013      	b.n	800ad84 <UART_SetConfig+0x684>
 800ad5c:	40011400 	.word	0x40011400
 800ad60:	58024400 	.word	0x58024400
 800ad64:	40007800 	.word	0x40007800
 800ad68:	40007c00 	.word	0x40007c00
 800ad6c:	58000c00 	.word	0x58000c00
 800ad70:	03d09000 	.word	0x03d09000
 800ad74:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 824d 	beq.w	800b226 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	4aad      	ldr	r2, [pc, #692]	; (800b048 <UART_SetConfig+0x948>)
 800ad92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad96:	461a      	mov	r2, r3
 800ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad9e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	4613      	mov	r3, r2
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	4413      	add	r3, r2
 800adaa:	6a3a      	ldr	r2, [r7, #32]
 800adac:	429a      	cmp	r2, r3
 800adae:	d305      	bcc.n	800adbc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adb6:	6a3a      	ldr	r2, [r7, #32]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d903      	bls.n	800adc4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800adc2:	e230      	b.n	800b226 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	4618      	mov	r0, r3
 800adc8:	f04f 0100 	mov.w	r1, #0
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	4a9d      	ldr	r2, [pc, #628]	; (800b048 <UART_SetConfig+0x948>)
 800add2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f04f 0400 	mov.w	r4, #0
 800addc:	461a      	mov	r2, r3
 800adde:	4623      	mov	r3, r4
 800ade0:	f7f5 fad6 	bl	8000390 <__aeabi_uldivmod>
 800ade4:	4603      	mov	r3, r0
 800ade6:	460c      	mov	r4, r1
 800ade8:	4619      	mov	r1, r3
 800adea:	4622      	mov	r2, r4
 800adec:	f04f 0300 	mov.w	r3, #0
 800adf0:	f04f 0400 	mov.w	r4, #0
 800adf4:	0214      	lsls	r4, r2, #8
 800adf6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800adfa:	020b      	lsls	r3, r1, #8
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6852      	ldr	r2, [r2, #4]
 800ae00:	0852      	lsrs	r2, r2, #1
 800ae02:	4611      	mov	r1, r2
 800ae04:	f04f 0200 	mov.w	r2, #0
 800ae08:	eb13 0b01 	adds.w	fp, r3, r1
 800ae0c:	eb44 0c02 	adc.w	ip, r4, r2
 800ae10:	4658      	mov	r0, fp
 800ae12:	4661      	mov	r1, ip
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	f04f 0400 	mov.w	r4, #0
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4623      	mov	r3, r4
 800ae20:	f7f5 fab6 	bl	8000390 <__aeabi_uldivmod>
 800ae24:	4603      	mov	r3, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae30:	d308      	bcc.n	800ae44 <UART_SetConfig+0x744>
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae38:	d204      	bcs.n	800ae44 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae40:	60da      	str	r2, [r3, #12]
 800ae42:	e1f0      	b.n	800b226 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae4a:	e1ec      	b.n	800b226 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae54:	f040 8100 	bne.w	800b058 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800ae58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae5c:	2b40      	cmp	r3, #64	; 0x40
 800ae5e:	f200 80b7 	bhi.w	800afd0 <UART_SetConfig+0x8d0>
 800ae62:	a201      	add	r2, pc, #4	; (adr r2, 800ae68 <UART_SetConfig+0x768>)
 800ae64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae68:	0800af6d 	.word	0x0800af6d
 800ae6c:	0800af75 	.word	0x0800af75
 800ae70:	0800afd1 	.word	0x0800afd1
 800ae74:	0800afd1 	.word	0x0800afd1
 800ae78:	0800af7d 	.word	0x0800af7d
 800ae7c:	0800afd1 	.word	0x0800afd1
 800ae80:	0800afd1 	.word	0x0800afd1
 800ae84:	0800afd1 	.word	0x0800afd1
 800ae88:	0800af8d 	.word	0x0800af8d
 800ae8c:	0800afd1 	.word	0x0800afd1
 800ae90:	0800afd1 	.word	0x0800afd1
 800ae94:	0800afd1 	.word	0x0800afd1
 800ae98:	0800afd1 	.word	0x0800afd1
 800ae9c:	0800afd1 	.word	0x0800afd1
 800aea0:	0800afd1 	.word	0x0800afd1
 800aea4:	0800afd1 	.word	0x0800afd1
 800aea8:	0800af9d 	.word	0x0800af9d
 800aeac:	0800afd1 	.word	0x0800afd1
 800aeb0:	0800afd1 	.word	0x0800afd1
 800aeb4:	0800afd1 	.word	0x0800afd1
 800aeb8:	0800afd1 	.word	0x0800afd1
 800aebc:	0800afd1 	.word	0x0800afd1
 800aec0:	0800afd1 	.word	0x0800afd1
 800aec4:	0800afd1 	.word	0x0800afd1
 800aec8:	0800afd1 	.word	0x0800afd1
 800aecc:	0800afd1 	.word	0x0800afd1
 800aed0:	0800afd1 	.word	0x0800afd1
 800aed4:	0800afd1 	.word	0x0800afd1
 800aed8:	0800afd1 	.word	0x0800afd1
 800aedc:	0800afd1 	.word	0x0800afd1
 800aee0:	0800afd1 	.word	0x0800afd1
 800aee4:	0800afd1 	.word	0x0800afd1
 800aee8:	0800afc3 	.word	0x0800afc3
 800aeec:	0800afd1 	.word	0x0800afd1
 800aef0:	0800afd1 	.word	0x0800afd1
 800aef4:	0800afd1 	.word	0x0800afd1
 800aef8:	0800afd1 	.word	0x0800afd1
 800aefc:	0800afd1 	.word	0x0800afd1
 800af00:	0800afd1 	.word	0x0800afd1
 800af04:	0800afd1 	.word	0x0800afd1
 800af08:	0800afd1 	.word	0x0800afd1
 800af0c:	0800afd1 	.word	0x0800afd1
 800af10:	0800afd1 	.word	0x0800afd1
 800af14:	0800afd1 	.word	0x0800afd1
 800af18:	0800afd1 	.word	0x0800afd1
 800af1c:	0800afd1 	.word	0x0800afd1
 800af20:	0800afd1 	.word	0x0800afd1
 800af24:	0800afd1 	.word	0x0800afd1
 800af28:	0800afd1 	.word	0x0800afd1
 800af2c:	0800afd1 	.word	0x0800afd1
 800af30:	0800afd1 	.word	0x0800afd1
 800af34:	0800afd1 	.word	0x0800afd1
 800af38:	0800afd1 	.word	0x0800afd1
 800af3c:	0800afd1 	.word	0x0800afd1
 800af40:	0800afd1 	.word	0x0800afd1
 800af44:	0800afd1 	.word	0x0800afd1
 800af48:	0800afd1 	.word	0x0800afd1
 800af4c:	0800afd1 	.word	0x0800afd1
 800af50:	0800afd1 	.word	0x0800afd1
 800af54:	0800afd1 	.word	0x0800afd1
 800af58:	0800afd1 	.word	0x0800afd1
 800af5c:	0800afd1 	.word	0x0800afd1
 800af60:	0800afd1 	.word	0x0800afd1
 800af64:	0800afd1 	.word	0x0800afd1
 800af68:	0800afc9 	.word	0x0800afc9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af6c:	f7fb fe86 	bl	8006c7c <HAL_RCC_GetPCLK1Freq>
 800af70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af72:	e033      	b.n	800afdc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af74:	f7fb fe98 	bl	8006ca8 <HAL_RCC_GetPCLK2Freq>
 800af78:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af7a:	e02f      	b.n	800afdc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af7c:	f107 0314 	add.w	r3, r7, #20
 800af80:	4618      	mov	r0, r3
 800af82:	f7fd f823 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af8a:	e027      	b.n	800afdc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af8c:	f107 0308 	add.w	r3, r7, #8
 800af90:	4618      	mov	r0, r3
 800af92:	f7fd f967 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af9a:	e01f      	b.n	800afdc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af9c:	4b2b      	ldr	r3, [pc, #172]	; (800b04c <UART_SetConfig+0x94c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0320 	and.w	r3, r3, #32
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afa8:	4b28      	ldr	r3, [pc, #160]	; (800b04c <UART_SetConfig+0x94c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	08db      	lsrs	r3, r3, #3
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	4a27      	ldr	r2, [pc, #156]	; (800b050 <UART_SetConfig+0x950>)
 800afb4:	fa22 f303 	lsr.w	r3, r2, r3
 800afb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afba:	e00f      	b.n	800afdc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800afbc:	4b24      	ldr	r3, [pc, #144]	; (800b050 <UART_SetConfig+0x950>)
 800afbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afc0:	e00c      	b.n	800afdc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afc2:	4b24      	ldr	r3, [pc, #144]	; (800b054 <UART_SetConfig+0x954>)
 800afc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afc6:	e009      	b.n	800afdc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afce:	e005      	b.n	800afdc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800afda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 8121 	beq.w	800b226 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	4a17      	ldr	r2, [pc, #92]	; (800b048 <UART_SetConfig+0x948>)
 800afea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afee:	461a      	mov	r2, r3
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aff6:	005a      	lsls	r2, r3, #1
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	085b      	lsrs	r3, r3, #1
 800affe:	441a      	add	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	fbb2 f3f3 	udiv	r3, r2, r3
 800b008:	b29b      	uxth	r3, r3
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	2b0f      	cmp	r3, #15
 800b010:	d916      	bls.n	800b040 <UART_SetConfig+0x940>
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b018:	d212      	bcs.n	800b040 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f023 030f 	bic.w	r3, r3, #15
 800b022:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	085b      	lsrs	r3, r3, #1
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f003 0307 	and.w	r3, r3, #7
 800b02e:	b29a      	uxth	r2, r3
 800b030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b032:	4313      	orrs	r3, r2
 800b034:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b03c:	60da      	str	r2, [r3, #12]
 800b03e:	e0f2      	b.n	800b226 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b046:	e0ee      	b.n	800b226 <UART_SetConfig+0xb26>
 800b048:	08011464 	.word	0x08011464
 800b04c:	58024400 	.word	0x58024400
 800b050:	03d09000 	.word	0x03d09000
 800b054:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b058:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b05c:	2b40      	cmp	r3, #64	; 0x40
 800b05e:	f200 80b7 	bhi.w	800b1d0 <UART_SetConfig+0xad0>
 800b062:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <UART_SetConfig+0x968>)
 800b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b068:	0800b16d 	.word	0x0800b16d
 800b06c:	0800b175 	.word	0x0800b175
 800b070:	0800b1d1 	.word	0x0800b1d1
 800b074:	0800b1d1 	.word	0x0800b1d1
 800b078:	0800b17d 	.word	0x0800b17d
 800b07c:	0800b1d1 	.word	0x0800b1d1
 800b080:	0800b1d1 	.word	0x0800b1d1
 800b084:	0800b1d1 	.word	0x0800b1d1
 800b088:	0800b18d 	.word	0x0800b18d
 800b08c:	0800b1d1 	.word	0x0800b1d1
 800b090:	0800b1d1 	.word	0x0800b1d1
 800b094:	0800b1d1 	.word	0x0800b1d1
 800b098:	0800b1d1 	.word	0x0800b1d1
 800b09c:	0800b1d1 	.word	0x0800b1d1
 800b0a0:	0800b1d1 	.word	0x0800b1d1
 800b0a4:	0800b1d1 	.word	0x0800b1d1
 800b0a8:	0800b19d 	.word	0x0800b19d
 800b0ac:	0800b1d1 	.word	0x0800b1d1
 800b0b0:	0800b1d1 	.word	0x0800b1d1
 800b0b4:	0800b1d1 	.word	0x0800b1d1
 800b0b8:	0800b1d1 	.word	0x0800b1d1
 800b0bc:	0800b1d1 	.word	0x0800b1d1
 800b0c0:	0800b1d1 	.word	0x0800b1d1
 800b0c4:	0800b1d1 	.word	0x0800b1d1
 800b0c8:	0800b1d1 	.word	0x0800b1d1
 800b0cc:	0800b1d1 	.word	0x0800b1d1
 800b0d0:	0800b1d1 	.word	0x0800b1d1
 800b0d4:	0800b1d1 	.word	0x0800b1d1
 800b0d8:	0800b1d1 	.word	0x0800b1d1
 800b0dc:	0800b1d1 	.word	0x0800b1d1
 800b0e0:	0800b1d1 	.word	0x0800b1d1
 800b0e4:	0800b1d1 	.word	0x0800b1d1
 800b0e8:	0800b1c3 	.word	0x0800b1c3
 800b0ec:	0800b1d1 	.word	0x0800b1d1
 800b0f0:	0800b1d1 	.word	0x0800b1d1
 800b0f4:	0800b1d1 	.word	0x0800b1d1
 800b0f8:	0800b1d1 	.word	0x0800b1d1
 800b0fc:	0800b1d1 	.word	0x0800b1d1
 800b100:	0800b1d1 	.word	0x0800b1d1
 800b104:	0800b1d1 	.word	0x0800b1d1
 800b108:	0800b1d1 	.word	0x0800b1d1
 800b10c:	0800b1d1 	.word	0x0800b1d1
 800b110:	0800b1d1 	.word	0x0800b1d1
 800b114:	0800b1d1 	.word	0x0800b1d1
 800b118:	0800b1d1 	.word	0x0800b1d1
 800b11c:	0800b1d1 	.word	0x0800b1d1
 800b120:	0800b1d1 	.word	0x0800b1d1
 800b124:	0800b1d1 	.word	0x0800b1d1
 800b128:	0800b1d1 	.word	0x0800b1d1
 800b12c:	0800b1d1 	.word	0x0800b1d1
 800b130:	0800b1d1 	.word	0x0800b1d1
 800b134:	0800b1d1 	.word	0x0800b1d1
 800b138:	0800b1d1 	.word	0x0800b1d1
 800b13c:	0800b1d1 	.word	0x0800b1d1
 800b140:	0800b1d1 	.word	0x0800b1d1
 800b144:	0800b1d1 	.word	0x0800b1d1
 800b148:	0800b1d1 	.word	0x0800b1d1
 800b14c:	0800b1d1 	.word	0x0800b1d1
 800b150:	0800b1d1 	.word	0x0800b1d1
 800b154:	0800b1d1 	.word	0x0800b1d1
 800b158:	0800b1d1 	.word	0x0800b1d1
 800b15c:	0800b1d1 	.word	0x0800b1d1
 800b160:	0800b1d1 	.word	0x0800b1d1
 800b164:	0800b1d1 	.word	0x0800b1d1
 800b168:	0800b1c9 	.word	0x0800b1c9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b16c:	f7fb fd86 	bl	8006c7c <HAL_RCC_GetPCLK1Freq>
 800b170:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b172:	e033      	b.n	800b1dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b174:	f7fb fd98 	bl	8006ca8 <HAL_RCC_GetPCLK2Freq>
 800b178:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b17a:	e02f      	b.n	800b1dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b17c:	f107 0314 	add.w	r3, r7, #20
 800b180:	4618      	mov	r0, r3
 800b182:	f7fc ff23 	bl	8007fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b18a:	e027      	b.n	800b1dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b18c:	f107 0308 	add.w	r3, r7, #8
 800b190:	4618      	mov	r0, r3
 800b192:	f7fd f867 	bl	8008264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b19a:	e01f      	b.n	800b1dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b19c:	4b2c      	ldr	r3, [pc, #176]	; (800b250 <UART_SetConfig+0xb50>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0320 	and.w	r3, r3, #32
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d009      	beq.n	800b1bc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1a8:	4b29      	ldr	r3, [pc, #164]	; (800b250 <UART_SetConfig+0xb50>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	08db      	lsrs	r3, r3, #3
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	4a28      	ldr	r2, [pc, #160]	; (800b254 <UART_SetConfig+0xb54>)
 800b1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1ba:	e00f      	b.n	800b1dc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b1bc:	4b25      	ldr	r3, [pc, #148]	; (800b254 <UART_SetConfig+0xb54>)
 800b1be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1c0:	e00c      	b.n	800b1dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b1c2:	4b25      	ldr	r3, [pc, #148]	; (800b258 <UART_SetConfig+0xb58>)
 800b1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1c6:	e009      	b.n	800b1dc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1ce:	e005      	b.n	800b1dc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b1da:	bf00      	nop
    }

    if (pclk != 0U)
 800b1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d021      	beq.n	800b226 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	4a1d      	ldr	r2, [pc, #116]	; (800b25c <UART_SetConfig+0xb5c>)
 800b1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	085b      	lsrs	r3, r3, #1
 800b1fa:	441a      	add	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	fbb2 f3f3 	udiv	r3, r2, r3
 800b204:	b29b      	uxth	r3, r3
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	2b0f      	cmp	r3, #15
 800b20c:	d908      	bls.n	800b220 <UART_SetConfig+0xb20>
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b214:	d204      	bcs.n	800b220 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b21c:	60da      	str	r2, [r3, #12]
 800b21e:	e002      	b.n	800b226 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b242:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b246:	4618      	mov	r0, r3
 800b248:	3738      	adds	r7, #56	; 0x38
 800b24a:	46bd      	mov	sp, r7
 800b24c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b250:	58024400 	.word	0x58024400
 800b254:	03d09000 	.word	0x03d09000
 800b258:	003d0900 	.word	0x003d0900
 800b25c:	08011464 	.word	0x08011464

0800b260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00a      	beq.n	800b28a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	f003 0302 	and.w	r3, r3, #2
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00a      	beq.n	800b2ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d2:	f003 0308 	and.w	r3, r3, #8
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00a      	beq.n	800b2f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f4:	f003 0310 	and.w	r3, r3, #16
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00a      	beq.n	800b312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b316:	f003 0320 	and.w	r3, r3, #32
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01a      	beq.n	800b376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	430a      	orrs	r2, r1
 800b354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b35e:	d10a      	bne.n	800b376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	430a      	orrs	r2, r1
 800b374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00a      	beq.n	800b398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	430a      	orrs	r2, r1
 800b396:	605a      	str	r2, [r3, #4]
  }
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af02      	add	r7, sp, #8
 800b3aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b3b4:	f7f6 fb4e 	bl	8001a54 <HAL_GetTick>
 800b3b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0308 	and.w	r3, r3, #8
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d10e      	bne.n	800b3e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f82c 	bl	800b434 <UART_WaitOnFlagUntilTimeout>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e022      	b.n	800b42c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b04      	cmp	r3, #4
 800b3f2:	d10e      	bne.n	800b412 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f816 	bl	800b434 <UART_WaitOnFlagUntilTimeout>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b40e:	2303      	movs	r3, #3
 800b410:	e00c      	b.n	800b42c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2220      	movs	r2, #32
 800b416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2220      	movs	r2, #32
 800b41e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	4613      	mov	r3, r2
 800b442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b444:	e062      	b.n	800b50c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44c:	d05e      	beq.n	800b50c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b44e:	f7f6 fb01 	bl	8001a54 <HAL_GetTick>
 800b452:	4602      	mov	r2, r0
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d302      	bcc.n	800b464 <UART_WaitOnFlagUntilTimeout+0x30>
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d11d      	bne.n	800b4a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b472:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689a      	ldr	r2, [r3, #8]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 0201 	bic.w	r2, r2, #1
 800b482:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2220      	movs	r2, #32
 800b488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2220      	movs	r2, #32
 800b490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e045      	b.n	800b52c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0304 	and.w	r3, r3, #4
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d02e      	beq.n	800b50c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4bc:	d126      	bne.n	800b50c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b4d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689a      	ldr	r2, [r3, #8]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f022 0201 	bic.w	r2, r2, #1
 800b4e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2220      	movs	r2, #32
 800b4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e00f      	b.n	800b52c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	69da      	ldr	r2, [r3, #28]
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	4013      	ands	r3, r2
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	429a      	cmp	r2, r3
 800b51a:	bf0c      	ite	eq
 800b51c:	2301      	moveq	r3, #1
 800b51e:	2300      	movne	r3, #0
 800b520:	b2db      	uxtb	r3, r3
 800b522:	461a      	mov	r2, r3
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	429a      	cmp	r2, r3
 800b528:	d08d      	beq.n	800b446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b54a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b55a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2220      	movs	r2, #32
 800b560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b586:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6899      	ldr	r1, [r3, #8]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	4b08      	ldr	r3, [pc, #32]	; (800b5b4 <UART_EndRxTransfer+0x44>)
 800b594:	400b      	ands	r3, r1
 800b596:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2220      	movs	r2, #32
 800b59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b5a6:	bf00      	nop
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	effffffe 	.word	0xeffffffe

0800b5b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ce:	d01f      	beq.n	800b610 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5e6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f022 0201 	bic.w	r2, r2, #1
 800b5f6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b606:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2220      	movs	r2, #32
 800b60c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7f5 fde1 	bl	80011d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b616:	bf00      	nop
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff f853 	bl	800a6d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b632:	bf00      	nop
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b086      	sub	sp, #24
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b646:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b64e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b656:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b662:	2b80      	cmp	r3, #128	; 0x80
 800b664:	d109      	bne.n	800b67a <UART_DMAError+0x40>
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b21      	cmp	r3, #33	; 0x21
 800b66a:	d106      	bne.n	800b67a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b674:	6978      	ldr	r0, [r7, #20]
 800b676:	f7ff ff5d 	bl	800b534 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b684:	2b40      	cmp	r3, #64	; 0x40
 800b686:	d109      	bne.n	800b69c <UART_DMAError+0x62>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b22      	cmp	r3, #34	; 0x22
 800b68c:	d106      	bne.n	800b69c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	2200      	movs	r2, #0
 800b692:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b696:	6978      	ldr	r0, [r7, #20]
 800b698:	f7ff ff6a 	bl	800b570 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a2:	f043 0210 	orr.w	r2, r3, #16
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6ac:	6978      	ldr	r0, [r7, #20]
 800b6ae:	f7ff f81d 	bl	800a6ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6b2:	bf00      	nop
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d101      	bne.n	800b6d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	e027      	b.n	800b720 <HAL_UARTEx_DisableFifoMode+0x66>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2224      	movs	r2, #36	; 0x24
 800b6dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f022 0201 	bic.w	r2, r2, #1
 800b6f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b6fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2220      	movs	r2, #32
 800b712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d101      	bne.n	800b744 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b740:	2302      	movs	r3, #2
 800b742:	e02d      	b.n	800b7a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2224      	movs	r2, #36	; 0x24
 800b750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f022 0201 	bic.w	r2, r2, #1
 800b76a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	430a      	orrs	r2, r1
 800b77e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f84f 	bl	800b824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2220      	movs	r2, #32
 800b792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d101      	bne.n	800b7c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7bc:	2302      	movs	r3, #2
 800b7be:	e02d      	b.n	800b81c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2224      	movs	r2, #36	; 0x24
 800b7cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f022 0201 	bic.w	r2, r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	430a      	orrs	r2, r1
 800b7fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f811 	bl	800b824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b824:	b480      	push	{r7}
 800b826:	b089      	sub	sp, #36	; 0x24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b82c:	4a2f      	ldr	r2, [pc, #188]	; (800b8ec <UARTEx_SetNbDataToProcess+0xc8>)
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b836:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b83a:	4a2d      	ldr	r2, [pc, #180]	; (800b8f0 <UARTEx_SetNbDataToProcess+0xcc>)
 800b83c:	f107 030c 	add.w	r3, r7, #12
 800b840:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b844:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d108      	bne.n	800b862 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b860:	e03d      	b.n	800b8de <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b862:	2310      	movs	r3, #16
 800b864:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b866:	2310      	movs	r3, #16
 800b868:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	0e5b      	lsrs	r3, r3, #25
 800b872:	b2db      	uxtb	r3, r3
 800b874:	f003 0307 	and.w	r3, r3, #7
 800b878:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	0f5b      	lsrs	r3, r3, #29
 800b882:	b2db      	uxtb	r3, r3
 800b884:	f003 0307 	and.w	r3, r3, #7
 800b888:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b88a:	7fbb      	ldrb	r3, [r7, #30]
 800b88c:	7f3a      	ldrb	r2, [r7, #28]
 800b88e:	f107 0120 	add.w	r1, r7, #32
 800b892:	440a      	add	r2, r1
 800b894:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b898:	fb02 f303 	mul.w	r3, r2, r3
 800b89c:	7f3a      	ldrb	r2, [r7, #28]
 800b89e:	f107 0120 	add.w	r1, r7, #32
 800b8a2:	440a      	add	r2, r1
 800b8a4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b8a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b8b4:	7ffb      	ldrb	r3, [r7, #31]
 800b8b6:	7f7a      	ldrb	r2, [r7, #29]
 800b8b8:	f107 0120 	add.w	r1, r7, #32
 800b8bc:	440a      	add	r2, r1
 800b8be:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b8c2:	fb02 f303 	mul.w	r3, r2, r3
 800b8c6:	7f7a      	ldrb	r2, [r7, #29]
 800b8c8:	f107 0120 	add.w	r1, r7, #32
 800b8cc:	440a      	add	r2, r1
 800b8ce:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b8d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b8de:	bf00      	nop
 800b8e0:	3724      	adds	r7, #36	; 0x24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	080113f4 	.word	0x080113f4
 800b8f0:	080113fc 	.word	0x080113fc

0800b8f4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b8f4:	b084      	sub	sp, #16
 800b8f6:	b480      	push	{r7}
 800b8f8:	b085      	sub	sp, #20
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	f107 001c 	add.w	r0, r7, #28
 800b902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b90a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b90c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b90e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b912:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b916:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b91a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	4313      	orrs	r3, r2
 800b920:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	4b07      	ldr	r3, [pc, #28]	; (800b944 <SDMMC_Init+0x50>)
 800b928:	4013      	ands	r3, r2
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	431a      	orrs	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	b004      	add	sp, #16
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	ffc02c00 	.word	0xffc02c00

0800b948 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b956:	4618      	mov	r0, r3
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f043 0203 	orr.w	r2, r3, #3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	370c      	adds	r7, #12
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b083      	sub	sp, #12
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f003 0303 	and.w	r3, r3, #3
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b9e8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b9ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	68da      	ldr	r2, [r3, #12]
 800b9fa:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <SDMMC_SendCommand+0x50>)
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	431a      	orrs	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	fffee0c0 	.word	0xfffee0c0

0800ba18 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	b2db      	uxtb	r3, r3
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b085      	sub	sp, #20
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	3314      	adds	r3, #20
 800ba40:	461a      	mov	r2, r3
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	4413      	add	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba7e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ba84:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ba8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800baa2:	2300      	movs	r3, #0

}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b088      	sub	sp, #32
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800babe:	2310      	movs	r3, #16
 800bac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bac8:	2300      	movs	r3, #0
 800baca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bacc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bad2:	f107 0308 	add.w	r3, r7, #8
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff ff73 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bade:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae2:	2110      	movs	r1, #16
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 faaf 	bl	800c048 <SDMMC_GetCmdResp1>
 800baea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baec:	69fb      	ldr	r3, [r7, #28]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3720      	adds	r7, #32
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b088      	sub	sp, #32
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bb04:	2311      	movs	r3, #17
 800bb06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb18:	f107 0308 	add.w	r3, r7, #8
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7ff ff50 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb28:	2111      	movs	r1, #17
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fa8c 	bl	800c048 <SDMMC_GetCmdResp1>
 800bb30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb32:	69fb      	ldr	r3, [r7, #28]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3720      	adds	r7, #32
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bb4a:	2312      	movs	r3, #18
 800bb4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb54:	2300      	movs	r3, #0
 800bb56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb5e:	f107 0308 	add.w	r3, r7, #8
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7ff ff2d 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb6e:	2112      	movs	r1, #18
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fa69 	bl	800c048 <SDMMC_GetCmdResp1>
 800bb76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb78:	69fb      	ldr	r3, [r7, #28]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3720      	adds	r7, #32
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b088      	sub	sp, #32
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bb90:	2318      	movs	r3, #24
 800bb92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bba4:	f107 0308 	add.w	r3, r7, #8
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff ff0a 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bbb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb4:	2118      	movs	r1, #24
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fa46 	bl	800c048 <SDMMC_GetCmdResp1>
 800bbbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbbe:	69fb      	ldr	r3, [r7, #28]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3720      	adds	r7, #32
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bbd6:	2319      	movs	r3, #25
 800bbd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbea:	f107 0308 	add.w	r3, r7, #8
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff fee7 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bbf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbfa:	2119      	movs	r1, #25
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fa23 	bl	800c048 <SDMMC_GetCmdResp1>
 800bc02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc04:	69fb      	ldr	r3, [r7, #28]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3720      	adds	r7, #32
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bc1c:	230c      	movs	r3, #12
 800bc1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc26:	2300      	movs	r3, #0
 800bc28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc2e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc48:	f107 0308 	add.w	r3, r7, #8
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff feb8 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bc54:	4a0b      	ldr	r2, [pc, #44]	; (800bc84 <SDMMC_CmdStopTransfer+0x74>)
 800bc56:	210c      	movs	r1, #12
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f9f5 	bl	800c048 <SDMMC_GetCmdResp1>
 800bc5e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc72:	d101      	bne.n	800bc78 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bc74:	2300      	movs	r3, #0
 800bc76:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bc78:	69fb      	ldr	r3, [r7, #28]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3720      	adds	r7, #32
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	05f5e100 	.word	0x05f5e100

0800bc88 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08a      	sub	sp, #40	; 0x28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bc98:	2307      	movs	r3, #7
 800bc9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bca0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bca2:	2300      	movs	r3, #0
 800bca4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcaa:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcac:	f107 0310 	add.w	r3, r7, #16
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7ff fe86 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bcb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcbc:	2107      	movs	r1, #7
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f000 f9c2 	bl	800c048 <SDMMC_GetCmdResp1>
 800bcc4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3728      	adds	r7, #40	; 0x28
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bce0:	2300      	movs	r3, #0
 800bce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bce4:	2300      	movs	r3, #0
 800bce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcee:	f107 0308 	add.w	r3, r7, #8
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff fe65 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f976 	bl	800bfec <SDMMC_GetCmdError>
 800bd00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd02:	69fb      	ldr	r3, [r7, #28]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3720      	adds	r7, #32
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bd14:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bd18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bd1a:	2308      	movs	r3, #8
 800bd1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd24:	2300      	movs	r3, #0
 800bd26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd2e:	f107 0308 	add.w	r3, r7, #8
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff fe45 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fb78 	bl	800c430 <SDMMC_GetCmdResp7>
 800bd40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd42:	69fb      	ldr	r3, [r7, #28]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3720      	adds	r7, #32
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b088      	sub	sp, #32
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bd5a:	2337      	movs	r3, #55	; 0x37
 800bd5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd64:	2300      	movs	r3, #0
 800bd66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd6e:	f107 0308 	add.w	r3, r7, #8
 800bd72:	4619      	mov	r1, r3
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff fe25 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bd7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd7e:	2137      	movs	r1, #55	; 0x37
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f961 	bl	800c048 <SDMMC_GetCmdResp1>
 800bd86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd88:	69fb      	ldr	r3, [r7, #28]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3720      	adds	r7, #32
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b088      	sub	sp, #32
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bda0:	2329      	movs	r3, #41	; 0x29
 800bda2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bda4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bda8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdb4:	f107 0308 	add.w	r3, r7, #8
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7ff fe02 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fa7d 	bl	800c2c0 <SDMMC_GetCmdResp3>
 800bdc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdc8:	69fb      	ldr	r3, [r7, #28]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3720      	adds	r7, #32
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b088      	sub	sp, #32
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bde0:	2306      	movs	r3, #6
 800bde2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bde4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bde8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdea:	2300      	movs	r3, #0
 800bdec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdf4:	f107 0308 	add.w	r3, r7, #8
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fde2 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800be00:	f241 3288 	movw	r2, #5000	; 0x1388
 800be04:	2106      	movs	r1, #6
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f91e 	bl	800c048 <SDMMC_GetCmdResp1>
 800be0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be0e:	69fb      	ldr	r3, [r7, #28]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3720      	adds	r7, #32
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800be24:	2333      	movs	r3, #51	; 0x33
 800be26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be38:	f107 0308 	add.w	r3, r7, #8
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff fdc0 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800be44:	f241 3288 	movw	r2, #5000	; 0x1388
 800be48:	2133      	movs	r1, #51	; 0x33
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f8fc 	bl	800c048 <SDMMC_GetCmdResp1>
 800be50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be52:	69fb      	ldr	r3, [r7, #28]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3720      	adds	r7, #32
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800be68:	2302      	movs	r3, #2
 800be6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be72:	2300      	movs	r3, #0
 800be74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be7c:	f107 0308 	add.w	r3, r7, #8
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff fd9e 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 f9cf 	bl	800c22c <SDMMC_GetCmdResp2>
 800be8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be90:	69fb      	ldr	r3, [r7, #28]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b088      	sub	sp, #32
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bea8:	2309      	movs	r3, #9
 800beaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800beac:	f44f 7340 	mov.w	r3, #768	; 0x300
 800beb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beb2:	2300      	movs	r3, #0
 800beb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bebc:	f107 0308 	add.w	r3, r7, #8
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7ff fd7e 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f9af 	bl	800c22c <SDMMC_GetCmdResp2>
 800bece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bed0:	69fb      	ldr	r3, [r7, #28]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3720      	adds	r7, #32
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b088      	sub	sp, #32
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bee4:	2300      	movs	r3, #0
 800bee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bee8:	2303      	movs	r3, #3
 800beea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bef2:	2300      	movs	r3, #0
 800bef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800befa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800befc:	f107 0308 	add.w	r3, r7, #8
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff fd5e 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	2103      	movs	r1, #3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fa17 	bl	800c340 <SDMMC_GetCmdResp6>
 800bf12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf14:	69fb      	ldr	r3, [r7, #28]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3720      	adds	r7, #32
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b088      	sub	sp, #32
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bf2c:	230d      	movs	r3, #13
 800bf2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf40:	f107 0308 	add.w	r3, r7, #8
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff fd3c 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bf4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf50:	210d      	movs	r1, #13
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f878 	bl	800c048 <SDMMC_GetCmdResp1>
 800bf58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf5a:	69fb      	ldr	r3, [r7, #28]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3720      	adds	r7, #32
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bf70:	230d      	movs	r3, #13
 800bf72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf84:	f107 0308 	add.w	r3, r7, #8
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7ff fd1a 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bf90:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf94:	210d      	movs	r1, #13
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f856 	bl	800c048 <SDMMC_GetCmdResp1>
 800bf9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf9e:	69fb      	ldr	r3, [r7, #28]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3720      	adds	r7, #32
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800bfb4:	230b      	movs	r3, #11
 800bfb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfc8:	f107 0308 	add.w	r3, r7, #8
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff fcf8 	bl	800b9c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800bfd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfd8:	210b      	movs	r1, #11
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f834 	bl	800c048 <SDMMC_GetCmdResp1>
 800bfe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfe2:	69fb      	ldr	r3, [r7, #28]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3720      	adds	r7, #32
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bff4:	4b11      	ldr	r3, [pc, #68]	; (800c03c <SDMMC_GetCmdError+0x50>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a11      	ldr	r2, [pc, #68]	; (800c040 <SDMMC_GetCmdError+0x54>)
 800bffa:	fba2 2303 	umull	r2, r3, r2, r3
 800bffe:	0a5b      	lsrs	r3, r3, #9
 800c000:	f241 3288 	movw	r2, #5000	; 0x1388
 800c004:	fb02 f303 	mul.w	r3, r2, r3
 800c008:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	1e5a      	subs	r2, r3, #1
 800c00e:	60fa      	str	r2, [r7, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d102      	bne.n	800c01a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c014:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c018:	e009      	b.n	800c02e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0f1      	beq.n	800c00a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a06      	ldr	r2, [pc, #24]	; (800c044 <SDMMC_GetCmdError+0x58>)
 800c02a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	24000000 	.word	0x24000000
 800c040:	10624dd3 	.word	0x10624dd3
 800c044:	002000c5 	.word	0x002000c5

0800c048 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b088      	sub	sp, #32
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	460b      	mov	r3, r1
 800c052:	607a      	str	r2, [r7, #4]
 800c054:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c056:	4b70      	ldr	r3, [pc, #448]	; (800c218 <SDMMC_GetCmdResp1+0x1d0>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a70      	ldr	r2, [pc, #448]	; (800c21c <SDMMC_GetCmdResp1+0x1d4>)
 800c05c:	fba2 2303 	umull	r2, r3, r2, r3
 800c060:	0a5a      	lsrs	r2, r3, #9
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	fb02 f303 	mul.w	r3, r2, r3
 800c068:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	61fa      	str	r2, [r7, #28]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d102      	bne.n	800c07a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c078:	e0c9      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c07e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c080:	69ba      	ldr	r2, [r7, #24]
 800c082:	4b67      	ldr	r3, [pc, #412]	; (800c220 <SDMMC_GetCmdResp1+0x1d8>)
 800c084:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0ef      	beq.n	800c06a <SDMMC_GetCmdResp1+0x22>
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1ea      	bne.n	800c06a <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d004      	beq.n	800c0aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2204      	movs	r2, #4
 800c0a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0a6:	2304      	movs	r3, #4
 800c0a8:	e0b1      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d004      	beq.n	800c0c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e0a6      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4a58      	ldr	r2, [pc, #352]	; (800c224 <SDMMC_GetCmdResp1+0x1dc>)
 800c0c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7ff fca6 	bl	800ba18 <SDMMC_GetCommandResponse>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	7afb      	ldrb	r3, [r7, #11]
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d001      	beq.n	800c0da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e099      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c0da:	2100      	movs	r1, #0
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f7ff fca8 	bl	800ba32 <SDMMC_GetResponse>
 800c0e2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	4b50      	ldr	r3, [pc, #320]	; (800c228 <SDMMC_GetCmdResp1+0x1e0>)
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	e08d      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	da02      	bge.n	800c0fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c0f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0fc:	e087      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c108:	2340      	movs	r3, #64	; 0x40
 800c10a:	e080      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c116:	2380      	movs	r3, #128	; 0x80
 800c118:	e079      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c124:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c128:	e071      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c138:	e069      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c148:	e061      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c158:	e059      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c168:	e051      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c178:	e049      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c184:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c188:	e041      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c198:	e039      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c1a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1a8:	e031      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c1b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1b8:	e029      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c1c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c1c8:	e021      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c1d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c1d8:	e019      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c1e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c1e8:	e011      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c1f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1f8:	e009      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	f003 0308 	and.w	r3, r3, #8
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c204:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c208:	e001      	b.n	800c20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c20a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3720      	adds	r7, #32
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	24000000 	.word	0x24000000
 800c21c:	10624dd3 	.word	0x10624dd3
 800c220:	00200045 	.word	0x00200045
 800c224:	002000c5 	.word	0x002000c5
 800c228:	fdffe008 	.word	0xfdffe008

0800c22c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c234:	4b1f      	ldr	r3, [pc, #124]	; (800c2b4 <SDMMC_GetCmdResp2+0x88>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a1f      	ldr	r2, [pc, #124]	; (800c2b8 <SDMMC_GetCmdResp2+0x8c>)
 800c23a:	fba2 2303 	umull	r2, r3, r2, r3
 800c23e:	0a5b      	lsrs	r3, r3, #9
 800c240:	f241 3288 	movw	r2, #5000	; 0x1388
 800c244:	fb02 f303 	mul.w	r3, r2, r3
 800c248:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	1e5a      	subs	r2, r3, #1
 800c24e:	60fa      	str	r2, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d102      	bne.n	800c25a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c254:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c258:	e026      	b.n	800c2a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c25e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0ef      	beq.n	800c24a <SDMMC_GetCmdResp2+0x1e>
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1ea      	bne.n	800c24a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d004      	beq.n	800c28a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2204      	movs	r2, #4
 800c284:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c286:	2304      	movs	r3, #4
 800c288:	e00e      	b.n	800c2a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c28e:	f003 0301 	and.w	r3, r3, #1
 800c292:	2b00      	cmp	r3, #0
 800c294:	d004      	beq.n	800c2a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c29c:	2301      	movs	r3, #1
 800c29e:	e003      	b.n	800c2a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a06      	ldr	r2, [pc, #24]	; (800c2bc <SDMMC_GetCmdResp2+0x90>)
 800c2a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr
 800c2b4:	24000000 	.word	0x24000000
 800c2b8:	10624dd3 	.word	0x10624dd3
 800c2bc:	002000c5 	.word	0x002000c5

0800c2c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2c8:	4b1a      	ldr	r3, [pc, #104]	; (800c334 <SDMMC_GetCmdResp3+0x74>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a1a      	ldr	r2, [pc, #104]	; (800c338 <SDMMC_GetCmdResp3+0x78>)
 800c2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d2:	0a5b      	lsrs	r3, r3, #9
 800c2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2d8:	fb02 f303 	mul.w	r3, r2, r3
 800c2dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	1e5a      	subs	r2, r3, #1
 800c2e2:	60fa      	str	r2, [r7, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d102      	bne.n	800c2ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2ec:	e01b      	b.n	800c326 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0ef      	beq.n	800c2de <SDMMC_GetCmdResp3+0x1e>
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1ea      	bne.n	800c2de <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d004      	beq.n	800c31e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2204      	movs	r2, #4
 800c318:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c31a:	2304      	movs	r3, #4
 800c31c:	e003      	b.n	800c326 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a06      	ldr	r2, [pc, #24]	; (800c33c <SDMMC_GetCmdResp3+0x7c>)
 800c322:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3714      	adds	r7, #20
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	24000000 	.word	0x24000000
 800c338:	10624dd3 	.word	0x10624dd3
 800c33c:	002000c5 	.word	0x002000c5

0800c340 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b088      	sub	sp, #32
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	460b      	mov	r3, r1
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c34e:	4b35      	ldr	r3, [pc, #212]	; (800c424 <SDMMC_GetCmdResp6+0xe4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a35      	ldr	r2, [pc, #212]	; (800c428 <SDMMC_GetCmdResp6+0xe8>)
 800c354:	fba2 2303 	umull	r2, r3, r2, r3
 800c358:	0a5b      	lsrs	r3, r3, #9
 800c35a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c35e:	fb02 f303 	mul.w	r3, r2, r3
 800c362:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	1e5a      	subs	r2, r3, #1
 800c368:	61fa      	str	r2, [r7, #28]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d102      	bne.n	800c374 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c36e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c372:	e052      	b.n	800c41a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c378:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c380:	2b00      	cmp	r3, #0
 800c382:	d0ef      	beq.n	800c364 <SDMMC_GetCmdResp6+0x24>
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1ea      	bne.n	800c364 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c392:	f003 0304 	and.w	r3, r3, #4
 800c396:	2b00      	cmp	r3, #0
 800c398:	d004      	beq.n	800c3a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2204      	movs	r2, #4
 800c39e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3a0:	2304      	movs	r3, #4
 800c3a2:	e03a      	b.n	800c41a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a8:	f003 0301 	and.w	r3, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d004      	beq.n	800c3ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e02f      	b.n	800c41a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7ff fb2c 	bl	800ba18 <SDMMC_GetCommandResponse>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d001      	beq.n	800c3ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e025      	b.n	800c41a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	4a16      	ldr	r2, [pc, #88]	; (800c42c <SDMMC_GetCmdResp6+0xec>)
 800c3d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f7ff fb2b 	bl	800ba32 <SDMMC_GetResponse>
 800c3dc:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d106      	bne.n	800c3f6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	0c1b      	lsrs	r3, r3, #16
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e011      	b.n	800c41a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c404:	e009      	b.n	800c41a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c414:	e001      	b.n	800c41a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3720      	adds	r7, #32
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	24000000 	.word	0x24000000
 800c428:	10624dd3 	.word	0x10624dd3
 800c42c:	002000c5 	.word	0x002000c5

0800c430 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c430:	b480      	push	{r7}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c438:	4b22      	ldr	r3, [pc, #136]	; (800c4c4 <SDMMC_GetCmdResp7+0x94>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a22      	ldr	r2, [pc, #136]	; (800c4c8 <SDMMC_GetCmdResp7+0x98>)
 800c43e:	fba2 2303 	umull	r2, r3, r2, r3
 800c442:	0a5b      	lsrs	r3, r3, #9
 800c444:	f241 3288 	movw	r2, #5000	; 0x1388
 800c448:	fb02 f303 	mul.w	r3, r2, r3
 800c44c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	1e5a      	subs	r2, r3, #1
 800c452:	60fa      	str	r2, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d102      	bne.n	800c45e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c45c:	e02c      	b.n	800c4b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c462:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d0ef      	beq.n	800c44e <SDMMC_GetCmdResp7+0x1e>
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1ea      	bne.n	800c44e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47c:	f003 0304 	and.w	r3, r3, #4
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2204      	movs	r2, #4
 800c488:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c48a:	2304      	movs	r3, #4
 800c48c:	e014      	b.n	800c4b8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	d004      	beq.n	800c4a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2201      	movs	r2, #1
 800c49e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e009      	b.n	800c4b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2240      	movs	r2, #64	; 0x40
 800c4b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c4b6:	2300      	movs	r3, #0

}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr
 800c4c4:	24000000 	.word	0x24000000
 800c4c8:	10624dd3 	.word	0x10624dd3

0800c4cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4cc:	b084      	sub	sp, #16
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	f107 001c 	add.w	r0, r7, #28
 800c4da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d120      	bne.n	800c526 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68da      	ldr	r2, [r3, #12]
 800c4f4:	4b25      	ldr	r3, [pc, #148]	; (800c58c <USB_CoreInit+0xc0>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d105      	bne.n	800c51a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f001 fabe 	bl	800da9c <USB_CoreReset>
 800c520:	4603      	mov	r3, r0
 800c522:	73fb      	strb	r3, [r7, #15]
 800c524:	e01a      	b.n	800c55c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f001 fab2 	bl	800da9c <USB_CoreReset>
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c546:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	639a      	str	r2, [r3, #56]	; 0x38
 800c54e:	e005      	b.n	800c55c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c554:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d10b      	bne.n	800c57a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f043 0206 	orr.w	r2, r3, #6
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	f043 0220 	orr.w	r2, r3, #32
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c586:	b004      	add	sp, #16
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	ffbdffbf 	.word	0xffbdffbf

0800c590 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	4613      	mov	r3, r2
 800c59c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c59e:	79fb      	ldrb	r3, [r7, #7]
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d165      	bne.n	800c670 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	4a41      	ldr	r2, [pc, #260]	; (800c6ac <USB_SetTurnaroundTime+0x11c>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d906      	bls.n	800c5ba <USB_SetTurnaroundTime+0x2a>
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	4a40      	ldr	r2, [pc, #256]	; (800c6b0 <USB_SetTurnaroundTime+0x120>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d802      	bhi.n	800c5ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c5b4:	230f      	movs	r3, #15
 800c5b6:	617b      	str	r3, [r7, #20]
 800c5b8:	e062      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	4a3c      	ldr	r2, [pc, #240]	; (800c6b0 <USB_SetTurnaroundTime+0x120>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d906      	bls.n	800c5d0 <USB_SetTurnaroundTime+0x40>
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	4a3b      	ldr	r2, [pc, #236]	; (800c6b4 <USB_SetTurnaroundTime+0x124>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d802      	bhi.n	800c5d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c5ca:	230e      	movs	r3, #14
 800c5cc:	617b      	str	r3, [r7, #20]
 800c5ce:	e057      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	4a38      	ldr	r2, [pc, #224]	; (800c6b4 <USB_SetTurnaroundTime+0x124>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d906      	bls.n	800c5e6 <USB_SetTurnaroundTime+0x56>
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	4a37      	ldr	r2, [pc, #220]	; (800c6b8 <USB_SetTurnaroundTime+0x128>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d802      	bhi.n	800c5e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c5e0:	230d      	movs	r3, #13
 800c5e2:	617b      	str	r3, [r7, #20]
 800c5e4:	e04c      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	4a33      	ldr	r2, [pc, #204]	; (800c6b8 <USB_SetTurnaroundTime+0x128>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d906      	bls.n	800c5fc <USB_SetTurnaroundTime+0x6c>
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	4a32      	ldr	r2, [pc, #200]	; (800c6bc <USB_SetTurnaroundTime+0x12c>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d802      	bhi.n	800c5fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c5f6:	230c      	movs	r3, #12
 800c5f8:	617b      	str	r3, [r7, #20]
 800c5fa:	e041      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	4a2f      	ldr	r2, [pc, #188]	; (800c6bc <USB_SetTurnaroundTime+0x12c>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d906      	bls.n	800c612 <USB_SetTurnaroundTime+0x82>
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	4a2e      	ldr	r2, [pc, #184]	; (800c6c0 <USB_SetTurnaroundTime+0x130>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d802      	bhi.n	800c612 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c60c:	230b      	movs	r3, #11
 800c60e:	617b      	str	r3, [r7, #20]
 800c610:	e036      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	4a2a      	ldr	r2, [pc, #168]	; (800c6c0 <USB_SetTurnaroundTime+0x130>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d906      	bls.n	800c628 <USB_SetTurnaroundTime+0x98>
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	4a29      	ldr	r2, [pc, #164]	; (800c6c4 <USB_SetTurnaroundTime+0x134>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d802      	bhi.n	800c628 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c622:	230a      	movs	r3, #10
 800c624:	617b      	str	r3, [r7, #20]
 800c626:	e02b      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4a26      	ldr	r2, [pc, #152]	; (800c6c4 <USB_SetTurnaroundTime+0x134>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d906      	bls.n	800c63e <USB_SetTurnaroundTime+0xae>
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	4a25      	ldr	r2, [pc, #148]	; (800c6c8 <USB_SetTurnaroundTime+0x138>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d802      	bhi.n	800c63e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c638:	2309      	movs	r3, #9
 800c63a:	617b      	str	r3, [r7, #20]
 800c63c:	e020      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	4a21      	ldr	r2, [pc, #132]	; (800c6c8 <USB_SetTurnaroundTime+0x138>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d906      	bls.n	800c654 <USB_SetTurnaroundTime+0xc4>
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	4a20      	ldr	r2, [pc, #128]	; (800c6cc <USB_SetTurnaroundTime+0x13c>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d802      	bhi.n	800c654 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c64e:	2308      	movs	r3, #8
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	e015      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	4a1d      	ldr	r2, [pc, #116]	; (800c6cc <USB_SetTurnaroundTime+0x13c>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d906      	bls.n	800c66a <USB_SetTurnaroundTime+0xda>
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	4a1c      	ldr	r2, [pc, #112]	; (800c6d0 <USB_SetTurnaroundTime+0x140>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d802      	bhi.n	800c66a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c664:	2307      	movs	r3, #7
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e00a      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c66a:	2306      	movs	r3, #6
 800c66c:	617b      	str	r3, [r7, #20]
 800c66e:	e007      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c670:	79fb      	ldrb	r3, [r7, #7]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d102      	bne.n	800c67c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c676:	2309      	movs	r3, #9
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	e001      	b.n	800c680 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c67c:	2309      	movs	r3, #9
 800c67e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	029b      	lsls	r3, r3, #10
 800c694:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c698:	431a      	orrs	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	371c      	adds	r7, #28
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	00d8acbf 	.word	0x00d8acbf
 800c6b0:	00e4e1bf 	.word	0x00e4e1bf
 800c6b4:	00f423ff 	.word	0x00f423ff
 800c6b8:	0106737f 	.word	0x0106737f
 800c6bc:	011a499f 	.word	0x011a499f
 800c6c0:	01312cff 	.word	0x01312cff
 800c6c4:	014ca43f 	.word	0x014ca43f
 800c6c8:	016e35ff 	.word	0x016e35ff
 800c6cc:	01a6ab1f 	.word	0x01a6ab1f
 800c6d0:	01e847ff 	.word	0x01e847ff

0800c6d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	f043 0201 	orr.w	r2, r3, #1
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	370c      	adds	r7, #12
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr

0800c6f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f6:	b480      	push	{r7}
 800c6f8:	b083      	sub	sp, #12
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	f023 0201 	bic.w	r2, r3, #1
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c730:	78fb      	ldrb	r3, [r7, #3]
 800c732:	2b01      	cmp	r3, #1
 800c734:	d106      	bne.n	800c744 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60da      	str	r2, [r3, #12]
 800c742:	e00b      	b.n	800c75c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c744:	78fb      	ldrb	r3, [r7, #3]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d106      	bne.n	800c758 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	60da      	str	r2, [r3, #12]
 800c756:	e001      	b.n	800c75c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e003      	b.n	800c764 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c75c:	2032      	movs	r0, #50	; 0x32
 800c75e:	f7f5 f985 	bl	8001a6c <HAL_Delay>

  return HAL_OK;
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c76c:	b084      	sub	sp, #16
 800c76e:	b580      	push	{r7, lr}
 800c770:	b086      	sub	sp, #24
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
 800c776:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c77a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c786:	2300      	movs	r3, #0
 800c788:	613b      	str	r3, [r7, #16]
 800c78a:	e009      	b.n	800c7a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	3340      	adds	r3, #64	; 0x40
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	2200      	movs	r2, #0
 800c798:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	3301      	adds	r3, #1
 800c79e:	613b      	str	r3, [r7, #16]
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	2b0e      	cmp	r3, #14
 800c7a4:	d9f2      	bls.n	800c78c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d11c      	bne.n	800c7e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7ba:	f043 0302 	orr.w	r3, r3, #2
 800c7be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	e005      	b.n	800c7f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c804:	4619      	mov	r1, r3
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c80c:	461a      	mov	r2, r3
 800c80e:	680b      	ldr	r3, [r1, #0]
 800c810:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c814:	2b01      	cmp	r3, #1
 800c816:	d10c      	bne.n	800c832 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d104      	bne.n	800c828 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c81e:	2100      	movs	r1, #0
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f949 	bl	800cab8 <USB_SetDevSpeed>
 800c826:	e008      	b.n	800c83a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c828:	2101      	movs	r1, #1
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f944 	bl	800cab8 <USB_SetDevSpeed>
 800c830:	e003      	b.n	800c83a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c832:	2103      	movs	r1, #3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f93f 	bl	800cab8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c83a:	2110      	movs	r1, #16
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 f8f3 	bl	800ca28 <USB_FlushTxFifo>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f911 	bl	800ca74 <USB_FlushRxFifo>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c862:	461a      	mov	r2, r3
 800c864:	2300      	movs	r3, #0
 800c866:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86e:	461a      	mov	r2, r3
 800c870:	2300      	movs	r3, #0
 800c872:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87a:	461a      	mov	r2, r3
 800c87c:	2300      	movs	r3, #0
 800c87e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c880:	2300      	movs	r3, #0
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	e043      	b.n	800c90e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	015a      	lsls	r2, r3, #5
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	4413      	add	r3, r2
 800c88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c89c:	d118      	bne.n	800c8d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10a      	bne.n	800c8ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	015a      	lsls	r2, r3, #5
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	e013      	b.n	800c8e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	015a      	lsls	r2, r3, #5
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8cc:	6013      	str	r3, [r2, #0]
 800c8ce:	e008      	b.n	800c8e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	015a      	lsls	r2, r3, #5
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8dc:	461a      	mov	r2, r3
 800c8de:	2300      	movs	r3, #0
 800c8e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c900:	461a      	mov	r2, r3
 800c902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c906:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	3301      	adds	r3, #1
 800c90c:	613b      	str	r3, [r7, #16]
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	429a      	cmp	r2, r3
 800c914:	d3b7      	bcc.n	800c886 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c916:	2300      	movs	r3, #0
 800c918:	613b      	str	r3, [r7, #16]
 800c91a:	e043      	b.n	800c9a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	015a      	lsls	r2, r3, #5
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4413      	add	r3, r2
 800c924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c92e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c932:	d118      	bne.n	800c966 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10a      	bne.n	800c950 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	4413      	add	r3, r2
 800c942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c946:	461a      	mov	r2, r3
 800c948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	e013      	b.n	800c978 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	015a      	lsls	r2, r3, #5
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4413      	add	r3, r2
 800c958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c95c:	461a      	mov	r2, r3
 800c95e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c962:	6013      	str	r3, [r2, #0]
 800c964:	e008      	b.n	800c978 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	015a      	lsls	r2, r3, #5
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	4413      	add	r3, r2
 800c96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c972:	461a      	mov	r2, r3
 800c974:	2300      	movs	r3, #0
 800c976:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	015a      	lsls	r2, r3, #5
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	4413      	add	r3, r2
 800c980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c984:	461a      	mov	r2, r3
 800c986:	2300      	movs	r3, #0
 800c988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	015a      	lsls	r2, r3, #5
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	4413      	add	r3, r2
 800c992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c996:	461a      	mov	r2, r3
 800c998:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c99c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	613b      	str	r3, [r7, #16]
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d3b7      	bcc.n	800c91c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c9cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d105      	bne.n	800c9e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	699b      	ldr	r3, [r3, #24]
 800c9d8:	f043 0210 	orr.w	r2, r3, #16
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	699a      	ldr	r2, [r3, #24]
 800c9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ca20 <USB_DevInit+0x2b4>)
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	f043 0208 	orr.w	r2, r3, #8
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c9fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d105      	bne.n	800ca10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	699a      	ldr	r2, [r3, #24]
 800ca08:	4b06      	ldr	r3, [pc, #24]	; (800ca24 <USB_DevInit+0x2b8>)
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca1c:	b004      	add	sp, #16
 800ca1e:	4770      	bx	lr
 800ca20:	803c3800 	.word	0x803c3800
 800ca24:	40000004 	.word	0x40000004

0800ca28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ca32:	2300      	movs	r3, #0
 800ca34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	019b      	lsls	r3, r3, #6
 800ca3a:	f043 0220 	orr.w	r2, r3, #32
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3301      	adds	r3, #1
 800ca46:	60fb      	str	r3, [r7, #12]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	4a09      	ldr	r2, [pc, #36]	; (800ca70 <USB_FlushTxFifo+0x48>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d901      	bls.n	800ca54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ca50:	2303      	movs	r3, #3
 800ca52:	e006      	b.n	800ca62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	f003 0320 	and.w	r3, r3, #32
 800ca5c:	2b20      	cmp	r3, #32
 800ca5e:	d0f0      	beq.n	800ca42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	00030d40 	.word	0x00030d40

0800ca74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2210      	movs	r2, #16
 800ca84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	4a09      	ldr	r2, [pc, #36]	; (800cab4 <USB_FlushRxFifo+0x40>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d901      	bls.n	800ca98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ca94:	2303      	movs	r3, #3
 800ca96:	e006      	b.n	800caa6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	f003 0310 	and.w	r3, r3, #16
 800caa0:	2b10      	cmp	r3, #16
 800caa2:	d0f0      	beq.n	800ca86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	00030d40 	.word	0x00030d40

0800cab8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	460b      	mov	r3, r1
 800cac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	78fb      	ldrb	r3, [r7, #3]
 800cad2:	68f9      	ldr	r1, [r7, #12]
 800cad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cad8:	4313      	orrs	r3, r2
 800cada:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800caea:	b480      	push	{r7}
 800caec:	b087      	sub	sp, #28
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	f003 0306 	and.w	r3, r3, #6
 800cb02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d102      	bne.n	800cb10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	75fb      	strb	r3, [r7, #23]
 800cb0e:	e00a      	b.n	800cb26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d002      	beq.n	800cb1c <USB_GetDevSpeed+0x32>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b06      	cmp	r3, #6
 800cb1a:	d102      	bne.n	800cb22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	75fb      	strb	r3, [r7, #23]
 800cb20:	e001      	b.n	800cb26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cb22:	230f      	movs	r3, #15
 800cb24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	371c      	adds	r7, #28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	785b      	ldrb	r3, [r3, #1]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d139      	bne.n	800cbc4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb56:	69da      	ldr	r2, [r3, #28]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	f003 030f 	and.w	r3, r3, #15
 800cb60:	2101      	movs	r1, #1
 800cb62:	fa01 f303 	lsl.w	r3, r1, r3
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	68f9      	ldr	r1, [r7, #12]
 800cb6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	015a      	lsls	r2, r3, #5
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	4413      	add	r3, r2
 800cb7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d153      	bne.n	800cc30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	78db      	ldrb	r3, [r3, #3]
 800cba2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cba4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	059b      	lsls	r3, r3, #22
 800cbaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cbac:	431a      	orrs	r2, r3
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	0159      	lsls	r1, r3, #5
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	440b      	add	r3, r1
 800cbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4b20      	ldr	r3, [pc, #128]	; (800cc40 <USB_ActivateEndpoint+0x10c>)
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	600b      	str	r3, [r1, #0]
 800cbc2:	e035      	b.n	800cc30 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbca:	69da      	ldr	r2, [r3, #28]
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	f003 030f 	and.w	r3, r3, #15
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	fa01 f303 	lsl.w	r3, r1, r3
 800cbda:	041b      	lsls	r3, r3, #16
 800cbdc:	68f9      	ldr	r1, [r7, #12]
 800cbde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	015a      	lsls	r2, r3, #5
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	4413      	add	r3, r2
 800cbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d119      	bne.n	800cc30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	78db      	ldrb	r3, [r3, #3]
 800cc16:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	431a      	orrs	r2, r3
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	0159      	lsls	r1, r3, #5
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	440b      	add	r3, r1
 800cc24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4b05      	ldr	r3, [pc, #20]	; (800cc40 <USB_ActivateEndpoint+0x10c>)
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	10008000 	.word	0x10008000

0800cc44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	785b      	ldrb	r3, [r3, #1]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d161      	bne.n	800cd24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	015a      	lsls	r2, r3, #5
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc76:	d11f      	bne.n	800ccb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	0151      	lsls	r1, r2, #5
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	015a      	lsls	r2, r3, #5
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	0151      	lsls	r1, r2, #5
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	440a      	add	r2, r1
 800ccae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	f003 030f 	and.w	r3, r3, #15
 800ccc8:	2101      	movs	r1, #1
 800ccca:	fa01 f303 	lsl.w	r3, r1, r3
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	43db      	mvns	r3, r3
 800ccd2:	68f9      	ldr	r1, [r7, #12]
 800ccd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccd8:	4013      	ands	r3, r2
 800ccda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce2:	69da      	ldr	r2, [r3, #28]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	f003 030f 	and.w	r3, r3, #15
 800ccec:	2101      	movs	r1, #1
 800ccee:	fa01 f303 	lsl.w	r3, r1, r3
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	43db      	mvns	r3, r3
 800ccf6:	68f9      	ldr	r1, [r7, #12]
 800ccf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	0159      	lsls	r1, r3, #5
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	440b      	add	r3, r1
 800cd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4b35      	ldr	r3, [pc, #212]	; (800cdf4 <USB_DeactivateEndpoint+0x1b0>)
 800cd1e:	4013      	ands	r3, r2
 800cd20:	600b      	str	r3, [r1, #0]
 800cd22:	e060      	b.n	800cde6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd3a:	d11f      	bne.n	800cd7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	0151      	lsls	r1, r2, #5
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	440a      	add	r2, r1
 800cd52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	0151      	lsls	r1, r2, #5
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	440a      	add	r2, r1
 800cd72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f003 030f 	and.w	r3, r3, #15
 800cd8c:	2101      	movs	r1, #1
 800cd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd92:	041b      	lsls	r3, r3, #16
 800cd94:	43db      	mvns	r3, r3
 800cd96:	68f9      	ldr	r1, [r7, #12]
 800cd98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda6:	69da      	ldr	r2, [r3, #28]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	f003 030f 	and.w	r3, r3, #15
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb6:	041b      	lsls	r3, r3, #16
 800cdb8:	43db      	mvns	r3, r3
 800cdba:	68f9      	ldr	r1, [r7, #12]
 800cdbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	0159      	lsls	r1, r3, #5
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	440b      	add	r3, r1
 800cdda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdde:	4619      	mov	r1, r3
 800cde0:	4b05      	ldr	r3, [pc, #20]	; (800cdf8 <USB_DeactivateEndpoint+0x1b4>)
 800cde2:	4013      	ands	r3, r2
 800cde4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	ec337800 	.word	0xec337800
 800cdf8:	eff37800 	.word	0xeff37800

0800cdfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08a      	sub	sp, #40	; 0x28
 800ce00:	af02      	add	r7, sp, #8
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	4613      	mov	r3, r2
 800ce08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	785b      	ldrb	r3, [r3, #1]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	f040 8163 	bne.w	800d0e4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d132      	bne.n	800ce8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	015a      	lsls	r2, r3, #5
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce32:	691a      	ldr	r2, [r3, #16]
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	0159      	lsls	r1, r3, #5
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	440b      	add	r3, r1
 800ce3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce40:	4619      	mov	r1, r3
 800ce42:	4ba5      	ldr	r3, [pc, #660]	; (800d0d8 <USB_EPStartXfer+0x2dc>)
 800ce44:	4013      	ands	r3, r2
 800ce46:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	015a      	lsls	r2, r3, #5
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	4413      	add	r3, r2
 800ce50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	0151      	lsls	r1, r2, #5
 800ce5a:	69fa      	ldr	r2, [r7, #28]
 800ce5c:	440a      	add	r2, r1
 800ce5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	015a      	lsls	r2, r3, #5
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	4413      	add	r3, r2
 800ce70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce74:	691a      	ldr	r2, [r3, #16]
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	0159      	lsls	r1, r3, #5
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	440b      	add	r3, r1
 800ce7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce82:	4619      	mov	r1, r3
 800ce84:	4b95      	ldr	r3, [pc, #596]	; (800d0dc <USB_EPStartXfer+0x2e0>)
 800ce86:	4013      	ands	r3, r2
 800ce88:	610b      	str	r3, [r1, #16]
 800ce8a:	e074      	b.n	800cf76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	015a      	lsls	r2, r3, #5
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	4413      	add	r3, r2
 800ce94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce98:	691a      	ldr	r2, [r3, #16]
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	0159      	lsls	r1, r3, #5
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	440b      	add	r3, r1
 800cea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea6:	4619      	mov	r1, r3
 800cea8:	4b8c      	ldr	r3, [pc, #560]	; (800d0dc <USB_EPStartXfer+0x2e0>)
 800ceaa:	4013      	ands	r3, r2
 800ceac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	015a      	lsls	r2, r3, #5
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceba:	691a      	ldr	r2, [r3, #16]
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	0159      	lsls	r1, r3, #5
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	440b      	add	r3, r1
 800cec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec8:	4619      	mov	r1, r3
 800ceca:	4b83      	ldr	r3, [pc, #524]	; (800d0d8 <USB_EPStartXfer+0x2dc>)
 800cecc:	4013      	ands	r3, r2
 800cece:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	015a      	lsls	r2, r3, #5
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	4413      	add	r3, r2
 800ced8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cedc:	691a      	ldr	r2, [r3, #16]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	6959      	ldr	r1, [r3, #20]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	440b      	add	r3, r1
 800cee8:	1e59      	subs	r1, r3, #1
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	fbb1 f3f3 	udiv	r3, r1, r3
 800cef2:	04d9      	lsls	r1, r3, #19
 800cef4:	4b7a      	ldr	r3, [pc, #488]	; (800d0e0 <USB_EPStartXfer+0x2e4>)
 800cef6:	400b      	ands	r3, r1
 800cef8:	69b9      	ldr	r1, [r7, #24]
 800cefa:	0148      	lsls	r0, r1, #5
 800cefc:	69f9      	ldr	r1, [r7, #28]
 800cefe:	4401      	add	r1, r0
 800cf00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf04:	4313      	orrs	r3, r2
 800cf06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	015a      	lsls	r2, r3, #5
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	4413      	add	r3, r2
 800cf10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf14:	691a      	ldr	r2, [r3, #16]
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf1e:	69b9      	ldr	r1, [r7, #24]
 800cf20:	0148      	lsls	r0, r1, #5
 800cf22:	69f9      	ldr	r1, [r7, #28]
 800cf24:	4401      	add	r1, r0
 800cf26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	78db      	ldrb	r3, [r3, #3]
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d11f      	bne.n	800cf76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	015a      	lsls	r2, r3, #5
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	0151      	lsls	r1, r2, #5
 800cf48:	69fa      	ldr	r2, [r7, #28]
 800cf4a:	440a      	add	r2, r1
 800cf4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cf54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	015a      	lsls	r2, r3, #5
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	0151      	lsls	r1, r2, #5
 800cf68:	69fa      	ldr	r2, [r7, #28]
 800cf6a:	440a      	add	r2, r1
 800cf6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d14b      	bne.n	800d014 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d009      	beq.n	800cf98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf90:	461a      	mov	r2, r3
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	78db      	ldrb	r3, [r3, #3]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d128      	bne.n	800cff2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d110      	bne.n	800cfd2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	015a      	lsls	r2, r3, #5
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	69ba      	ldr	r2, [r7, #24]
 800cfc0:	0151      	lsls	r1, r2, #5
 800cfc2:	69fa      	ldr	r2, [r7, #28]
 800cfc4:	440a      	add	r2, r1
 800cfc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfce:	6013      	str	r3, [r2, #0]
 800cfd0:	e00f      	b.n	800cff2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	015a      	lsls	r2, r3, #5
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	4413      	add	r3, r2
 800cfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	69ba      	ldr	r2, [r7, #24]
 800cfe2:	0151      	lsls	r1, r2, #5
 800cfe4:	69fa      	ldr	r2, [r7, #28]
 800cfe6:	440a      	add	r2, r1
 800cfe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cff0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	015a      	lsls	r2, r3, #5
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	4413      	add	r3, r2
 800cffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	69ba      	ldr	r2, [r7, #24]
 800d002:	0151      	lsls	r1, r2, #5
 800d004:	69fa      	ldr	r2, [r7, #28]
 800d006:	440a      	add	r2, r1
 800d008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d00c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d010:	6013      	str	r3, [r2, #0]
 800d012:	e133      	b.n	800d27c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	015a      	lsls	r2, r3, #5
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	4413      	add	r3, r2
 800d01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	0151      	lsls	r1, r2, #5
 800d026:	69fa      	ldr	r2, [r7, #28]
 800d028:	440a      	add	r2, r1
 800d02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d02e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d032:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	78db      	ldrb	r3, [r3, #3]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d015      	beq.n	800d068 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	2b00      	cmp	r3, #0
 800d042:	f000 811b 	beq.w	800d27c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d04c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	f003 030f 	and.w	r3, r3, #15
 800d056:	2101      	movs	r1, #1
 800d058:	fa01 f303 	lsl.w	r3, r1, r3
 800d05c:	69f9      	ldr	r1, [r7, #28]
 800d05e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d062:	4313      	orrs	r3, r2
 800d064:	634b      	str	r3, [r1, #52]	; 0x34
 800d066:	e109      	b.n	800d27c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d074:	2b00      	cmp	r3, #0
 800d076:	d110      	bne.n	800d09a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	015a      	lsls	r2, r3, #5
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	4413      	add	r3, r2
 800d080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	69ba      	ldr	r2, [r7, #24]
 800d088:	0151      	lsls	r1, r2, #5
 800d08a:	69fa      	ldr	r2, [r7, #28]
 800d08c:	440a      	add	r2, r1
 800d08e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d092:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	e00f      	b.n	800d0ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	015a      	lsls	r2, r3, #5
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	69ba      	ldr	r2, [r7, #24]
 800d0aa:	0151      	lsls	r1, r2, #5
 800d0ac:	69fa      	ldr	r2, [r7, #28]
 800d0ae:	440a      	add	r2, r1
 800d0b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	68d9      	ldr	r1, [r3, #12]
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	781a      	ldrb	r2, [r3, #0]
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	695b      	ldr	r3, [r3, #20]
 800d0c6:	b298      	uxth	r0, r3
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f000 fa38 	bl	800d544 <USB_WritePacket>
 800d0d4:	e0d2      	b.n	800d27c <USB_EPStartXfer+0x480>
 800d0d6:	bf00      	nop
 800d0d8:	e007ffff 	.word	0xe007ffff
 800d0dc:	fff80000 	.word	0xfff80000
 800d0e0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	015a      	lsls	r2, r3, #5
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f0:	691a      	ldr	r2, [r3, #16]
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	0159      	lsls	r1, r3, #5
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	440b      	add	r3, r1
 800d0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0fe:	4619      	mov	r1, r3
 800d100:	4b61      	ldr	r3, [pc, #388]	; (800d288 <USB_EPStartXfer+0x48c>)
 800d102:	4013      	ands	r3, r2
 800d104:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	015a      	lsls	r2, r3, #5
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d112:	691a      	ldr	r2, [r3, #16]
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	0159      	lsls	r1, r3, #5
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	440b      	add	r3, r1
 800d11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d120:	4619      	mov	r1, r3
 800d122:	4b5a      	ldr	r3, [pc, #360]	; (800d28c <USB_EPStartXfer+0x490>)
 800d124:	4013      	ands	r3, r2
 800d126:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d123      	bne.n	800d178 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	015a      	lsls	r2, r3, #5
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	4413      	add	r3, r2
 800d138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13c:	691a      	ldr	r2, [r3, #16]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d146:	69b9      	ldr	r1, [r7, #24]
 800d148:	0148      	lsls	r0, r1, #5
 800d14a:	69f9      	ldr	r1, [r7, #28]
 800d14c:	4401      	add	r1, r0
 800d14e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d152:	4313      	orrs	r3, r2
 800d154:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	69ba      	ldr	r2, [r7, #24]
 800d166:	0151      	lsls	r1, r2, #5
 800d168:	69fa      	ldr	r2, [r7, #28]
 800d16a:	440a      	add	r2, r1
 800d16c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d174:	6113      	str	r3, [r2, #16]
 800d176:	e033      	b.n	800d1e0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	695a      	ldr	r2, [r3, #20]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	4413      	add	r3, r2
 800d182:	1e5a      	subs	r2, r3, #1
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	fbb2 f3f3 	udiv	r3, r2, r3
 800d18c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	015a      	lsls	r2, r3, #5
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	4413      	add	r3, r2
 800d196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d19a:	691a      	ldr	r2, [r3, #16]
 800d19c:	8afb      	ldrh	r3, [r7, #22]
 800d19e:	04d9      	lsls	r1, r3, #19
 800d1a0:	4b3b      	ldr	r3, [pc, #236]	; (800d290 <USB_EPStartXfer+0x494>)
 800d1a2:	400b      	ands	r3, r1
 800d1a4:	69b9      	ldr	r1, [r7, #24]
 800d1a6:	0148      	lsls	r0, r1, #5
 800d1a8:	69f9      	ldr	r1, [r7, #28]
 800d1aa:	4401      	add	r1, r0
 800d1ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	015a      	lsls	r2, r3, #5
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c0:	691a      	ldr	r2, [r3, #16]
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	8af9      	ldrh	r1, [r7, #22]
 800d1c8:	fb01 f303 	mul.w	r3, r1, r3
 800d1cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1d0:	69b9      	ldr	r1, [r7, #24]
 800d1d2:	0148      	lsls	r0, r1, #5
 800d1d4:	69f9      	ldr	r1, [r7, #28]
 800d1d6:	4401      	add	r1, r0
 800d1d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d1e0:	79fb      	ldrb	r3, [r7, #7]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d10d      	bne.n	800d202 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d009      	beq.n	800d202 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	68d9      	ldr	r1, [r3, #12]
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	015a      	lsls	r2, r3, #5
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1fe:	460a      	mov	r2, r1
 800d200:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	78db      	ldrb	r3, [r3, #3]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d128      	bne.n	800d25c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d216:	2b00      	cmp	r3, #0
 800d218:	d110      	bne.n	800d23c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	015a      	lsls	r2, r3, #5
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	4413      	add	r3, r2
 800d222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	69ba      	ldr	r2, [r7, #24]
 800d22a:	0151      	lsls	r1, r2, #5
 800d22c:	69fa      	ldr	r2, [r7, #28]
 800d22e:	440a      	add	r2, r1
 800d230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d234:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d238:	6013      	str	r3, [r2, #0]
 800d23a:	e00f      	b.n	800d25c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	015a      	lsls	r2, r3, #5
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	4413      	add	r3, r2
 800d244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	69ba      	ldr	r2, [r7, #24]
 800d24c:	0151      	lsls	r1, r2, #5
 800d24e:	69fa      	ldr	r2, [r7, #28]
 800d250:	440a      	add	r2, r1
 800d252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d25a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	69ba      	ldr	r2, [r7, #24]
 800d26c:	0151      	lsls	r1, r2, #5
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	440a      	add	r2, r1
 800d272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d276:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d27a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3720      	adds	r7, #32
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	fff80000 	.word	0xfff80000
 800d28c:	e007ffff 	.word	0xe007ffff
 800d290:	1ff80000 	.word	0x1ff80000

0800d294 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	785b      	ldrb	r3, [r3, #1]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	f040 80cd 	bne.w	800d450 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d132      	bne.n	800d324 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	015a      	lsls	r2, r3, #5
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ca:	691a      	ldr	r2, [r3, #16]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	0159      	lsls	r1, r3, #5
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	440b      	add	r3, r1
 800d2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d8:	4619      	mov	r1, r3
 800d2da:	4b98      	ldr	r3, [pc, #608]	; (800d53c <USB_EP0StartXfer+0x2a8>)
 800d2dc:	4013      	ands	r3, r2
 800d2de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	015a      	lsls	r2, r3, #5
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	693a      	ldr	r2, [r7, #16]
 800d2f0:	0151      	lsls	r1, r2, #5
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	440a      	add	r2, r1
 800d2f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	015a      	lsls	r2, r3, #5
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	4413      	add	r3, r2
 800d308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d30c:	691a      	ldr	r2, [r3, #16]
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	0159      	lsls	r1, r3, #5
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	440b      	add	r3, r1
 800d316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d31a:	4619      	mov	r1, r3
 800d31c:	4b88      	ldr	r3, [pc, #544]	; (800d540 <USB_EP0StartXfer+0x2ac>)
 800d31e:	4013      	ands	r3, r2
 800d320:	610b      	str	r3, [r1, #16]
 800d322:	e04e      	b.n	800d3c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	015a      	lsls	r2, r3, #5
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	4413      	add	r3, r2
 800d32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d330:	691a      	ldr	r2, [r3, #16]
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	0159      	lsls	r1, r3, #5
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	440b      	add	r3, r1
 800d33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d33e:	4619      	mov	r1, r3
 800d340:	4b7f      	ldr	r3, [pc, #508]	; (800d540 <USB_EP0StartXfer+0x2ac>)
 800d342:	4013      	ands	r3, r2
 800d344:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d352:	691a      	ldr	r2, [r3, #16]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	0159      	lsls	r1, r3, #5
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	440b      	add	r3, r1
 800d35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d360:	4619      	mov	r1, r3
 800d362:	4b76      	ldr	r3, [pc, #472]	; (800d53c <USB_EP0StartXfer+0x2a8>)
 800d364:	4013      	ands	r3, r2
 800d366:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	695a      	ldr	r2, [r3, #20]
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	429a      	cmp	r2, r3
 800d372:	d903      	bls.n	800d37c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	689a      	ldr	r2, [r3, #8]
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	015a      	lsls	r2, r3, #5
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	4413      	add	r3, r2
 800d384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	0151      	lsls	r1, r2, #5
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	440a      	add	r2, r1
 800d392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d39a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	015a      	lsls	r2, r3, #5
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a8:	691a      	ldr	r2, [r3, #16]
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d3b2:	6939      	ldr	r1, [r7, #16]
 800d3b4:	0148      	lsls	r0, r1, #5
 800d3b6:	6979      	ldr	r1, [r7, #20]
 800d3b8:	4401      	add	r1, r0
 800d3ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d3c2:	79fb      	ldrb	r3, [r7, #7]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d11e      	bne.n	800d406 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d009      	beq.n	800d3e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	015a      	lsls	r2, r3, #5
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3dc:	461a      	mov	r2, r3
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	015a      	lsls	r2, r3, #5
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	0151      	lsls	r1, r2, #5
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	440a      	add	r2, r1
 800d3fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d402:	6013      	str	r3, [r2, #0]
 800d404:	e092      	b.n	800d52c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	015a      	lsls	r2, r3, #5
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	4413      	add	r3, r2
 800d40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	693a      	ldr	r2, [r7, #16]
 800d416:	0151      	lsls	r1, r2, #5
 800d418:	697a      	ldr	r2, [r7, #20]
 800d41a:	440a      	add	r2, r1
 800d41c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d420:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d424:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d07e      	beq.n	800d52c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	f003 030f 	and.w	r3, r3, #15
 800d43e:	2101      	movs	r1, #1
 800d440:	fa01 f303 	lsl.w	r3, r1, r3
 800d444:	6979      	ldr	r1, [r7, #20]
 800d446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d44a:	4313      	orrs	r3, r2
 800d44c:	634b      	str	r3, [r1, #52]	; 0x34
 800d44e:	e06d      	b.n	800d52c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	4413      	add	r3, r2
 800d458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d45c:	691a      	ldr	r2, [r3, #16]
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	0159      	lsls	r1, r3, #5
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	440b      	add	r3, r1
 800d466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d46a:	4619      	mov	r1, r3
 800d46c:	4b34      	ldr	r3, [pc, #208]	; (800d540 <USB_EP0StartXfer+0x2ac>)
 800d46e:	4013      	ands	r3, r2
 800d470:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	015a      	lsls	r2, r3, #5
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	4413      	add	r3, r2
 800d47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d47e:	691a      	ldr	r2, [r3, #16]
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	0159      	lsls	r1, r3, #5
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	440b      	add	r3, r1
 800d488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d48c:	4619      	mov	r1, r3
 800d48e:	4b2b      	ldr	r3, [pc, #172]	; (800d53c <USB_EP0StartXfer+0x2a8>)
 800d490:	4013      	ands	r3, r2
 800d492:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	689a      	ldr	r2, [r3, #8]
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	693a      	ldr	r2, [r7, #16]
 800d4b4:	0151      	lsls	r1, r2, #5
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	440a      	add	r2, r1
 800d4ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d0:	691a      	ldr	r2, [r3, #16]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4da:	6939      	ldr	r1, [r7, #16]
 800d4dc:	0148      	lsls	r0, r1, #5
 800d4de:	6979      	ldr	r1, [r7, #20]
 800d4e0:	4401      	add	r1, r0
 800d4e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d4ea:	79fb      	ldrb	r3, [r7, #7]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d10d      	bne.n	800d50c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d009      	beq.n	800d50c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	68d9      	ldr	r1, [r3, #12]
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	015a      	lsls	r2, r3, #5
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	4413      	add	r3, r2
 800d504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d508:	460a      	mov	r2, r1
 800d50a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	015a      	lsls	r2, r3, #5
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	4413      	add	r3, r2
 800d514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	0151      	lsls	r1, r2, #5
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	440a      	add	r2, r1
 800d522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d526:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d52a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	371c      	adds	r7, #28
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	e007ffff 	.word	0xe007ffff
 800d540:	fff80000 	.word	0xfff80000

0800d544 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d544:	b480      	push	{r7}
 800d546:	b089      	sub	sp, #36	; 0x24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	4611      	mov	r1, r2
 800d550:	461a      	mov	r2, r3
 800d552:	460b      	mov	r3, r1
 800d554:	71fb      	strb	r3, [r7, #7]
 800d556:	4613      	mov	r3, r2
 800d558:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d562:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d566:	2b00      	cmp	r3, #0
 800d568:	d11a      	bne.n	800d5a0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d56a:	88bb      	ldrh	r3, [r7, #4]
 800d56c:	3303      	adds	r3, #3
 800d56e:	089b      	lsrs	r3, r3, #2
 800d570:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d572:	2300      	movs	r3, #0
 800d574:	61bb      	str	r3, [r7, #24]
 800d576:	e00f      	b.n	800d598 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d578:	79fb      	ldrb	r3, [r7, #7]
 800d57a:	031a      	lsls	r2, r3, #12
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	4413      	add	r3, r2
 800d580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d584:	461a      	mov	r2, r3
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	3304      	adds	r3, #4
 800d590:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	3301      	adds	r3, #1
 800d596:	61bb      	str	r3, [r7, #24]
 800d598:	69ba      	ldr	r2, [r7, #24]
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d3eb      	bcc.n	800d578 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3724      	adds	r7, #36	; 0x24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b089      	sub	sp, #36	; 0x24
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	60f8      	str	r0, [r7, #12]
 800d5b6:	60b9      	str	r1, [r7, #8]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d5c4:	88fb      	ldrh	r3, [r7, #6]
 800d5c6:	3303      	adds	r3, #3
 800d5c8:	089b      	lsrs	r3, r3, #2
 800d5ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	61bb      	str	r3, [r7, #24]
 800d5d0:	e00b      	b.n	800d5ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	601a      	str	r2, [r3, #0]
    pDest++;
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	61bb      	str	r3, [r7, #24]
 800d5ea:	69ba      	ldr	r2, [r7, #24]
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d3ef      	bcc.n	800d5d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d5f2:	69fb      	ldr	r3, [r7, #28]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3724      	adds	r7, #36	; 0x24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d600:	b480      	push	{r7}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	785b      	ldrb	r3, [r3, #1]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d12c      	bne.n	800d676 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	015a      	lsls	r2, r3, #5
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	4413      	add	r3, r2
 800d624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	db12      	blt.n	800d654 <USB_EPSetStall+0x54>
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00f      	beq.n	800d654 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	015a      	lsls	r2, r3, #5
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	4413      	add	r3, r2
 800d63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	0151      	lsls	r1, r2, #5
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	440a      	add	r2, r1
 800d64a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d64e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d652:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	015a      	lsls	r2, r3, #5
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	4413      	add	r3, r2
 800d65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	0151      	lsls	r1, r2, #5
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	440a      	add	r2, r1
 800d66a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d66e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	e02b      	b.n	800d6ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	015a      	lsls	r2, r3, #5
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	4413      	add	r3, r2
 800d67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	db12      	blt.n	800d6ae <USB_EPSetStall+0xae>
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00f      	beq.n	800d6ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	015a      	lsls	r2, r3, #5
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	4413      	add	r3, r2
 800d696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	0151      	lsls	r1, r2, #5
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	440a      	add	r2, r1
 800d6a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d6ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	0151      	lsls	r1, r2, #5
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	440a      	add	r2, r1
 800d6c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	785b      	ldrb	r3, [r3, #1]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d128      	bne.n	800d74a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	015a      	lsls	r2, r3, #5
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	4413      	add	r3, r2
 800d700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	0151      	lsls	r1, r2, #5
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	440a      	add	r2, r1
 800d70e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d716:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	78db      	ldrb	r3, [r3, #3]
 800d71c:	2b03      	cmp	r3, #3
 800d71e:	d003      	beq.n	800d728 <USB_EPClearStall+0x4c>
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	78db      	ldrb	r3, [r3, #3]
 800d724:	2b02      	cmp	r3, #2
 800d726:	d138      	bne.n	800d79a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	015a      	lsls	r2, r3, #5
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	4413      	add	r3, r2
 800d730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68ba      	ldr	r2, [r7, #8]
 800d738:	0151      	lsls	r1, r2, #5
 800d73a:	68fa      	ldr	r2, [r7, #12]
 800d73c:	440a      	add	r2, r1
 800d73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d746:	6013      	str	r3, [r2, #0]
 800d748:	e027      	b.n	800d79a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	015a      	lsls	r2, r3, #5
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	4413      	add	r3, r2
 800d752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	0151      	lsls	r1, r2, #5
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	440a      	add	r2, r1
 800d760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d764:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d768:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	78db      	ldrb	r3, [r3, #3]
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d003      	beq.n	800d77a <USB_EPClearStall+0x9e>
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	78db      	ldrb	r3, [r3, #3]
 800d776:	2b02      	cmp	r3, #2
 800d778:	d10f      	bne.n	800d79a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	015a      	lsls	r2, r3, #5
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	4413      	add	r3, r2
 800d782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	0151      	lsls	r1, r2, #5
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	440a      	add	r2, r1
 800d790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d798:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3714      	adds	r7, #20
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d7ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	78fb      	ldrb	r3, [r7, #3]
 800d7d6:	011b      	lsls	r3, r3, #4
 800d7d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d7dc:	68f9      	ldr	r1, [r7, #12]
 800d7de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3714      	adds	r7, #20
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d80e:	f023 0302 	bic.w	r3, r3, #2
 800d812:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d814:	2003      	movs	r0, #3
 800d816:	f7f4 f929 	bl	8001a6c <HAL_Delay>

  return HAL_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d83e:	f043 0302 	orr.w	r3, r3, #2
 800d842:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d844:	2003      	movs	r0, #3
 800d846:	f7f4 f911 	bl	8001a6c <HAL_Delay>

  return HAL_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	699b      	ldr	r3, [r3, #24]
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	4013      	ands	r3, r2
 800d86a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d86c:	68fb      	ldr	r3, [r7, #12]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3714      	adds	r7, #20
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr

0800d87a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d87a:	b480      	push	{r7}
 800d87c:	b085      	sub	sp, #20
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d88c:	699b      	ldr	r3, [r3, #24]
 800d88e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d896:	69db      	ldr	r3, [r3, #28]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	4013      	ands	r3, r2
 800d89c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	0c1b      	lsrs	r3, r3, #16
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ae:	b480      	push	{r7}
 800d8b0:	b085      	sub	sp, #20
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8c0:	699b      	ldr	r3, [r3, #24]
 800d8c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ca:	69db      	ldr	r3, [r3, #28]
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	4013      	ands	r3, r2
 800d8d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	b29b      	uxth	r3, r3
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8e2:	b480      	push	{r7}
 800d8e4:	b085      	sub	sp, #20
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d8f2:	78fb      	ldrb	r3, [r7, #3]
 800d8f4:	015a      	lsls	r2, r3, #5
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d908:	695b      	ldr	r3, [r3, #20]
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	4013      	ands	r3, r2
 800d90e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d910:	68bb      	ldr	r3, [r7, #8]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3714      	adds	r7, #20
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d91e:	b480      	push	{r7}
 800d920:	b087      	sub	sp, #28
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	460b      	mov	r3, r1
 800d928:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d934:	691b      	ldr	r3, [r3, #16]
 800d936:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d940:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d942:	78fb      	ldrb	r3, [r7, #3]
 800d944:	f003 030f 	and.w	r3, r3, #15
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	fa22 f303 	lsr.w	r3, r2, r3
 800d94e:	01db      	lsls	r3, r3, #7
 800d950:	b2db      	uxtb	r3, r3
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	4313      	orrs	r3, r2
 800d956:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d958:	78fb      	ldrb	r3, [r7, #3]
 800d95a:	015a      	lsls	r2, r3, #5
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	4413      	add	r3, r2
 800d960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	693a      	ldr	r2, [r7, #16]
 800d968:	4013      	ands	r3, r2
 800d96a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d96c:	68bb      	ldr	r3, [r7, #8]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	371c      	adds	r7, #28
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d97a:	b480      	push	{r7}
 800d97c:	b083      	sub	sp, #12
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	695b      	ldr	r3, [r3, #20]
 800d986:	f003 0301 	and.w	r3, r3, #1
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
	...

0800d998 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <USB_ActivateSetup+0x44>)
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	fffff800 	.word	0xfffff800

0800d9e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	607a      	str	r2, [r7, #4]
 800d9ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	333c      	adds	r3, #60	; 0x3c
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	4a26      	ldr	r2, [pc, #152]	; (800da98 <USB_EP0_OutStart+0xb8>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d90a      	bls.n	800da1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da14:	d101      	bne.n	800da1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800da16:	2300      	movs	r3, #0
 800da18:	e037      	b.n	800da8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da20:	461a      	mov	r2, r3
 800da22:	2300      	movs	r3, #0
 800da24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	697a      	ldr	r2, [r7, #20]
 800da30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	697a      	ldr	r2, [r7, #20]
 800da44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da48:	f043 0318 	orr.w	r3, r3, #24
 800da4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800da60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800da62:	7afb      	ldrb	r3, [r7, #11]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d10f      	bne.n	800da88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da6e:	461a      	mov	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	697a      	ldr	r2, [r7, #20]
 800da7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800da86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	371c      	adds	r7, #28
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	4f54300a 	.word	0x4f54300a

0800da9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800daa4:	2300      	movs	r3, #0
 800daa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	3301      	adds	r3, #1
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	4a13      	ldr	r2, [pc, #76]	; (800db00 <USB_CoreReset+0x64>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d901      	bls.n	800daba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dab6:	2303      	movs	r3, #3
 800dab8:	e01b      	b.n	800daf2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	daf2      	bge.n	800daa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dac2:	2300      	movs	r3, #0
 800dac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	f043 0201 	orr.w	r2, r3, #1
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3301      	adds	r3, #1
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	4a09      	ldr	r2, [pc, #36]	; (800db00 <USB_CoreReset+0x64>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d901      	bls.n	800dae4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dae0:	2303      	movs	r3, #3
 800dae2:	e006      	b.n	800daf2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	f003 0301 	and.w	r3, r3, #1
 800daec:	2b01      	cmp	r3, #1
 800daee:	d0f0      	beq.n	800dad2 <USB_CoreReset+0x36>

  return HAL_OK;
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	00030d40 	.word	0x00030d40

0800db04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800db08:	4904      	ldr	r1, [pc, #16]	; (800db1c <MX_FATFS_Init+0x18>)
 800db0a:	4805      	ldr	r0, [pc, #20]	; (800db20 <MX_FATFS_Init+0x1c>)
 800db0c:	f001 fdc0 	bl	800f690 <FATFS_LinkDriver>
 800db10:	4603      	mov	r3, r0
 800db12:	461a      	mov	r2, r3
 800db14:	4b03      	ldr	r3, [pc, #12]	; (800db24 <MX_FATFS_Init+0x20>)
 800db16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800db18:	bf00      	nop
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	2400064c 	.word	0x2400064c
 800db20:	0801147c 	.word	0x0801147c
 800db24:	24000648 	.word	0x24000648

0800db28 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800db32:	f000 f879 	bl	800dc28 <BSP_SD_IsDetected>
 800db36:	4603      	mov	r3, r0
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d001      	beq.n	800db40 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800db3c:	2302      	movs	r3, #2
 800db3e:	e012      	b.n	800db66 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800db40:	480b      	ldr	r0, [pc, #44]	; (800db70 <BSP_SD_Init+0x48>)
 800db42:	f7fa ff8b 	bl	8008a5c <HAL_SD_Init>
 800db46:	4603      	mov	r3, r0
 800db48:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800db4a:	79fb      	ldrb	r3, [r7, #7]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d109      	bne.n	800db64 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800db50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800db54:	4806      	ldr	r0, [pc, #24]	; (800db70 <BSP_SD_Init+0x48>)
 800db56:	f7fb fe4f 	bl	80097f8 <HAL_SD_ConfigWideBusOperation>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800db64:	79fb      	ldrb	r3, [r7, #7]
}
 800db66:	4618      	mov	r0, r3
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	24000328 	.word	0x24000328

0800db74 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b088      	sub	sp, #32
 800db78:	af02      	add	r7, sp, #8
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800db82:	2300      	movs	r3, #0
 800db84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	68f9      	ldr	r1, [r7, #12]
 800db90:	4806      	ldr	r0, [pc, #24]	; (800dbac <BSP_SD_ReadBlocks+0x38>)
 800db92:	f7fb f887 	bl	8008ca4 <HAL_SD_ReadBlocks>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	24000328 	.word	0x24000328

0800dbb0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b088      	sub	sp, #32
 800dbb4:	af02      	add	r7, sp, #8
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
 800dbbc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	68f9      	ldr	r1, [r7, #12]
 800dbcc:	4806      	ldr	r0, [pc, #24]	; (800dbe8 <BSP_SD_WriteBlocks+0x38>)
 800dbce:	f7fb f9f3 	bl	8008fb8 <HAL_SD_WriteBlocks>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	24000328 	.word	0x24000328

0800dbec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dbf0:	4805      	ldr	r0, [pc, #20]	; (800dc08 <BSP_SD_GetCardState+0x1c>)
 800dbf2:	f7fb feab 	bl	800994c <HAL_SD_GetCardState>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b04      	cmp	r3, #4
 800dbfa:	bf14      	ite	ne
 800dbfc:	2301      	movne	r3, #1
 800dbfe:	2300      	moveq	r3, #0
 800dc00:	b2db      	uxtb	r3, r3
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	24000328 	.word	0x24000328

0800dc0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dc14:	6879      	ldr	r1, [r7, #4]
 800dc16:	4803      	ldr	r0, [pc, #12]	; (800dc24 <BSP_SD_GetCardInfo+0x18>)
 800dc18:	f7fb fdc2 	bl	80097a0 <HAL_SD_GetCardInfo>
}
 800dc1c:	bf00      	nop
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	24000328 	.word	0x24000328

0800dc28 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dc32:	f000 f80b 	bl	800dc4c <BSP_PlatformIsDetected>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d101      	bne.n	800dc40 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dc40:	79fb      	ldrb	r3, [r7, #7]
 800dc42:	b2db      	uxtb	r3, r3
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dc52:	2301      	movs	r3, #1
 800dc54:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dc56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dc5a:	4806      	ldr	r0, [pc, #24]	; (800dc74 <BSP_PlatformIsDetected+0x28>)
 800dc5c:	f7f6 fe34 	bl	80048c8 <HAL_GPIO_ReadPin>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dc66:	2300      	movs	r3, #0
 800dc68:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dc6a:	79fb      	ldrb	r3, [r7, #7]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	58020000 	.word	0x58020000

0800dc78 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dc82:	4b0b      	ldr	r3, [pc, #44]	; (800dcb0 <SD_CheckStatus+0x38>)
 800dc84:	2201      	movs	r2, #1
 800dc86:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dc88:	f7ff ffb0 	bl	800dbec <BSP_SD_GetCardState>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d107      	bne.n	800dca2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dc92:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <SD_CheckStatus+0x38>)
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	f023 0301 	bic.w	r3, r3, #1
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	4b04      	ldr	r3, [pc, #16]	; (800dcb0 <SD_CheckStatus+0x38>)
 800dca0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dca2:	4b03      	ldr	r3, [pc, #12]	; (800dcb0 <SD_CheckStatus+0x38>)
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	b2db      	uxtb	r3, r3
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	2400000d 	.word	0x2400000d

0800dcb4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dcbe:	4b0b      	ldr	r3, [pc, #44]	; (800dcec <SD_initialize+0x38>)
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dcc4:	f7ff ff30 	bl	800db28 <BSP_SD_Init>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d107      	bne.n	800dcde <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff ffd1 	bl	800dc78 <SD_CheckStatus>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4b04      	ldr	r3, [pc, #16]	; (800dcec <SD_initialize+0x38>)
 800dcdc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dcde:	4b03      	ldr	r3, [pc, #12]	; (800dcec <SD_initialize+0x38>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	b2db      	uxtb	r3, r3
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	2400000d 	.word	0x2400000d

0800dcf0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7ff ffbb 	bl	800dc78 <SD_CheckStatus>
 800dd02:	4603      	mov	r3, r0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60b9      	str	r1, [r7, #8]
 800dd14:	607a      	str	r2, [r7, #4]
 800dd16:	603b      	str	r3, [r7, #0]
 800dd18:	4603      	mov	r3, r0
 800dd1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800dd20:	f04f 33ff 	mov.w	r3, #4294967295
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	68b8      	ldr	r0, [r7, #8]
 800dd2a:	f7ff ff23 	bl	800db74 <BSP_SD_ReadBlocks>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d107      	bne.n	800dd44 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dd34:	bf00      	nop
 800dd36:	f7ff ff59 	bl	800dbec <BSP_SD_GetCardState>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1fa      	bne.n	800dd36 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b086      	sub	sp, #24
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	603b      	str	r3, [r7, #0]
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800dd62:	f04f 33ff 	mov.w	r3, #4294967295
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	6879      	ldr	r1, [r7, #4]
 800dd6a:	68b8      	ldr	r0, [r7, #8]
 800dd6c:	f7ff ff20 	bl	800dbb0 <BSP_SD_WriteBlocks>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d107      	bne.n	800dd86 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dd76:	bf00      	nop
 800dd78:	f7ff ff38 	bl	800dbec <BSP_SD_GetCardState>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1fa      	bne.n	800dd78 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dd86:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3718      	adds	r7, #24
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b08c      	sub	sp, #48	; 0x30
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	4603      	mov	r3, r0
 800dd98:	603a      	str	r2, [r7, #0]
 800dd9a:	71fb      	strb	r3, [r7, #7]
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dda6:	4b25      	ldr	r3, [pc, #148]	; (800de3c <SD_ioctl+0xac>)
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	f003 0301 	and.w	r3, r3, #1
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d001      	beq.n	800ddb8 <SD_ioctl+0x28>
 800ddb4:	2303      	movs	r3, #3
 800ddb6:	e03c      	b.n	800de32 <SD_ioctl+0xa2>

  switch (cmd)
 800ddb8:	79bb      	ldrb	r3, [r7, #6]
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d834      	bhi.n	800de28 <SD_ioctl+0x98>
 800ddbe:	a201      	add	r2, pc, #4	; (adr r2, 800ddc4 <SD_ioctl+0x34>)
 800ddc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc4:	0800ddd5 	.word	0x0800ddd5
 800ddc8:	0800dddd 	.word	0x0800dddd
 800ddcc:	0800ddf5 	.word	0x0800ddf5
 800ddd0:	0800de0f 	.word	0x0800de0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddda:	e028      	b.n	800de2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dddc:	f107 0308 	add.w	r3, r7, #8
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff ff13 	bl	800dc0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dde6:	6a3a      	ldr	r2, [r7, #32]
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ddf2:	e01c      	b.n	800de2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ddf4:	f107 0308 	add.w	r3, r7, #8
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7ff ff07 	bl	800dc0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	b29a      	uxth	r2, r3
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800de06:	2300      	movs	r3, #0
 800de08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de0c:	e00f      	b.n	800de2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de0e:	f107 0308 	add.w	r3, r7, #8
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff fefa 	bl	800dc0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1a:	0a5a      	lsrs	r2, r3, #9
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de20:	2300      	movs	r3, #0
 800de22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de26:	e002      	b.n	800de2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800de28:	2304      	movs	r3, #4
 800de2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800de2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800de32:	4618      	mov	r0, r3
 800de34:	3730      	adds	r7, #48	; 0x30
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	2400000d 	.word	0x2400000d

0800de40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	460b      	mov	r3, r1
 800de4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800de50:	f002 f936 	bl	80100c0 <malloc>
 800de54:	4603      	mov	r3, r0
 800de56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d105      	bne.n	800de6a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800de66:	2302      	movs	r3, #2
 800de68:	e066      	b.n	800df38 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	7c1b      	ldrb	r3, [r3, #16]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d119      	bne.n	800deae <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800de7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de7e:	2202      	movs	r2, #2
 800de80:	2181      	movs	r1, #129	; 0x81
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f001 ffa3 	bl	800fdce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800de8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de92:	2202      	movs	r2, #2
 800de94:	2101      	movs	r1, #1
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f001 ff99 	bl	800fdce <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2201      	movs	r2, #1
 800dea0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2210      	movs	r2, #16
 800dea8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800deac:	e016      	b.n	800dedc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800deae:	2340      	movs	r3, #64	; 0x40
 800deb0:	2202      	movs	r2, #2
 800deb2:	2181      	movs	r1, #129	; 0x81
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f001 ff8a 	bl	800fdce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2201      	movs	r2, #1
 800debe:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dec0:	2340      	movs	r3, #64	; 0x40
 800dec2:	2202      	movs	r2, #2
 800dec4:	2101      	movs	r1, #1
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f001 ff81 	bl	800fdce <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2210      	movs	r2, #16
 800ded8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dedc:	2308      	movs	r3, #8
 800dede:	2203      	movs	r2, #3
 800dee0:	2182      	movs	r1, #130	; 0x82
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f001 ff73 	bl	800fdce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7c1b      	ldrb	r3, [r3, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d109      	bne.n	800df26 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df1c:	2101      	movs	r1, #1
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f002 f844 	bl	800ffac <USBD_LL_PrepareReceive>
 800df24:	e007      	b.n	800df36 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df2c:	2340      	movs	r3, #64	; 0x40
 800df2e:	2101      	movs	r1, #1
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f002 f83b 	bl	800ffac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800df4c:	2300      	movs	r3, #0
 800df4e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800df50:	2181      	movs	r1, #129	; 0x81
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f001 ff61 	bl	800fe1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800df5e:	2101      	movs	r1, #1
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f001 ff5a 	bl	800fe1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800df6e:	2182      	movs	r1, #130	; 0x82
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f001 ff52 	bl	800fe1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f002 f895 	bl	80100d0 <free>
    pdev->pClassData = NULL;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800dfae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfc8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d03a      	beq.n	800e058 <USBD_CDC_Setup+0xa0>
 800dfe2:	2b20      	cmp	r3, #32
 800dfe4:	f040 8097 	bne.w	800e116 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	88db      	ldrh	r3, [r3, #6]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d029      	beq.n	800e044 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	b25b      	sxtb	r3, r3
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	da11      	bge.n	800e01e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e006:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	88d2      	ldrh	r2, [r2, #6]
 800e00c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e00e:	6939      	ldr	r1, [r7, #16]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	88db      	ldrh	r3, [r3, #6]
 800e014:	461a      	mov	r2, r3
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f001 fa6d 	bl	800f4f6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e01c:	e082      	b.n	800e124 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	785a      	ldrb	r2, [r3, #1]
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	88db      	ldrh	r3, [r3, #6]
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e034:	6939      	ldr	r1, [r7, #16]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	88db      	ldrh	r3, [r3, #6]
 800e03a:	461a      	mov	r2, r3
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f001 fa86 	bl	800f54e <USBD_CtlPrepareRx>
    break;
 800e042:	e06f      	b.n	800e124 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	7850      	ldrb	r0, [r2, #1]
 800e050:	2200      	movs	r2, #0
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	4798      	blx	r3
    break;
 800e056:	e065      	b.n	800e124 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	785b      	ldrb	r3, [r3, #1]
 800e05c:	2b0b      	cmp	r3, #11
 800e05e:	d84f      	bhi.n	800e100 <USBD_CDC_Setup+0x148>
 800e060:	a201      	add	r2, pc, #4	; (adr r2, 800e068 <USBD_CDC_Setup+0xb0>)
 800e062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e066:	bf00      	nop
 800e068:	0800e099 	.word	0x0800e099
 800e06c:	0800e10f 	.word	0x0800e10f
 800e070:	0800e101 	.word	0x0800e101
 800e074:	0800e101 	.word	0x0800e101
 800e078:	0800e101 	.word	0x0800e101
 800e07c:	0800e101 	.word	0x0800e101
 800e080:	0800e101 	.word	0x0800e101
 800e084:	0800e101 	.word	0x0800e101
 800e088:	0800e101 	.word	0x0800e101
 800e08c:	0800e101 	.word	0x0800e101
 800e090:	0800e0c1 	.word	0x0800e0c1
 800e094:	0800e0e9 	.word	0x0800e0e9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d107      	bne.n	800e0b2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e0a2:	f107 030c 	add.w	r3, r7, #12
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f001 fa23 	bl	800f4f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e0b0:	e030      	b.n	800e114 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f001 f9ad 	bl	800f414 <USBD_CtlError>
        ret = USBD_FAIL;
 800e0ba:	2303      	movs	r3, #3
 800e0bc:	75fb      	strb	r3, [r7, #23]
      break;
 800e0be:	e029      	b.n	800e114 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0c6:	2b03      	cmp	r3, #3
 800e0c8:	d107      	bne.n	800e0da <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e0ca:	f107 030f 	add.w	r3, r7, #15
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f001 fa0f 	bl	800f4f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e0d8:	e01c      	b.n	800e114 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e0da:	6839      	ldr	r1, [r7, #0]
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f001 f999 	bl	800f414 <USBD_CtlError>
        ret = USBD_FAIL;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	75fb      	strb	r3, [r7, #23]
      break;
 800e0e6:	e015      	b.n	800e114 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ee:	2b03      	cmp	r3, #3
 800e0f0:	d00f      	beq.n	800e112 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f001 f98d 	bl	800f414 <USBD_CtlError>
        ret = USBD_FAIL;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e0fe:	e008      	b.n	800e112 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e100:	6839      	ldr	r1, [r7, #0]
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f001 f986 	bl	800f414 <USBD_CtlError>
      ret = USBD_FAIL;
 800e108:	2303      	movs	r3, #3
 800e10a:	75fb      	strb	r3, [r7, #23]
      break;
 800e10c:	e002      	b.n	800e114 <USBD_CDC_Setup+0x15c>
      break;
 800e10e:	bf00      	nop
 800e110:	e008      	b.n	800e124 <USBD_CDC_Setup+0x16c>
      break;
 800e112:	bf00      	nop
    }
    break;
 800e114:	e006      	b.n	800e124 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e116:	6839      	ldr	r1, [r7, #0]
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f001 f97b 	bl	800f414 <USBD_CtlError>
    ret = USBD_FAIL;
 800e11e:	2303      	movs	r3, #3
 800e120:	75fb      	strb	r3, [r7, #23]
    break;
 800e122:	bf00      	nop
  }

  return (uint8_t)ret;
 800e124:	7dfb      	ldrb	r3, [r7, #23]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop

0800e130 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	460b      	mov	r3, r1
 800e13a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e14e:	2303      	movs	r3, #3
 800e150:	e049      	b.n	800e1e6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e158:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e15a:	78fa      	ldrb	r2, [r7, #3]
 800e15c:	6879      	ldr	r1, [r7, #4]
 800e15e:	4613      	mov	r3, r2
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	4413      	add	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	440b      	add	r3, r1
 800e168:	3318      	adds	r3, #24
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d029      	beq.n	800e1c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e170:	78fa      	ldrb	r2, [r7, #3]
 800e172:	6879      	ldr	r1, [r7, #4]
 800e174:	4613      	mov	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	440b      	add	r3, r1
 800e17e:	3318      	adds	r3, #24
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	78f9      	ldrb	r1, [r7, #3]
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	460b      	mov	r3, r1
 800e188:	00db      	lsls	r3, r3, #3
 800e18a:	1a5b      	subs	r3, r3, r1
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	4403      	add	r3, r0
 800e190:	3344      	adds	r3, #68	; 0x44
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	fbb2 f1f3 	udiv	r1, r2, r3
 800e198:	fb03 f301 	mul.w	r3, r3, r1
 800e19c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d110      	bne.n	800e1c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e1a2:	78fa      	ldrb	r2, [r7, #3]
 800e1a4:	6879      	ldr	r1, [r7, #4]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4413      	add	r3, r2
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	440b      	add	r3, r1
 800e1b0:	3318      	adds	r3, #24
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e1b6:	78f9      	ldrb	r1, [r7, #3]
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f001 fed4 	bl	800ff6a <USBD_LL_Transmit>
 800e1c2:	e00f      	b.n	800e1e4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e1e0:	78fa      	ldrb	r2, [r7, #3]
 800e1e2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e1e4:	2300      	movs	r3, #0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b084      	sub	sp, #16
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e200:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e20c:	2303      	movs	r3, #3
 800e20e:	e015      	b.n	800e23c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e210:	78fb      	ldrb	r3, [r7, #3]
 800e212:	4619      	mov	r1, r3
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f001 feea 	bl	800ffee <USBD_LL_GetRxDataSize>
 800e21a:	4602      	mov	r2, r0
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e236:	4611      	mov	r1, r2
 800e238:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e252:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d015      	beq.n	800e28a <USBD_CDC_EP0_RxReady+0x46>
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e264:	2bff      	cmp	r3, #255	; 0xff
 800e266:	d010      	beq.n	800e28a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e276:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e27e:	b292      	uxth	r2, r2
 800e280:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	22ff      	movs	r2, #255	; 0xff
 800e286:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2243      	movs	r2, #67	; 0x43
 800e2a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e2a2:	4b03      	ldr	r3, [pc, #12]	; (800e2b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	24000098 	.word	0x24000098

0800e2b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2243      	movs	r2, #67	; 0x43
 800e2c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e2c2:	4b03      	ldr	r3, [pc, #12]	; (800e2d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr
 800e2d0:	24000054 	.word	0x24000054

0800e2d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2243      	movs	r2, #67	; 0x43
 800e2e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e2e2:	4b03      	ldr	r3, [pc, #12]	; (800e2f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	240000dc 	.word	0x240000dc

0800e2f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	220a      	movs	r2, #10
 800e300:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e302:	4b03      	ldr	r3, [pc, #12]	; (800e310 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	24000010 	.word	0x24000010

0800e314 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d101      	bne.n	800e328 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e324:	2303      	movs	r3, #3
 800e326:	e004      	b.n	800e332 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	683a      	ldr	r2, [r7, #0]
 800e32c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	370c      	adds	r7, #12
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e33e:	b480      	push	{r7}
 800e340:	b087      	sub	sp, #28
 800e342:	af00      	add	r7, sp, #0
 800e344:	60f8      	str	r0, [r7, #12]
 800e346:	60b9      	str	r1, [r7, #8]
 800e348:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e350:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	371c      	adds	r7, #28
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e380:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3714      	adds	r7, #20
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	e016      	b.n	800e3e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	7c1b      	ldrb	r3, [r3, #16]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d109      	bne.n	800e3d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3c8:	2101      	movs	r1, #1
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f001 fdee 	bl	800ffac <USBD_LL_PrepareReceive>
 800e3d0:	e007      	b.n	800e3e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3d8:	2340      	movs	r3, #64	; 0x40
 800e3da:	2101      	movs	r1, #1
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f001 fde5 	bl	800ffac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e3e2:	2300      	movs	r3, #0
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b086      	sub	sp, #24
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d101      	bne.n	800e404 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e400:	2303      	movs	r3, #3
 800e402:	e025      	b.n	800e450 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d003      	beq.n	800e428 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2200      	movs	r2, #0
 800e424:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d003      	beq.n	800e436 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	68ba      	ldr	r2, [r7, #8]
 800e432:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2201      	movs	r2, #1
 800e43a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	79fa      	ldrb	r2, [r7, #7]
 800e442:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f001 fc57 	bl	800fcf8 <USBD_LL_Init>
 800e44a:	4603      	mov	r3, r0
 800e44c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e450:	4618      	mov	r0, r3
 800e452:	3718      	adds	r7, #24
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e462:	2300      	movs	r3, #0
 800e464:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d101      	bne.n	800e470 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e46c:	2303      	movs	r3, #3
 800e46e:	e010      	b.n	800e492 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	683a      	ldr	r2, [r7, #0]
 800e474:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e480:	f107 020e 	add.w	r2, r7, #14
 800e484:	4610      	mov	r0, r2
 800e486:	4798      	blx	r3
 800e488:	4602      	mov	r2, r0
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b082      	sub	sp, #8
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f001 fc78 	bl	800fd98 <USBD_LL_Start>
 800e4a8:	4603      	mov	r3, r0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	b083      	sub	sp, #12
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	370c      	adds	r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e4d4:	2303      	movs	r3, #3
 800e4d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d009      	beq.n	800e4f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	78fa      	ldrb	r2, [r7, #3]
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	4798      	blx	r3
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	460b      	mov	r3, r1
 800e50a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e512:	2b00      	cmp	r3, #0
 800e514:	d007      	beq.n	800e526 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	78fa      	ldrb	r2, [r7, #3]
 800e520:	4611      	mov	r1, r2
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	4798      	blx	r3
  }

  return USBD_OK;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e540:	6839      	ldr	r1, [r7, #0]
 800e542:	4618      	mov	r0, r3
 800e544:	f000 ff2c 	bl	800f3a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e556:	461a      	mov	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e564:	f003 031f 	and.w	r3, r3, #31
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d00e      	beq.n	800e58a <USBD_LL_SetupStage+0x5a>
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d302      	bcc.n	800e576 <USBD_LL_SetupStage+0x46>
 800e570:	2b02      	cmp	r3, #2
 800e572:	d014      	beq.n	800e59e <USBD_LL_SetupStage+0x6e>
 800e574:	e01d      	b.n	800e5b2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fa18 	bl	800e9b4 <USBD_StdDevReq>
 800e584:	4603      	mov	r3, r0
 800e586:	73fb      	strb	r3, [r7, #15]
      break;
 800e588:	e020      	b.n	800e5cc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e590:	4619      	mov	r1, r3
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fa7c 	bl	800ea90 <USBD_StdItfReq>
 800e598:	4603      	mov	r3, r0
 800e59a:	73fb      	strb	r3, [r7, #15]
      break;
 800e59c:	e016      	b.n	800e5cc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fab8 	bl	800eb1c <USBD_StdEPReq>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800e5b0:	e00c      	b.n	800e5cc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e5b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f001 fc49 	bl	800fe58 <USBD_LL_StallEP>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	73fb      	strb	r3, [r7, #15]
      break;
 800e5ca:	bf00      	nop
  }

  return ret;
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b086      	sub	sp, #24
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	607a      	str	r2, [r7, #4]
 800e5e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e5e4:	7afb      	ldrb	r3, [r7, #11]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d137      	bne.n	800e65a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e5f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e5f8:	2b03      	cmp	r3, #3
 800e5fa:	d14a      	bne.n	800e692 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	689a      	ldr	r2, [r3, #8]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	429a      	cmp	r2, r3
 800e606:	d913      	bls.n	800e630 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	689a      	ldr	r2, [r3, #8]
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	1ad2      	subs	r2, r2, r3
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	68da      	ldr	r2, [r3, #12]
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	4293      	cmp	r3, r2
 800e620:	bf28      	it	cs
 800e622:	4613      	movcs	r3, r2
 800e624:	461a      	mov	r2, r3
 800e626:	6879      	ldr	r1, [r7, #4]
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f000 ffad 	bl	800f588 <USBD_CtlContinueRx>
 800e62e:	e030      	b.n	800e692 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e636:	691b      	ldr	r3, [r3, #16]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00a      	beq.n	800e652 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e642:	2b03      	cmp	r3, #3
 800e644:	d105      	bne.n	800e652 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f000 ffa9 	bl	800f5aa <USBD_CtlSendStatus>
 800e658:	e01b      	b.n	800e692 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e660:	699b      	ldr	r3, [r3, #24]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d013      	beq.n	800e68e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e66c:	2b03      	cmp	r3, #3
 800e66e:	d10e      	bne.n	800e68e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e676:	699b      	ldr	r3, [r3, #24]
 800e678:	7afa      	ldrb	r2, [r7, #11]
 800e67a:	4611      	mov	r1, r2
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	4798      	blx	r3
 800e680:	4603      	mov	r3, r0
 800e682:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e684:	7dfb      	ldrb	r3, [r7, #23]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e68a:	7dfb      	ldrb	r3, [r7, #23]
 800e68c:	e002      	b.n	800e694 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e68e:	2303      	movs	r3, #3
 800e690:	e000      	b.n	800e694 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3718      	adds	r7, #24
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e6aa:	7afb      	ldrb	r3, [r7, #11]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d16a      	bne.n	800e786 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3314      	adds	r3, #20
 800e6b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d155      	bne.n	800e76c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	689a      	ldr	r2, [r3, #8]
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d914      	bls.n	800e6f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	689a      	ldr	r2, [r3, #8]
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	1ad2      	subs	r2, r2, r3
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	6879      	ldr	r1, [r7, #4]
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f000 ff22 	bl	800f52c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f001 fc5c 	bl	800ffac <USBD_LL_PrepareReceive>
 800e6f4:	e03a      	b.n	800e76c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	68da      	ldr	r2, [r3, #12]
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d11c      	bne.n	800e73c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	685a      	ldr	r2, [r3, #4]
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d316      	bcc.n	800e73c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e718:	429a      	cmp	r2, r3
 800e71a:	d20f      	bcs.n	800e73c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e71c:	2200      	movs	r2, #0
 800e71e:	2100      	movs	r1, #0
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f000 ff03 	bl	800f52c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e72e:	2300      	movs	r3, #0
 800e730:	2200      	movs	r2, #0
 800e732:	2100      	movs	r1, #0
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f001 fc39 	bl	800ffac <USBD_LL_PrepareReceive>
 800e73a:	e017      	b.n	800e76c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00a      	beq.n	800e75e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d105      	bne.n	800e75e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e75e:	2180      	movs	r1, #128	; 0x80
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f001 fb79 	bl	800fe58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f000 ff32 	bl	800f5d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e772:	2b01      	cmp	r3, #1
 800e774:	d123      	bne.n	800e7be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff fe9b 	bl	800e4b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e784:	e01b      	b.n	800e7be <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d013      	beq.n	800e7ba <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e798:	2b03      	cmp	r3, #3
 800e79a:	d10e      	bne.n	800e7ba <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7a2:	695b      	ldr	r3, [r3, #20]
 800e7a4:	7afa      	ldrb	r2, [r7, #11]
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	4798      	blx	r3
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e7b0:	7dfb      	ldrb	r3, [r7, #23]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d003      	beq.n	800e7be <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
 800e7b8:	e002      	b.n	800e7c0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e7ba:	2303      	movs	r3, #3
 800e7bc:	e000      	b.n	800e7c0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e7be:	2300      	movs	r3, #0
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d009      	beq.n	800e80c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	6852      	ldr	r2, [r2, #4]
 800e804:	b2d2      	uxtb	r2, r2
 800e806:	4611      	mov	r1, r2
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e80c:	2340      	movs	r3, #64	; 0x40
 800e80e:	2200      	movs	r2, #0
 800e810:	2100      	movs	r1, #0
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f001 fadb 	bl	800fdce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2240      	movs	r2, #64	; 0x40
 800e824:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e828:	2340      	movs	r3, #64	; 0x40
 800e82a:	2200      	movs	r2, #0
 800e82c:	2180      	movs	r1, #128	; 0x80
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f001 facd 	bl	800fdce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2201      	movs	r2, #1
 800e838:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2240      	movs	r2, #64	; 0x40
 800e83e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3708      	adds	r7, #8
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e84a:	b480      	push	{r7}
 800e84c:	b083      	sub	sp, #12
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
 800e852:	460b      	mov	r3, r1
 800e854:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	78fa      	ldrb	r2, [r7, #3]
 800e85a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e86a:	b480      	push	{r7}
 800e86c:	b083      	sub	sp, #12
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2204      	movs	r2, #4
 800e882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8a2:	2b04      	cmp	r3, #4
 800e8a4:	d105      	bne.n	800e8b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ce:	2b03      	cmp	r3, #3
 800e8d0:	d10b      	bne.n	800e8ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8d8:	69db      	ldr	r3, [r3, #28]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d005      	beq.n	800e8ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e4:	69db      	ldr	r3, [r3, #28]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	370c      	adds	r7, #12
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr

0800e90e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e90e:	b480      	push	{r7}
 800e910:	b083      	sub	sp, #12
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
 800e916:	460b      	mov	r3, r1
 800e918:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e91a:	2300      	movs	r3, #0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	370c      	adds	r7, #12
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr

0800e93e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e93e:	b580      	push	{r7, lr}
 800e940:	b082      	sub	sp, #8
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2201      	movs	r2, #1
 800e94a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e954:	2b00      	cmp	r3, #0
 800e956:	d009      	beq.n	800e96c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	6852      	ldr	r2, [r2, #4]
 800e964:	b2d2      	uxtb	r2, r2
 800e966:	4611      	mov	r1, r2
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	4798      	blx	r3
  }

  return USBD_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e976:	b480      	push	{r7}
 800e978:	b087      	sub	sp, #28
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	3301      	adds	r3, #1
 800e98c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e994:	8a3b      	ldrh	r3, [r7, #16]
 800e996:	021b      	lsls	r3, r3, #8
 800e998:	b21a      	sxth	r2, r3
 800e99a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	b21b      	sxth	r3, r3
 800e9a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e9a4:	89fb      	ldrh	r3, [r7, #14]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	371c      	adds	r7, #28
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
	...

0800e9b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9ca:	2b20      	cmp	r3, #32
 800e9cc:	d004      	beq.n	800e9d8 <USBD_StdDevReq+0x24>
 800e9ce:	2b40      	cmp	r3, #64	; 0x40
 800e9d0:	d002      	beq.n	800e9d8 <USBD_StdDevReq+0x24>
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00a      	beq.n	800e9ec <USBD_StdDevReq+0x38>
 800e9d6:	e050      	b.n	800ea7a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	6839      	ldr	r1, [r7, #0]
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	4798      	blx	r3
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ea:	e04b      	b.n	800ea84 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	785b      	ldrb	r3, [r3, #1]
 800e9f0:	2b09      	cmp	r3, #9
 800e9f2:	d83c      	bhi.n	800ea6e <USBD_StdDevReq+0xba>
 800e9f4:	a201      	add	r2, pc, #4	; (adr r2, 800e9fc <USBD_StdDevReq+0x48>)
 800e9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fa:	bf00      	nop
 800e9fc:	0800ea51 	.word	0x0800ea51
 800ea00:	0800ea65 	.word	0x0800ea65
 800ea04:	0800ea6f 	.word	0x0800ea6f
 800ea08:	0800ea5b 	.word	0x0800ea5b
 800ea0c:	0800ea6f 	.word	0x0800ea6f
 800ea10:	0800ea2f 	.word	0x0800ea2f
 800ea14:	0800ea25 	.word	0x0800ea25
 800ea18:	0800ea6f 	.word	0x0800ea6f
 800ea1c:	0800ea47 	.word	0x0800ea47
 800ea20:	0800ea39 	.word	0x0800ea39
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ea24:	6839      	ldr	r1, [r7, #0]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f9ce 	bl	800edc8 <USBD_GetDescriptor>
      break;
 800ea2c:	e024      	b.n	800ea78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ea2e:	6839      	ldr	r1, [r7, #0]
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 fb33 	bl	800f09c <USBD_SetAddress>
      break;
 800ea36:	e01f      	b.n	800ea78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ea38:	6839      	ldr	r1, [r7, #0]
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 fb70 	bl	800f120 <USBD_SetConfig>
 800ea40:	4603      	mov	r3, r0
 800ea42:	73fb      	strb	r3, [r7, #15]
      break;
 800ea44:	e018      	b.n	800ea78 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ea46:	6839      	ldr	r1, [r7, #0]
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fc0d 	bl	800f268 <USBD_GetConfig>
      break;
 800ea4e:	e013      	b.n	800ea78 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ea50:	6839      	ldr	r1, [r7, #0]
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 fc3c 	bl	800f2d0 <USBD_GetStatus>
      break;
 800ea58:	e00e      	b.n	800ea78 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 fc6a 	bl	800f336 <USBD_SetFeature>
      break;
 800ea62:	e009      	b.n	800ea78 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ea64:	6839      	ldr	r1, [r7, #0]
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 fc79 	bl	800f35e <USBD_ClrFeature>
      break;
 800ea6c:	e004      	b.n	800ea78 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 fccf 	bl	800f414 <USBD_CtlError>
      break;
 800ea76:	bf00      	nop
    }
    break;
 800ea78:	e004      	b.n	800ea84 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ea7a:	6839      	ldr	r1, [r7, #0]
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 fcc9 	bl	800f414 <USBD_CtlError>
    break;
 800ea82:	bf00      	nop
  }

  return ret;
 800ea84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop

0800ea90 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eaa6:	2b20      	cmp	r3, #32
 800eaa8:	d003      	beq.n	800eab2 <USBD_StdItfReq+0x22>
 800eaaa:	2b40      	cmp	r3, #64	; 0x40
 800eaac:	d001      	beq.n	800eab2 <USBD_StdItfReq+0x22>
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d12a      	bne.n	800eb08 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eab8:	3b01      	subs	r3, #1
 800eaba:	2b02      	cmp	r3, #2
 800eabc:	d81d      	bhi.n	800eafa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	889b      	ldrh	r3, [r3, #4]
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d813      	bhi.n	800eaf0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	6839      	ldr	r1, [r7, #0]
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	4798      	blx	r3
 800ead6:	4603      	mov	r3, r0
 800ead8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	88db      	ldrh	r3, [r3, #6]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d110      	bne.n	800eb04 <USBD_StdItfReq+0x74>
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10d      	bne.n	800eb04 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 fd5e 	bl	800f5aa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800eaee:	e009      	b.n	800eb04 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800eaf0:	6839      	ldr	r1, [r7, #0]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fc8e 	bl	800f414 <USBD_CtlError>
      break;
 800eaf8:	e004      	b.n	800eb04 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800eafa:	6839      	ldr	r1, [r7, #0]
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 fc89 	bl	800f414 <USBD_CtlError>
      break;
 800eb02:	e000      	b.n	800eb06 <USBD_StdItfReq+0x76>
      break;
 800eb04:	bf00      	nop
    }
    break;
 800eb06:	e004      	b.n	800eb12 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800eb08:	6839      	ldr	r1, [r7, #0]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 fc82 	bl	800f414 <USBD_CtlError>
    break;
 800eb10:	bf00      	nop
  }

  return ret;
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	889b      	ldrh	r3, [r3, #4]
 800eb2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb38:	2b20      	cmp	r3, #32
 800eb3a:	d004      	beq.n	800eb46 <USBD_StdEPReq+0x2a>
 800eb3c:	2b40      	cmp	r3, #64	; 0x40
 800eb3e:	d002      	beq.n	800eb46 <USBD_StdEPReq+0x2a>
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00a      	beq.n	800eb5a <USBD_StdEPReq+0x3e>
 800eb44:	e135      	b.n	800edb2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	6839      	ldr	r1, [r7, #0]
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	4798      	blx	r3
 800eb54:	4603      	mov	r3, r0
 800eb56:	73fb      	strb	r3, [r7, #15]
    break;
 800eb58:	e130      	b.n	800edbc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	785b      	ldrb	r3, [r3, #1]
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d03e      	beq.n	800ebe0 <USBD_StdEPReq+0xc4>
 800eb62:	2b03      	cmp	r3, #3
 800eb64:	d002      	beq.n	800eb6c <USBD_StdEPReq+0x50>
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d077      	beq.n	800ec5a <USBD_StdEPReq+0x13e>
 800eb6a:	e11c      	b.n	800eda6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d002      	beq.n	800eb7c <USBD_StdEPReq+0x60>
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	d015      	beq.n	800eba6 <USBD_StdEPReq+0x8a>
 800eb7a:	e02b      	b.n	800ebd4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb7c:	7bbb      	ldrb	r3, [r7, #14]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00c      	beq.n	800eb9c <USBD_StdEPReq+0x80>
 800eb82:	7bbb      	ldrb	r3, [r7, #14]
 800eb84:	2b80      	cmp	r3, #128	; 0x80
 800eb86:	d009      	beq.n	800eb9c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb88:	7bbb      	ldrb	r3, [r7, #14]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f001 f963 	bl	800fe58 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb92:	2180      	movs	r1, #128	; 0x80
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f001 f95f 	bl	800fe58 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800eb9a:	e020      	b.n	800ebde <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800eb9c:	6839      	ldr	r1, [r7, #0]
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 fc38 	bl	800f414 <USBD_CtlError>
        break;
 800eba4:	e01b      	b.n	800ebde <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	885b      	ldrh	r3, [r3, #2]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10e      	bne.n	800ebcc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ebae:	7bbb      	ldrb	r3, [r7, #14]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00b      	beq.n	800ebcc <USBD_StdEPReq+0xb0>
 800ebb4:	7bbb      	ldrb	r3, [r7, #14]
 800ebb6:	2b80      	cmp	r3, #128	; 0x80
 800ebb8:	d008      	beq.n	800ebcc <USBD_StdEPReq+0xb0>
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	88db      	ldrh	r3, [r3, #6]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d104      	bne.n	800ebcc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebc2:	7bbb      	ldrb	r3, [r7, #14]
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f001 f946 	bl	800fe58 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 fcec 	bl	800f5aa <USBD_CtlSendStatus>

        break;
 800ebd2:	e004      	b.n	800ebde <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ebd4:	6839      	ldr	r1, [r7, #0]
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 fc1c 	bl	800f414 <USBD_CtlError>
        break;
 800ebdc:	bf00      	nop
      }
      break;
 800ebde:	e0e7      	b.n	800edb0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d002      	beq.n	800ebf0 <USBD_StdEPReq+0xd4>
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d015      	beq.n	800ec1a <USBD_StdEPReq+0xfe>
 800ebee:	e02d      	b.n	800ec4c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebf0:	7bbb      	ldrb	r3, [r7, #14]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00c      	beq.n	800ec10 <USBD_StdEPReq+0xf4>
 800ebf6:	7bbb      	ldrb	r3, [r7, #14]
 800ebf8:	2b80      	cmp	r3, #128	; 0x80
 800ebfa:	d009      	beq.n	800ec10 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebfc:	7bbb      	ldrb	r3, [r7, #14]
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f001 f929 	bl	800fe58 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec06:	2180      	movs	r1, #128	; 0x80
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f001 f925 	bl	800fe58 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ec0e:	e023      	b.n	800ec58 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fbfe 	bl	800f414 <USBD_CtlError>
        break;
 800ec18:	e01e      	b.n	800ec58 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	885b      	ldrh	r3, [r3, #2]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d119      	bne.n	800ec56 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ec22:	7bbb      	ldrb	r3, [r7, #14]
 800ec24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d004      	beq.n	800ec36 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec2c:	7bbb      	ldrb	r3, [r7, #14]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f001 f930 	bl	800fe96 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fcb7 	bl	800f5aa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	6839      	ldr	r1, [r7, #0]
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	4798      	blx	r3
        }
        break;
 800ec4a:	e004      	b.n	800ec56 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ec4c:	6839      	ldr	r1, [r7, #0]
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f000 fbe0 	bl	800f414 <USBD_CtlError>
        break;
 800ec54:	e000      	b.n	800ec58 <USBD_StdEPReq+0x13c>
        break;
 800ec56:	bf00      	nop
      }
      break;
 800ec58:	e0aa      	b.n	800edb0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	d002      	beq.n	800ec6a <USBD_StdEPReq+0x14e>
 800ec64:	2b03      	cmp	r3, #3
 800ec66:	d032      	beq.n	800ecce <USBD_StdEPReq+0x1b2>
 800ec68:	e097      	b.n	800ed9a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec6a:	7bbb      	ldrb	r3, [r7, #14]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d007      	beq.n	800ec80 <USBD_StdEPReq+0x164>
 800ec70:	7bbb      	ldrb	r3, [r7, #14]
 800ec72:	2b80      	cmp	r3, #128	; 0x80
 800ec74:	d004      	beq.n	800ec80 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ec76:	6839      	ldr	r1, [r7, #0]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 fbcb 	bl	800f414 <USBD_CtlError>
          break;
 800ec7e:	e091      	b.n	800eda4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	da0b      	bge.n	800eca0 <USBD_StdEPReq+0x184>
 800ec88:	7bbb      	ldrb	r3, [r7, #14]
 800ec8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec8e:	4613      	mov	r3, r2
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	4413      	add	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	3310      	adds	r3, #16
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	e00b      	b.n	800ecb8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eca6:	4613      	mov	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4413      	add	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2202      	movs	r2, #2
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f000 fc15 	bl	800f4f6 <USBD_CtlSendData>
        break;
 800eccc:	e06a      	b.n	800eda4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ecce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	da11      	bge.n	800ecfa <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecd6:	7bbb      	ldrb	r3, [r7, #14]
 800ecd8:	f003 020f 	and.w	r2, r3, #15
 800ecdc:	6879      	ldr	r1, [r7, #4]
 800ecde:	4613      	mov	r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	4413      	add	r3, r2
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	440b      	add	r3, r1
 800ece8:	3324      	adds	r3, #36	; 0x24
 800ecea:	881b      	ldrh	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d117      	bne.n	800ed20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 fb8e 	bl	800f414 <USBD_CtlError>
            break;
 800ecf8:	e054      	b.n	800eda4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ecfa:	7bbb      	ldrb	r3, [r7, #14]
 800ecfc:	f003 020f 	and.w	r2, r3, #15
 800ed00:	6879      	ldr	r1, [r7, #4]
 800ed02:	4613      	mov	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	4413      	add	r3, r2
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	440b      	add	r3, r1
 800ed0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d104      	bne.n	800ed20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ed16:	6839      	ldr	r1, [r7, #0]
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 fb7b 	bl	800f414 <USBD_CtlError>
            break;
 800ed1e:	e041      	b.n	800eda4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	da0b      	bge.n	800ed40 <USBD_StdEPReq+0x224>
 800ed28:	7bbb      	ldrb	r3, [r7, #14]
 800ed2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed2e:	4613      	mov	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	4413      	add	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	3310      	adds	r3, #16
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	e00b      	b.n	800ed58 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ed40:	7bbb      	ldrb	r3, [r7, #14]
 800ed42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed46:	4613      	mov	r3, r2
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	4413      	add	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	4413      	add	r3, r2
 800ed56:	3304      	adds	r3, #4
 800ed58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed5a:	7bbb      	ldrb	r3, [r7, #14]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <USBD_StdEPReq+0x24a>
 800ed60:	7bbb      	ldrb	r3, [r7, #14]
 800ed62:	2b80      	cmp	r3, #128	; 0x80
 800ed64:	d103      	bne.n	800ed6e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	601a      	str	r2, [r3, #0]
 800ed6c:	e00e      	b.n	800ed8c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed6e:	7bbb      	ldrb	r3, [r7, #14]
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f001 f8ae 	bl	800fed4 <USBD_LL_IsStallEP>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d003      	beq.n	800ed86 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2201      	movs	r2, #1
 800ed82:	601a      	str	r2, [r3, #0]
 800ed84:	e002      	b.n	800ed8c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2202      	movs	r2, #2
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fbaf 	bl	800f4f6 <USBD_CtlSendData>
          break;
 800ed98:	e004      	b.n	800eda4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fb39 	bl	800f414 <USBD_CtlError>
        break;
 800eda2:	bf00      	nop
      }
      break;
 800eda4:	e004      	b.n	800edb0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800eda6:	6839      	ldr	r1, [r7, #0]
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 fb33 	bl	800f414 <USBD_CtlError>
      break;
 800edae:	bf00      	nop
    }
    break;
 800edb0:	e004      	b.n	800edbc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800edb2:	6839      	ldr	r1, [r7, #0]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fb2d 	bl	800f414 <USBD_CtlError>
    break;
 800edba:	bf00      	nop
  }

  return ret;
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
	...

0800edc8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800edd2:	2300      	movs	r3, #0
 800edd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800edd6:	2300      	movs	r3, #0
 800edd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800edda:	2300      	movs	r3, #0
 800eddc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	885b      	ldrh	r3, [r3, #2]
 800ede2:	0a1b      	lsrs	r3, r3, #8
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	3b01      	subs	r3, #1
 800ede8:	2b06      	cmp	r3, #6
 800edea:	f200 8128 	bhi.w	800f03e <USBD_GetDescriptor+0x276>
 800edee:	a201      	add	r2, pc, #4	; (adr r2, 800edf4 <USBD_GetDescriptor+0x2c>)
 800edf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf4:	0800ee11 	.word	0x0800ee11
 800edf8:	0800ee29 	.word	0x0800ee29
 800edfc:	0800ee69 	.word	0x0800ee69
 800ee00:	0800f03f 	.word	0x0800f03f
 800ee04:	0800f03f 	.word	0x0800f03f
 800ee08:	0800efdf 	.word	0x0800efdf
 800ee0c:	0800f00b 	.word	0x0800f00b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	7c12      	ldrb	r2, [r2, #16]
 800ee1c:	f107 0108 	add.w	r1, r7, #8
 800ee20:	4610      	mov	r0, r2
 800ee22:	4798      	blx	r3
 800ee24:	60f8      	str	r0, [r7, #12]
    break;
 800ee26:	e112      	b.n	800f04e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7c1b      	ldrb	r3, [r3, #16]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10d      	bne.n	800ee4c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee38:	f107 0208 	add.w	r2, r7, #8
 800ee3c:	4610      	mov	r0, r2
 800ee3e:	4798      	blx	r3
 800ee40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	3301      	adds	r3, #1
 800ee46:	2202      	movs	r2, #2
 800ee48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ee4a:	e100      	b.n	800f04e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee54:	f107 0208 	add.w	r2, r7, #8
 800ee58:	4610      	mov	r0, r2
 800ee5a:	4798      	blx	r3
 800ee5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	3301      	adds	r3, #1
 800ee62:	2202      	movs	r2, #2
 800ee64:	701a      	strb	r2, [r3, #0]
    break;
 800ee66:	e0f2      	b.n	800f04e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	885b      	ldrh	r3, [r3, #2]
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	2b05      	cmp	r3, #5
 800ee70:	f200 80ac 	bhi.w	800efcc <USBD_GetDescriptor+0x204>
 800ee74:	a201      	add	r2, pc, #4	; (adr r2, 800ee7c <USBD_GetDescriptor+0xb4>)
 800ee76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee7a:	bf00      	nop
 800ee7c:	0800ee95 	.word	0x0800ee95
 800ee80:	0800eec9 	.word	0x0800eec9
 800ee84:	0800eefd 	.word	0x0800eefd
 800ee88:	0800ef31 	.word	0x0800ef31
 800ee8c:	0800ef65 	.word	0x0800ef65
 800ee90:	0800ef99 	.word	0x0800ef99
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d00b      	beq.n	800eeb8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	7c12      	ldrb	r2, [r2, #16]
 800eeac:	f107 0108 	add.w	r1, r7, #8
 800eeb0:	4610      	mov	r0, r2
 800eeb2:	4798      	blx	r3
 800eeb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eeb6:	e091      	b.n	800efdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eeb8:	6839      	ldr	r1, [r7, #0]
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 faaa 	bl	800f414 <USBD_CtlError>
        err++;
 800eec0:	7afb      	ldrb	r3, [r7, #11]
 800eec2:	3301      	adds	r3, #1
 800eec4:	72fb      	strb	r3, [r7, #11]
      break;
 800eec6:	e089      	b.n	800efdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00b      	beq.n	800eeec <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	7c12      	ldrb	r2, [r2, #16]
 800eee0:	f107 0108 	add.w	r1, r7, #8
 800eee4:	4610      	mov	r0, r2
 800eee6:	4798      	blx	r3
 800eee8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eeea:	e077      	b.n	800efdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fa90 	bl	800f414 <USBD_CtlError>
        err++;
 800eef4:	7afb      	ldrb	r3, [r7, #11]
 800eef6:	3301      	adds	r3, #1
 800eef8:	72fb      	strb	r3, [r7, #11]
      break;
 800eefa:	e06f      	b.n	800efdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d00b      	beq.n	800ef20 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	7c12      	ldrb	r2, [r2, #16]
 800ef14:	f107 0108 	add.w	r1, r7, #8
 800ef18:	4610      	mov	r0, r2
 800ef1a:	4798      	blx	r3
 800ef1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef1e:	e05d      	b.n	800efdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ef20:	6839      	ldr	r1, [r7, #0]
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 fa76 	bl	800f414 <USBD_CtlError>
        err++;
 800ef28:	7afb      	ldrb	r3, [r7, #11]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	72fb      	strb	r3, [r7, #11]
      break;
 800ef2e:	e055      	b.n	800efdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00b      	beq.n	800ef54 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	7c12      	ldrb	r2, [r2, #16]
 800ef48:	f107 0108 	add.w	r1, r7, #8
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	4798      	blx	r3
 800ef50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef52:	e043      	b.n	800efdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fa5c 	bl	800f414 <USBD_CtlError>
        err++;
 800ef5c:	7afb      	ldrb	r3, [r7, #11]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	72fb      	strb	r3, [r7, #11]
      break;
 800ef62:	e03b      	b.n	800efdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00b      	beq.n	800ef88 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef76:	695b      	ldr	r3, [r3, #20]
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	7c12      	ldrb	r2, [r2, #16]
 800ef7c:	f107 0108 	add.w	r1, r7, #8
 800ef80:	4610      	mov	r0, r2
 800ef82:	4798      	blx	r3
 800ef84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef86:	e029      	b.n	800efdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ef88:	6839      	ldr	r1, [r7, #0]
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 fa42 	bl	800f414 <USBD_CtlError>
        err++;
 800ef90:	7afb      	ldrb	r3, [r7, #11]
 800ef92:	3301      	adds	r3, #1
 800ef94:	72fb      	strb	r3, [r7, #11]
      break;
 800ef96:	e021      	b.n	800efdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef9e:	699b      	ldr	r3, [r3, #24]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00b      	beq.n	800efbc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efaa:	699b      	ldr	r3, [r3, #24]
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	7c12      	ldrb	r2, [r2, #16]
 800efb0:	f107 0108 	add.w	r1, r7, #8
 800efb4:	4610      	mov	r0, r2
 800efb6:	4798      	blx	r3
 800efb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800efba:	e00f      	b.n	800efdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800efbc:	6839      	ldr	r1, [r7, #0]
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 fa28 	bl	800f414 <USBD_CtlError>
        err++;
 800efc4:	7afb      	ldrb	r3, [r7, #11]
 800efc6:	3301      	adds	r3, #1
 800efc8:	72fb      	strb	r3, [r7, #11]
      break;
 800efca:	e007      	b.n	800efdc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800efcc:	6839      	ldr	r1, [r7, #0]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 fa20 	bl	800f414 <USBD_CtlError>
      err++;
 800efd4:	7afb      	ldrb	r3, [r7, #11]
 800efd6:	3301      	adds	r3, #1
 800efd8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800efda:	bf00      	nop
    }
    break;
 800efdc:	e037      	b.n	800f04e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	7c1b      	ldrb	r3, [r3, #16]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d109      	bne.n	800effa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efee:	f107 0208 	add.w	r2, r7, #8
 800eff2:	4610      	mov	r0, r2
 800eff4:	4798      	blx	r3
 800eff6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800eff8:	e029      	b.n	800f04e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800effa:	6839      	ldr	r1, [r7, #0]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 fa09 	bl	800f414 <USBD_CtlError>
      err++;
 800f002:	7afb      	ldrb	r3, [r7, #11]
 800f004:	3301      	adds	r3, #1
 800f006:	72fb      	strb	r3, [r7, #11]
    break;
 800f008:	e021      	b.n	800f04e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	7c1b      	ldrb	r3, [r3, #16]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d10d      	bne.n	800f02e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f01a:	f107 0208 	add.w	r2, r7, #8
 800f01e:	4610      	mov	r0, r2
 800f020:	4798      	blx	r3
 800f022:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	3301      	adds	r3, #1
 800f028:	2207      	movs	r2, #7
 800f02a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f02c:	e00f      	b.n	800f04e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f02e:	6839      	ldr	r1, [r7, #0]
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 f9ef 	bl	800f414 <USBD_CtlError>
      err++;
 800f036:	7afb      	ldrb	r3, [r7, #11]
 800f038:	3301      	adds	r3, #1
 800f03a:	72fb      	strb	r3, [r7, #11]
    break;
 800f03c:	e007      	b.n	800f04e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f03e:	6839      	ldr	r1, [r7, #0]
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 f9e7 	bl	800f414 <USBD_CtlError>
    err++;
 800f046:	7afb      	ldrb	r3, [r7, #11]
 800f048:	3301      	adds	r3, #1
 800f04a:	72fb      	strb	r3, [r7, #11]
    break;
 800f04c:	bf00      	nop
  }

  if (err != 0U)
 800f04e:	7afb      	ldrb	r3, [r7, #11]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d11e      	bne.n	800f092 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	88db      	ldrh	r3, [r3, #6]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d016      	beq.n	800f08a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f05c:	893b      	ldrh	r3, [r7, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00e      	beq.n	800f080 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	88da      	ldrh	r2, [r3, #6]
 800f066:	893b      	ldrh	r3, [r7, #8]
 800f068:	4293      	cmp	r3, r2
 800f06a:	bf28      	it	cs
 800f06c:	4613      	movcs	r3, r2
 800f06e:	b29b      	uxth	r3, r3
 800f070:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f072:	893b      	ldrh	r3, [r7, #8]
 800f074:	461a      	mov	r2, r3
 800f076:	68f9      	ldr	r1, [r7, #12]
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 fa3c 	bl	800f4f6 <USBD_CtlSendData>
 800f07e:	e009      	b.n	800f094 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 f9c6 	bl	800f414 <USBD_CtlError>
 800f088:	e004      	b.n	800f094 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 fa8d 	bl	800f5aa <USBD_CtlSendStatus>
 800f090:	e000      	b.n	800f094 <USBD_GetDescriptor+0x2cc>
    return;
 800f092:	bf00      	nop
    }
  }
}
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop

0800f09c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	889b      	ldrh	r3, [r3, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d130      	bne.n	800f110 <USBD_SetAddress+0x74>
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	88db      	ldrh	r3, [r3, #6]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d12c      	bne.n	800f110 <USBD_SetAddress+0x74>
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	885b      	ldrh	r3, [r3, #2]
 800f0ba:	2b7f      	cmp	r3, #127	; 0x7f
 800f0bc:	d828      	bhi.n	800f110 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	885b      	ldrh	r3, [r3, #2]
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	d104      	bne.n	800f0de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f0d4:	6839      	ldr	r1, [r7, #0]
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f99c 	bl	800f414 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0dc:	e01c      	b.n	800f118 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	7bfa      	ldrb	r2, [r7, #15]
 800f0e2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 ff1e 	bl	800ff2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 fa5a 	bl	800f5aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d004      	beq.n	800f106 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2202      	movs	r2, #2
 800f100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f104:	e008      	b.n	800f118 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2201      	movs	r2, #1
 800f10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f10e:	e003      	b.n	800f118 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f110:	6839      	ldr	r1, [r7, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 f97e 	bl	800f414 <USBD_CtlError>
  }
}
 800f118:	bf00      	nop
 800f11a:	3710      	adds	r7, #16
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f12a:	2300      	movs	r3, #0
 800f12c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	885b      	ldrh	r3, [r3, #2]
 800f132:	b2da      	uxtb	r2, r3
 800f134:	4b4b      	ldr	r3, [pc, #300]	; (800f264 <USBD_SetConfig+0x144>)
 800f136:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f138:	4b4a      	ldr	r3, [pc, #296]	; (800f264 <USBD_SetConfig+0x144>)
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d905      	bls.n	800f14c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f966 	bl	800f414 <USBD_CtlError>
    return USBD_FAIL;
 800f148:	2303      	movs	r3, #3
 800f14a:	e087      	b.n	800f25c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f152:	2b02      	cmp	r3, #2
 800f154:	d002      	beq.n	800f15c <USBD_SetConfig+0x3c>
 800f156:	2b03      	cmp	r3, #3
 800f158:	d025      	beq.n	800f1a6 <USBD_SetConfig+0x86>
 800f15a:	e071      	b.n	800f240 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f15c:	4b41      	ldr	r3, [pc, #260]	; (800f264 <USBD_SetConfig+0x144>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d01c      	beq.n	800f19e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f164:	4b3f      	ldr	r3, [pc, #252]	; (800f264 <USBD_SetConfig+0x144>)
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	461a      	mov	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f16e:	4b3d      	ldr	r3, [pc, #244]	; (800f264 <USBD_SetConfig+0x144>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f7ff f9a7 	bl	800e4c8 <USBD_SetClassConfig>
 800f17a:	4603      	mov	r3, r0
 800f17c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d004      	beq.n	800f18e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f184:	6839      	ldr	r1, [r7, #0]
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 f944 	bl	800f414 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f18c:	e065      	b.n	800f25a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 fa0b 	bl	800f5aa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2203      	movs	r2, #3
 800f198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f19c:	e05d      	b.n	800f25a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fa03 	bl	800f5aa <USBD_CtlSendStatus>
    break;
 800f1a4:	e059      	b.n	800f25a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f1a6:	4b2f      	ldr	r3, [pc, #188]	; (800f264 <USBD_SetConfig+0x144>)
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d112      	bne.n	800f1d4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2202      	movs	r2, #2
 800f1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f1b6:	4b2b      	ldr	r3, [pc, #172]	; (800f264 <USBD_SetConfig+0x144>)
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f1c0:	4b28      	ldr	r3, [pc, #160]	; (800f264 <USBD_SetConfig+0x144>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7ff f99a 	bl	800e500 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 f9ec 	bl	800f5aa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f1d2:	e042      	b.n	800f25a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f1d4:	4b23      	ldr	r3, [pc, #140]	; (800f264 <USBD_SetConfig+0x144>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	461a      	mov	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d02a      	beq.n	800f238 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7ff f988 	bl	800e500 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f1f0:	4b1c      	ldr	r3, [pc, #112]	; (800f264 <USBD_SetConfig+0x144>)
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f1fa:	4b1a      	ldr	r3, [pc, #104]	; (800f264 <USBD_SetConfig+0x144>)
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	4619      	mov	r1, r3
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7ff f961 	bl	800e4c8 <USBD_SetClassConfig>
 800f206:	4603      	mov	r3, r0
 800f208:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00f      	beq.n	800f230 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f210:	6839      	ldr	r1, [r7, #0]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 f8fe 	bl	800f414 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	4619      	mov	r1, r3
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f7ff f96d 	bl	800e500 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2202      	movs	r2, #2
 800f22a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f22e:	e014      	b.n	800f25a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 f9ba 	bl	800f5aa <USBD_CtlSendStatus>
    break;
 800f236:	e010      	b.n	800f25a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 f9b6 	bl	800f5aa <USBD_CtlSendStatus>
    break;
 800f23e:	e00c      	b.n	800f25a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f240:	6839      	ldr	r1, [r7, #0]
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 f8e6 	bl	800f414 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f248:	4b06      	ldr	r3, [pc, #24]	; (800f264 <USBD_SetConfig+0x144>)
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff f956 	bl	800e500 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f254:	2303      	movs	r3, #3
 800f256:	73fb      	strb	r3, [r7, #15]
    break;
 800f258:	bf00      	nop
  }

  return ret;
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	2400020c 	.word	0x2400020c

0800f268 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	88db      	ldrh	r3, [r3, #6]
 800f276:	2b01      	cmp	r3, #1
 800f278:	d004      	beq.n	800f284 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f8c9 	bl	800f414 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f282:	e021      	b.n	800f2c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	db17      	blt.n	800f2be <USBD_GetConfig+0x56>
 800f28e:	2b02      	cmp	r3, #2
 800f290:	dd02      	ble.n	800f298 <USBD_GetConfig+0x30>
 800f292:	2b03      	cmp	r3, #3
 800f294:	d00b      	beq.n	800f2ae <USBD_GetConfig+0x46>
 800f296:	e012      	b.n	800f2be <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 f925 	bl	800f4f6 <USBD_CtlSendData>
      break;
 800f2ac:	e00c      	b.n	800f2c8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	3304      	adds	r3, #4
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 f91d 	bl	800f4f6 <USBD_CtlSendData>
      break;
 800f2bc:	e004      	b.n	800f2c8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f2be:	6839      	ldr	r1, [r7, #0]
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 f8a7 	bl	800f414 <USBD_CtlError>
      break;
 800f2c6:	bf00      	nop
}
 800f2c8:	bf00      	nop
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d81e      	bhi.n	800f324 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	88db      	ldrh	r3, [r3, #6]
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d004      	beq.n	800f2f8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 f88f 	bl	800f414 <USBD_CtlError>
      break;
 800f2f6:	e01a      	b.n	800f32e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f304:	2b00      	cmp	r3, #0
 800f306:	d005      	beq.n	800f314 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	f043 0202 	orr.w	r2, r3, #2
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	330c      	adds	r3, #12
 800f318:	2202      	movs	r2, #2
 800f31a:	4619      	mov	r1, r3
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 f8ea 	bl	800f4f6 <USBD_CtlSendData>
    break;
 800f322:	e004      	b.n	800f32e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f324:	6839      	ldr	r1, [r7, #0]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 f874 	bl	800f414 <USBD_CtlError>
    break;
 800f32c:	bf00      	nop
  }
}
 800f32e:	bf00      	nop
 800f330:	3708      	adds	r7, #8
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f336:	b580      	push	{r7, lr}
 800f338:	b082      	sub	sp, #8
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
 800f33e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	885b      	ldrh	r3, [r3, #2]
 800f344:	2b01      	cmp	r3, #1
 800f346:	d106      	bne.n	800f356 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2201      	movs	r2, #1
 800f34c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 f92a 	bl	800f5aa <USBD_CtlSendStatus>
  }
}
 800f356:	bf00      	nop
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f36e:	3b01      	subs	r3, #1
 800f370:	2b02      	cmp	r3, #2
 800f372:	d80b      	bhi.n	800f38c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	885b      	ldrh	r3, [r3, #2]
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d10c      	bne.n	800f396 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 f910 	bl	800f5aa <USBD_CtlSendStatus>
      }
      break;
 800f38a:	e004      	b.n	800f396 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f840 	bl	800f414 <USBD_CtlError>
      break;
 800f394:	e000      	b.n	800f398 <USBD_ClrFeature+0x3a>
      break;
 800f396:	bf00      	nop
  }
}
 800f398:	bf00      	nop
 800f39a:	3708      	adds	r7, #8
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	781a      	ldrb	r2, [r3, #0]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	781a      	ldrb	r2, [r3, #0]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7ff fad3 	bl	800e976 <SWAPBYTE>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f7ff fac6 	bl	800e976 <SWAPBYTE>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f7ff fab9 	bl	800e976 <SWAPBYTE>
 800f404:	4603      	mov	r3, r0
 800f406:	461a      	mov	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	80da      	strh	r2, [r3, #6]
}
 800f40c:	bf00      	nop
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f41e:	2180      	movs	r1, #128	; 0x80
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 fd19 	bl	800fe58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f426:	2100      	movs	r1, #0
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fd15 	bl	800fe58 <USBD_LL_StallEP>
}
 800f42e:	bf00      	nop
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b086      	sub	sp, #24
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	60f8      	str	r0, [r7, #12]
 800f43e:	60b9      	str	r1, [r7, #8]
 800f440:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f442:	2300      	movs	r3, #0
 800f444:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d036      	beq.n	800f4ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f450:	6938      	ldr	r0, [r7, #16]
 800f452:	f000 f836 	bl	800f4c2 <USBD_GetLen>
 800f456:	4603      	mov	r3, r0
 800f458:	3301      	adds	r3, #1
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	005b      	lsls	r3, r3, #1
 800f45e:	b29a      	uxth	r2, r3
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f464:	7dfb      	ldrb	r3, [r7, #23]
 800f466:	68ba      	ldr	r2, [r7, #8]
 800f468:	4413      	add	r3, r2
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	7812      	ldrb	r2, [r2, #0]
 800f46e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f470:	7dfb      	ldrb	r3, [r7, #23]
 800f472:	3301      	adds	r3, #1
 800f474:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f476:	7dfb      	ldrb	r3, [r7, #23]
 800f478:	68ba      	ldr	r2, [r7, #8]
 800f47a:	4413      	add	r3, r2
 800f47c:	2203      	movs	r2, #3
 800f47e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f480:	7dfb      	ldrb	r3, [r7, #23]
 800f482:	3301      	adds	r3, #1
 800f484:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f486:	e013      	b.n	800f4b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f488:	7dfb      	ldrb	r3, [r7, #23]
 800f48a:	68ba      	ldr	r2, [r7, #8]
 800f48c:	4413      	add	r3, r2
 800f48e:	693a      	ldr	r2, [r7, #16]
 800f490:	7812      	ldrb	r2, [r2, #0]
 800f492:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	3301      	adds	r3, #1
 800f498:	613b      	str	r3, [r7, #16]
    idx++;
 800f49a:	7dfb      	ldrb	r3, [r7, #23]
 800f49c:	3301      	adds	r3, #1
 800f49e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f4a0:	7dfb      	ldrb	r3, [r7, #23]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	701a      	strb	r2, [r3, #0]
    idx++;
 800f4aa:	7dfb      	ldrb	r3, [r7, #23]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1e7      	bne.n	800f488 <USBD_GetString+0x52>
 800f4b8:	e000      	b.n	800f4bc <USBD_GetString+0x86>
    return;
 800f4ba:	bf00      	nop
  }
}
 800f4bc:	3718      	adds	r7, #24
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f4c2:	b480      	push	{r7}
 800f4c4:	b085      	sub	sp, #20
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f4d2:	e005      	b.n	800f4e0 <USBD_GetLen+0x1e>
  {
    len++;
 800f4d4:	7bfb      	ldrb	r3, [r7, #15]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1f5      	bne.n	800f4d4 <USBD_GetLen+0x12>
  }

  return len;
 800f4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr

0800f4f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b084      	sub	sp, #16
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	60f8      	str	r0, [r7, #12]
 800f4fe:	60b9      	str	r1, [r7, #8]
 800f500:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2202      	movs	r2, #2
 800f506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	68ba      	ldr	r2, [r7, #8]
 800f51a:	2100      	movs	r1, #0
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f000 fd24 	bl	800ff6a <USBD_LL_Transmit>

  return USBD_OK;
 800f522:	2300      	movs	r3, #0
}
 800f524:	4618      	mov	r0, r3
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	2100      	movs	r1, #0
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f000 fd13 	bl	800ff6a <USBD_LL_Transmit>

  return USBD_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b084      	sub	sp, #16
 800f552:	af00      	add	r7, sp, #0
 800f554:	60f8      	str	r0, [r7, #12]
 800f556:	60b9      	str	r1, [r7, #8]
 800f558:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2203      	movs	r2, #3
 800f55e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	68ba      	ldr	r2, [r7, #8]
 800f576:	2100      	movs	r1, #0
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 fd17 	bl	800ffac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f57e:	2300      	movs	r3, #0
}
 800f580:	4618      	mov	r0, r3
 800f582:	3710      	adds	r7, #16
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	68ba      	ldr	r2, [r7, #8]
 800f598:	2100      	movs	r1, #0
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	f000 fd06 	bl	800ffac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b082      	sub	sp, #8
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2204      	movs	r2, #4
 800f5b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	2200      	movs	r2, #0
 800f5be:	2100      	movs	r1, #0
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fcd2 	bl	800ff6a <USBD_LL_Transmit>

  return USBD_OK;
 800f5c6:	2300      	movs	r3, #0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2205      	movs	r2, #5
 800f5dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 fce0 	bl	800ffac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
	...

0800f5f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b087      	sub	sp, #28
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	4613      	mov	r3, r2
 800f604:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f606:	2301      	movs	r3, #1
 800f608:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f60e:	4b1f      	ldr	r3, [pc, #124]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f610:	7a5b      	ldrb	r3, [r3, #9]
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	d131      	bne.n	800f67c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f618:	4b1c      	ldr	r3, [pc, #112]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f61a:	7a5b      	ldrb	r3, [r3, #9]
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	461a      	mov	r2, r3
 800f620:	4b1a      	ldr	r3, [pc, #104]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f622:	2100      	movs	r1, #0
 800f624:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f626:	4b19      	ldr	r3, [pc, #100]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f628:	7a5b      	ldrb	r3, [r3, #9]
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	4a17      	ldr	r2, [pc, #92]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	4413      	add	r3, r2
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f636:	4b15      	ldr	r3, [pc, #84]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f638:	7a5b      	ldrb	r3, [r3, #9]
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	461a      	mov	r2, r3
 800f63e:	4b13      	ldr	r3, [pc, #76]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f640:	4413      	add	r3, r2
 800f642:	79fa      	ldrb	r2, [r7, #7]
 800f644:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f646:	4b11      	ldr	r3, [pc, #68]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f648:	7a5b      	ldrb	r3, [r3, #9]
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	1c5a      	adds	r2, r3, #1
 800f64e:	b2d1      	uxtb	r1, r2
 800f650:	4a0e      	ldr	r2, [pc, #56]	; (800f68c <FATFS_LinkDriverEx+0x94>)
 800f652:	7251      	strb	r1, [r2, #9]
 800f654:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f656:	7dbb      	ldrb	r3, [r7, #22]
 800f658:	3330      	adds	r3, #48	; 0x30
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	3301      	adds	r3, #1
 800f664:	223a      	movs	r2, #58	; 0x3a
 800f666:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	3302      	adds	r3, #2
 800f66c:	222f      	movs	r2, #47	; 0x2f
 800f66e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	3303      	adds	r3, #3
 800f674:	2200      	movs	r2, #0
 800f676:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f678:	2300      	movs	r3, #0
 800f67a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	371c      	adds	r7, #28
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	24000210 	.word	0x24000210

0800f690 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f69a:	2200      	movs	r2, #0
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7ff ffaa 	bl	800f5f8 <FATFS_LinkDriverEx>
 800f6a4:	4603      	mov	r3, r0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3708      	adds	r7, #8
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
	...

0800f6b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	4913      	ldr	r1, [pc, #76]	; (800f704 <MX_USB_DEVICE_Init+0x54>)
 800f6b8:	4813      	ldr	r0, [pc, #76]	; (800f708 <MX_USB_DEVICE_Init+0x58>)
 800f6ba:	f7fe fe97 	bl	800e3ec <USBD_Init>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d001      	beq.n	800f6c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f6c4:	f7f1 fda8 	bl	8001218 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f6c8:	4910      	ldr	r1, [pc, #64]	; (800f70c <MX_USB_DEVICE_Init+0x5c>)
 800f6ca:	480f      	ldr	r0, [pc, #60]	; (800f708 <MX_USB_DEVICE_Init+0x58>)
 800f6cc:	f7fe fec4 	bl	800e458 <USBD_RegisterClass>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f6d6:	f7f1 fd9f 	bl	8001218 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f6da:	490d      	ldr	r1, [pc, #52]	; (800f710 <MX_USB_DEVICE_Init+0x60>)
 800f6dc:	480a      	ldr	r0, [pc, #40]	; (800f708 <MX_USB_DEVICE_Init+0x58>)
 800f6de:	f7fe fe19 	bl	800e314 <USBD_CDC_RegisterInterface>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d001      	beq.n	800f6ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f6e8:	f7f1 fd96 	bl	8001218 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f6ec:	4806      	ldr	r0, [pc, #24]	; (800f708 <MX_USB_DEVICE_Init+0x58>)
 800f6ee:	f7fe fed4 	bl	800e49a <USBD_Start>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f6f8:	f7f1 fd8e 	bl	8001218 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f6fc:	f7f6 fb46 	bl	8005d8c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f700:	bf00      	nop
 800f702:	bd80      	pop	{r7, pc}
 800f704:	24000134 	.word	0x24000134
 800f708:	24000ab0 	.word	0x24000ab0
 800f70c:	2400001c 	.word	0x2400001c
 800f710:	24000120 	.word	0x24000120

0800f714 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f718:	2200      	movs	r2, #0
 800f71a:	4905      	ldr	r1, [pc, #20]	; (800f730 <CDC_Init_FS+0x1c>)
 800f71c:	4805      	ldr	r0, [pc, #20]	; (800f734 <CDC_Init_FS+0x20>)
 800f71e:	f7fe fe0e 	bl	800e33e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f722:	4905      	ldr	r1, [pc, #20]	; (800f738 <CDC_Init_FS+0x24>)
 800f724:	4803      	ldr	r0, [pc, #12]	; (800f734 <CDC_Init_FS+0x20>)
 800f726:	f7fe fe23 	bl	800e370 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f72a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	24001580 	.word	0x24001580
 800f734:	24000ab0 	.word	0x24000ab0
 800f738:	24000d80 	.word	0x24000d80

0800f73c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f740:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f742:	4618      	mov	r0, r3
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	6039      	str	r1, [r7, #0]
 800f756:	71fb      	strb	r3, [r7, #7]
 800f758:	4613      	mov	r3, r2
 800f75a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f75c:	79fb      	ldrb	r3, [r7, #7]
 800f75e:	2b23      	cmp	r3, #35	; 0x23
 800f760:	d84a      	bhi.n	800f7f8 <CDC_Control_FS+0xac>
 800f762:	a201      	add	r2, pc, #4	; (adr r2, 800f768 <CDC_Control_FS+0x1c>)
 800f764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f768:	0800f7f9 	.word	0x0800f7f9
 800f76c:	0800f7f9 	.word	0x0800f7f9
 800f770:	0800f7f9 	.word	0x0800f7f9
 800f774:	0800f7f9 	.word	0x0800f7f9
 800f778:	0800f7f9 	.word	0x0800f7f9
 800f77c:	0800f7f9 	.word	0x0800f7f9
 800f780:	0800f7f9 	.word	0x0800f7f9
 800f784:	0800f7f9 	.word	0x0800f7f9
 800f788:	0800f7f9 	.word	0x0800f7f9
 800f78c:	0800f7f9 	.word	0x0800f7f9
 800f790:	0800f7f9 	.word	0x0800f7f9
 800f794:	0800f7f9 	.word	0x0800f7f9
 800f798:	0800f7f9 	.word	0x0800f7f9
 800f79c:	0800f7f9 	.word	0x0800f7f9
 800f7a0:	0800f7f9 	.word	0x0800f7f9
 800f7a4:	0800f7f9 	.word	0x0800f7f9
 800f7a8:	0800f7f9 	.word	0x0800f7f9
 800f7ac:	0800f7f9 	.word	0x0800f7f9
 800f7b0:	0800f7f9 	.word	0x0800f7f9
 800f7b4:	0800f7f9 	.word	0x0800f7f9
 800f7b8:	0800f7f9 	.word	0x0800f7f9
 800f7bc:	0800f7f9 	.word	0x0800f7f9
 800f7c0:	0800f7f9 	.word	0x0800f7f9
 800f7c4:	0800f7f9 	.word	0x0800f7f9
 800f7c8:	0800f7f9 	.word	0x0800f7f9
 800f7cc:	0800f7f9 	.word	0x0800f7f9
 800f7d0:	0800f7f9 	.word	0x0800f7f9
 800f7d4:	0800f7f9 	.word	0x0800f7f9
 800f7d8:	0800f7f9 	.word	0x0800f7f9
 800f7dc:	0800f7f9 	.word	0x0800f7f9
 800f7e0:	0800f7f9 	.word	0x0800f7f9
 800f7e4:	0800f7f9 	.word	0x0800f7f9
 800f7e8:	0800f7f9 	.word	0x0800f7f9
 800f7ec:	0800f7f9 	.word	0x0800f7f9
 800f7f0:	0800f7f9 	.word	0x0800f7f9
 800f7f4:	0800f7f9 	.word	0x0800f7f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f7f8:	bf00      	nop
  }

  return (USBD_OK);
 800f7fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f812:	6879      	ldr	r1, [r7, #4]
 800f814:	4805      	ldr	r0, [pc, #20]	; (800f82c <CDC_Receive_FS+0x24>)
 800f816:	f7fe fdab 	bl	800e370 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f81a:	4804      	ldr	r0, [pc, #16]	; (800f82c <CDC_Receive_FS+0x24>)
 800f81c:	f7fe fdbc 	bl	800e398 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f820:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f822:	4618      	mov	r0, r3
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	24000ab0 	.word	0x24000ab0

0800f830 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f830:	b480      	push	{r7}
 800f832:	b087      	sub	sp, #28
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	4613      	mov	r3, r2
 800f83c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f83e:	2300      	movs	r3, #0
 800f840:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f846:	4618      	mov	r0, r3
 800f848:	371c      	adds	r7, #28
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
	...

0800f854 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	4603      	mov	r3, r0
 800f85c:	6039      	str	r1, [r7, #0]
 800f85e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	2212      	movs	r2, #18
 800f864:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f866:	4b03      	ldr	r3, [pc, #12]	; (800f874 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f868:	4618      	mov	r0, r3
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	24000150 	.word	0x24000150

0800f878 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f878:	b480      	push	{r7}
 800f87a:	b083      	sub	sp, #12
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	4603      	mov	r3, r0
 800f880:	6039      	str	r1, [r7, #0]
 800f882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	2204      	movs	r2, #4
 800f888:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f88a:	4b03      	ldr	r3, [pc, #12]	; (800f898 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	24000164 	.word	0x24000164

0800f89c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	6039      	str	r1, [r7, #0]
 800f8a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f8a8:	79fb      	ldrb	r3, [r7, #7]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d105      	bne.n	800f8ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	4907      	ldr	r1, [pc, #28]	; (800f8d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f8b2:	4808      	ldr	r0, [pc, #32]	; (800f8d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f8b4:	f7ff fdbf 	bl	800f436 <USBD_GetString>
 800f8b8:	e004      	b.n	800f8c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f8ba:	683a      	ldr	r2, [r7, #0]
 800f8bc:	4904      	ldr	r1, [pc, #16]	; (800f8d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800f8be:	4805      	ldr	r0, [pc, #20]	; (800f8d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800f8c0:	f7ff fdb9 	bl	800f436 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8c4:	4b02      	ldr	r3, [pc, #8]	; (800f8d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	24001d80 	.word	0x24001d80
 800f8d4:	08011404 	.word	0x08011404

0800f8d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	4603      	mov	r3, r0
 800f8e0:	6039      	str	r1, [r7, #0]
 800f8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	4904      	ldr	r1, [pc, #16]	; (800f8f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f8e8:	4804      	ldr	r0, [pc, #16]	; (800f8fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f8ea:	f7ff fda4 	bl	800f436 <USBD_GetString>
  return USBD_StrDesc;
 800f8ee:	4b02      	ldr	r3, [pc, #8]	; (800f8f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	24001d80 	.word	0x24001d80
 800f8fc:	0801141c 	.word	0x0801141c

0800f900 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	4603      	mov	r3, r0
 800f908:	6039      	str	r1, [r7, #0]
 800f90a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	221a      	movs	r2, #26
 800f910:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f912:	f000 f843 	bl	800f99c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f916:	4b02      	ldr	r3, [pc, #8]	; (800f920 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	24000168 	.word	0x24000168

0800f924 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	4603      	mov	r3, r0
 800f92c:	6039      	str	r1, [r7, #0]
 800f92e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f930:	79fb      	ldrb	r3, [r7, #7]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d105      	bne.n	800f942 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f936:	683a      	ldr	r2, [r7, #0]
 800f938:	4907      	ldr	r1, [pc, #28]	; (800f958 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f93a:	4808      	ldr	r0, [pc, #32]	; (800f95c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f93c:	f7ff fd7b 	bl	800f436 <USBD_GetString>
 800f940:	e004      	b.n	800f94c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f942:	683a      	ldr	r2, [r7, #0]
 800f944:	4904      	ldr	r1, [pc, #16]	; (800f958 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f946:	4805      	ldr	r0, [pc, #20]	; (800f95c <USBD_FS_ConfigStrDescriptor+0x38>)
 800f948:	f7ff fd75 	bl	800f436 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f94c:	4b02      	ldr	r3, [pc, #8]	; (800f958 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	24001d80 	.word	0x24001d80
 800f95c:	08011430 	.word	0x08011430

0800f960 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	4603      	mov	r3, r0
 800f968:	6039      	str	r1, [r7, #0]
 800f96a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f96c:	79fb      	ldrb	r3, [r7, #7]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d105      	bne.n	800f97e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f972:	683a      	ldr	r2, [r7, #0]
 800f974:	4907      	ldr	r1, [pc, #28]	; (800f994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f976:	4808      	ldr	r0, [pc, #32]	; (800f998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f978:	f7ff fd5d 	bl	800f436 <USBD_GetString>
 800f97c:	e004      	b.n	800f988 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f97e:	683a      	ldr	r2, [r7, #0]
 800f980:	4904      	ldr	r1, [pc, #16]	; (800f994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f982:	4805      	ldr	r0, [pc, #20]	; (800f998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f984:	f7ff fd57 	bl	800f436 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f988:	4b02      	ldr	r3, [pc, #8]	; (800f994 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3708      	adds	r7, #8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	24001d80 	.word	0x24001d80
 800f998:	0801143c 	.word	0x0801143c

0800f99c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f9a2:	4b0f      	ldr	r3, [pc, #60]	; (800f9e0 <Get_SerialNum+0x44>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f9a8:	4b0e      	ldr	r3, [pc, #56]	; (800f9e4 <Get_SerialNum+0x48>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f9ae:	4b0e      	ldr	r3, [pc, #56]	; (800f9e8 <Get_SerialNum+0x4c>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d009      	beq.n	800f9d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f9c2:	2208      	movs	r2, #8
 800f9c4:	4909      	ldr	r1, [pc, #36]	; (800f9ec <Get_SerialNum+0x50>)
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f000 f814 	bl	800f9f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f9cc:	2204      	movs	r2, #4
 800f9ce:	4908      	ldr	r1, [pc, #32]	; (800f9f0 <Get_SerialNum+0x54>)
 800f9d0:	68b8      	ldr	r0, [r7, #8]
 800f9d2:	f000 f80f 	bl	800f9f4 <IntToUnicode>
  }
}
 800f9d6:	bf00      	nop
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	1ff1e800 	.word	0x1ff1e800
 800f9e4:	1ff1e804 	.word	0x1ff1e804
 800f9e8:	1ff1e808 	.word	0x1ff1e808
 800f9ec:	2400016a 	.word	0x2400016a
 800f9f0:	2400017a 	.word	0x2400017a

0800f9f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b087      	sub	sp, #28
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fa02:	2300      	movs	r3, #0
 800fa04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fa06:	2300      	movs	r3, #0
 800fa08:	75fb      	strb	r3, [r7, #23]
 800fa0a:	e027      	b.n	800fa5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	0f1b      	lsrs	r3, r3, #28
 800fa10:	2b09      	cmp	r3, #9
 800fa12:	d80b      	bhi.n	800fa2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	0f1b      	lsrs	r3, r3, #28
 800fa18:	b2da      	uxtb	r2, r3
 800fa1a:	7dfb      	ldrb	r3, [r7, #23]
 800fa1c:	005b      	lsls	r3, r3, #1
 800fa1e:	4619      	mov	r1, r3
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	440b      	add	r3, r1
 800fa24:	3230      	adds	r2, #48	; 0x30
 800fa26:	b2d2      	uxtb	r2, r2
 800fa28:	701a      	strb	r2, [r3, #0]
 800fa2a:	e00a      	b.n	800fa42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	0f1b      	lsrs	r3, r3, #28
 800fa30:	b2da      	uxtb	r2, r3
 800fa32:	7dfb      	ldrb	r3, [r7, #23]
 800fa34:	005b      	lsls	r3, r3, #1
 800fa36:	4619      	mov	r1, r3
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	440b      	add	r3, r1
 800fa3c:	3237      	adds	r2, #55	; 0x37
 800fa3e:	b2d2      	uxtb	r2, r2
 800fa40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	011b      	lsls	r3, r3, #4
 800fa46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
 800fa4a:	005b      	lsls	r3, r3, #1
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	68ba      	ldr	r2, [r7, #8]
 800fa50:	4413      	add	r3, r2
 800fa52:	2200      	movs	r2, #0
 800fa54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa56:	7dfb      	ldrb	r3, [r7, #23]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	75fb      	strb	r3, [r7, #23]
 800fa5c:	7dfa      	ldrb	r2, [r7, #23]
 800fa5e:	79fb      	ldrb	r3, [r7, #7]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d3d3      	bcc.n	800fa0c <IntToUnicode+0x18>
  }
}
 800fa64:	bf00      	nop
 800fa66:	371c      	adds	r7, #28
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b08a      	sub	sp, #40	; 0x28
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa78:	f107 0314 	add.w	r3, r7, #20
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	601a      	str	r2, [r3, #0]
 800fa80:	605a      	str	r2, [r3, #4]
 800fa82:	609a      	str	r2, [r3, #8]
 800fa84:	60da      	str	r2, [r3, #12]
 800fa86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a1e      	ldr	r2, [pc, #120]	; (800fb08 <HAL_PCD_MspInit+0x98>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d136      	bne.n	800fb00 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa92:	4b1e      	ldr	r3, [pc, #120]	; (800fb0c <HAL_PCD_MspInit+0x9c>)
 800fa94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa98:	4a1c      	ldr	r2, [pc, #112]	; (800fb0c <HAL_PCD_MspInit+0x9c>)
 800fa9a:	f043 0301 	orr.w	r3, r3, #1
 800fa9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800faa2:	4b1a      	ldr	r3, [pc, #104]	; (800fb0c <HAL_PCD_MspInit+0x9c>)
 800faa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800faa8:	f003 0301 	and.w	r3, r3, #1
 800faac:	613b      	str	r3, [r7, #16]
 800faae:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fab0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fab6:	2302      	movs	r3, #2
 800fab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800faba:	2300      	movs	r3, #0
 800fabc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fabe:	2300      	movs	r3, #0
 800fac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fac2:	230a      	movs	r3, #10
 800fac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fac6:	f107 0314 	add.w	r3, r7, #20
 800faca:	4619      	mov	r1, r3
 800facc:	4810      	ldr	r0, [pc, #64]	; (800fb10 <HAL_PCD_MspInit+0xa0>)
 800face:	f7f4 fd4b 	bl	8004568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fad2:	4b0e      	ldr	r3, [pc, #56]	; (800fb0c <HAL_PCD_MspInit+0x9c>)
 800fad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fad8:	4a0c      	ldr	r2, [pc, #48]	; (800fb0c <HAL_PCD_MspInit+0x9c>)
 800fada:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fade:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fae2:	4b0a      	ldr	r3, [pc, #40]	; (800fb0c <HAL_PCD_MspInit+0x9c>)
 800fae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800faec:	60fb      	str	r3, [r7, #12]
 800faee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800faf0:	2200      	movs	r2, #0
 800faf2:	2100      	movs	r1, #0
 800faf4:	2065      	movs	r0, #101	; 0x65
 800faf6:	f7f2 f8c2 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fafa:	2065      	movs	r0, #101	; 0x65
 800fafc:	f7f2 f8d9 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fb00:	bf00      	nop
 800fb02:	3728      	adds	r7, #40	; 0x28
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	40080000 	.word	0x40080000
 800fb0c:	58024400 	.word	0x58024400
 800fb10:	58020000 	.word	0x58020000

0800fb14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fb28:	4619      	mov	r1, r3
 800fb2a:	4610      	mov	r0, r2
 800fb2c:	f7fe fd00 	bl	800e530 <USBD_LL_SetupStage>
}
 800fb30:	bf00      	nop
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	460b      	mov	r3, r1
 800fb42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fb4a:	78fa      	ldrb	r2, [r7, #3]
 800fb4c:	6879      	ldr	r1, [r7, #4]
 800fb4e:	4613      	mov	r3, r2
 800fb50:	00db      	lsls	r3, r3, #3
 800fb52:	1a9b      	subs	r3, r3, r2
 800fb54:	009b      	lsls	r3, r3, #2
 800fb56:	440b      	add	r3, r1
 800fb58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fb5c:	681a      	ldr	r2, [r3, #0]
 800fb5e:	78fb      	ldrb	r3, [r7, #3]
 800fb60:	4619      	mov	r1, r3
 800fb62:	f7fe fd38 	bl	800e5d6 <USBD_LL_DataOutStage>
}
 800fb66:	bf00      	nop
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b082      	sub	sp, #8
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
 800fb76:	460b      	mov	r3, r1
 800fb78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fb80:	78fa      	ldrb	r2, [r7, #3]
 800fb82:	6879      	ldr	r1, [r7, #4]
 800fb84:	4613      	mov	r3, r2
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	1a9b      	subs	r3, r3, r2
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	440b      	add	r3, r1
 800fb8e:	3348      	adds	r3, #72	; 0x48
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	78fb      	ldrb	r3, [r7, #3]
 800fb94:	4619      	mov	r1, r3
 800fb96:	f7fe fd81 	bl	800e69c <USBD_LL_DataInStage>
}
 800fb9a:	bf00      	nop
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b082      	sub	sp, #8
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fe fe85 	bl	800e8c0 <USBD_LL_SOF>
}
 800fbb6:	bf00      	nop
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b084      	sub	sp, #16
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d102      	bne.n	800fbd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	73fb      	strb	r3, [r7, #15]
 800fbd6:	e008      	b.n	800fbea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	2b02      	cmp	r3, #2
 800fbde:	d102      	bne.n	800fbe6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	73fb      	strb	r3, [r7, #15]
 800fbe4:	e001      	b.n	800fbea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fbe6:	f7f1 fb17 	bl	8001218 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fbf0:	7bfa      	ldrb	r2, [r7, #15]
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe fe28 	bl	800e84a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fe fde1 	bl	800e7c8 <USBD_LL_Reset>
}
 800fc06:	bf00      	nop
 800fc08:	3710      	adds	r7, #16
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
	...

0800fc10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fe fe23 	bl	800e86a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	6812      	ldr	r2, [r2, #0]
 800fc32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fc36:	f043 0301 	orr.w	r3, r3, #1
 800fc3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6a1b      	ldr	r3, [r3, #32]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d005      	beq.n	800fc50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc44:	4b04      	ldr	r3, [pc, #16]	; (800fc58 <HAL_PCD_SuspendCallback+0x48>)
 800fc46:	691b      	ldr	r3, [r3, #16]
 800fc48:	4a03      	ldr	r2, [pc, #12]	; (800fc58 <HAL_PCD_SuspendCallback+0x48>)
 800fc4a:	f043 0306 	orr.w	r3, r3, #6
 800fc4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fc50:	bf00      	nop
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	e000ed00 	.word	0xe000ed00

0800fc5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fe fe12 	bl	800e894 <USBD_LL_Resume>
}
 800fc70:	bf00      	nop
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	460b      	mov	r3, r1
 800fc82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fc8a:	78fa      	ldrb	r2, [r7, #3]
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fe fe3d 	bl	800e90e <USBD_LL_IsoOUTIncomplete>
}
 800fc94:	bf00      	nop
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	460b      	mov	r3, r1
 800fca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fcae:	78fa      	ldrb	r2, [r7, #3]
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fe fe1e 	bl	800e8f4 <USBD_LL_IsoINIncomplete>
}
 800fcb8:	bf00      	nop
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fe fe2a 	bl	800e928 <USBD_LL_DevConnected>
}
 800fcd4:	bf00      	nop
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fe fe27 	bl	800e93e <USBD_LL_DevDisconnected>
}
 800fcf0:	bf00      	nop
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d13e      	bne.n	800fd86 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fd08:	4a21      	ldr	r2, [pc, #132]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a1f      	ldr	r2, [pc, #124]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd18:	4b1d      	ldr	r3, [pc, #116]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd1a:	4a1e      	ldr	r2, [pc, #120]	; (800fd94 <USBD_LL_Init+0x9c>)
 800fd1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fd1e:	4b1c      	ldr	r3, [pc, #112]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd20:	2209      	movs	r2, #9
 800fd22:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fd24:	4b1a      	ldr	r3, [pc, #104]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd26:	2202      	movs	r2, #2
 800fd28:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd2a:	4b19      	ldr	r3, [pc, #100]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fd30:	4b17      	ldr	r3, [pc, #92]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd32:	2202      	movs	r2, #2
 800fd34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd36:	4b16      	ldr	r3, [pc, #88]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fd3c:	4b14      	ldr	r3, [pc, #80]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fd42:	4b13      	ldr	r3, [pc, #76]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fd48:	4b11      	ldr	r3, [pc, #68]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fd4e:	4b10      	ldr	r3, [pc, #64]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fd54:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd56:	2200      	movs	r2, #0
 800fd58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd5a:	480d      	ldr	r0, [pc, #52]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd5c:	f7f4 fe00 	bl	8004960 <HAL_PCD_Init>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d001      	beq.n	800fd6a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fd66:	f7f1 fa57 	bl	8001218 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd6a:	2180      	movs	r1, #128	; 0x80
 800fd6c:	4808      	ldr	r0, [pc, #32]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd6e:	f7f5 ff92 	bl	8005c96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fd72:	2240      	movs	r2, #64	; 0x40
 800fd74:	2100      	movs	r1, #0
 800fd76:	4806      	ldr	r0, [pc, #24]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd78:	f7f5 ff46 	bl	8005c08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fd7c:	2280      	movs	r2, #128	; 0x80
 800fd7e:	2101      	movs	r1, #1
 800fd80:	4803      	ldr	r0, [pc, #12]	; (800fd90 <USBD_LL_Init+0x98>)
 800fd82:	f7f5 ff41 	bl	8005c08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fd86:	2300      	movs	r3, #0
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3708      	adds	r7, #8
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	24001f80 	.word	0x24001f80
 800fd94:	40080000 	.word	0x40080000

0800fd98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fda0:	2300      	movs	r3, #0
 800fda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fda4:	2300      	movs	r3, #0
 800fda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7f4 fefa 	bl	8004ba8 <HAL_PCD_Start>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdb8:	7bfb      	ldrb	r3, [r7, #15]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f000 f92a 	bl	8010014 <USBD_Get_USB_Status>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b084      	sub	sp, #16
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
 800fdd6:	4608      	mov	r0, r1
 800fdd8:	4611      	mov	r1, r2
 800fdda:	461a      	mov	r2, r3
 800fddc:	4603      	mov	r3, r0
 800fdde:	70fb      	strb	r3, [r7, #3]
 800fde0:	460b      	mov	r3, r1
 800fde2:	70bb      	strb	r3, [r7, #2]
 800fde4:	4613      	mov	r3, r2
 800fde6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fde8:	2300      	movs	r3, #0
 800fdea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdec:	2300      	movs	r3, #0
 800fdee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fdf6:	78bb      	ldrb	r3, [r7, #2]
 800fdf8:	883a      	ldrh	r2, [r7, #0]
 800fdfa:	78f9      	ldrb	r1, [r7, #3]
 800fdfc:	f7f5 fb0b 	bl	8005416 <HAL_PCD_EP_Open>
 800fe00:	4603      	mov	r3, r0
 800fe02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe04:	7bfb      	ldrb	r3, [r7, #15]
 800fe06:	4618      	mov	r0, r3
 800fe08:	f000 f904 	bl	8010014 <USBD_Get_USB_Status>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe10:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b084      	sub	sp, #16
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
 800fe22:	460b      	mov	r3, r1
 800fe24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe26:	2300      	movs	r3, #0
 800fe28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe34:	78fa      	ldrb	r2, [r7, #3]
 800fe36:	4611      	mov	r1, r2
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7f5 fb54 	bl	80054e6 <HAL_PCD_EP_Close>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f000 f8e5 	bl	8010014 <USBD_Get_USB_Status>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	460b      	mov	r3, r1
 800fe62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fe72:	78fa      	ldrb	r2, [r7, #3]
 800fe74:	4611      	mov	r1, r2
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7f5 fc2c 	bl	80056d4 <HAL_PCD_EP_SetStall>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe80:	7bfb      	ldrb	r3, [r7, #15]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f000 f8c6 	bl	8010014 <USBD_Get_USB_Status>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b084      	sub	sp, #16
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	460b      	mov	r3, r1
 800fea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fea2:	2300      	movs	r3, #0
 800fea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fea6:	2300      	movs	r3, #0
 800fea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800feb0:	78fa      	ldrb	r2, [r7, #3]
 800feb2:	4611      	mov	r1, r2
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7f5 fc71 	bl	800579c <HAL_PCD_EP_ClrStall>
 800feba:	4603      	mov	r3, r0
 800febc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	4618      	mov	r0, r3
 800fec2:	f000 f8a7 	bl	8010014 <USBD_Get_USB_Status>
 800fec6:	4603      	mov	r3, r0
 800fec8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800feca:	7bbb      	ldrb	r3, [r7, #14]
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	460b      	mov	r3, r1
 800fede:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fee6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800feec:	2b00      	cmp	r3, #0
 800feee:	da0b      	bge.n	800ff08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fef0:	78fb      	ldrb	r3, [r7, #3]
 800fef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fef6:	68f9      	ldr	r1, [r7, #12]
 800fef8:	4613      	mov	r3, r2
 800fefa:	00db      	lsls	r3, r3, #3
 800fefc:	1a9b      	subs	r3, r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	440b      	add	r3, r1
 800ff02:	333e      	adds	r3, #62	; 0x3e
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	e00b      	b.n	800ff20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ff08:	78fb      	ldrb	r3, [r7, #3]
 800ff0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff0e:	68f9      	ldr	r1, [r7, #12]
 800ff10:	4613      	mov	r3, r2
 800ff12:	00db      	lsls	r3, r3, #3
 800ff14:	1a9b      	subs	r3, r3, r2
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	440b      	add	r3, r1
 800ff1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	460b      	mov	r3, r1
 800ff36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff46:	78fa      	ldrb	r2, [r7, #3]
 800ff48:	4611      	mov	r1, r2
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7f5 fa3e 	bl	80053cc <HAL_PCD_SetAddress>
 800ff50:	4603      	mov	r3, r0
 800ff52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff54:	7bfb      	ldrb	r3, [r7, #15]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f000 f85c 	bl	8010014 <USBD_Get_USB_Status>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b086      	sub	sp, #24
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	60f8      	str	r0, [r7, #12]
 800ff72:	607a      	str	r2, [r7, #4]
 800ff74:	603b      	str	r3, [r7, #0]
 800ff76:	460b      	mov	r3, r1
 800ff78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff88:	7af9      	ldrb	r1, [r7, #11]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	f7f5 fb57 	bl	8005640 <HAL_PCD_EP_Transmit>
 800ff92:	4603      	mov	r3, r0
 800ff94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff96:	7dfb      	ldrb	r3, [r7, #23]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f000 f83b 	bl	8010014 <USBD_Get_USB_Status>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffa2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3718      	adds	r7, #24
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b086      	sub	sp, #24
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	607a      	str	r2, [r7, #4]
 800ffb6:	603b      	str	r3, [r7, #0]
 800ffb8:	460b      	mov	r3, r1
 800ffba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ffca:	7af9      	ldrb	r1, [r7, #11]
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	f7f5 fad3 	bl	800557a <HAL_PCD_EP_Receive>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffd8:	7dfb      	ldrb	r3, [r7, #23]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 f81a 	bl	8010014 <USBD_Get_USB_Status>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffe4:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}

0800ffee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
 800fff6:	460b      	mov	r3, r1
 800fff8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010000:	78fa      	ldrb	r2, [r7, #3]
 8010002:	4611      	mov	r1, r2
 8010004:	4618      	mov	r0, r3
 8010006:	f7f5 fb03 	bl	8005610 <HAL_PCD_EP_GetRxCount>
 801000a:	4603      	mov	r3, r0
}
 801000c:	4618      	mov	r0, r3
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010014:	b480      	push	{r7}
 8010016:	b085      	sub	sp, #20
 8010018:	af00      	add	r7, sp, #0
 801001a:	4603      	mov	r3, r0
 801001c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801001e:	2300      	movs	r3, #0
 8010020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010022:	79fb      	ldrb	r3, [r7, #7]
 8010024:	2b03      	cmp	r3, #3
 8010026:	d817      	bhi.n	8010058 <USBD_Get_USB_Status+0x44>
 8010028:	a201      	add	r2, pc, #4	; (adr r2, 8010030 <USBD_Get_USB_Status+0x1c>)
 801002a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002e:	bf00      	nop
 8010030:	08010041 	.word	0x08010041
 8010034:	08010047 	.word	0x08010047
 8010038:	0801004d 	.word	0x0801004d
 801003c:	08010053 	.word	0x08010053
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010040:	2300      	movs	r3, #0
 8010042:	73fb      	strb	r3, [r7, #15]
    break;
 8010044:	e00b      	b.n	801005e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010046:	2303      	movs	r3, #3
 8010048:	73fb      	strb	r3, [r7, #15]
    break;
 801004a:	e008      	b.n	801005e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801004c:	2301      	movs	r3, #1
 801004e:	73fb      	strb	r3, [r7, #15]
    break;
 8010050:	e005      	b.n	801005e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010052:	2303      	movs	r3, #3
 8010054:	73fb      	strb	r3, [r7, #15]
    break;
 8010056:	e002      	b.n	801005e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010058:	2303      	movs	r3, #3
 801005a:	73fb      	strb	r3, [r7, #15]
    break;
 801005c:	bf00      	nop
  }
  return usb_status;
 801005e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <__errno>:
 801006c:	4b01      	ldr	r3, [pc, #4]	; (8010074 <__errno+0x8>)
 801006e:	6818      	ldr	r0, [r3, #0]
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	24000184 	.word	0x24000184

08010078 <__libc_init_array>:
 8010078:	b570      	push	{r4, r5, r6, lr}
 801007a:	4e0d      	ldr	r6, [pc, #52]	; (80100b0 <__libc_init_array+0x38>)
 801007c:	4c0d      	ldr	r4, [pc, #52]	; (80100b4 <__libc_init_array+0x3c>)
 801007e:	1ba4      	subs	r4, r4, r6
 8010080:	10a4      	asrs	r4, r4, #2
 8010082:	2500      	movs	r5, #0
 8010084:	42a5      	cmp	r5, r4
 8010086:	d109      	bne.n	801009c <__libc_init_array+0x24>
 8010088:	4e0b      	ldr	r6, [pc, #44]	; (80100b8 <__libc_init_array+0x40>)
 801008a:	4c0c      	ldr	r4, [pc, #48]	; (80100bc <__libc_init_array+0x44>)
 801008c:	f001 f938 	bl	8011300 <_init>
 8010090:	1ba4      	subs	r4, r4, r6
 8010092:	10a4      	asrs	r4, r4, #2
 8010094:	2500      	movs	r5, #0
 8010096:	42a5      	cmp	r5, r4
 8010098:	d105      	bne.n	80100a6 <__libc_init_array+0x2e>
 801009a:	bd70      	pop	{r4, r5, r6, pc}
 801009c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80100a0:	4798      	blx	r3
 80100a2:	3501      	adds	r5, #1
 80100a4:	e7ee      	b.n	8010084 <__libc_init_array+0xc>
 80100a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80100aa:	4798      	blx	r3
 80100ac:	3501      	adds	r5, #1
 80100ae:	e7f2      	b.n	8010096 <__libc_init_array+0x1e>
 80100b0:	08011530 	.word	0x08011530
 80100b4:	08011530 	.word	0x08011530
 80100b8:	08011530 	.word	0x08011530
 80100bc:	08011534 	.word	0x08011534

080100c0 <malloc>:
 80100c0:	4b02      	ldr	r3, [pc, #8]	; (80100cc <malloc+0xc>)
 80100c2:	4601      	mov	r1, r0
 80100c4:	6818      	ldr	r0, [r3, #0]
 80100c6:	f000 b86d 	b.w	80101a4 <_malloc_r>
 80100ca:	bf00      	nop
 80100cc:	24000184 	.word	0x24000184

080100d0 <free>:
 80100d0:	4b02      	ldr	r3, [pc, #8]	; (80100dc <free+0xc>)
 80100d2:	4601      	mov	r1, r0
 80100d4:	6818      	ldr	r0, [r3, #0]
 80100d6:	f000 b817 	b.w	8010108 <_free_r>
 80100da:	bf00      	nop
 80100dc:	24000184 	.word	0x24000184

080100e0 <memcpy>:
 80100e0:	b510      	push	{r4, lr}
 80100e2:	1e43      	subs	r3, r0, #1
 80100e4:	440a      	add	r2, r1
 80100e6:	4291      	cmp	r1, r2
 80100e8:	d100      	bne.n	80100ec <memcpy+0xc>
 80100ea:	bd10      	pop	{r4, pc}
 80100ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100f4:	e7f7      	b.n	80100e6 <memcpy+0x6>

080100f6 <memset>:
 80100f6:	4402      	add	r2, r0
 80100f8:	4603      	mov	r3, r0
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d100      	bne.n	8010100 <memset+0xa>
 80100fe:	4770      	bx	lr
 8010100:	f803 1b01 	strb.w	r1, [r3], #1
 8010104:	e7f9      	b.n	80100fa <memset+0x4>
	...

08010108 <_free_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	4605      	mov	r5, r0
 801010c:	2900      	cmp	r1, #0
 801010e:	d045      	beq.n	801019c <_free_r+0x94>
 8010110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010114:	1f0c      	subs	r4, r1, #4
 8010116:	2b00      	cmp	r3, #0
 8010118:	bfb8      	it	lt
 801011a:	18e4      	addlt	r4, r4, r3
 801011c:	f000 f9d6 	bl	80104cc <__malloc_lock>
 8010120:	4a1f      	ldr	r2, [pc, #124]	; (80101a0 <_free_r+0x98>)
 8010122:	6813      	ldr	r3, [r2, #0]
 8010124:	4610      	mov	r0, r2
 8010126:	b933      	cbnz	r3, 8010136 <_free_r+0x2e>
 8010128:	6063      	str	r3, [r4, #4]
 801012a:	6014      	str	r4, [r2, #0]
 801012c:	4628      	mov	r0, r5
 801012e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010132:	f000 b9cc 	b.w	80104ce <__malloc_unlock>
 8010136:	42a3      	cmp	r3, r4
 8010138:	d90c      	bls.n	8010154 <_free_r+0x4c>
 801013a:	6821      	ldr	r1, [r4, #0]
 801013c:	1862      	adds	r2, r4, r1
 801013e:	4293      	cmp	r3, r2
 8010140:	bf04      	itt	eq
 8010142:	681a      	ldreq	r2, [r3, #0]
 8010144:	685b      	ldreq	r3, [r3, #4]
 8010146:	6063      	str	r3, [r4, #4]
 8010148:	bf04      	itt	eq
 801014a:	1852      	addeq	r2, r2, r1
 801014c:	6022      	streq	r2, [r4, #0]
 801014e:	6004      	str	r4, [r0, #0]
 8010150:	e7ec      	b.n	801012c <_free_r+0x24>
 8010152:	4613      	mov	r3, r2
 8010154:	685a      	ldr	r2, [r3, #4]
 8010156:	b10a      	cbz	r2, 801015c <_free_r+0x54>
 8010158:	42a2      	cmp	r2, r4
 801015a:	d9fa      	bls.n	8010152 <_free_r+0x4a>
 801015c:	6819      	ldr	r1, [r3, #0]
 801015e:	1858      	adds	r0, r3, r1
 8010160:	42a0      	cmp	r0, r4
 8010162:	d10b      	bne.n	801017c <_free_r+0x74>
 8010164:	6820      	ldr	r0, [r4, #0]
 8010166:	4401      	add	r1, r0
 8010168:	1858      	adds	r0, r3, r1
 801016a:	4282      	cmp	r2, r0
 801016c:	6019      	str	r1, [r3, #0]
 801016e:	d1dd      	bne.n	801012c <_free_r+0x24>
 8010170:	6810      	ldr	r0, [r2, #0]
 8010172:	6852      	ldr	r2, [r2, #4]
 8010174:	605a      	str	r2, [r3, #4]
 8010176:	4401      	add	r1, r0
 8010178:	6019      	str	r1, [r3, #0]
 801017a:	e7d7      	b.n	801012c <_free_r+0x24>
 801017c:	d902      	bls.n	8010184 <_free_r+0x7c>
 801017e:	230c      	movs	r3, #12
 8010180:	602b      	str	r3, [r5, #0]
 8010182:	e7d3      	b.n	801012c <_free_r+0x24>
 8010184:	6820      	ldr	r0, [r4, #0]
 8010186:	1821      	adds	r1, r4, r0
 8010188:	428a      	cmp	r2, r1
 801018a:	bf04      	itt	eq
 801018c:	6811      	ldreq	r1, [r2, #0]
 801018e:	6852      	ldreq	r2, [r2, #4]
 8010190:	6062      	str	r2, [r4, #4]
 8010192:	bf04      	itt	eq
 8010194:	1809      	addeq	r1, r1, r0
 8010196:	6021      	streq	r1, [r4, #0]
 8010198:	605c      	str	r4, [r3, #4]
 801019a:	e7c7      	b.n	801012c <_free_r+0x24>
 801019c:	bd38      	pop	{r3, r4, r5, pc}
 801019e:	bf00      	nop
 80101a0:	2400021c 	.word	0x2400021c

080101a4 <_malloc_r>:
 80101a4:	b570      	push	{r4, r5, r6, lr}
 80101a6:	1ccd      	adds	r5, r1, #3
 80101a8:	f025 0503 	bic.w	r5, r5, #3
 80101ac:	3508      	adds	r5, #8
 80101ae:	2d0c      	cmp	r5, #12
 80101b0:	bf38      	it	cc
 80101b2:	250c      	movcc	r5, #12
 80101b4:	2d00      	cmp	r5, #0
 80101b6:	4606      	mov	r6, r0
 80101b8:	db01      	blt.n	80101be <_malloc_r+0x1a>
 80101ba:	42a9      	cmp	r1, r5
 80101bc:	d903      	bls.n	80101c6 <_malloc_r+0x22>
 80101be:	230c      	movs	r3, #12
 80101c0:	6033      	str	r3, [r6, #0]
 80101c2:	2000      	movs	r0, #0
 80101c4:	bd70      	pop	{r4, r5, r6, pc}
 80101c6:	f000 f981 	bl	80104cc <__malloc_lock>
 80101ca:	4a21      	ldr	r2, [pc, #132]	; (8010250 <_malloc_r+0xac>)
 80101cc:	6814      	ldr	r4, [r2, #0]
 80101ce:	4621      	mov	r1, r4
 80101d0:	b991      	cbnz	r1, 80101f8 <_malloc_r+0x54>
 80101d2:	4c20      	ldr	r4, [pc, #128]	; (8010254 <_malloc_r+0xb0>)
 80101d4:	6823      	ldr	r3, [r4, #0]
 80101d6:	b91b      	cbnz	r3, 80101e0 <_malloc_r+0x3c>
 80101d8:	4630      	mov	r0, r6
 80101da:	f000 f869 	bl	80102b0 <_sbrk_r>
 80101de:	6020      	str	r0, [r4, #0]
 80101e0:	4629      	mov	r1, r5
 80101e2:	4630      	mov	r0, r6
 80101e4:	f000 f864 	bl	80102b0 <_sbrk_r>
 80101e8:	1c43      	adds	r3, r0, #1
 80101ea:	d124      	bne.n	8010236 <_malloc_r+0x92>
 80101ec:	230c      	movs	r3, #12
 80101ee:	6033      	str	r3, [r6, #0]
 80101f0:	4630      	mov	r0, r6
 80101f2:	f000 f96c 	bl	80104ce <__malloc_unlock>
 80101f6:	e7e4      	b.n	80101c2 <_malloc_r+0x1e>
 80101f8:	680b      	ldr	r3, [r1, #0]
 80101fa:	1b5b      	subs	r3, r3, r5
 80101fc:	d418      	bmi.n	8010230 <_malloc_r+0x8c>
 80101fe:	2b0b      	cmp	r3, #11
 8010200:	d90f      	bls.n	8010222 <_malloc_r+0x7e>
 8010202:	600b      	str	r3, [r1, #0]
 8010204:	50cd      	str	r5, [r1, r3]
 8010206:	18cc      	adds	r4, r1, r3
 8010208:	4630      	mov	r0, r6
 801020a:	f000 f960 	bl	80104ce <__malloc_unlock>
 801020e:	f104 000b 	add.w	r0, r4, #11
 8010212:	1d23      	adds	r3, r4, #4
 8010214:	f020 0007 	bic.w	r0, r0, #7
 8010218:	1ac3      	subs	r3, r0, r3
 801021a:	d0d3      	beq.n	80101c4 <_malloc_r+0x20>
 801021c:	425a      	negs	r2, r3
 801021e:	50e2      	str	r2, [r4, r3]
 8010220:	e7d0      	b.n	80101c4 <_malloc_r+0x20>
 8010222:	428c      	cmp	r4, r1
 8010224:	684b      	ldr	r3, [r1, #4]
 8010226:	bf16      	itet	ne
 8010228:	6063      	strne	r3, [r4, #4]
 801022a:	6013      	streq	r3, [r2, #0]
 801022c:	460c      	movne	r4, r1
 801022e:	e7eb      	b.n	8010208 <_malloc_r+0x64>
 8010230:	460c      	mov	r4, r1
 8010232:	6849      	ldr	r1, [r1, #4]
 8010234:	e7cc      	b.n	80101d0 <_malloc_r+0x2c>
 8010236:	1cc4      	adds	r4, r0, #3
 8010238:	f024 0403 	bic.w	r4, r4, #3
 801023c:	42a0      	cmp	r0, r4
 801023e:	d005      	beq.n	801024c <_malloc_r+0xa8>
 8010240:	1a21      	subs	r1, r4, r0
 8010242:	4630      	mov	r0, r6
 8010244:	f000 f834 	bl	80102b0 <_sbrk_r>
 8010248:	3001      	adds	r0, #1
 801024a:	d0cf      	beq.n	80101ec <_malloc_r+0x48>
 801024c:	6025      	str	r5, [r4, #0]
 801024e:	e7db      	b.n	8010208 <_malloc_r+0x64>
 8010250:	2400021c 	.word	0x2400021c
 8010254:	24000220 	.word	0x24000220

08010258 <iprintf>:
 8010258:	b40f      	push	{r0, r1, r2, r3}
 801025a:	4b0a      	ldr	r3, [pc, #40]	; (8010284 <iprintf+0x2c>)
 801025c:	b513      	push	{r0, r1, r4, lr}
 801025e:	681c      	ldr	r4, [r3, #0]
 8010260:	b124      	cbz	r4, 801026c <iprintf+0x14>
 8010262:	69a3      	ldr	r3, [r4, #24]
 8010264:	b913      	cbnz	r3, 801026c <iprintf+0x14>
 8010266:	4620      	mov	r0, r4
 8010268:	f000 f8a6 	bl	80103b8 <__sinit>
 801026c:	ab05      	add	r3, sp, #20
 801026e:	9a04      	ldr	r2, [sp, #16]
 8010270:	68a1      	ldr	r1, [r4, #8]
 8010272:	9301      	str	r3, [sp, #4]
 8010274:	4620      	mov	r0, r4
 8010276:	f000 faa7 	bl	80107c8 <_vfiprintf_r>
 801027a:	b002      	add	sp, #8
 801027c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010280:	b004      	add	sp, #16
 8010282:	4770      	bx	lr
 8010284:	24000184 	.word	0x24000184

08010288 <putchar>:
 8010288:	b538      	push	{r3, r4, r5, lr}
 801028a:	4b08      	ldr	r3, [pc, #32]	; (80102ac <putchar+0x24>)
 801028c:	681c      	ldr	r4, [r3, #0]
 801028e:	4605      	mov	r5, r0
 8010290:	b124      	cbz	r4, 801029c <putchar+0x14>
 8010292:	69a3      	ldr	r3, [r4, #24]
 8010294:	b913      	cbnz	r3, 801029c <putchar+0x14>
 8010296:	4620      	mov	r0, r4
 8010298:	f000 f88e 	bl	80103b8 <__sinit>
 801029c:	68a2      	ldr	r2, [r4, #8]
 801029e:	4629      	mov	r1, r5
 80102a0:	4620      	mov	r0, r4
 80102a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102a6:	f000 bd2d 	b.w	8010d04 <_putc_r>
 80102aa:	bf00      	nop
 80102ac:	24000184 	.word	0x24000184

080102b0 <_sbrk_r>:
 80102b0:	b538      	push	{r3, r4, r5, lr}
 80102b2:	4c06      	ldr	r4, [pc, #24]	; (80102cc <_sbrk_r+0x1c>)
 80102b4:	2300      	movs	r3, #0
 80102b6:	4605      	mov	r5, r0
 80102b8:	4608      	mov	r0, r1
 80102ba:	6023      	str	r3, [r4, #0]
 80102bc:	f7f1 fa58 	bl	8001770 <_sbrk>
 80102c0:	1c43      	adds	r3, r0, #1
 80102c2:	d102      	bne.n	80102ca <_sbrk_r+0x1a>
 80102c4:	6823      	ldr	r3, [r4, #0]
 80102c6:	b103      	cbz	r3, 80102ca <_sbrk_r+0x1a>
 80102c8:	602b      	str	r3, [r5, #0]
 80102ca:	bd38      	pop	{r3, r4, r5, pc}
 80102cc:	24002388 	.word	0x24002388

080102d0 <sniprintf>:
 80102d0:	b40c      	push	{r2, r3}
 80102d2:	b530      	push	{r4, r5, lr}
 80102d4:	4b17      	ldr	r3, [pc, #92]	; (8010334 <sniprintf+0x64>)
 80102d6:	1e0c      	subs	r4, r1, #0
 80102d8:	b09d      	sub	sp, #116	; 0x74
 80102da:	681d      	ldr	r5, [r3, #0]
 80102dc:	da08      	bge.n	80102f0 <sniprintf+0x20>
 80102de:	238b      	movs	r3, #139	; 0x8b
 80102e0:	602b      	str	r3, [r5, #0]
 80102e2:	f04f 30ff 	mov.w	r0, #4294967295
 80102e6:	b01d      	add	sp, #116	; 0x74
 80102e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102ec:	b002      	add	sp, #8
 80102ee:	4770      	bx	lr
 80102f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80102f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80102f8:	bf14      	ite	ne
 80102fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80102fe:	4623      	moveq	r3, r4
 8010300:	9304      	str	r3, [sp, #16]
 8010302:	9307      	str	r3, [sp, #28]
 8010304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010308:	9002      	str	r0, [sp, #8]
 801030a:	9006      	str	r0, [sp, #24]
 801030c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010310:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010312:	ab21      	add	r3, sp, #132	; 0x84
 8010314:	a902      	add	r1, sp, #8
 8010316:	4628      	mov	r0, r5
 8010318:	9301      	str	r3, [sp, #4]
 801031a:	f000 f933 	bl	8010584 <_svfiprintf_r>
 801031e:	1c43      	adds	r3, r0, #1
 8010320:	bfbc      	itt	lt
 8010322:	238b      	movlt	r3, #139	; 0x8b
 8010324:	602b      	strlt	r3, [r5, #0]
 8010326:	2c00      	cmp	r4, #0
 8010328:	d0dd      	beq.n	80102e6 <sniprintf+0x16>
 801032a:	9b02      	ldr	r3, [sp, #8]
 801032c:	2200      	movs	r2, #0
 801032e:	701a      	strb	r2, [r3, #0]
 8010330:	e7d9      	b.n	80102e6 <sniprintf+0x16>
 8010332:	bf00      	nop
 8010334:	24000184 	.word	0x24000184

08010338 <std>:
 8010338:	2300      	movs	r3, #0
 801033a:	b510      	push	{r4, lr}
 801033c:	4604      	mov	r4, r0
 801033e:	e9c0 3300 	strd	r3, r3, [r0]
 8010342:	6083      	str	r3, [r0, #8]
 8010344:	8181      	strh	r1, [r0, #12]
 8010346:	6643      	str	r3, [r0, #100]	; 0x64
 8010348:	81c2      	strh	r2, [r0, #14]
 801034a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801034e:	6183      	str	r3, [r0, #24]
 8010350:	4619      	mov	r1, r3
 8010352:	2208      	movs	r2, #8
 8010354:	305c      	adds	r0, #92	; 0x5c
 8010356:	f7ff fece 	bl	80100f6 <memset>
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <std+0x38>)
 801035c:	6263      	str	r3, [r4, #36]	; 0x24
 801035e:	4b05      	ldr	r3, [pc, #20]	; (8010374 <std+0x3c>)
 8010360:	62a3      	str	r3, [r4, #40]	; 0x28
 8010362:	4b05      	ldr	r3, [pc, #20]	; (8010378 <std+0x40>)
 8010364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010366:	4b05      	ldr	r3, [pc, #20]	; (801037c <std+0x44>)
 8010368:	6224      	str	r4, [r4, #32]
 801036a:	6323      	str	r3, [r4, #48]	; 0x30
 801036c:	bd10      	pop	{r4, pc}
 801036e:	bf00      	nop
 8010370:	08010d71 	.word	0x08010d71
 8010374:	08010d93 	.word	0x08010d93
 8010378:	08010dcb 	.word	0x08010dcb
 801037c:	08010def 	.word	0x08010def

08010380 <_cleanup_r>:
 8010380:	4901      	ldr	r1, [pc, #4]	; (8010388 <_cleanup_r+0x8>)
 8010382:	f000 b885 	b.w	8010490 <_fwalk_reent>
 8010386:	bf00      	nop
 8010388:	080110c9 	.word	0x080110c9

0801038c <__sfmoreglue>:
 801038c:	b570      	push	{r4, r5, r6, lr}
 801038e:	1e4a      	subs	r2, r1, #1
 8010390:	2568      	movs	r5, #104	; 0x68
 8010392:	4355      	muls	r5, r2
 8010394:	460e      	mov	r6, r1
 8010396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801039a:	f7ff ff03 	bl	80101a4 <_malloc_r>
 801039e:	4604      	mov	r4, r0
 80103a0:	b140      	cbz	r0, 80103b4 <__sfmoreglue+0x28>
 80103a2:	2100      	movs	r1, #0
 80103a4:	e9c0 1600 	strd	r1, r6, [r0]
 80103a8:	300c      	adds	r0, #12
 80103aa:	60a0      	str	r0, [r4, #8]
 80103ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103b0:	f7ff fea1 	bl	80100f6 <memset>
 80103b4:	4620      	mov	r0, r4
 80103b6:	bd70      	pop	{r4, r5, r6, pc}

080103b8 <__sinit>:
 80103b8:	6983      	ldr	r3, [r0, #24]
 80103ba:	b510      	push	{r4, lr}
 80103bc:	4604      	mov	r4, r0
 80103be:	bb33      	cbnz	r3, 801040e <__sinit+0x56>
 80103c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80103c4:	6503      	str	r3, [r0, #80]	; 0x50
 80103c6:	4b12      	ldr	r3, [pc, #72]	; (8010410 <__sinit+0x58>)
 80103c8:	4a12      	ldr	r2, [pc, #72]	; (8010414 <__sinit+0x5c>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	6282      	str	r2, [r0, #40]	; 0x28
 80103ce:	4298      	cmp	r0, r3
 80103d0:	bf04      	itt	eq
 80103d2:	2301      	moveq	r3, #1
 80103d4:	6183      	streq	r3, [r0, #24]
 80103d6:	f000 f81f 	bl	8010418 <__sfp>
 80103da:	6060      	str	r0, [r4, #4]
 80103dc:	4620      	mov	r0, r4
 80103de:	f000 f81b 	bl	8010418 <__sfp>
 80103e2:	60a0      	str	r0, [r4, #8]
 80103e4:	4620      	mov	r0, r4
 80103e6:	f000 f817 	bl	8010418 <__sfp>
 80103ea:	2200      	movs	r2, #0
 80103ec:	60e0      	str	r0, [r4, #12]
 80103ee:	2104      	movs	r1, #4
 80103f0:	6860      	ldr	r0, [r4, #4]
 80103f2:	f7ff ffa1 	bl	8010338 <std>
 80103f6:	2201      	movs	r2, #1
 80103f8:	2109      	movs	r1, #9
 80103fa:	68a0      	ldr	r0, [r4, #8]
 80103fc:	f7ff ff9c 	bl	8010338 <std>
 8010400:	2202      	movs	r2, #2
 8010402:	2112      	movs	r1, #18
 8010404:	68e0      	ldr	r0, [r4, #12]
 8010406:	f7ff ff97 	bl	8010338 <std>
 801040a:	2301      	movs	r3, #1
 801040c:	61a3      	str	r3, [r4, #24]
 801040e:	bd10      	pop	{r4, pc}
 8010410:	08011490 	.word	0x08011490
 8010414:	08010381 	.word	0x08010381

08010418 <__sfp>:
 8010418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041a:	4b1b      	ldr	r3, [pc, #108]	; (8010488 <__sfp+0x70>)
 801041c:	681e      	ldr	r6, [r3, #0]
 801041e:	69b3      	ldr	r3, [r6, #24]
 8010420:	4607      	mov	r7, r0
 8010422:	b913      	cbnz	r3, 801042a <__sfp+0x12>
 8010424:	4630      	mov	r0, r6
 8010426:	f7ff ffc7 	bl	80103b8 <__sinit>
 801042a:	3648      	adds	r6, #72	; 0x48
 801042c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010430:	3b01      	subs	r3, #1
 8010432:	d503      	bpl.n	801043c <__sfp+0x24>
 8010434:	6833      	ldr	r3, [r6, #0]
 8010436:	b133      	cbz	r3, 8010446 <__sfp+0x2e>
 8010438:	6836      	ldr	r6, [r6, #0]
 801043a:	e7f7      	b.n	801042c <__sfp+0x14>
 801043c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010440:	b16d      	cbz	r5, 801045e <__sfp+0x46>
 8010442:	3468      	adds	r4, #104	; 0x68
 8010444:	e7f4      	b.n	8010430 <__sfp+0x18>
 8010446:	2104      	movs	r1, #4
 8010448:	4638      	mov	r0, r7
 801044a:	f7ff ff9f 	bl	801038c <__sfmoreglue>
 801044e:	6030      	str	r0, [r6, #0]
 8010450:	2800      	cmp	r0, #0
 8010452:	d1f1      	bne.n	8010438 <__sfp+0x20>
 8010454:	230c      	movs	r3, #12
 8010456:	603b      	str	r3, [r7, #0]
 8010458:	4604      	mov	r4, r0
 801045a:	4620      	mov	r0, r4
 801045c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801045e:	4b0b      	ldr	r3, [pc, #44]	; (801048c <__sfp+0x74>)
 8010460:	6665      	str	r5, [r4, #100]	; 0x64
 8010462:	e9c4 5500 	strd	r5, r5, [r4]
 8010466:	60a5      	str	r5, [r4, #8]
 8010468:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801046c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010470:	2208      	movs	r2, #8
 8010472:	4629      	mov	r1, r5
 8010474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010478:	f7ff fe3d 	bl	80100f6 <memset>
 801047c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010484:	e7e9      	b.n	801045a <__sfp+0x42>
 8010486:	bf00      	nop
 8010488:	08011490 	.word	0x08011490
 801048c:	ffff0001 	.word	0xffff0001

08010490 <_fwalk_reent>:
 8010490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010494:	4680      	mov	r8, r0
 8010496:	4689      	mov	r9, r1
 8010498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801049c:	2600      	movs	r6, #0
 801049e:	b914      	cbnz	r4, 80104a6 <_fwalk_reent+0x16>
 80104a0:	4630      	mov	r0, r6
 80104a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80104aa:	3f01      	subs	r7, #1
 80104ac:	d501      	bpl.n	80104b2 <_fwalk_reent+0x22>
 80104ae:	6824      	ldr	r4, [r4, #0]
 80104b0:	e7f5      	b.n	801049e <_fwalk_reent+0xe>
 80104b2:	89ab      	ldrh	r3, [r5, #12]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d907      	bls.n	80104c8 <_fwalk_reent+0x38>
 80104b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104bc:	3301      	adds	r3, #1
 80104be:	d003      	beq.n	80104c8 <_fwalk_reent+0x38>
 80104c0:	4629      	mov	r1, r5
 80104c2:	4640      	mov	r0, r8
 80104c4:	47c8      	blx	r9
 80104c6:	4306      	orrs	r6, r0
 80104c8:	3568      	adds	r5, #104	; 0x68
 80104ca:	e7ee      	b.n	80104aa <_fwalk_reent+0x1a>

080104cc <__malloc_lock>:
 80104cc:	4770      	bx	lr

080104ce <__malloc_unlock>:
 80104ce:	4770      	bx	lr

080104d0 <__ssputs_r>:
 80104d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104d4:	688e      	ldr	r6, [r1, #8]
 80104d6:	429e      	cmp	r6, r3
 80104d8:	4682      	mov	sl, r0
 80104da:	460c      	mov	r4, r1
 80104dc:	4690      	mov	r8, r2
 80104de:	4699      	mov	r9, r3
 80104e0:	d837      	bhi.n	8010552 <__ssputs_r+0x82>
 80104e2:	898a      	ldrh	r2, [r1, #12]
 80104e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104e8:	d031      	beq.n	801054e <__ssputs_r+0x7e>
 80104ea:	6825      	ldr	r5, [r4, #0]
 80104ec:	6909      	ldr	r1, [r1, #16]
 80104ee:	1a6f      	subs	r7, r5, r1
 80104f0:	6965      	ldr	r5, [r4, #20]
 80104f2:	2302      	movs	r3, #2
 80104f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80104fc:	f109 0301 	add.w	r3, r9, #1
 8010500:	443b      	add	r3, r7
 8010502:	429d      	cmp	r5, r3
 8010504:	bf38      	it	cc
 8010506:	461d      	movcc	r5, r3
 8010508:	0553      	lsls	r3, r2, #21
 801050a:	d530      	bpl.n	801056e <__ssputs_r+0x9e>
 801050c:	4629      	mov	r1, r5
 801050e:	f7ff fe49 	bl	80101a4 <_malloc_r>
 8010512:	4606      	mov	r6, r0
 8010514:	b950      	cbnz	r0, 801052c <__ssputs_r+0x5c>
 8010516:	230c      	movs	r3, #12
 8010518:	f8ca 3000 	str.w	r3, [sl]
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010522:	81a3      	strh	r3, [r4, #12]
 8010524:	f04f 30ff 	mov.w	r0, #4294967295
 8010528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801052c:	463a      	mov	r2, r7
 801052e:	6921      	ldr	r1, [r4, #16]
 8010530:	f7ff fdd6 	bl	80100e0 <memcpy>
 8010534:	89a3      	ldrh	r3, [r4, #12]
 8010536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801053a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801053e:	81a3      	strh	r3, [r4, #12]
 8010540:	6126      	str	r6, [r4, #16]
 8010542:	6165      	str	r5, [r4, #20]
 8010544:	443e      	add	r6, r7
 8010546:	1bed      	subs	r5, r5, r7
 8010548:	6026      	str	r6, [r4, #0]
 801054a:	60a5      	str	r5, [r4, #8]
 801054c:	464e      	mov	r6, r9
 801054e:	454e      	cmp	r6, r9
 8010550:	d900      	bls.n	8010554 <__ssputs_r+0x84>
 8010552:	464e      	mov	r6, r9
 8010554:	4632      	mov	r2, r6
 8010556:	4641      	mov	r1, r8
 8010558:	6820      	ldr	r0, [r4, #0]
 801055a:	f000 fe55 	bl	8011208 <memmove>
 801055e:	68a3      	ldr	r3, [r4, #8]
 8010560:	1b9b      	subs	r3, r3, r6
 8010562:	60a3      	str	r3, [r4, #8]
 8010564:	6823      	ldr	r3, [r4, #0]
 8010566:	441e      	add	r6, r3
 8010568:	6026      	str	r6, [r4, #0]
 801056a:	2000      	movs	r0, #0
 801056c:	e7dc      	b.n	8010528 <__ssputs_r+0x58>
 801056e:	462a      	mov	r2, r5
 8010570:	f000 fe63 	bl	801123a <_realloc_r>
 8010574:	4606      	mov	r6, r0
 8010576:	2800      	cmp	r0, #0
 8010578:	d1e2      	bne.n	8010540 <__ssputs_r+0x70>
 801057a:	6921      	ldr	r1, [r4, #16]
 801057c:	4650      	mov	r0, sl
 801057e:	f7ff fdc3 	bl	8010108 <_free_r>
 8010582:	e7c8      	b.n	8010516 <__ssputs_r+0x46>

08010584 <_svfiprintf_r>:
 8010584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010588:	461d      	mov	r5, r3
 801058a:	898b      	ldrh	r3, [r1, #12]
 801058c:	061f      	lsls	r7, r3, #24
 801058e:	b09d      	sub	sp, #116	; 0x74
 8010590:	4680      	mov	r8, r0
 8010592:	460c      	mov	r4, r1
 8010594:	4616      	mov	r6, r2
 8010596:	d50f      	bpl.n	80105b8 <_svfiprintf_r+0x34>
 8010598:	690b      	ldr	r3, [r1, #16]
 801059a:	b96b      	cbnz	r3, 80105b8 <_svfiprintf_r+0x34>
 801059c:	2140      	movs	r1, #64	; 0x40
 801059e:	f7ff fe01 	bl	80101a4 <_malloc_r>
 80105a2:	6020      	str	r0, [r4, #0]
 80105a4:	6120      	str	r0, [r4, #16]
 80105a6:	b928      	cbnz	r0, 80105b4 <_svfiprintf_r+0x30>
 80105a8:	230c      	movs	r3, #12
 80105aa:	f8c8 3000 	str.w	r3, [r8]
 80105ae:	f04f 30ff 	mov.w	r0, #4294967295
 80105b2:	e0c8      	b.n	8010746 <_svfiprintf_r+0x1c2>
 80105b4:	2340      	movs	r3, #64	; 0x40
 80105b6:	6163      	str	r3, [r4, #20]
 80105b8:	2300      	movs	r3, #0
 80105ba:	9309      	str	r3, [sp, #36]	; 0x24
 80105bc:	2320      	movs	r3, #32
 80105be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105c2:	2330      	movs	r3, #48	; 0x30
 80105c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105c8:	9503      	str	r5, [sp, #12]
 80105ca:	f04f 0b01 	mov.w	fp, #1
 80105ce:	4637      	mov	r7, r6
 80105d0:	463d      	mov	r5, r7
 80105d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80105d6:	b10b      	cbz	r3, 80105dc <_svfiprintf_r+0x58>
 80105d8:	2b25      	cmp	r3, #37	; 0x25
 80105da:	d13e      	bne.n	801065a <_svfiprintf_r+0xd6>
 80105dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80105e0:	d00b      	beq.n	80105fa <_svfiprintf_r+0x76>
 80105e2:	4653      	mov	r3, sl
 80105e4:	4632      	mov	r2, r6
 80105e6:	4621      	mov	r1, r4
 80105e8:	4640      	mov	r0, r8
 80105ea:	f7ff ff71 	bl	80104d0 <__ssputs_r>
 80105ee:	3001      	adds	r0, #1
 80105f0:	f000 80a4 	beq.w	801073c <_svfiprintf_r+0x1b8>
 80105f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105f6:	4453      	add	r3, sl
 80105f8:	9309      	str	r3, [sp, #36]	; 0x24
 80105fa:	783b      	ldrb	r3, [r7, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f000 809d 	beq.w	801073c <_svfiprintf_r+0x1b8>
 8010602:	2300      	movs	r3, #0
 8010604:	f04f 32ff 	mov.w	r2, #4294967295
 8010608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801060c:	9304      	str	r3, [sp, #16]
 801060e:	9307      	str	r3, [sp, #28]
 8010610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010614:	931a      	str	r3, [sp, #104]	; 0x68
 8010616:	462f      	mov	r7, r5
 8010618:	2205      	movs	r2, #5
 801061a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801061e:	4850      	ldr	r0, [pc, #320]	; (8010760 <_svfiprintf_r+0x1dc>)
 8010620:	f7ef fe66 	bl	80002f0 <memchr>
 8010624:	9b04      	ldr	r3, [sp, #16]
 8010626:	b9d0      	cbnz	r0, 801065e <_svfiprintf_r+0xda>
 8010628:	06d9      	lsls	r1, r3, #27
 801062a:	bf44      	itt	mi
 801062c:	2220      	movmi	r2, #32
 801062e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010632:	071a      	lsls	r2, r3, #28
 8010634:	bf44      	itt	mi
 8010636:	222b      	movmi	r2, #43	; 0x2b
 8010638:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801063c:	782a      	ldrb	r2, [r5, #0]
 801063e:	2a2a      	cmp	r2, #42	; 0x2a
 8010640:	d015      	beq.n	801066e <_svfiprintf_r+0xea>
 8010642:	9a07      	ldr	r2, [sp, #28]
 8010644:	462f      	mov	r7, r5
 8010646:	2000      	movs	r0, #0
 8010648:	250a      	movs	r5, #10
 801064a:	4639      	mov	r1, r7
 801064c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010650:	3b30      	subs	r3, #48	; 0x30
 8010652:	2b09      	cmp	r3, #9
 8010654:	d94d      	bls.n	80106f2 <_svfiprintf_r+0x16e>
 8010656:	b1b8      	cbz	r0, 8010688 <_svfiprintf_r+0x104>
 8010658:	e00f      	b.n	801067a <_svfiprintf_r+0xf6>
 801065a:	462f      	mov	r7, r5
 801065c:	e7b8      	b.n	80105d0 <_svfiprintf_r+0x4c>
 801065e:	4a40      	ldr	r2, [pc, #256]	; (8010760 <_svfiprintf_r+0x1dc>)
 8010660:	1a80      	subs	r0, r0, r2
 8010662:	fa0b f000 	lsl.w	r0, fp, r0
 8010666:	4318      	orrs	r0, r3
 8010668:	9004      	str	r0, [sp, #16]
 801066a:	463d      	mov	r5, r7
 801066c:	e7d3      	b.n	8010616 <_svfiprintf_r+0x92>
 801066e:	9a03      	ldr	r2, [sp, #12]
 8010670:	1d11      	adds	r1, r2, #4
 8010672:	6812      	ldr	r2, [r2, #0]
 8010674:	9103      	str	r1, [sp, #12]
 8010676:	2a00      	cmp	r2, #0
 8010678:	db01      	blt.n	801067e <_svfiprintf_r+0xfa>
 801067a:	9207      	str	r2, [sp, #28]
 801067c:	e004      	b.n	8010688 <_svfiprintf_r+0x104>
 801067e:	4252      	negs	r2, r2
 8010680:	f043 0302 	orr.w	r3, r3, #2
 8010684:	9207      	str	r2, [sp, #28]
 8010686:	9304      	str	r3, [sp, #16]
 8010688:	783b      	ldrb	r3, [r7, #0]
 801068a:	2b2e      	cmp	r3, #46	; 0x2e
 801068c:	d10c      	bne.n	80106a8 <_svfiprintf_r+0x124>
 801068e:	787b      	ldrb	r3, [r7, #1]
 8010690:	2b2a      	cmp	r3, #42	; 0x2a
 8010692:	d133      	bne.n	80106fc <_svfiprintf_r+0x178>
 8010694:	9b03      	ldr	r3, [sp, #12]
 8010696:	1d1a      	adds	r2, r3, #4
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	9203      	str	r2, [sp, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	bfb8      	it	lt
 80106a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80106a4:	3702      	adds	r7, #2
 80106a6:	9305      	str	r3, [sp, #20]
 80106a8:	4d2e      	ldr	r5, [pc, #184]	; (8010764 <_svfiprintf_r+0x1e0>)
 80106aa:	7839      	ldrb	r1, [r7, #0]
 80106ac:	2203      	movs	r2, #3
 80106ae:	4628      	mov	r0, r5
 80106b0:	f7ef fe1e 	bl	80002f0 <memchr>
 80106b4:	b138      	cbz	r0, 80106c6 <_svfiprintf_r+0x142>
 80106b6:	2340      	movs	r3, #64	; 0x40
 80106b8:	1b40      	subs	r0, r0, r5
 80106ba:	fa03 f000 	lsl.w	r0, r3, r0
 80106be:	9b04      	ldr	r3, [sp, #16]
 80106c0:	4303      	orrs	r3, r0
 80106c2:	3701      	adds	r7, #1
 80106c4:	9304      	str	r3, [sp, #16]
 80106c6:	7839      	ldrb	r1, [r7, #0]
 80106c8:	4827      	ldr	r0, [pc, #156]	; (8010768 <_svfiprintf_r+0x1e4>)
 80106ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106ce:	2206      	movs	r2, #6
 80106d0:	1c7e      	adds	r6, r7, #1
 80106d2:	f7ef fe0d 	bl	80002f0 <memchr>
 80106d6:	2800      	cmp	r0, #0
 80106d8:	d038      	beq.n	801074c <_svfiprintf_r+0x1c8>
 80106da:	4b24      	ldr	r3, [pc, #144]	; (801076c <_svfiprintf_r+0x1e8>)
 80106dc:	bb13      	cbnz	r3, 8010724 <_svfiprintf_r+0x1a0>
 80106de:	9b03      	ldr	r3, [sp, #12]
 80106e0:	3307      	adds	r3, #7
 80106e2:	f023 0307 	bic.w	r3, r3, #7
 80106e6:	3308      	adds	r3, #8
 80106e8:	9303      	str	r3, [sp, #12]
 80106ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ec:	444b      	add	r3, r9
 80106ee:	9309      	str	r3, [sp, #36]	; 0x24
 80106f0:	e76d      	b.n	80105ce <_svfiprintf_r+0x4a>
 80106f2:	fb05 3202 	mla	r2, r5, r2, r3
 80106f6:	2001      	movs	r0, #1
 80106f8:	460f      	mov	r7, r1
 80106fa:	e7a6      	b.n	801064a <_svfiprintf_r+0xc6>
 80106fc:	2300      	movs	r3, #0
 80106fe:	3701      	adds	r7, #1
 8010700:	9305      	str	r3, [sp, #20]
 8010702:	4619      	mov	r1, r3
 8010704:	250a      	movs	r5, #10
 8010706:	4638      	mov	r0, r7
 8010708:	f810 2b01 	ldrb.w	r2, [r0], #1
 801070c:	3a30      	subs	r2, #48	; 0x30
 801070e:	2a09      	cmp	r2, #9
 8010710:	d903      	bls.n	801071a <_svfiprintf_r+0x196>
 8010712:	2b00      	cmp	r3, #0
 8010714:	d0c8      	beq.n	80106a8 <_svfiprintf_r+0x124>
 8010716:	9105      	str	r1, [sp, #20]
 8010718:	e7c6      	b.n	80106a8 <_svfiprintf_r+0x124>
 801071a:	fb05 2101 	mla	r1, r5, r1, r2
 801071e:	2301      	movs	r3, #1
 8010720:	4607      	mov	r7, r0
 8010722:	e7f0      	b.n	8010706 <_svfiprintf_r+0x182>
 8010724:	ab03      	add	r3, sp, #12
 8010726:	9300      	str	r3, [sp, #0]
 8010728:	4622      	mov	r2, r4
 801072a:	4b11      	ldr	r3, [pc, #68]	; (8010770 <_svfiprintf_r+0x1ec>)
 801072c:	a904      	add	r1, sp, #16
 801072e:	4640      	mov	r0, r8
 8010730:	f3af 8000 	nop.w
 8010734:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010738:	4681      	mov	r9, r0
 801073a:	d1d6      	bne.n	80106ea <_svfiprintf_r+0x166>
 801073c:	89a3      	ldrh	r3, [r4, #12]
 801073e:	065b      	lsls	r3, r3, #25
 8010740:	f53f af35 	bmi.w	80105ae <_svfiprintf_r+0x2a>
 8010744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010746:	b01d      	add	sp, #116	; 0x74
 8010748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801074c:	ab03      	add	r3, sp, #12
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	4622      	mov	r2, r4
 8010752:	4b07      	ldr	r3, [pc, #28]	; (8010770 <_svfiprintf_r+0x1ec>)
 8010754:	a904      	add	r1, sp, #16
 8010756:	4640      	mov	r0, r8
 8010758:	f000 f9c2 	bl	8010ae0 <_printf_i>
 801075c:	e7ea      	b.n	8010734 <_svfiprintf_r+0x1b0>
 801075e:	bf00      	nop
 8010760:	080114f4 	.word	0x080114f4
 8010764:	080114fa 	.word	0x080114fa
 8010768:	080114fe 	.word	0x080114fe
 801076c:	00000000 	.word	0x00000000
 8010770:	080104d1 	.word	0x080104d1

08010774 <__sfputc_r>:
 8010774:	6893      	ldr	r3, [r2, #8]
 8010776:	3b01      	subs	r3, #1
 8010778:	2b00      	cmp	r3, #0
 801077a:	b410      	push	{r4}
 801077c:	6093      	str	r3, [r2, #8]
 801077e:	da08      	bge.n	8010792 <__sfputc_r+0x1e>
 8010780:	6994      	ldr	r4, [r2, #24]
 8010782:	42a3      	cmp	r3, r4
 8010784:	db01      	blt.n	801078a <__sfputc_r+0x16>
 8010786:	290a      	cmp	r1, #10
 8010788:	d103      	bne.n	8010792 <__sfputc_r+0x1e>
 801078a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801078e:	f000 bb33 	b.w	8010df8 <__swbuf_r>
 8010792:	6813      	ldr	r3, [r2, #0]
 8010794:	1c58      	adds	r0, r3, #1
 8010796:	6010      	str	r0, [r2, #0]
 8010798:	7019      	strb	r1, [r3, #0]
 801079a:	4608      	mov	r0, r1
 801079c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107a0:	4770      	bx	lr

080107a2 <__sfputs_r>:
 80107a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a4:	4606      	mov	r6, r0
 80107a6:	460f      	mov	r7, r1
 80107a8:	4614      	mov	r4, r2
 80107aa:	18d5      	adds	r5, r2, r3
 80107ac:	42ac      	cmp	r4, r5
 80107ae:	d101      	bne.n	80107b4 <__sfputs_r+0x12>
 80107b0:	2000      	movs	r0, #0
 80107b2:	e007      	b.n	80107c4 <__sfputs_r+0x22>
 80107b4:	463a      	mov	r2, r7
 80107b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ba:	4630      	mov	r0, r6
 80107bc:	f7ff ffda 	bl	8010774 <__sfputc_r>
 80107c0:	1c43      	adds	r3, r0, #1
 80107c2:	d1f3      	bne.n	80107ac <__sfputs_r+0xa>
 80107c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107c8 <_vfiprintf_r>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	460c      	mov	r4, r1
 80107ce:	b09d      	sub	sp, #116	; 0x74
 80107d0:	4617      	mov	r7, r2
 80107d2:	461d      	mov	r5, r3
 80107d4:	4606      	mov	r6, r0
 80107d6:	b118      	cbz	r0, 80107e0 <_vfiprintf_r+0x18>
 80107d8:	6983      	ldr	r3, [r0, #24]
 80107da:	b90b      	cbnz	r3, 80107e0 <_vfiprintf_r+0x18>
 80107dc:	f7ff fdec 	bl	80103b8 <__sinit>
 80107e0:	4b7c      	ldr	r3, [pc, #496]	; (80109d4 <_vfiprintf_r+0x20c>)
 80107e2:	429c      	cmp	r4, r3
 80107e4:	d158      	bne.n	8010898 <_vfiprintf_r+0xd0>
 80107e6:	6874      	ldr	r4, [r6, #4]
 80107e8:	89a3      	ldrh	r3, [r4, #12]
 80107ea:	0718      	lsls	r0, r3, #28
 80107ec:	d55e      	bpl.n	80108ac <_vfiprintf_r+0xe4>
 80107ee:	6923      	ldr	r3, [r4, #16]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d05b      	beq.n	80108ac <_vfiprintf_r+0xe4>
 80107f4:	2300      	movs	r3, #0
 80107f6:	9309      	str	r3, [sp, #36]	; 0x24
 80107f8:	2320      	movs	r3, #32
 80107fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107fe:	2330      	movs	r3, #48	; 0x30
 8010800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010804:	9503      	str	r5, [sp, #12]
 8010806:	f04f 0b01 	mov.w	fp, #1
 801080a:	46b8      	mov	r8, r7
 801080c:	4645      	mov	r5, r8
 801080e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010812:	b10b      	cbz	r3, 8010818 <_vfiprintf_r+0x50>
 8010814:	2b25      	cmp	r3, #37	; 0x25
 8010816:	d154      	bne.n	80108c2 <_vfiprintf_r+0xfa>
 8010818:	ebb8 0a07 	subs.w	sl, r8, r7
 801081c:	d00b      	beq.n	8010836 <_vfiprintf_r+0x6e>
 801081e:	4653      	mov	r3, sl
 8010820:	463a      	mov	r2, r7
 8010822:	4621      	mov	r1, r4
 8010824:	4630      	mov	r0, r6
 8010826:	f7ff ffbc 	bl	80107a2 <__sfputs_r>
 801082a:	3001      	adds	r0, #1
 801082c:	f000 80c2 	beq.w	80109b4 <_vfiprintf_r+0x1ec>
 8010830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010832:	4453      	add	r3, sl
 8010834:	9309      	str	r3, [sp, #36]	; 0x24
 8010836:	f898 3000 	ldrb.w	r3, [r8]
 801083a:	2b00      	cmp	r3, #0
 801083c:	f000 80ba 	beq.w	80109b4 <_vfiprintf_r+0x1ec>
 8010840:	2300      	movs	r3, #0
 8010842:	f04f 32ff 	mov.w	r2, #4294967295
 8010846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801084a:	9304      	str	r3, [sp, #16]
 801084c:	9307      	str	r3, [sp, #28]
 801084e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010852:	931a      	str	r3, [sp, #104]	; 0x68
 8010854:	46a8      	mov	r8, r5
 8010856:	2205      	movs	r2, #5
 8010858:	f818 1b01 	ldrb.w	r1, [r8], #1
 801085c:	485e      	ldr	r0, [pc, #376]	; (80109d8 <_vfiprintf_r+0x210>)
 801085e:	f7ef fd47 	bl	80002f0 <memchr>
 8010862:	9b04      	ldr	r3, [sp, #16]
 8010864:	bb78      	cbnz	r0, 80108c6 <_vfiprintf_r+0xfe>
 8010866:	06d9      	lsls	r1, r3, #27
 8010868:	bf44      	itt	mi
 801086a:	2220      	movmi	r2, #32
 801086c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010870:	071a      	lsls	r2, r3, #28
 8010872:	bf44      	itt	mi
 8010874:	222b      	movmi	r2, #43	; 0x2b
 8010876:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801087a:	782a      	ldrb	r2, [r5, #0]
 801087c:	2a2a      	cmp	r2, #42	; 0x2a
 801087e:	d02a      	beq.n	80108d6 <_vfiprintf_r+0x10e>
 8010880:	9a07      	ldr	r2, [sp, #28]
 8010882:	46a8      	mov	r8, r5
 8010884:	2000      	movs	r0, #0
 8010886:	250a      	movs	r5, #10
 8010888:	4641      	mov	r1, r8
 801088a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801088e:	3b30      	subs	r3, #48	; 0x30
 8010890:	2b09      	cmp	r3, #9
 8010892:	d969      	bls.n	8010968 <_vfiprintf_r+0x1a0>
 8010894:	b360      	cbz	r0, 80108f0 <_vfiprintf_r+0x128>
 8010896:	e024      	b.n	80108e2 <_vfiprintf_r+0x11a>
 8010898:	4b50      	ldr	r3, [pc, #320]	; (80109dc <_vfiprintf_r+0x214>)
 801089a:	429c      	cmp	r4, r3
 801089c:	d101      	bne.n	80108a2 <_vfiprintf_r+0xda>
 801089e:	68b4      	ldr	r4, [r6, #8]
 80108a0:	e7a2      	b.n	80107e8 <_vfiprintf_r+0x20>
 80108a2:	4b4f      	ldr	r3, [pc, #316]	; (80109e0 <_vfiprintf_r+0x218>)
 80108a4:	429c      	cmp	r4, r3
 80108a6:	bf08      	it	eq
 80108a8:	68f4      	ldreq	r4, [r6, #12]
 80108aa:	e79d      	b.n	80107e8 <_vfiprintf_r+0x20>
 80108ac:	4621      	mov	r1, r4
 80108ae:	4630      	mov	r0, r6
 80108b0:	f000 fb06 	bl	8010ec0 <__swsetup_r>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d09d      	beq.n	80107f4 <_vfiprintf_r+0x2c>
 80108b8:	f04f 30ff 	mov.w	r0, #4294967295
 80108bc:	b01d      	add	sp, #116	; 0x74
 80108be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c2:	46a8      	mov	r8, r5
 80108c4:	e7a2      	b.n	801080c <_vfiprintf_r+0x44>
 80108c6:	4a44      	ldr	r2, [pc, #272]	; (80109d8 <_vfiprintf_r+0x210>)
 80108c8:	1a80      	subs	r0, r0, r2
 80108ca:	fa0b f000 	lsl.w	r0, fp, r0
 80108ce:	4318      	orrs	r0, r3
 80108d0:	9004      	str	r0, [sp, #16]
 80108d2:	4645      	mov	r5, r8
 80108d4:	e7be      	b.n	8010854 <_vfiprintf_r+0x8c>
 80108d6:	9a03      	ldr	r2, [sp, #12]
 80108d8:	1d11      	adds	r1, r2, #4
 80108da:	6812      	ldr	r2, [r2, #0]
 80108dc:	9103      	str	r1, [sp, #12]
 80108de:	2a00      	cmp	r2, #0
 80108e0:	db01      	blt.n	80108e6 <_vfiprintf_r+0x11e>
 80108e2:	9207      	str	r2, [sp, #28]
 80108e4:	e004      	b.n	80108f0 <_vfiprintf_r+0x128>
 80108e6:	4252      	negs	r2, r2
 80108e8:	f043 0302 	orr.w	r3, r3, #2
 80108ec:	9207      	str	r2, [sp, #28]
 80108ee:	9304      	str	r3, [sp, #16]
 80108f0:	f898 3000 	ldrb.w	r3, [r8]
 80108f4:	2b2e      	cmp	r3, #46	; 0x2e
 80108f6:	d10e      	bne.n	8010916 <_vfiprintf_r+0x14e>
 80108f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80108fc:	2b2a      	cmp	r3, #42	; 0x2a
 80108fe:	d138      	bne.n	8010972 <_vfiprintf_r+0x1aa>
 8010900:	9b03      	ldr	r3, [sp, #12]
 8010902:	1d1a      	adds	r2, r3, #4
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	9203      	str	r2, [sp, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	bfb8      	it	lt
 801090c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010910:	f108 0802 	add.w	r8, r8, #2
 8010914:	9305      	str	r3, [sp, #20]
 8010916:	4d33      	ldr	r5, [pc, #204]	; (80109e4 <_vfiprintf_r+0x21c>)
 8010918:	f898 1000 	ldrb.w	r1, [r8]
 801091c:	2203      	movs	r2, #3
 801091e:	4628      	mov	r0, r5
 8010920:	f7ef fce6 	bl	80002f0 <memchr>
 8010924:	b140      	cbz	r0, 8010938 <_vfiprintf_r+0x170>
 8010926:	2340      	movs	r3, #64	; 0x40
 8010928:	1b40      	subs	r0, r0, r5
 801092a:	fa03 f000 	lsl.w	r0, r3, r0
 801092e:	9b04      	ldr	r3, [sp, #16]
 8010930:	4303      	orrs	r3, r0
 8010932:	f108 0801 	add.w	r8, r8, #1
 8010936:	9304      	str	r3, [sp, #16]
 8010938:	f898 1000 	ldrb.w	r1, [r8]
 801093c:	482a      	ldr	r0, [pc, #168]	; (80109e8 <_vfiprintf_r+0x220>)
 801093e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010942:	2206      	movs	r2, #6
 8010944:	f108 0701 	add.w	r7, r8, #1
 8010948:	f7ef fcd2 	bl	80002f0 <memchr>
 801094c:	2800      	cmp	r0, #0
 801094e:	d037      	beq.n	80109c0 <_vfiprintf_r+0x1f8>
 8010950:	4b26      	ldr	r3, [pc, #152]	; (80109ec <_vfiprintf_r+0x224>)
 8010952:	bb1b      	cbnz	r3, 801099c <_vfiprintf_r+0x1d4>
 8010954:	9b03      	ldr	r3, [sp, #12]
 8010956:	3307      	adds	r3, #7
 8010958:	f023 0307 	bic.w	r3, r3, #7
 801095c:	3308      	adds	r3, #8
 801095e:	9303      	str	r3, [sp, #12]
 8010960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010962:	444b      	add	r3, r9
 8010964:	9309      	str	r3, [sp, #36]	; 0x24
 8010966:	e750      	b.n	801080a <_vfiprintf_r+0x42>
 8010968:	fb05 3202 	mla	r2, r5, r2, r3
 801096c:	2001      	movs	r0, #1
 801096e:	4688      	mov	r8, r1
 8010970:	e78a      	b.n	8010888 <_vfiprintf_r+0xc0>
 8010972:	2300      	movs	r3, #0
 8010974:	f108 0801 	add.w	r8, r8, #1
 8010978:	9305      	str	r3, [sp, #20]
 801097a:	4619      	mov	r1, r3
 801097c:	250a      	movs	r5, #10
 801097e:	4640      	mov	r0, r8
 8010980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010984:	3a30      	subs	r2, #48	; 0x30
 8010986:	2a09      	cmp	r2, #9
 8010988:	d903      	bls.n	8010992 <_vfiprintf_r+0x1ca>
 801098a:	2b00      	cmp	r3, #0
 801098c:	d0c3      	beq.n	8010916 <_vfiprintf_r+0x14e>
 801098e:	9105      	str	r1, [sp, #20]
 8010990:	e7c1      	b.n	8010916 <_vfiprintf_r+0x14e>
 8010992:	fb05 2101 	mla	r1, r5, r1, r2
 8010996:	2301      	movs	r3, #1
 8010998:	4680      	mov	r8, r0
 801099a:	e7f0      	b.n	801097e <_vfiprintf_r+0x1b6>
 801099c:	ab03      	add	r3, sp, #12
 801099e:	9300      	str	r3, [sp, #0]
 80109a0:	4622      	mov	r2, r4
 80109a2:	4b13      	ldr	r3, [pc, #76]	; (80109f0 <_vfiprintf_r+0x228>)
 80109a4:	a904      	add	r1, sp, #16
 80109a6:	4630      	mov	r0, r6
 80109a8:	f3af 8000 	nop.w
 80109ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80109b0:	4681      	mov	r9, r0
 80109b2:	d1d5      	bne.n	8010960 <_vfiprintf_r+0x198>
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	065b      	lsls	r3, r3, #25
 80109b8:	f53f af7e 	bmi.w	80108b8 <_vfiprintf_r+0xf0>
 80109bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109be:	e77d      	b.n	80108bc <_vfiprintf_r+0xf4>
 80109c0:	ab03      	add	r3, sp, #12
 80109c2:	9300      	str	r3, [sp, #0]
 80109c4:	4622      	mov	r2, r4
 80109c6:	4b0a      	ldr	r3, [pc, #40]	; (80109f0 <_vfiprintf_r+0x228>)
 80109c8:	a904      	add	r1, sp, #16
 80109ca:	4630      	mov	r0, r6
 80109cc:	f000 f888 	bl	8010ae0 <_printf_i>
 80109d0:	e7ec      	b.n	80109ac <_vfiprintf_r+0x1e4>
 80109d2:	bf00      	nop
 80109d4:	080114b4 	.word	0x080114b4
 80109d8:	080114f4 	.word	0x080114f4
 80109dc:	080114d4 	.word	0x080114d4
 80109e0:	08011494 	.word	0x08011494
 80109e4:	080114fa 	.word	0x080114fa
 80109e8:	080114fe 	.word	0x080114fe
 80109ec:	00000000 	.word	0x00000000
 80109f0:	080107a3 	.word	0x080107a3

080109f4 <_printf_common>:
 80109f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109f8:	4691      	mov	r9, r2
 80109fa:	461f      	mov	r7, r3
 80109fc:	688a      	ldr	r2, [r1, #8]
 80109fe:	690b      	ldr	r3, [r1, #16]
 8010a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a04:	4293      	cmp	r3, r2
 8010a06:	bfb8      	it	lt
 8010a08:	4613      	movlt	r3, r2
 8010a0a:	f8c9 3000 	str.w	r3, [r9]
 8010a0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a12:	4606      	mov	r6, r0
 8010a14:	460c      	mov	r4, r1
 8010a16:	b112      	cbz	r2, 8010a1e <_printf_common+0x2a>
 8010a18:	3301      	adds	r3, #1
 8010a1a:	f8c9 3000 	str.w	r3, [r9]
 8010a1e:	6823      	ldr	r3, [r4, #0]
 8010a20:	0699      	lsls	r1, r3, #26
 8010a22:	bf42      	ittt	mi
 8010a24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010a28:	3302      	addmi	r3, #2
 8010a2a:	f8c9 3000 	strmi.w	r3, [r9]
 8010a2e:	6825      	ldr	r5, [r4, #0]
 8010a30:	f015 0506 	ands.w	r5, r5, #6
 8010a34:	d107      	bne.n	8010a46 <_printf_common+0x52>
 8010a36:	f104 0a19 	add.w	sl, r4, #25
 8010a3a:	68e3      	ldr	r3, [r4, #12]
 8010a3c:	f8d9 2000 	ldr.w	r2, [r9]
 8010a40:	1a9b      	subs	r3, r3, r2
 8010a42:	42ab      	cmp	r3, r5
 8010a44:	dc28      	bgt.n	8010a98 <_printf_common+0xa4>
 8010a46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010a4a:	6822      	ldr	r2, [r4, #0]
 8010a4c:	3300      	adds	r3, #0
 8010a4e:	bf18      	it	ne
 8010a50:	2301      	movne	r3, #1
 8010a52:	0692      	lsls	r2, r2, #26
 8010a54:	d42d      	bmi.n	8010ab2 <_printf_common+0xbe>
 8010a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a5a:	4639      	mov	r1, r7
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	47c0      	blx	r8
 8010a60:	3001      	adds	r0, #1
 8010a62:	d020      	beq.n	8010aa6 <_printf_common+0xb2>
 8010a64:	6823      	ldr	r3, [r4, #0]
 8010a66:	68e5      	ldr	r5, [r4, #12]
 8010a68:	f8d9 2000 	ldr.w	r2, [r9]
 8010a6c:	f003 0306 	and.w	r3, r3, #6
 8010a70:	2b04      	cmp	r3, #4
 8010a72:	bf08      	it	eq
 8010a74:	1aad      	subeq	r5, r5, r2
 8010a76:	68a3      	ldr	r3, [r4, #8]
 8010a78:	6922      	ldr	r2, [r4, #16]
 8010a7a:	bf0c      	ite	eq
 8010a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a80:	2500      	movne	r5, #0
 8010a82:	4293      	cmp	r3, r2
 8010a84:	bfc4      	itt	gt
 8010a86:	1a9b      	subgt	r3, r3, r2
 8010a88:	18ed      	addgt	r5, r5, r3
 8010a8a:	f04f 0900 	mov.w	r9, #0
 8010a8e:	341a      	adds	r4, #26
 8010a90:	454d      	cmp	r5, r9
 8010a92:	d11a      	bne.n	8010aca <_printf_common+0xd6>
 8010a94:	2000      	movs	r0, #0
 8010a96:	e008      	b.n	8010aaa <_printf_common+0xb6>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	4652      	mov	r2, sl
 8010a9c:	4639      	mov	r1, r7
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	47c0      	blx	r8
 8010aa2:	3001      	adds	r0, #1
 8010aa4:	d103      	bne.n	8010aae <_printf_common+0xba>
 8010aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aae:	3501      	adds	r5, #1
 8010ab0:	e7c3      	b.n	8010a3a <_printf_common+0x46>
 8010ab2:	18e1      	adds	r1, r4, r3
 8010ab4:	1c5a      	adds	r2, r3, #1
 8010ab6:	2030      	movs	r0, #48	; 0x30
 8010ab8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010abc:	4422      	add	r2, r4
 8010abe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ac2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ac6:	3302      	adds	r3, #2
 8010ac8:	e7c5      	b.n	8010a56 <_printf_common+0x62>
 8010aca:	2301      	movs	r3, #1
 8010acc:	4622      	mov	r2, r4
 8010ace:	4639      	mov	r1, r7
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	47c0      	blx	r8
 8010ad4:	3001      	adds	r0, #1
 8010ad6:	d0e6      	beq.n	8010aa6 <_printf_common+0xb2>
 8010ad8:	f109 0901 	add.w	r9, r9, #1
 8010adc:	e7d8      	b.n	8010a90 <_printf_common+0x9c>
	...

08010ae0 <_printf_i>:
 8010ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ae4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010ae8:	460c      	mov	r4, r1
 8010aea:	7e09      	ldrb	r1, [r1, #24]
 8010aec:	b085      	sub	sp, #20
 8010aee:	296e      	cmp	r1, #110	; 0x6e
 8010af0:	4617      	mov	r7, r2
 8010af2:	4606      	mov	r6, r0
 8010af4:	4698      	mov	r8, r3
 8010af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010af8:	f000 80b3 	beq.w	8010c62 <_printf_i+0x182>
 8010afc:	d822      	bhi.n	8010b44 <_printf_i+0x64>
 8010afe:	2963      	cmp	r1, #99	; 0x63
 8010b00:	d036      	beq.n	8010b70 <_printf_i+0x90>
 8010b02:	d80a      	bhi.n	8010b1a <_printf_i+0x3a>
 8010b04:	2900      	cmp	r1, #0
 8010b06:	f000 80b9 	beq.w	8010c7c <_printf_i+0x19c>
 8010b0a:	2958      	cmp	r1, #88	; 0x58
 8010b0c:	f000 8083 	beq.w	8010c16 <_printf_i+0x136>
 8010b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010b18:	e032      	b.n	8010b80 <_printf_i+0xa0>
 8010b1a:	2964      	cmp	r1, #100	; 0x64
 8010b1c:	d001      	beq.n	8010b22 <_printf_i+0x42>
 8010b1e:	2969      	cmp	r1, #105	; 0x69
 8010b20:	d1f6      	bne.n	8010b10 <_printf_i+0x30>
 8010b22:	6820      	ldr	r0, [r4, #0]
 8010b24:	6813      	ldr	r3, [r2, #0]
 8010b26:	0605      	lsls	r5, r0, #24
 8010b28:	f103 0104 	add.w	r1, r3, #4
 8010b2c:	d52a      	bpl.n	8010b84 <_printf_i+0xa4>
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	6011      	str	r1, [r2, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	da03      	bge.n	8010b3e <_printf_i+0x5e>
 8010b36:	222d      	movs	r2, #45	; 0x2d
 8010b38:	425b      	negs	r3, r3
 8010b3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010b3e:	486f      	ldr	r0, [pc, #444]	; (8010cfc <_printf_i+0x21c>)
 8010b40:	220a      	movs	r2, #10
 8010b42:	e039      	b.n	8010bb8 <_printf_i+0xd8>
 8010b44:	2973      	cmp	r1, #115	; 0x73
 8010b46:	f000 809d 	beq.w	8010c84 <_printf_i+0x1a4>
 8010b4a:	d808      	bhi.n	8010b5e <_printf_i+0x7e>
 8010b4c:	296f      	cmp	r1, #111	; 0x6f
 8010b4e:	d020      	beq.n	8010b92 <_printf_i+0xb2>
 8010b50:	2970      	cmp	r1, #112	; 0x70
 8010b52:	d1dd      	bne.n	8010b10 <_printf_i+0x30>
 8010b54:	6823      	ldr	r3, [r4, #0]
 8010b56:	f043 0320 	orr.w	r3, r3, #32
 8010b5a:	6023      	str	r3, [r4, #0]
 8010b5c:	e003      	b.n	8010b66 <_printf_i+0x86>
 8010b5e:	2975      	cmp	r1, #117	; 0x75
 8010b60:	d017      	beq.n	8010b92 <_printf_i+0xb2>
 8010b62:	2978      	cmp	r1, #120	; 0x78
 8010b64:	d1d4      	bne.n	8010b10 <_printf_i+0x30>
 8010b66:	2378      	movs	r3, #120	; 0x78
 8010b68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b6c:	4864      	ldr	r0, [pc, #400]	; (8010d00 <_printf_i+0x220>)
 8010b6e:	e055      	b.n	8010c1c <_printf_i+0x13c>
 8010b70:	6813      	ldr	r3, [r2, #0]
 8010b72:	1d19      	adds	r1, r3, #4
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	6011      	str	r1, [r2, #0]
 8010b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b80:	2301      	movs	r3, #1
 8010b82:	e08c      	b.n	8010c9e <_printf_i+0x1be>
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	6011      	str	r1, [r2, #0]
 8010b88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010b8c:	bf18      	it	ne
 8010b8e:	b21b      	sxthne	r3, r3
 8010b90:	e7cf      	b.n	8010b32 <_printf_i+0x52>
 8010b92:	6813      	ldr	r3, [r2, #0]
 8010b94:	6825      	ldr	r5, [r4, #0]
 8010b96:	1d18      	adds	r0, r3, #4
 8010b98:	6010      	str	r0, [r2, #0]
 8010b9a:	0628      	lsls	r0, r5, #24
 8010b9c:	d501      	bpl.n	8010ba2 <_printf_i+0xc2>
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	e002      	b.n	8010ba8 <_printf_i+0xc8>
 8010ba2:	0668      	lsls	r0, r5, #25
 8010ba4:	d5fb      	bpl.n	8010b9e <_printf_i+0xbe>
 8010ba6:	881b      	ldrh	r3, [r3, #0]
 8010ba8:	4854      	ldr	r0, [pc, #336]	; (8010cfc <_printf_i+0x21c>)
 8010baa:	296f      	cmp	r1, #111	; 0x6f
 8010bac:	bf14      	ite	ne
 8010bae:	220a      	movne	r2, #10
 8010bb0:	2208      	moveq	r2, #8
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bb8:	6865      	ldr	r5, [r4, #4]
 8010bba:	60a5      	str	r5, [r4, #8]
 8010bbc:	2d00      	cmp	r5, #0
 8010bbe:	f2c0 8095 	blt.w	8010cec <_printf_i+0x20c>
 8010bc2:	6821      	ldr	r1, [r4, #0]
 8010bc4:	f021 0104 	bic.w	r1, r1, #4
 8010bc8:	6021      	str	r1, [r4, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d13d      	bne.n	8010c4a <_printf_i+0x16a>
 8010bce:	2d00      	cmp	r5, #0
 8010bd0:	f040 808e 	bne.w	8010cf0 <_printf_i+0x210>
 8010bd4:	4665      	mov	r5, ip
 8010bd6:	2a08      	cmp	r2, #8
 8010bd8:	d10b      	bne.n	8010bf2 <_printf_i+0x112>
 8010bda:	6823      	ldr	r3, [r4, #0]
 8010bdc:	07db      	lsls	r3, r3, #31
 8010bde:	d508      	bpl.n	8010bf2 <_printf_i+0x112>
 8010be0:	6923      	ldr	r3, [r4, #16]
 8010be2:	6862      	ldr	r2, [r4, #4]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	bfde      	ittt	le
 8010be8:	2330      	movle	r3, #48	; 0x30
 8010bea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010bee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010bf2:	ebac 0305 	sub.w	r3, ip, r5
 8010bf6:	6123      	str	r3, [r4, #16]
 8010bf8:	f8cd 8000 	str.w	r8, [sp]
 8010bfc:	463b      	mov	r3, r7
 8010bfe:	aa03      	add	r2, sp, #12
 8010c00:	4621      	mov	r1, r4
 8010c02:	4630      	mov	r0, r6
 8010c04:	f7ff fef6 	bl	80109f4 <_printf_common>
 8010c08:	3001      	adds	r0, #1
 8010c0a:	d14d      	bne.n	8010ca8 <_printf_i+0x1c8>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	b005      	add	sp, #20
 8010c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c16:	4839      	ldr	r0, [pc, #228]	; (8010cfc <_printf_i+0x21c>)
 8010c18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010c1c:	6813      	ldr	r3, [r2, #0]
 8010c1e:	6821      	ldr	r1, [r4, #0]
 8010c20:	1d1d      	adds	r5, r3, #4
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	6015      	str	r5, [r2, #0]
 8010c26:	060a      	lsls	r2, r1, #24
 8010c28:	d50b      	bpl.n	8010c42 <_printf_i+0x162>
 8010c2a:	07ca      	lsls	r2, r1, #31
 8010c2c:	bf44      	itt	mi
 8010c2e:	f041 0120 	orrmi.w	r1, r1, #32
 8010c32:	6021      	strmi	r1, [r4, #0]
 8010c34:	b91b      	cbnz	r3, 8010c3e <_printf_i+0x15e>
 8010c36:	6822      	ldr	r2, [r4, #0]
 8010c38:	f022 0220 	bic.w	r2, r2, #32
 8010c3c:	6022      	str	r2, [r4, #0]
 8010c3e:	2210      	movs	r2, #16
 8010c40:	e7b7      	b.n	8010bb2 <_printf_i+0xd2>
 8010c42:	064d      	lsls	r5, r1, #25
 8010c44:	bf48      	it	mi
 8010c46:	b29b      	uxthmi	r3, r3
 8010c48:	e7ef      	b.n	8010c2a <_printf_i+0x14a>
 8010c4a:	4665      	mov	r5, ip
 8010c4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c50:	fb02 3311 	mls	r3, r2, r1, r3
 8010c54:	5cc3      	ldrb	r3, [r0, r3]
 8010c56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	2900      	cmp	r1, #0
 8010c5e:	d1f5      	bne.n	8010c4c <_printf_i+0x16c>
 8010c60:	e7b9      	b.n	8010bd6 <_printf_i+0xf6>
 8010c62:	6813      	ldr	r3, [r2, #0]
 8010c64:	6825      	ldr	r5, [r4, #0]
 8010c66:	6961      	ldr	r1, [r4, #20]
 8010c68:	1d18      	adds	r0, r3, #4
 8010c6a:	6010      	str	r0, [r2, #0]
 8010c6c:	0628      	lsls	r0, r5, #24
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	d501      	bpl.n	8010c76 <_printf_i+0x196>
 8010c72:	6019      	str	r1, [r3, #0]
 8010c74:	e002      	b.n	8010c7c <_printf_i+0x19c>
 8010c76:	066a      	lsls	r2, r5, #25
 8010c78:	d5fb      	bpl.n	8010c72 <_printf_i+0x192>
 8010c7a:	8019      	strh	r1, [r3, #0]
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	6123      	str	r3, [r4, #16]
 8010c80:	4665      	mov	r5, ip
 8010c82:	e7b9      	b.n	8010bf8 <_printf_i+0x118>
 8010c84:	6813      	ldr	r3, [r2, #0]
 8010c86:	1d19      	adds	r1, r3, #4
 8010c88:	6011      	str	r1, [r2, #0]
 8010c8a:	681d      	ldr	r5, [r3, #0]
 8010c8c:	6862      	ldr	r2, [r4, #4]
 8010c8e:	2100      	movs	r1, #0
 8010c90:	4628      	mov	r0, r5
 8010c92:	f7ef fb2d 	bl	80002f0 <memchr>
 8010c96:	b108      	cbz	r0, 8010c9c <_printf_i+0x1bc>
 8010c98:	1b40      	subs	r0, r0, r5
 8010c9a:	6060      	str	r0, [r4, #4]
 8010c9c:	6863      	ldr	r3, [r4, #4]
 8010c9e:	6123      	str	r3, [r4, #16]
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ca6:	e7a7      	b.n	8010bf8 <_printf_i+0x118>
 8010ca8:	6923      	ldr	r3, [r4, #16]
 8010caa:	462a      	mov	r2, r5
 8010cac:	4639      	mov	r1, r7
 8010cae:	4630      	mov	r0, r6
 8010cb0:	47c0      	blx	r8
 8010cb2:	3001      	adds	r0, #1
 8010cb4:	d0aa      	beq.n	8010c0c <_printf_i+0x12c>
 8010cb6:	6823      	ldr	r3, [r4, #0]
 8010cb8:	079b      	lsls	r3, r3, #30
 8010cba:	d413      	bmi.n	8010ce4 <_printf_i+0x204>
 8010cbc:	68e0      	ldr	r0, [r4, #12]
 8010cbe:	9b03      	ldr	r3, [sp, #12]
 8010cc0:	4298      	cmp	r0, r3
 8010cc2:	bfb8      	it	lt
 8010cc4:	4618      	movlt	r0, r3
 8010cc6:	e7a3      	b.n	8010c10 <_printf_i+0x130>
 8010cc8:	2301      	movs	r3, #1
 8010cca:	464a      	mov	r2, r9
 8010ccc:	4639      	mov	r1, r7
 8010cce:	4630      	mov	r0, r6
 8010cd0:	47c0      	blx	r8
 8010cd2:	3001      	adds	r0, #1
 8010cd4:	d09a      	beq.n	8010c0c <_printf_i+0x12c>
 8010cd6:	3501      	adds	r5, #1
 8010cd8:	68e3      	ldr	r3, [r4, #12]
 8010cda:	9a03      	ldr	r2, [sp, #12]
 8010cdc:	1a9b      	subs	r3, r3, r2
 8010cde:	42ab      	cmp	r3, r5
 8010ce0:	dcf2      	bgt.n	8010cc8 <_printf_i+0x1e8>
 8010ce2:	e7eb      	b.n	8010cbc <_printf_i+0x1dc>
 8010ce4:	2500      	movs	r5, #0
 8010ce6:	f104 0919 	add.w	r9, r4, #25
 8010cea:	e7f5      	b.n	8010cd8 <_printf_i+0x1f8>
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1ac      	bne.n	8010c4a <_printf_i+0x16a>
 8010cf0:	7803      	ldrb	r3, [r0, #0]
 8010cf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010cf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010cfa:	e76c      	b.n	8010bd6 <_printf_i+0xf6>
 8010cfc:	08011505 	.word	0x08011505
 8010d00:	08011516 	.word	0x08011516

08010d04 <_putc_r>:
 8010d04:	b570      	push	{r4, r5, r6, lr}
 8010d06:	460d      	mov	r5, r1
 8010d08:	4614      	mov	r4, r2
 8010d0a:	4606      	mov	r6, r0
 8010d0c:	b118      	cbz	r0, 8010d16 <_putc_r+0x12>
 8010d0e:	6983      	ldr	r3, [r0, #24]
 8010d10:	b90b      	cbnz	r3, 8010d16 <_putc_r+0x12>
 8010d12:	f7ff fb51 	bl	80103b8 <__sinit>
 8010d16:	4b13      	ldr	r3, [pc, #76]	; (8010d64 <_putc_r+0x60>)
 8010d18:	429c      	cmp	r4, r3
 8010d1a:	d112      	bne.n	8010d42 <_putc_r+0x3e>
 8010d1c:	6874      	ldr	r4, [r6, #4]
 8010d1e:	68a3      	ldr	r3, [r4, #8]
 8010d20:	3b01      	subs	r3, #1
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	60a3      	str	r3, [r4, #8]
 8010d26:	da16      	bge.n	8010d56 <_putc_r+0x52>
 8010d28:	69a2      	ldr	r2, [r4, #24]
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	db02      	blt.n	8010d34 <_putc_r+0x30>
 8010d2e:	b2eb      	uxtb	r3, r5
 8010d30:	2b0a      	cmp	r3, #10
 8010d32:	d110      	bne.n	8010d56 <_putc_r+0x52>
 8010d34:	4622      	mov	r2, r4
 8010d36:	4629      	mov	r1, r5
 8010d38:	4630      	mov	r0, r6
 8010d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d3e:	f000 b85b 	b.w	8010df8 <__swbuf_r>
 8010d42:	4b09      	ldr	r3, [pc, #36]	; (8010d68 <_putc_r+0x64>)
 8010d44:	429c      	cmp	r4, r3
 8010d46:	d101      	bne.n	8010d4c <_putc_r+0x48>
 8010d48:	68b4      	ldr	r4, [r6, #8]
 8010d4a:	e7e8      	b.n	8010d1e <_putc_r+0x1a>
 8010d4c:	4b07      	ldr	r3, [pc, #28]	; (8010d6c <_putc_r+0x68>)
 8010d4e:	429c      	cmp	r4, r3
 8010d50:	bf08      	it	eq
 8010d52:	68f4      	ldreq	r4, [r6, #12]
 8010d54:	e7e3      	b.n	8010d1e <_putc_r+0x1a>
 8010d56:	6823      	ldr	r3, [r4, #0]
 8010d58:	1c5a      	adds	r2, r3, #1
 8010d5a:	6022      	str	r2, [r4, #0]
 8010d5c:	701d      	strb	r5, [r3, #0]
 8010d5e:	b2e8      	uxtb	r0, r5
 8010d60:	bd70      	pop	{r4, r5, r6, pc}
 8010d62:	bf00      	nop
 8010d64:	080114b4 	.word	0x080114b4
 8010d68:	080114d4 	.word	0x080114d4
 8010d6c:	08011494 	.word	0x08011494

08010d70 <__sread>:
 8010d70:	b510      	push	{r4, lr}
 8010d72:	460c      	mov	r4, r1
 8010d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d78:	f000 fa86 	bl	8011288 <_read_r>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	bfab      	itete	ge
 8010d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d82:	89a3      	ldrhlt	r3, [r4, #12]
 8010d84:	181b      	addge	r3, r3, r0
 8010d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d8a:	bfac      	ite	ge
 8010d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d8e:	81a3      	strhlt	r3, [r4, #12]
 8010d90:	bd10      	pop	{r4, pc}

08010d92 <__swrite>:
 8010d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d96:	461f      	mov	r7, r3
 8010d98:	898b      	ldrh	r3, [r1, #12]
 8010d9a:	05db      	lsls	r3, r3, #23
 8010d9c:	4605      	mov	r5, r0
 8010d9e:	460c      	mov	r4, r1
 8010da0:	4616      	mov	r6, r2
 8010da2:	d505      	bpl.n	8010db0 <__swrite+0x1e>
 8010da4:	2302      	movs	r3, #2
 8010da6:	2200      	movs	r2, #0
 8010da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dac:	f000 f9b6 	bl	801111c <_lseek_r>
 8010db0:	89a3      	ldrh	r3, [r4, #12]
 8010db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010dba:	81a3      	strh	r3, [r4, #12]
 8010dbc:	4632      	mov	r2, r6
 8010dbe:	463b      	mov	r3, r7
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc6:	f000 b869 	b.w	8010e9c <_write_r>

08010dca <__sseek>:
 8010dca:	b510      	push	{r4, lr}
 8010dcc:	460c      	mov	r4, r1
 8010dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd2:	f000 f9a3 	bl	801111c <_lseek_r>
 8010dd6:	1c43      	adds	r3, r0, #1
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	bf15      	itete	ne
 8010ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010de6:	81a3      	strheq	r3, [r4, #12]
 8010de8:	bf18      	it	ne
 8010dea:	81a3      	strhne	r3, [r4, #12]
 8010dec:	bd10      	pop	{r4, pc}

08010dee <__sclose>:
 8010dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df2:	f000 b8d3 	b.w	8010f9c <_close_r>
	...

08010df8 <__swbuf_r>:
 8010df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfa:	460e      	mov	r6, r1
 8010dfc:	4614      	mov	r4, r2
 8010dfe:	4605      	mov	r5, r0
 8010e00:	b118      	cbz	r0, 8010e0a <__swbuf_r+0x12>
 8010e02:	6983      	ldr	r3, [r0, #24]
 8010e04:	b90b      	cbnz	r3, 8010e0a <__swbuf_r+0x12>
 8010e06:	f7ff fad7 	bl	80103b8 <__sinit>
 8010e0a:	4b21      	ldr	r3, [pc, #132]	; (8010e90 <__swbuf_r+0x98>)
 8010e0c:	429c      	cmp	r4, r3
 8010e0e:	d12a      	bne.n	8010e66 <__swbuf_r+0x6e>
 8010e10:	686c      	ldr	r4, [r5, #4]
 8010e12:	69a3      	ldr	r3, [r4, #24]
 8010e14:	60a3      	str	r3, [r4, #8]
 8010e16:	89a3      	ldrh	r3, [r4, #12]
 8010e18:	071a      	lsls	r2, r3, #28
 8010e1a:	d52e      	bpl.n	8010e7a <__swbuf_r+0x82>
 8010e1c:	6923      	ldr	r3, [r4, #16]
 8010e1e:	b363      	cbz	r3, 8010e7a <__swbuf_r+0x82>
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	6820      	ldr	r0, [r4, #0]
 8010e24:	1ac0      	subs	r0, r0, r3
 8010e26:	6963      	ldr	r3, [r4, #20]
 8010e28:	b2f6      	uxtb	r6, r6
 8010e2a:	4283      	cmp	r3, r0
 8010e2c:	4637      	mov	r7, r6
 8010e2e:	dc04      	bgt.n	8010e3a <__swbuf_r+0x42>
 8010e30:	4621      	mov	r1, r4
 8010e32:	4628      	mov	r0, r5
 8010e34:	f000 f948 	bl	80110c8 <_fflush_r>
 8010e38:	bb28      	cbnz	r0, 8010e86 <__swbuf_r+0x8e>
 8010e3a:	68a3      	ldr	r3, [r4, #8]
 8010e3c:	3b01      	subs	r3, #1
 8010e3e:	60a3      	str	r3, [r4, #8]
 8010e40:	6823      	ldr	r3, [r4, #0]
 8010e42:	1c5a      	adds	r2, r3, #1
 8010e44:	6022      	str	r2, [r4, #0]
 8010e46:	701e      	strb	r6, [r3, #0]
 8010e48:	6963      	ldr	r3, [r4, #20]
 8010e4a:	3001      	adds	r0, #1
 8010e4c:	4283      	cmp	r3, r0
 8010e4e:	d004      	beq.n	8010e5a <__swbuf_r+0x62>
 8010e50:	89a3      	ldrh	r3, [r4, #12]
 8010e52:	07db      	lsls	r3, r3, #31
 8010e54:	d519      	bpl.n	8010e8a <__swbuf_r+0x92>
 8010e56:	2e0a      	cmp	r6, #10
 8010e58:	d117      	bne.n	8010e8a <__swbuf_r+0x92>
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	f000 f933 	bl	80110c8 <_fflush_r>
 8010e62:	b190      	cbz	r0, 8010e8a <__swbuf_r+0x92>
 8010e64:	e00f      	b.n	8010e86 <__swbuf_r+0x8e>
 8010e66:	4b0b      	ldr	r3, [pc, #44]	; (8010e94 <__swbuf_r+0x9c>)
 8010e68:	429c      	cmp	r4, r3
 8010e6a:	d101      	bne.n	8010e70 <__swbuf_r+0x78>
 8010e6c:	68ac      	ldr	r4, [r5, #8]
 8010e6e:	e7d0      	b.n	8010e12 <__swbuf_r+0x1a>
 8010e70:	4b09      	ldr	r3, [pc, #36]	; (8010e98 <__swbuf_r+0xa0>)
 8010e72:	429c      	cmp	r4, r3
 8010e74:	bf08      	it	eq
 8010e76:	68ec      	ldreq	r4, [r5, #12]
 8010e78:	e7cb      	b.n	8010e12 <__swbuf_r+0x1a>
 8010e7a:	4621      	mov	r1, r4
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	f000 f81f 	bl	8010ec0 <__swsetup_r>
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d0cc      	beq.n	8010e20 <__swbuf_r+0x28>
 8010e86:	f04f 37ff 	mov.w	r7, #4294967295
 8010e8a:	4638      	mov	r0, r7
 8010e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	080114b4 	.word	0x080114b4
 8010e94:	080114d4 	.word	0x080114d4
 8010e98:	08011494 	.word	0x08011494

08010e9c <_write_r>:
 8010e9c:	b538      	push	{r3, r4, r5, lr}
 8010e9e:	4c07      	ldr	r4, [pc, #28]	; (8010ebc <_write_r+0x20>)
 8010ea0:	4605      	mov	r5, r0
 8010ea2:	4608      	mov	r0, r1
 8010ea4:	4611      	mov	r1, r2
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	6022      	str	r2, [r4, #0]
 8010eaa:	461a      	mov	r2, r3
 8010eac:	f7ef fceb 	bl	8000886 <_write>
 8010eb0:	1c43      	adds	r3, r0, #1
 8010eb2:	d102      	bne.n	8010eba <_write_r+0x1e>
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	b103      	cbz	r3, 8010eba <_write_r+0x1e>
 8010eb8:	602b      	str	r3, [r5, #0]
 8010eba:	bd38      	pop	{r3, r4, r5, pc}
 8010ebc:	24002388 	.word	0x24002388

08010ec0 <__swsetup_r>:
 8010ec0:	4b32      	ldr	r3, [pc, #200]	; (8010f8c <__swsetup_r+0xcc>)
 8010ec2:	b570      	push	{r4, r5, r6, lr}
 8010ec4:	681d      	ldr	r5, [r3, #0]
 8010ec6:	4606      	mov	r6, r0
 8010ec8:	460c      	mov	r4, r1
 8010eca:	b125      	cbz	r5, 8010ed6 <__swsetup_r+0x16>
 8010ecc:	69ab      	ldr	r3, [r5, #24]
 8010ece:	b913      	cbnz	r3, 8010ed6 <__swsetup_r+0x16>
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	f7ff fa71 	bl	80103b8 <__sinit>
 8010ed6:	4b2e      	ldr	r3, [pc, #184]	; (8010f90 <__swsetup_r+0xd0>)
 8010ed8:	429c      	cmp	r4, r3
 8010eda:	d10f      	bne.n	8010efc <__swsetup_r+0x3c>
 8010edc:	686c      	ldr	r4, [r5, #4]
 8010ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	0715      	lsls	r5, r2, #28
 8010ee6:	d42c      	bmi.n	8010f42 <__swsetup_r+0x82>
 8010ee8:	06d0      	lsls	r0, r2, #27
 8010eea:	d411      	bmi.n	8010f10 <__swsetup_r+0x50>
 8010eec:	2209      	movs	r2, #9
 8010eee:	6032      	str	r2, [r6, #0]
 8010ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ef4:	81a3      	strh	r3, [r4, #12]
 8010ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8010efa:	e03e      	b.n	8010f7a <__swsetup_r+0xba>
 8010efc:	4b25      	ldr	r3, [pc, #148]	; (8010f94 <__swsetup_r+0xd4>)
 8010efe:	429c      	cmp	r4, r3
 8010f00:	d101      	bne.n	8010f06 <__swsetup_r+0x46>
 8010f02:	68ac      	ldr	r4, [r5, #8]
 8010f04:	e7eb      	b.n	8010ede <__swsetup_r+0x1e>
 8010f06:	4b24      	ldr	r3, [pc, #144]	; (8010f98 <__swsetup_r+0xd8>)
 8010f08:	429c      	cmp	r4, r3
 8010f0a:	bf08      	it	eq
 8010f0c:	68ec      	ldreq	r4, [r5, #12]
 8010f0e:	e7e6      	b.n	8010ede <__swsetup_r+0x1e>
 8010f10:	0751      	lsls	r1, r2, #29
 8010f12:	d512      	bpl.n	8010f3a <__swsetup_r+0x7a>
 8010f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f16:	b141      	cbz	r1, 8010f2a <__swsetup_r+0x6a>
 8010f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f1c:	4299      	cmp	r1, r3
 8010f1e:	d002      	beq.n	8010f26 <__swsetup_r+0x66>
 8010f20:	4630      	mov	r0, r6
 8010f22:	f7ff f8f1 	bl	8010108 <_free_r>
 8010f26:	2300      	movs	r3, #0
 8010f28:	6363      	str	r3, [r4, #52]	; 0x34
 8010f2a:	89a3      	ldrh	r3, [r4, #12]
 8010f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f30:	81a3      	strh	r3, [r4, #12]
 8010f32:	2300      	movs	r3, #0
 8010f34:	6063      	str	r3, [r4, #4]
 8010f36:	6923      	ldr	r3, [r4, #16]
 8010f38:	6023      	str	r3, [r4, #0]
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	f043 0308 	orr.w	r3, r3, #8
 8010f40:	81a3      	strh	r3, [r4, #12]
 8010f42:	6923      	ldr	r3, [r4, #16]
 8010f44:	b94b      	cbnz	r3, 8010f5a <__swsetup_r+0x9a>
 8010f46:	89a3      	ldrh	r3, [r4, #12]
 8010f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f50:	d003      	beq.n	8010f5a <__swsetup_r+0x9a>
 8010f52:	4621      	mov	r1, r4
 8010f54:	4630      	mov	r0, r6
 8010f56:	f000 f917 	bl	8011188 <__smakebuf_r>
 8010f5a:	89a2      	ldrh	r2, [r4, #12]
 8010f5c:	f012 0301 	ands.w	r3, r2, #1
 8010f60:	d00c      	beq.n	8010f7c <__swsetup_r+0xbc>
 8010f62:	2300      	movs	r3, #0
 8010f64:	60a3      	str	r3, [r4, #8]
 8010f66:	6963      	ldr	r3, [r4, #20]
 8010f68:	425b      	negs	r3, r3
 8010f6a:	61a3      	str	r3, [r4, #24]
 8010f6c:	6923      	ldr	r3, [r4, #16]
 8010f6e:	b953      	cbnz	r3, 8010f86 <__swsetup_r+0xc6>
 8010f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010f78:	d1ba      	bne.n	8010ef0 <__swsetup_r+0x30>
 8010f7a:	bd70      	pop	{r4, r5, r6, pc}
 8010f7c:	0792      	lsls	r2, r2, #30
 8010f7e:	bf58      	it	pl
 8010f80:	6963      	ldrpl	r3, [r4, #20]
 8010f82:	60a3      	str	r3, [r4, #8]
 8010f84:	e7f2      	b.n	8010f6c <__swsetup_r+0xac>
 8010f86:	2000      	movs	r0, #0
 8010f88:	e7f7      	b.n	8010f7a <__swsetup_r+0xba>
 8010f8a:	bf00      	nop
 8010f8c:	24000184 	.word	0x24000184
 8010f90:	080114b4 	.word	0x080114b4
 8010f94:	080114d4 	.word	0x080114d4
 8010f98:	08011494 	.word	0x08011494

08010f9c <_close_r>:
 8010f9c:	b538      	push	{r3, r4, r5, lr}
 8010f9e:	4c06      	ldr	r4, [pc, #24]	; (8010fb8 <_close_r+0x1c>)
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	4605      	mov	r5, r0
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	6023      	str	r3, [r4, #0]
 8010fa8:	f7f0 fbad 	bl	8001706 <_close>
 8010fac:	1c43      	adds	r3, r0, #1
 8010fae:	d102      	bne.n	8010fb6 <_close_r+0x1a>
 8010fb0:	6823      	ldr	r3, [r4, #0]
 8010fb2:	b103      	cbz	r3, 8010fb6 <_close_r+0x1a>
 8010fb4:	602b      	str	r3, [r5, #0]
 8010fb6:	bd38      	pop	{r3, r4, r5, pc}
 8010fb8:	24002388 	.word	0x24002388

08010fbc <__sflush_r>:
 8010fbc:	898a      	ldrh	r2, [r1, #12]
 8010fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fc2:	4605      	mov	r5, r0
 8010fc4:	0710      	lsls	r0, r2, #28
 8010fc6:	460c      	mov	r4, r1
 8010fc8:	d458      	bmi.n	801107c <__sflush_r+0xc0>
 8010fca:	684b      	ldr	r3, [r1, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	dc05      	bgt.n	8010fdc <__sflush_r+0x20>
 8010fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	dc02      	bgt.n	8010fdc <__sflush_r+0x20>
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010fde:	2e00      	cmp	r6, #0
 8010fe0:	d0f9      	beq.n	8010fd6 <__sflush_r+0x1a>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010fe8:	682f      	ldr	r7, [r5, #0]
 8010fea:	6a21      	ldr	r1, [r4, #32]
 8010fec:	602b      	str	r3, [r5, #0]
 8010fee:	d032      	beq.n	8011056 <__sflush_r+0x9a>
 8010ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ff2:	89a3      	ldrh	r3, [r4, #12]
 8010ff4:	075a      	lsls	r2, r3, #29
 8010ff6:	d505      	bpl.n	8011004 <__sflush_r+0x48>
 8010ff8:	6863      	ldr	r3, [r4, #4]
 8010ffa:	1ac0      	subs	r0, r0, r3
 8010ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ffe:	b10b      	cbz	r3, 8011004 <__sflush_r+0x48>
 8011000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011002:	1ac0      	subs	r0, r0, r3
 8011004:	2300      	movs	r3, #0
 8011006:	4602      	mov	r2, r0
 8011008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801100a:	6a21      	ldr	r1, [r4, #32]
 801100c:	4628      	mov	r0, r5
 801100e:	47b0      	blx	r6
 8011010:	1c43      	adds	r3, r0, #1
 8011012:	89a3      	ldrh	r3, [r4, #12]
 8011014:	d106      	bne.n	8011024 <__sflush_r+0x68>
 8011016:	6829      	ldr	r1, [r5, #0]
 8011018:	291d      	cmp	r1, #29
 801101a:	d848      	bhi.n	80110ae <__sflush_r+0xf2>
 801101c:	4a29      	ldr	r2, [pc, #164]	; (80110c4 <__sflush_r+0x108>)
 801101e:	40ca      	lsrs	r2, r1
 8011020:	07d6      	lsls	r6, r2, #31
 8011022:	d544      	bpl.n	80110ae <__sflush_r+0xf2>
 8011024:	2200      	movs	r2, #0
 8011026:	6062      	str	r2, [r4, #4]
 8011028:	04d9      	lsls	r1, r3, #19
 801102a:	6922      	ldr	r2, [r4, #16]
 801102c:	6022      	str	r2, [r4, #0]
 801102e:	d504      	bpl.n	801103a <__sflush_r+0x7e>
 8011030:	1c42      	adds	r2, r0, #1
 8011032:	d101      	bne.n	8011038 <__sflush_r+0x7c>
 8011034:	682b      	ldr	r3, [r5, #0]
 8011036:	b903      	cbnz	r3, 801103a <__sflush_r+0x7e>
 8011038:	6560      	str	r0, [r4, #84]	; 0x54
 801103a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801103c:	602f      	str	r7, [r5, #0]
 801103e:	2900      	cmp	r1, #0
 8011040:	d0c9      	beq.n	8010fd6 <__sflush_r+0x1a>
 8011042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011046:	4299      	cmp	r1, r3
 8011048:	d002      	beq.n	8011050 <__sflush_r+0x94>
 801104a:	4628      	mov	r0, r5
 801104c:	f7ff f85c 	bl	8010108 <_free_r>
 8011050:	2000      	movs	r0, #0
 8011052:	6360      	str	r0, [r4, #52]	; 0x34
 8011054:	e7c0      	b.n	8010fd8 <__sflush_r+0x1c>
 8011056:	2301      	movs	r3, #1
 8011058:	4628      	mov	r0, r5
 801105a:	47b0      	blx	r6
 801105c:	1c41      	adds	r1, r0, #1
 801105e:	d1c8      	bne.n	8010ff2 <__sflush_r+0x36>
 8011060:	682b      	ldr	r3, [r5, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d0c5      	beq.n	8010ff2 <__sflush_r+0x36>
 8011066:	2b1d      	cmp	r3, #29
 8011068:	d001      	beq.n	801106e <__sflush_r+0xb2>
 801106a:	2b16      	cmp	r3, #22
 801106c:	d101      	bne.n	8011072 <__sflush_r+0xb6>
 801106e:	602f      	str	r7, [r5, #0]
 8011070:	e7b1      	b.n	8010fd6 <__sflush_r+0x1a>
 8011072:	89a3      	ldrh	r3, [r4, #12]
 8011074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011078:	81a3      	strh	r3, [r4, #12]
 801107a:	e7ad      	b.n	8010fd8 <__sflush_r+0x1c>
 801107c:	690f      	ldr	r7, [r1, #16]
 801107e:	2f00      	cmp	r7, #0
 8011080:	d0a9      	beq.n	8010fd6 <__sflush_r+0x1a>
 8011082:	0793      	lsls	r3, r2, #30
 8011084:	680e      	ldr	r6, [r1, #0]
 8011086:	bf08      	it	eq
 8011088:	694b      	ldreq	r3, [r1, #20]
 801108a:	600f      	str	r7, [r1, #0]
 801108c:	bf18      	it	ne
 801108e:	2300      	movne	r3, #0
 8011090:	eba6 0807 	sub.w	r8, r6, r7
 8011094:	608b      	str	r3, [r1, #8]
 8011096:	f1b8 0f00 	cmp.w	r8, #0
 801109a:	dd9c      	ble.n	8010fd6 <__sflush_r+0x1a>
 801109c:	4643      	mov	r3, r8
 801109e:	463a      	mov	r2, r7
 80110a0:	6a21      	ldr	r1, [r4, #32]
 80110a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110a4:	4628      	mov	r0, r5
 80110a6:	47b0      	blx	r6
 80110a8:	2800      	cmp	r0, #0
 80110aa:	dc06      	bgt.n	80110ba <__sflush_r+0xfe>
 80110ac:	89a3      	ldrh	r3, [r4, #12]
 80110ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110b2:	81a3      	strh	r3, [r4, #12]
 80110b4:	f04f 30ff 	mov.w	r0, #4294967295
 80110b8:	e78e      	b.n	8010fd8 <__sflush_r+0x1c>
 80110ba:	4407      	add	r7, r0
 80110bc:	eba8 0800 	sub.w	r8, r8, r0
 80110c0:	e7e9      	b.n	8011096 <__sflush_r+0xda>
 80110c2:	bf00      	nop
 80110c4:	20400001 	.word	0x20400001

080110c8 <_fflush_r>:
 80110c8:	b538      	push	{r3, r4, r5, lr}
 80110ca:	690b      	ldr	r3, [r1, #16]
 80110cc:	4605      	mov	r5, r0
 80110ce:	460c      	mov	r4, r1
 80110d0:	b1db      	cbz	r3, 801110a <_fflush_r+0x42>
 80110d2:	b118      	cbz	r0, 80110dc <_fflush_r+0x14>
 80110d4:	6983      	ldr	r3, [r0, #24]
 80110d6:	b90b      	cbnz	r3, 80110dc <_fflush_r+0x14>
 80110d8:	f7ff f96e 	bl	80103b8 <__sinit>
 80110dc:	4b0c      	ldr	r3, [pc, #48]	; (8011110 <_fflush_r+0x48>)
 80110de:	429c      	cmp	r4, r3
 80110e0:	d109      	bne.n	80110f6 <_fflush_r+0x2e>
 80110e2:	686c      	ldr	r4, [r5, #4]
 80110e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110e8:	b17b      	cbz	r3, 801110a <_fflush_r+0x42>
 80110ea:	4621      	mov	r1, r4
 80110ec:	4628      	mov	r0, r5
 80110ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110f2:	f7ff bf63 	b.w	8010fbc <__sflush_r>
 80110f6:	4b07      	ldr	r3, [pc, #28]	; (8011114 <_fflush_r+0x4c>)
 80110f8:	429c      	cmp	r4, r3
 80110fa:	d101      	bne.n	8011100 <_fflush_r+0x38>
 80110fc:	68ac      	ldr	r4, [r5, #8]
 80110fe:	e7f1      	b.n	80110e4 <_fflush_r+0x1c>
 8011100:	4b05      	ldr	r3, [pc, #20]	; (8011118 <_fflush_r+0x50>)
 8011102:	429c      	cmp	r4, r3
 8011104:	bf08      	it	eq
 8011106:	68ec      	ldreq	r4, [r5, #12]
 8011108:	e7ec      	b.n	80110e4 <_fflush_r+0x1c>
 801110a:	2000      	movs	r0, #0
 801110c:	bd38      	pop	{r3, r4, r5, pc}
 801110e:	bf00      	nop
 8011110:	080114b4 	.word	0x080114b4
 8011114:	080114d4 	.word	0x080114d4
 8011118:	08011494 	.word	0x08011494

0801111c <_lseek_r>:
 801111c:	b538      	push	{r3, r4, r5, lr}
 801111e:	4c07      	ldr	r4, [pc, #28]	; (801113c <_lseek_r+0x20>)
 8011120:	4605      	mov	r5, r0
 8011122:	4608      	mov	r0, r1
 8011124:	4611      	mov	r1, r2
 8011126:	2200      	movs	r2, #0
 8011128:	6022      	str	r2, [r4, #0]
 801112a:	461a      	mov	r2, r3
 801112c:	f7f0 fb12 	bl	8001754 <_lseek>
 8011130:	1c43      	adds	r3, r0, #1
 8011132:	d102      	bne.n	801113a <_lseek_r+0x1e>
 8011134:	6823      	ldr	r3, [r4, #0]
 8011136:	b103      	cbz	r3, 801113a <_lseek_r+0x1e>
 8011138:	602b      	str	r3, [r5, #0]
 801113a:	bd38      	pop	{r3, r4, r5, pc}
 801113c:	24002388 	.word	0x24002388

08011140 <__swhatbuf_r>:
 8011140:	b570      	push	{r4, r5, r6, lr}
 8011142:	460e      	mov	r6, r1
 8011144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011148:	2900      	cmp	r1, #0
 801114a:	b096      	sub	sp, #88	; 0x58
 801114c:	4614      	mov	r4, r2
 801114e:	461d      	mov	r5, r3
 8011150:	da07      	bge.n	8011162 <__swhatbuf_r+0x22>
 8011152:	2300      	movs	r3, #0
 8011154:	602b      	str	r3, [r5, #0]
 8011156:	89b3      	ldrh	r3, [r6, #12]
 8011158:	061a      	lsls	r2, r3, #24
 801115a:	d410      	bmi.n	801117e <__swhatbuf_r+0x3e>
 801115c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011160:	e00e      	b.n	8011180 <__swhatbuf_r+0x40>
 8011162:	466a      	mov	r2, sp
 8011164:	f000 f8a2 	bl	80112ac <_fstat_r>
 8011168:	2800      	cmp	r0, #0
 801116a:	dbf2      	blt.n	8011152 <__swhatbuf_r+0x12>
 801116c:	9a01      	ldr	r2, [sp, #4]
 801116e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011172:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011176:	425a      	negs	r2, r3
 8011178:	415a      	adcs	r2, r3
 801117a:	602a      	str	r2, [r5, #0]
 801117c:	e7ee      	b.n	801115c <__swhatbuf_r+0x1c>
 801117e:	2340      	movs	r3, #64	; 0x40
 8011180:	2000      	movs	r0, #0
 8011182:	6023      	str	r3, [r4, #0]
 8011184:	b016      	add	sp, #88	; 0x58
 8011186:	bd70      	pop	{r4, r5, r6, pc}

08011188 <__smakebuf_r>:
 8011188:	898b      	ldrh	r3, [r1, #12]
 801118a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801118c:	079d      	lsls	r5, r3, #30
 801118e:	4606      	mov	r6, r0
 8011190:	460c      	mov	r4, r1
 8011192:	d507      	bpl.n	80111a4 <__smakebuf_r+0x1c>
 8011194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011198:	6023      	str	r3, [r4, #0]
 801119a:	6123      	str	r3, [r4, #16]
 801119c:	2301      	movs	r3, #1
 801119e:	6163      	str	r3, [r4, #20]
 80111a0:	b002      	add	sp, #8
 80111a2:	bd70      	pop	{r4, r5, r6, pc}
 80111a4:	ab01      	add	r3, sp, #4
 80111a6:	466a      	mov	r2, sp
 80111a8:	f7ff ffca 	bl	8011140 <__swhatbuf_r>
 80111ac:	9900      	ldr	r1, [sp, #0]
 80111ae:	4605      	mov	r5, r0
 80111b0:	4630      	mov	r0, r6
 80111b2:	f7fe fff7 	bl	80101a4 <_malloc_r>
 80111b6:	b948      	cbnz	r0, 80111cc <__smakebuf_r+0x44>
 80111b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111bc:	059a      	lsls	r2, r3, #22
 80111be:	d4ef      	bmi.n	80111a0 <__smakebuf_r+0x18>
 80111c0:	f023 0303 	bic.w	r3, r3, #3
 80111c4:	f043 0302 	orr.w	r3, r3, #2
 80111c8:	81a3      	strh	r3, [r4, #12]
 80111ca:	e7e3      	b.n	8011194 <__smakebuf_r+0xc>
 80111cc:	4b0d      	ldr	r3, [pc, #52]	; (8011204 <__smakebuf_r+0x7c>)
 80111ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80111d0:	89a3      	ldrh	r3, [r4, #12]
 80111d2:	6020      	str	r0, [r4, #0]
 80111d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111d8:	81a3      	strh	r3, [r4, #12]
 80111da:	9b00      	ldr	r3, [sp, #0]
 80111dc:	6163      	str	r3, [r4, #20]
 80111de:	9b01      	ldr	r3, [sp, #4]
 80111e0:	6120      	str	r0, [r4, #16]
 80111e2:	b15b      	cbz	r3, 80111fc <__smakebuf_r+0x74>
 80111e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111e8:	4630      	mov	r0, r6
 80111ea:	f000 f871 	bl	80112d0 <_isatty_r>
 80111ee:	b128      	cbz	r0, 80111fc <__smakebuf_r+0x74>
 80111f0:	89a3      	ldrh	r3, [r4, #12]
 80111f2:	f023 0303 	bic.w	r3, r3, #3
 80111f6:	f043 0301 	orr.w	r3, r3, #1
 80111fa:	81a3      	strh	r3, [r4, #12]
 80111fc:	89a3      	ldrh	r3, [r4, #12]
 80111fe:	431d      	orrs	r5, r3
 8011200:	81a5      	strh	r5, [r4, #12]
 8011202:	e7cd      	b.n	80111a0 <__smakebuf_r+0x18>
 8011204:	08010381 	.word	0x08010381

08011208 <memmove>:
 8011208:	4288      	cmp	r0, r1
 801120a:	b510      	push	{r4, lr}
 801120c:	eb01 0302 	add.w	r3, r1, r2
 8011210:	d807      	bhi.n	8011222 <memmove+0x1a>
 8011212:	1e42      	subs	r2, r0, #1
 8011214:	4299      	cmp	r1, r3
 8011216:	d00a      	beq.n	801122e <memmove+0x26>
 8011218:	f811 4b01 	ldrb.w	r4, [r1], #1
 801121c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011220:	e7f8      	b.n	8011214 <memmove+0xc>
 8011222:	4283      	cmp	r3, r0
 8011224:	d9f5      	bls.n	8011212 <memmove+0xa>
 8011226:	1881      	adds	r1, r0, r2
 8011228:	1ad2      	subs	r2, r2, r3
 801122a:	42d3      	cmn	r3, r2
 801122c:	d100      	bne.n	8011230 <memmove+0x28>
 801122e:	bd10      	pop	{r4, pc}
 8011230:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011234:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011238:	e7f7      	b.n	801122a <memmove+0x22>

0801123a <_realloc_r>:
 801123a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801123c:	4607      	mov	r7, r0
 801123e:	4614      	mov	r4, r2
 8011240:	460e      	mov	r6, r1
 8011242:	b921      	cbnz	r1, 801124e <_realloc_r+0x14>
 8011244:	4611      	mov	r1, r2
 8011246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801124a:	f7fe bfab 	b.w	80101a4 <_malloc_r>
 801124e:	b922      	cbnz	r2, 801125a <_realloc_r+0x20>
 8011250:	f7fe ff5a 	bl	8010108 <_free_r>
 8011254:	4625      	mov	r5, r4
 8011256:	4628      	mov	r0, r5
 8011258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801125a:	f000 f849 	bl	80112f0 <_malloc_usable_size_r>
 801125e:	42a0      	cmp	r0, r4
 8011260:	d20f      	bcs.n	8011282 <_realloc_r+0x48>
 8011262:	4621      	mov	r1, r4
 8011264:	4638      	mov	r0, r7
 8011266:	f7fe ff9d 	bl	80101a4 <_malloc_r>
 801126a:	4605      	mov	r5, r0
 801126c:	2800      	cmp	r0, #0
 801126e:	d0f2      	beq.n	8011256 <_realloc_r+0x1c>
 8011270:	4631      	mov	r1, r6
 8011272:	4622      	mov	r2, r4
 8011274:	f7fe ff34 	bl	80100e0 <memcpy>
 8011278:	4631      	mov	r1, r6
 801127a:	4638      	mov	r0, r7
 801127c:	f7fe ff44 	bl	8010108 <_free_r>
 8011280:	e7e9      	b.n	8011256 <_realloc_r+0x1c>
 8011282:	4635      	mov	r5, r6
 8011284:	e7e7      	b.n	8011256 <_realloc_r+0x1c>
	...

08011288 <_read_r>:
 8011288:	b538      	push	{r3, r4, r5, lr}
 801128a:	4c07      	ldr	r4, [pc, #28]	; (80112a8 <_read_r+0x20>)
 801128c:	4605      	mov	r5, r0
 801128e:	4608      	mov	r0, r1
 8011290:	4611      	mov	r1, r2
 8011292:	2200      	movs	r2, #0
 8011294:	6022      	str	r2, [r4, #0]
 8011296:	461a      	mov	r2, r3
 8011298:	f7f0 fa18 	bl	80016cc <_read>
 801129c:	1c43      	adds	r3, r0, #1
 801129e:	d102      	bne.n	80112a6 <_read_r+0x1e>
 80112a0:	6823      	ldr	r3, [r4, #0]
 80112a2:	b103      	cbz	r3, 80112a6 <_read_r+0x1e>
 80112a4:	602b      	str	r3, [r5, #0]
 80112a6:	bd38      	pop	{r3, r4, r5, pc}
 80112a8:	24002388 	.word	0x24002388

080112ac <_fstat_r>:
 80112ac:	b538      	push	{r3, r4, r5, lr}
 80112ae:	4c07      	ldr	r4, [pc, #28]	; (80112cc <_fstat_r+0x20>)
 80112b0:	2300      	movs	r3, #0
 80112b2:	4605      	mov	r5, r0
 80112b4:	4608      	mov	r0, r1
 80112b6:	4611      	mov	r1, r2
 80112b8:	6023      	str	r3, [r4, #0]
 80112ba:	f7f0 fa30 	bl	800171e <_fstat>
 80112be:	1c43      	adds	r3, r0, #1
 80112c0:	d102      	bne.n	80112c8 <_fstat_r+0x1c>
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	b103      	cbz	r3, 80112c8 <_fstat_r+0x1c>
 80112c6:	602b      	str	r3, [r5, #0]
 80112c8:	bd38      	pop	{r3, r4, r5, pc}
 80112ca:	bf00      	nop
 80112cc:	24002388 	.word	0x24002388

080112d0 <_isatty_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4c06      	ldr	r4, [pc, #24]	; (80112ec <_isatty_r+0x1c>)
 80112d4:	2300      	movs	r3, #0
 80112d6:	4605      	mov	r5, r0
 80112d8:	4608      	mov	r0, r1
 80112da:	6023      	str	r3, [r4, #0]
 80112dc:	f7f0 fa2f 	bl	800173e <_isatty>
 80112e0:	1c43      	adds	r3, r0, #1
 80112e2:	d102      	bne.n	80112ea <_isatty_r+0x1a>
 80112e4:	6823      	ldr	r3, [r4, #0]
 80112e6:	b103      	cbz	r3, 80112ea <_isatty_r+0x1a>
 80112e8:	602b      	str	r3, [r5, #0]
 80112ea:	bd38      	pop	{r3, r4, r5, pc}
 80112ec:	24002388 	.word	0x24002388

080112f0 <_malloc_usable_size_r>:
 80112f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112f4:	1f18      	subs	r0, r3, #4
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	bfbc      	itt	lt
 80112fa:	580b      	ldrlt	r3, [r1, r0]
 80112fc:	18c0      	addlt	r0, r0, r3
 80112fe:	4770      	bx	lr

08011300 <_init>:
 8011300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011302:	bf00      	nop
 8011304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011306:	bc08      	pop	{r3}
 8011308:	469e      	mov	lr, r3
 801130a:	4770      	bx	lr

0801130c <_fini>:
 801130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130e:	bf00      	nop
 8011310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011312:	bc08      	pop	{r3}
 8011314:	469e      	mov	lr, r3
 8011316:	4770      	bx	lr

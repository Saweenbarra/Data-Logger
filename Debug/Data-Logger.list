
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08013794  08013794  00023794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a60  08013a60  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08013a60  08013a60  00023a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a68  08013a68  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a68  08013a68  00023a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a6c  08013a6c  00023a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08013a70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ec  240001cc  08013c3c  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240017b8  08013c3c  000317b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cb2e  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006682  00000000  00000000  0006cd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fa8  00000000  00000000  000733b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d18  00000000  00000000  00075358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000add5  00000000  00000000  00077070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021873  00000000  00000000  00081e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00170194  00000000  00000000  000a36b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021384c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c48  00000000  00000000  002138c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001cc 	.word	0x240001cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801377c 	.word	0x0801377c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d0 	.word	0x240001d0
 80002dc:	0801377c 	.word	0x0801377c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000688:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800068c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d013      	beq.n	80006c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000698:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800069c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00b      	beq.n	80006c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006a8:	e000      	b.n	80006ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80006aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f9      	beq.n	80006aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_write>:
static void MX_UART8_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	e009      	b.n	80006f8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	60ba      	str	r2, [r7, #8]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffc7 	bl	8000680 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	dbf1      	blt.n	80006e4 <_write+0x16>
  return len;
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b092      	sub	sp, #72	; 0x48
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("Starting");
 8000712:	4845      	ldr	r0, [pc, #276]	; (8000828 <main+0x11c>)
 8000714:	f012 f992 	bl	8012a3c <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f001 f810 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f89c 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 fb8a 	bl	8000e38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000724:	f000 fb68 	bl	8000df8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000728:	f000 fa56 	bl	8000bd8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800072c:	f00c fb06 	bl	800cd3c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000730:	f011 fbcc 	bl	8011ecc <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8000734:	f000 f988 	bl	8000a48 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000738:	f000 f9ea 	bl	8000b10 <MX_FDCAN2_Init>
  MX_UART8_Init();
 800073c:	f000 fac4 	bl	8000cc8 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000740:	f000 fb0e 	bl	8000d60 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000744:	f000 fa6a 	bl	8000c1c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8000748:	2201      	movs	r2, #1
 800074a:	4938      	ldr	r1, [pc, #224]	; (800082c <main+0x120>)
 800074c:	4838      	ldr	r0, [pc, #224]	; (8000830 <main+0x124>)
 800074e:	f010 ff3f 	bl	80115d0 <f_mount>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d13d      	bne.n	80007d4 <main+0xc8>
	  printf("Success :)\n");
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <main+0x128>)
 800075a:	f012 f9e3 	bl	8012b24 <puts>
  	  char myPath[] = "threemhz.csv\0";
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <main+0x12c>)
 8000760:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000766:	c407      	stmia	r4!, {r0, r1, r2}
 8000768:	8023      	strh	r3, [r4, #0]
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 800076a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076e:	220a      	movs	r2, #10
 8000770:	4619      	mov	r1, r3
 8000772:	4832      	ldr	r0, [pc, #200]	; (800083c <main+0x130>)
 8000774:	f010 ff72 	bl	801165c <f_open>
  	  char myData[] = "This is some data. This is some more data";
 8000778:	4b31      	ldr	r3, [pc, #196]	; (8000840 <main+0x134>)
 800077a:	1d3c      	adds	r4, r7, #4
 800077c:	461d      	mov	r5, r3
 800077e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000786:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800078a:	c403      	stmia	r4!, {r0, r1}
 800078c:	8022      	strh	r2, [r4, #0]
  	  f_write(&myFILE, myData, sizeof(myData), &testByte);
 800078e:	1d39      	adds	r1, r7, #4
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <main+0x138>)
 8000792:	222a      	movs	r2, #42	; 0x2a
 8000794:	4829      	ldr	r0, [pc, #164]	; (800083c <main+0x130>)
 8000796:	f011 f91f 	bl	80119d8 <f_write>
  	  f_close(&myFILE);
 800079a:	4828      	ldr	r0, [pc, #160]	; (800083c <main+0x130>)
 800079c:	f011 fb0f 	bl	8011dbe <f_close>
  	  for(int i=0; i<10; i++){
 80007a0:	2300      	movs	r3, #0
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
 80007a4:	e012      	b.n	80007cc <main+0xc0>
  		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007a6:	2101      	movs	r1, #1
 80007a8:	4827      	ldr	r0, [pc, #156]	; (8000848 <main+0x13c>)
 80007aa:	f003 fba2 	bl	8003ef2 <HAL_GPIO_TogglePin>
  		HAL_Delay(1000);
 80007ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b2:	f001 f855 	bl	8001860 <HAL_Delay>
  		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007b6:	2101      	movs	r1, #1
 80007b8:	4823      	ldr	r0, [pc, #140]	; (8000848 <main+0x13c>)
 80007ba:	f003 fb9a 	bl	8003ef2 <HAL_GPIO_TogglePin>
  		HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f001 f84d 	bl	8001860 <HAL_Delay>
  	  for(int i=0; i<10; i++){
 80007c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007c8:	3301      	adds	r3, #1
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
 80007cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007ce:	2b09      	cmp	r3, #9
 80007d0:	dde9      	ble.n	80007a6 <main+0x9a>
 80007d2:	e01b      	b.n	800080c <main+0x100>
  	  }
    }
  else{
	  printf("Failed :(\n");
 80007d4:	481d      	ldr	r0, [pc, #116]	; (800084c <main+0x140>)
 80007d6:	f012 f9a5 	bl	8012b24 <puts>
	  for(int i=0; i<10; i++){
 80007da:	2300      	movs	r3, #0
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
 80007de:	e012      	b.n	8000806 <main+0xfa>
	    		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007e0:	2101      	movs	r1, #1
 80007e2:	4819      	ldr	r0, [pc, #100]	; (8000848 <main+0x13c>)
 80007e4:	f003 fb85 	bl	8003ef2 <HAL_GPIO_TogglePin>
	    		HAL_Delay(500);
 80007e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ec:	f001 f838 	bl	8001860 <HAL_Delay>
	    		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007f0:	2101      	movs	r1, #1
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <main+0x13c>)
 80007f4:	f003 fb7d 	bl	8003ef2 <HAL_GPIO_TogglePin>
	    		HAL_Delay(500);
 80007f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007fc:	f001 f830 	bl	8001860 <HAL_Delay>
	  for(int i=0; i<10; i++){
 8000800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000802:	3301      	adds	r3, #1
 8000804:	643b      	str	r3, [r7, #64]	; 0x40
 8000806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000808:	2b09      	cmp	r3, #9
 800080a:	dde9      	ble.n	80007e0 <main+0xd4>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Loop\n\r");
 800080c:	4810      	ldr	r0, [pc, #64]	; (8000850 <main+0x144>)
 800080e:	f012 f915 	bl	8012a3c <iprintf>
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(1000);
 8000812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000816:	f001 f823 	bl	8001860 <HAL_Delay>
	  count++;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <main+0x148>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <main+0x148>)
 8000824:	701a      	strb	r2, [r3, #0]
	  printf("Loop\n\r");
 8000826:	e7f1      	b.n	800080c <main+0x100>
 8000828:	08013794 	.word	0x08013794
 800082c:	24000a78 	.word	0x24000a78
 8000830:	2400079c 	.word	0x2400079c
 8000834:	080137a0 	.word	0x080137a0
 8000838:	080137c0 	.word	0x080137c0
 800083c:	24000338 	.word	0x24000338
 8000840:	080137d0 	.word	0x080137d0
 8000844:	24000a6c 	.word	0x24000a6c
 8000848:	58020400 	.word	0x58020400
 800084c:	080137ac 	.word	0x080137ac
 8000850:	080137b8 	.word	0x080137b8
 8000854:	240001e8 	.word	0x240001e8

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0cc      	sub	sp, #304	; 0x130
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000862:	224c      	movs	r2, #76	; 0x4c
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f012 f837 	bl	80128da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000870:	2220      	movs	r2, #32
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f012 f830 	bl	80128da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	4618      	mov	r0, r3
 8000880:	23bc      	movs	r3, #188	; 0xbc
 8000882:	461a      	mov	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f012 f828 	bl	80128da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800088a:	2002      	movs	r0, #2
 800088c:	f004 fd54 	bl	8005338 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	4b68      	ldr	r3, [pc, #416]	; (8000a38 <SystemClock_Config+0x1e0>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	4a67      	ldr	r2, [pc, #412]	; (8000a38 <SystemClock_Config+0x1e0>)
 800089c:	f023 0301 	bic.w	r3, r3, #1
 80008a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008a2:	4b65      	ldr	r3, [pc, #404]	; (8000a38 <SystemClock_Config+0x1e0>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a6:	f003 0201 	and.w	r2, r3, #1
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	4b63      	ldr	r3, [pc, #396]	; (8000a3c <SystemClock_Config+0x1e4>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b6:	4a61      	ldr	r2, [pc, #388]	; (8000a3c <SystemClock_Config+0x1e4>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b5f      	ldr	r3, [pc, #380]	; (8000a3c <SystemClock_Config+0x1e4>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ce:	bf00      	nop
 80008d0:	4b5a      	ldr	r3, [pc, #360]	; (8000a3c <SystemClock_Config+0x1e4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008dc:	d1f8      	bne.n	80008d0 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008de:	4b58      	ldr	r3, [pc, #352]	; (8000a40 <SystemClock_Config+0x1e8>)
 80008e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e2:	f023 0303 	bic.w	r3, r3, #3
 80008e6:	4a56      	ldr	r2, [pc, #344]	; (8000a40 <SystemClock_Config+0x1e8>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008ee:	2303      	movs	r3, #3
 80008f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	2302      	movs	r3, #2
 8000910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 23;
 800091a:	2317      	movs	r3, #23
 800091c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000926:	2306      	movs	r3, #6
 8000928:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000932:	230c      	movs	r3, #12
 8000934:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000948:	4618      	mov	r0, r3
 800094a:	f004 fd3f 	bl	80053cc <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000954:	f000 fb5a 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	233f      	movs	r3, #63	; 0x3f
 800095a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800095e:	2300      	movs	r3, #0
 8000960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000988:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f005 f92c 	bl	8005bec <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x146>
  {
    Error_Handler();
 800099a:	f000 fb37 	bl	800100c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <SystemClock_Config+0x1ec>)
 80009a4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2202      	movs	r2, #2
 80009ac:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	220c      	movs	r2, #12
 80009b4:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2202      	movs	r2, #2
 80009bc:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2202      	movs	r2, #2
 80009c4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 50;
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2232      	movs	r2, #50	; 0x32
 80009cc:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	22c0      	movs	r2, #192	; 0xc0
 80009d4:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2220      	movs	r2, #32
 80009dc:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ee:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	2200      	movs	r2, #0
 80009f6:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2200      	movs	r2, #0
 8000a06:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f005 fc6b 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x1d0>
  {
    Error_Handler();
 8000a24:	f000 faf2 	bl	800100c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000a28:	f004 fcc0 	bl	80053ac <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000a2c:	bf00      	nop
 8000a2e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	58000400 	.word	0x58000400
 8000a3c:	58024800 	.word	0x58024800
 8000a40:	58024400 	.word	0x58024400
 8000a44:	00059002 	.word	0x00059002

08000a48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a4e:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <MX_FDCAN1_Init+0xc4>)
 8000a50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_FDCAN1_Init+0xc0>)
 8000af6:	f002 fcb3 	bl	8003460 <HAL_FDCAN_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b00:	f000 fa84 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	240005e8 	.word	0x240005e8
 8000b0c:	4000a000 	.word	0x4000a000

08000b10 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b16:	4a2f      	ldr	r2, [pc, #188]	; (8000bd4 <MX_FDCAN2_Init+0xc4>)
 8000b18:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000bb8:	2204      	movs	r2, #4
 8000bba:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_FDCAN2_Init+0xc0>)
 8000bbe:	f002 fc4f 	bl	8003460 <HAL_FDCAN_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000bc8:	f000 fa20 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	240009cc 	.word	0x240009cc
 8000bd4:	4000a400 	.word	0x4000a400

08000bd8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_SDMMC1_SD_Init+0x3c>)
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <MX_SDMMC1_SD_Init+0x40>)
 8000be0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_SDMMC1_SD_Init+0x3c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_SDMMC1_SD_Init+0x3c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_SDMMC1_SD_Init+0x3c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <MX_SDMMC1_SD_Init+0x3c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <MX_SDMMC1_SD_Init+0x3c>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	24000568 	.word	0x24000568
 8000c18:	52007000 	.word	0x52007000

08000c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c22:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <MX_SPI1_Init+0xa8>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_SPI1_Init+0xa4>)
 8000cac:	f008 fda2 	bl	80097f4 <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000cb6:	f000 f9a9 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	24000714 	.word	0x24000714
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_UART8_Init+0x90>)
 8000cce:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <MX_UART8_Init+0x94>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_UART8_Init+0x90>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <MX_UART8_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_UART8_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_UART8_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_UART8_Init+0x90>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_UART8_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_UART8_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_UART8_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_UART8_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_UART8_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <MX_UART8_Init+0x90>)
 8000d12:	f008 fe82 	bl	8009a1a <HAL_UART_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f000 f976 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_UART8_Init+0x90>)
 8000d24:	f009 fe1d 	bl	800a962 <HAL_UARTEx_SetTxFifoThreshold>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000d2e:	f000 f96d 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <MX_UART8_Init+0x90>)
 8000d36:	f009 fe52 	bl	800a9de <HAL_UARTEx_SetRxFifoThreshold>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 f964 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_UART8_Init+0x90>)
 8000d46:	f009 fdd3 	bl	800a8f0 <HAL_UARTEx_DisableFifoMode>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000d50:	f000 f95c 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	24000688 	.word	0x24000688
 8000d5c:	40007c00 	.word	0x40007c00

08000d60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <MX_USART3_UART_Init+0x94>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d6c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da8:	4811      	ldr	r0, [pc, #68]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000daa:	f008 fe36 	bl	8009a1a <HAL_UART_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000db4:	f000 f92a 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db8:	2100      	movs	r1, #0
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dbc:	f009 fdd1 	bl	800a962 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc6:	f000 f921 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4808      	ldr	r0, [pc, #32]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dce:	f009 fe06 	bl	800a9de <HAL_UARTEx_SetRxFifoThreshold>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd8:	f000 f918 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dde:	f009 fd87 	bl	800a8f0 <HAL_UARTEx_DisableFifoMode>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000de8:	f000 f910 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	240002ac 	.word	0x240002ac
 8000df4:	40004800 	.word	0x40004800

08000df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_DMA_Init+0x3c>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <MX_DMA_Init+0x3c>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_DMA_Init+0x3c>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	200b      	movs	r0, #11
 8000e22:	f000 fe26 	bl	8001a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e26:	200b      	movs	r0, #11
 8000e28:	f000 fe3d 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58024400 	.word	0x58024400

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4e:	4b69      	ldr	r3, [pc, #420]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a67      	ldr	r2, [pc, #412]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b65      	ldr	r3, [pc, #404]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b61      	ldr	r3, [pc, #388]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a60      	ldr	r2, [pc, #384]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a58      	ldr	r2, [pc, #352]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b52      	ldr	r3, [pc, #328]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	4a51      	ldr	r2, [pc, #324]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb8:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	4a49      	ldr	r2, [pc, #292]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed6:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee4:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	4a42      	ldr	r2, [pc, #264]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <MX_GPIO_Init+0x1bc>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	210c      	movs	r1, #12
 8000f06:	483c      	ldr	r0, [pc, #240]	; (8000ff8 <MX_GPIO_Init+0x1c0>)
 8000f08:	f002 ffda 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2103      	movs	r1, #3
 8000f10:	483a      	ldr	r0, [pc, #232]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000f12:	f002 ffd5 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4839      	ldr	r0, [pc, #228]	; (8001000 <MX_GPIO_Init+0x1c8>)
 8000f1c:	f002 ffd0 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f26:	4837      	ldr	r0, [pc, #220]	; (8001004 <MX_GPIO_Init+0x1cc>)
 8000f28:	f002 ffca 	bl	8003ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	482d      	ldr	r0, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0x1c0>)
 8000f44:	f002 fdf4 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4827      	ldr	r0, [pc, #156]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000f60:	f002 fde6 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000f64:	2304      	movs	r3, #4
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_GPIO_Init+0x1d0>)
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	4821      	ldr	r0, [pc, #132]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000f78:	f002 fdda 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	481b      	ldr	r0, [pc, #108]	; (8001000 <MX_GPIO_Init+0x1c8>)
 8000f94:	f002 fdcc 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_GPIO_Init+0x1d0>)
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <MX_GPIO_Init+0x1c0>)
 8000fae:	f002 fdbf 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480e      	ldr	r0, [pc, #56]	; (8001004 <MX_GPIO_Init+0x1cc>)
 8000fcc:	f002 fdb0 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000fe6:	f002 fda3 	bl	8003b30 <HAL_GPIO_Init>

}
 8000fea:	bf00      	nop
 8000fec:	3730      	adds	r7, #48	; 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58021000 	.word	0x58021000
 8000ffc:	58020000 	.word	0x58020000
 8001000:	58020400 	.word	0x58020400
 8001004:	58020c00 	.word	0x58020c00
 8001008:	11110000 	.word	0x11110000

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001012:	e7fe      	b.n	8001012 <Error_Handler+0x6>

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_MspInit+0x30>)
 800101c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_MspInit+0x30>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_MspInit+0x30>)
 800102c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	58024400 	.word	0x58024400

08001048 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a3d      	ldr	r2, [pc, #244]	; (800115c <HAL_FDCAN_MspInit+0x114>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d138      	bne.n	80010dc <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_FDCAN_MspInit+0x118>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a3b      	ldr	r2, [pc, #236]	; (8001160 <HAL_FDCAN_MspInit+0x118>)
 8001072:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_FDCAN_MspInit+0x118>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10e      	bne.n	800109a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 800107e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001082:	4a38      	ldr	r2, [pc, #224]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 800108e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	4a30      	ldr	r2, [pc, #192]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80010ca:	2309      	movs	r3, #9
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4824      	ldr	r0, [pc, #144]	; (8001168 <HAL_FDCAN_MspInit+0x120>)
 80010d6:	f002 fd2b 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80010da:	e03b      	b.n	8001154 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a22      	ldr	r2, [pc, #136]	; (800116c <HAL_FDCAN_MspInit+0x124>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d136      	bne.n	8001154 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <HAL_FDCAN_MspInit+0x118>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <HAL_FDCAN_MspInit+0x118>)
 80010ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_FDCAN_MspInit+0x118>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d10e      	bne.n	8001116 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 80010fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 800110a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a11      	ldr	r2, [pc, #68]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_FDCAN_MspInit+0x11c>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001134:	2360      	movs	r3, #96	; 0x60
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001144:	2309      	movs	r3, #9
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <HAL_FDCAN_MspInit+0x120>)
 8001150:	f002 fcee 	bl	8003b30 <HAL_GPIO_Init>
}
 8001154:	bf00      	nop
 8001156:	3730      	adds	r7, #48	; 0x30
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	4000a000 	.word	0x4000a000
 8001160:	240001ec 	.word	0x240001ec
 8001164:	58024400 	.word	0x58024400
 8001168:	58020400 	.word	0x58020400
 800116c:	4000a400 	.word	0x4000a400

08001170 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <HAL_SD_MspInit+0xc8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d14d      	bne.n	800122e <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_SD_MspInit+0xcc>)
 8001194:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001198:	4a28      	ldr	r2, [pc, #160]	; (800123c <HAL_SD_MspInit+0xcc>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_SD_MspInit+0xcc>)
 80011a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <HAL_SD_MspInit+0xcc>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a21      	ldr	r2, [pc, #132]	; (800123c <HAL_SD_MspInit+0xcc>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_SD_MspInit+0xcc>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HAL_SD_MspInit+0xcc>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_SD_MspInit+0xcc>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_SD_MspInit+0xcc>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011fe:	230c      	movs	r3, #12
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_SD_MspInit+0xd0>)
 800120a:	f002 fc91 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800120e:	2304      	movs	r3, #4
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800121e:	230c      	movs	r3, #12
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <HAL_SD_MspInit+0xd4>)
 800122a:	f002 fc81 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	52007000 	.word	0x52007000
 800123c:	58024400 	.word	0x58024400
 8001240:	58020800 	.word	0x58020800
 8001244:	58020c00 	.word	0x58020c00

08001248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <HAL_SPI_MspInit+0x88>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d12d      	bne.n	80012c6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_SPI_MspInit+0x8c>)
 800126c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_SPI_MspInit+0x8c>)
 8001272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001276:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_SPI_MspInit+0x8c>)
 800127c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_SPI_MspInit+0x8c>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_SPI_MspInit+0x8c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_SPI_MspInit+0x8c>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012a6:	23e0      	movs	r3, #224	; 0xe0
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012b6:	2305      	movs	r3, #5
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_SPI_MspInit+0x90>)
 80012c2:	f002 fc35 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40013000 	.word	0x40013000
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020000 	.word	0x58020000

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a4b      	ldr	r2, [pc, #300]	; (8001428 <HAL_UART_MspInit+0x14c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12e      	bne.n	800135c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80012fe:	4b4b      	ldr	r3, [pc, #300]	; (800142c <HAL_UART_MspInit+0x150>)
 8001300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001304:	4a49      	ldr	r2, [pc, #292]	; (800142c <HAL_UART_MspInit+0x150>)
 8001306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800130a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_UART_MspInit+0x150>)
 8001310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_UART_MspInit+0x150>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a42      	ldr	r2, [pc, #264]	; (800142c <HAL_UART_MspInit+0x150>)
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <HAL_UART_MspInit+0x150>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800133a:	2303      	movs	r3, #3
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800134a:	2308      	movs	r3, #8
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4836      	ldr	r0, [pc, #216]	; (8001430 <HAL_UART_MspInit+0x154>)
 8001356:	f002 fbeb 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800135a:	e061      	b.n	8001420 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a34      	ldr	r2, [pc, #208]	; (8001434 <HAL_UART_MspInit+0x158>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d15c      	bne.n	8001420 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_UART_MspInit+0x150>)
 8001368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136c:	4a2f      	ldr	r2, [pc, #188]	; (800142c <HAL_UART_MspInit+0x150>)
 800136e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001372:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_UART_MspInit+0x150>)
 8001378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800137c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_UART_MspInit+0x150>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <HAL_UART_MspInit+0x150>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_UART_MspInit+0x150>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b4:	2307      	movs	r3, #7
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	481e      	ldr	r0, [pc, #120]	; (8001438 <HAL_UART_MspInit+0x15c>)
 80013c0:	f002 fbb6 	bl	8003b30 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_UART_MspInit+0x160>)
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_UART_MspInit+0x164>)
 80013c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_UART_MspInit+0x160>)
 80013cc:	222d      	movs	r2, #45	; 0x2d
 80013ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_UART_MspInit+0x160>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_UART_MspInit+0x160>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_UART_MspInit+0x160>)
 80013de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_UART_MspInit+0x160>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_UART_MspInit+0x160>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_UART_MspInit+0x160>)
 80013f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_UART_MspInit+0x160>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_UART_MspInit+0x160>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <HAL_UART_MspInit+0x160>)
 8001406:	f000 fb69 	bl	8001adc <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001410:	f7ff fdfc 	bl	800100c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_UART_MspInit+0x160>)
 8001418:	679a      	str	r2, [r3, #120]	; 0x78
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_UART_MspInit+0x160>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001420:	bf00      	nop
 8001422:	3730      	adds	r7, #48	; 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40007c00 	.word	0x40007c00
 800142c:	58024400 	.word	0x58024400
 8001430:	58021000 	.word	0x58021000
 8001434:	40004800 	.word	0x40004800
 8001438:	58020c00 	.word	0x58020c00
 800143c:	24000234 	.word	0x24000234
 8001440:	40020010 	.word	0x40020010

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f9c6 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <DMA1_Stream0_IRQHandler+0x10>)
 800149e:	f000 fe79 	bl	8002194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24000234 	.word	0x24000234

080014ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <OTG_FS_IRQHandler+0x10>)
 80014b2:	f002 fe90 	bl	80041d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	240013ac 	.word	0x240013ac

080014c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e00a      	b.n	80014e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d2:	f3af 8000 	nop.w
 80014d6:	4601      	mov	r1, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf0      	blt.n	80014d2 <_read+0x12>
	}

return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
	return -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001522:	605a      	str	r2, [r3, #4]
	return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_isatty>:

int _isatty(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	return 1;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
	return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f011 f95c 	bl	8012850 <__errno>
 8001598:	4602      	mov	r2, r0
 800159a:	230c      	movs	r3, #12
 800159c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	24080000 	.word	0x24080000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	240001f0 	.word	0x240001f0
 80015cc:	240017b8 	.word	0x240017b8

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <SystemInit+0xec>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a38      	ldr	r2, [pc, #224]	; (80016bc <SystemInit+0xec>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <SystemInit+0xf0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	2b06      	cmp	r3, #6
 80015ee:	d807      	bhi.n	8001600 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <SystemInit+0xf0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 030f 	bic.w	r3, r3, #15
 80015f8:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <SystemInit+0xf0>)
 80015fa:	f043 0307 	orr.w	r3, r3, #7
 80015fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <SystemInit+0xf4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <SystemInit+0xf4>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <SystemInit+0xf4>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001612:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <SystemInit+0xf4>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	492b      	ldr	r1, [pc, #172]	; (80016c4 <SystemInit+0xf4>)
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <SystemInit+0xf8>)
 800161a:	4013      	ands	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <SystemInit+0xf0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	2b07      	cmp	r3, #7
 8001628:	d907      	bls.n	800163a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <SystemInit+0xf0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 030f 	bic.w	r3, r3, #15
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <SystemInit+0xf0>)
 8001634:	f043 0307 	orr.w	r3, r3, #7
 8001638:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <SystemInit+0xf4>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <SystemInit+0xf4>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <SystemInit+0xf4>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800164c:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <SystemInit+0xf4>)
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <SystemInit+0xfc>)
 8001650:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <SystemInit+0xf4>)
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <SystemInit+0x100>)
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <SystemInit+0xf4>)
 800165a:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <SystemInit+0x104>)
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <SystemInit+0xf4>)
 8001660:	2200      	movs	r2, #0
 8001662:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <SystemInit+0xf4>)
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <SystemInit+0x104>)
 8001668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <SystemInit+0xf4>)
 800166c:	2200      	movs	r2, #0
 800166e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <SystemInit+0xf4>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <SystemInit+0x104>)
 8001674:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <SystemInit+0xf4>)
 8001678:	2200      	movs	r2, #0
 800167a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <SystemInit+0xf4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <SystemInit+0xf4>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <SystemInit+0xf4>)
 800168a:	2200      	movs	r2, #0
 800168c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <SystemInit+0x108>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <SystemInit+0x10c>)
 8001694:	4013      	ands	r3, r2
 8001696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169a:	d202      	bcs.n	80016a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <SystemInit+0x110>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <SystemInit+0x114>)
 80016a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SystemInit+0xec>)
 80016ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	52002000 	.word	0x52002000
 80016c4:	58024400 	.word	0x58024400
 80016c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80016cc:	02020200 	.word	0x02020200
 80016d0:	01ff0000 	.word	0x01ff0000
 80016d4:	01010280 	.word	0x01010280
 80016d8:	5c001000 	.word	0x5c001000
 80016dc:	ffff0000 	.word	0xffff0000
 80016e0:	51008108 	.word	0x51008108
 80016e4:	52004000 	.word	0x52004000

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016ec:	f7ff ff70 	bl	80015d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016f2:	e003      	b.n	80016fc <LoopCopyDataInit>

080016f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80016f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016fa:	3104      	adds	r1, #4

080016fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001700:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001702:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001704:	d3f6      	bcc.n	80016f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001708:	e002      	b.n	8001710 <LoopFillZerobss>

0800170a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800170a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800170c:	f842 3b04 	str.w	r3, [r2], #4

08001710 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001712:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001714:	d3f9      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001716:	f011 f8a1 	bl	801285c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7fe fff7 	bl	800070c <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001720:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001724:	08013a70 	.word	0x08013a70
  ldr  r0, =_sdata
 8001728:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800172c:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001730:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8001734:	240017b8 	.word	0x240017b8

08001738 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC3_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001742:	2003      	movs	r0, #3
 8001744:	f000 f98a 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001748:	f004 fc06 	bl	8005f58 <HAL_RCC_GetSysClockFreq>
 800174c:	4601      	mov	r1, r0
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_Init+0x68>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <HAL_Init+0x6c>)
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	fa21 f303 	lsr.w	r3, r1, r3
 8001764:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_Init+0x68>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <HAL_Init+0x6c>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_Init+0x70>)
 800177e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_Init+0x74>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f814 	bl	80017b4 <HAL_InitTick>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e002      	b.n	800179c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001796:	f7ff fc3d 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	58024400 	.word	0x58024400
 80017a8:	080138e0 	.word	0x080138e0
 80017ac:	24000004 	.word	0x24000004
 80017b0:	24000000 	.word	0x24000000

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_InitTick+0x60>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e021      	b.n	800180c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_InitTick+0x64>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_InitTick+0x60>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f96f 	bl	8001ac2 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 f939 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x68>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2400000c 	.word	0x2400000c
 8001818:	24000000 	.word	0x24000000
 800181c:	24000008 	.word	0x24000008

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2400000c 	.word	0x2400000c
 8001844:	24000a70 	.word	0x24000a70

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	24000a70 	.word	0x24000a70

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_Delay+0x40>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2400000c 	.word	0x2400000c

080018a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetREVID+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0c1b      	lsrs	r3, r3, #16
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	5c001000 	.word	0x5c001000

080018bc <__NVIC_SetPriorityGrouping>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <__NVIC_SetPriorityGrouping+0x40>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x40>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00
 8001900:	05fa0000 	.word	0x05fa0000

08001904 <__NVIC_GetPriorityGrouping>:
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff29 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff40 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff90 	bl	80019b0 <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5f 	bl	800195c <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff33 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa4 	bl	8001a18 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff feb0 	bl	8001848 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e316      	b.n	8002122 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a66      	ldr	r2, [pc, #408]	; (8001c94 <HAL_DMA_Init+0x1b8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d04a      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a65      	ldr	r2, [pc, #404]	; (8001c98 <HAL_DMA_Init+0x1bc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d045      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a63      	ldr	r2, [pc, #396]	; (8001c9c <HAL_DMA_Init+0x1c0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d040      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a62      	ldr	r2, [pc, #392]	; (8001ca0 <HAL_DMA_Init+0x1c4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d03b      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a60      	ldr	r2, [pc, #384]	; (8001ca4 <HAL_DMA_Init+0x1c8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d036      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ca8 <HAL_DMA_Init+0x1cc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d031      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5d      	ldr	r2, [pc, #372]	; (8001cac <HAL_DMA_Init+0x1d0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d02c      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a5c      	ldr	r2, [pc, #368]	; (8001cb0 <HAL_DMA_Init+0x1d4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d027      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_DMA_Init+0x1d8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d022      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a59      	ldr	r2, [pc, #356]	; (8001cb8 <HAL_DMA_Init+0x1dc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d01d      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a57      	ldr	r2, [pc, #348]	; (8001cbc <HAL_DMA_Init+0x1e0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d018      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a56      	ldr	r2, [pc, #344]	; (8001cc0 <HAL_DMA_Init+0x1e4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a54      	ldr	r2, [pc, #336]	; (8001cc4 <HAL_DMA_Init+0x1e8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00e      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <HAL_DMA_Init+0x1ec>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a51      	ldr	r2, [pc, #324]	; (8001ccc <HAL_DMA_Init+0x1f0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_DMA_Init+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Init+0xbc>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_DMA_Init+0xbe>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 813b 	beq.w	8001e16 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_DMA_Init+0x1b8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d04a      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <HAL_DMA_Init+0x1bc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d045      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a34      	ldr	r2, [pc, #208]	; (8001c9c <HAL_DMA_Init+0x1c0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d040      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <HAL_DMA_Init+0x1c4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d03b      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a31      	ldr	r2, [pc, #196]	; (8001ca4 <HAL_DMA_Init+0x1c8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d036      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <HAL_DMA_Init+0x1cc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d031      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_DMA_Init+0x1d0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02c      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <HAL_DMA_Init+0x1d4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d027      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_DMA_Init+0x1d8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d022      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <HAL_DMA_Init+0x1dc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d01d      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <HAL_DMA_Init+0x1e0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <HAL_DMA_Init+0x1e4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <HAL_DMA_Init+0x1e8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_DMA_Init+0x1ec>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_DMA_Init+0x1f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_DMA_Init+0x1f4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <HAL_DMA_Init+0x186>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e007      	b.n	8001c72 <HAL_DMA_Init+0x196>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c72:	e02f      	b.n	8001cd4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c74:	f7ff fde8 	bl	8001848 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d928      	bls.n	8001cd4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e246      	b.n	8002122 <HAL_DMA_Init+0x646>
 8001c94:	40020010 	.word	0x40020010
 8001c98:	40020028 	.word	0x40020028
 8001c9c:	40020040 	.word	0x40020040
 8001ca0:	40020058 	.word	0x40020058
 8001ca4:	40020070 	.word	0x40020070
 8001ca8:	40020088 	.word	0x40020088
 8001cac:	400200a0 	.word	0x400200a0
 8001cb0:	400200b8 	.word	0x400200b8
 8001cb4:	40020410 	.word	0x40020410
 8001cb8:	40020428 	.word	0x40020428
 8001cbc:	40020440 	.word	0x40020440
 8001cc0:	40020458 	.word	0x40020458
 8001cc4:	40020470 	.word	0x40020470
 8001cc8:	40020488 	.word	0x40020488
 8001ccc:	400204a0 	.word	0x400204a0
 8001cd0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1c8      	bne.n	8001c74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4b83      	ldr	r3, [pc, #524]	; (8001efc <HAL_DMA_Init+0x420>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4313      	orrs	r3, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d38:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <HAL_DMA_Init+0x424>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <HAL_DMA_Init+0x428>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d44:	d328      	bcc.n	8001d98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b28      	cmp	r3, #40	; 0x28
 8001d4c:	d903      	bls.n	8001d56 <HAL_DMA_Init+0x27a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b2e      	cmp	r3, #46	; 0x2e
 8001d54:	d917      	bls.n	8001d86 <HAL_DMA_Init+0x2aa>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8001d5c:	d903      	bls.n	8001d66 <HAL_DMA_Init+0x28a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b42      	cmp	r3, #66	; 0x42
 8001d64:	d90f      	bls.n	8001d86 <HAL_DMA_Init+0x2aa>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b46      	cmp	r3, #70	; 0x46
 8001d6c:	d903      	bls.n	8001d76 <HAL_DMA_Init+0x29a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b48      	cmp	r3, #72	; 0x48
 8001d74:	d907      	bls.n	8001d86 <HAL_DMA_Init+0x2aa>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b4e      	cmp	r3, #78	; 0x4e
 8001d7c:	d905      	bls.n	8001d8a <HAL_DMA_Init+0x2ae>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b52      	cmp	r3, #82	; 0x52
 8001d84:	d801      	bhi.n	8001d8a <HAL_DMA_Init+0x2ae>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_DMA_Init+0x2b0>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f023 0307 	bic.w	r3, r3, #7
 8001dae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d117      	bne.n	8001df2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f001 f9b9 	bl	800314c <DMA_CheckFifoParam>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e197      	b.n	8002122 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f001 f8f4 	bl	8002fe8 <DMA_CalcBaseAndBitshift>
 8001e00:	4603      	mov	r3, r0
 8001e02:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	223f      	movs	r2, #63	; 0x3f
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e0cd      	b.n	8001fb2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <HAL_DMA_Init+0x42c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d022      	beq.n	8001e66 <HAL_DMA_Init+0x38a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <HAL_DMA_Init+0x430>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01d      	beq.n	8001e66 <HAL_DMA_Init+0x38a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <HAL_DMA_Init+0x434>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d018      	beq.n	8001e66 <HAL_DMA_Init+0x38a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <HAL_DMA_Init+0x438>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_DMA_Init+0x38a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a35      	ldr	r2, [pc, #212]	; (8001f18 <HAL_DMA_Init+0x43c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00e      	beq.n	8001e66 <HAL_DMA_Init+0x38a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a33      	ldr	r2, [pc, #204]	; (8001f1c <HAL_DMA_Init+0x440>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d009      	beq.n	8001e66 <HAL_DMA_Init+0x38a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a32      	ldr	r2, [pc, #200]	; (8001f20 <HAL_DMA_Init+0x444>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d004      	beq.n	8001e66 <HAL_DMA_Init+0x38a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a30      	ldr	r2, [pc, #192]	; (8001f24 <HAL_DMA_Init+0x448>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_DMA_Init+0x38e>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_DMA_Init+0x390>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8097 	beq.w	8001fa0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <HAL_DMA_Init+0x42c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d021      	beq.n	8001ec0 <HAL_DMA_Init+0x3e4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_DMA_Init+0x430>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01c      	beq.n	8001ec0 <HAL_DMA_Init+0x3e4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <HAL_DMA_Init+0x434>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d017      	beq.n	8001ec0 <HAL_DMA_Init+0x3e4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_DMA_Init+0x438>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d012      	beq.n	8001ec0 <HAL_DMA_Init+0x3e4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <HAL_DMA_Init+0x43c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_DMA_Init+0x3e4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_DMA_Init+0x440>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d008      	beq.n	8001ec0 <HAL_DMA_Init+0x3e4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_DMA_Init+0x444>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <HAL_DMA_Init+0x3e4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_DMA_Init+0x448>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_DMA_Init+0x44c>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d020      	beq.n	8001f2c <HAL_DMA_Init+0x450>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b80      	cmp	r3, #128	; 0x80
 8001ef0:	d102      	bne.n	8001ef8 <HAL_DMA_Init+0x41c>
 8001ef2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ef6:	e01a      	b.n	8001f2e <HAL_DMA_Init+0x452>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e018      	b.n	8001f2e <HAL_DMA_Init+0x452>
 8001efc:	fe10803f 	.word	0xfe10803f
 8001f00:	5c001000 	.word	0x5c001000
 8001f04:	ffff0000 	.word	0xffff0000
 8001f08:	58025408 	.word	0x58025408
 8001f0c:	5802541c 	.word	0x5802541c
 8001f10:	58025430 	.word	0x58025430
 8001f14:	58025444 	.word	0x58025444
 8001f18:	58025458 	.word	0x58025458
 8001f1c:	5802546c 	.word	0x5802546c
 8001f20:	58025480 	.word	0x58025480
 8001f24:	58025494 	.word	0x58025494
 8001f28:	fffe000f 	.word	0xfffe000f
 8001f2c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f5c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b6e      	ldr	r3, [pc, #440]	; (800212c <HAL_DMA_Init+0x650>)
 8001f74:	4413      	add	r3, r2
 8001f76:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <HAL_DMA_Init+0x654>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	009a      	lsls	r2, r3, #2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f001 f82f 	bl	8002fe8 <DMA_CalcBaseAndBitshift>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2201      	movs	r2, #1
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	e008      	b.n	8001fb2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0b7      	b.n	8002122 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5f      	ldr	r2, [pc, #380]	; (8002134 <HAL_DMA_Init+0x658>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d072      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <HAL_DMA_Init+0x65c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d06d      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5c      	ldr	r2, [pc, #368]	; (800213c <HAL_DMA_Init+0x660>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d068      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a5a      	ldr	r2, [pc, #360]	; (8002140 <HAL_DMA_Init+0x664>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d063      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a59      	ldr	r2, [pc, #356]	; (8002144 <HAL_DMA_Init+0x668>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d05e      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a57      	ldr	r2, [pc, #348]	; (8002148 <HAL_DMA_Init+0x66c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d059      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a56      	ldr	r2, [pc, #344]	; (800214c <HAL_DMA_Init+0x670>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d054      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a54      	ldr	r2, [pc, #336]	; (8002150 <HAL_DMA_Init+0x674>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d04f      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a53      	ldr	r2, [pc, #332]	; (8002154 <HAL_DMA_Init+0x678>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d04a      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a51      	ldr	r2, [pc, #324]	; (8002158 <HAL_DMA_Init+0x67c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d045      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a50      	ldr	r2, [pc, #320]	; (800215c <HAL_DMA_Init+0x680>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d040      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a4e      	ldr	r2, [pc, #312]	; (8002160 <HAL_DMA_Init+0x684>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d03b      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a4d      	ldr	r2, [pc, #308]	; (8002164 <HAL_DMA_Init+0x688>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d036      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a4b      	ldr	r2, [pc, #300]	; (8002168 <HAL_DMA_Init+0x68c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d031      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_DMA_Init+0x690>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d02c      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_DMA_Init+0x694>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d027      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a47      	ldr	r2, [pc, #284]	; (8002174 <HAL_DMA_Init+0x698>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d022      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a45      	ldr	r2, [pc, #276]	; (8002178 <HAL_DMA_Init+0x69c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01d      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a44      	ldr	r2, [pc, #272]	; (800217c <HAL_DMA_Init+0x6a0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d018      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a42      	ldr	r2, [pc, #264]	; (8002180 <HAL_DMA_Init+0x6a4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_DMA_Init+0x6a8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00e      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <HAL_DMA_Init+0x6ac>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a3e      	ldr	r2, [pc, #248]	; (800218c <HAL_DMA_Init+0x6b0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_DMA_Init+0x5c6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3c      	ldr	r2, [pc, #240]	; (8002190 <HAL_DMA_Init+0x6b4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_DMA_Init+0x5ca>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_DMA_Init+0x5cc>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d032      	beq.n	8002112 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f001 f8c9 	bl	8003244 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	d102      	bne.n	80020c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_DMA_Init+0x624>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d80c      	bhi.n	8002100 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f001 f946 	bl	8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	e008      	b.n	8002112 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	a7fdabf8 	.word	0xa7fdabf8
 8002130:	cccccccd 	.word	0xcccccccd
 8002134:	40020010 	.word	0x40020010
 8002138:	40020028 	.word	0x40020028
 800213c:	40020040 	.word	0x40020040
 8002140:	40020058 	.word	0x40020058
 8002144:	40020070 	.word	0x40020070
 8002148:	40020088 	.word	0x40020088
 800214c:	400200a0 	.word	0x400200a0
 8002150:	400200b8 	.word	0x400200b8
 8002154:	40020410 	.word	0x40020410
 8002158:	40020428 	.word	0x40020428
 800215c:	40020440 	.word	0x40020440
 8002160:	40020458 	.word	0x40020458
 8002164:	40020470 	.word	0x40020470
 8002168:	40020488 	.word	0x40020488
 800216c:	400204a0 	.word	0x400204a0
 8002170:	400204b8 	.word	0x400204b8
 8002174:	58025408 	.word	0x58025408
 8002178:	5802541c 	.word	0x5802541c
 800217c:	58025430 	.word	0x58025430
 8002180:	58025444 	.word	0x58025444
 8002184:	58025458 	.word	0x58025458
 8002188:	5802546c 	.word	0x5802546c
 800218c:	58025480 	.word	0x58025480
 8002190:	58025494 	.word	0x58025494

08002194 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021a0:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_DMA_IRQHandler+0x1ac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a67      	ldr	r2, [pc, #412]	; (8002344 <HAL_DMA_IRQHandler+0x1b0>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0a9b      	lsrs	r3, r3, #10
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5f      	ldr	r2, [pc, #380]	; (8002348 <HAL_DMA_IRQHandler+0x1b4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04a      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5d      	ldr	r2, [pc, #372]	; (800234c <HAL_DMA_IRQHandler+0x1b8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d045      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a5c      	ldr	r2, [pc, #368]	; (8002350 <HAL_DMA_IRQHandler+0x1bc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d040      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5a      	ldr	r2, [pc, #360]	; (8002354 <HAL_DMA_IRQHandler+0x1c0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d03b      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a59      	ldr	r2, [pc, #356]	; (8002358 <HAL_DMA_IRQHandler+0x1c4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d036      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_DMA_IRQHandler+0x1c8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a56      	ldr	r2, [pc, #344]	; (8002360 <HAL_DMA_IRQHandler+0x1cc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d02c      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a54      	ldr	r2, [pc, #336]	; (8002364 <HAL_DMA_IRQHandler+0x1d0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d027      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a53      	ldr	r2, [pc, #332]	; (8002368 <HAL_DMA_IRQHandler+0x1d4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a51      	ldr	r2, [pc, #324]	; (800236c <HAL_DMA_IRQHandler+0x1d8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a50      	ldr	r2, [pc, #320]	; (8002370 <HAL_DMA_IRQHandler+0x1dc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a4e      	ldr	r2, [pc, #312]	; (8002374 <HAL_DMA_IRQHandler+0x1e0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a4d      	ldr	r2, [pc, #308]	; (8002378 <HAL_DMA_IRQHandler+0x1e4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4b      	ldr	r2, [pc, #300]	; (800237c <HAL_DMA_IRQHandler+0x1e8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <HAL_DMA_IRQHandler+0x1ec>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_IRQHandler+0xd2>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a48      	ldr	r2, [pc, #288]	; (8002384 <HAL_DMA_IRQHandler+0x1f0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_DMA_IRQHandler+0xd6>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_DMA_IRQHandler+0xd8>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 842b 	beq.w	8002ac8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2208      	movs	r2, #8
 800227c:	409a      	lsls	r2, r3
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80a2 	beq.w	80023cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <HAL_DMA_IRQHandler+0x1b4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d04a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2d      	ldr	r2, [pc, #180]	; (800234c <HAL_DMA_IRQHandler+0x1b8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d045      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2b      	ldr	r2, [pc, #172]	; (8002350 <HAL_DMA_IRQHandler+0x1bc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d040      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HAL_DMA_IRQHandler+0x1c0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d03b      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_DMA_IRQHandler+0x1c4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d036      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_DMA_IRQHandler+0x1c8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d031      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_DMA_IRQHandler+0x1cc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d02c      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_DMA_IRQHandler+0x1d0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d027      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_DMA_IRQHandler+0x1d4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d022      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_DMA_IRQHandler+0x1d8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d01d      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_DMA_IRQHandler+0x1dc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d018      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <HAL_DMA_IRQHandler+0x1e0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_DMA_IRQHandler+0x1e4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00e      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1b      	ldr	r2, [pc, #108]	; (800237c <HAL_DMA_IRQHandler+0x1e8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_DMA_IRQHandler+0x1ec>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_DMA_IRQHandler+0x194>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a18      	ldr	r2, [pc, #96]	; (8002384 <HAL_DMA_IRQHandler+0x1f0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d12f      	bne.n	8002388 <HAL_DMA_IRQHandler+0x1f4>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	e02e      	b.n	800239c <HAL_DMA_IRQHandler+0x208>
 800233e:	bf00      	nop
 8002340:	24000000 	.word	0x24000000
 8002344:	1b4e81b5 	.word	0x1b4e81b5
 8002348:	40020010 	.word	0x40020010
 800234c:	40020028 	.word	0x40020028
 8002350:	40020040 	.word	0x40020040
 8002354:	40020058 	.word	0x40020058
 8002358:	40020070 	.word	0x40020070
 800235c:	40020088 	.word	0x40020088
 8002360:	400200a0 	.word	0x400200a0
 8002364:	400200b8 	.word	0x400200b8
 8002368:	40020410 	.word	0x40020410
 800236c:	40020428 	.word	0x40020428
 8002370:	40020440 	.word	0x40020440
 8002374:	40020458 	.word	0x40020458
 8002378:	40020470 	.word	0x40020470
 800237c:	40020488 	.word	0x40020488
 8002380:	400204a0 	.word	0x400204a0
 8002384:	400204b8 	.word	0x400204b8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf14      	ite	ne
 8002396:	2301      	movne	r3, #1
 8002398:	2300      	moveq	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d015      	beq.n	80023cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0204 	bic.w	r2, r2, #4
 80023ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2208      	movs	r2, #8
 80023ba:	409a      	lsls	r2, r3
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06e      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_DMA_IRQHandler+0x3f8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d04a      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a67      	ldr	r2, [pc, #412]	; (8002590 <HAL_DMA_IRQHandler+0x3fc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d045      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a66      	ldr	r2, [pc, #408]	; (8002594 <HAL_DMA_IRQHandler+0x400>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d040      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a64      	ldr	r2, [pc, #400]	; (8002598 <HAL_DMA_IRQHandler+0x404>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d03b      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a63      	ldr	r2, [pc, #396]	; (800259c <HAL_DMA_IRQHandler+0x408>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d036      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a61      	ldr	r2, [pc, #388]	; (80025a0 <HAL_DMA_IRQHandler+0x40c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d031      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a60      	ldr	r2, [pc, #384]	; (80025a4 <HAL_DMA_IRQHandler+0x410>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d02c      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a5e      	ldr	r2, [pc, #376]	; (80025a8 <HAL_DMA_IRQHandler+0x414>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d027      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a5d      	ldr	r2, [pc, #372]	; (80025ac <HAL_DMA_IRQHandler+0x418>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a5b      	ldr	r2, [pc, #364]	; (80025b0 <HAL_DMA_IRQHandler+0x41c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01d      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a5a      	ldr	r2, [pc, #360]	; (80025b4 <HAL_DMA_IRQHandler+0x420>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d018      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_DMA_IRQHandler+0x424>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a57      	ldr	r2, [pc, #348]	; (80025bc <HAL_DMA_IRQHandler+0x428>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00e      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a55      	ldr	r2, [pc, #340]	; (80025c0 <HAL_DMA_IRQHandler+0x42c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <HAL_DMA_IRQHandler+0x430>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2ee>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_DMA_IRQHandler+0x434>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10a      	bne.n	8002498 <HAL_DMA_IRQHandler+0x304>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e003      	b.n	80024a0 <HAL_DMA_IRQHandler+0x30c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f043 0202 	orr.w	r2, r3, #2
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2204      	movs	r2, #4
 80024ca:	409a      	lsls	r2, r3
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 808f 	beq.w	80025f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2c      	ldr	r2, [pc, #176]	; (800258c <HAL_DMA_IRQHandler+0x3f8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d04a      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <HAL_DMA_IRQHandler+0x3fc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d045      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a29      	ldr	r2, [pc, #164]	; (8002594 <HAL_DMA_IRQHandler+0x400>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d040      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_DMA_IRQHandler+0x404>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d03b      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a26      	ldr	r2, [pc, #152]	; (800259c <HAL_DMA_IRQHandler+0x408>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d036      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_DMA_IRQHandler+0x40c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d031      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <HAL_DMA_IRQHandler+0x410>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d02c      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <HAL_DMA_IRQHandler+0x414>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d027      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a20      	ldr	r2, [pc, #128]	; (80025ac <HAL_DMA_IRQHandler+0x418>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <HAL_DMA_IRQHandler+0x41c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01d      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_DMA_IRQHandler+0x420>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d018      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_DMA_IRQHandler+0x424>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <HAL_DMA_IRQHandler+0x428>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d00e      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_DMA_IRQHandler+0x42c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d009      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_DMA_IRQHandler+0x430>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d004      	beq.n	8002576 <HAL_DMA_IRQHandler+0x3e2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <HAL_DMA_IRQHandler+0x434>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d12a      	bne.n	80025cc <HAL_DMA_IRQHandler+0x438>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e023      	b.n	80025d4 <HAL_DMA_IRQHandler+0x440>
 800258c:	40020010 	.word	0x40020010
 8002590:	40020028 	.word	0x40020028
 8002594:	40020040 	.word	0x40020040
 8002598:	40020058 	.word	0x40020058
 800259c:	40020070 	.word	0x40020070
 80025a0:	40020088 	.word	0x40020088
 80025a4:	400200a0 	.word	0x400200a0
 80025a8:	400200b8 	.word	0x400200b8
 80025ac:	40020410 	.word	0x40020410
 80025b0:	40020428 	.word	0x40020428
 80025b4:	40020440 	.word	0x40020440
 80025b8:	40020458 	.word	0x40020458
 80025bc:	40020470 	.word	0x40020470
 80025c0:	40020488 	.word	0x40020488
 80025c4:	400204a0 	.word	0x400204a0
 80025c8:	400204b8 	.word	0x400204b8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2204      	movs	r2, #4
 80025e2:	409a      	lsls	r2, r3
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0204 	orr.w	r2, r3, #4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2210      	movs	r2, #16
 80025fe:	409a      	lsls	r2, r3
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80a6 	beq.w	8002756 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a85      	ldr	r2, [pc, #532]	; (8002824 <HAL_DMA_IRQHandler+0x690>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d04a      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a83      	ldr	r2, [pc, #524]	; (8002828 <HAL_DMA_IRQHandler+0x694>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d045      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a82      	ldr	r2, [pc, #520]	; (800282c <HAL_DMA_IRQHandler+0x698>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d040      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a80      	ldr	r2, [pc, #512]	; (8002830 <HAL_DMA_IRQHandler+0x69c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d03b      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7f      	ldr	r2, [pc, #508]	; (8002834 <HAL_DMA_IRQHandler+0x6a0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d036      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a7d      	ldr	r2, [pc, #500]	; (8002838 <HAL_DMA_IRQHandler+0x6a4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d031      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7c      	ldr	r2, [pc, #496]	; (800283c <HAL_DMA_IRQHandler+0x6a8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d02c      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a7a      	ldr	r2, [pc, #488]	; (8002840 <HAL_DMA_IRQHandler+0x6ac>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d027      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a79      	ldr	r2, [pc, #484]	; (8002844 <HAL_DMA_IRQHandler+0x6b0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a77      	ldr	r2, [pc, #476]	; (8002848 <HAL_DMA_IRQHandler+0x6b4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01d      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a76      	ldr	r2, [pc, #472]	; (800284c <HAL_DMA_IRQHandler+0x6b8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d018      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a74      	ldr	r2, [pc, #464]	; (8002850 <HAL_DMA_IRQHandler+0x6bc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a73      	ldr	r2, [pc, #460]	; (8002854 <HAL_DMA_IRQHandler+0x6c0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00e      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a71      	ldr	r2, [pc, #452]	; (8002858 <HAL_DMA_IRQHandler+0x6c4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a70      	ldr	r2, [pc, #448]	; (800285c <HAL_DMA_IRQHandler+0x6c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_DMA_IRQHandler+0x516>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_DMA_IRQHandler+0x6cc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10a      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x52c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	e009      	b.n	80026d4 <HAL_DMA_IRQHandler+0x540>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d03e      	beq.n	8002756 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2210      	movs	r2, #16
 80026e2:	409a      	lsls	r2, r3
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d018      	beq.n	8002728 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d108      	bne.n	8002716 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d024      	beq.n	8002756 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
 8002714:	e01f      	b.n	8002756 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01b      	beq.n	8002756 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
 8002726:	e016      	b.n	8002756 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0208 	bic.w	r2, r2, #8
 8002744:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2220      	movs	r2, #32
 8002760:	409a      	lsls	r2, r3
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8110 	beq.w	800298c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_DMA_IRQHandler+0x690>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d04a      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2b      	ldr	r2, [pc, #172]	; (8002828 <HAL_DMA_IRQHandler+0x694>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d045      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a29      	ldr	r2, [pc, #164]	; (800282c <HAL_DMA_IRQHandler+0x698>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d040      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <HAL_DMA_IRQHandler+0x69c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d03b      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a26      	ldr	r2, [pc, #152]	; (8002834 <HAL_DMA_IRQHandler+0x6a0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d036      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <HAL_DMA_IRQHandler+0x6a4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d031      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_DMA_IRQHandler+0x6a8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d02c      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a22      	ldr	r2, [pc, #136]	; (8002840 <HAL_DMA_IRQHandler+0x6ac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d027      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_DMA_IRQHandler+0x6b0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d022      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_DMA_IRQHandler+0x6b4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d01d      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_DMA_IRQHandler+0x6b8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d018      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_DMA_IRQHandler+0x6bc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_DMA_IRQHandler+0x6c0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00e      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_DMA_IRQHandler+0x6c4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_DMA_IRQHandler+0x6c8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_DMA_IRQHandler+0x678>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a16      	ldr	r2, [pc, #88]	; (8002860 <HAL_DMA_IRQHandler+0x6cc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d12b      	bne.n	8002864 <HAL_DMA_IRQHandler+0x6d0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	e02a      	b.n	8002878 <HAL_DMA_IRQHandler+0x6e4>
 8002822:	bf00      	nop
 8002824:	40020010 	.word	0x40020010
 8002828:	40020028 	.word	0x40020028
 800282c:	40020040 	.word	0x40020040
 8002830:	40020058 	.word	0x40020058
 8002834:	40020070 	.word	0x40020070
 8002838:	40020088 	.word	0x40020088
 800283c:	400200a0 	.word	0x400200a0
 8002840:	400200b8 	.word	0x400200b8
 8002844:	40020410 	.word	0x40020410
 8002848:	40020428 	.word	0x40020428
 800284c:	40020440 	.word	0x40020440
 8002850:	40020458 	.word	0x40020458
 8002854:	40020470 	.word	0x40020470
 8002858:	40020488 	.word	0x40020488
 800285c:	400204a0 	.word	0x400204a0
 8002860:	400204b8 	.word	0x400204b8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf14      	ite	ne
 8002872:	2301      	movne	r3, #1
 8002874:	2300      	moveq	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8087 	beq.w	800298c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2220      	movs	r2, #32
 8002888:	409a      	lsls	r2, r3
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b04      	cmp	r3, #4
 8002898:	d139      	bne.n	800290e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0216 	bic.w	r2, r2, #22
 80028a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_DMA_IRQHandler+0x736>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0208 	bic.w	r2, r2, #8
 80028d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	223f      	movs	r2, #63	; 0x3f
 80028e4:	409a      	lsls	r2, r3
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 834a 	beq.w	8002f98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
          }
          return;
 800290c:	e344      	b.n	8002f98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d018      	beq.n	800294e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	2b00      	cmp	r3, #0
 8002930:	d02c      	beq.n	800298c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e027      	b.n	800298c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e01e      	b.n	800298c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10f      	bne.n	800297c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0210 	bic.w	r2, r2, #16
 800296a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8306 	beq.w	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8088 	beq.w	8002ab4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2204      	movs	r2, #4
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a7a      	ldr	r2, [pc, #488]	; (8002b9c <HAL_DMA_IRQHandler+0xa08>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d04a      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a79      	ldr	r2, [pc, #484]	; (8002ba0 <HAL_DMA_IRQHandler+0xa0c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d045      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a77      	ldr	r2, [pc, #476]	; (8002ba4 <HAL_DMA_IRQHandler+0xa10>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d040      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a76      	ldr	r2, [pc, #472]	; (8002ba8 <HAL_DMA_IRQHandler+0xa14>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d03b      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a74      	ldr	r2, [pc, #464]	; (8002bac <HAL_DMA_IRQHandler+0xa18>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d036      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a73      	ldr	r2, [pc, #460]	; (8002bb0 <HAL_DMA_IRQHandler+0xa1c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d031      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a71      	ldr	r2, [pc, #452]	; (8002bb4 <HAL_DMA_IRQHandler+0xa20>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d02c      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a70      	ldr	r2, [pc, #448]	; (8002bb8 <HAL_DMA_IRQHandler+0xa24>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d027      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6e      	ldr	r2, [pc, #440]	; (8002bbc <HAL_DMA_IRQHandler+0xa28>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d022      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6d      	ldr	r2, [pc, #436]	; (8002bc0 <HAL_DMA_IRQHandler+0xa2c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d01d      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a6b      	ldr	r2, [pc, #428]	; (8002bc4 <HAL_DMA_IRQHandler+0xa30>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d018      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6a      	ldr	r2, [pc, #424]	; (8002bc8 <HAL_DMA_IRQHandler+0xa34>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a68      	ldr	r2, [pc, #416]	; (8002bcc <HAL_DMA_IRQHandler+0xa38>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00e      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a67      	ldr	r2, [pc, #412]	; (8002bd0 <HAL_DMA_IRQHandler+0xa3c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_DMA_IRQHandler+0xa40>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x8b8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a64      	ldr	r2, [pc, #400]	; (8002bd8 <HAL_DMA_IRQHandler+0xa44>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d108      	bne.n	8002a5e <HAL_DMA_IRQHandler+0x8ca>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e007      	b.n	8002a6e <HAL_DMA_IRQHandler+0x8da>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3301      	adds	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d307      	bcc.n	8002a8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f2      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x8da>
 8002a88:	e000      	b.n	8002a8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a8a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002aaa:	e003      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8272 	beq.w	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
 8002ac6:	e26c      	b.n	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a43      	ldr	r2, [pc, #268]	; (8002bdc <HAL_DMA_IRQHandler+0xa48>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x984>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_DMA_IRQHandler+0xa4c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x984>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a40      	ldr	r2, [pc, #256]	; (8002be4 <HAL_DMA_IRQHandler+0xa50>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x984>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a3f      	ldr	r2, [pc, #252]	; (8002be8 <HAL_DMA_IRQHandler+0xa54>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x984>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3d      	ldr	r2, [pc, #244]	; (8002bec <HAL_DMA_IRQHandler+0xa58>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x984>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a3c      	ldr	r2, [pc, #240]	; (8002bf0 <HAL_DMA_IRQHandler+0xa5c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x984>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3a      	ldr	r2, [pc, #232]	; (8002bf4 <HAL_DMA_IRQHandler+0xa60>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x984>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a39      	ldr	r2, [pc, #228]	; (8002bf8 <HAL_DMA_IRQHandler+0xa64>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x988>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_DMA_IRQHandler+0x98a>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 823f 	beq.w	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2204      	movs	r2, #4
 8002b36:	409a      	lsls	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80cd 	beq.w	8002cdc <HAL_DMA_IRQHandler+0xb48>
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80c7 	beq.w	8002cdc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2204      	movs	r2, #4
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d049      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8210 	beq.w	8002f9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b84:	e20a      	b.n	8002f9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8206 	beq.w	8002f9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b98:	e200      	b.n	8002f9c <HAL_DMA_IRQHandler+0xe08>
 8002b9a:	bf00      	nop
 8002b9c:	40020010 	.word	0x40020010
 8002ba0:	40020028 	.word	0x40020028
 8002ba4:	40020040 	.word	0x40020040
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	40020070 	.word	0x40020070
 8002bb0:	40020088 	.word	0x40020088
 8002bb4:	400200a0 	.word	0x400200a0
 8002bb8:	400200b8 	.word	0x400200b8
 8002bbc:	40020410 	.word	0x40020410
 8002bc0:	40020428 	.word	0x40020428
 8002bc4:	40020440 	.word	0x40020440
 8002bc8:	40020458 	.word	0x40020458
 8002bcc:	40020470 	.word	0x40020470
 8002bd0:	40020488 	.word	0x40020488
 8002bd4:	400204a0 	.word	0x400204a0
 8002bd8:	400204b8 	.word	0x400204b8
 8002bdc:	58025408 	.word	0x58025408
 8002be0:	5802541c 	.word	0x5802541c
 8002be4:	58025430 	.word	0x58025430
 8002be8:	58025444 	.word	0x58025444
 8002bec:	58025458 	.word	0x58025458
 8002bf0:	5802546c 	.word	0x5802546c
 8002bf4:	58025480 	.word	0x58025480
 8002bf8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d160      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a8c      	ldr	r2, [pc, #560]	; (8002e3c <HAL_DMA_IRQHandler+0xca8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d04a      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a8a      	ldr	r2, [pc, #552]	; (8002e40 <HAL_DMA_IRQHandler+0xcac>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d045      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a89      	ldr	r2, [pc, #548]	; (8002e44 <HAL_DMA_IRQHandler+0xcb0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d040      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a87      	ldr	r2, [pc, #540]	; (8002e48 <HAL_DMA_IRQHandler+0xcb4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d03b      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a86      	ldr	r2, [pc, #536]	; (8002e4c <HAL_DMA_IRQHandler+0xcb8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d036      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a84      	ldr	r2, [pc, #528]	; (8002e50 <HAL_DMA_IRQHandler+0xcbc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d031      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a83      	ldr	r2, [pc, #524]	; (8002e54 <HAL_DMA_IRQHandler+0xcc0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d02c      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a81      	ldr	r2, [pc, #516]	; (8002e58 <HAL_DMA_IRQHandler+0xcc4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d027      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a80      	ldr	r2, [pc, #512]	; (8002e5c <HAL_DMA_IRQHandler+0xcc8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d022      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_DMA_IRQHandler+0xccc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01d      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7d      	ldr	r2, [pc, #500]	; (8002e64 <HAL_DMA_IRQHandler+0xcd0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d018      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a7b      	ldr	r2, [pc, #492]	; (8002e68 <HAL_DMA_IRQHandler+0xcd4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7a      	ldr	r2, [pc, #488]	; (8002e6c <HAL_DMA_IRQHandler+0xcd8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00e      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a78      	ldr	r2, [pc, #480]	; (8002e70 <HAL_DMA_IRQHandler+0xcdc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a77      	ldr	r2, [pc, #476]	; (8002e74 <HAL_DMA_IRQHandler+0xce0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xb12>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a75      	ldr	r2, [pc, #468]	; (8002e78 <HAL_DMA_IRQHandler+0xce4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d108      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0xb24>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e007      	b.n	8002cc8 <HAL_DMA_IRQHandler+0xb34>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0204 	bic.w	r2, r2, #4
 8002cc6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8165 	beq.w	8002f9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cda:	e15f      	b.n	8002f9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80c5 	beq.w	8002e7c <HAL_DMA_IRQHandler+0xce8>
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80bf 	beq.w	8002e7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2202      	movs	r2, #2
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 813a 	beq.w	8002fa0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d34:	e134      	b.n	8002fa0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8130 	beq.w	8002fa0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d48:	e12a      	b.n	8002fa0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d168      	bne.n	8002e26 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a38      	ldr	r2, [pc, #224]	; (8002e3c <HAL_DMA_IRQHandler+0xca8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d04a      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a37      	ldr	r2, [pc, #220]	; (8002e40 <HAL_DMA_IRQHandler+0xcac>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d045      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a35      	ldr	r2, [pc, #212]	; (8002e44 <HAL_DMA_IRQHandler+0xcb0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d040      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <HAL_DMA_IRQHandler+0xcb4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d03b      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a32      	ldr	r2, [pc, #200]	; (8002e4c <HAL_DMA_IRQHandler+0xcb8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d036      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a31      	ldr	r2, [pc, #196]	; (8002e50 <HAL_DMA_IRQHandler+0xcbc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d031      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <HAL_DMA_IRQHandler+0xcc0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02c      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2e      	ldr	r2, [pc, #184]	; (8002e58 <HAL_DMA_IRQHandler+0xcc4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d027      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <HAL_DMA_IRQHandler+0xcc8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d022      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <HAL_DMA_IRQHandler+0xccc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d01d      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <HAL_DMA_IRQHandler+0xcd0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d018      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a28      	ldr	r2, [pc, #160]	; (8002e68 <HAL_DMA_IRQHandler+0xcd4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_DMA_IRQHandler+0xcd8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <HAL_DMA_IRQHandler+0xcdc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <HAL_DMA_IRQHandler+0xce0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_DMA_IRQHandler+0xc60>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <HAL_DMA_IRQHandler+0xce4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d108      	bne.n	8002e06 <HAL_DMA_IRQHandler+0xc72>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0214 	bic.w	r2, r2, #20
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e007      	b.n	8002e16 <HAL_DMA_IRQHandler+0xc82>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 020a 	bic.w	r2, r2, #10
 8002e14:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80b8 	beq.w	8002fa0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e38:	e0b2      	b.n	8002fa0 <HAL_DMA_IRQHandler+0xe0c>
 8002e3a:	bf00      	nop
 8002e3c:	40020010 	.word	0x40020010
 8002e40:	40020028 	.word	0x40020028
 8002e44:	40020040 	.word	0x40020040
 8002e48:	40020058 	.word	0x40020058
 8002e4c:	40020070 	.word	0x40020070
 8002e50:	40020088 	.word	0x40020088
 8002e54:	400200a0 	.word	0x400200a0
 8002e58:	400200b8 	.word	0x400200b8
 8002e5c:	40020410 	.word	0x40020410
 8002e60:	40020428 	.word	0x40020428
 8002e64:	40020440 	.word	0x40020440
 8002e68:	40020458 	.word	0x40020458
 8002e6c:	40020470 	.word	0x40020470
 8002e70:	40020488 	.word	0x40020488
 8002e74:	400204a0 	.word	0x400204a0
 8002e78:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2208      	movs	r2, #8
 8002e86:	409a      	lsls	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8088 	beq.w	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8082 	beq.w	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a41      	ldr	r2, [pc, #260]	; (8002fa8 <HAL_DMA_IRQHandler+0xe14>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d04a      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a3f      	ldr	r2, [pc, #252]	; (8002fac <HAL_DMA_IRQHandler+0xe18>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d045      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a3e      	ldr	r2, [pc, #248]	; (8002fb0 <HAL_DMA_IRQHandler+0xe1c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d040      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a3c      	ldr	r2, [pc, #240]	; (8002fb4 <HAL_DMA_IRQHandler+0xe20>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d03b      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3b      	ldr	r2, [pc, #236]	; (8002fb8 <HAL_DMA_IRQHandler+0xe24>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d036      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a39      	ldr	r2, [pc, #228]	; (8002fbc <HAL_DMA_IRQHandler+0xe28>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a38      	ldr	r2, [pc, #224]	; (8002fc0 <HAL_DMA_IRQHandler+0xe2c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d02c      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a36      	ldr	r2, [pc, #216]	; (8002fc4 <HAL_DMA_IRQHandler+0xe30>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d027      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a35      	ldr	r2, [pc, #212]	; (8002fc8 <HAL_DMA_IRQHandler+0xe34>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a33      	ldr	r2, [pc, #204]	; (8002fcc <HAL_DMA_IRQHandler+0xe38>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a32      	ldr	r2, [pc, #200]	; (8002fd0 <HAL_DMA_IRQHandler+0xe3c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <HAL_DMA_IRQHandler+0xe40>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <HAL_DMA_IRQHandler+0xe44>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2d      	ldr	r2, [pc, #180]	; (8002fdc <HAL_DMA_IRQHandler+0xe48>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <HAL_DMA_IRQHandler+0xe4c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_DMA_IRQHandler+0xdaa>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2a      	ldr	r2, [pc, #168]	; (8002fe4 <HAL_DMA_IRQHandler+0xe50>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <HAL_DMA_IRQHandler+0xdbc>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 021c 	bic.w	r2, r2, #28
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e007      	b.n	8002f60 <HAL_DMA_IRQHandler+0xdcc>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 020e 	bic.w	r2, r2, #14
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2201      	movs	r2, #1
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
 8002f96:	e004      	b.n	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002f98:	bf00      	nop
 8002f9a:	e002      	b.n	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f9c:	bf00      	nop
 8002f9e:	e000      	b.n	8002fa2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fa0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002fa2:	3728      	adds	r7, #40	; 0x28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40020010 	.word	0x40020010
 8002fac:	40020028 	.word	0x40020028
 8002fb0:	40020040 	.word	0x40020040
 8002fb4:	40020058 	.word	0x40020058
 8002fb8:	40020070 	.word	0x40020070
 8002fbc:	40020088 	.word	0x40020088
 8002fc0:	400200a0 	.word	0x400200a0
 8002fc4:	400200b8 	.word	0x400200b8
 8002fc8:	40020410 	.word	0x40020410
 8002fcc:	40020428 	.word	0x40020428
 8002fd0:	40020440 	.word	0x40020440
 8002fd4:	40020458 	.word	0x40020458
 8002fd8:	40020470 	.word	0x40020470
 8002fdc:	40020488 	.word	0x40020488
 8002fe0:	400204a0 	.word	0x400204a0
 8002fe4:	400204b8 	.word	0x400204b8

08002fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a42      	ldr	r2, [pc, #264]	; (8003100 <DMA_CalcBaseAndBitshift+0x118>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d04a      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a41      	ldr	r2, [pc, #260]	; (8003104 <DMA_CalcBaseAndBitshift+0x11c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d045      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a3f      	ldr	r2, [pc, #252]	; (8003108 <DMA_CalcBaseAndBitshift+0x120>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d040      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a3e      	ldr	r2, [pc, #248]	; (800310c <DMA_CalcBaseAndBitshift+0x124>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d03b      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <DMA_CalcBaseAndBitshift+0x128>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d036      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3b      	ldr	r2, [pc, #236]	; (8003114 <DMA_CalcBaseAndBitshift+0x12c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d031      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a39      	ldr	r2, [pc, #228]	; (8003118 <DMA_CalcBaseAndBitshift+0x130>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02c      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a38      	ldr	r2, [pc, #224]	; (800311c <DMA_CalcBaseAndBitshift+0x134>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d027      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a36      	ldr	r2, [pc, #216]	; (8003120 <DMA_CalcBaseAndBitshift+0x138>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d022      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a35      	ldr	r2, [pc, #212]	; (8003124 <DMA_CalcBaseAndBitshift+0x13c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d01d      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a33      	ldr	r2, [pc, #204]	; (8003128 <DMA_CalcBaseAndBitshift+0x140>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a32      	ldr	r2, [pc, #200]	; (800312c <DMA_CalcBaseAndBitshift+0x144>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a30      	ldr	r2, [pc, #192]	; (8003130 <DMA_CalcBaseAndBitshift+0x148>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <DMA_CalcBaseAndBitshift+0x14c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <DMA_CalcBaseAndBitshift+0x150>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <DMA_CalcBaseAndBitshift+0xa8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2c      	ldr	r2, [pc, #176]	; (800313c <DMA_CalcBaseAndBitshift+0x154>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <DMA_CalcBaseAndBitshift+0xac>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <DMA_CalcBaseAndBitshift+0xae>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d024      	beq.n	80030e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3b10      	subs	r3, #16
 80030a2:	4a27      	ldr	r2, [pc, #156]	; (8003140 <DMA_CalcBaseAndBitshift+0x158>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	4a24      	ldr	r2, [pc, #144]	; (8003144 <DMA_CalcBaseAndBitshift+0x15c>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	461a      	mov	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d908      	bls.n	80030d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <DMA_CalcBaseAndBitshift+0x160>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	1d1a      	adds	r2, r3, #4
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	659a      	str	r2, [r3, #88]	; 0x58
 80030d2:	e00d      	b.n	80030f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <DMA_CalcBaseAndBitshift+0x160>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6593      	str	r3, [r2, #88]	; 0x58
 80030e2:	e005      	b.n	80030f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40020010 	.word	0x40020010
 8003104:	40020028 	.word	0x40020028
 8003108:	40020040 	.word	0x40020040
 800310c:	40020058 	.word	0x40020058
 8003110:	40020070 	.word	0x40020070
 8003114:	40020088 	.word	0x40020088
 8003118:	400200a0 	.word	0x400200a0
 800311c:	400200b8 	.word	0x400200b8
 8003120:	40020410 	.word	0x40020410
 8003124:	40020428 	.word	0x40020428
 8003128:	40020440 	.word	0x40020440
 800312c:	40020458 	.word	0x40020458
 8003130:	40020470 	.word	0x40020470
 8003134:	40020488 	.word	0x40020488
 8003138:	400204a0 	.word	0x400204a0
 800313c:	400204b8 	.word	0x400204b8
 8003140:	aaaaaaab 	.word	0xaaaaaaab
 8003144:	080138f0 	.word	0x080138f0
 8003148:	fffffc00 	.word	0xfffffc00

0800314c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d120      	bne.n	80031a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	2b03      	cmp	r3, #3
 8003166:	d858      	bhi.n	800321a <DMA_CheckFifoParam+0xce>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <DMA_CheckFifoParam+0x24>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003181 	.word	0x08003181
 8003174:	08003193 	.word	0x08003193
 8003178:	08003181 	.word	0x08003181
 800317c:	0800321b 	.word	0x0800321b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d048      	beq.n	800321e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003190:	e045      	b.n	800321e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800319a:	d142      	bne.n	8003222 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031a0:	e03f      	b.n	8003222 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031aa:	d123      	bne.n	80031f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d838      	bhi.n	8003226 <DMA_CheckFifoParam+0xda>
 80031b4:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <DMA_CheckFifoParam+0x70>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031d3 	.word	0x080031d3
 80031c4:	080031cd 	.word	0x080031cd
 80031c8:	080031e5 	.word	0x080031e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
        break;
 80031d0:	e030      	b.n	8003234 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d025      	beq.n	800322a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031e2:	e022      	b.n	800322a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ec:	d11f      	bne.n	800322e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031f2:	e01c      	b.n	800322e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d902      	bls.n	8003202 <DMA_CheckFifoParam+0xb6>
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d003      	beq.n	8003208 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003200:	e018      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
        break;
 8003206:	e015      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
    break;
 8003218:	e00b      	b.n	8003232 <DMA_CheckFifoParam+0xe6>
        break;
 800321a:	bf00      	nop
 800321c:	e00a      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
        break;
 800321e:	bf00      	nop
 8003220:	e008      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
        break;
 8003222:	bf00      	nop
 8003224:	e006      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
        break;
 8003226:	bf00      	nop
 8003228:	e004      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
        break;
 800322a:	bf00      	nop
 800322c:	e002      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
        break;
 800322e:	bf00      	nop
 8003230:	e000      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
    break;
 8003232:	bf00      	nop
    }
  }

  return status;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop

08003244 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a38      	ldr	r2, [pc, #224]	; (8003338 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a36      	ldr	r2, [pc, #216]	; (800333c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a33      	ldr	r2, [pc, #204]	; (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a32      	ldr	r2, [pc, #200]	; (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a30      	ldr	r2, [pc, #192]	; (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01a      	beq.n	80032e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3b08      	subs	r3, #8
 80032b4:	4a28      	ldr	r2, [pc, #160]	; (8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4b26      	ldr	r3, [pc, #152]	; (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a24      	ldr	r2, [pc, #144]	; (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80032d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	2201      	movs	r2, #1
 80032da:	409a      	lsls	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032e0:	e024      	b.n	800332c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3b10      	subs	r3, #16
 80032ea:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d806      	bhi.n	800330a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a1b      	ldr	r2, [pc, #108]	; (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d902      	bls.n	800330a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3308      	adds	r3, #8
 8003308:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800331c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	2201      	movs	r2, #1
 8003326:	409a      	lsls	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	58025408 	.word	0x58025408
 800333c:	5802541c 	.word	0x5802541c
 8003340:	58025430 	.word	0x58025430
 8003344:	58025444 	.word	0x58025444
 8003348:	58025458 	.word	0x58025458
 800334c:	5802546c 	.word	0x5802546c
 8003350:	58025480 	.word	0x58025480
 8003354:	58025494 	.word	0x58025494
 8003358:	cccccccd 	.word	0xcccccccd
 800335c:	16009600 	.word	0x16009600
 8003360:	58025880 	.word	0x58025880
 8003364:	aaaaaaab 	.word	0xaaaaaaab
 8003368:	400204b8 	.word	0x400204b8
 800336c:	4002040f 	.word	0x4002040f
 8003370:	10008200 	.word	0x10008200
 8003374:	40020880 	.word	0x40020880

08003378 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04a      	beq.n	8003424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d847      	bhi.n	8003424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a25      	ldr	r2, [pc, #148]	; (8003430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d022      	beq.n	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a24      	ldr	r2, [pc, #144]	; (8003434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01d      	beq.n	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d018      	beq.n	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00e      	beq.n	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d009      	beq.n	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003400:	671a      	str	r2, [r3, #112]	; 0x70
 8003402:	e009      	b.n	8003418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	461a      	mov	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a11      	ldr	r2, [pc, #68]	; (800345c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003416:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3b01      	subs	r3, #1
 800341c:	2201      	movs	r2, #1
 800341e:	409a      	lsls	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	58025408 	.word	0x58025408
 8003434:	5802541c 	.word	0x5802541c
 8003438:	58025430 	.word	0x58025430
 800343c:	58025444 	.word	0x58025444
 8003440:	58025458 	.word	0x58025458
 8003444:	5802546c 	.word	0x5802546c
 8003448:	58025480 	.word	0x58025480
 800344c:	58025494 	.word	0x58025494
 8003450:	1600963f 	.word	0x1600963f
 8003454:	58025940 	.word	0x58025940
 8003458:	1000823f 	.word	0x1000823f
 800345c:	40020940 	.word	0x40020940

08003460 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b098      	sub	sp, #96	; 0x60
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003468:	4a84      	ldr	r2, [pc, #528]	; (800367c <HAL_FDCAN_Init+0x21c>)
 800346a:	f107 030c 	add.w	r3, r7, #12
 800346e:	4611      	mov	r1, r2
 8003470:	224c      	movs	r2, #76	; 0x4c
 8003472:	4618      	mov	r0, r3
 8003474:	f00f fa26 	bl	80128c4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1ca      	b.n	8003818 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7e      	ldr	r2, [pc, #504]	; (8003680 <HAL_FDCAN_Init+0x220>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d106      	bne.n	800349a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003494:	461a      	mov	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fdca 	bl	8001048 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0210 	bic.w	r2, r2, #16
 80034c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c4:	f7fe f9c0 	bl	8001848 <HAL_GetTick>
 80034c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034ca:	e014      	b.n	80034f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034cc:	f7fe f9bc 	bl	8001848 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b0a      	cmp	r3, #10
 80034d8:	d90d      	bls.n	80034f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e190      	b.n	8003818 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b08      	cmp	r3, #8
 8003502:	d0e3      	beq.n	80034cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003514:	f7fe f998 	bl	8001848 <HAL_GetTick>
 8003518:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800351a:	e014      	b.n	8003546 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800351c:	f7fe f994 	bl	8001848 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b0a      	cmp	r3, #10
 8003528:	d90d      	bls.n	8003546 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e168      	b.n	8003818 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0e3      	beq.n	800351c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0202 	orr.w	r2, r2, #2
 8003562:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7c1b      	ldrb	r3, [r3, #16]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d108      	bne.n	800357e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800357a:	619a      	str	r2, [r3, #24]
 800357c:	e007      	b.n	800358e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800358c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7c5b      	ldrb	r3, [r3, #17]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d108      	bne.n	80035a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a4:	619a      	str	r2, [r3, #24]
 80035a6:	e007      	b.n	80035b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7c9b      	ldrb	r3, [r3, #18]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d108      	bne.n	80035d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ce:	619a      	str	r2, [r3, #24]
 80035d0:	e007      	b.n	80035e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003606:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0210 	bic.w	r2, r2, #16
 8003616:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d108      	bne.n	8003632 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0204 	orr.w	r2, r2, #4
 800362e:	619a      	str	r2, [r3, #24]
 8003630:	e030      	b.n	8003694 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02c      	beq.n	8003694 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d020      	beq.n	8003684 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003650:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0210 	orr.w	r2, r2, #16
 8003660:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d114      	bne.n	8003694 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0220 	orr.w	r2, r2, #32
 8003678:	619a      	str	r2, [r3, #24]
 800367a:	e00b      	b.n	8003694 <HAL_FDCAN_Init+0x234>
 800367c:	080137fc 	.word	0x080137fc
 8003680:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0220 	orr.w	r2, r2, #32
 8003692:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	3b01      	subs	r3, #1
 800369a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c8:	d115      	bne.n	80036f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	3b01      	subs	r3, #1
 80036d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	3b01      	subs	r3, #1
 80036e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80036e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80036f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	4413      	add	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800372a:	f023 0107 	bic.w	r1, r3, #7
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003738:	4413      	add	r3, r2
 800373a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d012      	beq.n	8003776 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003758:	f023 0107 	bic.w	r1, r3, #7
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003766:	4413      	add	r3, r2
 8003768:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377a:	2b00      	cmp	r3, #0
 800377c:	d013      	beq.n	80037a6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003786:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003794:	4413      	add	r3, r2
 8003796:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800379a:	011a      	lsls	r2, r3, #4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80037b6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037c4:	4413      	add	r3, r2
 80037c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80037ca:	021a      	lsls	r2, r3, #8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <HAL_FDCAN_Init+0x3c0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d107      	bne.n	80037f0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f022 0203 	bic.w	r2, r2, #3
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f80b 	bl	8003824 <FDCAN_CalcultateRamBlockAddresses>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003814:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003818:	4618      	mov	r0, r3
 800381a:	3760      	adds	r7, #96	; 0x60
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	4000a000 	.word	0x4000a000

08003824 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003830:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800383a:	4ba7      	ldr	r3, [pc, #668]	; (8003ad8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800383c:	4013      	ands	r3, r2
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	0091      	lsls	r1, r2, #2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	430b      	orrs	r3, r1
 8003848:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003854:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	041a      	lsls	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	4413      	add	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800387a:	4b97      	ldr	r3, [pc, #604]	; (8003ad8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800387c:	4013      	ands	r3, r2
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	0091      	lsls	r1, r2, #2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	430b      	orrs	r3, r1
 8003888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4413      	add	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80038bc:	4b86      	ldr	r3, [pc, #536]	; (8003ad8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038be:	4013      	ands	r3, r2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	0091      	lsls	r1, r2, #2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038d6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	041a      	lsls	r2, r3, #16
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4413      	add	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003904:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003906:	4013      	ands	r3, r2
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	0091      	lsls	r1, r2, #2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	430b      	orrs	r3, r1
 8003912:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800391e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	041a      	lsls	r2, r3, #16
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4413      	add	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800394c:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	0091      	lsls	r1, r2, #2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4413      	add	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003978:	4b57      	ldr	r3, [pc, #348]	; (8003ad8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800397a:	4013      	ands	r3, r2
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	0091      	lsls	r1, r2, #2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	430b      	orrs	r3, r1
 8003986:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003992:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	041a      	lsls	r2, r3, #16
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4413      	add	r3, r2
 80039b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039bc:	4013      	ands	r3, r2
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	0091      	lsls	r1, r2, #2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	430b      	orrs	r3, r1
 80039c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039d4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	041a      	lsls	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039f0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	061a      	lsls	r2, r3, #24
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a08:	4b34      	ldr	r3, [pc, #208]	; (8003adc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009a      	lsls	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	441a      	add	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d915      	bls.n	8003b00 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003ad4:	e006      	b.n	8003ae4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003ad6:	bf00      	nop
 8003ad8:	ffff0003 	.word	0xffff0003
 8003adc:	10002b00 	.word	0x10002b00
 8003ae0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2203      	movs	r2, #3
 8003af8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e010      	b.n	8003b22 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e005      	b.n	8003b14 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3304      	adds	r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d3f3      	bcc.n	8003b08 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b3e:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <HAL_GPIO_Init+0x234>)
 8003b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b42:	e194      	b.n	8003e6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2101      	movs	r1, #1
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8186 	beq.w	8003e68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d00b      	beq.n	8003b7c <HAL_GPIO_Init+0x4c>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d007      	beq.n	8003b7c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b70:	2b11      	cmp	r3, #17
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b12      	cmp	r3, #18
 8003b7a:	d130      	bne.n	8003bde <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	2203      	movs	r2, #3
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 0201 	and.w	r2, r3, #1
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	2203      	movs	r2, #3
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0xee>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b12      	cmp	r3, #18
 8003c1c:	d123      	bne.n	8003c66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	08da      	lsrs	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3208      	adds	r2, #8
 8003c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	220f      	movs	r2, #15
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	08da      	lsrs	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3208      	adds	r2, #8
 8003c60:	69b9      	ldr	r1, [r7, #24]
 8003c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	2203      	movs	r2, #3
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 0203 	and.w	r2, r3, #3
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80e0 	beq.w	8003e68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca8:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_GPIO_Init+0x238>)
 8003caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cae:	4a2e      	ldr	r2, [pc, #184]	; (8003d68 <HAL_GPIO_Init+0x238>)
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_GPIO_Init+0x238>)
 8003cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cc6:	4a29      	ldr	r2, [pc, #164]	; (8003d6c <HAL_GPIO_Init+0x23c>)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a20      	ldr	r2, [pc, #128]	; (8003d70 <HAL_GPIO_Init+0x240>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d052      	beq.n	8003d98 <HAL_GPIO_Init+0x268>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <HAL_GPIO_Init+0x244>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d031      	beq.n	8003d5e <HAL_GPIO_Init+0x22e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <HAL_GPIO_Init+0x248>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d02b      	beq.n	8003d5a <HAL_GPIO_Init+0x22a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <HAL_GPIO_Init+0x24c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d025      	beq.n	8003d56 <HAL_GPIO_Init+0x226>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_GPIO_Init+0x250>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01f      	beq.n	8003d52 <HAL_GPIO_Init+0x222>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <HAL_GPIO_Init+0x254>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d019      	beq.n	8003d4e <HAL_GPIO_Init+0x21e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <HAL_GPIO_Init+0x258>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_GPIO_Init+0x21a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_GPIO_Init+0x25c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00d      	beq.n	8003d46 <HAL_GPIO_Init+0x216>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_GPIO_Init+0x260>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <HAL_GPIO_Init+0x212>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_GPIO_Init+0x264>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <HAL_GPIO_Init+0x20e>
 8003d3a:	2309      	movs	r3, #9
 8003d3c:	e02d      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d3e:	230a      	movs	r3, #10
 8003d40:	e02b      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d42:	2308      	movs	r3, #8
 8003d44:	e029      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d46:	2307      	movs	r3, #7
 8003d48:	e027      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d4a:	2306      	movs	r3, #6
 8003d4c:	e025      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d4e:	2305      	movs	r3, #5
 8003d50:	e023      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d52:	2304      	movs	r3, #4
 8003d54:	e021      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d56:	2303      	movs	r3, #3
 8003d58:	e01f      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e01d      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e01b      	b.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d62:	bf00      	nop
 8003d64:	58000080 	.word	0x58000080
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	58000400 	.word	0x58000400
 8003d70:	58020000 	.word	0x58020000
 8003d74:	58020400 	.word	0x58020400
 8003d78:	58020800 	.word	0x58020800
 8003d7c:	58020c00 	.word	0x58020c00
 8003d80:	58021000 	.word	0x58021000
 8003d84:	58021400 	.word	0x58021400
 8003d88:	58021800 	.word	0x58021800
 8003d8c:	58021c00 	.word	0x58021c00
 8003d90:	58022000 	.word	0x58022000
 8003d94:	58022400 	.word	0x58022400
 8003d98:	2300      	movs	r3, #0
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	f002 0203 	and.w	r2, r2, #3
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	4093      	lsls	r3, r2
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003daa:	4938      	ldr	r1, [pc, #224]	; (8003e8c <HAL_GPIO_Init+0x35c>)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	3302      	adds	r3, #2
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f47f ae63 	bne.w	8003b44 <HAL_GPIO_Init+0x14>
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3724      	adds	r7, #36	; 0x24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	58000400 	.word	0x58000400

08003e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e001      	b.n	8003eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003edc:	e003      	b.n	8003ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ede:	887b      	ldrh	r3, [r7, #2]
 8003ee0:	041a      	lsls	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	619a      	str	r2, [r3, #24]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	401a      	ands	r2, r3
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d104      	bne.n	8003f16 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	041a      	lsls	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003f14:	e002      	b.n	8003f1c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	b08f      	sub	sp, #60	; 0x3c
 8003f2c:	af0a      	add	r7, sp, #40	; 0x28
 8003f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e116      	b.n	8004168 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f00e f95d 	bl	8012214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f007 fcd8 	bl	800b92e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	687e      	ldr	r6, [r7, #4]
 8003f86:	466d      	mov	r5, sp
 8003f88:	f106 0410 	add.w	r4, r6, #16
 8003f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f98:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f9c:	1d33      	adds	r3, r6, #4
 8003f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fa0:	6838      	ldr	r0, [r7, #0]
 8003fa2:	f007 fbaf 	bl	800b704 <USB_CoreInit>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d7      	b.n	8004168 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f007 fcc6 	bl	800b950 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
 8003fc8:	e04a      	b.n	8004060 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	333d      	adds	r3, #61	; 0x3d
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	333c      	adds	r3, #60	; 0x3c
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ff2:	7bfa      	ldrb	r2, [r7, #15]
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	b298      	uxth	r0, r3
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	3342      	adds	r3, #66	; 0x42
 8004006:	4602      	mov	r2, r0
 8004008:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	333f      	adds	r3, #63	; 0x3f
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3344      	adds	r3, #68	; 0x44
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3348      	adds	r3, #72	; 0x48
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3350      	adds	r3, #80	; 0x50
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	3301      	adds	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	7bfa      	ldrb	r2, [r7, #15]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d3af      	bcc.n	8003fca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
 800406e:	e044      	b.n	80040fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040b2:	7bfa      	ldrb	r2, [r7, #15]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	3301      	adds	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	429a      	cmp	r2, r3
 8004102:	d3b5      	bcc.n	8004070 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	687e      	ldr	r6, [r7, #4]
 800410c:	466d      	mov	r5, sp
 800410e:	f106 0410 	add.w	r4, r6, #16
 8004112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800411a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800411e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004122:	1d33      	adds	r3, r6, #4
 8004124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004126:	6838      	ldr	r0, [r7, #0]
 8004128:	f007 fc3c 	bl	800b9a4 <USB_DevInit>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e014      	b.n	8004168 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f001 f8be 	bl	80052d8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f008 fc7b 	bl	800ca5c <USB_DevDisconnect>

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004170 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_PCD_Start+0x1c>
 8004188:	2302      	movs	r3, #2
 800418a:	e020      	b.n	80041ce <HAL_PCD_Start+0x5e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	2b01      	cmp	r3, #1
 800419a:	d109      	bne.n	80041b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d005      	beq.n	80041b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f008 fc39 	bl	800ca2c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f007 fba4 	bl	800b90c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041d6:	b590      	push	{r4, r7, lr}
 80041d8:	b08d      	sub	sp, #52	; 0x34
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f008 fce0 	bl	800cbb2 <USB_GetMode>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f040 83ca 	bne.w	800498e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f008 fc44 	bl	800ca8c <USB_ReadInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 83c0 	beq.w	800498c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f008 fc3b 	bl	800ca8c <USB_ReadInterrupts>
 8004216:	4603      	mov	r3, r0
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d107      	bne.n	8004230 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f002 0202 	and.w	r2, r2, #2
 800422e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f008 fc29 	bl	800ca8c <USB_ReadInterrupts>
 800423a:	4603      	mov	r3, r0
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b10      	cmp	r3, #16
 8004242:	d161      	bne.n	8004308 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0210 	bic.w	r2, r2, #16
 8004252:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4413      	add	r3, r2
 8004270:	3304      	adds	r3, #4
 8004272:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	0c5b      	lsrs	r3, r3, #17
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	2b02      	cmp	r3, #2
 800427e:	d124      	bne.n	80042ca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d035      	beq.n	80042f8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429a:	b29b      	uxth	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	6a38      	ldr	r0, [r7, #32]
 80042a0:	f008 faa1 	bl	800c7e6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b0:	441a      	add	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c2:	441a      	add	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	619a      	str	r2, [r3, #24]
 80042c8:	e016      	b.n	80042f8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	0c5b      	lsrs	r3, r3, #17
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d110      	bne.n	80042f8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042dc:	2208      	movs	r2, #8
 80042de:	4619      	mov	r1, r3
 80042e0:	6a38      	ldr	r0, [r7, #32]
 80042e2:	f008 fa80 	bl	800c7e6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042f2:	441a      	add	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0210 	orr.w	r2, r2, #16
 8004306:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f008 fbbd 	bl	800ca8c <USB_ReadInterrupts>
 8004312:	4603      	mov	r3, r0
 8004314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004318:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800431c:	d16e      	bne.n	80043fc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f008 fbc3 	bl	800cab2 <USB_ReadDevAllOutEpInterrupt>
 800432c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800432e:	e062      	b.n	80043f6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d057      	beq.n	80043ea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f008 fbe8 	bl	800cb1a <USB_ReadDevOutEPInterrupt>
 800434a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	461a      	mov	r2, r3
 8004364:	2301      	movs	r3, #1
 8004366:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fe0a 	bl	8004f84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004386:	461a      	mov	r2, r3
 8004388:	2308      	movs	r3, #8
 800438a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800438c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 ff04 	bl	800519c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	461a      	mov	r2, r3
 80043ac:	2310      	movs	r3, #16
 80043ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	461a      	mov	r2, r3
 80043c8:	2320      	movs	r3, #32
 80043ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e2:	461a      	mov	r2, r3
 80043e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	3301      	adds	r3, #1
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d199      	bne.n	8004330 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f008 fb43 	bl	800ca8c <USB_ReadInterrupts>
 8004406:	4603      	mov	r3, r0
 8004408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004410:	f040 80c0 	bne.w	8004594 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f008 fb64 	bl	800cae6 <USB_ReadDevAllInEpInterrupt>
 800441e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004424:	e0b2      	b.n	800458c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a7 	beq.w	8004580 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f008 fb8a 	bl	800cb56 <USB_ReadDevInEPInterrupt>
 8004442:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d057      	beq.n	80044fe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	2201      	movs	r2, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	43db      	mvns	r3, r3
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800446e:	4013      	ands	r3, r2
 8004470:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447e:	461a      	mov	r2, r3
 8004480:	2301      	movs	r3, #1
 8004482:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d132      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3348      	adds	r3, #72	; 0x48
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4403      	add	r3, r0
 80044ac:	3344      	adds	r3, #68	; 0x44
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4419      	add	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4403      	add	r3, r0
 80044c0:	3348      	adds	r3, #72	; 0x48
 80044c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x31c>
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3350      	adds	r3, #80	; 0x50
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d108      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044ea:	461a      	mov	r2, r3
 80044ec:	2101      	movs	r1, #1
 80044ee:	f008 fb93 	bl	800cc18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f00d ff0a 	bl	8012312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	461a      	mov	r2, r3
 8004516:	2308      	movs	r3, #8
 8004518:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	2310      	movs	r3, #16
 8004534:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	461a      	mov	r2, r3
 800454e:	2340      	movs	r3, #64	; 0x40
 8004550:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	461a      	mov	r2, r3
 800456a:	2302      	movs	r3, #2
 800456c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fc75 	bl	8004e6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	3301      	adds	r3, #1
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	f47f af49 	bne.w	8004426 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f008 fa77 	bl	800ca8c <USB_ReadInterrupts>
 800459e:	4603      	mov	r3, r0
 80045a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a8:	d122      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d108      	bne.n	80045da <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045d0:	2100      	movs	r1, #0
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fea4 	bl	8005320 <HAL_PCDEx_LPM_Callback>
 80045d8:	e002      	b.n	80045e0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f00d ff10 	bl	8012400 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80045ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f008 fa49 	bl	800ca8c <USB_ReadInterrupts>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004604:	d112      	bne.n	800462c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d102      	bne.n	800461c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f00d fecc 	bl	80123b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800462a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f008 fa2b 	bl	800ca8c <USB_ReadInterrupts>
 8004636:	4603      	mov	r3, r0
 8004638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800463c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004640:	d121      	bne.n	8004686 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004650:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d111      	bne.n	8004680 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	f003 020f 	and.w	r2, r3, #15
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004676:	2101      	movs	r1, #1
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fe51 	bl	8005320 <HAL_PCDEx_LPM_Callback>
 800467e:	e002      	b.n	8004686 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f00d fe97 	bl	80123b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f008 f9fe 	bl	800ca8c <USB_ReadInterrupts>
 8004690:	4603      	mov	r3, r0
 8004692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	f040 80c7 	bne.w	800482c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2110      	movs	r1, #16
 80046b8:	4618      	mov	r0, r3
 80046ba:	f007 fad1 	bl	800bc60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046be:	2300      	movs	r3, #0
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c2:	e056      	b.n	8004772 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	461a      	mov	r2, r3
 80046d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004712:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004716:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	461a      	mov	r2, r3
 8004726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800472a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800474a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004766:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800476a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476e:	3301      	adds	r3, #1
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004778:	429a      	cmp	r2, r3
 800477a:	d3a3      	bcc.n	80046c4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800478e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	2b00      	cmp	r3, #0
 8004796:	d016      	beq.n	80047c6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a8:	f043 030b 	orr.w	r3, r3, #11
 80047ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047be:	f043 030b 	orr.w	r3, r3, #11
 80047c2:	6453      	str	r3, [r2, #68]	; 0x44
 80047c4:	e015      	b.n	80047f2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d4:	4619      	mov	r1, r3
 80047d6:	f242 032b 	movw	r3, #8235	; 0x202b
 80047da:	4313      	orrs	r3, r2
 80047dc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ec:	f043 030b 	orr.w	r3, r3, #11
 80047f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004800:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004804:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004816:	461a      	mov	r2, r3
 8004818:	f008 f9fe 	bl	800cc18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800482a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f008 f92b 	bl	800ca8c <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800483c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004840:	d124      	bne.n	800488c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f008 f9c2 	bl	800cbd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f007 fa66 	bl	800bd22 <USB_GetDevSpeed>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681c      	ldr	r4, [r3, #0]
 8004862:	f001 fceb 	bl	800623c <HAL_RCC_GetHCLKFreq>
 8004866:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	4620      	mov	r0, r4
 8004872:	f006 ffa9 	bl	800b7c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f00d fd73 	bl	8012362 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800488a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f008 f8fb 	bl	800ca8c <USB_ReadInterrupts>
 8004896:	4603      	mov	r3, r0
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d10a      	bne.n	80048b6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f00d fd50 	bl	8012346 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f002 0208 	and.w	r2, r2, #8
 80048b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f008 f8e6 	bl	800ca8c <USB_ReadInterrupts>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ca:	d10f      	bne.n	80048ec <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f00d fdb2 	bl	8012440 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80048ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f008 f8cb 	bl	800ca8c <USB_ReadInterrupts>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004900:	d10f      	bne.n	8004922 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f00d fd85 	bl	801241c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f008 f8b0 	bl	800ca8c <USB_ReadInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004936:	d10a      	bne.n	800494e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f00d fd93 	bl	8012464 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800494c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f008 f89a 	bl	800ca8c <USB_ReadInterrupts>
 8004958:	4603      	mov	r3, r0
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b04      	cmp	r3, #4
 8004960:	d115      	bne.n	800498e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f00d fd83 	bl	8012480 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	e000      	b.n	800498e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800498c:	bf00      	nop
    }
  }
}
 800498e:	3734      	adds	r7, #52	; 0x34
 8004990:	46bd      	mov	sp, r7
 8004992:	bd90      	pop	{r4, r7, pc}

08004994 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_PCD_SetAddress+0x1a>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e013      	b.n	80049d6 <HAL_PCD_SetAddress+0x42>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f008 f80a 	bl	800c9e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	4608      	mov	r0, r1
 80049e8:	4611      	mov	r1, r2
 80049ea:	461a      	mov	r2, r3
 80049ec:	4603      	mov	r3, r0
 80049ee:	70fb      	strb	r3, [r7, #3]
 80049f0:	460b      	mov	r3, r1
 80049f2:	803b      	strh	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da0f      	bge.n	8004a24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 020f 	and.w	r2, r3, #15
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	3338      	adds	r3, #56	; 0x38
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	705a      	strb	r2, [r3, #1]
 8004a22:	e00f      	b.n	8004a44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	f003 020f 	and.w	r2, r3, #15
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a50:	883a      	ldrh	r2, [r7, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	78ba      	ldrb	r2, [r7, #2]
 8004a5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d004      	beq.n	8004a6e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a6e:	78bb      	ldrb	r3, [r7, #2]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d102      	bne.n	8004a7a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_PCD_EP_Open+0xaa>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e00e      	b.n	8004aa6 <HAL_PCD_EP_Open+0xc8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68f9      	ldr	r1, [r7, #12]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f007 f968 	bl	800bd6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	da0f      	bge.n	8004ae2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	f003 020f 	and.w	r2, r3, #15
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	3338      	adds	r3, #56	; 0x38
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	705a      	strb	r2, [r3, #1]
 8004ae0:	e00f      	b.n	8004b02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	f003 020f 	and.w	r2, r3, #15
 8004ae8:	4613      	mov	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	4413      	add	r3, r2
 8004af8:	3304      	adds	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_PCD_EP_Close+0x6e>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e00e      	b.n	8004b3a <HAL_PCD_EP_Close+0x8c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68f9      	ldr	r1, [r7, #12]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f007 f9a6 	bl	800be7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b086      	sub	sp, #24
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b52:	7afb      	ldrb	r3, [r7, #11]
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	3304      	adds	r3, #4
 8004b6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b84:	7afb      	ldrb	r3, [r7, #11]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d102      	bne.n	8004b9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b9e:	7afb      	ldrb	r3, [r7, #11]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6979      	ldr	r1, [r7, #20]
 8004bb6:	f007 fc89 	bl	800c4cc <USB_EP0StartXfer>
 8004bba:	e008      	b.n	8004bce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6979      	ldr	r1, [r7, #20]
 8004bca:	f007 fa33 	bl	800c034 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	460b      	mov	r3, r1
 8004c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c18:	7afb      	ldrb	r3, [r7, #11]
 8004c1a:	f003 020f 	and.w	r2, r3, #15
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	3338      	adds	r3, #56	; 0x38
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2201      	movs	r2, #1
 8004c46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c48:	7afb      	ldrb	r3, [r7, #11]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d102      	bne.n	8004c62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6818      	ldr	r0, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	6979      	ldr	r1, [r7, #20]
 8004c7a:	f007 fc27 	bl	800c4cc <USB_EP0StartXfer>
 8004c7e:	e008      	b.n	8004c92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6979      	ldr	r1, [r7, #20]
 8004c8e:	f007 f9d1 	bl	800c034 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 020f 	and.w	r2, r3, #15
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d901      	bls.n	8004cba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e050      	b.n	8004d5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da0f      	bge.n	8004ce2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	3338      	adds	r3, #56	; 0x38
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	705a      	strb	r2, [r3, #1]
 8004ce0:	e00d      	b.n	8004cfe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_PCD_EP_SetStall+0x82>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e01e      	b.n	8004d5c <HAL_PCD_EP_SetStall+0xc0>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f007 fd83 	bl	800c838 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	b2d9      	uxtb	r1, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f007 ff63 	bl	800cc18 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 020f 	and.w	r2, r3, #15
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d901      	bls.n	8004d82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e042      	b.n	8004e08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	da0f      	bge.n	8004daa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	f003 020f 	and.w	r2, r3, #15
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	3338      	adds	r3, #56	; 0x38
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3304      	adds	r3, #4
 8004da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	705a      	strb	r2, [r3, #1]
 8004da8:	e00f      	b.n	8004dca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	f003 020f 	and.w	r2, r3, #15
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_PCD_EP_ClrStall+0x86>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e00e      	b.n	8004e08 <HAL_PCD_EP_ClrStall+0xa4>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f007 fd8b 	bl	800c914 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_PCD_EP_Flush+0x1a>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e01b      	b.n	8004e62 <HAL_PCD_EP_Flush+0x52>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	da09      	bge.n	8004e4e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f006 ff0a 	bl	800bc60 <USB_FlushTxFifo>
 8004e4c:	e004      	b.n	8004e58 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f006 ff2a 	bl	800bcac <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b08a      	sub	sp, #40	; 0x28
 8004e6e:	af02      	add	r7, sp, #8
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	3338      	adds	r3, #56	; 0x38
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3304      	adds	r3, #4
 8004e90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d901      	bls.n	8004ea2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06c      	b.n	8004f7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d902      	bls.n	8004ebe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	3303      	adds	r3, #3
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ec6:	e02b      	b.n	8004f20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d902      	bls.n	8004ee4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3303      	adds	r3, #3
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68d9      	ldr	r1, [r3, #12]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4603      	mov	r3, r0
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f007 fc3a 	bl	800c77c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	441a      	add	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d809      	bhi.n	8004f4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d203      	bcs.n	8004f4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1be      	bne.n	8004ec8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d811      	bhi.n	8004f7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	6939      	ldr	r1, [r7, #16]
 8004f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f76:	4013      	ands	r3, r2
 8004f78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	333c      	adds	r3, #60	; 0x3c
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	f040 80a0 	bne.w	80050fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d015      	beq.n	8004ff2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a72      	ldr	r2, [pc, #456]	; (8005194 <PCD_EP_OutXfrComplete_int+0x210>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	f240 80dd 	bls.w	800518a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80d7 	beq.w	800518a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	6093      	str	r3, [r2, #8]
 8004ff0:	e0cb      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	461a      	mov	r2, r3
 800500a:	2320      	movs	r3, #32
 800500c:	6093      	str	r3, [r2, #8]
 800500e:	e0bc      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 80b7 	bne.w	800518a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4a5d      	ldr	r2, [pc, #372]	; (8005194 <PCD_EP_OutXfrComplete_int+0x210>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d90f      	bls.n	8005044 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	461a      	mov	r2, r3
 800503c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005040:	6093      	str	r3, [r2, #8]
 8005042:	e0a2      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005056:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	0159      	lsls	r1, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	440b      	add	r3, r1
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800506a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4403      	add	r3, r0
 800507a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800507e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4403      	add	r3, r0
 80050a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4419      	add	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4403      	add	r3, r0
 80050b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d114      	bne.n	80050ee <PCD_EP_OutXfrComplete_int+0x16a>
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050e6:	461a      	mov	r2, r3
 80050e8:	2101      	movs	r1, #1
 80050ea:	f007 fd95 	bl	800cc18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f00d f8f1 	bl	80122dc <HAL_PCD_DataOutStageCallback>
 80050fa:	e046      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a26      	ldr	r2, [pc, #152]	; (8005198 <PCD_EP_OutXfrComplete_int+0x214>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d124      	bne.n	800514e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511a:	461a      	mov	r2, r3
 800511c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005120:	6093      	str	r3, [r2, #8]
 8005122:	e032      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	2320      	movs	r3, #32
 800513e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f00d f8c8 	bl	80122dc <HAL_PCD_DataOutStageCallback>
 800514c:	e01d      	b.n	800518a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d114      	bne.n	800517e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005176:	461a      	mov	r2, r3
 8005178:	2100      	movs	r1, #0
 800517a:	f007 fd4d 	bl	800cc18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f00d f8a9 	bl	80122dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	4f54300a 	.word	0x4f54300a
 8005198:	4f54310a 	.word	0x4f54310a

0800519c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	333c      	adds	r3, #60	; 0x3c
 80051b4:	3304      	adds	r3, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a15      	ldr	r2, [pc, #84]	; (8005224 <PCD_EP_OutSetupPacket_int+0x88>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d90e      	bls.n	80051f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	461a      	mov	r2, r3
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f00d f861 	bl	80122b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <PCD_EP_OutSetupPacket_int+0x88>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d90c      	bls.n	8005218 <PCD_EP_OutSetupPacket_int+0x7c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d108      	bne.n	8005218 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005210:	461a      	mov	r2, r3
 8005212:	2101      	movs	r1, #1
 8005214:	f007 fd00 	bl	800cc18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	4f54300a 	.word	0x4f54300a

08005228 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
 8005234:	4613      	mov	r3, r2
 8005236:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d107      	bne.n	8005256 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005246:	883b      	ldrh	r3, [r7, #0]
 8005248:	0419      	lsls	r1, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	430a      	orrs	r2, r1
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
 8005254:	e028      	b.n	80052a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e00d      	b.n	8005286 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	3340      	adds	r3, #64	; 0x40
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	3301      	adds	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
 8005286:	7bfa      	ldrb	r2, [r7, #15]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	3b01      	subs	r3, #1
 800528c:	429a      	cmp	r2, r3
 800528e:	d3ec      	bcc.n	800526a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005290:	883b      	ldrh	r3, [r7, #0]
 8005292:	0418      	lsls	r0, r3, #16
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	3b01      	subs	r3, #1
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	4302      	orrs	r2, r0
 80052a0:	3340      	adds	r3, #64	; 0x40
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	887a      	ldrh	r2, [r7, #2]
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_PCDEx_ActivateLPM+0x44>)
 8005308:	4313      	orrs	r3, r2
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	10000003 	.word	0x10000003

08005320 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005340:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d00a      	beq.n	8005362 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800534c:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <HAL_PWREx_ConfigSupply+0x70>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d001      	beq.n	800535e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e01f      	b.n	800539e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e01d      	b.n	800539e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005362:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f023 0207 	bic.w	r2, r3, #7
 800536a:	490f      	ldr	r1, [pc, #60]	; (80053a8 <HAL_PWREx_ConfigSupply+0x70>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4313      	orrs	r3, r2
 8005370:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005372:	f7fc fa69 	bl	8001848 <HAL_GetTick>
 8005376:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005378:	e009      	b.n	800538e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800537a:	f7fc fa65 	bl	8001848 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005388:	d901      	bls.n	800538e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e007      	b.n	800539e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539a:	d1ee      	bne.n	800537a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	58024800 	.word	0x58024800

080053ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80053b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ba:	60d3      	str	r3, [r2, #12]
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	58024800 	.word	0x58024800

080053cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08c      	sub	sp, #48	; 0x30
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e3ff      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8087 	beq.w	80054fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ec:	4b99      	ldr	r3, [pc, #612]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053f6:	4b97      	ldr	r3, [pc, #604]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d007      	beq.n	8005412 <HAL_RCC_OscConfig+0x46>
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	2b18      	cmp	r3, #24
 8005406:	d110      	bne.n	800542a <HAL_RCC_OscConfig+0x5e>
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d10b      	bne.n	800542a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005412:	4b90      	ldr	r3, [pc, #576]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d06c      	beq.n	80054f8 <HAL_RCC_OscConfig+0x12c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d168      	bne.n	80054f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e3d9      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d106      	bne.n	8005442 <HAL_RCC_OscConfig+0x76>
 8005434:	4b87      	ldr	r3, [pc, #540]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a86      	ldr	r2, [pc, #536]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800543a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e02e      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x98>
 800544a:	4b82      	ldr	r3, [pc, #520]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a81      	ldr	r2, [pc, #516]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b7f      	ldr	r3, [pc, #508]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7e      	ldr	r2, [pc, #504]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800545c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e01d      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800546c:	d10c      	bne.n	8005488 <HAL_RCC_OscConfig+0xbc>
 800546e:	4b79      	ldr	r3, [pc, #484]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a78      	ldr	r2, [pc, #480]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b76      	ldr	r3, [pc, #472]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a75      	ldr	r2, [pc, #468]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e00b      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005488:	4b72      	ldr	r3, [pc, #456]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a71      	ldr	r2, [pc, #452]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b6f      	ldr	r3, [pc, #444]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a6e      	ldr	r2, [pc, #440]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fc f9ce 	bl	8001848 <HAL_GetTick>
 80054ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fc f9ca 	bl	8001848 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e38d      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054c2:	4b64      	ldr	r3, [pc, #400]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0xe4>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fc f9ba 	bl	8001848 <HAL_GetTick>
 80054d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fc f9b6 	bl	8001848 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e379      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054ea:	4b5a      	ldr	r3, [pc, #360]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x10c>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80ae 	beq.w	8005664 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005508:	4b52      	ldr	r3, [pc, #328]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005510:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005512:	4b50      	ldr	r3, [pc, #320]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_RCC_OscConfig+0x162>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	2b18      	cmp	r3, #24
 8005522:	d13a      	bne.n	800559a <HAL_RCC_OscConfig+0x1ce>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d135      	bne.n	800559a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800552e:	4b49      	ldr	r3, [pc, #292]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_RCC_OscConfig+0x17a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e34b      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005546:	f7fc f9ad 	bl	80018a4 <HAL_GetREVID>
 800554a:	4602      	mov	r2, r0
 800554c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005550:	429a      	cmp	r2, r3
 8005552:	d817      	bhi.n	8005584 <HAL_RCC_OscConfig+0x1b8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d108      	bne.n	800556e <HAL_RCC_OscConfig+0x1a2>
 800555c:	4b3d      	ldr	r3, [pc, #244]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005564:	4a3b      	ldr	r2, [pc, #236]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800556c:	e07a      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556e:	4b39      	ldr	r3, [pc, #228]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	031b      	lsls	r3, r3, #12
 800557c:	4935      	ldr	r1, [pc, #212]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005582:	e06f      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b33      	ldr	r3, [pc, #204]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	4930      	ldr	r1, [pc, #192]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005598:	e064      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d045      	beq.n	800562e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055a2:	4b2c      	ldr	r3, [pc, #176]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f023 0219 	bic.w	r2, r3, #25
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	4929      	ldr	r1, [pc, #164]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fc f948 	bl	8001848 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055bc:	f7fc f944 	bl	8001848 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e307      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ce:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055da:	f7fc f963 	bl	80018a4 <HAL_GetREVID>
 80055de:	4602      	mov	r2, r0
 80055e0:	f241 0303 	movw	r3, #4099	; 0x1003
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d817      	bhi.n	8005618 <HAL_RCC_OscConfig+0x24c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d108      	bne.n	8005602 <HAL_RCC_OscConfig+0x236>
 80055f0:	4b18      	ldr	r3, [pc, #96]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055f8:	4a16      	ldr	r2, [pc, #88]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 80055fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055fe:	6053      	str	r3, [r2, #4]
 8005600:	e030      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	031b      	lsls	r3, r3, #12
 8005610:	4910      	ldr	r1, [pc, #64]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005612:	4313      	orrs	r3, r2
 8005614:	604b      	str	r3, [r1, #4]
 8005616:	e025      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	061b      	lsls	r3, r3, #24
 8005626:	490b      	ldr	r1, [pc, #44]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]
 800562c:	e01a      	b.n	8005664 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800562e:	4b09      	ldr	r3, [pc, #36]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a08      	ldr	r2, [pc, #32]	; (8005654 <HAL_RCC_OscConfig+0x288>)
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fc f905 	bl	8001848 <HAL_GetTick>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005642:	f7fc f901 	bl	8001848 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d903      	bls.n	8005658 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e2c4      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
 8005654:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005658:	4ba4      	ldr	r3, [pc, #656]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ee      	bne.n	8005642 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80a9 	beq.w	80057c4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005672:	4b9e      	ldr	r3, [pc, #632]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800567c:	4b9b      	ldr	r3, [pc, #620]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b08      	cmp	r3, #8
 8005686:	d007      	beq.n	8005698 <HAL_RCC_OscConfig+0x2cc>
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b18      	cmp	r3, #24
 800568c:	d13a      	bne.n	8005704 <HAL_RCC_OscConfig+0x338>
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d135      	bne.n	8005704 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005698:	4b94      	ldr	r3, [pc, #592]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2e4>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e296      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056b0:	f7fc f8f8 	bl	80018a4 <HAL_GetREVID>
 80056b4:	4602      	mov	r2, r0
 80056b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d817      	bhi.n	80056ee <HAL_RCC_OscConfig+0x322>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d108      	bne.n	80056d8 <HAL_RCC_OscConfig+0x30c>
 80056c6:	4b89      	ldr	r3, [pc, #548]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056ce:	4a87      	ldr	r2, [pc, #540]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056d6:	e075      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056d8:	4b84      	ldr	r3, [pc, #528]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	069b      	lsls	r3, r3, #26
 80056e6:	4981      	ldr	r1, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056ec:	e06a      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056ee:	4b7f      	ldr	r3, [pc, #508]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	061b      	lsls	r3, r3, #24
 80056fc:	497b      	ldr	r1, [pc, #492]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005702:	e05f      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d042      	beq.n	8005792 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800570c:	4b77      	ldr	r3, [pc, #476]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a76      	ldr	r2, [pc, #472]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fc f896 	bl	8001848 <HAL_GetTick>
 800571c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005720:	f7fc f892 	bl	8001848 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e255      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005732:	4b6e      	ldr	r3, [pc, #440]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800573e:	f7fc f8b1 	bl	80018a4 <HAL_GetREVID>
 8005742:	4602      	mov	r2, r0
 8005744:	f241 0303 	movw	r3, #4099	; 0x1003
 8005748:	429a      	cmp	r2, r3
 800574a:	d817      	bhi.n	800577c <HAL_RCC_OscConfig+0x3b0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	2b20      	cmp	r3, #32
 8005752:	d108      	bne.n	8005766 <HAL_RCC_OscConfig+0x39a>
 8005754:	4b65      	ldr	r3, [pc, #404]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800575c:	4a63      	ldr	r2, [pc, #396]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800575e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005762:	6053      	str	r3, [r2, #4]
 8005764:	e02e      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
 8005766:	4b61      	ldr	r3, [pc, #388]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	069b      	lsls	r3, r3, #26
 8005774:	495d      	ldr	r1, [pc, #372]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005776:	4313      	orrs	r3, r2
 8005778:	604b      	str	r3, [r1, #4]
 800577a:	e023      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
 800577c:	4b5b      	ldr	r3, [pc, #364]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	4958      	ldr	r1, [pc, #352]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800578c:	4313      	orrs	r3, r2
 800578e:	60cb      	str	r3, [r1, #12]
 8005790:	e018      	b.n	80057c4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005792:	4b56      	ldr	r3, [pc, #344]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a55      	ldr	r2, [pc, #340]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc f853 	bl	8001848 <HAL_GetTick>
 80057a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057a6:	f7fc f84f 	bl	8001848 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e212      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057b8:	4b4c      	ldr	r3, [pc, #304]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f0      	bne.n	80057a6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d036      	beq.n	800583e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d019      	beq.n	800580c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d8:	4b44      	ldr	r3, [pc, #272]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80057da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057dc:	4a43      	ldr	r2, [pc, #268]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fc f830 	bl	8001848 <HAL_GetTick>
 80057e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ec:	f7fc f82c 	bl	8001848 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e1ef      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057fe:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x420>
 800580a:	e018      	b.n	800583e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580c:	4b37      	ldr	r3, [pc, #220]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800580e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005810:	4a36      	ldr	r2, [pc, #216]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fc f816 	bl	8001848 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005820:	f7fc f812 	bl	8001848 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e1d5      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005832:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d036      	beq.n	80058b8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d019      	beq.n	8005886 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a25      	ldr	r2, [pc, #148]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800585c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800585e:	f7fb fff3 	bl	8001848 <HAL_GetTick>
 8005862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005866:	f7fb ffef 	bl	8001848 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e1b2      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005878:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x49a>
 8005884:	e018      	b.n	80058b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005886:	4b19      	ldr	r3, [pc, #100]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 800588c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005890:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005892:	f7fb ffd9 	bl	8001848 <HAL_GetTick>
 8005896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800589a:	f7fb ffd5 	bl	8001848 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e198      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_RCC_OscConfig+0x520>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8085 	beq.w	80059d0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <HAL_RCC_OscConfig+0x524>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <HAL_RCC_OscConfig+0x524>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058d2:	f7fb ffb9 	bl	8001848 <HAL_GetTick>
 80058d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058d8:	e00c      	b.n	80058f4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058da:	f7fb ffb5 	bl	8001848 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b64      	cmp	r3, #100	; 0x64
 80058e6:	d905      	bls.n	80058f4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e178      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
 80058ec:	58024400 	.word	0x58024400
 80058f0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f4:	4b96      	ldr	r3, [pc, #600]	; (8005b50 <HAL_RCC_OscConfig+0x784>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0ec      	beq.n	80058da <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <HAL_RCC_OscConfig+0x54a>
 8005908:	4b92      	ldr	r3, [pc, #584]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a91      	ldr	r2, [pc, #580]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	e02d      	b.n	8005972 <HAL_RCC_OscConfig+0x5a6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0x56c>
 800591e:	4b8d      	ldr	r3, [pc, #564]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	4a8c      	ldr	r2, [pc, #560]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005924:	f023 0301 	bic.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	; 0x70
 800592a:	4b8a      	ldr	r3, [pc, #552]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	4a89      	ldr	r2, [pc, #548]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	6713      	str	r3, [r2, #112]	; 0x70
 8005936:	e01c      	b.n	8005972 <HAL_RCC_OscConfig+0x5a6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b05      	cmp	r3, #5
 800593e:	d10c      	bne.n	800595a <HAL_RCC_OscConfig+0x58e>
 8005940:	4b84      	ldr	r3, [pc, #528]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	4a83      	ldr	r2, [pc, #524]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005946:	f043 0304 	orr.w	r3, r3, #4
 800594a:	6713      	str	r3, [r2, #112]	; 0x70
 800594c:	4b81      	ldr	r3, [pc, #516]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	4a80      	ldr	r2, [pc, #512]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	6713      	str	r3, [r2, #112]	; 0x70
 8005958:	e00b      	b.n	8005972 <HAL_RCC_OscConfig+0x5a6>
 800595a:	4b7e      	ldr	r3, [pc, #504]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	4a7d      	ldr	r2, [pc, #500]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	6713      	str	r3, [r2, #112]	; 0x70
 8005966:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	4a7a      	ldr	r2, [pc, #488]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800596c:	f023 0304 	bic.w	r3, r3, #4
 8005970:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d015      	beq.n	80059a6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fb ff65 	bl	8001848 <HAL_GetTick>
 800597e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005980:	e00a      	b.n	8005998 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fb ff61 	bl	8001848 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005990:	4293      	cmp	r3, r2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e122      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005998:	4b6e      	ldr	r3, [pc, #440]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0ee      	beq.n	8005982 <HAL_RCC_OscConfig+0x5b6>
 80059a4:	e014      	b.n	80059d0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a6:	f7fb ff4f 	bl	8001848 <HAL_GetTick>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059ac:	e00a      	b.n	80059c4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fb ff4b 	bl	8001848 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e10c      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059c4:	4b63      	ldr	r3, [pc, #396]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ee      	bne.n	80059ae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8101 	beq.w	8005bdc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059da:	4b5e      	ldr	r3, [pc, #376]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e2:	2b18      	cmp	r3, #24
 80059e4:	f000 80bc 	beq.w	8005b60 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	f040 8095 	bne.w	8005b1c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f2:	4b58      	ldr	r3, [pc, #352]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a57      	ldr	r2, [pc, #348]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 80059f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fb ff23 	bl	8001848 <HAL_GetTick>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fb ff1f 	bl	8001848 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0e2      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a18:	4b4e      	ldr	r3, [pc, #312]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a24:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a28:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <HAL_RCC_OscConfig+0x78c>)
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a34:	0112      	lsls	r2, r2, #4
 8005a36:	430a      	orrs	r2, r1
 8005a38:	4946      	ldr	r1, [pc, #280]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	628b      	str	r3, [r1, #40]	; 0x28
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	025b      	lsls	r3, r3, #9
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	3b01      	subs	r3, #1
 8005a68:	061b      	lsls	r3, r3, #24
 8005a6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a6e:	4939      	ldr	r1, [pc, #228]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a74:	4b37      	ldr	r3, [pc, #220]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a36      	ldr	r2, [pc, #216]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a80:	4b34      	ldr	r3, [pc, #208]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a84:	4b35      	ldr	r3, [pc, #212]	; (8005b5c <HAL_RCC_OscConfig+0x790>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a8c:	00d2      	lsls	r2, r2, #3
 8005a8e:	4931      	ldr	r1, [pc, #196]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a94:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	f023 020c 	bic.w	r2, r3, #12
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	492c      	ldr	r1, [pc, #176]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005aa6:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f023 0202 	bic.w	r2, r3, #2
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	4928      	ldr	r1, [pc, #160]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ab8:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4a25      	ldr	r2, [pc, #148]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac4:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	4a22      	ldr	r2, [pc, #136]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005adc:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fb fea8 	bl	8001848 <HAL_GetTick>
 8005af8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fb fea4 	bl	8001848 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e067      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b0e:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x730>
 8005b1a:	e05f      	b.n	8005bdc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fb fe8e 	bl	8001848 <HAL_GetTick>
 8005b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b30:	f7fb fe8a 	bl	8001848 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e04d      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <HAL_RCC_OscConfig+0x788>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0x764>
 8005b4e:	e045      	b.n	8005bdc <HAL_RCC_OscConfig+0x810>
 8005b50:	58024800 	.word	0x58024800
 8005b54:	58024400 	.word	0x58024400
 8005b58:	fffffc0c 	.word	0xfffffc0c
 8005b5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b60:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <HAL_RCC_OscConfig+0x81c>)
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <HAL_RCC_OscConfig+0x81c>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d031      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f003 0203 	and.w	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d12a      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d122      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d11a      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	0a5b      	lsrs	r3, r3, #9
 8005ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d111      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d108      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	0e1b      	lsrs	r3, r3, #24
 8005bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3730      	adds	r7, #48	; 0x30
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	58024400 	.word	0x58024400

08005bec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e19c      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c00:	4b8a      	ldr	r3, [pc, #552]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d910      	bls.n	8005c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b87      	ldr	r3, [pc, #540]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 020f 	bic.w	r2, r3, #15
 8005c16:	4985      	ldr	r1, [pc, #532]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1e:	4b83      	ldr	r3, [pc, #524]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e184      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d010      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	4b7b      	ldr	r3, [pc, #492]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d908      	bls.n	8005c5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c4c:	4b78      	ldr	r3, [pc, #480]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	4975      	ldr	r1, [pc, #468]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d010      	beq.n	8005c8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	4b70      	ldr	r3, [pc, #448]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d908      	bls.n	8005c8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c7a:	4b6d      	ldr	r3, [pc, #436]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	496a      	ldr	r1, [pc, #424]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d010      	beq.n	8005cba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	4b64      	ldr	r3, [pc, #400]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d908      	bls.n	8005cba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ca8:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	495e      	ldr	r1, [pc, #376]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d010      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d908      	bls.n	8005ce8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005cd6:	4b56      	ldr	r3, [pc, #344]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4953      	ldr	r1, [pc, #332]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d010      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	4b4d      	ldr	r3, [pc, #308]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d908      	bls.n	8005d16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d04:	4b4a      	ldr	r3, [pc, #296]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f023 020f 	bic.w	r2, r3, #15
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	4947      	ldr	r1, [pc, #284]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d055      	beq.n	8005dce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d22:	4b43      	ldr	r3, [pc, #268]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	4940      	ldr	r1, [pc, #256]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d107      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d3c:	4b3c      	ldr	r3, [pc, #240]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d121      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0f6      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d107      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d54:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d115      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0ea      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d6c:	4b30      	ldr	r3, [pc, #192]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d109      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0de      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d7c:	4b2c      	ldr	r3, [pc, #176]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0d6      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d8c:	4b28      	ldr	r3, [pc, #160]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f023 0207 	bic.w	r2, r3, #7
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4925      	ldr	r1, [pc, #148]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9e:	f7fb fd53 	bl	8001848 <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da6:	f7fb fd4f 	bl	8001848 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e0be      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbc:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d1eb      	bne.n	8005da6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d208      	bcs.n	8005dfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f023 020f 	bic.w	r2, r3, #15
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	490e      	ldr	r1, [pc, #56]	; (8005e30 <HAL_RCC_ClockConfig+0x244>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d214      	bcs.n	8005e34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 020f 	bic.w	r2, r3, #15
 8005e12:	4906      	ldr	r1, [pc, #24]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <HAL_RCC_ClockConfig+0x240>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d005      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e086      	b.n	8005f3a <HAL_RCC_ClockConfig+0x34e>
 8005e2c:	52002000 	.word	0x52002000
 8005e30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	4b3f      	ldr	r3, [pc, #252]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d208      	bcs.n	8005e62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e50:	4b3c      	ldr	r3, [pc, #240]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	4939      	ldr	r1, [pc, #228]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d010      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d208      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e7e:	4b31      	ldr	r3, [pc, #196]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	492e      	ldr	r1, [pc, #184]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	4b28      	ldr	r3, [pc, #160]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d208      	bcs.n	8005ebe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	4922      	ldr	r1, [pc, #136]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d010      	beq.n	8005eec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69da      	ldr	r2, [r3, #28]
 8005ece:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d208      	bcs.n	8005eec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	4917      	ldr	r1, [pc, #92]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005eec:	f000 f834 	bl	8005f58 <HAL_RCC_GetSysClockFreq>
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	f003 030f 	and.w	r3, r3, #15
 8005efc:	4a12      	ldr	r2, [pc, #72]	; (8005f48 <HAL_RCC_ClockConfig+0x35c>)
 8005efe:	5cd3      	ldrb	r3, [r2, r3]
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	fa21 f303 	lsr.w	r3, r1, r3
 8005f08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <HAL_RCC_ClockConfig+0x358>)
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	4a0d      	ldr	r2, [pc, #52]	; (8005f48 <HAL_RCC_ClockConfig+0x35c>)
 8005f14:	5cd3      	ldrb	r3, [r2, r3]
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <HAL_RCC_ClockConfig+0x360>)
 8005f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f24:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x364>)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <HAL_RCC_ClockConfig+0x368>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fb fc40 	bl	80017b4 <HAL_InitTick>
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	58024400 	.word	0x58024400
 8005f48:	080138e0 	.word	0x080138e0
 8005f4c:	24000004 	.word	0x24000004
 8005f50:	24000000 	.word	0x24000000
 8005f54:	24000008 	.word	0x24000008

08005f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b089      	sub	sp, #36	; 0x24
 8005f5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f5e:	4baf      	ldr	r3, [pc, #700]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f66:	2b18      	cmp	r3, #24
 8005f68:	f200 814e 	bhi.w	8006208 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005f6c:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	08005fd9 	.word	0x08005fd9
 8005f78:	08006209 	.word	0x08006209
 8005f7c:	08006209 	.word	0x08006209
 8005f80:	08006209 	.word	0x08006209
 8005f84:	08006209 	.word	0x08006209
 8005f88:	08006209 	.word	0x08006209
 8005f8c:	08006209 	.word	0x08006209
 8005f90:	08006209 	.word	0x08006209
 8005f94:	08005fff 	.word	0x08005fff
 8005f98:	08006209 	.word	0x08006209
 8005f9c:	08006209 	.word	0x08006209
 8005fa0:	08006209 	.word	0x08006209
 8005fa4:	08006209 	.word	0x08006209
 8005fa8:	08006209 	.word	0x08006209
 8005fac:	08006209 	.word	0x08006209
 8005fb0:	08006209 	.word	0x08006209
 8005fb4:	08006005 	.word	0x08006005
 8005fb8:	08006209 	.word	0x08006209
 8005fbc:	08006209 	.word	0x08006209
 8005fc0:	08006209 	.word	0x08006209
 8005fc4:	08006209 	.word	0x08006209
 8005fc8:	08006209 	.word	0x08006209
 8005fcc:	08006209 	.word	0x08006209
 8005fd0:	08006209 	.word	0x08006209
 8005fd4:	0800600b 	.word	0x0800600b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd8:	4b90      	ldr	r3, [pc, #576]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d009      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fe4:	4b8d      	ldr	r3, [pc, #564]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	08db      	lsrs	r3, r3, #3
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	4a8c      	ldr	r2, [pc, #560]	; (8006220 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ff6:	e10a      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ff8:	4b89      	ldr	r3, [pc, #548]	; (8006220 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005ffa:	61bb      	str	r3, [r7, #24]
    break;
 8005ffc:	e107      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ffe:	4b89      	ldr	r3, [pc, #548]	; (8006224 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006000:	61bb      	str	r3, [r7, #24]
    break;
 8006002:	e104      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006004:	4b88      	ldr	r3, [pc, #544]	; (8006228 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006006:	61bb      	str	r3, [r7, #24]
    break;
 8006008:	e101      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800600a:	4b84      	ldr	r3, [pc, #528]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006014:	4b81      	ldr	r3, [pc, #516]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800601e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006020:	4b7e      	ldr	r3, [pc, #504]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800602a:	4b7c      	ldr	r3, [pc, #496]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	08db      	lsrs	r3, r3, #3
 8006030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006042:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80da 	beq.w	8006202 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d05a      	beq.n	800610a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006054:	2b01      	cmp	r3, #1
 8006056:	d302      	bcc.n	800605e <HAL_RCC_GetSysClockFreq+0x106>
 8006058:	2b02      	cmp	r3, #2
 800605a:	d078      	beq.n	800614e <HAL_RCC_GetSysClockFreq+0x1f6>
 800605c:	e099      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800605e:	4b6f      	ldr	r3, [pc, #444]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d02d      	beq.n	80060c6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800606a:	4b6c      	ldr	r3, [pc, #432]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	08db      	lsrs	r3, r3, #3
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	4a6a      	ldr	r2, [pc, #424]	; (8006220 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006076:	fa22 f303 	lsr.w	r3, r2, r3
 800607a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006094:	4b61      	ldr	r3, [pc, #388]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800622c <HAL_RCC_GetSysClockFreq+0x2d4>
 80060ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80060c4:	e087      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006230 <HAL_RCC_GetSysClockFreq+0x2d8>
 80060d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d8:	4b50      	ldr	r3, [pc, #320]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80060ec:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800622c <HAL_RCC_GetSysClockFreq+0x2d4>
 80060f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006108:	e065      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	ee07 3a90 	vmov	s15, r3
 8006110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006114:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006234 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611c:	4b3f      	ldr	r3, [pc, #252]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006124:	ee07 3a90 	vmov	s15, r3
 8006128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006130:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800622c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800614c:	e043      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006158:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006238 <HAL_RCC_GetSysClockFreq+0x2e0>
 800615c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006160:	4b2e      	ldr	r3, [pc, #184]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006170:	ed97 6a02 	vldr	s12, [r7, #8]
 8006174:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800622c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006190:	e021      	b.n	80061d6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006234 <HAL_RCC_GetSysClockFreq+0x2dc>
 80061a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a4:	4b1d      	ldr	r3, [pc, #116]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80061b8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800622c <HAL_RCC_GetSysClockFreq+0x2d4>
 80061bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061d4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	0a5b      	lsrs	r3, r3, #9
 80061dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e0:	3301      	adds	r3, #1
 80061e2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fa:	ee17 3a90 	vmov	r3, s15
 80061fe:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006200:	e005      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	61bb      	str	r3, [r7, #24]
    break;
 8006206:	e002      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800620a:	61bb      	str	r3, [r7, #24]
    break;
 800620c:	bf00      	nop
  }

  return sysclockfreq;
 800620e:	69bb      	ldr	r3, [r7, #24]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3724      	adds	r7, #36	; 0x24
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	58024400 	.word	0x58024400
 8006220:	03d09000 	.word	0x03d09000
 8006224:	003d0900 	.word	0x003d0900
 8006228:	017d7840 	.word	0x017d7840
 800622c:	46000000 	.word	0x46000000
 8006230:	4c742400 	.word	0x4c742400
 8006234:	4a742400 	.word	0x4a742400
 8006238:	4bbebc20 	.word	0x4bbebc20

0800623c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006242:	f7ff fe89 	bl	8005f58 <HAL_RCC_GetSysClockFreq>
 8006246:	4601      	mov	r1, r0
 8006248:	4b10      	ldr	r3, [pc, #64]	; (800628c <HAL_RCC_GetHCLKFreq+0x50>)
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	0a1b      	lsrs	r3, r3, #8
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <HAL_RCC_GetHCLKFreq+0x54>)
 8006254:	5cd3      	ldrb	r3, [r2, r3]
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	fa21 f303 	lsr.w	r3, r1, r3
 800625e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <HAL_RCC_GetHCLKFreq+0x50>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <HAL_RCC_GetHCLKFreq+0x54>)
 800626a:	5cd3      	ldrb	r3, [r2, r3]
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	fa22 f303 	lsr.w	r3, r2, r3
 8006276:	4a07      	ldr	r2, [pc, #28]	; (8006294 <HAL_RCC_GetHCLKFreq+0x58>)
 8006278:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800627a:	4a07      	ldr	r2, [pc, #28]	; (8006298 <HAL_RCC_GetHCLKFreq+0x5c>)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <HAL_RCC_GetHCLKFreq+0x58>)
 8006282:	681b      	ldr	r3, [r3, #0]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	58024400 	.word	0x58024400
 8006290:	080138e0 	.word	0x080138e0
 8006294:	24000004 	.word	0x24000004
 8006298:	24000000 	.word	0x24000000

0800629c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80062a0:	f7ff ffcc 	bl	800623c <HAL_RCC_GetHCLKFreq>
 80062a4:	4601      	mov	r1, r0
 80062a6:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	091b      	lsrs	r3, r3, #4
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062b2:	5cd3      	ldrb	r3, [r2, r3]
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062bc:	4618      	mov	r0, r3
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	58024400 	.word	0x58024400
 80062c4:	080138e0 	.word	0x080138e0

080062c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062cc:	f7ff ffb6 	bl	800623c <HAL_RCC_GetHCLKFreq>
 80062d0:	4601      	mov	r1, r0
 80062d2:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062de:	5cd3      	ldrb	r3, [r2, r3]
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	58024400 	.word	0x58024400
 80062f0:	080138e0 	.word	0x080138e0

080062f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006300:	2300      	movs	r3, #0
 8006302:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d03d      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006318:	d013      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800631a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631e:	d802      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d007      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006324:	e01f      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800632a:	d013      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800632c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006330:	d01c      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006332:	e018      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006334:	4baf      	ldr	r3, [pc, #700]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	4aae      	ldr	r2, [pc, #696]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800633a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006340:	e015      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3304      	adds	r3, #4
 8006346:	2102      	movs	r1, #2
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fd33 	bl	8007db4 <RCCEx_PLL2_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006352:	e00c      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3324      	adds	r3, #36	; 0x24
 8006358:	2102      	movs	r1, #2
 800635a:	4618      	mov	r0, r3
 800635c:	f001 fddc 	bl	8007f18 <RCCEx_PLL3_Config>
 8006360:	4603      	mov	r3, r0
 8006362:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006364:	e003      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
      break;
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800636c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006374:	4b9f      	ldr	r3, [pc, #636]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006380:	499c      	ldr	r1, [pc, #624]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006382:	4313      	orrs	r3, r2
 8006384:	650b      	str	r3, [r1, #80]	; 0x50
 8006386:	e001      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
 800638a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d03d      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	2b04      	cmp	r3, #4
 800639e:	d826      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80063a0:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063bd 	.word	0x080063bd
 80063ac:	080063cb 	.word	0x080063cb
 80063b0:	080063dd 	.word	0x080063dd
 80063b4:	080063f5 	.word	0x080063f5
 80063b8:	080063f5 	.word	0x080063f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063bc:	4b8d      	ldr	r3, [pc, #564]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	4a8c      	ldr	r2, [pc, #560]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c8:	e015      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3304      	adds	r3, #4
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 fcef 	bl	8007db4 <RCCEx_PLL2_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063da:	e00c      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3324      	adds	r3, #36	; 0x24
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fd98 	bl	8007f18 <RCCEx_PLL3_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063ec:	e003      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	75fb      	strb	r3, [r7, #23]
      break;
 80063f2:	e000      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80063f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063fc:	4b7d      	ldr	r3, [pc, #500]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006400:	f023 0207 	bic.w	r2, r3, #7
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	497a      	ldr	r1, [pc, #488]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800640a:	4313      	orrs	r3, r2
 800640c:	650b      	str	r3, [r1, #80]	; 0x50
 800640e:	e001      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641c:	2b00      	cmp	r3, #0
 800641e:	d03e      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d01c      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d804      	bhi.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d00d      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006434:	e01e      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006436:	2bc0      	cmp	r3, #192	; 0xc0
 8006438:	d01f      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800643a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643e:	d01e      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006440:	e018      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006442:	4b6c      	ldr	r3, [pc, #432]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	4a6b      	ldr	r2, [pc, #428]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800644c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800644e:	e017      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f001 fcac 	bl	8007db4 <RCCEx_PLL2_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006460:	e00e      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3324      	adds	r3, #36	; 0x24
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fd55 	bl	8007f18 <RCCEx_PLL3_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006472:	e005      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
      break;
 8006478:	e002      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800647e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006480:	7dfb      	ldrb	r3, [r7, #23]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006486:	4b5b      	ldr	r3, [pc, #364]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006492:	4958      	ldr	r1, [pc, #352]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006494:	4313      	orrs	r3, r2
 8006496:	650b      	str	r3, [r1, #80]	; 0x50
 8006498:	e001      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649a:	7dfb      	ldrb	r3, [r7, #23]
 800649c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d044      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064b4:	d01f      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80064b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ba:	d805      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064c4:	d00e      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80064c6:	e01f      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80064c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064cc:	d01f      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80064ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064d2:	d01e      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064d4:	e018      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d6:	4b47      	ldr	r3, [pc, #284]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	4a46      	ldr	r2, [pc, #280]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064e2:	e017      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 fc62 	bl	8007db4 <RCCEx_PLL2_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064f4:	e00e      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3324      	adds	r3, #36	; 0x24
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 fd0b 	bl	8007f18 <RCCEx_PLL3_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006506:	e005      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
      break;
 800650c:	e002      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800650e:	bf00      	nop
 8006510:	e000      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800651a:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006528:	4932      	ldr	r1, [pc, #200]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800652a:	4313      	orrs	r3, r2
 800652c:	658b      	str	r3, [r1, #88]	; 0x58
 800652e:	e001      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653c:	2b00      	cmp	r3, #0
 800653e:	d044      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800654a:	d01f      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800654c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006550:	d805      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006556:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800655a:	d00e      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800655c:	e01f      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800655e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006562:	d01f      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006568:	d01e      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800656a:	e018      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656c:	4b21      	ldr	r3, [pc, #132]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006578:	e017      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3304      	adds	r3, #4
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fc17 	bl	8007db4 <RCCEx_PLL2_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800658a:	e00e      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3324      	adds	r3, #36	; 0x24
 8006590:	2100      	movs	r1, #0
 8006592:	4618      	mov	r0, r3
 8006594:	f001 fcc0 	bl	8007f18 <RCCEx_PLL3_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800659c:	e005      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	75fb      	strb	r3, [r7, #23]
      break;
 80065a2:	e002      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80065a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065b0:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065be:	490d      	ldr	r1, [pc, #52]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	658b      	str	r3, [r1, #88]	; 0x58
 80065c4:	e001      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
 80065c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d035      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d00c      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80065de:	2b10      	cmp	r3, #16
 80065e0:	d802      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01b      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80065e6:	e017      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d00c      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	d018      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80065f0:	e012      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065f2:	bf00      	nop
 80065f4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f8:	4baf      	ldr	r3, [pc, #700]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4aae      	ldr	r2, [pc, #696]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006604:	e00e      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3304      	adds	r3, #4
 800660a:	2102      	movs	r1, #2
 800660c:	4618      	mov	r0, r3
 800660e:	f001 fbd1 	bl	8007db4 <RCCEx_PLL2_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006616:	e005      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
      break;
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800662a:	4ba3      	ldr	r3, [pc, #652]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800662c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006636:	49a0      	ldr	r1, [pc, #640]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006638:	4313      	orrs	r3, r2
 800663a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800663c:	e001      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d042      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006656:	d01f      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665c:	d805      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006666:	d00e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006668:	e01f      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800666a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800666e:	d01f      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006674:	d01e      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006676:	e018      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4b8f      	ldr	r3, [pc, #572]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a8e      	ldr	r2, [pc, #568]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006684:	e017      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	2100      	movs	r1, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f001 fb91 	bl	8007db4 <RCCEx_PLL2_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006696:	e00e      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3324      	adds	r3, #36	; 0x24
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fc3a 	bl	8007f18 <RCCEx_PLL3_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066a8:	e005      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]
      break;
 80066ae:	e002      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066b0:	bf00      	nop
 80066b2:	e000      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d109      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066bc:	4b7e      	ldr	r3, [pc, #504]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c8:	497b      	ldr	r1, [pc, #492]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	650b      	str	r3, [r1, #80]	; 0x50
 80066ce:	e001      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d042      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e8:	d01b      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ee:	d805      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d022      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f8:	d00a      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80066fa:	e01b      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80066fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006700:	d01d      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006706:	d01c      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800670c:	d01b      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800670e:	e011      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	2101      	movs	r1, #1
 8006716:	4618      	mov	r0, r3
 8006718:	f001 fb4c 	bl	8007db4 <RCCEx_PLL2_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006720:	e012      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3324      	adds	r3, #36	; 0x24
 8006726:	2101      	movs	r1, #1
 8006728:	4618      	mov	r0, r3
 800672a:	f001 fbf5 	bl	8007f18 <RCCEx_PLL3_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006732:	e009      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
      break;
 8006738:	e006      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800673a:	bf00      	nop
 800673c:	e004      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800673e:	bf00      	nop
 8006740:	e002      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800674e:	4b5a      	ldr	r3, [pc, #360]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675a:	4957      	ldr	r1, [pc, #348]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800675c:	4313      	orrs	r3, r2
 800675e:	650b      	str	r3, [r1, #80]	; 0x50
 8006760:	e001      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d044      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677c:	d01b      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800677e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006782:	d805      	bhi.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d022      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800678e:	e01b      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006794:	d01d      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800679a:	d01c      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800679c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067a0:	d01b      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80067a2:	e011      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fb02 	bl	8007db4 <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067b4:	e012      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	2101      	movs	r1, #1
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fbab 	bl	8007f18 <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067c6:	e009      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	e006      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067e2:	4b35      	ldr	r3, [pc, #212]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067f0:	4931      	ldr	r1, [pc, #196]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	658b      	str	r3, [r1, #88]	; 0x58
 80067f6:	e001      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02d      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006810:	d005      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006816:	d009      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d013      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800681c:	e00f      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681e:	4b26      	ldr	r3, [pc, #152]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	4a25      	ldr	r2, [pc, #148]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006828:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800682a:	e00c      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	2101      	movs	r1, #1
 8006832:	4618      	mov	r0, r3
 8006834:	f001 fabe 	bl	8007db4 <RCCEx_PLL2_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800683c:	e003      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
      break;
 8006842:	e000      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d109      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800684c:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006858:	4917      	ldr	r1, [pc, #92]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800685a:	4313      	orrs	r3, r2
 800685c:	650b      	str	r3, [r1, #80]	; 0x50
 800685e:	e001      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d035      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	2b03      	cmp	r3, #3
 8006876:	d81b      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068bd 	.word	0x080068bd
 8006884:	08006891 	.word	0x08006891
 8006888:	0800689f 	.word	0x0800689f
 800688c:	080068bd 	.word	0x080068bd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006890:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800689a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800689c:	e00f      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3304      	adds	r3, #4
 80068a2:	2102      	movs	r1, #2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fa85 	bl	8007db4 <RCCEx_PLL2_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068ae:	e006      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
      break;
 80068b4:	e003      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80068b6:	bf00      	nop
 80068b8:	58024400 	.word	0x58024400
      break;
 80068bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068c4:	4bba      	ldr	r3, [pc, #744]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c8:	f023 0203 	bic.w	r2, r3, #3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d0:	49b7      	ldr	r1, [pc, #732]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068d6:	e001      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8086 	beq.w	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ea:	4bb2      	ldr	r3, [pc, #712]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4ab1      	ldr	r2, [pc, #708]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068f6:	f7fa ffa7 	bl	8001848 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068fc:	e009      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068fe:	f7fa ffa3 	bl	8001848 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b64      	cmp	r3, #100	; 0x64
 800690a:	d902      	bls.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	75fb      	strb	r3, [r7, #23]
        break;
 8006910:	e005      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006912:	4ba8      	ldr	r3, [pc, #672]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0ef      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d166      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006924:	4ba2      	ldr	r3, [pc, #648]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800692e:	4053      	eors	r3, r2
 8006930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006934:	2b00      	cmp	r3, #0
 8006936:	d013      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006938:	4b9d      	ldr	r3, [pc, #628]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006940:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006942:	4b9b      	ldr	r3, [pc, #620]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4a9a      	ldr	r2, [pc, #616]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800694e:	4b98      	ldr	r3, [pc, #608]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a97      	ldr	r2, [pc, #604]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006958:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800695a:	4a95      	ldr	r2, [pc, #596]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696a:	d115      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fa ff6c 	bl	8001848 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006972:	e00b      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006974:	f7fa ff68 	bl	8001848 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d902      	bls.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	75fb      	strb	r3, [r7, #23]
            break;
 800698a:	e005      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800698c:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ed      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d126      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ac:	d10d      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80069ae:	4b80      	ldr	r3, [pc, #512]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069bc:	0919      	lsrs	r1, r3, #4
 80069be:	4b7e      	ldr	r3, [pc, #504]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80069c0:	400b      	ands	r3, r1
 80069c2:	497b      	ldr	r1, [pc, #492]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	610b      	str	r3, [r1, #16]
 80069c8:	e005      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80069ca:	4b79      	ldr	r3, [pc, #484]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	4a78      	ldr	r2, [pc, #480]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069d4:	6113      	str	r3, [r2, #16]
 80069d6:	4b76      	ldr	r3, [pc, #472]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e4:	4972      	ldr	r1, [pc, #456]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	670b      	str	r3, [r1, #112]	; 0x70
 80069ea:	e004      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	75bb      	strb	r3, [r7, #22]
 80069f0:	e001      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d07d      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a06:	2b28      	cmp	r3, #40	; 0x28
 8006a08:	d866      	bhi.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006a0a:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006adf 	.word	0x08006adf
 8006a14:	08006ad9 	.word	0x08006ad9
 8006a18:	08006ad9 	.word	0x08006ad9
 8006a1c:	08006ad9 	.word	0x08006ad9
 8006a20:	08006ad9 	.word	0x08006ad9
 8006a24:	08006ad9 	.word	0x08006ad9
 8006a28:	08006ad9 	.word	0x08006ad9
 8006a2c:	08006ad9 	.word	0x08006ad9
 8006a30:	08006ab5 	.word	0x08006ab5
 8006a34:	08006ad9 	.word	0x08006ad9
 8006a38:	08006ad9 	.word	0x08006ad9
 8006a3c:	08006ad9 	.word	0x08006ad9
 8006a40:	08006ad9 	.word	0x08006ad9
 8006a44:	08006ad9 	.word	0x08006ad9
 8006a48:	08006ad9 	.word	0x08006ad9
 8006a4c:	08006ad9 	.word	0x08006ad9
 8006a50:	08006ac7 	.word	0x08006ac7
 8006a54:	08006ad9 	.word	0x08006ad9
 8006a58:	08006ad9 	.word	0x08006ad9
 8006a5c:	08006ad9 	.word	0x08006ad9
 8006a60:	08006ad9 	.word	0x08006ad9
 8006a64:	08006ad9 	.word	0x08006ad9
 8006a68:	08006ad9 	.word	0x08006ad9
 8006a6c:	08006ad9 	.word	0x08006ad9
 8006a70:	08006adf 	.word	0x08006adf
 8006a74:	08006ad9 	.word	0x08006ad9
 8006a78:	08006ad9 	.word	0x08006ad9
 8006a7c:	08006ad9 	.word	0x08006ad9
 8006a80:	08006ad9 	.word	0x08006ad9
 8006a84:	08006ad9 	.word	0x08006ad9
 8006a88:	08006ad9 	.word	0x08006ad9
 8006a8c:	08006ad9 	.word	0x08006ad9
 8006a90:	08006adf 	.word	0x08006adf
 8006a94:	08006ad9 	.word	0x08006ad9
 8006a98:	08006ad9 	.word	0x08006ad9
 8006a9c:	08006ad9 	.word	0x08006ad9
 8006aa0:	08006ad9 	.word	0x08006ad9
 8006aa4:	08006ad9 	.word	0x08006ad9
 8006aa8:	08006ad9 	.word	0x08006ad9
 8006aac:	08006ad9 	.word	0x08006ad9
 8006ab0:	08006adf 	.word	0x08006adf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	2101      	movs	r1, #1
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 f97a 	bl	8007db4 <RCCEx_PLL2_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ac4:	e00c      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3324      	adds	r3, #36	; 0x24
 8006aca:	2101      	movs	r1, #1
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 fa23 	bl	8007f18 <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ad6:	e003      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]
      break;
 8006adc:	e000      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006ade:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ae6:	4b32      	ldr	r3, [pc, #200]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006af2:	492f      	ldr	r1, [pc, #188]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	654b      	str	r3, [r1, #84]	; 0x54
 8006af8:	e001      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d037      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	d820      	bhi.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b5b 	.word	0x08006b5b
 8006b1c:	08006b31 	.word	0x08006b31
 8006b20:	08006b43 	.word	0x08006b43
 8006b24:	08006b5b 	.word	0x08006b5b
 8006b28:	08006b5b 	.word	0x08006b5b
 8006b2c:	08006b5b 	.word	0x08006b5b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3304      	adds	r3, #4
 8006b34:	2101      	movs	r1, #1
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 f93c 	bl	8007db4 <RCCEx_PLL2_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b40:	e00c      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3324      	adds	r3, #36	; 0x24
 8006b46:	2101      	movs	r1, #1
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 f9e5 	bl	8007f18 <RCCEx_PLL3_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b52:	e003      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
      break;
 8006b58:	e000      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b66:	f023 0207 	bic.w	r2, r3, #7
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6e:	4910      	ldr	r1, [pc, #64]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	654b      	str	r3, [r1, #84]	; 0x54
 8006b74:	e001      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
 8006b78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d040      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8c:	2b05      	cmp	r3, #5
 8006b8e:	d827      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006b90:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b96:	bf00      	nop
 8006b98:	08006be7 	.word	0x08006be7
 8006b9c:	08006bbd 	.word	0x08006bbd
 8006ba0:	08006bcf 	.word	0x08006bcf
 8006ba4:	08006be7 	.word	0x08006be7
 8006ba8:	08006be7 	.word	0x08006be7
 8006bac:	08006be7 	.word	0x08006be7
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	58024800 	.word	0x58024800
 8006bb8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f001 f8f6 	bl	8007db4 <RCCEx_PLL2_Config>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bcc:	e00c      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3324      	adds	r3, #36	; 0x24
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f99f 	bl	8007f18 <RCCEx_PLL3_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	e000      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bee:	4bb2      	ldr	r3, [pc, #712]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	f023 0207 	bic.w	r2, r3, #7
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	49ae      	ldr	r1, [pc, #696]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	658b      	str	r3, [r1, #88]	; 0x58
 8006c02:	e001      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d044      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c1e:	d01b      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c24:	d805      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d022      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c2e:	d00a      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006c30:	e01b      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c36:	d01d      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c3c:	d01c      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006c3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c42:	d01b      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006c44:	e011      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 f8b1 	bl	8007db4 <RCCEx_PLL2_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c56:	e012      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3324      	adds	r3, #36	; 0x24
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 f95a 	bl	8007f18 <RCCEx_PLL3_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c68:	e009      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6e:	e006      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c70:	bf00      	nop
 8006c72:	e004      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c74:	bf00      	nop
 8006c76:	e002      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c84:	4b8c      	ldr	r3, [pc, #560]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c88:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c92:	4989      	ldr	r1, [pc, #548]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	654b      	str	r3, [r1, #84]	; 0x54
 8006c98:	e001      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d044      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb4:	d01b      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cba:	d805      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d022      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc4:	d00a      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006cc6:	e01b      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ccc:	d01d      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006cce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cd2:	d01c      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cd8:	d01b      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006cda:	e011      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 f866 	bl	8007db4 <RCCEx_PLL2_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cec:	e012      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3324      	adds	r3, #36	; 0x24
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 f90f 	bl	8007f18 <RCCEx_PLL3_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cfe:	e009      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
      break;
 8006d04:	e006      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d06:	bf00      	nop
 8006d08:	e004      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d1a:	4b67      	ldr	r3, [pc, #412]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d28:	4963      	ldr	r1, [pc, #396]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d2e:	e001      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d044      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d4a:	d01b      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d50:	d805      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d022      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5a:	d00a      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d5c:	e01b      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d62:	d01d      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d68:	d01c      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006d6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d6e:	d01b      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006d70:	e011      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3304      	adds	r3, #4
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 f81b 	bl	8007db4 <RCCEx_PLL2_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d82:	e012      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	2102      	movs	r1, #2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f8c4 	bl	8007f18 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d94:	e009      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9a:	e006      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d9c:	bf00      	nop
 8006d9e:	e004      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006da0:	bf00      	nop
 8006da2:	e002      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006da4:	bf00      	nop
 8006da6:	e000      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dbe:	493e      	ldr	r1, [pc, #248]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	658b      	str	r3, [r1, #88]	; 0x58
 8006dc4:	e001      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01a      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de0:	d10a      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3324      	adds	r3, #36	; 0x24
 8006de6:	2102      	movs	r1, #2
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 f895 	bl	8007f18 <RCCEx_PLL3_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006df8:	4b2f      	ldr	r3, [pc, #188]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e06:	492c      	ldr	r1, [pc, #176]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01a      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e22:	d10a      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3324      	adds	r3, #36	; 0x24
 8006e28:	2102      	movs	r1, #2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 f874 	bl	8007f18 <RCCEx_PLL3_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e3a:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e48:	491b      	ldr	r1, [pc, #108]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d032      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e64:	d00d      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e6a:	d016      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d111      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3304      	adds	r3, #4
 8006e74:	2100      	movs	r1, #0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 ff9c 	bl	8007db4 <RCCEx_PLL2_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e80:	e00c      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3324      	adds	r3, #36	; 0x24
 8006e86:	2102      	movs	r1, #2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 f845 	bl	8007f18 <RCCEx_PLL3_Config>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e92:	e003      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	75fb      	strb	r3, [r7, #23]
      break;
 8006e98:	e000      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10c      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ea2:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eb0:	4901      	ldr	r1, [pc, #4]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	658b      	str	r3, [r1, #88]	; 0x58
 8006eb6:	e003      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d02f      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006ed8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006edc:	d015      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee2:	d10f      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee4:	4b79      	ldr	r3, [pc, #484]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	4a78      	ldr	r2, [pc, #480]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ef0:	e00c      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3324      	adds	r3, #36	; 0x24
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 f80d 	bl	8007f18 <RCCEx_PLL3_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f02:	e003      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	75fb      	strb	r3, [r7, #23]
      break;
 8006f08:	e000      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f12:	4b6e      	ldr	r3, [pc, #440]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f20:	496a      	ldr	r1, [pc, #424]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	654b      	str	r3, [r1, #84]	; 0x54
 8006f26:	e001      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d029      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f44:	d007      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006f46:	e00f      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f48:	4b60      	ldr	r3, [pc, #384]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4a5f      	ldr	r2, [pc, #380]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f54:	e00b      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 ff29 	bl	8007db4 <RCCEx_PLL2_Config>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f66:	e002      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f74:	4b55      	ldr	r3, [pc, #340]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f80:	4952      	ldr	r1, [pc, #328]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f86:	e001      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3324      	adds	r3, #36	; 0x24
 8006f9c:	2102      	movs	r1, #2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 ffba 	bl	8007f18 <RCCEx_PLL3_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d02f      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc2:	d00c      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc8:	d802      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d011      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006fce:	e00d      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd4:	d00f      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fda:	d00e      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006fdc:	e006      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fde:	4b3b      	ldr	r3, [pc, #236]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe2:	4a3a      	ldr	r2, [pc, #232]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006fea:	e007      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff0:	e004      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006ff2:	bf00      	nop
 8006ff4:	e002      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006ff6:	bf00      	nop
 8006ff8:	e000      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007002:	4b32      	ldr	r3, [pc, #200]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800700e:	492f      	ldr	r1, [pc, #188]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007010:	4313      	orrs	r3, r2
 8007012:	654b      	str	r3, [r1, #84]	; 0x54
 8007014:	e001      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d008      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007026:	4b29      	ldr	r3, [pc, #164]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	4926      	ldr	r1, [pc, #152]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007034:	4313      	orrs	r3, r2
 8007036:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d009      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007044:	4b21      	ldr	r3, [pc, #132]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007052:	491e      	ldr	r1, [pc, #120]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007054:	4313      	orrs	r3, r2
 8007056:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007064:	4b19      	ldr	r3, [pc, #100]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007068:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007070:	4916      	ldr	r1, [pc, #88]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007072:	4313      	orrs	r3, r2
 8007074:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	4a11      	ldr	r2, [pc, #68]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800708c:	6113      	str	r3, [r2, #16]
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007098:	490c      	ldr	r1, [pc, #48]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800709a:	4313      	orrs	r3, r2
 800709c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da08      	bge.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80070a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b2:	4906      	ldr	r1, [pc, #24]	; (80070cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80070b8:	7dbb      	ldrb	r3, [r7, #22]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e000      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	58024400 	.word	0x58024400

080070d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b090      	sub	sp, #64	; 0x40
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070de:	d150      	bne.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80070e0:	4ba1      	ldr	r3, [pc, #644]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d844      	bhi.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80070f0:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	0800710d 	.word	0x0800710d
 80070fc:	0800711d 	.word	0x0800711d
 8007100:	0800712d 	.word	0x0800712d
 8007104:	08007175 	.word	0x08007175
 8007108:	0800713d 	.word	0x0800713d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800710c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fd03 	bl	8007b1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711a:	e241      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800711c:	f107 0318 	add.w	r3, r7, #24
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fa63 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712a:	e239      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800712c:	f107 030c 	add.w	r3, r7, #12
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fba7 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713a:	e231      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800713c:	4b8a      	ldr	r3, [pc, #552]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800713e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007144:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800714c:	4b87      	ldr	r3, [pc, #540]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007150:	e226      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007158:	d102      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800715a:	4b85      	ldr	r3, [pc, #532]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715e:	e21f      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007166:	d102      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007168:	4b82      	ldr	r3, [pc, #520]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800716c:	e218      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007172:	e215      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007174:	4b80      	ldr	r3, [pc, #512]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007178:	e212      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800717e:	bf00      	nop
 8007180:	e20e      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007188:	d14f      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800718a:	4b77      	ldr	r3, [pc, #476]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007192:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2b80      	cmp	r3, #128	; 0x80
 8007198:	d01c      	beq.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800719a:	2b80      	cmp	r3, #128	; 0x80
 800719c:	d804      	bhi.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d00e      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80071a6:	e03c      	b.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80071a8:	2bc0      	cmp	r3, #192	; 0xc0
 80071aa:	d037      	beq.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80071ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b0:	d018      	beq.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80071b2:	e036      	b.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fcaf 	bl	8007b1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c2:	e1ed      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071c4:	f107 0318 	add.w	r3, r7, #24
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fa0f 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d2:	e1e5      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fb53 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e2:	e1dd      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071e4:	4b60      	ldr	r3, [pc, #384]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071f4:	4b5d      	ldr	r3, [pc, #372]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071f8:	e1d2      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007200:	d102      	bne.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007202:	4b5b      	ldr	r3, [pc, #364]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007206:	e1cb      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800720e:	d102      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007210:	4b58      	ldr	r3, [pc, #352]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007214:	e1c4      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800721a:	e1c1      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800721c:	4b56      	ldr	r3, [pc, #344]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007220:	e1be      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007226:	bf00      	nop
 8007228:	e1ba      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007230:	d153      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007232:	4b4d      	ldr	r3, [pc, #308]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007236:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800723a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007242:	d01f      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007248:	d805      	bhi.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800724e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007252:	d00f      	beq.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007254:	e03d      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007256:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800725a:	d037      	beq.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800725c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007260:	d018      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007262:	e036      	b.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fc57 	bl	8007b1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007272:	e195      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007274:	f107 0318 	add.w	r3, r7, #24
 8007278:	4618      	mov	r0, r3
 800727a:	f000 f9b7 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007282:	e18d      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007284:	f107 030c 	add.w	r3, r7, #12
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fafb 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007292:	e185      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007294:	4b34      	ldr	r3, [pc, #208]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007298:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800729c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800729e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d102      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80072a4:	4b31      	ldr	r3, [pc, #196]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80072a8:	e17a      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b0:	d102      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80072b2:	4b2f      	ldr	r3, [pc, #188]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b6:	e173      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072be:	d102      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80072c0:	4b2c      	ldr	r3, [pc, #176]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c4:	e16c      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ca:	e169      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072cc:	4b2a      	ldr	r3, [pc, #168]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80072ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d0:	e166      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d6:	bf00      	nop
 80072d8:	e162      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e0:	d15d      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80072e2:	4b21      	ldr	r3, [pc, #132]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80072ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072f2:	d01f      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80072f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072f8:	d805      	bhi.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80072fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007302:	d00f      	beq.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007304:	e047      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007306:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800730a:	d041      	beq.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800730c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007310:	d018      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007312:	e040      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fbff 	bl	8007b1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007322:	e13d      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007324:	f107 0318 	add.w	r3, r7, #24
 8007328:	4618      	mov	r0, r3
 800732a:	f000 f95f 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007332:	e135      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007334:	f107 030c 	add.w	r3, r7, #12
 8007338:	4618      	mov	r0, r3
 800733a:	f000 faa3 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007342:	e12d      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007344:	4b08      	ldr	r3, [pc, #32]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007348:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800734c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800734e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007358:	e122      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800735a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007360:	d10c      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007362:	4b03      	ldr	r3, [pc, #12]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007366:	e11b      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007368:	58024400 	.word	0x58024400
 800736c:	03d09000 	.word	0x03d09000
 8007370:	003d0900 	.word	0x003d0900
 8007374:	017d7840 	.word	0x017d7840
 8007378:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007382:	d102      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007384:	4b89      	ldr	r3, [pc, #548]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007388:	e10a      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800738e:	e107      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007390:	4b87      	ldr	r3, [pc, #540]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007394:	e104      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800739a:	bf00      	nop
 800739c:	e100      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a4:	d153      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80073a6:	4b83      	ldr	r3, [pc, #524]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80073ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b6:	d01f      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80073b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073bc:	d805      	bhi.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c6:	d00f      	beq.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80073c8:	e03d      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80073ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073ce:	d037      	beq.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80073d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d4:	d018      	beq.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073d6:	e036      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fb9d 	bl	8007b1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e6:	e0db      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e8:	f107 0318 	add.w	r3, r7, #24
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 f8fd 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f6:	e0d3      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f8:	f107 030c 	add.w	r3, r7, #12
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 fa41 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007406:	e0cb      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007408:	4b6a      	ldr	r3, [pc, #424]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800740a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007410:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007418:	4b67      	ldr	r3, [pc, #412]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800741c:	e0c0      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007424:	d102      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007426:	4b65      	ldr	r3, [pc, #404]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800742a:	e0b9      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800742c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007432:	d102      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007434:	4b5d      	ldr	r3, [pc, #372]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007438:	e0b2      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800743e:	e0af      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007440:	4b5b      	ldr	r3, [pc, #364]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007444:	e0ac      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800744a:	bf00      	nop
 800744c:	e0a8      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007454:	d13d      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007456:	4b57      	ldr	r3, [pc, #348]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800745e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007466:	d00c      	beq.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800746c:	d011      	beq.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d12b      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007472:	f107 0318 	add.w	r3, r7, #24
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f8b8 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007480:	e08e      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007482:	f107 030c 	add.w	r3, r7, #12
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f9fc 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007490:	e086      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007492:	4b48      	ldr	r3, [pc, #288]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007496:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800749a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80074a2:	4b45      	ldr	r3, [pc, #276]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80074a6:	e07b      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ae:	d102      	bne.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80074b0:	4b42      	ldr	r3, [pc, #264]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b4:	e074      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074bc:	d102      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80074be:	4b3b      	ldr	r3, [pc, #236]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80074c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074c2:	e06d      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074c8:	e06a      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ce:	bf00      	nop
 80074d0:	e066      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d8:	d11f      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80074da:	4b36      	ldr	r3, [pc, #216]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80074dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80074ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ee:	d008      	beq.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80074f0:	e00f      	b.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fb10 	bl	8007b1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007500:	e04e      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007502:	f107 0318 	add.w	r3, r7, #24
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f870 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007510:	e046      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007516:	bf00      	nop
 8007518:	e042      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007520:	d13c      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007522:	4b24      	ldr	r3, [pc, #144]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007526:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800752a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007532:	d01e      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007538:	d805      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00d      	beq.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800753e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007542:	d00e      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007544:	e026      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754a:	d01d      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800754c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007550:	d01d      	beq.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007552:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007556:	d014      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007558:	e01c      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800755a:	f000 f831 	bl	80075c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800755e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007560:	e01e      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007562:	f107 0318 	add.w	r3, r7, #24
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f840 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007570:	e016      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007572:	f107 030c 	add.w	r3, r7, #12
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f984 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007580:	e00e      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007586:	e00b      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007588:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800758a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800758c:	e008      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800758e:	4b07      	ldr	r3, [pc, #28]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007592:	e005      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007598:	bf00      	nop
 800759a:	e001      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80075a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3740      	adds	r7, #64	; 0x40
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	017d7840 	.word	0x017d7840
 80075b0:	00bb8000 	.word	0x00bb8000
 80075b4:	58024400 	.word	0x58024400
 80075b8:	03d09000 	.word	0x03d09000
 80075bc:	003d0900 	.word	0x003d0900

080075c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075c4:	f7fe fe3a 	bl	800623c <HAL_RCC_GetHCLKFreq>
 80075c8:	4601      	mov	r1, r0
 80075ca:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	091b      	lsrs	r3, r3, #4
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4a04      	ldr	r2, [pc, #16]	; (80075e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075d6:	5cd3      	ldrb	r3, [r2, r3]
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	58024400 	.word	0x58024400
 80075e8:	080138e0 	.word	0x080138e0

080075ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b089      	sub	sp, #36	; 0x24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075f4:	4b9d      	ldr	r3, [pc, #628]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80075fe:	4b9b      	ldr	r3, [pc, #620]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	0b1b      	lsrs	r3, r3, #12
 8007604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007608:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800760a:	4b98      	ldr	r3, [pc, #608]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	091b      	lsrs	r3, r3, #4
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007616:	4b95      	ldr	r3, [pc, #596]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	08db      	lsrs	r3, r3, #3
 800761c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	fb02 f303 	mul.w	r3, r2, r3
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 810a 	beq.w	800784e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d05a      	beq.n	80076f6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007640:	2b01      	cmp	r3, #1
 8007642:	d302      	bcc.n	800764a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007644:	2b02      	cmp	r3, #2
 8007646:	d078      	beq.n	800773a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007648:	e099      	b.n	800777e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800764a:	4b88      	ldr	r3, [pc, #544]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d02d      	beq.n	80076b2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007656:	4b85      	ldr	r3, [pc, #532]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	08db      	lsrs	r3, r3, #3
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	4a83      	ldr	r2, [pc, #524]	; (8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007662:	fa22 f303 	lsr.w	r3, r2, r3
 8007666:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	ee07 3a90 	vmov	s15, r3
 8007678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007680:	4b7a      	ldr	r3, [pc, #488]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007688:	ee07 3a90 	vmov	s15, r3
 800768c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007690:	ed97 6a03 	vldr	s12, [r7, #12]
 8007694:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076b0:	e087      	b.n	80077c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80076c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c4:	4b69      	ldr	r3, [pc, #420]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076f4:	e065      	b.n	80077c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007700:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800787c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007708:	4b58      	ldr	r3, [pc, #352]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007710:	ee07 3a90 	vmov	s15, r3
 8007714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007718:	ed97 6a03 	vldr	s12, [r7, #12]
 800771c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007734:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007738:	e043      	b.n	80077c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007744:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007880 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774c:	4b47      	ldr	r3, [pc, #284]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007760:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007764:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007778:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800777c:	e021      	b.n	80077c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	ee07 3a90 	vmov	s15, r3
 8007784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007788:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800787c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800778c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007790:	4b36      	ldr	r3, [pc, #216]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80077a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077c0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80077c2:	4b2a      	ldr	r3, [pc, #168]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	0a5b      	lsrs	r3, r3, #9
 80077c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e8:	ee17 2a90 	vmov	r2, s15
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80077f0:	4b1e      	ldr	r3, [pc, #120]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780a:	edd7 6a07 	vldr	s13, [r7, #28]
 800780e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007816:	ee17 2a90 	vmov	r2, s15
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	0e1b      	lsrs	r3, r3, #24
 8007824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007838:	edd7 6a07 	vldr	s13, [r7, #28]
 800783c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007844:	ee17 2a90 	vmov	r2, s15
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800784c:	e008      	b.n	8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	3724      	adds	r7, #36	; 0x24
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	58024400 	.word	0x58024400
 8007870:	03d09000 	.word	0x03d09000
 8007874:	46000000 	.word	0x46000000
 8007878:	4c742400 	.word	0x4c742400
 800787c:	4a742400 	.word	0x4a742400
 8007880:	4bbebc20 	.word	0x4bbebc20

08007884 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007884:	b480      	push	{r7}
 8007886:	b089      	sub	sp, #36	; 0x24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800788c:	4b9d      	ldr	r3, [pc, #628]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007896:	4b9b      	ldr	r3, [pc, #620]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	0d1b      	lsrs	r3, r3, #20
 800789c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078a2:	4b98      	ldr	r3, [pc, #608]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078ae:	4b95      	ldr	r3, [pc, #596]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b2:	08db      	lsrs	r3, r3, #3
 80078b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	fb02 f303 	mul.w	r3, r2, r3
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 810a 	beq.w	8007ae6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d05a      	beq.n	800798e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d302      	bcc.n	80078e2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d078      	beq.n	80079d2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80078e0:	e099      	b.n	8007a16 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078e2:	4b88      	ldr	r3, [pc, #544]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d02d      	beq.n	800794a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078ee:	4b85      	ldr	r3, [pc, #532]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	08db      	lsrs	r3, r3, #3
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	4a83      	ldr	r2, [pc, #524]	; (8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80078fa:	fa22 f303 	lsr.w	r3, r2, r3
 80078fe:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	ee07 3a90 	vmov	s15, r3
 8007910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007918:	4b7a      	ldr	r3, [pc, #488]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007928:	ed97 6a03 	vldr	s12, [r7, #12]
 800792c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007944:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007948:	e087      	b.n	8007a5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007954:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b10 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795c:	4b69      	ldr	r3, [pc, #420]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007970:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007988:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800798c:	e065      	b.n	8007a5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007998:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800799c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a0:	4b58      	ldr	r3, [pc, #352]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079d0:	e043      	b.n	8007a5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80079e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e4:	4b47      	ldr	r3, [pc, #284]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a14:	e021      	b.n	8007a5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a20:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a28:	4b36      	ldr	r3, [pc, #216]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a30:	ee07 3a90 	vmov	s15, r3
 8007a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a58:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a5a:	4b2a      	ldr	r3, [pc, #168]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	0a5b      	lsrs	r3, r3, #9
 8007a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a80:	ee17 2a90 	vmov	r2, s15
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a88:	4b1e      	ldr	r3, [pc, #120]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	0c1b      	lsrs	r3, r3, #16
 8007a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aae:	ee17 2a90 	vmov	r2, s15
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ab6:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	0e1b      	lsrs	r3, r3, #24
 8007abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007acc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007adc:	ee17 2a90 	vmov	r2, s15
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ae4:	e008      	b.n	8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	609a      	str	r2, [r3, #8]
}
 8007af8:	bf00      	nop
 8007afa:	3724      	adds	r7, #36	; 0x24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	58024400 	.word	0x58024400
 8007b08:	03d09000 	.word	0x03d09000
 8007b0c:	46000000 	.word	0x46000000
 8007b10:	4c742400 	.word	0x4c742400
 8007b14:	4a742400 	.word	0x4a742400
 8007b18:	4bbebc20 	.word	0x4bbebc20

08007b1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b24:	4b9d      	ldr	r3, [pc, #628]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	f003 0303 	and.w	r3, r3, #3
 8007b2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007b2e:	4b9b      	ldr	r3, [pc, #620]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	091b      	lsrs	r3, r3, #4
 8007b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b3a:	4b98      	ldr	r3, [pc, #608]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b44:	4b95      	ldr	r3, [pc, #596]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	08db      	lsrs	r3, r3, #3
 8007b4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	fb02 f303 	mul.w	r3, r2, r3
 8007b54:	ee07 3a90 	vmov	s15, r3
 8007b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 810a 	beq.w	8007d7c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d05a      	beq.n	8007c24 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d302      	bcc.n	8007b78 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d078      	beq.n	8007c68 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007b76:	e099      	b.n	8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b78:	4b88      	ldr	r3, [pc, #544]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d02d      	beq.n	8007be0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b84:	4b85      	ldr	r3, [pc, #532]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	08db      	lsrs	r3, r3, #3
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	4a84      	ldr	r2, [pc, #528]	; (8007da0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
 8007b94:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	ee07 3a90 	vmov	s15, r3
 8007b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bae:	4b7b      	ldr	r3, [pc, #492]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007da4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007bde:	e087      	b.n	8007cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007da8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf2:	4b6a      	ldr	r3, [pc, #424]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007da4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c22:	e065      	b.n	8007cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007dac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c36:	4b59      	ldr	r3, [pc, #356]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007da4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c66:	e043      	b.n	8007cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007db0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7a:	4b48      	ldr	r3, [pc, #288]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007da4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007caa:	e021      	b.n	8007cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007dac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cbe:	4b37      	ldr	r3, [pc, #220]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007da4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cee:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007cf0:	4b2a      	ldr	r3, [pc, #168]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	0a5b      	lsrs	r3, r3, #9
 8007cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d16:	ee17 2a90 	vmov	r2, s15
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007d1e:	4b1f      	ldr	r3, [pc, #124]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	0c1b      	lsrs	r3, r3, #16
 8007d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d28:	ee07 3a90 	vmov	s15, r3
 8007d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d44:	ee17 2a90 	vmov	r2, s15
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007d4c:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	0e1b      	lsrs	r3, r3, #24
 8007d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d72:	ee17 2a90 	vmov	r2, s15
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d7a:	e008      	b.n	8007d8e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	609a      	str	r2, [r3, #8]
}
 8007d8e:	bf00      	nop
 8007d90:	3724      	adds	r7, #36	; 0x24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	58024400 	.word	0x58024400
 8007da0:	03d09000 	.word	0x03d09000
 8007da4:	46000000 	.word	0x46000000
 8007da8:	4c742400 	.word	0x4c742400
 8007dac:	4a742400 	.word	0x4a742400
 8007db0:	4bbebc20 	.word	0x4bbebc20

08007db4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007dc2:	4b53      	ldr	r3, [pc, #332]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d101      	bne.n	8007dd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e099      	b.n	8007f06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007dd2:	4b4f      	ldr	r3, [pc, #316]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a4e      	ldr	r2, [pc, #312]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007dd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dde:	f7f9 fd33 	bl	8001848 <HAL_GetTick>
 8007de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007de4:	e008      	b.n	8007df8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007de6:	f7f9 fd2f 	bl	8001848 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d901      	bls.n	8007df8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e086      	b.n	8007f06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007df8:	4b45      	ldr	r3, [pc, #276]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f0      	bne.n	8007de6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e04:	4b42      	ldr	r3, [pc, #264]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	031b      	lsls	r3, r3, #12
 8007e12:	493f      	ldr	r1, [pc, #252]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	628b      	str	r3, [r1, #40]	; 0x28
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	025b      	lsls	r3, r3, #9
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	041b      	lsls	r3, r3, #16
 8007e36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	061b      	lsls	r3, r3, #24
 8007e44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e48:	4931      	ldr	r1, [pc, #196]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e4e:	4b30      	ldr	r3, [pc, #192]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	492d      	ldr	r1, [pc, #180]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e60:	4b2b      	ldr	r3, [pc, #172]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	f023 0220 	bic.w	r2, r3, #32
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	4928      	ldr	r1, [pc, #160]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e72:	4b27      	ldr	r3, [pc, #156]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	4a26      	ldr	r2, [pc, #152]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e78:	f023 0310 	bic.w	r3, r3, #16
 8007e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e7e:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e82:	4b24      	ldr	r3, [pc, #144]	; (8007f14 <RCCEx_PLL2_Config+0x160>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	69d2      	ldr	r2, [r2, #28]
 8007e8a:	00d2      	lsls	r2, r2, #3
 8007e8c:	4920      	ldr	r1, [pc, #128]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e92:	4b1f      	ldr	r3, [pc, #124]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	4a1e      	ldr	r2, [pc, #120]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007e98:	f043 0310 	orr.w	r3, r3, #16
 8007e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ea4:	4b1a      	ldr	r3, [pc, #104]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	4a19      	ldr	r2, [pc, #100]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007eb0:	e00f      	b.n	8007ed2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d106      	bne.n	8007ec6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007eb8:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	4a14      	ldr	r2, [pc, #80]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ec4:	e005      	b.n	8007ed2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ec6:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	4a11      	ldr	r2, [pc, #68]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ed0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ed2:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a0e      	ldr	r2, [pc, #56]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ede:	f7f9 fcb3 	bl	8001848 <HAL_GetTick>
 8007ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ee4:	e008      	b.n	8007ef8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ee6:	f7f9 fcaf 	bl	8001848 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d901      	bls.n	8007ef8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e006      	b.n	8007f06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ef8:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <RCCEx_PLL2_Config+0x15c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0f0      	beq.n	8007ee6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	58024400 	.word	0x58024400
 8007f14:	ffff0007 	.word	0xffff0007

08007f18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f26:	4b53      	ldr	r3, [pc, #332]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d101      	bne.n	8007f36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e099      	b.n	800806a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f36:	4b4f      	ldr	r3, [pc, #316]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a4e      	ldr	r2, [pc, #312]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f42:	f7f9 fc81 	bl	8001848 <HAL_GetTick>
 8007f46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f48:	e008      	b.n	8007f5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f4a:	f7f9 fc7d 	bl	8001848 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e086      	b.n	800806a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f5c:	4b45      	ldr	r3, [pc, #276]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1f0      	bne.n	8007f4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f68:	4b42      	ldr	r3, [pc, #264]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	051b      	lsls	r3, r3, #20
 8007f76:	493f      	ldr	r1, [pc, #252]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	628b      	str	r3, [r1, #40]	; 0x28
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	025b      	lsls	r3, r3, #9
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	041b      	lsls	r3, r3, #16
 8007f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	061b      	lsls	r3, r3, #24
 8007fa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fac:	4931      	ldr	r1, [pc, #196]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007fb2:	4b30      	ldr	r3, [pc, #192]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	492d      	ldr	r1, [pc, #180]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007fc4:	4b2b      	ldr	r3, [pc, #172]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	4928      	ldr	r1, [pc, #160]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007fd6:	4b27      	ldr	r3, [pc, #156]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	4a26      	ldr	r2, [pc, #152]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fe2:	4b24      	ldr	r3, [pc, #144]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fe6:	4b24      	ldr	r3, [pc, #144]	; (8008078 <RCCEx_PLL3_Config+0x160>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	69d2      	ldr	r2, [r2, #28]
 8007fee:	00d2      	lsls	r2, r2, #3
 8007ff0:	4920      	ldr	r1, [pc, #128]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ff6:	4b1f      	ldr	r3, [pc, #124]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffa:	4a1e      	ldr	r2, [pc, #120]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8007ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008008:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	4a19      	ldr	r2, [pc, #100]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 800800e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008012:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008014:	e00f      	b.n	8008036 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d106      	bne.n	800802a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800801c:	4b15      	ldr	r3, [pc, #84]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	4a14      	ldr	r2, [pc, #80]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8008022:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008028:	e005      	b.n	8008036 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800802a:	4b12      	ldr	r3, [pc, #72]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	4a11      	ldr	r2, [pc, #68]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8008030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008034:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008036:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a0e      	ldr	r2, [pc, #56]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 800803c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008042:	f7f9 fc01 	bl	8001848 <HAL_GetTick>
 8008046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008048:	e008      	b.n	800805c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800804a:	f7f9 fbfd 	bl	8001848 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b02      	cmp	r3, #2
 8008056:	d901      	bls.n	800805c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e006      	b.n	800806a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800805c:	4b05      	ldr	r3, [pc, #20]	; (8008074 <RCCEx_PLL3_Config+0x15c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0f0      	beq.n	800804a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	58024400 	.word	0x58024400
 8008078:	ffff0007 	.word	0xffff0007

0800807c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e07c      	b.n	8008188 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10c      	bne.n	80080b4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7f9 f85e 	bl	8001170 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2203      	movs	r2, #3
 80080b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f867 	bl	8008190 <HAL_SD_InitCard>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e05d      	b.n	8008188 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80080cc:	f107 0308 	add.w	r3, r7, #8
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fdbe 	bl	8008c54 <HAL_SD_GetCardStatus>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e052      	b.n	8008188 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80080e2:	7e3b      	ldrb	r3, [r7, #24]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80080e8:	7e7b      	ldrb	r3, [r7, #25]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d10a      	bne.n	800810c <HAL_SD_Init+0x90>
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <HAL_SD_Init+0x86>
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008108:	65da      	str	r2, [r3, #92]	; 0x5c
 800810a:	e00b      	b.n	8008124 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d104      	bne.n	800811e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800811a:	65da      	str	r2, [r3, #92]	; 0x5c
 800811c:	e002      	b.n	8008124 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fe74 	bl	8008e18 <HAL_SD_ConfigWideBusOperation>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e026      	b.n	8008188 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800813a:	f7f9 fb85 	bl	8001848 <HAL_GetTick>
 800813e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008140:	e011      	b.n	8008166 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008142:	f7f9 fb81 	bl	8001848 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008150:	d109      	bne.n	8008166 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e010      	b.n	8008188 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 ff00 	bl	8008f6c <HAL_SD_GetCardState>
 800816c:	4603      	mov	r3, r0
 800816e:	2b04      	cmp	r3, #4
 8008170:	d1e7      	bne.n	8008142 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3728      	adds	r7, #40	; 0x28
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008190:	b5b0      	push	{r4, r5, r7, lr}
 8008192:	b08e      	sub	sp, #56	; 0x38
 8008194:	af04      	add	r7, sp, #16
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008198:	2300      	movs	r3, #0
 800819a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800819c:	2300      	movs	r3, #0
 800819e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80081a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80081ac:	f7fe ff90 	bl	80070d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80081b0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	0a1b      	lsrs	r3, r3, #8
 80081b6:	4a40      	ldr	r2, [pc, #256]	; (80082b8 <HAL_SD_InitCard+0x128>)
 80081b8:	fba2 2303 	umull	r2, r3, r2, r3
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d107      	bne.n	80081d8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0210 	orr.w	r2, r2, #16
 80081d6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681d      	ldr	r5, [r3, #0]
 80081dc:	466c      	mov	r4, sp
 80081de:	f107 0314 	add.w	r3, r7, #20
 80081e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081ea:	f107 0308 	add.w	r3, r7, #8
 80081ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081f0:	4628      	mov	r0, r5
 80081f2:	f002 fc9b 	bl	800ab2c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f002 fcde 	bl	800abbc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008206:	fbb2 f3f3 	udiv	r3, r2, r3
 800820a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	2b00      	cmp	r3, #0
 8008210:	d008      	beq.n	8008224 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008212:	4a2a      	ldr	r2, [pc, #168]	; (80082bc <HAL_SD_InitCard+0x12c>)
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	fbb2 f3f3 	udiv	r3, r2, r3
 800821a:	3301      	adds	r3, #1
 800821c:	4618      	mov	r0, r3
 800821e:	f7f9 fb1f 	bl	8001860 <HAL_Delay>
 8008222:	e002      	b.n	800822a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008224:	2002      	movs	r0, #2
 8008226:	f7f9 fb1b 	bl	8001860 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 ff7c 	bl	8009128 <SD_PowerON>
 8008230:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e02e      	b.n	80082ae <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 feab 	bl	8008fac <SD_InitCard>
 8008256:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00b      	beq.n	8008276 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e01b      	b.n	80082ae <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800827e:	4618      	mov	r0, r3
 8008280:	f002 fd32 	bl	800ace8 <SDMMC_CmdBlockLength>
 8008284:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00f      	beq.n	80082ac <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a0b      	ldr	r2, [pc, #44]	; (80082c0 <HAL_SD_InitCard+0x130>)
 8008292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3728      	adds	r7, #40	; 0x28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bdb0      	pop	{r4, r5, r7, pc}
 80082b6:	bf00      	nop
 80082b8:	014f8b59 	.word	0x014f8b59
 80082bc:	00012110 	.word	0x00012110
 80082c0:	1fe00fff 	.word	0x1fe00fff

080082c4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b092      	sub	sp, #72	; 0x48
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082d2:	f7f9 fab9 	bl	8001848 <HAL_GetTick>
 80082d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d107      	bne.n	80082f6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e167      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b01      	cmp	r3, #1
 8008300:	f040 815a 	bne.w	80085b8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800830a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	441a      	add	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008314:	429a      	cmp	r2, r3
 8008316:	d907      	bls.n	8008328 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e14e      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2203      	movs	r2, #3
 800832c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833c:	2b01      	cmp	r3, #1
 800833e:	d002      	beq.n	8008346 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	025b      	lsls	r3, r3, #9
 8008344:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295
 800834a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	025b      	lsls	r3, r3, #9
 8008350:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008352:	2390      	movs	r3, #144	; 0x90
 8008354:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008356:	2302      	movs	r3, #2
 8008358:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800835a:	2300      	movs	r3, #0
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800835e:	2300      	movs	r3, #0
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f107 0214 	add.w	r2, r7, #20
 800836a:	4611      	mov	r1, r2
 800836c:	4618      	mov	r0, r3
 800836e:	f002 fc8f 	bl	800ac90 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008380:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d90a      	bls.n	800839e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2202      	movs	r2, #2
 800838c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008394:	4618      	mov	r0, r3
 8008396:	f002 fced 	bl	800ad74 <SDMMC_CmdReadMultiBlock>
 800839a:	6478      	str	r0, [r7, #68]	; 0x44
 800839c:	e009      	b.n	80083b2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083aa:	4618      	mov	r0, r3
 80083ac:	f002 fcbf 	bl	800ad2e <SDMMC_CmdReadSingleBlock>
 80083b0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80083b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d012      	beq.n	80083de <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a84      	ldr	r2, [pc, #528]	; (80085d0 <HAL_SD_ReadBlocks+0x30c>)
 80083be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083c6:	431a      	orrs	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e0f3      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80083e2:	e058      	b.n	8008496 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d033      	beq.n	800845a <HAL_SD_ReadBlocks+0x196>
 80083f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f4:	2b1f      	cmp	r3, #31
 80083f6:	d930      	bls.n	800845a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80083f8:	2300      	movs	r3, #0
 80083fa:	643b      	str	r3, [r7, #64]	; 0x40
 80083fc:	e027      	b.n	800844e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f002 fbbc 	bl	800ab80 <SDMMC_ReadFIFO>
 8008408:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	b2da      	uxtb	r2, r3
 800840e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008410:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	3301      	adds	r3, #1
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	0a1b      	lsrs	r3, r3, #8
 800841c:	b2da      	uxtb	r2, r3
 800841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008420:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	3301      	adds	r3, #1
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	0c1b      	lsrs	r3, r3, #16
 800842c:	b2da      	uxtb	r2, r3
 800842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008430:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008434:	3301      	adds	r3, #1
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	0e1b      	lsrs	r3, r3, #24
 800843c:	b2da      	uxtb	r2, r3
 800843e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008440:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	3301      	adds	r3, #1
 8008446:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844a:	3301      	adds	r3, #1
 800844c:	643b      	str	r3, [r7, #64]	; 0x40
 800844e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008450:	2b07      	cmp	r3, #7
 8008452:	d9d4      	bls.n	80083fe <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008456:	3b20      	subs	r3, #32
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800845a:	f7f9 f9f5 	bl	8001848 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008466:	429a      	cmp	r2, r3
 8008468:	d902      	bls.n	8008470 <HAL_SD_ReadBlocks+0x1ac>
 800846a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800846c:	2b00      	cmp	r3, #0
 800846e:	d112      	bne.n	8008496 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a56      	ldr	r2, [pc, #344]	; (80085d0 <HAL_SD_ReadBlocks+0x30c>)
 8008476:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e097      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d09f      	beq.n	80083e4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d022      	beq.n	8008508 <HAL_SD_ReadBlocks+0x244>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d91f      	bls.n	8008508 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d01b      	beq.n	8008508 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f002 fcb7 	bl	800ae48 <SDMMC_CmdStopTransfer>
 80084da:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80084dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d012      	beq.n	8008508 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a3a      	ldr	r2, [pc, #232]	; (80085d0 <HAL_SD_ReadBlocks+0x30c>)
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f0:	431a      	orrs	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e05e      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d012      	beq.n	800853c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a2d      	ldr	r2, [pc, #180]	; (80085d0 <HAL_SD_ReadBlocks+0x30c>)
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	f043 0208 	orr.w	r2, r3, #8
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e044      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d012      	beq.n	8008570 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a20      	ldr	r2, [pc, #128]	; (80085d0 <HAL_SD_ReadBlocks+0x30c>)
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	f043 0202 	orr.w	r2, r3, #2
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e02a      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d012      	beq.n	80085a4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a13      	ldr	r2, [pc, #76]	; (80085d0 <HAL_SD_ReadBlocks+0x30c>)
 8008584:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	f043 0220 	orr.w	r2, r3, #32
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e010      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a0a      	ldr	r2, [pc, #40]	; (80085d4 <HAL_SD_ReadBlocks+0x310>)
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	e006      	b.n	80085c6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3748      	adds	r7, #72	; 0x48
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	1fe00fff 	.word	0x1fe00fff
 80085d4:	18000f3a 	.word	0x18000f3a

080085d8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b092      	sub	sp, #72	; 0x48
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80085e6:	f7f9 f92f 	bl	8001848 <HAL_GetTick>
 80085ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d107      	bne.n	800860a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e16b      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	f040 815e 	bne.w	80088d4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800861e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	441a      	add	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008628:	429a      	cmp	r2, r3
 800862a:	d907      	bls.n	800863c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008630:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e152      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2203      	movs	r2, #3
 8008640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2200      	movs	r2, #0
 800864a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d002      	beq.n	800865a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	025b      	lsls	r3, r3, #9
 8008658:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800865a:	f04f 33ff 	mov.w	r3, #4294967295
 800865e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	025b      	lsls	r3, r3, #9
 8008664:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008666:	2390      	movs	r3, #144	; 0x90
 8008668:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800866a:	2300      	movs	r3, #0
 800866c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800866e:	2300      	movs	r3, #0
 8008670:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008672:	2300      	movs	r3, #0
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f107 0218 	add.w	r2, r7, #24
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f002 fb05 	bl	800ac90 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008694:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d90a      	bls.n	80086b2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2220      	movs	r2, #32
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086a8:	4618      	mov	r0, r3
 80086aa:	f002 fba9 	bl	800ae00 <SDMMC_CmdWriteMultiBlock>
 80086ae:	6478      	str	r0, [r7, #68]	; 0x44
 80086b0:	e009      	b.n	80086c6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2210      	movs	r2, #16
 80086b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086be:	4618      	mov	r0, r3
 80086c0:	f002 fb7b 	bl	800adba <SDMMC_CmdWriteSingleBlock>
 80086c4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d012      	beq.n	80086f2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a86      	ldr	r2, [pc, #536]	; (80088ec <HAL_SD_WriteBlocks+0x314>)
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086da:	431a      	orrs	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e0f7      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086f6:	e05c      	b.n	80087b2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d037      	beq.n	8008776 <HAL_SD_WriteBlocks+0x19e>
 8008706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008708:	2b1f      	cmp	r3, #31
 800870a:	d934      	bls.n	8008776 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800870c:	2300      	movs	r3, #0
 800870e:	643b      	str	r3, [r7, #64]	; 0x40
 8008710:	e02b      	b.n	800876a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	3301      	adds	r3, #1
 800871c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	021a      	lsls	r2, r3, #8
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872c:	3301      	adds	r3, #1
 800872e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	041a      	lsls	r2, r3, #16
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	4313      	orrs	r3, r2
 800873a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	3301      	adds	r3, #1
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	061a      	lsls	r2, r3, #24
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	3301      	adds	r3, #1
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f107 0214 	add.w	r2, r7, #20
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f002 fa1b 	bl	800ab9a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008766:	3301      	adds	r3, #1
 8008768:	643b      	str	r3, [r7, #64]	; 0x40
 800876a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800876c:	2b07      	cmp	r3, #7
 800876e:	d9d0      	bls.n	8008712 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008772:	3b20      	subs	r3, #32
 8008774:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008776:	f7f9 f867 	bl	8001848 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008782:	429a      	cmp	r2, r3
 8008784:	d902      	bls.n	800878c <HAL_SD_WriteBlocks+0x1b4>
 8008786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008788:	2b00      	cmp	r3, #0
 800878a:	d112      	bne.n	80087b2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a56      	ldr	r2, [pc, #344]	; (80088ec <HAL_SD_WriteBlocks+0x314>)
 8008792:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800879a:	431a      	orrs	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e097      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d09b      	beq.n	80086f8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ce:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d022      	beq.n	8008824 <HAL_SD_WriteBlocks+0x24c>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d91f      	bls.n	8008824 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d01b      	beq.n	8008824 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f002 fb29 	bl	800ae48 <SDMMC_CmdStopTransfer>
 80087f6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80087f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d012      	beq.n	8008824 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a3a      	ldr	r2, [pc, #232]	; (80088ec <HAL_SD_WriteBlocks+0x314>)
 8008804:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800880c:	431a      	orrs	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e05e      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	f003 0308 	and.w	r3, r3, #8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d012      	beq.n	8008858 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a2d      	ldr	r2, [pc, #180]	; (80088ec <HAL_SD_WriteBlocks+0x314>)
 8008838:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	f043 0208 	orr.w	r2, r3, #8
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e044      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d012      	beq.n	800888c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a20      	ldr	r2, [pc, #128]	; (80088ec <HAL_SD_WriteBlocks+0x314>)
 800886c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008872:	f043 0202 	orr.w	r2, r3, #2
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e02a      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008892:	f003 0310 	and.w	r3, r3, #16
 8008896:	2b00      	cmp	r3, #0
 8008898:	d012      	beq.n	80088c0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a13      	ldr	r2, [pc, #76]	; (80088ec <HAL_SD_WriteBlocks+0x314>)
 80088a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	f043 0210 	orr.w	r2, r3, #16
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e010      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a0a      	ldr	r2, [pc, #40]	; (80088f0 <HAL_SD_WriteBlocks+0x318>)
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	e006      	b.n	80088e2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
  }
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3748      	adds	r7, #72	; 0x48
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	1fe00fff 	.word	0x1fe00fff
 80088f0:	18000f3a 	.word	0x18000f3a

080088f4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
	...

0800890c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891a:	0f9b      	lsrs	r3, r3, #30
 800891c:	b2da      	uxtb	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008926:	0e9b      	lsrs	r3, r3, #26
 8008928:	b2db      	uxtb	r3, r3
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	b2da      	uxtb	r2, r3
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008938:	0e1b      	lsrs	r3, r3, #24
 800893a:	b2db      	uxtb	r3, r3
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	b2da      	uxtb	r2, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800894a:	0c1b      	lsrs	r3, r3, #16
 800894c:	b2da      	uxtb	r2, r3
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	b2da      	uxtb	r2, r3
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008962:	b2da      	uxtb	r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896c:	0d1b      	lsrs	r3, r3, #20
 800896e:	b29a      	uxth	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008978:	0c1b      	lsrs	r3, r3, #16
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 030f 	and.w	r3, r3, #15
 8008980:	b2da      	uxtb	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800898a:	0bdb      	lsrs	r3, r3, #15
 800898c:	b2db      	uxtb	r3, r3
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899c:	0b9b      	lsrs	r3, r3, #14
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ae:	0b5b      	lsrs	r3, r3, #13
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c0:	0b1b      	lsrs	r3, r3, #12
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d163      	bne.n	8008aa4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e0:	009a      	lsls	r2, r3, #2
 80089e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089e6:	4013      	ands	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80089ec:	0f92      	lsrs	r2, r2, #30
 80089ee:	431a      	orrs	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f8:	0edb      	lsrs	r3, r3, #27
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a0a:	0e1b      	lsrs	r3, r3, #24
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 0307 	and.w	r3, r3, #7
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a1c:	0d5b      	lsrs	r3, r3, #21
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a2e:	0c9b      	lsrs	r3, r3, #18
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a40:	0bdb      	lsrs	r3, r3, #15
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	7e1b      	ldrb	r3, [r3, #24]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	3302      	adds	r3, #2
 8008a64:	2201      	movs	r2, #1
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a6e:	fb02 f203 	mul.w	r2, r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	7a1b      	ldrb	r3, [r3, #8]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	2201      	movs	r2, #1
 8008a82:	409a      	lsls	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008a90:	0a52      	lsrs	r2, r2, #9
 8008a92:	fb02 f203 	mul.w	r2, r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aa0:	659a      	str	r2, [r3, #88]	; 0x58
 8008aa2:	e031      	b.n	8008b08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d11d      	bne.n	8008ae8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab0:	041b      	lsls	r3, r3, #16
 8008ab2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aba:	0c1b      	lsrs	r3, r3, #16
 8008abc:	431a      	orrs	r2, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	029a      	lsls	r2, r3, #10
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008adc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	659a      	str	r2, [r3, #88]	; 0x58
 8008ae6:	e00f      	b.n	8008b08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a58      	ldr	r2, [pc, #352]	; (8008c50 <HAL_SD_GetCardCSD+0x344>)
 8008aee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e09d      	b.n	8008c44 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b0c:	0b9b      	lsrs	r3, r3, #14
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b1e:	09db      	lsrs	r3, r3, #7
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b40:	0fdb      	lsrs	r3, r3, #31
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4c:	0f5b      	lsrs	r3, r3, #29
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 0303 	and.w	r3, r3, #3
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b5e:	0e9b      	lsrs	r3, r3, #26
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b70:	0d9b      	lsrs	r3, r3, #22
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f003 030f 	and.w	r3, r3, #15
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b82:	0d5b      	lsrs	r3, r3, #21
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb2:	0bdb      	lsrs	r3, r3, #15
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc6:	0b9b      	lsrs	r3, r3, #14
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bda:	0b5b      	lsrs	r3, r3, #13
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bee:	0b1b      	lsrs	r3, r3, #12
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c02:	0a9b      	lsrs	r3, r3, #10
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	f003 0303 	and.w	r3, r3, #3
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c2a:	085b      	lsrs	r3, r3, #1
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	1fe00fff 	.word	0x1fe00fff

08008c54 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b094      	sub	sp, #80	; 0x50
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008c64:	f107 0308 	add.w	r3, r7, #8
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fb64 	bl	8009338 <SD_SendSDStatus>
 8008c70:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d011      	beq.n	8008c9c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a4f      	ldr	r2, [pc, #316]	; (8008dbc <HAL_SD_GetCardStatus+0x168>)
 8008c7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c86:	431a      	orrs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008c9a:	e070      	b.n	8008d7e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	099b      	lsrs	r3, r3, #6
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	095b      	lsrs	r3, r3, #5
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	0a1b      	lsrs	r3, r3, #8
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	0e1b      	lsrs	r3, r3, #24
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	061a      	lsls	r2, r3, #24
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ce2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	0a1b      	lsrs	r3, r3, #8
 8008ce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008cec:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	0e1b      	lsrs	r3, r3, #24
 8008cf2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	0a1b      	lsrs	r3, r3, #8
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	0d1b      	lsrs	r3, r3, #20
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 030f 	and.w	r3, r3, #15
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	0c1b      	lsrs	r3, r3, #16
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	0a9b      	lsrs	r3, r3, #10
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	0a1b      	lsrs	r3, r3, #8
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	091b      	lsrs	r3, r3, #4
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	f003 030f 	and.w	r3, r3, #15
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	0e1b      	lsrs	r3, r3, #24
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 ffae 	bl	800ace8 <SDMMC_CmdBlockLength>
 8008d8c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00d      	beq.n	8008db0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a08      	ldr	r2, [pc, #32]	; (8008dbc <HAL_SD_GetCardStatus+0x168>)
 8008d9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008db0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3750      	adds	r7, #80	; 0x50
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	1fe00fff 	.word	0x1fe00fff

08008dc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008e18:	b5b0      	push	{r4, r5, r7, lr}
 8008e1a:	b08e      	sub	sp, #56	; 0x38
 8008e1c:	af04      	add	r7, sp, #16
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2203      	movs	r2, #3
 8008e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d02e      	beq.n	8008e96 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3e:	d106      	bne.n	8008e4e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8008e4c:	e029      	b.n	8008ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e54:	d10a      	bne.n	8008e6c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fb66 	bl	8009528 <SD_WideBus_Enable>
 8008e5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	431a      	orrs	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	639a      	str	r2, [r3, #56]	; 0x38
 8008e6a:	e01a      	b.n	8008ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fba3 	bl	80095be <SD_WideBus_Disable>
 8008e78:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	431a      	orrs	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38
 8008e86:	e00c      	b.n	8008ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38
 8008e94:	e005      	b.n	8008ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d007      	beq.n	8008eba <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a2e      	ldr	r2, [pc, #184]	; (8008f68 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008eb8:	e034      	b.n	8008f24 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d903      	bls.n	8008ee0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	e012      	b.n	8008f06 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee8:	d103      	bne.n	8008ef2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	61bb      	str	r3, [r7, #24]
 8008ef0:	e009      	b.n	8008f06 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008efa:	d102      	bne.n	8008f02 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008efc:	2302      	movs	r3, #2
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	e001      	b.n	8008f06 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008f02:	2304      	movs	r3, #4
 8008f04:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681d      	ldr	r5, [r3, #0]
 8008f0a:	466c      	mov	r4, sp
 8008f0c:	f107 0314 	add.w	r3, r7, #20
 8008f10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f18:	f107 0308 	add.w	r3, r7, #8
 8008f1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f001 fe04 	bl	800ab2c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 fedb 	bl	800ace8 <SDMMC_CmdBlockLength>
 8008f32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00c      	beq.n	8008f54 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a0a      	ldr	r2, [pc, #40]	; (8008f68 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3728      	adds	r7, #40	; 0x28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bdb0      	pop	{r4, r5, r7, pc}
 8008f68:	1fe00fff 	.word	0x1fe00fff

08008f6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008f78:	f107 030c 	add.w	r3, r7, #12
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 faaa 	bl	80094d8 <SD_SendStatus>
 8008f84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d005      	beq.n	8008f98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	0a5b      	lsrs	r3, r3, #9
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008fa2:	693b      	ldr	r3, [r7, #16]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b091      	sub	sp, #68	; 0x44
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 fe0e 	bl	800abde <SDMMC_GetPowerState>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d102      	bne.n	8008fce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008fcc:	e0a8      	b.n	8009120 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d02e      	beq.n	8009034 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f002 f85a 	bl	800b094 <SDMMC_CmdSendCID>
 8008fe0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <SD_InitCard+0x40>
    {
      return errorstate;
 8008fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fea:	e099      	b.n	8009120 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 fe39 	bl	800ac6a <SDMMC_GetResponse>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2104      	movs	r1, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fe30 	bl	800ac6a <SDMMC_GetResponse>
 800900a:	4602      	mov	r2, r0
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2108      	movs	r1, #8
 8009016:	4618      	mov	r0, r3
 8009018:	f001 fe27 	bl	800ac6a <SDMMC_GetResponse>
 800901c:	4602      	mov	r2, r0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	210c      	movs	r1, #12
 8009028:	4618      	mov	r0, r3
 800902a:	f001 fe1e 	bl	800ac6a <SDMMC_GetResponse>
 800902e:	4602      	mov	r2, r0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009038:	2b03      	cmp	r3, #3
 800903a:	d00d      	beq.n	8009058 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f107 020e 	add.w	r2, r7, #14
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f002 f863 	bl	800b112 <SDMMC_CmdSetRelAdd>
 800904c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800904e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <SD_InitCard+0xac>
    {
      return errorstate;
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	e063      	b.n	8009120 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905c:	2b03      	cmp	r3, #3
 800905e:	d036      	beq.n	80090ce <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009060:	89fb      	ldrh	r3, [r7, #14]
 8009062:	461a      	mov	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	4619      	mov	r1, r3
 8009074:	4610      	mov	r0, r2
 8009076:	f002 f82c 	bl	800b0d2 <SDMMC_CmdSendCSD>
 800907a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <SD_InitCard+0xda>
    {
      return errorstate;
 8009082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009084:	e04c      	b.n	8009120 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f001 fdec 	bl	800ac6a <SDMMC_GetResponse>
 8009092:	4602      	mov	r2, r0
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2104      	movs	r1, #4
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 fde3 	bl	800ac6a <SDMMC_GetResponse>
 80090a4:	4602      	mov	r2, r0
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2108      	movs	r1, #8
 80090b0:	4618      	mov	r0, r3
 80090b2:	f001 fdda 	bl	800ac6a <SDMMC_GetResponse>
 80090b6:	4602      	mov	r2, r0
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	210c      	movs	r1, #12
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 fdd1 	bl	800ac6a <SDMMC_GetResponse>
 80090c8:	4602      	mov	r2, r0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2104      	movs	r1, #4
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 fdc8 	bl	800ac6a <SDMMC_GetResponse>
 80090da:	4603      	mov	r3, r0
 80090dc:	0d1a      	lsrs	r2, r3, #20
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80090e2:	f107 0310 	add.w	r3, r7, #16
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff fc0f 	bl	800890c <HAL_SD_GetCardCSD>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090f8:	e012      	b.n	8009120 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6819      	ldr	r1, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009102:	041b      	lsls	r3, r3, #16
 8009104:	f04f 0400 	mov.w	r4, #0
 8009108:	461a      	mov	r2, r3
 800910a:	4623      	mov	r3, r4
 800910c:	4608      	mov	r0, r1
 800910e:	f001 fed7 	bl	800aec0 <SDMMC_CmdSelDesel>
 8009112:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <SD_InitCard+0x172>
  {
    return errorstate;
 800911a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911c:	e000      	b.n	8009120 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3744      	adds	r7, #68	; 0x44
 8009124:	46bd      	mov	sp, r7
 8009126:	bd90      	pop	{r4, r7, pc}

08009128 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	61fb      	str	r3, [r7, #28]
 8009138:	2300      	movs	r3, #0
 800913a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800913c:	f7f8 fb84 	bl	8001848 <HAL_GetTick>
 8009140:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f001 fede 	bl	800af08 <SDMMC_CmdGoIdleState>
 800914c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <SD_PowerON+0x30>
  {
    return errorstate;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	e0e9      	b.n	800932c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	f001 fef1 	bl	800af44 <SDMMC_CmdOperCond>
 8009162:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00d      	beq.n	8009186 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f001 fec7 	bl	800af08 <SDMMC_CmdGoIdleState>
 800917a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d004      	beq.n	800918c <SD_PowerON+0x64>
    {
      return errorstate;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	e0d2      	b.n	800932c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	2b01      	cmp	r3, #1
 8009192:	d137      	bne.n	8009204 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f001 fef2 	bl	800af84 <SDMMC_CmdAppCommand>
 80091a0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d02d      	beq.n	8009204 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091ac:	e0be      	b.n	800932c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2100      	movs	r1, #0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f001 fee5 	bl	800af84 <SDMMC_CmdAppCommand>
 80091ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <SD_PowerON+0x9e>
    {
      return errorstate;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	e0b2      	b.n	800932c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	495a      	ldr	r1, [pc, #360]	; (8009334 <SD_PowerON+0x20c>)
 80091cc:	4618      	mov	r0, r3
 80091ce:	f001 fefc 	bl	800afca <SDMMC_CmdAppOperCommand>
 80091d2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091de:	e0a5      	b.n	800932c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2100      	movs	r1, #0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fd3f 	bl	800ac6a <SDMMC_GetResponse>
 80091ec:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	0fdb      	lsrs	r3, r3, #31
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <SD_PowerON+0xd2>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <SD_PowerON+0xd4>
 80091fa:	2300      	movs	r3, #0
 80091fc:	61bb      	str	r3, [r7, #24]

    count++;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800920a:	4293      	cmp	r3, r2
 800920c:	d802      	bhi.n	8009214 <SD_PowerON+0xec>
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0cc      	beq.n	80091ae <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800921a:	4293      	cmp	r3, r2
 800921c:	d902      	bls.n	8009224 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800921e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009222:	e083      	b.n	800932c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d07d      	beq.n	800932a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d176      	bne.n	800932a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d071      	beq.n	800932a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800924c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f042 0208 	orr.w	r2, r2, #8
 800925c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4618      	mov	r0, r3
 8009264:	f001 ffbc 	bl	800b1e0 <SDMMC_CmdVoltageSwitch>
 8009268:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00c      	beq.n	800928a <SD_PowerON+0x162>
        {
          return errorstate;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	e05b      	b.n	800932c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009274:	f7f8 fae8 	bl	8001848 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009282:	d102      	bne.n	800928a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009284:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009288:	e050      	b.n	800932c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009298:	d1ec      	bne.n	8009274 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092b2:	d002      	beq.n	80092ba <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80092b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092b8:	e038      	b.n	800932c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80092ba:	2001      	movs	r0, #1
 80092bc:	f7ff fb1a 	bl	80088f4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f042 0204 	orr.w	r2, r2, #4
 80092ce:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80092d0:	e00a      	b.n	80092e8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092d2:	f7f8 fab9 	bl	8001848 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e0:	d102      	bne.n	80092e8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80092e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092e6:	e021      	b.n	800932c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092f6:	d1ec      	bne.n	80092d2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009300:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800930c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009310:	d102      	bne.n	8009318 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009316:	e009      	b.n	800932c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2213      	movs	r2, #19
 800931e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f04f 32ff 	mov.w	r2, #4294967295
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	c1100000 	.word	0xc1100000

08009338 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08c      	sub	sp, #48	; 0x30
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009342:	f7f8 fa81 	bl	8001848 <HAL_GetTick>
 8009346:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2100      	movs	r1, #0
 8009352:	4618      	mov	r0, r3
 8009354:	f001 fc89 	bl	800ac6a <SDMMC_GetResponse>
 8009358:	4603      	mov	r3, r0
 800935a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800935e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009362:	d102      	bne.n	800936a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009368:	e0b0      	b.n	80094cc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2140      	movs	r1, #64	; 0x40
 8009370:	4618      	mov	r0, r3
 8009372:	f001 fcb9 	bl	800ace8 <SDMMC_CmdBlockLength>
 8009376:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	e0a0      	b.n	80094cc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009392:	041b      	lsls	r3, r3, #16
 8009394:	4619      	mov	r1, r3
 8009396:	4610      	mov	r0, r2
 8009398:	f001 fdf4 	bl	800af84 <SDMMC_CmdAppCommand>
 800939c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	e08d      	b.n	80094cc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093b0:	f04f 33ff 	mov.w	r3, #4294967295
 80093b4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80093b6:	2340      	movs	r3, #64	; 0x40
 80093b8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80093ba:	2360      	movs	r3, #96	; 0x60
 80093bc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093be:	2302      	movs	r3, #2
 80093c0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80093c6:	2301      	movs	r3, #1
 80093c8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f107 0208 	add.w	r2, r7, #8
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 fc5b 	bl	800ac90 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fedc 	bl	800b19c <SDMMC_CmdStatusRegister>
 80093e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d02b      	beq.n	8009444 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	e069      	b.n	80094cc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d013      	beq.n	800942e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009406:	2300      	movs	r3, #0
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800940a:	e00d      	b.n	8009428 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4618      	mov	r0, r3
 8009412:	f001 fbb5 	bl	800ab80 <SDMMC_ReadFIFO>
 8009416:	4602      	mov	r2, r0
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	601a      	str	r2, [r3, #0]
        pData++;
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	3304      	adds	r3, #4
 8009420:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	3301      	adds	r3, #1
 8009426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	2b07      	cmp	r3, #7
 800942c:	d9ee      	bls.n	800940c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800942e:	f7f8 fa0b 	bl	8001848 <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943c:	d102      	bne.n	8009444 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800943e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009442:	e043      	b.n	80094cc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0d2      	beq.n	80093f8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009458:	f003 0308 	and.w	r3, r3, #8
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009460:	2308      	movs	r3, #8
 8009462:	e033      	b.n	80094cc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009472:	2302      	movs	r3, #2
 8009474:	e02a      	b.n	80094cc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947c:	f003 0320 	and.w	r3, r3, #32
 8009480:	2b00      	cmp	r3, #0
 8009482:	d017      	beq.n	80094b4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009484:	2320      	movs	r3, #32
 8009486:	e021      	b.n	80094cc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fb77 	bl	800ab80 <SDMMC_ReadFIFO>
 8009492:	4602      	mov	r2, r0
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	601a      	str	r2, [r3, #0]
    pData++;
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	3304      	adds	r3, #4
 800949c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800949e:	f7f8 f9d3 	bl	8001848 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d102      	bne.n	80094b4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094b2:	e00b      	b.n	80094cc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e2      	bne.n	8009488 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a03      	ldr	r2, [pc, #12]	; (80094d4 <SD_SendSDStatus+0x19c>)
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3730      	adds	r7, #48	; 0x30
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	18000f3a 	.word	0x18000f3a

080094d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80094e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094ec:	e018      	b.n	8009520 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094f6:	041b      	lsls	r3, r3, #16
 80094f8:	4619      	mov	r1, r3
 80094fa:	4610      	mov	r0, r2
 80094fc:	f001 fe2b 	bl	800b156 <SDMMC_CmdSendStatus>
 8009500:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	e009      	b.n	8009520 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f001 fba9 	bl	800ac6a <SDMMC_GetResponse>
 8009518:	4602      	mov	r2, r0
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	2300      	movs	r3, #0
 8009536:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2100      	movs	r1, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f001 fb93 	bl	800ac6a <SDMMC_GetResponse>
 8009544:	4603      	mov	r3, r0
 8009546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800954e:	d102      	bne.n	8009556 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009550:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009554:	e02f      	b.n	80095b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009556:	f107 030c 	add.w	r3, r7, #12
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f879 	bl	8009654 <SD_FindSCR>
 8009562:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	e023      	b.n	80095b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01c      	beq.n	80095b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f001 fcfd 	bl	800af84 <SDMMC_CmdAppCommand>
 800958a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	e00f      	b.n	80095b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2102      	movs	r1, #2
 800959c:	4618      	mov	r0, r3
 800959e:	f001 fd34 	bl	800b00a <SDMMC_CmdBusWidth>
 80095a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	e003      	b.n	80095b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e001      	b.n	80095b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b086      	sub	sp, #24
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	2300      	movs	r3, #0
 80095cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2100      	movs	r1, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f001 fb48 	bl	800ac6a <SDMMC_GetResponse>
 80095da:	4603      	mov	r3, r0
 80095dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095e4:	d102      	bne.n	80095ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095ea:	e02f      	b.n	800964c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80095ec:	f107 030c 	add.w	r3, r7, #12
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f82e 	bl	8009654 <SD_FindSCR>
 80095f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	e023      	b.n	800964c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d01c      	beq.n	8009648 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009616:	041b      	lsls	r3, r3, #16
 8009618:	4619      	mov	r1, r3
 800961a:	4610      	mov	r0, r2
 800961c:	f001 fcb2 	bl	800af84 <SDMMC_CmdAppCommand>
 8009620:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	e00f      	b.n	800964c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2100      	movs	r1, #0
 8009632:	4618      	mov	r0, r3
 8009634:	f001 fce9 	bl	800b00a <SDMMC_CmdBusWidth>
 8009638:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	e003      	b.n	800964c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009644:	2300      	movs	r3, #0
 8009646:	e001      	b.n	800964c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009648:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800964c:	4618      	mov	r0, r3
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08e      	sub	sp, #56	; 0x38
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800965e:	f7f8 f8f3 	bl	8001848 <HAL_GetTick>
 8009662:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009668:	2300      	movs	r3, #0
 800966a:	60bb      	str	r3, [r7, #8]
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2108      	movs	r1, #8
 800967a:	4618      	mov	r0, r3
 800967c:	f001 fb34 	bl	800ace8 <SDMMC_CmdBlockLength>
 8009680:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	e0ad      	b.n	80097e8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009694:	041b      	lsls	r3, r3, #16
 8009696:	4619      	mov	r1, r3
 8009698:	4610      	mov	r0, r2
 800969a:	f001 fc73 	bl	800af84 <SDMMC_CmdAppCommand>
 800969e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	e09e      	b.n	80097e8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80096b0:	2308      	movs	r3, #8
 80096b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80096b4:	2330      	movs	r3, #48	; 0x30
 80096b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096b8:	2302      	movs	r3, #2
 80096ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096bc:	2300      	movs	r3, #0
 80096be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80096c0:	2301      	movs	r3, #1
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f107 0210 	add.w	r2, r7, #16
 80096cc:	4611      	mov	r1, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 fade 	bl	800ac90 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 fcb9 	bl	800b050 <SDMMC_CmdSendSCR>
 80096de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d027      	beq.n	8009736 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	e07e      	b.n	80097e8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d113      	bne.n	8009720 <SD_FindSCR+0xcc>
 80096f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d110      	bne.n	8009720 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4618      	mov	r0, r3
 8009704:	f001 fa3c 	bl	800ab80 <SDMMC_ReadFIFO>
 8009708:	4603      	mov	r3, r0
 800970a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4618      	mov	r0, r3
 8009712:	f001 fa35 	bl	800ab80 <SDMMC_ReadFIFO>
 8009716:	4603      	mov	r3, r0
 8009718:	60fb      	str	r3, [r7, #12]
      index++;
 800971a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971c:	3301      	adds	r3, #1
 800971e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009720:	f7f8 f892 	bl	8001848 <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d102      	bne.n	8009736 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009730:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009734:	e058      	b.n	80097e8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800973c:	f240 532a 	movw	r3, #1322	; 0x52a
 8009740:	4013      	ands	r3, r2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0d1      	beq.n	80096ea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2208      	movs	r2, #8
 800975a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800975c:	2308      	movs	r3, #8
 800975e:	e043      	b.n	80097e8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2202      	movs	r2, #2
 8009774:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009776:	2302      	movs	r3, #2
 8009778:	e036      	b.n	80097e8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2220      	movs	r2, #32
 800978e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009790:	2320      	movs	r3, #32
 8009792:	e029      	b.n	80097e8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a15      	ldr	r2, [pc, #84]	; (80097f0 <SD_FindSCR+0x19c>)
 800979a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	061a      	lsls	r2, r3, #24
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	0a1b      	lsrs	r3, r3, #8
 80097ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	0e1b      	lsrs	r3, r3, #24
 80097b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	601a      	str	r2, [r3, #0]
    scr++;
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	3304      	adds	r3, #4
 80097c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	061a      	lsls	r2, r3, #24
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	0a1b      	lsrs	r3, r3, #8
 80097d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	0e1b      	lsrs	r3, r3, #24
 80097e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3738      	adds	r7, #56	; 0x38
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	18000f3a 	.word	0x18000f3a

080097f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e0e2      	b.n	80099d0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a70      	ldr	r2, [pc, #448]	; (80099d8 <HAL_SPI_Init+0x1e4>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00f      	beq.n	800983a <HAL_SPI_Init+0x46>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a6f      	ldr	r2, [pc, #444]	; (80099dc <HAL_SPI_Init+0x1e8>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d00a      	beq.n	800983a <HAL_SPI_Init+0x46>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a6d      	ldr	r2, [pc, #436]	; (80099e0 <HAL_SPI_Init+0x1ec>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d005      	beq.n	800983a <HAL_SPI_Init+0x46>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	2b0f      	cmp	r3, #15
 8009834:	d901      	bls.n	800983a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e0ca      	b.n	80099d0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f8d2 	bl	80099e4 <SPI_GetPacketSize>
 8009840:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a64      	ldr	r2, [pc, #400]	; (80099d8 <HAL_SPI_Init+0x1e4>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00c      	beq.n	8009866 <HAL_SPI_Init+0x72>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a62      	ldr	r2, [pc, #392]	; (80099dc <HAL_SPI_Init+0x1e8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d007      	beq.n	8009866 <HAL_SPI_Init+0x72>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a61      	ldr	r2, [pc, #388]	; (80099e0 <HAL_SPI_Init+0x1ec>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d002      	beq.n	8009866 <HAL_SPI_Init+0x72>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b08      	cmp	r3, #8
 8009864:	d811      	bhi.n	800988a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800986a:	4a5b      	ldr	r2, [pc, #364]	; (80099d8 <HAL_SPI_Init+0x1e4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d009      	beq.n	8009884 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a59      	ldr	r2, [pc, #356]	; (80099dc <HAL_SPI_Init+0x1e8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d004      	beq.n	8009884 <HAL_SPI_Init+0x90>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a58      	ldr	r2, [pc, #352]	; (80099e0 <HAL_SPI_Init+0x1ec>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d104      	bne.n	800988e <HAL_SPI_Init+0x9a>
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2b10      	cmp	r3, #16
 8009888:	d901      	bls.n	800988e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e0a0      	b.n	80099d0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7f7 fcd0 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098c8:	d110      	bne.n	80098ec <HAL_SPI_Init+0xf8>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098d2:	d10b      	bne.n	80098ec <HAL_SPI_Init+0xf8>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d107      	bne.n	80098ec <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098ea:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f4:	431a      	orrs	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fe:	ea42 0103 	orr.w	r1, r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	431a      	orrs	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	431a      	orrs	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	431a      	orrs	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	431a      	orrs	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	431a      	orrs	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009940:	431a      	orrs	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	431a      	orrs	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800994c:	ea42 0103 	orr.w	r1, r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d113      	bne.n	800998c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009976:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800998a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0201 	bic.w	r2, r2, #1
 800999a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00a      	beq.n	80099be <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	40013000 	.word	0x40013000
 80099dc:	40003800 	.word	0x40003800
 80099e0:	40003c00 	.word	0x40003c00

080099e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f0:	095b      	lsrs	r3, r3, #5
 80099f2:	3301      	adds	r3, #1
 80099f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	3301      	adds	r3, #1
 80099fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	3307      	adds	r3, #7
 8009a02:	08db      	lsrs	r3, r3, #3
 8009a04:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e042      	b.n	8009ab2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7f7 fc4c 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2224      	movs	r2, #36	; 0x24
 8009a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0201 	bic.w	r2, r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f82d 	bl	8009abc <UART_SetConfig>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e022      	b.n	8009ab2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fdd1 	bl	800a61c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 0201 	orr.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fe58 	bl	800a760 <UART_CheckIdleState>
 8009ab0:	4603      	mov	r3, r0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009abc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009ac0:	b08e      	sub	sp, #56	; 0x38
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	431a      	orrs	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aea:	4313      	orrs	r3, r2
 8009aec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	4bc1      	ldr	r3, [pc, #772]	; (8009dfc <UART_SetConfig+0x340>)
 8009af6:	4013      	ands	r3, r2
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009afe:	430b      	orrs	r3, r1
 8009b00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	430a      	orrs	r2, r1
 8009b16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4ab7      	ldr	r2, [pc, #732]	; (8009e00 <UART_SetConfig+0x344>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d004      	beq.n	8009b32 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	4bb2      	ldr	r3, [pc, #712]	; (8009e04 <UART_SetConfig+0x348>)
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6812      	ldr	r2, [r2, #0]
 8009b40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b42:	430b      	orrs	r3, r1
 8009b44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	f023 010f 	bic.w	r1, r3, #15
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4aa9      	ldr	r2, [pc, #676]	; (8009e08 <UART_SetConfig+0x34c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d177      	bne.n	8009c56 <UART_SetConfig+0x19a>
 8009b66:	4ba9      	ldr	r3, [pc, #676]	; (8009e0c <UART_SetConfig+0x350>)
 8009b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b6e:	2b28      	cmp	r3, #40	; 0x28
 8009b70:	d86c      	bhi.n	8009c4c <UART_SetConfig+0x190>
 8009b72:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <UART_SetConfig+0xbc>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009c1d 	.word	0x08009c1d
 8009b7c:	08009c4d 	.word	0x08009c4d
 8009b80:	08009c4d 	.word	0x08009c4d
 8009b84:	08009c4d 	.word	0x08009c4d
 8009b88:	08009c4d 	.word	0x08009c4d
 8009b8c:	08009c4d 	.word	0x08009c4d
 8009b90:	08009c4d 	.word	0x08009c4d
 8009b94:	08009c4d 	.word	0x08009c4d
 8009b98:	08009c25 	.word	0x08009c25
 8009b9c:	08009c4d 	.word	0x08009c4d
 8009ba0:	08009c4d 	.word	0x08009c4d
 8009ba4:	08009c4d 	.word	0x08009c4d
 8009ba8:	08009c4d 	.word	0x08009c4d
 8009bac:	08009c4d 	.word	0x08009c4d
 8009bb0:	08009c4d 	.word	0x08009c4d
 8009bb4:	08009c4d 	.word	0x08009c4d
 8009bb8:	08009c2d 	.word	0x08009c2d
 8009bbc:	08009c4d 	.word	0x08009c4d
 8009bc0:	08009c4d 	.word	0x08009c4d
 8009bc4:	08009c4d 	.word	0x08009c4d
 8009bc8:	08009c4d 	.word	0x08009c4d
 8009bcc:	08009c4d 	.word	0x08009c4d
 8009bd0:	08009c4d 	.word	0x08009c4d
 8009bd4:	08009c4d 	.word	0x08009c4d
 8009bd8:	08009c35 	.word	0x08009c35
 8009bdc:	08009c4d 	.word	0x08009c4d
 8009be0:	08009c4d 	.word	0x08009c4d
 8009be4:	08009c4d 	.word	0x08009c4d
 8009be8:	08009c4d 	.word	0x08009c4d
 8009bec:	08009c4d 	.word	0x08009c4d
 8009bf0:	08009c4d 	.word	0x08009c4d
 8009bf4:	08009c4d 	.word	0x08009c4d
 8009bf8:	08009c3d 	.word	0x08009c3d
 8009bfc:	08009c4d 	.word	0x08009c4d
 8009c00:	08009c4d 	.word	0x08009c4d
 8009c04:	08009c4d 	.word	0x08009c4d
 8009c08:	08009c4d 	.word	0x08009c4d
 8009c0c:	08009c4d 	.word	0x08009c4d
 8009c10:	08009c4d 	.word	0x08009c4d
 8009c14:	08009c4d 	.word	0x08009c4d
 8009c18:	08009c45 	.word	0x08009c45
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e233      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c24:	2304      	movs	r3, #4
 8009c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2a:	e22f      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c2c:	2308      	movs	r3, #8
 8009c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c32:	e22b      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c34:	2310      	movs	r3, #16
 8009c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3a:	e227      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c3c:	2320      	movs	r3, #32
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e223      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c44:	2340      	movs	r3, #64	; 0x40
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e21f      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c4c:	2380      	movs	r3, #128	; 0x80
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c52:	bf00      	nop
 8009c54:	e21a      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a6d      	ldr	r2, [pc, #436]	; (8009e10 <UART_SetConfig+0x354>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d132      	bne.n	8009cc6 <UART_SetConfig+0x20a>
 8009c60:	4b6a      	ldr	r3, [pc, #424]	; (8009e0c <UART_SetConfig+0x350>)
 8009c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c64:	f003 0307 	and.w	r3, r3, #7
 8009c68:	2b05      	cmp	r3, #5
 8009c6a:	d827      	bhi.n	8009cbc <UART_SetConfig+0x200>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x1b8>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c9d 	.word	0x08009c9d
 8009c80:	08009ca5 	.word	0x08009ca5
 8009c84:	08009cad 	.word	0x08009cad
 8009c88:	08009cb5 	.word	0x08009cb5
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c92:	e1fb      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c94:	2304      	movs	r3, #4
 8009c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9a:	e1f7      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009c9c:	2308      	movs	r3, #8
 8009c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca2:	e1f3      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009caa:	e1ef      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009cac:	2320      	movs	r3, #32
 8009cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb2:	e1eb      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009cb4:	2340      	movs	r3, #64	; 0x40
 8009cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cba:	e1e7      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009cbc:	2380      	movs	r3, #128	; 0x80
 8009cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc2:	bf00      	nop
 8009cc4:	e1e2      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a52      	ldr	r2, [pc, #328]	; (8009e14 <UART_SetConfig+0x358>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d132      	bne.n	8009d36 <UART_SetConfig+0x27a>
 8009cd0:	4b4e      	ldr	r3, [pc, #312]	; (8009e0c <UART_SetConfig+0x350>)
 8009cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	2b05      	cmp	r3, #5
 8009cda:	d827      	bhi.n	8009d2c <UART_SetConfig+0x270>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <UART_SetConfig+0x228>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009cfd 	.word	0x08009cfd
 8009ce8:	08009d05 	.word	0x08009d05
 8009cec:	08009d0d 	.word	0x08009d0d
 8009cf0:	08009d15 	.word	0x08009d15
 8009cf4:	08009d1d 	.word	0x08009d1d
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d02:	e1c3      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d04:	2304      	movs	r3, #4
 8009d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0a:	e1bf      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d12:	e1bb      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d14:	2310      	movs	r3, #16
 8009d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1a:	e1b7      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d22:	e1b3      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d24:	2340      	movs	r3, #64	; 0x40
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2a:	e1af      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d2c:	2380      	movs	r3, #128	; 0x80
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	bf00      	nop
 8009d34:	e1aa      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a37      	ldr	r2, [pc, #220]	; (8009e18 <UART_SetConfig+0x35c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d132      	bne.n	8009da6 <UART_SetConfig+0x2ea>
 8009d40:	4b32      	ldr	r3, [pc, #200]	; (8009e0c <UART_SetConfig+0x350>)
 8009d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d44:	f003 0307 	and.w	r3, r3, #7
 8009d48:	2b05      	cmp	r3, #5
 8009d4a:	d827      	bhi.n	8009d9c <UART_SetConfig+0x2e0>
 8009d4c:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <UART_SetConfig+0x298>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d6d 	.word	0x08009d6d
 8009d58:	08009d75 	.word	0x08009d75
 8009d5c:	08009d7d 	.word	0x08009d7d
 8009d60:	08009d85 	.word	0x08009d85
 8009d64:	08009d8d 	.word	0x08009d8d
 8009d68:	08009d95 	.word	0x08009d95
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d72:	e18b      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d74:	2304      	movs	r3, #4
 8009d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7a:	e187      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d82:	e183      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d84:	2310      	movs	r3, #16
 8009d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8a:	e17f      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d8c:	2320      	movs	r3, #32
 8009d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d92:	e17b      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d94:	2340      	movs	r3, #64	; 0x40
 8009d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9a:	e177      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009d9c:	2380      	movs	r3, #128	; 0x80
 8009d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da2:	bf00      	nop
 8009da4:	e172      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a1c      	ldr	r2, [pc, #112]	; (8009e1c <UART_SetConfig+0x360>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d144      	bne.n	8009e3a <UART_SetConfig+0x37e>
 8009db0:	4b16      	ldr	r3, [pc, #88]	; (8009e0c <UART_SetConfig+0x350>)
 8009db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	2b05      	cmp	r3, #5
 8009dba:	d839      	bhi.n	8009e30 <UART_SetConfig+0x374>
 8009dbc:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <UART_SetConfig+0x308>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009ddd 	.word	0x08009ddd
 8009dc8:	08009de5 	.word	0x08009de5
 8009dcc:	08009ded 	.word	0x08009ded
 8009dd0:	08009df5 	.word	0x08009df5
 8009dd4:	08009e21 	.word	0x08009e21
 8009dd8:	08009e29 	.word	0x08009e29
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de2:	e153      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009de4:	2304      	movs	r3, #4
 8009de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dea:	e14f      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009dec:	2308      	movs	r3, #8
 8009dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df2:	e14b      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009df4:	2310      	movs	r3, #16
 8009df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfa:	e147      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009dfc:	cfff69f3 	.word	0xcfff69f3
 8009e00:	58000c00 	.word	0x58000c00
 8009e04:	11fff4ff 	.word	0x11fff4ff
 8009e08:	40011000 	.word	0x40011000
 8009e0c:	58024400 	.word	0x58024400
 8009e10:	40004400 	.word	0x40004400
 8009e14:	40004800 	.word	0x40004800
 8009e18:	40004c00 	.word	0x40004c00
 8009e1c:	40005000 	.word	0x40005000
 8009e20:	2320      	movs	r3, #32
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e131      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2e:	e12d      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e36:	bf00      	nop
 8009e38:	e128      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4ab6      	ldr	r2, [pc, #728]	; (800a118 <UART_SetConfig+0x65c>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d178      	bne.n	8009f36 <UART_SetConfig+0x47a>
 8009e44:	4bb5      	ldr	r3, [pc, #724]	; (800a11c <UART_SetConfig+0x660>)
 8009e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e4c:	2b28      	cmp	r3, #40	; 0x28
 8009e4e:	d86d      	bhi.n	8009f2c <UART_SetConfig+0x470>
 8009e50:	a201      	add	r2, pc, #4	; (adr r2, 8009e58 <UART_SetConfig+0x39c>)
 8009e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e56:	bf00      	nop
 8009e58:	08009efd 	.word	0x08009efd
 8009e5c:	08009f2d 	.word	0x08009f2d
 8009e60:	08009f2d 	.word	0x08009f2d
 8009e64:	08009f2d 	.word	0x08009f2d
 8009e68:	08009f2d 	.word	0x08009f2d
 8009e6c:	08009f2d 	.word	0x08009f2d
 8009e70:	08009f2d 	.word	0x08009f2d
 8009e74:	08009f2d 	.word	0x08009f2d
 8009e78:	08009f05 	.word	0x08009f05
 8009e7c:	08009f2d 	.word	0x08009f2d
 8009e80:	08009f2d 	.word	0x08009f2d
 8009e84:	08009f2d 	.word	0x08009f2d
 8009e88:	08009f2d 	.word	0x08009f2d
 8009e8c:	08009f2d 	.word	0x08009f2d
 8009e90:	08009f2d 	.word	0x08009f2d
 8009e94:	08009f2d 	.word	0x08009f2d
 8009e98:	08009f0d 	.word	0x08009f0d
 8009e9c:	08009f2d 	.word	0x08009f2d
 8009ea0:	08009f2d 	.word	0x08009f2d
 8009ea4:	08009f2d 	.word	0x08009f2d
 8009ea8:	08009f2d 	.word	0x08009f2d
 8009eac:	08009f2d 	.word	0x08009f2d
 8009eb0:	08009f2d 	.word	0x08009f2d
 8009eb4:	08009f2d 	.word	0x08009f2d
 8009eb8:	08009f15 	.word	0x08009f15
 8009ebc:	08009f2d 	.word	0x08009f2d
 8009ec0:	08009f2d 	.word	0x08009f2d
 8009ec4:	08009f2d 	.word	0x08009f2d
 8009ec8:	08009f2d 	.word	0x08009f2d
 8009ecc:	08009f2d 	.word	0x08009f2d
 8009ed0:	08009f2d 	.word	0x08009f2d
 8009ed4:	08009f2d 	.word	0x08009f2d
 8009ed8:	08009f1d 	.word	0x08009f1d
 8009edc:	08009f2d 	.word	0x08009f2d
 8009ee0:	08009f2d 	.word	0x08009f2d
 8009ee4:	08009f2d 	.word	0x08009f2d
 8009ee8:	08009f2d 	.word	0x08009f2d
 8009eec:	08009f2d 	.word	0x08009f2d
 8009ef0:	08009f2d 	.word	0x08009f2d
 8009ef4:	08009f2d 	.word	0x08009f2d
 8009ef8:	08009f25 	.word	0x08009f25
 8009efc:	2301      	movs	r3, #1
 8009efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f02:	e0c3      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f04:	2304      	movs	r3, #4
 8009f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0a:	e0bf      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f0c:	2308      	movs	r3, #8
 8009f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f12:	e0bb      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f14:	2310      	movs	r3, #16
 8009f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1a:	e0b7      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f1c:	2320      	movs	r3, #32
 8009f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f22:	e0b3      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f24:	2340      	movs	r3, #64	; 0x40
 8009f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2a:	e0af      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	bf00      	nop
 8009f34:	e0aa      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a79      	ldr	r2, [pc, #484]	; (800a120 <UART_SetConfig+0x664>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d132      	bne.n	8009fa6 <UART_SetConfig+0x4ea>
 8009f40:	4b76      	ldr	r3, [pc, #472]	; (800a11c <UART_SetConfig+0x660>)
 8009f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f44:	f003 0307 	and.w	r3, r3, #7
 8009f48:	2b05      	cmp	r3, #5
 8009f4a:	d827      	bhi.n	8009f9c <UART_SetConfig+0x4e0>
 8009f4c:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <UART_SetConfig+0x498>)
 8009f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f52:	bf00      	nop
 8009f54:	08009f6d 	.word	0x08009f6d
 8009f58:	08009f75 	.word	0x08009f75
 8009f5c:	08009f7d 	.word	0x08009f7d
 8009f60:	08009f85 	.word	0x08009f85
 8009f64:	08009f8d 	.word	0x08009f8d
 8009f68:	08009f95 	.word	0x08009f95
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f72:	e08b      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f74:	2304      	movs	r3, #4
 8009f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7a:	e087      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f82:	e083      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f84:	2310      	movs	r3, #16
 8009f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8a:	e07f      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f92:	e07b      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f94:	2340      	movs	r3, #64	; 0x40
 8009f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9a:	e077      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009f9c:	2380      	movs	r3, #128	; 0x80
 8009f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa2:	bf00      	nop
 8009fa4:	e072      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a5e      	ldr	r2, [pc, #376]	; (800a124 <UART_SetConfig+0x668>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d132      	bne.n	800a016 <UART_SetConfig+0x55a>
 8009fb0:	4b5a      	ldr	r3, [pc, #360]	; (800a11c <UART_SetConfig+0x660>)
 8009fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb4:	f003 0307 	and.w	r3, r3, #7
 8009fb8:	2b05      	cmp	r3, #5
 8009fba:	d827      	bhi.n	800a00c <UART_SetConfig+0x550>
 8009fbc:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <UART_SetConfig+0x508>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	08009fdd 	.word	0x08009fdd
 8009fc8:	08009fe5 	.word	0x08009fe5
 8009fcc:	08009fed 	.word	0x08009fed
 8009fd0:	08009ff5 	.word	0x08009ff5
 8009fd4:	08009ffd 	.word	0x08009ffd
 8009fd8:	0800a005 	.word	0x0800a005
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe2:	e053      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fea:	e04f      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009fec:	2308      	movs	r3, #8
 8009fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff2:	e04b      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffa:	e047      	b.n	800a08c <UART_SetConfig+0x5d0>
 8009ffc:	2320      	movs	r3, #32
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a002:	e043      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a004:	2340      	movs	r3, #64	; 0x40
 800a006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00a:	e03f      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a00c:	2380      	movs	r3, #128	; 0x80
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a012:	bf00      	nop
 800a014:	e03a      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a43      	ldr	r2, [pc, #268]	; (800a128 <UART_SetConfig+0x66c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d132      	bne.n	800a086 <UART_SetConfig+0x5ca>
 800a020:	4b3e      	ldr	r3, [pc, #248]	; (800a11c <UART_SetConfig+0x660>)
 800a022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	2b05      	cmp	r3, #5
 800a02a:	d827      	bhi.n	800a07c <UART_SetConfig+0x5c0>
 800a02c:	a201      	add	r2, pc, #4	; (adr r2, 800a034 <UART_SetConfig+0x578>)
 800a02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a032:	bf00      	nop
 800a034:	0800a04d 	.word	0x0800a04d
 800a038:	0800a055 	.word	0x0800a055
 800a03c:	0800a05d 	.word	0x0800a05d
 800a040:	0800a065 	.word	0x0800a065
 800a044:	0800a06d 	.word	0x0800a06d
 800a048:	0800a075 	.word	0x0800a075
 800a04c:	2302      	movs	r3, #2
 800a04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a052:	e01b      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a054:	2304      	movs	r3, #4
 800a056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05a:	e017      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a05c:	2308      	movs	r3, #8
 800a05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a062:	e013      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a064:	2310      	movs	r3, #16
 800a066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06a:	e00f      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a06c:	2320      	movs	r3, #32
 800a06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a072:	e00b      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a074:	2340      	movs	r3, #64	; 0x40
 800a076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07a:	e007      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a07c:	2380      	movs	r3, #128	; 0x80
 800a07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a082:	bf00      	nop
 800a084:	e002      	b.n	800a08c <UART_SetConfig+0x5d0>
 800a086:	2380      	movs	r3, #128	; 0x80
 800a088:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a25      	ldr	r2, [pc, #148]	; (800a128 <UART_SetConfig+0x66c>)
 800a092:	4293      	cmp	r3, r2
 800a094:	f040 80b8 	bne.w	800a208 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a098:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d019      	beq.n	800a0d4 <UART_SetConfig+0x618>
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	dc04      	bgt.n	800a0ae <UART_SetConfig+0x5f2>
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d009      	beq.n	800a0bc <UART_SetConfig+0x600>
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	d00b      	beq.n	800a0c4 <UART_SetConfig+0x608>
 800a0ac:	e042      	b.n	800a134 <UART_SetConfig+0x678>
 800a0ae:	2b20      	cmp	r3, #32
 800a0b0:	d02b      	beq.n	800a10a <UART_SetConfig+0x64e>
 800a0b2:	2b40      	cmp	r3, #64	; 0x40
 800a0b4:	d02c      	beq.n	800a110 <UART_SetConfig+0x654>
 800a0b6:	2b10      	cmp	r3, #16
 800a0b8:	d014      	beq.n	800a0e4 <UART_SetConfig+0x628>
 800a0ba:	e03b      	b.n	800a134 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0bc:	f7fd fa80 	bl	80075c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0c2:	e03d      	b.n	800a140 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0c4:	f107 0314 	add.w	r3, r7, #20
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fd fa8f 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d2:	e035      	b.n	800a140 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d4:	f107 0308 	add.w	r3, r7, #8
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fd fbd3 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0e2:	e02d      	b.n	800a140 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0e4:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <UART_SetConfig+0x660>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d009      	beq.n	800a104 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <UART_SetConfig+0x660>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	08db      	lsrs	r3, r3, #3
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	4a0c      	ldr	r2, [pc, #48]	; (800a12c <UART_SetConfig+0x670>)
 800a0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a100:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a102:	e01d      	b.n	800a140 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a104:	4b09      	ldr	r3, [pc, #36]	; (800a12c <UART_SetConfig+0x670>)
 800a106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a108:	e01a      	b.n	800a140 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a10a:	4b09      	ldr	r3, [pc, #36]	; (800a130 <UART_SetConfig+0x674>)
 800a10c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a10e:	e017      	b.n	800a140 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a116:	e013      	b.n	800a140 <UART_SetConfig+0x684>
 800a118:	40011400 	.word	0x40011400
 800a11c:	58024400 	.word	0x58024400
 800a120:	40007800 	.word	0x40007800
 800a124:	40007c00 	.word	0x40007c00
 800a128:	58000c00 	.word	0x58000c00
 800a12c:	03d09000 	.word	0x03d09000
 800a130:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a13e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 824d 	beq.w	800a5e2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	4aad      	ldr	r2, [pc, #692]	; (800a404 <UART_SetConfig+0x948>)
 800a14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a152:	461a      	mov	r2, r3
 800a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a156:	fbb3 f3f2 	udiv	r3, r3, r2
 800a15a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	4613      	mov	r3, r2
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	4413      	add	r3, r2
 800a166:	6a3a      	ldr	r2, [r7, #32]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d305      	bcc.n	800a178 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a172:	6a3a      	ldr	r2, [r7, #32]
 800a174:	429a      	cmp	r2, r3
 800a176:	d903      	bls.n	800a180 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a17e:	e230      	b.n	800a5e2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	4618      	mov	r0, r3
 800a184:	f04f 0100 	mov.w	r1, #0
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	4a9d      	ldr	r2, [pc, #628]	; (800a404 <UART_SetConfig+0x948>)
 800a18e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a192:	b29b      	uxth	r3, r3
 800a194:	f04f 0400 	mov.w	r4, #0
 800a198:	461a      	mov	r2, r3
 800a19a:	4623      	mov	r3, r4
 800a19c:	f7f6 f8f0 	bl	8000380 <__aeabi_uldivmod>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	f04f 0300 	mov.w	r3, #0
 800a1ac:	f04f 0400 	mov.w	r4, #0
 800a1b0:	0214      	lsls	r4, r2, #8
 800a1b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a1b6:	020b      	lsls	r3, r1, #8
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	6852      	ldr	r2, [r2, #4]
 800a1bc:	0852      	lsrs	r2, r2, #1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	f04f 0200 	mov.w	r2, #0
 800a1c4:	eb13 0b01 	adds.w	fp, r3, r1
 800a1c8:	eb44 0c02 	adc.w	ip, r4, r2
 800a1cc:	4658      	mov	r0, fp
 800a1ce:	4661      	mov	r1, ip
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f04f 0400 	mov.w	r4, #0
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4623      	mov	r3, r4
 800a1dc:	f7f6 f8d0 	bl	8000380 <__aeabi_uldivmod>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ec:	d308      	bcc.n	800a200 <UART_SetConfig+0x744>
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1f4:	d204      	bcs.n	800a200 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fc:	60da      	str	r2, [r3, #12]
 800a1fe:	e1f0      	b.n	800a5e2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a206:	e1ec      	b.n	800a5e2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a210:	f040 8100 	bne.w	800a414 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a218:	2b40      	cmp	r3, #64	; 0x40
 800a21a:	f200 80b7 	bhi.w	800a38c <UART_SetConfig+0x8d0>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <UART_SetConfig+0x768>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a329 	.word	0x0800a329
 800a228:	0800a331 	.word	0x0800a331
 800a22c:	0800a38d 	.word	0x0800a38d
 800a230:	0800a38d 	.word	0x0800a38d
 800a234:	0800a339 	.word	0x0800a339
 800a238:	0800a38d 	.word	0x0800a38d
 800a23c:	0800a38d 	.word	0x0800a38d
 800a240:	0800a38d 	.word	0x0800a38d
 800a244:	0800a349 	.word	0x0800a349
 800a248:	0800a38d 	.word	0x0800a38d
 800a24c:	0800a38d 	.word	0x0800a38d
 800a250:	0800a38d 	.word	0x0800a38d
 800a254:	0800a38d 	.word	0x0800a38d
 800a258:	0800a38d 	.word	0x0800a38d
 800a25c:	0800a38d 	.word	0x0800a38d
 800a260:	0800a38d 	.word	0x0800a38d
 800a264:	0800a359 	.word	0x0800a359
 800a268:	0800a38d 	.word	0x0800a38d
 800a26c:	0800a38d 	.word	0x0800a38d
 800a270:	0800a38d 	.word	0x0800a38d
 800a274:	0800a38d 	.word	0x0800a38d
 800a278:	0800a38d 	.word	0x0800a38d
 800a27c:	0800a38d 	.word	0x0800a38d
 800a280:	0800a38d 	.word	0x0800a38d
 800a284:	0800a38d 	.word	0x0800a38d
 800a288:	0800a38d 	.word	0x0800a38d
 800a28c:	0800a38d 	.word	0x0800a38d
 800a290:	0800a38d 	.word	0x0800a38d
 800a294:	0800a38d 	.word	0x0800a38d
 800a298:	0800a38d 	.word	0x0800a38d
 800a29c:	0800a38d 	.word	0x0800a38d
 800a2a0:	0800a38d 	.word	0x0800a38d
 800a2a4:	0800a37f 	.word	0x0800a37f
 800a2a8:	0800a38d 	.word	0x0800a38d
 800a2ac:	0800a38d 	.word	0x0800a38d
 800a2b0:	0800a38d 	.word	0x0800a38d
 800a2b4:	0800a38d 	.word	0x0800a38d
 800a2b8:	0800a38d 	.word	0x0800a38d
 800a2bc:	0800a38d 	.word	0x0800a38d
 800a2c0:	0800a38d 	.word	0x0800a38d
 800a2c4:	0800a38d 	.word	0x0800a38d
 800a2c8:	0800a38d 	.word	0x0800a38d
 800a2cc:	0800a38d 	.word	0x0800a38d
 800a2d0:	0800a38d 	.word	0x0800a38d
 800a2d4:	0800a38d 	.word	0x0800a38d
 800a2d8:	0800a38d 	.word	0x0800a38d
 800a2dc:	0800a38d 	.word	0x0800a38d
 800a2e0:	0800a38d 	.word	0x0800a38d
 800a2e4:	0800a38d 	.word	0x0800a38d
 800a2e8:	0800a38d 	.word	0x0800a38d
 800a2ec:	0800a38d 	.word	0x0800a38d
 800a2f0:	0800a38d 	.word	0x0800a38d
 800a2f4:	0800a38d 	.word	0x0800a38d
 800a2f8:	0800a38d 	.word	0x0800a38d
 800a2fc:	0800a38d 	.word	0x0800a38d
 800a300:	0800a38d 	.word	0x0800a38d
 800a304:	0800a38d 	.word	0x0800a38d
 800a308:	0800a38d 	.word	0x0800a38d
 800a30c:	0800a38d 	.word	0x0800a38d
 800a310:	0800a38d 	.word	0x0800a38d
 800a314:	0800a38d 	.word	0x0800a38d
 800a318:	0800a38d 	.word	0x0800a38d
 800a31c:	0800a38d 	.word	0x0800a38d
 800a320:	0800a38d 	.word	0x0800a38d
 800a324:	0800a385 	.word	0x0800a385
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a328:	f7fb ffb8 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 800a32c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a32e:	e033      	b.n	800a398 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a330:	f7fb ffca 	bl	80062c8 <HAL_RCC_GetPCLK2Freq>
 800a334:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a336:	e02f      	b.n	800a398 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a338:	f107 0314 	add.w	r3, r7, #20
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fd f955 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a346:	e027      	b.n	800a398 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a348:	f107 0308 	add.w	r3, r7, #8
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fd fa99 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a356:	e01f      	b.n	800a398 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a358:	4b2b      	ldr	r3, [pc, #172]	; (800a408 <UART_SetConfig+0x94c>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0320 	and.w	r3, r3, #32
 800a360:	2b00      	cmp	r3, #0
 800a362:	d009      	beq.n	800a378 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a364:	4b28      	ldr	r3, [pc, #160]	; (800a408 <UART_SetConfig+0x94c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	08db      	lsrs	r3, r3, #3
 800a36a:	f003 0303 	and.w	r3, r3, #3
 800a36e:	4a27      	ldr	r2, [pc, #156]	; (800a40c <UART_SetConfig+0x950>)
 800a370:	fa22 f303 	lsr.w	r3, r2, r3
 800a374:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a376:	e00f      	b.n	800a398 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a378:	4b24      	ldr	r3, [pc, #144]	; (800a40c <UART_SetConfig+0x950>)
 800a37a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a37c:	e00c      	b.n	800a398 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a37e:	4b24      	ldr	r3, [pc, #144]	; (800a410 <UART_SetConfig+0x954>)
 800a380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a382:	e009      	b.n	800a398 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a38a:	e005      	b.n	800a398 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 8121 	beq.w	800a5e2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	4a17      	ldr	r2, [pc, #92]	; (800a404 <UART_SetConfig+0x948>)
 800a3a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3b2:	005a      	lsls	r2, r3, #1
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	085b      	lsrs	r3, r3, #1
 800a3ba:	441a      	add	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ca:	2b0f      	cmp	r3, #15
 800a3cc:	d916      	bls.n	800a3fc <UART_SetConfig+0x940>
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3d4:	d212      	bcs.n	800a3fc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f023 030f 	bic.w	r3, r3, #15
 800a3de:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a3f8:	60da      	str	r2, [r3, #12]
 800a3fa:	e0f2      	b.n	800a5e2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a402:	e0ee      	b.n	800a5e2 <UART_SetConfig+0xb26>
 800a404:	080138f8 	.word	0x080138f8
 800a408:	58024400 	.word	0x58024400
 800a40c:	03d09000 	.word	0x03d09000
 800a410:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a418:	2b40      	cmp	r3, #64	; 0x40
 800a41a:	f200 80b7 	bhi.w	800a58c <UART_SetConfig+0xad0>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <UART_SetConfig+0x968>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a529 	.word	0x0800a529
 800a428:	0800a531 	.word	0x0800a531
 800a42c:	0800a58d 	.word	0x0800a58d
 800a430:	0800a58d 	.word	0x0800a58d
 800a434:	0800a539 	.word	0x0800a539
 800a438:	0800a58d 	.word	0x0800a58d
 800a43c:	0800a58d 	.word	0x0800a58d
 800a440:	0800a58d 	.word	0x0800a58d
 800a444:	0800a549 	.word	0x0800a549
 800a448:	0800a58d 	.word	0x0800a58d
 800a44c:	0800a58d 	.word	0x0800a58d
 800a450:	0800a58d 	.word	0x0800a58d
 800a454:	0800a58d 	.word	0x0800a58d
 800a458:	0800a58d 	.word	0x0800a58d
 800a45c:	0800a58d 	.word	0x0800a58d
 800a460:	0800a58d 	.word	0x0800a58d
 800a464:	0800a559 	.word	0x0800a559
 800a468:	0800a58d 	.word	0x0800a58d
 800a46c:	0800a58d 	.word	0x0800a58d
 800a470:	0800a58d 	.word	0x0800a58d
 800a474:	0800a58d 	.word	0x0800a58d
 800a478:	0800a58d 	.word	0x0800a58d
 800a47c:	0800a58d 	.word	0x0800a58d
 800a480:	0800a58d 	.word	0x0800a58d
 800a484:	0800a58d 	.word	0x0800a58d
 800a488:	0800a58d 	.word	0x0800a58d
 800a48c:	0800a58d 	.word	0x0800a58d
 800a490:	0800a58d 	.word	0x0800a58d
 800a494:	0800a58d 	.word	0x0800a58d
 800a498:	0800a58d 	.word	0x0800a58d
 800a49c:	0800a58d 	.word	0x0800a58d
 800a4a0:	0800a58d 	.word	0x0800a58d
 800a4a4:	0800a57f 	.word	0x0800a57f
 800a4a8:	0800a58d 	.word	0x0800a58d
 800a4ac:	0800a58d 	.word	0x0800a58d
 800a4b0:	0800a58d 	.word	0x0800a58d
 800a4b4:	0800a58d 	.word	0x0800a58d
 800a4b8:	0800a58d 	.word	0x0800a58d
 800a4bc:	0800a58d 	.word	0x0800a58d
 800a4c0:	0800a58d 	.word	0x0800a58d
 800a4c4:	0800a58d 	.word	0x0800a58d
 800a4c8:	0800a58d 	.word	0x0800a58d
 800a4cc:	0800a58d 	.word	0x0800a58d
 800a4d0:	0800a58d 	.word	0x0800a58d
 800a4d4:	0800a58d 	.word	0x0800a58d
 800a4d8:	0800a58d 	.word	0x0800a58d
 800a4dc:	0800a58d 	.word	0x0800a58d
 800a4e0:	0800a58d 	.word	0x0800a58d
 800a4e4:	0800a58d 	.word	0x0800a58d
 800a4e8:	0800a58d 	.word	0x0800a58d
 800a4ec:	0800a58d 	.word	0x0800a58d
 800a4f0:	0800a58d 	.word	0x0800a58d
 800a4f4:	0800a58d 	.word	0x0800a58d
 800a4f8:	0800a58d 	.word	0x0800a58d
 800a4fc:	0800a58d 	.word	0x0800a58d
 800a500:	0800a58d 	.word	0x0800a58d
 800a504:	0800a58d 	.word	0x0800a58d
 800a508:	0800a58d 	.word	0x0800a58d
 800a50c:	0800a58d 	.word	0x0800a58d
 800a510:	0800a58d 	.word	0x0800a58d
 800a514:	0800a58d 	.word	0x0800a58d
 800a518:	0800a58d 	.word	0x0800a58d
 800a51c:	0800a58d 	.word	0x0800a58d
 800a520:	0800a58d 	.word	0x0800a58d
 800a524:	0800a585 	.word	0x0800a585
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a528:	f7fb feb8 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 800a52c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a52e:	e033      	b.n	800a598 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a530:	f7fb feca 	bl	80062c8 <HAL_RCC_GetPCLK2Freq>
 800a534:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a536:	e02f      	b.n	800a598 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a538:	f107 0314 	add.w	r3, r7, #20
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fd f855 	bl	80075ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a546:	e027      	b.n	800a598 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a548:	f107 0308 	add.w	r3, r7, #8
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fd f999 	bl	8007884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a556:	e01f      	b.n	800a598 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a558:	4b2c      	ldr	r3, [pc, #176]	; (800a60c <UART_SetConfig+0xb50>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0320 	and.w	r3, r3, #32
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a564:	4b29      	ldr	r3, [pc, #164]	; (800a60c <UART_SetConfig+0xb50>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	08db      	lsrs	r3, r3, #3
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	4a28      	ldr	r2, [pc, #160]	; (800a610 <UART_SetConfig+0xb54>)
 800a570:	fa22 f303 	lsr.w	r3, r2, r3
 800a574:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a576:	e00f      	b.n	800a598 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a578:	4b25      	ldr	r3, [pc, #148]	; (800a610 <UART_SetConfig+0xb54>)
 800a57a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a57c:	e00c      	b.n	800a598 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a57e:	4b25      	ldr	r3, [pc, #148]	; (800a614 <UART_SetConfig+0xb58>)
 800a580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a582:	e009      	b.n	800a598 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a58a:	e005      	b.n	800a598 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a596:	bf00      	nop
    }

    if (pclk != 0U)
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d021      	beq.n	800a5e2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	4a1d      	ldr	r2, [pc, #116]	; (800a618 <UART_SetConfig+0xb5c>)
 800a5a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	085b      	lsrs	r3, r3, #1
 800a5b6:	441a      	add	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	2b0f      	cmp	r3, #15
 800a5c8:	d908      	bls.n	800a5dc <UART_SetConfig+0xb20>
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d0:	d204      	bcs.n	800a5dc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5d8:	60da      	str	r2, [r3, #12]
 800a5da:	e002      	b.n	800a5e2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a5fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a602:	4618      	mov	r0, r3
 800a604:	3738      	adds	r7, #56	; 0x38
 800a606:	46bd      	mov	sp, r7
 800a608:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a60c:	58024400 	.word	0x58024400
 800a610:	03d09000 	.word	0x03d09000
 800a614:	003d0900 	.word	0x003d0900
 800a618:	080138f8 	.word	0x080138f8

0800a61c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00a      	beq.n	800a646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	f003 0302 	and.w	r3, r3, #2
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00a      	beq.n	800a68a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68e:	f003 0308 	and.w	r3, r3, #8
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b0:	f003 0310 	and.w	r3, r3, #16
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d01a      	beq.n	800a732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a71a:	d10a      	bne.n	800a732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	430a      	orrs	r2, r1
 800a730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00a      	beq.n	800a754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	430a      	orrs	r2, r1
 800a752:	605a      	str	r2, [r3, #4]
  }
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af02      	add	r7, sp, #8
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a770:	f7f7 f86a 	bl	8001848 <HAL_GetTick>
 800a774:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0308 	and.w	r3, r3, #8
 800a780:	2b08      	cmp	r3, #8
 800a782:	d10e      	bne.n	800a7a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f82c 	bl	800a7f0 <UART_WaitOnFlagUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e022      	b.n	800a7e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	d10e      	bne.n	800a7ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f816 	bl	800a7f0 <UART_WaitOnFlagUntilTimeout>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e00c      	b.n	800a7e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a800:	e062      	b.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a808:	d05e      	beq.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a80a:	f7f7 f81d 	bl	8001848 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	429a      	cmp	r2, r3
 800a818:	d302      	bcc.n	800a820 <UART_WaitOnFlagUntilTimeout+0x30>
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11d      	bne.n	800a85c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a82e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 0201 	bic.w	r2, r2, #1
 800a83e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2220      	movs	r2, #32
 800a844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2220      	movs	r2, #32
 800a84c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a858:	2303      	movs	r3, #3
 800a85a:	e045      	b.n	800a8e8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0304 	and.w	r3, r3, #4
 800a866:	2b00      	cmp	r3, #0
 800a868:	d02e      	beq.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a878:	d126      	bne.n	800a8c8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a882:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a892:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 0201 	bic.w	r2, r2, #1
 800a8a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e00f      	b.n	800a8e8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69da      	ldr	r2, [r3, #28]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	bf0c      	ite	eq
 800a8d8:	2301      	moveq	r3, #1
 800a8da:	2300      	movne	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d08d      	beq.n	800a802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d101      	bne.n	800a906 <HAL_UARTEx_DisableFifoMode+0x16>
 800a902:	2302      	movs	r3, #2
 800a904:	e027      	b.n	800a956 <HAL_UARTEx_DisableFifoMode+0x66>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2224      	movs	r2, #36	; 0x24
 800a912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f022 0201 	bic.w	r2, r2, #1
 800a92c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a934:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2220      	movs	r2, #32
 800a948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a972:	2b01      	cmp	r3, #1
 800a974:	d101      	bne.n	800a97a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a976:	2302      	movs	r3, #2
 800a978:	e02d      	b.n	800a9d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2224      	movs	r2, #36	; 0x24
 800a986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f850 	bl	800aa5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d101      	bne.n	800a9f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	e02d      	b.n	800aa52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2224      	movs	r2, #36	; 0x24
 800aa02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0201 	bic.w	r2, r2, #1
 800aa1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f812 	bl	800aa5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
	...

0800aa5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b089      	sub	sp, #36	; 0x24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aa64:	4a2f      	ldr	r2, [pc, #188]	; (800ab24 <UARTEx_SetNbDataToProcess+0xc8>)
 800aa66:	f107 0314 	add.w	r3, r7, #20
 800aa6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa6e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aa72:	4a2d      	ldr	r2, [pc, #180]	; (800ab28 <UARTEx_SetNbDataToProcess+0xcc>)
 800aa74:	f107 030c 	add.w	r3, r7, #12
 800aa78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa7c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d108      	bne.n	800aa9a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa98:	e03d      	b.n	800ab16 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa9a:	2310      	movs	r3, #16
 800aa9c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa9e:	2310      	movs	r3, #16
 800aaa0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	0e5b      	lsrs	r3, r3, #25
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	f003 0307 	and.w	r3, r3, #7
 800aab0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	0f5b      	lsrs	r3, r3, #29
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	f003 0307 	and.w	r3, r3, #7
 800aac0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aac2:	7fbb      	ldrb	r3, [r7, #30]
 800aac4:	7f3a      	ldrb	r2, [r7, #28]
 800aac6:	f107 0120 	add.w	r1, r7, #32
 800aaca:	440a      	add	r2, r1
 800aacc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aad0:	fb02 f303 	mul.w	r3, r2, r3
 800aad4:	7f3a      	ldrb	r2, [r7, #28]
 800aad6:	f107 0120 	add.w	r1, r7, #32
 800aada:	440a      	add	r2, r1
 800aadc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aae0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aaec:	7ffb      	ldrb	r3, [r7, #31]
 800aaee:	7f7a      	ldrb	r2, [r7, #29]
 800aaf0:	f107 0120 	add.w	r1, r7, #32
 800aaf4:	440a      	add	r2, r1
 800aaf6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aafa:	fb02 f303 	mul.w	r3, r2, r3
 800aafe:	7f7a      	ldrb	r2, [r7, #29]
 800ab00:	f107 0120 	add.w	r1, r7, #32
 800ab04:	440a      	add	r2, r1
 800ab06:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ab0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab16:	bf00      	nop
 800ab18:	3724      	adds	r7, #36	; 0x24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	08013848 	.word	0x08013848
 800ab28:	08013850 	.word	0x08013850

0800ab2c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ab2c:	b084      	sub	sp, #16
 800ab2e:	b480      	push	{r7}
 800ab30:	b085      	sub	sp, #20
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	f107 001c 	add.w	r0, r7, #28
 800ab3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ab42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ab44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ab46:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ab4a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ab4e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ab52:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <SDMMC_Init+0x50>)
 800ab60:	4013      	ands	r3, r2
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	b004      	add	sp, #16
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	ffc02c00 	.word	0xffc02c00

0800ab80 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f043 0203 	orr.w	r2, r3, #3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800abde:	b480      	push	{r7}
 800abe0:	b083      	sub	sp, #12
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0303 	and.w	r3, r3, #3
}
 800abee:	4618      	mov	r0, r3
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
	...

0800abfc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac1a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ac20:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ac26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68da      	ldr	r2, [r3, #12]
 800ac32:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <SDMMC_SendCommand+0x50>)
 800ac34:	4013      	ands	r3, r2
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	431a      	orrs	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	fffee0c0 	.word	0xfffee0c0

0800ac50 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	b2db      	uxtb	r3, r3
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3314      	adds	r3, #20
 800ac78:	461a      	mov	r2, r3
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acb6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800acbc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800acc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	431a      	orrs	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800acda:	2300      	movs	r3, #0

}
 800acdc:	4618      	mov	r0, r3
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800acf6:	2310      	movs	r3, #16
 800acf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad00:	2300      	movs	r3, #0
 800ad02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad0a:	f107 0308 	add.w	r3, r7, #8
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7ff ff73 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ad16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad1a:	2110      	movs	r1, #16
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 faaf 	bl	800b280 <SDMMC_GetCmdResp1>
 800ad22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad24:	69fb      	ldr	r3, [r7, #28]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b088      	sub	sp, #32
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad3c:	2311      	movs	r3, #17
 800ad3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad50:	f107 0308 	add.w	r3, r7, #8
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7ff ff50 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad60:	2111      	movs	r1, #17
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fa8c 	bl	800b280 <SDMMC_GetCmdResp1>
 800ad68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3720      	adds	r7, #32
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad82:	2312      	movs	r3, #18
 800ad84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad96:	f107 0308 	add.w	r3, r7, #8
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff ff2d 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ada2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada6:	2112      	movs	r1, #18
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fa69 	bl	800b280 <SDMMC_GetCmdResp1>
 800adae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb0:	69fb      	ldr	r3, [r7, #28]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3720      	adds	r7, #32
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b088      	sub	sp, #32
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800adc8:	2318      	movs	r3, #24
 800adca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800add0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800add6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800addc:	f107 0308 	add.w	r3, r7, #8
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7ff ff0a 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ade8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adec:	2118      	movs	r1, #24
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fa46 	bl	800b280 <SDMMC_GetCmdResp1>
 800adf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adf6:	69fb      	ldr	r3, [r7, #28]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3720      	adds	r7, #32
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b088      	sub	sp, #32
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ae0e:	2319      	movs	r3, #25
 800ae10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae22:	f107 0308 	add.w	r3, r7, #8
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff fee7 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae32:	2119      	movs	r1, #25
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fa23 	bl	800b280 <SDMMC_GetCmdResp1>
 800ae3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae3c:	69fb      	ldr	r3, [r7, #28]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3720      	adds	r7, #32
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ae50:	2300      	movs	r3, #0
 800ae52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ae54:	230c      	movs	r3, #12
 800ae56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae66:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae80:	f107 0308 	add.w	r3, r7, #8
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff feb8 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ae8c:	4a0b      	ldr	r2, [pc, #44]	; (800aebc <SDMMC_CmdStopTransfer+0x74>)
 800ae8e:	210c      	movs	r1, #12
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f9f5 	bl	800b280 <SDMMC_GetCmdResp1>
 800ae96:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aeaa:	d101      	bne.n	800aeb0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800aeac:	2300      	movs	r3, #0
 800aeae:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800aeb0:	69fb      	ldr	r3, [r7, #28]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3720      	adds	r7, #32
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	05f5e100 	.word	0x05f5e100

0800aec0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b08a      	sub	sp, #40	; 0x28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aed0:	2307      	movs	r3, #7
 800aed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aed8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeda:	2300      	movs	r3, #0
 800aedc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aee2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aee4:	f107 0310 	add.w	r3, r7, #16
 800aee8:	4619      	mov	r1, r3
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff fe86 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aef0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef4:	2107      	movs	r1, #7
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f000 f9c2 	bl	800b280 <SDMMC_GetCmdResp1>
 800aefc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af00:	4618      	mov	r0, r3
 800af02:	3728      	adds	r7, #40	; 0x28
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800af10:	2300      	movs	r3, #0
 800af12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800af18:	2300      	movs	r3, #0
 800af1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af1c:	2300      	movs	r3, #0
 800af1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af26:	f107 0308 	add.w	r3, r7, #8
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7ff fe65 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f976 	bl	800b224 <SDMMC_GetCmdError>
 800af38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af3a:	69fb      	ldr	r3, [r7, #28]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3720      	adds	r7, #32
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af4c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800af50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af52:	2308      	movs	r3, #8
 800af54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af5c:	2300      	movs	r3, #0
 800af5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af66:	f107 0308 	add.w	r3, r7, #8
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff fe45 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fb78 	bl	800b668 <SDMMC_GetCmdResp7>
 800af78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af7a:	69fb      	ldr	r3, [r7, #28]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3720      	adds	r7, #32
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b088      	sub	sp, #32
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af92:	2337      	movs	r3, #55	; 0x37
 800af94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af9c:	2300      	movs	r3, #0
 800af9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa6:	f107 0308 	add.w	r3, r7, #8
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff fe25 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800afb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb6:	2137      	movs	r1, #55	; 0x37
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f961 	bl	800b280 <SDMMC_GetCmdResp1>
 800afbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afc0:	69fb      	ldr	r3, [r7, #28]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3720      	adds	r7, #32
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b088      	sub	sp, #32
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800afd8:	2329      	movs	r3, #41	; 0x29
 800afda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fe02 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa7d 	bl	800b4f8 <SDMMC_GetCmdResp3>
 800affe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b000:	69fb      	ldr	r3, [r7, #28]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b088      	sub	sp, #32
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b018:	2306      	movs	r3, #6
 800b01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b01c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b02a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b02c:	f107 0308 	add.w	r3, r7, #8
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fde2 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b038:	f241 3288 	movw	r2, #5000	; 0x1388
 800b03c:	2106      	movs	r1, #6
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f91e 	bl	800b280 <SDMMC_GetCmdResp1>
 800b044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b046:	69fb      	ldr	r3, [r7, #28]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3720      	adds	r7, #32
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b05c:	2333      	movs	r3, #51	; 0x33
 800b05e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b060:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b066:	2300      	movs	r3, #0
 800b068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b06a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b06e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b070:	f107 0308 	add.w	r3, r7, #8
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fdc0 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b07c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b080:	2133      	movs	r1, #51	; 0x33
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f8fc 	bl	800b280 <SDMMC_GetCmdResp1>
 800b088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b08a:	69fb      	ldr	r3, [r7, #28]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3720      	adds	r7, #32
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b0a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0b4:	f107 0308 	add.w	r3, r7, #8
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff fd9e 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f9cf 	bl	800b464 <SDMMC_GetCmdResp2>
 800b0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3720      	adds	r7, #32
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b088      	sub	sp, #32
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b0e0:	2309      	movs	r3, #9
 800b0e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b0e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0f4:	f107 0308 	add.w	r3, r7, #8
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff fd7e 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f9af 	bl	800b464 <SDMMC_GetCmdResp2>
 800b106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b108:	69fb      	ldr	r3, [r7, #28]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b088      	sub	sp, #32
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b120:	2303      	movs	r3, #3
 800b122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b124:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b12e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b134:	f107 0308 	add.w	r3, r7, #8
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fd5e 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	2103      	movs	r1, #3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fa17 	bl	800b578 <SDMMC_GetCmdResp6>
 800b14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b14c:	69fb      	ldr	r3, [r7, #28]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3720      	adds	r7, #32
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b088      	sub	sp, #32
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b164:	230d      	movs	r3, #13
 800b166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b16c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b176:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b178:	f107 0308 	add.w	r3, r7, #8
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff fd3c 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b184:	f241 3288 	movw	r2, #5000	; 0x1388
 800b188:	210d      	movs	r1, #13
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f878 	bl	800b280 <SDMMC_GetCmdResp1>
 800b190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b192:	69fb      	ldr	r3, [r7, #28]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3720      	adds	r7, #32
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b1a8:	230d      	movs	r3, #13
 800b1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1bc:	f107 0308 	add.w	r3, r7, #8
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff fd1a 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b1c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1cc:	210d      	movs	r1, #13
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f856 	bl	800b280 <SDMMC_GetCmdResp1>
 800b1d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1d6:	69fb      	ldr	r3, [r7, #28]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3720      	adds	r7, #32
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b1ec:	230b      	movs	r3, #11
 800b1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b200:	f107 0308 	add.w	r3, r7, #8
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff fcf8 	bl	800abfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b210:	210b      	movs	r1, #11
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f834 	bl	800b280 <SDMMC_GetCmdResp1>
 800b218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b21a:	69fb      	ldr	r3, [r7, #28]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3720      	adds	r7, #32
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b22c:	4b11      	ldr	r3, [pc, #68]	; (800b274 <SDMMC_GetCmdError+0x50>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a11      	ldr	r2, [pc, #68]	; (800b278 <SDMMC_GetCmdError+0x54>)
 800b232:	fba2 2303 	umull	r2, r3, r2, r3
 800b236:	0a5b      	lsrs	r3, r3, #9
 800b238:	f241 3288 	movw	r2, #5000	; 0x1388
 800b23c:	fb02 f303 	mul.w	r3, r2, r3
 800b240:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	1e5a      	subs	r2, r3, #1
 800b246:	60fa      	str	r2, [r7, #12]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d102      	bne.n	800b252 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b24c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b250:	e009      	b.n	800b266 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0f1      	beq.n	800b242 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a06      	ldr	r2, [pc, #24]	; (800b27c <SDMMC_GetCmdError+0x58>)
 800b262:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	24000000 	.word	0x24000000
 800b278:	10624dd3 	.word	0x10624dd3
 800b27c:	002000c5 	.word	0x002000c5

0800b280 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	460b      	mov	r3, r1
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b28e:	4b70      	ldr	r3, [pc, #448]	; (800b450 <SDMMC_GetCmdResp1+0x1d0>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a70      	ldr	r2, [pc, #448]	; (800b454 <SDMMC_GetCmdResp1+0x1d4>)
 800b294:	fba2 2303 	umull	r2, r3, r2, r3
 800b298:	0a5a      	lsrs	r2, r3, #9
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	fb02 f303 	mul.w	r3, r2, r3
 800b2a0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	1e5a      	subs	r2, r3, #1
 800b2a6:	61fa      	str	r2, [r7, #28]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d102      	bne.n	800b2b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2b0:	e0c9      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b2b8:	69ba      	ldr	r2, [r7, #24]
 800b2ba:	4b67      	ldr	r3, [pc, #412]	; (800b458 <SDMMC_GetCmdResp1+0x1d8>)
 800b2bc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0ef      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x22>
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1ea      	bne.n	800b2a2 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d004      	beq.n	800b2e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2204      	movs	r2, #4
 800b2dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2de:	2304      	movs	r3, #4
 800b2e0:	e0b1      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e6:	f003 0301 	and.w	r3, r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e0a6      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4a58      	ldr	r2, [pc, #352]	; (800b45c <SDMMC_GetCmdResp1+0x1dc>)
 800b2fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7ff fca6 	bl	800ac50 <SDMMC_GetCommandResponse>
 800b304:	4603      	mov	r3, r0
 800b306:	461a      	mov	r2, r3
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d001      	beq.n	800b312 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b30e:	2301      	movs	r3, #1
 800b310:	e099      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b312:	2100      	movs	r1, #0
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f7ff fca8 	bl	800ac6a <SDMMC_GetResponse>
 800b31a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	4b50      	ldr	r3, [pc, #320]	; (800b460 <SDMMC_GetCmdResp1+0x1e0>)
 800b320:	4013      	ands	r3, r2
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b326:	2300      	movs	r3, #0
 800b328:	e08d      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	da02      	bge.n	800b336 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b334:	e087      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b340:	2340      	movs	r3, #64	; 0x40
 800b342:	e080      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b34e:	2380      	movs	r3, #128	; 0x80
 800b350:	e079      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b35c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b360:	e071      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b36c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b370:	e069      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b380:	e061      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b38c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b390:	e059      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d002      	beq.n	800b3a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b39c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3a0:	e051      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3b0:	e049      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b3bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b3c0:	e041      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b3cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3d0:	e039      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b3dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b3e0:	e031      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b3ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b3f0:	e029      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b3fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b400:	e021      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b40c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b410:	e019      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b41c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b420:	e011      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b42c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b430:	e009      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f003 0308 	and.w	r3, r3, #8
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b43c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b440:	e001      	b.n	800b446 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b446:	4618      	mov	r0, r3
 800b448:	3720      	adds	r7, #32
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	24000000 	.word	0x24000000
 800b454:	10624dd3 	.word	0x10624dd3
 800b458:	00200045 	.word	0x00200045
 800b45c:	002000c5 	.word	0x002000c5
 800b460:	fdffe008 	.word	0xfdffe008

0800b464 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b46c:	4b1f      	ldr	r3, [pc, #124]	; (800b4ec <SDMMC_GetCmdResp2+0x88>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a1f      	ldr	r2, [pc, #124]	; (800b4f0 <SDMMC_GetCmdResp2+0x8c>)
 800b472:	fba2 2303 	umull	r2, r3, r2, r3
 800b476:	0a5b      	lsrs	r3, r3, #9
 800b478:	f241 3288 	movw	r2, #5000	; 0x1388
 800b47c:	fb02 f303 	mul.w	r3, r2, r3
 800b480:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	1e5a      	subs	r2, r3, #1
 800b486:	60fa      	str	r2, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d102      	bne.n	800b492 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b48c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b490:	e026      	b.n	800b4e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b496:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d0ef      	beq.n	800b482 <SDMMC_GetCmdResp2+0x1e>
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1ea      	bne.n	800b482 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b0:	f003 0304 	and.w	r3, r3, #4
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2204      	movs	r2, #4
 800b4bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4be:	2304      	movs	r3, #4
 800b4c0:	e00e      	b.n	800b4e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c6:	f003 0301 	and.w	r3, r3, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d004      	beq.n	800b4d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e003      	b.n	800b4e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a06      	ldr	r2, [pc, #24]	; (800b4f4 <SDMMC_GetCmdResp2+0x90>)
 800b4dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	24000000 	.word	0x24000000
 800b4f0:	10624dd3 	.word	0x10624dd3
 800b4f4:	002000c5 	.word	0x002000c5

0800b4f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b500:	4b1a      	ldr	r3, [pc, #104]	; (800b56c <SDMMC_GetCmdResp3+0x74>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a1a      	ldr	r2, [pc, #104]	; (800b570 <SDMMC_GetCmdResp3+0x78>)
 800b506:	fba2 2303 	umull	r2, r3, r2, r3
 800b50a:	0a5b      	lsrs	r3, r3, #9
 800b50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b510:	fb02 f303 	mul.w	r3, r2, r3
 800b514:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	1e5a      	subs	r2, r3, #1
 800b51a:	60fa      	str	r2, [r7, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b524:	e01b      	b.n	800b55e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b52a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b532:	2b00      	cmp	r3, #0
 800b534:	d0ef      	beq.n	800b516 <SDMMC_GetCmdResp3+0x1e>
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1ea      	bne.n	800b516 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b544:	f003 0304 	and.w	r3, r3, #4
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d004      	beq.n	800b556 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2204      	movs	r2, #4
 800b550:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b552:	2304      	movs	r3, #4
 800b554:	e003      	b.n	800b55e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a06      	ldr	r2, [pc, #24]	; (800b574 <SDMMC_GetCmdResp3+0x7c>)
 800b55a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	24000000 	.word	0x24000000
 800b570:	10624dd3 	.word	0x10624dd3
 800b574:	002000c5 	.word	0x002000c5

0800b578 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	460b      	mov	r3, r1
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b586:	4b35      	ldr	r3, [pc, #212]	; (800b65c <SDMMC_GetCmdResp6+0xe4>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a35      	ldr	r2, [pc, #212]	; (800b660 <SDMMC_GetCmdResp6+0xe8>)
 800b58c:	fba2 2303 	umull	r2, r3, r2, r3
 800b590:	0a5b      	lsrs	r3, r3, #9
 800b592:	f241 3288 	movw	r2, #5000	; 0x1388
 800b596:	fb02 f303 	mul.w	r3, r2, r3
 800b59a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	1e5a      	subs	r2, r3, #1
 800b5a0:	61fa      	str	r2, [r7, #28]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d102      	bne.n	800b5ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5aa:	e052      	b.n	800b652 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0ef      	beq.n	800b59c <SDMMC_GetCmdResp6+0x24>
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1ea      	bne.n	800b59c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ca:	f003 0304 	and.w	r3, r3, #4
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d004      	beq.n	800b5dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2204      	movs	r2, #4
 800b5d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5d8:	2304      	movs	r3, #4
 800b5da:	e03a      	b.n	800b652 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e0:	f003 0301 	and.w	r3, r3, #1
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d004      	beq.n	800b5f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e02f      	b.n	800b652 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f7ff fb2c 	bl	800ac50 <SDMMC_GetCommandResponse>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	7afb      	ldrb	r3, [r7, #11]
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d001      	beq.n	800b606 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b602:	2301      	movs	r3, #1
 800b604:	e025      	b.n	800b652 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4a16      	ldr	r2, [pc, #88]	; (800b664 <SDMMC_GetCmdResp6+0xec>)
 800b60a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b60c:	2100      	movs	r1, #0
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f7ff fb2b 	bl	800ac6a <SDMMC_GetResponse>
 800b614:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d106      	bne.n	800b62e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	0c1b      	lsrs	r3, r3, #16
 800b624:	b29a      	uxth	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b62a:	2300      	movs	r3, #0
 800b62c:	e011      	b.n	800b652 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b63c:	e009      	b.n	800b652 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b64c:	e001      	b.n	800b652 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b64e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b652:	4618      	mov	r0, r3
 800b654:	3720      	adds	r7, #32
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	24000000 	.word	0x24000000
 800b660:	10624dd3 	.word	0x10624dd3
 800b664:	002000c5 	.word	0x002000c5

0800b668 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b670:	4b22      	ldr	r3, [pc, #136]	; (800b6fc <SDMMC_GetCmdResp7+0x94>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a22      	ldr	r2, [pc, #136]	; (800b700 <SDMMC_GetCmdResp7+0x98>)
 800b676:	fba2 2303 	umull	r2, r3, r2, r3
 800b67a:	0a5b      	lsrs	r3, r3, #9
 800b67c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b680:	fb02 f303 	mul.w	r3, r2, r3
 800b684:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	1e5a      	subs	r2, r3, #1
 800b68a:	60fa      	str	r2, [r7, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d102      	bne.n	800b696 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b694:	e02c      	b.n	800b6f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b69a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0ef      	beq.n	800b686 <SDMMC_GetCmdResp7+0x1e>
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1ea      	bne.n	800b686 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b4:	f003 0304 	and.w	r3, r3, #4
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2204      	movs	r2, #4
 800b6c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6c2:	2304      	movs	r3, #4
 800b6c4:	e014      	b.n	800b6f0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d004      	beq.n	800b6dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e009      	b.n	800b6f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2240      	movs	r2, #64	; 0x40
 800b6ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b6ee:	2300      	movs	r3, #0

}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	24000000 	.word	0x24000000
 800b700:	10624dd3 	.word	0x10624dd3

0800b704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b704:	b084      	sub	sp, #16
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	f107 001c 	add.w	r0, r7, #28
 800b712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d120      	bne.n	800b75e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	4b25      	ldr	r3, [pc, #148]	; (800b7c4 <USB_CoreInit+0xc0>)
 800b72e:	4013      	ands	r3, r2
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b742:	2b01      	cmp	r3, #1
 800b744:	d105      	bne.n	800b752 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 fabe 	bl	800ccd4 <USB_CoreReset>
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]
 800b75c:	e01a      	b.n	800b794 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f001 fab2 	bl	800ccd4 <USB_CoreReset>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b776:	2b00      	cmp	r3, #0
 800b778:	d106      	bne.n	800b788 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	639a      	str	r2, [r3, #56]	; 0x38
 800b786:	e005      	b.n	800b794 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	2b01      	cmp	r3, #1
 800b798:	d10b      	bne.n	800b7b2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f043 0206 	orr.w	r2, r3, #6
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f043 0220 	orr.w	r2, r3, #32
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7be:	b004      	add	sp, #16
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	ffbdffbf 	.word	0xffbdffbf

0800b7c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d165      	bne.n	800b8a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4a41      	ldr	r2, [pc, #260]	; (800b8e4 <USB_SetTurnaroundTime+0x11c>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d906      	bls.n	800b7f2 <USB_SetTurnaroundTime+0x2a>
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	4a40      	ldr	r2, [pc, #256]	; (800b8e8 <USB_SetTurnaroundTime+0x120>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d802      	bhi.n	800b7f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b7ec:	230f      	movs	r3, #15
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	e062      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	4a3c      	ldr	r2, [pc, #240]	; (800b8e8 <USB_SetTurnaroundTime+0x120>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d906      	bls.n	800b808 <USB_SetTurnaroundTime+0x40>
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	4a3b      	ldr	r2, [pc, #236]	; (800b8ec <USB_SetTurnaroundTime+0x124>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d802      	bhi.n	800b808 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b802:	230e      	movs	r3, #14
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	e057      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	4a38      	ldr	r2, [pc, #224]	; (800b8ec <USB_SetTurnaroundTime+0x124>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d906      	bls.n	800b81e <USB_SetTurnaroundTime+0x56>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	4a37      	ldr	r2, [pc, #220]	; (800b8f0 <USB_SetTurnaroundTime+0x128>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d802      	bhi.n	800b81e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b818:	230d      	movs	r3, #13
 800b81a:	617b      	str	r3, [r7, #20]
 800b81c:	e04c      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	4a33      	ldr	r2, [pc, #204]	; (800b8f0 <USB_SetTurnaroundTime+0x128>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d906      	bls.n	800b834 <USB_SetTurnaroundTime+0x6c>
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	4a32      	ldr	r2, [pc, #200]	; (800b8f4 <USB_SetTurnaroundTime+0x12c>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d802      	bhi.n	800b834 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b82e:	230c      	movs	r3, #12
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	e041      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	4a2f      	ldr	r2, [pc, #188]	; (800b8f4 <USB_SetTurnaroundTime+0x12c>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d906      	bls.n	800b84a <USB_SetTurnaroundTime+0x82>
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	4a2e      	ldr	r2, [pc, #184]	; (800b8f8 <USB_SetTurnaroundTime+0x130>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d802      	bhi.n	800b84a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b844:	230b      	movs	r3, #11
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	e036      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	4a2a      	ldr	r2, [pc, #168]	; (800b8f8 <USB_SetTurnaroundTime+0x130>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d906      	bls.n	800b860 <USB_SetTurnaroundTime+0x98>
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	4a29      	ldr	r2, [pc, #164]	; (800b8fc <USB_SetTurnaroundTime+0x134>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d802      	bhi.n	800b860 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b85a:	230a      	movs	r3, #10
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	e02b      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	4a26      	ldr	r2, [pc, #152]	; (800b8fc <USB_SetTurnaroundTime+0x134>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d906      	bls.n	800b876 <USB_SetTurnaroundTime+0xae>
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	4a25      	ldr	r2, [pc, #148]	; (800b900 <USB_SetTurnaroundTime+0x138>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d802      	bhi.n	800b876 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b870:	2309      	movs	r3, #9
 800b872:	617b      	str	r3, [r7, #20]
 800b874:	e020      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	4a21      	ldr	r2, [pc, #132]	; (800b900 <USB_SetTurnaroundTime+0x138>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d906      	bls.n	800b88c <USB_SetTurnaroundTime+0xc4>
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	4a20      	ldr	r2, [pc, #128]	; (800b904 <USB_SetTurnaroundTime+0x13c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d802      	bhi.n	800b88c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b886:	2308      	movs	r3, #8
 800b888:	617b      	str	r3, [r7, #20]
 800b88a:	e015      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	4a1d      	ldr	r2, [pc, #116]	; (800b904 <USB_SetTurnaroundTime+0x13c>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d906      	bls.n	800b8a2 <USB_SetTurnaroundTime+0xda>
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	4a1c      	ldr	r2, [pc, #112]	; (800b908 <USB_SetTurnaroundTime+0x140>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d802      	bhi.n	800b8a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b89c:	2307      	movs	r3, #7
 800b89e:	617b      	str	r3, [r7, #20]
 800b8a0:	e00a      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b8a2:	2306      	movs	r3, #6
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	e007      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b8a8:	79fb      	ldrb	r3, [r7, #7]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d102      	bne.n	800b8b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b8ae:	2309      	movs	r3, #9
 800b8b0:	617b      	str	r3, [r7, #20]
 800b8b2:	e001      	b.n	800b8b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b8b4:	2309      	movs	r3, #9
 800b8b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	68da      	ldr	r2, [r3, #12]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	029b      	lsls	r3, r3, #10
 800b8cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b8d0:	431a      	orrs	r2, r3
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	371c      	adds	r7, #28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	00d8acbf 	.word	0x00d8acbf
 800b8e8:	00e4e1bf 	.word	0x00e4e1bf
 800b8ec:	00f423ff 	.word	0x00f423ff
 800b8f0:	0106737f 	.word	0x0106737f
 800b8f4:	011a499f 	.word	0x011a499f
 800b8f8:	01312cff 	.word	0x01312cff
 800b8fc:	014ca43f 	.word	0x014ca43f
 800b900:	016e35ff 	.word	0x016e35ff
 800b904:	01a6ab1f 	.word	0x01a6ab1f
 800b908:	01e847ff 	.word	0x01e847ff

0800b90c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	f043 0201 	orr.w	r2, r3, #1
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b92e:	b480      	push	{r7}
 800b930:	b083      	sub	sp, #12
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f023 0201 	bic.w	r2, r3, #1
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	460b      	mov	r3, r1
 800b95a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b968:	78fb      	ldrb	r3, [r7, #3]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d106      	bne.n	800b97c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	60da      	str	r2, [r3, #12]
 800b97a:	e00b      	b.n	800b994 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b97c:	78fb      	ldrb	r3, [r7, #3]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d106      	bne.n	800b990 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	60da      	str	r2, [r3, #12]
 800b98e:	e001      	b.n	800b994 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e003      	b.n	800b99c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b994:	2032      	movs	r0, #50	; 0x32
 800b996:	f7f5 ff63 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b086      	sub	sp, #24
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b9b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b9be:	2300      	movs	r3, #0
 800b9c0:	613b      	str	r3, [r7, #16]
 800b9c2:	e009      	b.n	800b9d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	3340      	adds	r3, #64	; 0x40
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	613b      	str	r3, [r7, #16]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	2b0e      	cmp	r3, #14
 800b9dc:	d9f2      	bls.n	800b9c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b9de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d11c      	bne.n	800ba1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9f2:	f043 0302 	orr.w	r3, r3, #2
 800b9f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	e005      	b.n	800ba2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba30:	461a      	mov	r2, r3
 800ba32:	2300      	movs	r3, #0
 800ba34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba44:	461a      	mov	r2, r3
 800ba46:	680b      	ldr	r3, [r1, #0]
 800ba48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d10c      	bne.n	800ba6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ba50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d104      	bne.n	800ba60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ba56:	2100      	movs	r1, #0
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f949 	bl	800bcf0 <USB_SetDevSpeed>
 800ba5e:	e008      	b.n	800ba72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ba60:	2101      	movs	r1, #1
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f944 	bl	800bcf0 <USB_SetDevSpeed>
 800ba68:	e003      	b.n	800ba72 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba6a:	2103      	movs	r1, #3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f93f 	bl	800bcf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba72:	2110      	movs	r1, #16
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f8f3 	bl	800bc60 <USB_FlushTxFifo>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f911 	bl	800bcac <USB_FlushRxFifo>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baa6:	461a      	mov	r2, r3
 800baa8:	2300      	movs	r3, #0
 800baaa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bab2:	461a      	mov	r2, r3
 800bab4:	2300      	movs	r3, #0
 800bab6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bab8:	2300      	movs	r3, #0
 800baba:	613b      	str	r3, [r7, #16]
 800babc:	e043      	b.n	800bb46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bad4:	d118      	bne.n	800bb08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10a      	bne.n	800baf2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	015a      	lsls	r2, r3, #5
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae8:	461a      	mov	r2, r3
 800baea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	e013      	b.n	800bb1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	015a      	lsls	r2, r3, #5
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	4413      	add	r3, r2
 800bafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafe:	461a      	mov	r2, r3
 800bb00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	e008      	b.n	800bb1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb14:	461a      	mov	r2, r3
 800bb16:	2300      	movs	r3, #0
 800bb18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	015a      	lsls	r2, r3, #5
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	4413      	add	r3, r2
 800bb22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb26:	461a      	mov	r2, r3
 800bb28:	2300      	movs	r3, #0
 800bb2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	015a      	lsls	r2, r3, #5
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	4413      	add	r3, r2
 800bb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb38:	461a      	mov	r2, r3
 800bb3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	3301      	adds	r3, #1
 800bb44:	613b      	str	r3, [r7, #16]
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d3b7      	bcc.n	800babe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb4e:	2300      	movs	r3, #0
 800bb50:	613b      	str	r3, [r7, #16]
 800bb52:	e043      	b.n	800bbdc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	015a      	lsls	r2, r3, #5
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb6a:	d118      	bne.n	800bb9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10a      	bne.n	800bb88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	e013      	b.n	800bbb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb94:	461a      	mov	r2, r3
 800bb96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	e008      	b.n	800bbb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	015a      	lsls	r2, r3, #5
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	4413      	add	r3, r2
 800bba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbaa:	461a      	mov	r2, r3
 800bbac:	2300      	movs	r3, #0
 800bbae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbce:	461a      	mov	r2, r3
 800bbd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bbd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d3b7      	bcc.n	800bb54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbf6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bc04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d105      	bne.n	800bc18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	f043 0210 	orr.w	r2, r3, #16
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	699a      	ldr	r2, [r3, #24]
 800bc1c:	4b0e      	ldr	r3, [pc, #56]	; (800bc58 <USB_DevInit+0x2b4>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bc24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d005      	beq.n	800bc36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	f043 0208 	orr.w	r2, r3, #8
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d105      	bne.n	800bc48 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	699a      	ldr	r2, [r3, #24]
 800bc40:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <USB_DevInit+0x2b8>)
 800bc42:	4313      	orrs	r3, r2
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc54:	b004      	add	sp, #16
 800bc56:	4770      	bx	lr
 800bc58:	803c3800 	.word	0x803c3800
 800bc5c:	40000004 	.word	0x40000004

0800bc60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	019b      	lsls	r3, r3, #6
 800bc72:	f043 0220 	orr.w	r2, r3, #32
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	4a09      	ldr	r2, [pc, #36]	; (800bca8 <USB_FlushTxFifo+0x48>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d901      	bls.n	800bc8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e006      	b.n	800bc9a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	f003 0320 	and.w	r3, r3, #32
 800bc94:	2b20      	cmp	r3, #32
 800bc96:	d0f0      	beq.n	800bc7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	00030d40 	.word	0x00030d40

0800bcac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2210      	movs	r2, #16
 800bcbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4a09      	ldr	r2, [pc, #36]	; (800bcec <USB_FlushRxFifo+0x40>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d901      	bls.n	800bcd0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bccc:	2303      	movs	r3, #3
 800bcce:	e006      	b.n	800bcde <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	f003 0310 	and.w	r3, r3, #16
 800bcd8:	2b10      	cmp	r3, #16
 800bcda:	d0f0      	beq.n	800bcbe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	00030d40 	.word	0x00030d40

0800bcf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	68f9      	ldr	r1, [r7, #12]
 800bd0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd10:	4313      	orrs	r3, r2
 800bd12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bd22:	b480      	push	{r7}
 800bd24:	b087      	sub	sp, #28
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f003 0306 	and.w	r3, r3, #6
 800bd3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d102      	bne.n	800bd48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bd42:	2300      	movs	r3, #0
 800bd44:	75fb      	strb	r3, [r7, #23]
 800bd46:	e00a      	b.n	800bd5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d002      	beq.n	800bd54 <USB_GetDevSpeed+0x32>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b06      	cmp	r3, #6
 800bd52:	d102      	bne.n	800bd5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd54:	2302      	movs	r3, #2
 800bd56:	75fb      	strb	r3, [r7, #23]
 800bd58:	e001      	b.n	800bd5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bd5a:	230f      	movs	r3, #15
 800bd5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	785b      	ldrb	r3, [r3, #1]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d139      	bne.n	800bdfc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd8e:	69da      	ldr	r2, [r3, #28]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	f003 030f 	and.w	r3, r3, #15
 800bd98:	2101      	movs	r1, #1
 800bd9a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	68f9      	ldr	r1, [r7, #12]
 800bda2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bda6:	4313      	orrs	r3, r2
 800bda8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	015a      	lsls	r2, r3, #5
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d153      	bne.n	800be68 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	78db      	ldrb	r3, [r3, #3]
 800bdda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bddc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	059b      	lsls	r3, r3, #22
 800bde2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bde4:	431a      	orrs	r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	0159      	lsls	r1, r3, #5
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	440b      	add	r3, r1
 800bdee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4b20      	ldr	r3, [pc, #128]	; (800be78 <USB_ActivateEndpoint+0x10c>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	600b      	str	r3, [r1, #0]
 800bdfa:	e035      	b.n	800be68 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be02:	69da      	ldr	r2, [r3, #28]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	f003 030f 	and.w	r3, r3, #15
 800be0c:	2101      	movs	r1, #1
 800be0e:	fa01 f303 	lsl.w	r3, r1, r3
 800be12:	041b      	lsls	r3, r3, #16
 800be14:	68f9      	ldr	r1, [r7, #12]
 800be16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be1a:	4313      	orrs	r3, r2
 800be1c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	015a      	lsls	r2, r3, #5
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	4413      	add	r3, r2
 800be26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d119      	bne.n	800be68 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	78db      	ldrb	r3, [r3, #3]
 800be4e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be50:	430b      	orrs	r3, r1
 800be52:	431a      	orrs	r2, r3
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	0159      	lsls	r1, r3, #5
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	440b      	add	r3, r1
 800be5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be60:	4619      	mov	r1, r3
 800be62:	4b05      	ldr	r3, [pc, #20]	; (800be78 <USB_ActivateEndpoint+0x10c>)
 800be64:	4313      	orrs	r3, r2
 800be66:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	10008000 	.word	0x10008000

0800be7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	785b      	ldrb	r3, [r3, #1]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d161      	bne.n	800bf5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beae:	d11f      	bne.n	800bef0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	015a      	lsls	r2, r3, #5
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4413      	add	r3, r2
 800beb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	0151      	lsls	r1, r2, #5
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	440a      	add	r2, r1
 800bec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bece:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	015a      	lsls	r2, r3, #5
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	0151      	lsls	r1, r2, #5
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	440a      	add	r2, r1
 800bee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800beee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	f003 030f 	and.w	r3, r3, #15
 800bf00:	2101      	movs	r1, #1
 800bf02:	fa01 f303 	lsl.w	r3, r1, r3
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	43db      	mvns	r3, r3
 800bf0a:	68f9      	ldr	r1, [r7, #12]
 800bf0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf10:	4013      	ands	r3, r2
 800bf12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf1a:	69da      	ldr	r2, [r3, #28]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	f003 030f 	and.w	r3, r3, #15
 800bf24:	2101      	movs	r1, #1
 800bf26:	fa01 f303 	lsl.w	r3, r1, r3
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	43db      	mvns	r3, r3
 800bf2e:	68f9      	ldr	r1, [r7, #12]
 800bf30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf34:	4013      	ands	r3, r2
 800bf36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	015a      	lsls	r2, r3, #5
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	4413      	add	r3, r2
 800bf40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	0159      	lsls	r1, r3, #5
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	440b      	add	r3, r1
 800bf4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf52:	4619      	mov	r1, r3
 800bf54:	4b35      	ldr	r3, [pc, #212]	; (800c02c <USB_DeactivateEndpoint+0x1b0>)
 800bf56:	4013      	ands	r3, r2
 800bf58:	600b      	str	r3, [r1, #0]
 800bf5a:	e060      	b.n	800c01e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf72:	d11f      	bne.n	800bfb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	015a      	lsls	r2, r3, #5
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	0151      	lsls	r1, r2, #5
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	440a      	add	r2, r1
 800bf8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	015a      	lsls	r2, r3, #5
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	0151      	lsls	r1, r2, #5
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	440a      	add	r2, r1
 800bfaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	f003 030f 	and.w	r3, r3, #15
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	fa01 f303 	lsl.w	r3, r1, r3
 800bfca:	041b      	lsls	r3, r3, #16
 800bfcc:	43db      	mvns	r3, r3
 800bfce:	68f9      	ldr	r1, [r7, #12]
 800bfd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfde:	69da      	ldr	r2, [r3, #28]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	f003 030f 	and.w	r3, r3, #15
 800bfe8:	2101      	movs	r1, #1
 800bfea:	fa01 f303 	lsl.w	r3, r1, r3
 800bfee:	041b      	lsls	r3, r3, #16
 800bff0:	43db      	mvns	r3, r3
 800bff2:	68f9      	ldr	r1, [r7, #12]
 800bff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bff8:	4013      	ands	r3, r2
 800bffa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	0159      	lsls	r1, r3, #5
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	440b      	add	r3, r1
 800c012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c016:	4619      	mov	r1, r3
 800c018:	4b05      	ldr	r3, [pc, #20]	; (800c030 <USB_DeactivateEndpoint+0x1b4>)
 800c01a:	4013      	ands	r3, r2
 800c01c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	ec337800 	.word	0xec337800
 800c030:	eff37800 	.word	0xeff37800

0800c034 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08a      	sub	sp, #40	; 0x28
 800c038:	af02      	add	r7, sp, #8
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	4613      	mov	r3, r2
 800c040:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	785b      	ldrb	r3, [r3, #1]
 800c050:	2b01      	cmp	r3, #1
 800c052:	f040 8163 	bne.w	800c31c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	695b      	ldr	r3, [r3, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d132      	bne.n	800c0c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06a:	691a      	ldr	r2, [r3, #16]
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	0159      	lsls	r1, r3, #5
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	440b      	add	r3, r1
 800c074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c078:	4619      	mov	r1, r3
 800c07a:	4ba5      	ldr	r3, [pc, #660]	; (800c310 <USB_EPStartXfer+0x2dc>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	015a      	lsls	r2, r3, #5
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	4413      	add	r3, r2
 800c088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	69ba      	ldr	r2, [r7, #24]
 800c090:	0151      	lsls	r1, r2, #5
 800c092:	69fa      	ldr	r2, [r7, #28]
 800c094:	440a      	add	r2, r1
 800c096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c09a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c09e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	0159      	lsls	r1, r3, #5
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	440b      	add	r3, r1
 800c0b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4b95      	ldr	r3, [pc, #596]	; (800c314 <USB_EPStartXfer+0x2e0>)
 800c0be:	4013      	ands	r3, r2
 800c0c0:	610b      	str	r3, [r1, #16]
 800c0c2:	e074      	b.n	800c1ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d0:	691a      	ldr	r2, [r3, #16]
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	0159      	lsls	r1, r3, #5
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	440b      	add	r3, r1
 800c0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4b8c      	ldr	r3, [pc, #560]	; (800c314 <USB_EPStartXfer+0x2e0>)
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f2:	691a      	ldr	r2, [r3, #16]
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	0159      	lsls	r1, r3, #5
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	440b      	add	r3, r1
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c100:	4619      	mov	r1, r3
 800c102:	4b83      	ldr	r3, [pc, #524]	; (800c310 <USB_EPStartXfer+0x2dc>)
 800c104:	4013      	ands	r3, r2
 800c106:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	015a      	lsls	r2, r3, #5
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	4413      	add	r3, r2
 800c110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c114:	691a      	ldr	r2, [r3, #16]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	6959      	ldr	r1, [r3, #20]
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	440b      	add	r3, r1
 800c120:	1e59      	subs	r1, r3, #1
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	fbb1 f3f3 	udiv	r3, r1, r3
 800c12a:	04d9      	lsls	r1, r3, #19
 800c12c:	4b7a      	ldr	r3, [pc, #488]	; (800c318 <USB_EPStartXfer+0x2e4>)
 800c12e:	400b      	ands	r3, r1
 800c130:	69b9      	ldr	r1, [r7, #24]
 800c132:	0148      	lsls	r0, r1, #5
 800c134:	69f9      	ldr	r1, [r7, #28]
 800c136:	4401      	add	r1, r0
 800c138:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c13c:	4313      	orrs	r3, r2
 800c13e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c14c:	691a      	ldr	r2, [r3, #16]
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c156:	69b9      	ldr	r1, [r7, #24]
 800c158:	0148      	lsls	r0, r1, #5
 800c15a:	69f9      	ldr	r1, [r7, #28]
 800c15c:	4401      	add	r1, r0
 800c15e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c162:	4313      	orrs	r3, r2
 800c164:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	78db      	ldrb	r3, [r3, #3]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d11f      	bne.n	800c1ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	4413      	add	r3, r2
 800c176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	69ba      	ldr	r2, [r7, #24]
 800c17e:	0151      	lsls	r1, r2, #5
 800c180:	69fa      	ldr	r2, [r7, #28]
 800c182:	440a      	add	r2, r1
 800c184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c188:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c18c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	015a      	lsls	r2, r3, #5
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	4413      	add	r3, r2
 800c196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	0151      	lsls	r1, r2, #5
 800c1a0:	69fa      	ldr	r2, [r7, #28]
 800c1a2:	440a      	add	r2, r1
 800c1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d14b      	bne.n	800c24c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d009      	beq.n	800c1d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	015a      	lsls	r2, r3, #5
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	78db      	ldrb	r3, [r3, #3]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d128      	bne.n	800c22a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d110      	bne.n	800c20a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	015a      	lsls	r2, r3, #5
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69ba      	ldr	r2, [r7, #24]
 800c1f8:	0151      	lsls	r1, r2, #5
 800c1fa:	69fa      	ldr	r2, [r7, #28]
 800c1fc:	440a      	add	r2, r1
 800c1fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c202:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	e00f      	b.n	800c22a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	015a      	lsls	r2, r3, #5
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	4413      	add	r3, r2
 800c212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	69ba      	ldr	r2, [r7, #24]
 800c21a:	0151      	lsls	r1, r2, #5
 800c21c:	69fa      	ldr	r2, [r7, #28]
 800c21e:	440a      	add	r2, r1
 800c220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c228:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	015a      	lsls	r2, r3, #5
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	4413      	add	r3, r2
 800c232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	69ba      	ldr	r2, [r7, #24]
 800c23a:	0151      	lsls	r1, r2, #5
 800c23c:	69fa      	ldr	r2, [r7, #28]
 800c23e:	440a      	add	r2, r1
 800c240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c244:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c248:	6013      	str	r3, [r2, #0]
 800c24a:	e133      	b.n	800c4b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	015a      	lsls	r2, r3, #5
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	4413      	add	r3, r2
 800c254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	69ba      	ldr	r2, [r7, #24]
 800c25c:	0151      	lsls	r1, r2, #5
 800c25e:	69fa      	ldr	r2, [r7, #28]
 800c260:	440a      	add	r2, r1
 800c262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c266:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c26a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	78db      	ldrb	r3, [r3, #3]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d015      	beq.n	800c2a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f000 811b 	beq.w	800c4b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	f003 030f 	and.w	r3, r3, #15
 800c28e:	2101      	movs	r1, #1
 800c290:	fa01 f303 	lsl.w	r3, r1, r3
 800c294:	69f9      	ldr	r1, [r7, #28]
 800c296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c29a:	4313      	orrs	r3, r2
 800c29c:	634b      	str	r3, [r1, #52]	; 0x34
 800c29e:	e109      	b.n	800c4b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d110      	bne.n	800c2d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	69ba      	ldr	r2, [r7, #24]
 800c2c0:	0151      	lsls	r1, r2, #5
 800c2c2:	69fa      	ldr	r2, [r7, #28]
 800c2c4:	440a      	add	r2, r1
 800c2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	e00f      	b.n	800c2f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	015a      	lsls	r2, r3, #5
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	0151      	lsls	r1, r2, #5
 800c2e4:	69fa      	ldr	r2, [r7, #28]
 800c2e6:	440a      	add	r2, r1
 800c2e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	68d9      	ldr	r1, [r3, #12]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	781a      	ldrb	r2, [r3, #0]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	b298      	uxth	r0, r3
 800c300:	79fb      	ldrb	r3, [r7, #7]
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	4603      	mov	r3, r0
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f000 fa38 	bl	800c77c <USB_WritePacket>
 800c30c:	e0d2      	b.n	800c4b4 <USB_EPStartXfer+0x480>
 800c30e:	bf00      	nop
 800c310:	e007ffff 	.word	0xe007ffff
 800c314:	fff80000 	.word	0xfff80000
 800c318:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c328:	691a      	ldr	r2, [r3, #16]
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	0159      	lsls	r1, r3, #5
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	440b      	add	r3, r1
 800c332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c336:	4619      	mov	r1, r3
 800c338:	4b61      	ldr	r3, [pc, #388]	; (800c4c0 <USB_EPStartXfer+0x48c>)
 800c33a:	4013      	ands	r3, r2
 800c33c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c34a:	691a      	ldr	r2, [r3, #16]
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	0159      	lsls	r1, r3, #5
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	440b      	add	r3, r1
 800c354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c358:	4619      	mov	r1, r3
 800c35a:	4b5a      	ldr	r3, [pc, #360]	; (800c4c4 <USB_EPStartXfer+0x490>)
 800c35c:	4013      	ands	r3, r2
 800c35e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d123      	bne.n	800c3b0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	015a      	lsls	r2, r3, #5
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	4413      	add	r3, r2
 800c370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c374:	691a      	ldr	r2, [r3, #16]
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c37e:	69b9      	ldr	r1, [r7, #24]
 800c380:	0148      	lsls	r0, r1, #5
 800c382:	69f9      	ldr	r1, [r7, #28]
 800c384:	4401      	add	r1, r0
 800c386:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c38a:	4313      	orrs	r3, r2
 800c38c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	69ba      	ldr	r2, [r7, #24]
 800c39e:	0151      	lsls	r1, r2, #5
 800c3a0:	69fa      	ldr	r2, [r7, #28]
 800c3a2:	440a      	add	r2, r1
 800c3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3ac:	6113      	str	r3, [r2, #16]
 800c3ae:	e033      	b.n	800c418 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	695a      	ldr	r2, [r3, #20]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	1e5a      	subs	r2, r3, #1
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	015a      	lsls	r2, r3, #5
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d2:	691a      	ldr	r2, [r3, #16]
 800c3d4:	8afb      	ldrh	r3, [r7, #22]
 800c3d6:	04d9      	lsls	r1, r3, #19
 800c3d8:	4b3b      	ldr	r3, [pc, #236]	; (800c4c8 <USB_EPStartXfer+0x494>)
 800c3da:	400b      	ands	r3, r1
 800c3dc:	69b9      	ldr	r1, [r7, #24]
 800c3de:	0148      	lsls	r0, r1, #5
 800c3e0:	69f9      	ldr	r1, [r7, #28]
 800c3e2:	4401      	add	r1, r0
 800c3e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f8:	691a      	ldr	r2, [r3, #16]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	8af9      	ldrh	r1, [r7, #22]
 800c400:	fb01 f303 	mul.w	r3, r1, r3
 800c404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c408:	69b9      	ldr	r1, [r7, #24]
 800c40a:	0148      	lsls	r0, r1, #5
 800c40c:	69f9      	ldr	r1, [r7, #28]
 800c40e:	4401      	add	r1, r0
 800c410:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c414:	4313      	orrs	r3, r2
 800c416:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c418:	79fb      	ldrb	r3, [r7, #7]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d10d      	bne.n	800c43a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d009      	beq.n	800c43a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	68d9      	ldr	r1, [r3, #12]
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c436:	460a      	mov	r2, r1
 800c438:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	78db      	ldrb	r3, [r3, #3]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d128      	bne.n	800c494 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d110      	bne.n	800c474 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	015a      	lsls	r2, r3, #5
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	4413      	add	r3, r2
 800c45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	69ba      	ldr	r2, [r7, #24]
 800c462:	0151      	lsls	r1, r2, #5
 800c464:	69fa      	ldr	r2, [r7, #28]
 800c466:	440a      	add	r2, r1
 800c468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c46c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	e00f      	b.n	800c494 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	0151      	lsls	r1, r2, #5
 800c486:	69fa      	ldr	r2, [r7, #28]
 800c488:	440a      	add	r2, r1
 800c48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c48e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c492:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	015a      	lsls	r2, r3, #5
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	4413      	add	r3, r2
 800c49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	69ba      	ldr	r2, [r7, #24]
 800c4a4:	0151      	lsls	r1, r2, #5
 800c4a6:	69fa      	ldr	r2, [r7, #28]
 800c4a8:	440a      	add	r2, r1
 800c4aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	fff80000 	.word	0xfff80000
 800c4c4:	e007ffff 	.word	0xe007ffff
 800c4c8:	1ff80000 	.word	0x1ff80000

0800c4cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b087      	sub	sp, #28
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	785b      	ldrb	r3, [r3, #1]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	f040 80cd 	bne.w	800c688 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d132      	bne.n	800c55c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	015a      	lsls	r2, r3, #5
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c502:	691a      	ldr	r2, [r3, #16]
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	0159      	lsls	r1, r3, #5
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	440b      	add	r3, r1
 800c50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c510:	4619      	mov	r1, r3
 800c512:	4b98      	ldr	r3, [pc, #608]	; (800c774 <USB_EP0StartXfer+0x2a8>)
 800c514:	4013      	ands	r3, r2
 800c516:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	0151      	lsls	r1, r2, #5
 800c52a:	697a      	ldr	r2, [r7, #20]
 800c52c:	440a      	add	r2, r1
 800c52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	015a      	lsls	r2, r3, #5
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c544:	691a      	ldr	r2, [r3, #16]
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	0159      	lsls	r1, r3, #5
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	440b      	add	r3, r1
 800c54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c552:	4619      	mov	r1, r3
 800c554:	4b88      	ldr	r3, [pc, #544]	; (800c778 <USB_EP0StartXfer+0x2ac>)
 800c556:	4013      	ands	r3, r2
 800c558:	610b      	str	r3, [r1, #16]
 800c55a:	e04e      	b.n	800c5fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	015a      	lsls	r2, r3, #5
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	4413      	add	r3, r2
 800c564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c568:	691a      	ldr	r2, [r3, #16]
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	0159      	lsls	r1, r3, #5
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	440b      	add	r3, r1
 800c572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c576:	4619      	mov	r1, r3
 800c578:	4b7f      	ldr	r3, [pc, #508]	; (800c778 <USB_EP0StartXfer+0x2ac>)
 800c57a:	4013      	ands	r3, r2
 800c57c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	015a      	lsls	r2, r3, #5
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	4413      	add	r3, r2
 800c586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58a:	691a      	ldr	r2, [r3, #16]
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	0159      	lsls	r1, r3, #5
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	440b      	add	r3, r1
 800c594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c598:	4619      	mov	r1, r3
 800c59a:	4b76      	ldr	r3, [pc, #472]	; (800c774 <USB_EP0StartXfer+0x2a8>)
 800c59c:	4013      	ands	r3, r2
 800c59e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	695a      	ldr	r2, [r3, #20]
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d903      	bls.n	800c5b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	689a      	ldr	r2, [r3, #8]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	0151      	lsls	r1, r2, #5
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	440a      	add	r2, r1
 800c5ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	015a      	lsls	r2, r3, #5
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	4413      	add	r3, r2
 800c5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e0:	691a      	ldr	r2, [r3, #16]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5ea:	6939      	ldr	r1, [r7, #16]
 800c5ec:	0148      	lsls	r0, r1, #5
 800c5ee:	6979      	ldr	r1, [r7, #20]
 800c5f0:	4401      	add	r1, r0
 800c5f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d11e      	bne.n	800c63e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d009      	beq.n	800c61c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	015a      	lsls	r2, r3, #5
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	4413      	add	r3, r2
 800c610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c614:	461a      	mov	r2, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	0151      	lsls	r1, r2, #5
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	440a      	add	r2, r1
 800c632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c636:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	e092      	b.n	800c764 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	015a      	lsls	r2, r3, #5
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	4413      	add	r3, r2
 800c646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	0151      	lsls	r1, r2, #5
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	440a      	add	r2, r1
 800c654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c658:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c65c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d07e      	beq.n	800c764 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c66c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	f003 030f 	and.w	r3, r3, #15
 800c676:	2101      	movs	r1, #1
 800c678:	fa01 f303 	lsl.w	r3, r1, r3
 800c67c:	6979      	ldr	r1, [r7, #20]
 800c67e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c682:	4313      	orrs	r3, r2
 800c684:	634b      	str	r3, [r1, #52]	; 0x34
 800c686:	e06d      	b.n	800c764 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c694:	691a      	ldr	r2, [r3, #16]
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	0159      	lsls	r1, r3, #5
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	440b      	add	r3, r1
 800c69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	4b34      	ldr	r3, [pc, #208]	; (800c778 <USB_EP0StartXfer+0x2ac>)
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	015a      	lsls	r2, r3, #5
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b6:	691a      	ldr	r2, [r3, #16]
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	0159      	lsls	r1, r3, #5
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	440b      	add	r3, r1
 800c6c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	4b2b      	ldr	r3, [pc, #172]	; (800c774 <USB_EP0StartXfer+0x2a8>)
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d003      	beq.n	800c6dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	689a      	ldr	r2, [r3, #8]
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	015a      	lsls	r2, r3, #5
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	693a      	ldr	r2, [r7, #16]
 800c6ec:	0151      	lsls	r1, r2, #5
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	440a      	add	r2, r1
 800c6f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	015a      	lsls	r2, r3, #5
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	4413      	add	r3, r2
 800c704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c708:	691a      	ldr	r2, [r3, #16]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c712:	6939      	ldr	r1, [r7, #16]
 800c714:	0148      	lsls	r0, r1, #5
 800c716:	6979      	ldr	r1, [r7, #20]
 800c718:	4401      	add	r1, r0
 800c71a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c71e:	4313      	orrs	r3, r2
 800c720:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d10d      	bne.n	800c744 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d009      	beq.n	800c744 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	68d9      	ldr	r1, [r3, #12]
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c740:	460a      	mov	r2, r1
 800c742:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	015a      	lsls	r2, r3, #5
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	4413      	add	r3, r2
 800c74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	0151      	lsls	r1, r2, #5
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	440a      	add	r2, r1
 800c75a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c75e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	e007ffff 	.word	0xe007ffff
 800c778:	fff80000 	.word	0xfff80000

0800c77c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b089      	sub	sp, #36	; 0x24
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	4611      	mov	r1, r2
 800c788:	461a      	mov	r2, r3
 800c78a:	460b      	mov	r3, r1
 800c78c:	71fb      	strb	r3, [r7, #7]
 800c78e:	4613      	mov	r3, r2
 800c790:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c79a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d11a      	bne.n	800c7d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c7a2:	88bb      	ldrh	r3, [r7, #4]
 800c7a4:	3303      	adds	r3, #3
 800c7a6:	089b      	lsrs	r3, r3, #2
 800c7a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	61bb      	str	r3, [r7, #24]
 800c7ae:	e00f      	b.n	800c7d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c7b0:	79fb      	ldrb	r3, [r7, #7]
 800c7b2:	031a      	lsls	r2, r3, #12
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7bc:	461a      	mov	r2, r3
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	61bb      	str	r3, [r7, #24]
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d3eb      	bcc.n	800c7b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3724      	adds	r7, #36	; 0x24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c7e6:	b480      	push	{r7}
 800c7e8:	b089      	sub	sp, #36	; 0x24
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	60f8      	str	r0, [r7, #12]
 800c7ee:	60b9      	str	r1, [r7, #8]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c7fc:	88fb      	ldrh	r3, [r7, #6]
 800c7fe:	3303      	adds	r3, #3
 800c800:	089b      	lsrs	r3, r3, #2
 800c802:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c804:	2300      	movs	r3, #0
 800c806:	61bb      	str	r3, [r7, #24]
 800c808:	e00b      	b.n	800c822 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	601a      	str	r2, [r3, #0]
    pDest++;
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	3304      	adds	r3, #4
 800c81a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	3301      	adds	r3, #1
 800c820:	61bb      	str	r3, [r7, #24]
 800c822:	69ba      	ldr	r2, [r7, #24]
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	429a      	cmp	r2, r3
 800c828:	d3ef      	bcc.n	800c80a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c82a:	69fb      	ldr	r3, [r7, #28]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3724      	adds	r7, #36	; 0x24
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	785b      	ldrb	r3, [r3, #1]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d12c      	bne.n	800c8ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	db12      	blt.n	800c88c <USB_EPSetStall+0x54>
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00f      	beq.n	800c88c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4413      	add	r3, r2
 800c874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	0151      	lsls	r1, r2, #5
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	440a      	add	r2, r1
 800c882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c88a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	015a      	lsls	r2, r3, #5
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	4413      	add	r3, r2
 800c894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	0151      	lsls	r1, r2, #5
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	440a      	add	r2, r1
 800c8a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	e02b      	b.n	800c906 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	db12      	blt.n	800c8e6 <USB_EPSetStall+0xae>
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00f      	beq.n	800c8e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	015a      	lsls	r2, r3, #5
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	0151      	lsls	r1, r2, #5
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	440a      	add	r2, r1
 800c8dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c8e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	015a      	lsls	r2, r3, #5
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	0151      	lsls	r1, r2, #5
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	440a      	add	r2, r1
 800c8fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c904:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	785b      	ldrb	r3, [r3, #1]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d128      	bne.n	800c982 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	015a      	lsls	r2, r3, #5
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	4413      	add	r3, r2
 800c938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	0151      	lsls	r1, r2, #5
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	440a      	add	r2, r1
 800c946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c94a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c94e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	78db      	ldrb	r3, [r3, #3]
 800c954:	2b03      	cmp	r3, #3
 800c956:	d003      	beq.n	800c960 <USB_EPClearStall+0x4c>
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	78db      	ldrb	r3, [r3, #3]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d138      	bne.n	800c9d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	015a      	lsls	r2, r3, #5
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4413      	add	r3, r2
 800c968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	0151      	lsls	r1, r2, #5
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	440a      	add	r2, r1
 800c976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c97a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	e027      	b.n	800c9d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	015a      	lsls	r2, r3, #5
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	4413      	add	r3, r2
 800c98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	0151      	lsls	r1, r2, #5
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	440a      	add	r2, r1
 800c998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c99c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c9a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	78db      	ldrb	r3, [r3, #3]
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	d003      	beq.n	800c9b2 <USB_EPClearStall+0x9e>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	78db      	ldrb	r3, [r3, #3]
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d10f      	bne.n	800c9d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	015a      	lsls	r2, r3, #5
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	0151      	lsls	r1, r2, #5
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	440a      	add	r2, r1
 800c9c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ca02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	78fb      	ldrb	r3, [r7, #3]
 800ca0e:	011b      	lsls	r3, r3, #4
 800ca10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ca14:	68f9      	ldr	r1, [r7, #12]
 800ca16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3714      	adds	r7, #20
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca46:	f023 0302 	bic.w	r3, r3, #2
 800ca4a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ca4c:	2003      	movs	r0, #3
 800ca4e:	f7f4 ff07 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca76:	f043 0302 	orr.w	r3, r3, #2
 800ca7a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ca7c:	2003      	movs	r0, #3
 800ca7e:	f7f4 feef 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 800ca82:	2300      	movs	r3, #0
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	695b      	ldr	r3, [r3, #20]
 800ca98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	4013      	ands	r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800caa4:	68fb      	ldr	r3, [r7, #12]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b085      	sub	sp, #20
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cace:	69db      	ldr	r3, [r3, #28]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	4013      	ands	r3, r2
 800cad4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	0c1b      	lsrs	r3, r3, #16
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cae6:	b480      	push	{r7}
 800cae8:	b085      	sub	sp, #20
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	4013      	ands	r3, r2
 800cb08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	b29b      	uxth	r3, r3
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb1a:	b480      	push	{r7}
 800cb1c:	b085      	sub	sp, #20
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	460b      	mov	r3, r1
 800cb24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	015a      	lsls	r2, r3, #5
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	4413      	add	r3, r2
 800cb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb40:	695b      	ldr	r3, [r3, #20]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	4013      	ands	r3, r2
 800cb46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb48:	68bb      	ldr	r3, [r7, #8]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3714      	adds	r7, #20
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb56:	b480      	push	{r7}
 800cb58:	b087      	sub	sp, #28
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb7a:	78fb      	ldrb	r3, [r7, #3]
 800cb7c:	f003 030f 	and.w	r3, r3, #15
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	fa22 f303 	lsr.w	r3, r2, r3
 800cb86:	01db      	lsls	r3, r3, #7
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb90:	78fb      	ldrb	r3, [r7, #3]
 800cb92:	015a      	lsls	r2, r3, #5
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	4413      	add	r3, r2
 800cb98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	4013      	ands	r3, r2
 800cba2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cba4:	68bb      	ldr	r3, [r7, #8]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	371c      	adds	r7, #28
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b083      	sub	sp, #12
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	695b      	ldr	r3, [r3, #20]
 800cbbe:	f003 0301 	and.w	r3, r3, #1
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbea:	4619      	mov	r1, r3
 800cbec:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <USB_ActivateSetup+0x44>)
 800cbee:	4013      	ands	r3, r2
 800cbf0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	fffff800 	.word	0xfffff800

0800cc18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	460b      	mov	r3, r1
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	333c      	adds	r3, #60	; 0x3c
 800cc2e:	3304      	adds	r3, #4
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	4a26      	ldr	r2, [pc, #152]	; (800ccd0 <USB_EP0_OutStart+0xb8>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d90a      	bls.n	800cc52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc4c:	d101      	bne.n	800cc52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	e037      	b.n	800ccc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc58:	461a      	mov	r2, r3
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc80:	f043 0318 	orr.w	r3, r3, #24
 800cc84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	697a      	ldr	r2, [r7, #20]
 800cc90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cc98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d10f      	bne.n	800ccc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca6:	461a      	mov	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ccbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	371c      	adds	r7, #28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	4f54300a 	.word	0x4f54300a

0800ccd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	3301      	adds	r3, #1
 800cce4:	60fb      	str	r3, [r7, #12]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	4a13      	ldr	r2, [pc, #76]	; (800cd38 <USB_CoreReset+0x64>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d901      	bls.n	800ccf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	e01b      	b.n	800cd2a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	daf2      	bge.n	800cce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	f043 0201 	orr.w	r2, r3, #1
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4a09      	ldr	r2, [pc, #36]	; (800cd38 <USB_CoreReset+0x64>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d901      	bls.n	800cd1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e006      	b.n	800cd2a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d0f0      	beq.n	800cd0a <USB_CoreReset+0x36>

  return HAL_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3714      	adds	r7, #20
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	00030d40 	.word	0x00030d40

0800cd3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cd40:	4904      	ldr	r1, [pc, #16]	; (800cd54 <MX_FATFS_Init+0x18>)
 800cd42:	4805      	ldr	r0, [pc, #20]	; (800cd58 <MX_FATFS_Init+0x1c>)
 800cd44:	f005 f8b2 	bl	8011eac <FATFS_LinkDriver>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	4b03      	ldr	r3, [pc, #12]	; (800cd5c <MX_FATFS_Init+0x20>)
 800cd4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cd50:	bf00      	nop
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	24000a78 	.word	0x24000a78
 800cd58:	08013910 	.word	0x08013910
 800cd5c:	24000a74 	.word	0x24000a74

0800cd60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cd60:	b480      	push	{r7}
 800cd62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cd64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cd76:	2300      	movs	r3, #0
 800cd78:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cd7a:	f000 f879 	bl	800ce70 <BSP_SD_IsDetected>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d001      	beq.n	800cd88 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cd84:	2302      	movs	r3, #2
 800cd86:	e012      	b.n	800cdae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cd88:	480b      	ldr	r0, [pc, #44]	; (800cdb8 <BSP_SD_Init+0x48>)
 800cd8a:	f7fb f977 	bl	800807c <HAL_SD_Init>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cd92:	79fb      	ldrb	r3, [r7, #7]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d109      	bne.n	800cdac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cd98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cd9c:	4806      	ldr	r0, [pc, #24]	; (800cdb8 <BSP_SD_Init+0x48>)
 800cd9e:	f7fc f83b 	bl	8008e18 <HAL_SD_ConfigWideBusOperation>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d001      	beq.n	800cdac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cdac:	79fb      	ldrb	r3, [r7, #7]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3708      	adds	r7, #8
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	24000568 	.word	0x24000568

0800cdbc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b088      	sub	sp, #32
 800cdc0:	af02      	add	r7, sp, #8
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
 800cdc8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	68f9      	ldr	r1, [r7, #12]
 800cdd8:	4806      	ldr	r0, [pc, #24]	; (800cdf4 <BSP_SD_ReadBlocks+0x38>)
 800cdda:	f7fb fa73 	bl	80082c4 <HAL_SD_ReadBlocks>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	24000568 	.word	0x24000568

0800cdf8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af02      	add	r7, sp, #8
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
 800ce04:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	68f9      	ldr	r1, [r7, #12]
 800ce14:	4806      	ldr	r0, [pc, #24]	; (800ce30 <BSP_SD_WriteBlocks+0x38>)
 800ce16:	f7fb fbdf 	bl	80085d8 <HAL_SD_WriteBlocks>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	24000568 	.word	0x24000568

0800ce34 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ce38:	4805      	ldr	r0, [pc, #20]	; (800ce50 <BSP_SD_GetCardState+0x1c>)
 800ce3a:	f7fc f897 	bl	8008f6c <HAL_SD_GetCardState>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b04      	cmp	r3, #4
 800ce42:	bf14      	ite	ne
 800ce44:	2301      	movne	r3, #1
 800ce46:	2300      	moveq	r3, #0
 800ce48:	b2db      	uxtb	r3, r3
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	24000568 	.word	0x24000568

0800ce54 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ce5c:	6879      	ldr	r1, [r7, #4]
 800ce5e:	4803      	ldr	r0, [pc, #12]	; (800ce6c <BSP_SD_GetCardInfo+0x18>)
 800ce60:	f7fb ffae 	bl	8008dc0 <HAL_SD_GetCardInfo>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	24000568 	.word	0x24000568

0800ce70 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ce76:	2301      	movs	r3, #1
 800ce78:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ce7a:	f000 f80b 	bl	800ce94 <BSP_PlatformIsDetected>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ce84:	2300      	movs	r3, #0
 800ce86:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	b2db      	uxtb	r3, r3
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ce9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cea2:	4806      	ldr	r0, [pc, #24]	; (800cebc <BSP_PlatformIsDetected+0x28>)
 800cea4:	f7f6 fff4 	bl	8003e90 <HAL_GPIO_ReadPin>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	58020000 	.word	0x58020000

0800cec0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ceca:	4b0b      	ldr	r3, [pc, #44]	; (800cef8 <SD_CheckStatus+0x38>)
 800cecc:	2201      	movs	r2, #1
 800cece:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ced0:	f7ff ffb0 	bl	800ce34 <BSP_SD_GetCardState>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d107      	bne.n	800ceea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ceda:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <SD_CheckStatus+0x38>)
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	f023 0301 	bic.w	r3, r3, #1
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	4b04      	ldr	r3, [pc, #16]	; (800cef8 <SD_CheckStatus+0x38>)
 800cee8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ceea:	4b03      	ldr	r3, [pc, #12]	; (800cef8 <SD_CheckStatus+0x38>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	b2db      	uxtb	r3, r3
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	2400000d 	.word	0x2400000d

0800cefc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	4603      	mov	r3, r0
 800cf04:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cf06:	4b0b      	ldr	r3, [pc, #44]	; (800cf34 <SD_initialize+0x38>)
 800cf08:	2201      	movs	r2, #1
 800cf0a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cf0c:	f7ff ff30 	bl	800cd70 <BSP_SD_Init>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d107      	bne.n	800cf26 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cf16:	79fb      	ldrb	r3, [r7, #7]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7ff ffd1 	bl	800cec0 <SD_CheckStatus>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	461a      	mov	r2, r3
 800cf22:	4b04      	ldr	r3, [pc, #16]	; (800cf34 <SD_initialize+0x38>)
 800cf24:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cf26:	4b03      	ldr	r3, [pc, #12]	; (800cf34 <SD_initialize+0x38>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	b2db      	uxtb	r3, r3
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	2400000d 	.word	0x2400000d

0800cf38 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	4603      	mov	r3, r0
 800cf40:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cf42:	79fb      	ldrb	r3, [r7, #7]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff ffbb 	bl	800cec0 <SD_CheckStatus>
 800cf4a:	4603      	mov	r3, r0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60b9      	str	r1, [r7, #8]
 800cf5c:	607a      	str	r2, [r7, #4]
 800cf5e:	603b      	str	r3, [r7, #0]
 800cf60:	4603      	mov	r3, r0
 800cf62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cf68:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6c:	683a      	ldr	r2, [r7, #0]
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	68b8      	ldr	r0, [r7, #8]
 800cf72:	f7ff ff23 	bl	800cdbc <BSP_SD_ReadBlocks>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d107      	bne.n	800cf8c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cf7c:	bf00      	nop
 800cf7e:	f7ff ff59 	bl	800ce34 <BSP_SD_GetCardState>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1fa      	bne.n	800cf7e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b086      	sub	sp, #24
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	603b      	str	r3, [r7, #0]
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cfaa:	f04f 33ff 	mov.w	r3, #4294967295
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	6879      	ldr	r1, [r7, #4]
 800cfb2:	68b8      	ldr	r0, [r7, #8]
 800cfb4:	f7ff ff20 	bl	800cdf8 <BSP_SD_WriteBlocks>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d107      	bne.n	800cfce <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cfbe:	bf00      	nop
 800cfc0:	f7ff ff38 	bl	800ce34 <BSP_SD_GetCardState>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1fa      	bne.n	800cfc0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cfce:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08c      	sub	sp, #48	; 0x30
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	603a      	str	r2, [r7, #0]
 800cfe2:	71fb      	strb	r3, [r7, #7]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cfee:	4b25      	ldr	r3, [pc, #148]	; (800d084 <SD_ioctl+0xac>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <SD_ioctl+0x28>
 800cffc:	2303      	movs	r3, #3
 800cffe:	e03c      	b.n	800d07a <SD_ioctl+0xa2>

  switch (cmd)
 800d000:	79bb      	ldrb	r3, [r7, #6]
 800d002:	2b03      	cmp	r3, #3
 800d004:	d834      	bhi.n	800d070 <SD_ioctl+0x98>
 800d006:	a201      	add	r2, pc, #4	; (adr r2, 800d00c <SD_ioctl+0x34>)
 800d008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00c:	0800d01d 	.word	0x0800d01d
 800d010:	0800d025 	.word	0x0800d025
 800d014:	0800d03d 	.word	0x0800d03d
 800d018:	0800d057 	.word	0x0800d057
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d022:	e028      	b.n	800d076 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d024:	f107 0308 	add.w	r3, r7, #8
 800d028:	4618      	mov	r0, r3
 800d02a:	f7ff ff13 	bl	800ce54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d02e:	6a3a      	ldr	r2, [r7, #32]
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d03a:	e01c      	b.n	800d076 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d03c:	f107 0308 	add.w	r3, r7, #8
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff ff07 	bl	800ce54 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	b29a      	uxth	r2, r3
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d04e:	2300      	movs	r3, #0
 800d050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d054:	e00f      	b.n	800d076 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d056:	f107 0308 	add.w	r3, r7, #8
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7ff fefa 	bl	800ce54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	0a5a      	lsrs	r2, r3, #9
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d068:	2300      	movs	r3, #0
 800d06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d06e:	e002      	b.n	800d076 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d070:	2304      	movs	r3, #4
 800d072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3730      	adds	r7, #48	; 0x30
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	2400000d 	.word	0x2400000d

0800d088 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d094:	f44f 701d 	mov.w	r0, #628	; 0x274
 800d098:	f005 fc04 	bl	80128a4 <malloc>
 800d09c:	4603      	mov	r3, r0
 800d09e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d105      	bne.n	800d0b2 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	e034      	b.n	800d11c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	7c1b      	ldrb	r3, [r3, #16]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d115      	bne.n	800d0ee <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d0c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f005 fa51 	bl	8012572 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0dc:	2202      	movs	r2, #2
 800d0de:	2181      	movs	r1, #129	; 0x81
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f005 fa46 	bl	8012572 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	871a      	strh	r2, [r3, #56]	; 0x38
 800d0ec:	e012      	b.n	800d114 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d0ee:	2340      	movs	r3, #64	; 0x40
 800d0f0:	2202      	movs	r2, #2
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f005 fa3c 	bl	8012572 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d102:	2340      	movs	r3, #64	; 0x40
 800d104:	2202      	movs	r2, #2
 800d106:	2181      	movs	r1, #129	; 0x81
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f005 fa32 	bl	8012572 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f98e 	bl	800d436 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800d130:	2101      	movs	r1, #1
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f005 fa43 	bl	80125be <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800d140:	2181      	movs	r1, #129	; 0x81
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f005 fa3b 	bl	80125be <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f9c7 	bl	800d4e2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d009      	beq.n	800d172 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d164:	4618      	mov	r0, r3
 800d166:	f005 fba5 	bl	80128b4 <free>
    pdev->pClassData = NULL;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d18c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d192:	2300      	movs	r3, #0
 800d194:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d04d      	beq.n	800d23e <USBD_MSC_Setup+0xc2>
 800d1a2:	2b20      	cmp	r3, #32
 800d1a4:	f040 80c6 	bne.w	800d334 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	785b      	ldrb	r3, [r3, #1]
 800d1ac:	2bfe      	cmp	r3, #254	; 0xfe
 800d1ae:	d002      	beq.n	800d1b6 <USBD_MSC_Setup+0x3a>
 800d1b0:	2bff      	cmp	r3, #255	; 0xff
 800d1b2:	d024      	beq.n	800d1fe <USBD_MSC_Setup+0x82>
 800d1b4:	e03b      	b.n	800d22e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	885b      	ldrh	r3, [r3, #2]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d118      	bne.n	800d1f0 <USBD_MSC_Setup+0x74>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	88db      	ldrh	r3, [r3, #6]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d114      	bne.n	800d1f0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	da0f      	bge.n	800d1f0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	4798      	blx	r3
 800d1da:	4603      	mov	r3, r0
 800d1dc:	461a      	mov	r2, r3
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f002 fc58 	bl	800fa9e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d1ee:	e025      	b.n	800d23c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800d1f0:	6839      	ldr	r1, [r7, #0]
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f002 fbe2 	bl	800f9bc <USBD_CtlError>
        ret = USBD_FAIL;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800d1fc:	e01e      	b.n	800d23c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	885b      	ldrh	r3, [r3, #2]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10c      	bne.n	800d220 <USBD_MSC_Setup+0xa4>
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	88db      	ldrh	r3, [r3, #6]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d108      	bne.n	800d220 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d214:	2b00      	cmp	r3, #0
 800d216:	db03      	blt.n	800d220 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f940 	bl	800d49e <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d21e:	e00d      	b.n	800d23c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f002 fbca 	bl	800f9bc <USBD_CtlError>
        ret = USBD_FAIL;
 800d228:	2303      	movs	r3, #3
 800d22a:	75fb      	strb	r3, [r7, #23]
      break;
 800d22c:	e006      	b.n	800d23c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f002 fbc3 	bl	800f9bc <USBD_CtlError>
      ret = USBD_FAIL;
 800d236:	2303      	movs	r3, #3
 800d238:	75fb      	strb	r3, [r7, #23]
      break;
 800d23a:	bf00      	nop
    }
    break;
 800d23c:	e081      	b.n	800d342 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	785b      	ldrb	r3, [r3, #1]
 800d242:	2b0b      	cmp	r3, #11
 800d244:	d86d      	bhi.n	800d322 <USBD_MSC_Setup+0x1a6>
 800d246:	a201      	add	r2, pc, #4	; (adr r2, 800d24c <USBD_MSC_Setup+0xd0>)
 800d248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24c:	0800d27d 	.word	0x0800d27d
 800d250:	0800d2f3 	.word	0x0800d2f3
 800d254:	0800d323 	.word	0x0800d323
 800d258:	0800d323 	.word	0x0800d323
 800d25c:	0800d323 	.word	0x0800d323
 800d260:	0800d323 	.word	0x0800d323
 800d264:	0800d323 	.word	0x0800d323
 800d268:	0800d323 	.word	0x0800d323
 800d26c:	0800d323 	.word	0x0800d323
 800d270:	0800d323 	.word	0x0800d323
 800d274:	0800d2a5 	.word	0x0800d2a5
 800d278:	0800d2cd 	.word	0x0800d2cd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d282:	2b03      	cmp	r3, #3
 800d284:	d107      	bne.n	800d296 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d286:	f107 030e 	add.w	r3, r7, #14
 800d28a:	2202      	movs	r2, #2
 800d28c:	4619      	mov	r1, r3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f002 fc05 	bl	800fa9e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d294:	e04d      	b.n	800d332 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d296:	6839      	ldr	r1, [r7, #0]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f002 fb8f 	bl	800f9bc <USBD_CtlError>
        ret = USBD_FAIL;
 800d29e:	2303      	movs	r3, #3
 800d2a0:	75fb      	strb	r3, [r7, #23]
      break;
 800d2a2:	e046      	b.n	800d332 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	d107      	bne.n	800d2be <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f002 fbf1 	bl	800fa9e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d2bc:	e039      	b.n	800d332 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f002 fb7b 	bl	800f9bc <USBD_CtlError>
        ret = USBD_FAIL;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	75fb      	strb	r3, [r7, #23]
      break;
 800d2ca:	e032      	b.n	800d332 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d106      	bne.n	800d2e4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	885b      	ldrh	r3, [r3, #2]
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	461a      	mov	r2, r3
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d2e2:	e026      	b.n	800d332 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f002 fb68 	bl	800f9bc <USBD_CtlError>
        ret = USBD_FAIL;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	75fb      	strb	r3, [r7, #23]
      break;
 800d2f0:	e01f      	b.n	800d332 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f8:	2b03      	cmp	r3, #3
 800d2fa:	d119      	bne.n	800d330 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	885b      	ldrh	r3, [r3, #2]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d115      	bne.n	800d330 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	889b      	ldrh	r3, [r3, #4]
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f005 f975 	bl	80125fc <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	889b      	ldrh	r3, [r3, #4]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 fa5a 	bl	800d7d4 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800d320:	e006      	b.n	800d330 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f002 fb49 	bl	800f9bc <USBD_CtlError>
      ret = USBD_FAIL;
 800d32a:	2303      	movs	r3, #3
 800d32c:	75fb      	strb	r3, [r7, #23]
      break;
 800d32e:	e000      	b.n	800d332 <USBD_MSC_Setup+0x1b6>
      break;
 800d330:	bf00      	nop
    }
    break;
 800d332:	e006      	b.n	800d342 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f002 fb40 	bl	800f9bc <USBD_CtlError>
    ret = USBD_FAIL;
 800d33c:	2303      	movs	r3, #3
 800d33e:	75fb      	strb	r3, [r7, #23]
    break;
 800d340:	bf00      	nop
  }

  return (uint8_t)ret;
 800d342:	7dfb      	ldrb	r3, [r7, #23]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3718      	adds	r7, #24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	460b      	mov	r3, r1
 800d356:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d358:	78fb      	ldrb	r3, [r7, #3]
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f8d1 	bl	800d504 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d378:	78fb      	ldrb	r3, [r7, #3]
 800d37a:	4619      	mov	r1, r3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 f8f2 	bl	800d566 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2220      	movs	r2, #32
 800d398:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d39a:	4b03      	ldr	r3, [pc, #12]	; (800d3a8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	24000048 	.word	0x24000048

0800d3ac <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d3ba:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	24000068 	.word	0x24000068

0800d3cc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2220      	movs	r2, #32
 800d3d8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d3da:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	24000088 	.word	0x24000088

0800d3ec <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	220a      	movs	r2, #10
 800d3f8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d3fa:	4b03      	ldr	r3, [pc, #12]	; (800d408 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	240000a8 	.word	0x240000a8

0800d40c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d101      	bne.n	800d420 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d41c:	2303      	movs	r3, #3
 800d41e:	e004      	b.n	800d42a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	370c      	adds	r7, #12
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b084      	sub	sp, #16
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d444:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2000      	movs	r0, #0
 800d474:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d476:	2101      	movs	r1, #1
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f005 f8bf 	bl	80125fc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d47e:	2181      	movs	r1, #129	; 0x81
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f005 f8bb 	bl	80125fc <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d48c:	231f      	movs	r3, #31
 800d48e:	2101      	movs	r1, #1
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f005 f97c 	bl	801278e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d496:	bf00      	nop
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4ac:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d4ba:	2181      	movs	r1, #129	; 0x81
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f005 f8db 	bl	8012678 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f005 f8d7 	bl	8012678 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d4d0:	231f      	movs	r3, #31
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f005 f95a 	bl	801278e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d4da:	bf00      	nop
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b085      	sub	sp, #20
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4f0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	721a      	strb	r2, [r3, #8]
}
 800d4f8:	bf00      	nop
 800d4fa:	3714      	adds	r7, #20
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d516:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	7a1b      	ldrb	r3, [r3, #8]
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d004      	beq.n	800d52a <MSC_BOT_DataIn+0x26>
 800d520:	2b02      	cmp	r3, #2
 800d522:	db19      	blt.n	800d558 <MSC_BOT_DataIn+0x54>
 800d524:	2b04      	cmp	r3, #4
 800d526:	dc17      	bgt.n	800d558 <MSC_BOT_DataIn+0x54>
 800d528:	e011      	b.n	800d54e <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d536:	461a      	mov	r2, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f973 	bl	800d824 <SCSI_ProcessCmd>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	da0b      	bge.n	800d55c <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d544:	2101      	movs	r1, #1
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 f8ea 	bl	800d720 <MSC_BOT_SendCSW>
    }
    break;
 800d54c:	e006      	b.n	800d55c <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d54e:	2100      	movs	r1, #0
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f8e5 	bl	800d720 <MSC_BOT_SendCSW>
    break;
 800d556:	e002      	b.n	800d55e <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800d558:	bf00      	nop
 800d55a:	e000      	b.n	800d55e <MSC_BOT_DataIn+0x5a>
    break;
 800d55c:	bf00      	nop
  }
}
 800d55e:	bf00      	nop
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b084      	sub	sp, #16
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	460b      	mov	r3, r1
 800d570:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d578:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	7a1b      	ldrb	r3, [r3, #8]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <MSC_BOT_DataOut+0x22>
 800d582:	2b01      	cmp	r3, #1
 800d584:	d004      	beq.n	800d590 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d586:	e015      	b.n	800d5b4 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f817 	bl	800d5bc <MSC_BOT_CBW_Decode>
      break;
 800d58e:	e011      	b.n	800d5b4 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d59c:	461a      	mov	r2, r3
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f940 	bl	800d824 <SCSI_ProcessCmd>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	da03      	bge.n	800d5b2 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d5aa:	2101      	movs	r1, #1
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f8b7 	bl	800d720 <MSC_BOT_SendCSW>
      break;
 800d5b2:	bf00      	nop
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5ca:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f005 f8f2 	bl	80127d0 <USBD_LL_GetRxDataSize>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b1f      	cmp	r3, #31
 800d5f0:	d114      	bne.n	800d61c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d5f8:	4a32      	ldr	r2, [pc, #200]	; (800d6c4 <MSC_BOT_CBW_Decode+0x108>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d10e      	bne.n	800d61c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d604:	2b01      	cmp	r3, #1
 800d606:	d809      	bhi.n	800d61c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d004      	beq.n	800d61c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d618:	2b10      	cmp	r3, #16
 800d61a:	d90e      	bls.n	800d63a <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d622:	2320      	movs	r3, #32
 800d624:	2205      	movs	r2, #5
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 fcc9 	bl	800dfbe <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2202      	movs	r2, #2
 800d630:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 f8a0 	bl	800d778 <MSC_BOT_Abort>
 800d638:	e041      	b.n	800d6be <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d646:	461a      	mov	r2, r3
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f8eb 	bl	800d824 <SCSI_ProcessCmd>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	da0c      	bge.n	800d66e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	7a1b      	ldrb	r3, [r3, #8]
 800d658:	2b05      	cmp	r3, #5
 800d65a:	d104      	bne.n	800d666 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d65c:	2101      	movs	r1, #1
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f85e 	bl	800d720 <MSC_BOT_SendCSW>
 800d664:	e02b      	b.n	800d6be <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f886 	bl	800d778 <MSC_BOT_Abort>
 800d66c:	e027      	b.n	800d6be <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	7a1b      	ldrb	r3, [r3, #8]
 800d672:	2b02      	cmp	r3, #2
 800d674:	d022      	beq.n	800d6bc <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d01e      	beq.n	800d6bc <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d682:	2b03      	cmp	r3, #3
 800d684:	d01a      	beq.n	800d6bc <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d009      	beq.n	800d6a2 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f103 0110 	add.w	r1, r3, #16
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	461a      	mov	r2, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f814 	bl	800d6c8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d6a0:	e00d      	b.n	800d6be <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d104      	bne.n	800d6b4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f837 	bl	800d720 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d6b2:	e004      	b.n	800d6be <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 f85f 	bl	800d778 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d6ba:	e000      	b.n	800d6be <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800d6bc:	bf00      	nop
    }
  }
}
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	43425355 	.word	0x43425355

0800d6c8 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b086      	sub	sp, #24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6da:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	bf28      	it	cs
 800d6e8:	4613      	movcs	r3, r2
 800d6ea:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	1ad2      	subs	r2, r2, r3
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2204      	movs	r2, #4
 800d708:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	2181      	movs	r1, #129	; 0x81
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f005 f81b 	bl	801274c <USBD_LL_Transmit>
}
 800d716:	bf00      	nop
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
	...

0800d720 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	460b      	mov	r3, r1
 800d72a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d732:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	4a0f      	ldr	r2, [pc, #60]	; (800d774 <MSC_BOT_SendCSW+0x54>)
 800d738:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	78fa      	ldrb	r2, [r7, #3]
 800d740:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2200      	movs	r2, #0
 800d748:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800d750:	230d      	movs	r3, #13
 800d752:	2181      	movs	r1, #129	; 0x81
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f004 fff9 	bl	801274c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d760:	231f      	movs	r3, #31
 800d762:	2101      	movs	r1, #1
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f005 f812 	bl	801278e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d76a:	bf00      	nop
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	53425355 	.word	0x53425355

0800d778 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d786:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10c      	bne.n	800d7ac <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d007      	beq.n	800d7ac <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d103      	bne.n	800d7ac <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d7a4:	2101      	movs	r1, #1
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f004 ff47 	bl	801263a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d7ac:	2181      	movs	r1, #129	; 0x81
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f004 ff43 	bl	801263a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	7a5b      	ldrb	r3, [r3, #9]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d107      	bne.n	800d7cc <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d7bc:	2181      	movs	r1, #129	; 0x81
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f004 ff3b 	bl	801263a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d7c4:	2101      	movs	r1, #1
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f004 ff37 	bl	801263a <USBD_LL_StallEP>
  }
}
 800d7cc:	bf00      	nop
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7e6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	7a5b      	ldrb	r3, [r3, #9]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d108      	bne.n	800d802 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d7f0:	2181      	movs	r1, #129	; 0x81
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f004 ff21 	bl	801263a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f004 ff1d 	bl	801263a <USBD_LL_StallEP>
 800d800:	e00d      	b.n	800d81e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d806:	2b00      	cmp	r3, #0
 800d808:	da08      	bge.n	800d81c <MSC_BOT_CplClrFeature+0x48>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	7a5b      	ldrb	r3, [r3, #9]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d004      	beq.n	800d81c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d812:	2101      	movs	r1, #1
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7ff ff83 	bl	800d720 <MSC_BOT_SendCSW>
 800d81a:	e000      	b.n	800d81e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d81c:	bf00      	nop
  }
}
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	460b      	mov	r3, r1
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d838:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b25      	cmp	r3, #37	; 0x25
 800d840:	d06e      	beq.n	800d920 <SCSI_ProcessCmd+0xfc>
 800d842:	2b25      	cmp	r3, #37	; 0x25
 800d844:	dc11      	bgt.n	800d86a <SCSI_ProcessCmd+0x46>
 800d846:	2b1a      	cmp	r3, #26
 800d848:	d04f      	beq.n	800d8ea <SCSI_ProcessCmd+0xc6>
 800d84a:	2b1a      	cmp	r3, #26
 800d84c:	dc06      	bgt.n	800d85c <SCSI_ProcessCmd+0x38>
 800d84e:	2b03      	cmp	r3, #3
 800d850:	d027      	beq.n	800d8a2 <SCSI_ProcessCmd+0x7e>
 800d852:	2b12      	cmp	r3, #18
 800d854:	d02e      	beq.n	800d8b4 <SCSI_ProcessCmd+0x90>
 800d856:	2b00      	cmp	r3, #0
 800d858:	d01a      	beq.n	800d890 <SCSI_ProcessCmd+0x6c>
 800d85a:	e0a0      	b.n	800d99e <SCSI_ProcessCmd+0x17a>
 800d85c:	2b1e      	cmp	r3, #30
 800d85e:	d03b      	beq.n	800d8d8 <SCSI_ProcessCmd+0xb4>
 800d860:	2b23      	cmp	r3, #35	; 0x23
 800d862:	d054      	beq.n	800d90e <SCSI_ProcessCmd+0xea>
 800d864:	2b1b      	cmp	r3, #27
 800d866:	d02e      	beq.n	800d8c6 <SCSI_ProcessCmd+0xa2>
 800d868:	e099      	b.n	800d99e <SCSI_ProcessCmd+0x17a>
 800d86a:	2b5a      	cmp	r3, #90	; 0x5a
 800d86c:	d046      	beq.n	800d8fc <SCSI_ProcessCmd+0xd8>
 800d86e:	2b5a      	cmp	r3, #90	; 0x5a
 800d870:	dc07      	bgt.n	800d882 <SCSI_ProcessCmd+0x5e>
 800d872:	2b2a      	cmp	r3, #42	; 0x2a
 800d874:	d078      	beq.n	800d968 <SCSI_ProcessCmd+0x144>
 800d876:	2b2f      	cmp	r3, #47	; 0x2f
 800d878:	f000 8088 	beq.w	800d98c <SCSI_ProcessCmd+0x168>
 800d87c:	2b28      	cmp	r3, #40	; 0x28
 800d87e:	d061      	beq.n	800d944 <SCSI_ProcessCmd+0x120>
 800d880:	e08d      	b.n	800d99e <SCSI_ProcessCmd+0x17a>
 800d882:	2ba8      	cmp	r3, #168	; 0xa8
 800d884:	d067      	beq.n	800d956 <SCSI_ProcessCmd+0x132>
 800d886:	2baa      	cmp	r3, #170	; 0xaa
 800d888:	d077      	beq.n	800d97a <SCSI_ProcessCmd+0x156>
 800d88a:	2b9e      	cmp	r3, #158	; 0x9e
 800d88c:	d051      	beq.n	800d932 <SCSI_ProcessCmd+0x10e>
 800d88e:	e086      	b.n	800d99e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d890:	7afb      	ldrb	r3, [r7, #11]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	4619      	mov	r1, r3
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 f893 	bl	800d9c2 <SCSI_TestUnitReady>
 800d89c:	4603      	mov	r3, r0
 800d89e:	75fb      	strb	r3, [r7, #23]
    break;
 800d8a0:	e089      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d8a2:	7afb      	ldrb	r3, [r7, #11]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f000 fb0f 	bl	800decc <SCSI_RequestSense>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	75fb      	strb	r3, [r7, #23]
    break;
 800d8b2:	e080      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d8b4:	7afb      	ldrb	r3, [r7, #11]
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f000 f8cc 	bl	800da58 <SCSI_Inquiry>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	75fb      	strb	r3, [r7, #23]
    break;
 800d8c4:	e077      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d8c6:	7afb      	ldrb	r3, [r7, #11]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f000 fbb9 	bl	800e044 <SCSI_StartStopUnit>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	75fb      	strb	r3, [r7, #23]
    break;
 800d8d6:	e06e      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d8d8:	7afb      	ldrb	r3, [r7, #11]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	4619      	mov	r1, r3
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f000 fbfb 	bl	800e0da <SCSI_AllowPreventRemovable>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	75fb      	strb	r3, [r7, #23]
    break;
 800d8e8:	e065      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d8ea:	7afb      	ldrb	r3, [r7, #11]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f000 fa9f 	bl	800de34 <SCSI_ModeSense6>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	75fb      	strb	r3, [r7, #23]
    break;
 800d8fa:	e05c      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d8fc:	7afb      	ldrb	r3, [r7, #11]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	4619      	mov	r1, r3
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f000 fabc 	bl	800de80 <SCSI_ModeSense10>
 800d908:	4603      	mov	r3, r0
 800d90a:	75fb      	strb	r3, [r7, #23]
    break;
 800d90c:	e053      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d90e:	7afb      	ldrb	r3, [r7, #11]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	4619      	mov	r1, r3
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f000 fa20 	bl	800dd5a <SCSI_ReadFormatCapacity>
 800d91a:	4603      	mov	r3, r0
 800d91c:	75fb      	strb	r3, [r7, #23]
    break;
 800d91e:	e04a      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d920:	7afb      	ldrb	r3, [r7, #11]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	4619      	mov	r1, r3
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 f904 	bl	800db34 <SCSI_ReadCapacity10>
 800d92c:	4603      	mov	r3, r0
 800d92e:	75fb      	strb	r3, [r7, #23]
    break;
 800d930:	e041      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d932:	7afb      	ldrb	r3, [r7, #11]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	4619      	mov	r1, r3
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f000 f96a 	bl	800dc12 <SCSI_ReadCapacity16>
 800d93e:	4603      	mov	r3, r0
 800d940:	75fb      	strb	r3, [r7, #23]
    break;
 800d942:	e038      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d944:	7afb      	ldrb	r3, [r7, #11]
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	4619      	mov	r1, r3
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f000 fbe8 	bl	800e120 <SCSI_Read10>
 800d950:	4603      	mov	r3, r0
 800d952:	75fb      	strb	r3, [r7, #23]
    break;
 800d954:	e02f      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d956:	7afb      	ldrb	r3, [r7, #11]
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	4619      	mov	r1, r3
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f000 fc79 	bl	800e254 <SCSI_Read12>
 800d962:	4603      	mov	r3, r0
 800d964:	75fb      	strb	r3, [r7, #23]
    break;
 800d966:	e026      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d968:	7afb      	ldrb	r3, [r7, #11]
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	4619      	mov	r1, r3
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f000 fd15 	bl	800e39e <SCSI_Write10>
 800d974:	4603      	mov	r3, r0
 800d976:	75fb      	strb	r3, [r7, #23]
    break;
 800d978:	e01d      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d97a:	7afb      	ldrb	r3, [r7, #11]
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	4619      	mov	r1, r3
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 fdcb 	bl	800e51c <SCSI_Write12>
 800d986:	4603      	mov	r3, r0
 800d988:	75fb      	strb	r3, [r7, #23]
    break;
 800d98a:	e014      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d98c:	7afb      	ldrb	r3, [r7, #11]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	4619      	mov	r1, r3
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 fe91 	bl	800e6ba <SCSI_Verify10>
 800d998:	4603      	mov	r3, r0
 800d99a:	75fb      	strb	r3, [r7, #23]
    break;
 800d99c:	e00b      	b.n	800d9b6 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d99e:	7af9      	ldrb	r1, [r7, #11]
 800d9a0:	2320      	movs	r3, #32
 800d9a2:	2205      	movs	r2, #5
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f000 fb0a 	bl	800dfbe <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d9b0:	23ff      	movs	r3, #255	; 0xff
 800d9b2:	75fb      	strb	r3, [r7, #23]
    break;
 800d9b4:	bf00      	nop
  }

  return ret;
 800d9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3718      	adds	r7, #24
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b086      	sub	sp, #24
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	60f8      	str	r0, [r7, #12]
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	607a      	str	r2, [r7, #4]
 800d9ce:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9d6:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00a      	beq.n	800d9f8 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d9e8:	2320      	movs	r3, #32
 800d9ea:	2205      	movs	r2, #5
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f000 fae6 	bl	800dfbe <SCSI_SenseCode>

    return -1;
 800d9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f6:	e02a      	b.n	800da4e <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d10b      	bne.n	800da1a <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800da02:	7af9      	ldrb	r1, [r7, #11]
 800da04:	233a      	movs	r3, #58	; 0x3a
 800da06:	2202      	movs	r2, #2
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	f000 fad8 	bl	800dfbe <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	2205      	movs	r2, #5
 800da12:	721a      	strb	r2, [r3, #8]
    return -1;
 800da14:	f04f 33ff 	mov.w	r3, #4294967295
 800da18:	e019      	b.n	800da4e <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	7afa      	ldrb	r2, [r7, #11]
 800da24:	4610      	mov	r0, r2
 800da26:	4798      	blx	r3
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00b      	beq.n	800da46 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800da2e:	7af9      	ldrb	r1, [r7, #11]
 800da30:	233a      	movs	r3, #58	; 0x3a
 800da32:	2202      	movs	r2, #2
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f000 fac2 	bl	800dfbe <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	2205      	movs	r2, #5
 800da3e:	721a      	strb	r2, [r3, #8]

    return -1;
 800da40:	f04f 33ff 	mov.w	r3, #4294967295
 800da44:	e003      	b.n	800da4e <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2200      	movs	r2, #0
 800da4a:	60da      	str	r2, [r3, #12]

  return 0;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3718      	adds	r7, #24
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
	...

0800da58 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	460b      	mov	r3, r1
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da6c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10a      	bne.n	800da8e <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800da7e:	2320      	movs	r3, #32
 800da80:	2205      	movs	r2, #5
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f000 fa9b 	bl	800dfbe <SCSI_SenseCode>
    return -1;
 800da88:	f04f 33ff 	mov.w	r3, #4294967295
 800da8c:	e04a      	b.n	800db24 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3301      	adds	r3, #1
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	f003 0301 	and.w	r3, r3, #1
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d020      	beq.n	800dade <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	3302      	adds	r3, #2
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d105      	bne.n	800dab2 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800daa6:	2206      	movs	r2, #6
 800daa8:	4920      	ldr	r1, [pc, #128]	; (800db2c <SCSI_Inquiry+0xd4>)
 800daaa:	69b8      	ldr	r0, [r7, #24]
 800daac:	f000 ff50 	bl	800e950 <SCSI_UpdateBotData>
 800dab0:	e037      	b.n	800db22 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	3302      	adds	r3, #2
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b80      	cmp	r3, #128	; 0x80
 800daba:	d105      	bne.n	800dac8 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800dabc:	2208      	movs	r2, #8
 800dabe:	491c      	ldr	r1, [pc, #112]	; (800db30 <SCSI_Inquiry+0xd8>)
 800dac0:	69b8      	ldr	r0, [r7, #24]
 800dac2:	f000 ff45 	bl	800e950 <SCSI_UpdateBotData>
 800dac6:	e02c      	b.n	800db22 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dace:	2324      	movs	r3, #36	; 0x24
 800dad0:	2205      	movs	r2, #5
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f000 fa73 	bl	800dfbe <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800dad8:	f04f 33ff 	mov.w	r3, #4294967295
 800dadc:	e022      	b.n	800db24 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dae4:	69d9      	ldr	r1, [r3, #28]
 800dae6:	7afa      	ldrb	r2, [r7, #11]
 800dae8:	4613      	mov	r3, r2
 800daea:	00db      	lsls	r3, r3, #3
 800daec:	4413      	add	r3, r2
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	440b      	add	r3, r1
 800daf2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	3304      	adds	r3, #4
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	3305      	adds	r3, #5
 800dafe:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3304      	adds	r3, #4
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	b29b      	uxth	r3, r3
 800db08:	8bfa      	ldrh	r2, [r7, #30]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d303      	bcc.n	800db16 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	3304      	adds	r3, #4
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800db16:	8bfb      	ldrh	r3, [r7, #30]
 800db18:	461a      	mov	r2, r3
 800db1a:	6979      	ldr	r1, [r7, #20]
 800db1c:	69b8      	ldr	r0, [r7, #24]
 800db1e:	f000 ff17 	bl	800e950 <SCSI_UpdateBotData>
  }

  return 0;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3720      	adds	r7, #32
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	240000b4 	.word	0x240000b4
 800db30:	240000bc 	.word	0x240000bc

0800db34 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	460b      	mov	r3, r1
 800db3e:	607a      	str	r2, [r7, #4]
 800db40:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db48:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800db5e:	7af8      	ldrb	r0, [r7, #11]
 800db60:	4798      	blx	r3
 800db62:	4603      	mov	r3, r0
 800db64:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800db66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d104      	bne.n	800db78 <SCSI_ReadCapacity10+0x44>
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800db74:	2b02      	cmp	r3, #2
 800db76:	d108      	bne.n	800db8a <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800db78:	7af9      	ldrb	r1, [r7, #11]
 800db7a:	233a      	movs	r3, #58	; 0x3a
 800db7c:	2202      	movs	r2, #2
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f000 fa1d 	bl	800dfbe <SCSI_SenseCode>
    return -1;
 800db84:	f04f 33ff 	mov.w	r3, #4294967295
 800db88:	e03f      	b.n	800dc0a <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800db90:	3b01      	subs	r3, #1
 800db92:	0e1b      	lsrs	r3, r3, #24
 800db94:	b2da      	uxtb	r2, r3
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dba0:	3b01      	subs	r3, #1
 800dba2:	0c1b      	lsrs	r3, r3, #16
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	0a1b      	lsrs	r3, r3, #8
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	3b01      	subs	r3, #1
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dbd0:	161b      	asrs	r3, r3, #24
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dbde:	141b      	asrs	r3, r3, #16
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dbec:	0a1b      	lsrs	r3, r3, #8
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2208      	movs	r2, #8
 800dc06:	60da      	str	r2, [r3, #12]

  return 0;
 800dc08:	2300      	movs	r3, #0

}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b088      	sub	sp, #32
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	607a      	str	r2, [r7, #4]
 800dc1e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc26:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	69ba      	ldr	r2, [r7, #24]
 800dc32:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800dc36:	69ba      	ldr	r2, [r7, #24]
 800dc38:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800dc3c:	7af8      	ldrb	r0, [r7, #11]
 800dc3e:	4798      	blx	r3
 800dc40:	4603      	mov	r3, r0
 800dc42:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dc44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d104      	bne.n	800dc56 <SCSI_ReadCapacity16+0x44>
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d108      	bne.n	800dc68 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dc56:	7af9      	ldrb	r1, [r7, #11]
 800dc58:	233a      	movs	r3, #58	; 0x3a
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f000 f9ae 	bl	800dfbe <SCSI_SenseCode>
    return -1;
 800dc62:	f04f 33ff 	mov.w	r3, #4294967295
 800dc66:	e074      	b.n	800dd52 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	330a      	adds	r3, #10
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	330b      	adds	r3, #11
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc78:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	330c      	adds	r3, #12
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dc82:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	320d      	adds	r2, #13
 800dc88:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dc8a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dc90:	2300      	movs	r3, #0
 800dc92:	77fb      	strb	r3, [r7, #31]
 800dc94:	e007      	b.n	800dca6 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800dc96:	7ffb      	ldrb	r3, [r7, #31]
 800dc98:	69ba      	ldr	r2, [r7, #24]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800dca0:	7ffb      	ldrb	r3, [r7, #31]
 800dca2:	3301      	adds	r3, #1
 800dca4:	77fb      	strb	r3, [r7, #31]
 800dca6:	7ffa      	ldrb	r2, [r7, #31]
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d3f2      	bcc.n	800dc96 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	0e1b      	lsrs	r3, r3, #24
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	0c1b      	lsrs	r3, r3, #16
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	0a1b      	lsrs	r3, r3, #8
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	3b01      	subs	r3, #1
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dcf6:	161b      	asrs	r3, r3, #24
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dd04:	141b      	asrs	r3, r3, #16
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dd12:	0a1b      	lsrs	r3, r3, #8
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	b2da      	uxtb	r2, r3
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	330a      	adds	r3, #10
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	330b      	adds	r3, #11
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd38:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	330c      	adds	r3, #12
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800dd42:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	320d      	adds	r2, #13
 800dd48:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800dd4a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	60da      	str	r2, [r3, #12]

  return 0;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3720      	adds	r7, #32
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b088      	sub	sp, #32
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	60f8      	str	r0, [r7, #12]
 800dd62:	460b      	mov	r3, r1
 800dd64:	607a      	str	r2, [r7, #4]
 800dd66:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd6e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	f107 0214 	add.w	r2, r7, #20
 800dd7c:	f107 0110 	add.w	r1, r7, #16
 800dd80:	7af8      	ldrb	r0, [r7, #11]
 800dd82:	4798      	blx	r3
 800dd84:	4603      	mov	r3, r0
 800dd86:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dd88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d104      	bne.n	800dd9a <SCSI_ReadFormatCapacity+0x40>
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d108      	bne.n	800ddac <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dd9a:	7af9      	ldrb	r1, [r7, #11]
 800dd9c:	233a      	movs	r3, #58	; 0x3a
 800dd9e:	2202      	movs	r2, #2
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f000 f90c 	bl	800dfbe <SCSI_SenseCode>
    return -1;
 800dda6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddaa:	e03e      	b.n	800de2a <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800ddac:	2300      	movs	r3, #0
 800ddae:	83fb      	strh	r3, [r7, #30]
 800ddb0:	e007      	b.n	800ddc2 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800ddb2:	8bfb      	ldrh	r3, [r7, #30]
 800ddb4:	69ba      	ldr	r2, [r7, #24]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	2200      	movs	r2, #0
 800ddba:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800ddbc:	8bfb      	ldrh	r3, [r7, #30]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	83fb      	strh	r3, [r7, #30]
 800ddc2:	8bfb      	ldrh	r3, [r7, #30]
 800ddc4:	2b0b      	cmp	r3, #11
 800ddc6:	d9f4      	bls.n	800ddb2 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	2208      	movs	r2, #8
 800ddcc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	0e1b      	lsrs	r3, r3, #24
 800ddd4:	b2da      	uxtb	r2, r3
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	3b01      	subs	r3, #1
 800ddde:	0c1b      	lsrs	r3, r3, #16
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	3b01      	subs	r3, #1
 800ddea:	0a1b      	lsrs	r3, r3, #8
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	2202      	movs	r2, #2
 800de02:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800de04:	8abb      	ldrh	r3, [r7, #20]
 800de06:	141b      	asrs	r3, r3, #16
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800de0e:	8abb      	ldrh	r3, [r7, #20]
 800de10:	0a1b      	lsrs	r3, r3, #8
 800de12:	b29b      	uxth	r3, r3
 800de14:	b2da      	uxtb	r2, r3
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800de1a:	8abb      	ldrh	r3, [r7, #20]
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	220c      	movs	r2, #12
 800de26:	60da      	str	r2, [r3, #12]

  return 0;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3720      	adds	r7, #32
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
	...

0800de34 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	460b      	mov	r3, r1
 800de3e:	607a      	str	r2, [r7, #4]
 800de40:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de48:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800de4a:	2317      	movs	r3, #23
 800de4c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	3304      	adds	r3, #4
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	b29b      	uxth	r3, r3
 800de56:	8afa      	ldrh	r2, [r7, #22]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d303      	bcc.n	800de64 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	3304      	adds	r3, #4
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800de64:	8afb      	ldrh	r3, [r7, #22]
 800de66:	461a      	mov	r2, r3
 800de68:	4904      	ldr	r1, [pc, #16]	; (800de7c <SCSI_ModeSense6+0x48>)
 800de6a:	6938      	ldr	r0, [r7, #16]
 800de6c:	f000 fd70 	bl	800e950 <SCSI_UpdateBotData>

  return 0;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3718      	adds	r7, #24
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	240000c4 	.word	0x240000c4

0800de80 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	460b      	mov	r3, r1
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de94:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800de96:	231b      	movs	r3, #27
 800de98:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	3308      	adds	r3, #8
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	8afa      	ldrh	r2, [r7, #22]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d303      	bcc.n	800deb0 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	3308      	adds	r3, #8
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800deb0:	8afb      	ldrh	r3, [r7, #22]
 800deb2:	461a      	mov	r2, r3
 800deb4:	4904      	ldr	r1, [pc, #16]	; (800dec8 <SCSI_ModeSense10+0x48>)
 800deb6:	6938      	ldr	r0, [r7, #16]
 800deb8:	f000 fd4a 	bl	800e950 <SCSI_UpdateBotData>

  return 0;
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3718      	adds	r7, #24
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	240000dc 	.word	0x240000dc

0800decc <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	460b      	mov	r3, r1
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dee0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10a      	bne.n	800df02 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800def2:	2320      	movs	r3, #32
 800def4:	2205      	movs	r2, #5
 800def6:	68f8      	ldr	r0, [r7, #12]
 800def8:	f000 f861 	bl	800dfbe <SCSI_SenseCode>
    return -1;
 800defc:	f04f 33ff 	mov.w	r3, #4294967295
 800df00:	e059      	b.n	800dfb6 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800df02:	2300      	movs	r3, #0
 800df04:	75fb      	strb	r3, [r7, #23]
 800df06:	e007      	b.n	800df18 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800df08:	7dfb      	ldrb	r3, [r7, #23]
 800df0a:	693a      	ldr	r2, [r7, #16]
 800df0c:	4413      	add	r3, r2
 800df0e:	2200      	movs	r2, #0
 800df10:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800df12:	7dfb      	ldrb	r3, [r7, #23]
 800df14:	3301      	adds	r3, #1
 800df16:	75fb      	strb	r3, [r7, #23]
 800df18:	7dfb      	ldrb	r3, [r7, #23]
 800df1a:	2b11      	cmp	r3, #17
 800df1c:	d9f4      	bls.n	800df08 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	2270      	movs	r2, #112	; 0x70
 800df22:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	220c      	movs	r2, #12
 800df28:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800df36:	429a      	cmp	r2, r3
 800df38:	d02e      	beq.n	800df98 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df40:	461a      	mov	r2, r3
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	3248      	adds	r2, #72	; 0x48
 800df46:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df54:	693a      	ldr	r2, [r7, #16]
 800df56:	3348      	adds	r3, #72	; 0x48
 800df58:	00db      	lsls	r3, r3, #3
 800df5a:	4413      	add	r3, r2
 800df5c:	791a      	ldrb	r2, [r3, #4]
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	3348      	adds	r3, #72	; 0x48
 800df6c:	00db      	lsls	r3, r3, #3
 800df6e:	4413      	add	r3, r2
 800df70:	795a      	ldrb	r2, [r3, #5]
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df7c:	3301      	adds	r3, #1
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800df8c:	2b04      	cmp	r3, #4
 800df8e:	d103      	bne.n	800df98 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	2200      	movs	r2, #0
 800df94:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	2212      	movs	r2, #18
 800df9c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	2b12      	cmp	r3, #18
 800dfa6:	d805      	bhi.n	800dfb4 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3718      	adds	r7, #24
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b085      	sub	sp, #20
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	4608      	mov	r0, r1
 800dfc8:	4611      	mov	r1, r2
 800dfca:	461a      	mov	r2, r3
 800dfcc:	4603      	mov	r3, r0
 800dfce:	70fb      	strb	r3, [r7, #3]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70bb      	strb	r3, [r7, #2]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfde:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	3248      	adds	r2, #72	; 0x48
 800dfec:	78b9      	ldrb	r1, [r7, #2]
 800dfee:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	3348      	adds	r3, #72	; 0x48
 800dffc:	00db      	lsls	r3, r3, #3
 800dffe:	4413      	add	r3, r2
 800e000:	787a      	ldrb	r2, [r7, #1]
 800e002:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	3348      	adds	r3, #72	; 0x48
 800e00e:	00db      	lsls	r3, r3, #3
 800e010:	4413      	add	r3, r2
 800e012:	2200      	movs	r2, #0
 800e014:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800e01c:	3301      	adds	r3, #1
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800e02c:	2b04      	cmp	r3, #4
 800e02e:	d103      	bne.n	800e038 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2200      	movs	r2, #0
 800e034:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800e038:	bf00      	nop
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	460b      	mov	r3, r1
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e058:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e060:	2b01      	cmp	r3, #1
 800e062:	d10f      	bne.n	800e084 <SCSI_StartStopUnit+0x40>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3304      	adds	r3, #4
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	f003 0303 	and.w	r3, r3, #3
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d108      	bne.n	800e084 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e072:	7af9      	ldrb	r1, [r7, #11]
 800e074:	2324      	movs	r3, #36	; 0x24
 800e076:	2205      	movs	r2, #5
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f7ff ffa0 	bl	800dfbe <SCSI_SenseCode>

    return -1;
 800e07e:	f04f 33ff 	mov.w	r3, #4294967295
 800e082:	e026      	b.n	800e0d2 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3304      	adds	r3, #4
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	f003 0303 	and.w	r3, r3, #3
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d104      	bne.n	800e09c <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800e09a:	e016      	b.n	800e0ca <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	f003 0303 	and.w	r3, r3, #3
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d104      	bne.n	800e0b4 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	2202      	movs	r2, #2
 800e0ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800e0b2:	e00a      	b.n	800e0ca <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	f003 0303 	and.w	r3, r3, #3
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	d103      	bne.n	800e0ca <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	60da      	str	r2, [r3, #12]

  return 0;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3718      	adds	r7, #24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b087      	sub	sp, #28
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	60f8      	str	r0, [r7, #12]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	607a      	str	r2, [r7, #4]
 800e0e6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0ee:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d104      	bne.n	800e104 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800e102:	e003      	b.n	800e10c <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	2201      	movs	r2, #1
 800e108:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	2200      	movs	r2, #0
 800e110:	60da      	str	r2, [r3, #12]

  return 0;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	371c      	adds	r7, #28
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	460b      	mov	r3, r1
 800e12a:	607a      	str	r2, [r7, #4]
 800e12c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e134:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	7a1b      	ldrb	r3, [r3, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d17c      	bne.n	800e238 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e144:	b25b      	sxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	db0a      	blt.n	800e160 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e150:	2320      	movs	r3, #32
 800e152:	2205      	movs	r2, #5
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f7ff ff32 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e15a:	f04f 33ff 	mov.w	r3, #4294967295
 800e15e:	e075      	b.n	800e24c <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e166:	2b02      	cmp	r3, #2
 800e168:	d108      	bne.n	800e17c <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e16a:	7af9      	ldrb	r1, [r7, #11]
 800e16c:	233a      	movs	r3, #58	; 0x3a
 800e16e:	2202      	movs	r2, #2
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f7ff ff24 	bl	800dfbe <SCSI_SenseCode>

      return -1;
 800e176:	f04f 33ff 	mov.w	r3, #4294967295
 800e17a:	e067      	b.n	800e24c <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	7afa      	ldrb	r2, [r7, #11]
 800e186:	4610      	mov	r0, r2
 800e188:	4798      	blx	r3
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d008      	beq.n	800e1a2 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e190:	7af9      	ldrb	r1, [r7, #11]
 800e192:	233a      	movs	r3, #58	; 0x3a
 800e194:	2202      	movs	r2, #2
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f7ff ff11 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e19c:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a0:	e054      	b.n	800e24c <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3302      	adds	r3, #2
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3303      	adds	r3, #3
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1b2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e1bc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	3205      	adds	r2, #5
 800e1c2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e1c4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3307      	adds	r3, #7
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	021b      	lsls	r3, r3, #8
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	3208      	adds	r2, #8
 800e1d8:	7812      	ldrb	r2, [r2, #0]
 800e1da:	431a      	orrs	r2, r3
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1ee:	7af9      	ldrb	r1, [r7, #11]
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f000 fa95 	bl	800e720 <SCSI_CheckAddressRange>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	da02      	bge.n	800e202 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e200:	e024      	b.n	800e24c <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e20e:	6979      	ldr	r1, [r7, #20]
 800e210:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800e214:	fb01 f303 	mul.w	r3, r1, r3
 800e218:	429a      	cmp	r2, r3
 800e21a:	d00a      	beq.n	800e232 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e222:	2320      	movs	r3, #32
 800e224:	2205      	movs	r2, #5
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f7ff fec9 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e22c:	f04f 33ff 	mov.w	r3, #4294967295
 800e230:	e00c      	b.n	800e24c <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	2202      	movs	r2, #2
 800e236:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e23e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e240:	7afb      	ldrb	r3, [r7, #11]
 800e242:	4619      	mov	r1, r3
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 fa8d 	bl	800e764 <SCSI_ProcessRead>
 800e24a:	4603      	mov	r3, r0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	460b      	mov	r3, r1
 800e25e:	607a      	str	r2, [r7, #4]
 800e260:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e268:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	7a1b      	ldrb	r3, [r3, #8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f040 8087 	bne.w	800e382 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e27a:	b25b      	sxtb	r3, r3
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	db0a      	blt.n	800e296 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e286:	2320      	movs	r3, #32
 800e288:	2205      	movs	r2, #5
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f7ff fe97 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e290:	f04f 33ff 	mov.w	r3, #4294967295
 800e294:	e07f      	b.n	800e396 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	d108      	bne.n	800e2b2 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e2a0:	7af9      	ldrb	r1, [r7, #11]
 800e2a2:	233a      	movs	r3, #58	; 0x3a
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f7ff fe89 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b0:	e071      	b.n	800e396 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	7afa      	ldrb	r2, [r7, #11]
 800e2bc:	4610      	mov	r0, r2
 800e2be:	4798      	blx	r3
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d008      	beq.n	800e2d8 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e2c6:	7af9      	ldrb	r1, [r7, #11]
 800e2c8:	233a      	movs	r3, #58	; 0x3a
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f7ff fe76 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d6:	e05e      	b.n	800e396 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3302      	adds	r3, #2
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3303      	adds	r3, #3
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2e8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e2f2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	3205      	adds	r2, #5
 800e2f8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e2fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	3306      	adds	r3, #6
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	3307      	adds	r3, #7
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e312:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3308      	adds	r3, #8
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e31c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	3209      	adds	r2, #9
 800e322:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e324:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e338:	7af9      	ldrb	r1, [r7, #11]
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 f9f0 	bl	800e720 <SCSI_CheckAddressRange>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	da02      	bge.n	800e34c <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e346:	f04f 33ff 	mov.w	r3, #4294967295
 800e34a:	e024      	b.n	800e396 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e358:	6979      	ldr	r1, [r7, #20]
 800e35a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800e35e:	fb01 f303 	mul.w	r3, r1, r3
 800e362:	429a      	cmp	r2, r3
 800e364:	d00a      	beq.n	800e37c <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e36c:	2320      	movs	r3, #32
 800e36e:	2205      	movs	r2, #5
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f7ff fe24 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e376:	f04f 33ff 	mov.w	r3, #4294967295
 800e37a:	e00c      	b.n	800e396 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	2202      	movs	r2, #2
 800e380:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e388:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e38a:	7afb      	ldrb	r3, [r7, #11]
 800e38c:	4619      	mov	r1, r3
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f000 f9e8 	bl	800e764 <SCSI_ProcessRead>
 800e394:	4603      	mov	r3, r0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b086      	sub	sp, #24
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	607a      	str	r2, [r7, #4]
 800e3aa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3b2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	7a1b      	ldrb	r3, [r3, #8]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f040 80a5 	bne.w	800e508 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10a      	bne.n	800e3de <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e3ce:	2320      	movs	r3, #32
 800e3d0:	2205      	movs	r2, #5
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f7ff fdf3 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3dc:	e09a      	b.n	800e514 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e3e4:	b25b      	sxtb	r3, r3
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	da0a      	bge.n	800e400 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e3f0:	2320      	movs	r3, #32
 800e3f2:	2205      	movs	r2, #5
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f7ff fde2 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fe:	e089      	b.n	800e514 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	7afa      	ldrb	r2, [r7, #11]
 800e40a:	4610      	mov	r0, r2
 800e40c:	4798      	blx	r3
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d008      	beq.n	800e426 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e414:	7af9      	ldrb	r1, [r7, #11]
 800e416:	233a      	movs	r3, #58	; 0x3a
 800e418:	2202      	movs	r2, #2
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f7ff fdcf 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e420:	f04f 33ff 	mov.w	r3, #4294967295
 800e424:	e076      	b.n	800e514 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	7afa      	ldrb	r2, [r7, #11]
 800e430:	4610      	mov	r0, r2
 800e432:	4798      	blx	r3
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d008      	beq.n	800e44c <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e43a:	7af9      	ldrb	r1, [r7, #11]
 800e43c:	2327      	movs	r3, #39	; 0x27
 800e43e:	2202      	movs	r2, #2
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f7ff fdbc 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e446:	f04f 33ff 	mov.w	r3, #4294967295
 800e44a:	e063      	b.n	800e514 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	3302      	adds	r3, #2
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	3303      	adds	r3, #3
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e45c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	3304      	adds	r3, #4
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e466:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	3205      	adds	r2, #5
 800e46c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e46e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	3307      	adds	r3, #7
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	3208      	adds	r2, #8
 800e482:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e484:	431a      	orrs	r2, r3
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e498:	7af9      	ldrb	r1, [r7, #11]
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f000 f940 	bl	800e720 <SCSI_CheckAddressRange>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	da02      	bge.n	800e4ac <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4aa:	e033      	b.n	800e514 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e4b8:	fb02 f303 	mul.w	r3, r2, r3
 800e4bc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e4c4:	693a      	ldr	r2, [r7, #16]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d00a      	beq.n	800e4e0 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e4d0:	2320      	movs	r3, #32
 800e4d2:	2205      	movs	r2, #5
 800e4d4:	68f8      	ldr	r0, [r7, #12]
 800e4d6:	f7ff fd72 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e4da:	f04f 33ff 	mov.w	r3, #4294967295
 800e4de:	e019      	b.n	800e514 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4e6:	bf28      	it	cs
 800e4e8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e4ec:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f103 0210 	add.w	r2, r3, #16
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	2101      	movs	r1, #1
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f004 f945 	bl	801278e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e504:	2300      	movs	r3, #0
 800e506:	e005      	b.n	800e514 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800e508:	7afb      	ldrb	r3, [r7, #11]
 800e50a:	4619      	mov	r1, r3
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f000 f99c 	bl	800e84a <SCSI_ProcessWrite>
 800e512:	4603      	mov	r3, r0
}
 800e514:	4618      	mov	r0, r3
 800e516:	3718      	adds	r7, #24
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b086      	sub	sp, #24
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	460b      	mov	r3, r1
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e530:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	7a1b      	ldrb	r3, [r3, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	f040 80b5 	bne.w	800e6a6 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e542:	2b00      	cmp	r3, #0
 800e544:	d10a      	bne.n	800e55c <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e54c:	2320      	movs	r3, #32
 800e54e:	2205      	movs	r2, #5
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f7ff fd34 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e556:	f04f 33ff 	mov.w	r3, #4294967295
 800e55a:	e0aa      	b.n	800e6b2 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e562:	b25b      	sxtb	r3, r3
 800e564:	2b00      	cmp	r3, #0
 800e566:	da0a      	bge.n	800e57e <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e56e:	2320      	movs	r3, #32
 800e570:	2205      	movs	r2, #5
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f7ff fd23 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e578:	f04f 33ff 	mov.w	r3, #4294967295
 800e57c:	e099      	b.n	800e6b2 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	7afa      	ldrb	r2, [r7, #11]
 800e588:	4610      	mov	r0, r2
 800e58a:	4798      	blx	r3
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00b      	beq.n	800e5aa <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e592:	7af9      	ldrb	r1, [r7, #11]
 800e594:	233a      	movs	r3, #58	; 0x3a
 800e596:	2202      	movs	r2, #2
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f7ff fd10 	bl	800dfbe <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	2205      	movs	r2, #5
 800e5a2:	721a      	strb	r2, [r3, #8]
      return -1;
 800e5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a8:	e083      	b.n	800e6b2 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	7afa      	ldrb	r2, [r7, #11]
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	4798      	blx	r3
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00b      	beq.n	800e5d6 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e5be:	7af9      	ldrb	r1, [r7, #11]
 800e5c0:	2327      	movs	r3, #39	; 0x27
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f7ff fcfa 	bl	800dfbe <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2205      	movs	r2, #5
 800e5ce:	721a      	strb	r2, [r3, #8]
      return -1;
 800e5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d4:	e06d      	b.n	800e6b2 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	3302      	adds	r3, #2
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	3303      	adds	r3, #3
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5e6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e5f0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	3205      	adds	r2, #5
 800e5f6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e5f8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	3306      	adds	r3, #6
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	3307      	adds	r3, #7
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e610:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	3308      	adds	r3, #8
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e61a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	3209      	adds	r2, #9
 800e620:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e622:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e636:	7af9      	ldrb	r1, [r7, #11]
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f000 f871 	bl	800e720 <SCSI_CheckAddressRange>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	da02      	bge.n	800e64a <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e644:	f04f 33ff 	mov.w	r3, #4294967295
 800e648:	e033      	b.n	800e6b2 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e656:	fb02 f303 	mul.w	r3, r2, r3
 800e65a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e662:	693a      	ldr	r2, [r7, #16]
 800e664:	429a      	cmp	r2, r3
 800e666:	d00a      	beq.n	800e67e <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e66e:	2320      	movs	r3, #32
 800e670:	2205      	movs	r2, #5
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f7ff fca3 	bl	800dfbe <SCSI_SenseCode>
      return -1;
 800e678:	f04f 33ff 	mov.w	r3, #4294967295
 800e67c:	e019      	b.n	800e6b2 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e684:	bf28      	it	cs
 800e686:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e68a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	2201      	movs	r2, #1
 800e690:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	f103 0210 	add.w	r2, r3, #16
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	2101      	movs	r1, #1
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f004 f876 	bl	801278e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	e005      	b.n	800e6b2 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800e6a6:	7afb      	ldrb	r3, [r7, #11]
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f000 f8cd 	bl	800e84a <SCSI_ProcessWrite>
 800e6b0:	4603      	mov	r3, r0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3718      	adds	r7, #24
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b086      	sub	sp, #24
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	60f8      	str	r0, [r7, #12]
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	607a      	str	r2, [r7, #4]
 800e6c6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6ce:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	f003 0302 	and.w	r3, r3, #2
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d008      	beq.n	800e6f0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e6de:	7af9      	ldrb	r1, [r7, #11]
 800e6e0:	2324      	movs	r3, #36	; 0x24
 800e6e2:	2205      	movs	r2, #5
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	f7ff fc6a 	bl	800dfbe <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ee:	e013      	b.n	800e718 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e6fc:	7af9      	ldrb	r1, [r7, #11]
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f000 f80e 	bl	800e720 <SCSI_CheckAddressRange>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	da02      	bge.n	800e710 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800e70a:	f04f 33ff 	mov.w	r3, #4294967295
 800e70e:	e003      	b.n	800e718 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	2200      	movs	r2, #0
 800e714:	60da      	str	r2, [r3, #12]

  return 0;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3718      	adds	r7, #24
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	607a      	str	r2, [r7, #4]
 800e72a:	603b      	str	r3, [r7, #0]
 800e72c:	460b      	mov	r3, r1
 800e72e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e736:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	441a      	add	r2, r3
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e744:	429a      	cmp	r2, r3
 800e746:	d908      	bls.n	800e75a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e748:	7af9      	ldrb	r1, [r7, #11]
 800e74a:	2321      	movs	r3, #33	; 0x21
 800e74c:	2205      	movs	r2, #5
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f7ff fc35 	bl	800dfbe <SCSI_SenseCode>
    return -1;
 800e754:	f04f 33ff 	mov.w	r3, #4294967295
 800e758:	e000      	b.n	800e75c <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3718      	adds	r7, #24
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e764:	b590      	push	{r4, r7, lr}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e776:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e784:	fb02 f303 	mul.w	r3, r2, r3
 800e788:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e790:	bf28      	it	cs
 800e792:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e796:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e79e:	691c      	ldr	r4, [r3, #16]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f103 0110 	add.w	r1, r3, #16
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	78f8      	ldrb	r0, [r7, #3]
 800e7be:	47a0      	blx	r4
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	da08      	bge.n	800e7d8 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e7c6:	78f9      	ldrb	r1, [r7, #3]
 800e7c8:	2311      	movs	r3, #17
 800e7ca:	2204      	movs	r2, #4
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7ff fbf6 	bl	800dfbe <SCSI_SenseCode>
    return -1;
 800e7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d6:	e034      	b.n	800e842 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f103 0210 	add.w	r2, r3, #16
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	2181      	movs	r1, #129	; 0x81
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f003 ffb2 	bl	801274c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7fc:	441a      	add	r2, r3
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e810:	4619      	mov	r1, r3
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	fbb3 f3f1 	udiv	r3, r3, r1
 800e818:	1ad2      	subs	r2, r2, r3
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	1ad2      	subs	r2, r2, r3
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e836:	2b00      	cmp	r3, #0
 800e838:	d102      	bne.n	800e840 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2203      	movs	r2, #3
 800e83e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	bd90      	pop	{r4, r7, pc}

0800e84a <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e84a:	b590      	push	{r4, r7, lr}
 800e84c:	b085      	sub	sp, #20
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
 800e852:	460b      	mov	r3, r1
 800e854:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e85c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e86a:	fb02 f303 	mul.w	r3, r2, r3
 800e86e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e876:	bf28      	it	cs
 800e878:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e87c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e884:	695c      	ldr	r4, [r3, #20]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f103 0110 	add.w	r1, r3, #16
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e898:	4618      	mov	r0, r3
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	78f8      	ldrb	r0, [r7, #3]
 800e8a4:	47a0      	blx	r4
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	da08      	bge.n	800e8be <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e8ac:	78f9      	ldrb	r1, [r7, #3]
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	2204      	movs	r2, #4
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7ff fb83 	bl	800dfbe <SCSI_SenseCode>
    return -1;
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	e044      	b.n	800e948 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8d2:	441a      	add	r2, r3
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8ee:	1ad2      	subs	r2, r2, r3
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	1ad2      	subs	r2, r2, r3
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d104      	bne.n	800e91a <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e910:	2100      	movs	r1, #0
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f7fe ff04 	bl	800d720 <MSC_BOT_SendCSW>
 800e918:	e015      	b.n	800e946 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e926:	fb02 f303 	mul.w	r3, r2, r3
 800e92a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e92e:	bf28      	it	cs
 800e930:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e934:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f103 0210 	add.w	r2, r3, #16
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	2101      	movs	r1, #1
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f003 ff24 	bl	801278e <USBD_LL_PrepareReceive>
  }

  return 0;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd90      	pop	{r4, r7, pc}

0800e950 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800e950:	b480      	push	{r7}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	4613      	mov	r3, r2
 800e95c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800e95e:	88fb      	ldrh	r3, [r7, #6]
 800e960:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800e962:	8afa      	ldrh	r2, [r7, #22]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800e968:	e00b      	b.n	800e982 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800e96a:	8afb      	ldrh	r3, [r7, #22]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800e970:	8afb      	ldrh	r3, [r7, #22]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	441a      	add	r2, r3
 800e976:	8afb      	ldrh	r3, [r7, #22]
 800e978:	7811      	ldrb	r1, [r2, #0]
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	4413      	add	r3, r2
 800e97e:	460a      	mov	r2, r1
 800e980:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800e982:	8afb      	ldrh	r3, [r7, #22]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d1f0      	bne.n	800e96a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	371c      	adds	r7, #28
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr

0800e996 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b086      	sub	sp, #24
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	60f8      	str	r0, [r7, #12]
 800e99e:	60b9      	str	r1, [r7, #8]
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	e025      	b.n	800e9fa <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d003      	beq.n	800e9c0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d003      	beq.n	800e9d2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d003      	beq.n	800e9e0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	68ba      	ldr	r2, [r7, #8]
 800e9dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	79fa      	ldrb	r2, [r7, #7]
 800e9ec:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f003 fd54 	bl	801249c <USBD_LL_Init>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
 800ea0a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e010      	b.n	800ea3c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2a:	f107 020e 	add.w	r2, r7, #14
 800ea2e:	4610      	mov	r0, r2
 800ea30:	4798      	blx	r3
 800ea32:	4602      	mov	r2, r0
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f003 fd75 	bl	801253c <USBD_LL_Start>
 800ea52:	4603      	mov	r3, r0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea64:	2300      	movs	r3, #0
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	370c      	adds	r7, #12
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr

0800ea72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b084      	sub	sp, #16
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ea7e:	2303      	movs	r3, #3
 800ea80:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d009      	beq.n	800eaa0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	78fa      	ldrb	r2, [r7, #3]
 800ea96:	4611      	mov	r1, r2
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	4798      	blx	r3
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800eaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b082      	sub	sp, #8
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	460b      	mov	r3, r1
 800eab4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d007      	beq.n	800ead0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	78fa      	ldrb	r2, [r7, #3]
 800eaca:	4611      	mov	r1, r2
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	4798      	blx	r3
  }

  return USBD_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3708      	adds	r7, #8
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b084      	sub	sp, #16
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
 800eae2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 ff2b 	bl	800f948 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eb00:	461a      	mov	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb0e:	f003 031f 	and.w	r3, r3, #31
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d00e      	beq.n	800eb34 <USBD_LL_SetupStage+0x5a>
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d302      	bcc.n	800eb20 <USBD_LL_SetupStage+0x46>
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d014      	beq.n	800eb48 <USBD_LL_SetupStage+0x6e>
 800eb1e:	e01d      	b.n	800eb5c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 fa17 	bl	800ef5c <USBD_StdDevReq>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	73fb      	strb	r3, [r7, #15]
      break;
 800eb32:	e020      	b.n	800eb76 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 fa7b 	bl	800f038 <USBD_StdItfReq>
 800eb42:	4603      	mov	r3, r0
 800eb44:	73fb      	strb	r3, [r7, #15]
      break;
 800eb46:	e016      	b.n	800eb76 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fab7 	bl	800f0c4 <USBD_StdEPReq>
 800eb56:	4603      	mov	r3, r0
 800eb58:	73fb      	strb	r3, [r7, #15]
      break;
 800eb5a:	e00c      	b.n	800eb76 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	4619      	mov	r1, r3
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f003 fd65 	bl	801263a <USBD_LL_StallEP>
 800eb70:	4603      	mov	r3, r0
 800eb72:	73fb      	strb	r3, [r7, #15]
      break;
 800eb74:	bf00      	nop
  }

  return ret;
 800eb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b086      	sub	sp, #24
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	460b      	mov	r3, r1
 800eb8a:	607a      	str	r2, [r7, #4]
 800eb8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eb8e:	7afb      	ldrb	r3, [r7, #11]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d137      	bne.n	800ec04 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eb9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eba2:	2b03      	cmp	r3, #3
 800eba4:	d14a      	bne.n	800ec3c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	689a      	ldr	r2, [r3, #8]
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d913      	bls.n	800ebda <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	689a      	ldr	r2, [r3, #8]
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	1ad2      	subs	r2, r2, r3
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	68da      	ldr	r2, [r3, #12]
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	bf28      	it	cs
 800ebcc:	4613      	movcs	r3, r2
 800ebce:	461a      	mov	r2, r3
 800ebd0:	6879      	ldr	r1, [r7, #4]
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f000 ff8f 	bl	800faf6 <USBD_CtlContinueRx>
 800ebd8:	e030      	b.n	800ec3c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe0:	691b      	ldr	r3, [r3, #16]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00a      	beq.n	800ebfc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ebec:	2b03      	cmp	r3, #3
 800ebee:	d105      	bne.n	800ebfc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f000 ff8b 	bl	800fb18 <USBD_CtlSendStatus>
 800ec02:	e01b      	b.n	800ec3c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d013      	beq.n	800ec38 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ec16:	2b03      	cmp	r3, #3
 800ec18:	d10e      	bne.n	800ec38 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec20:	699b      	ldr	r3, [r3, #24]
 800ec22:	7afa      	ldrb	r2, [r7, #11]
 800ec24:	4611      	mov	r1, r2
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	4798      	blx	r3
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d003      	beq.n	800ec3c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ec34:	7dfb      	ldrb	r3, [r7, #23]
 800ec36:	e002      	b.n	800ec3e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e000      	b.n	800ec3e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ec3c:	2300      	movs	r3, #0
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3718      	adds	r7, #24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b086      	sub	sp, #24
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	460b      	mov	r3, r1
 800ec50:	607a      	str	r2, [r7, #4]
 800ec52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ec54:	7afb      	ldrb	r3, [r7, #11]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d16a      	bne.n	800ed30 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3314      	adds	r3, #20
 800ec5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d155      	bne.n	800ed16 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	689a      	ldr	r2, [r3, #8]
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d914      	bls.n	800eca0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	689a      	ldr	r2, [r3, #8]
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	1ad2      	subs	r2, r2, r3
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	6879      	ldr	r1, [r7, #4]
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f000 ff21 	bl	800fad4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec92:	2300      	movs	r3, #0
 800ec94:	2200      	movs	r2, #0
 800ec96:	2100      	movs	r1, #0
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f003 fd78 	bl	801278e <USBD_LL_PrepareReceive>
 800ec9e:	e03a      	b.n	800ed16 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	68da      	ldr	r2, [r3, #12]
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d11c      	bne.n	800ece6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	685a      	ldr	r2, [r3, #4]
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d316      	bcc.n	800ece6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	685a      	ldr	r2, [r3, #4]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d20f      	bcs.n	800ece6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	2100      	movs	r1, #0
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f000 ff02 	bl	800fad4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecd8:	2300      	movs	r3, #0
 800ecda:	2200      	movs	r2, #0
 800ecdc:	2100      	movs	r1, #0
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f003 fd55 	bl	801278e <USBD_LL_PrepareReceive>
 800ece4:	e017      	b.n	800ed16 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d00a      	beq.n	800ed08 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	d105      	bne.n	800ed08 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed08:	2180      	movs	r1, #128	; 0x80
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f003 fc95 	bl	801263a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f000 ff14 	bl	800fb3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d123      	bne.n	800ed68 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ed20:	68f8      	ldr	r0, [r7, #12]
 800ed22:	f7ff fe9b 	bl	800ea5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ed2e:	e01b      	b.n	800ed68 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed36:	695b      	ldr	r3, [r3, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d013      	beq.n	800ed64 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ed42:	2b03      	cmp	r3, #3
 800ed44:	d10e      	bne.n	800ed64 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	7afa      	ldrb	r2, [r7, #11]
 800ed50:	4611      	mov	r1, r2
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	4798      	blx	r3
 800ed56:	4603      	mov	r3, r0
 800ed58:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ed5a:	7dfb      	ldrb	r3, [r7, #23]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d003      	beq.n	800ed68 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	e002      	b.n	800ed6a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ed64:	2303      	movs	r3, #3
 800ed66:	e000      	b.n	800ed6a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3718      	adds	r7, #24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d009      	beq.n	800edb6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	6852      	ldr	r2, [r2, #4]
 800edae:	b2d2      	uxtb	r2, r2
 800edb0:	4611      	mov	r1, r2
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800edb6:	2340      	movs	r3, #64	; 0x40
 800edb8:	2200      	movs	r2, #0
 800edba:	2100      	movs	r1, #0
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f003 fbd8 	bl	8012572 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2201      	movs	r2, #1
 800edc6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2240      	movs	r2, #64	; 0x40
 800edce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800edd2:	2340      	movs	r3, #64	; 0x40
 800edd4:	2200      	movs	r2, #0
 800edd6:	2180      	movs	r1, #128	; 0x80
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f003 fbca 	bl	8012572 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2201      	movs	r2, #1
 800ede2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2240      	movs	r2, #64	; 0x40
 800ede8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	460b      	mov	r3, r1
 800edfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	78fa      	ldrb	r2, [r7, #3]
 800ee04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr

0800ee14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2204      	movs	r2, #4
 800ee2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ee3e:	b480      	push	{r7}
 800ee40:	b083      	sub	sp, #12
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee4c:	2b04      	cmp	r3, #4
 800ee4e:	d105      	bne.n	800ee5c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ee5c:	2300      	movs	r3, #0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	370c      	adds	r7, #12
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee78:	2b03      	cmp	r3, #3
 800ee7a:	d10b      	bne.n	800ee94 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee82:	69db      	ldr	r3, [r3, #28]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d005      	beq.n	800ee94 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee8e:	69db      	ldr	r3, [r3, #28]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ee9e:	b480      	push	{r7}
 800eea0:	b083      	sub	sp, #12
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	460b      	mov	r3, r1
 800eea8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eeaa:	2300      	movs	r3, #0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	370c      	adds	r7, #12
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	460b      	mov	r3, r1
 800eec2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eec4:	2300      	movs	r3, #0
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eed2:	b480      	push	{r7}
 800eed4:	b083      	sub	sp, #12
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eeda:	2300      	movs	r3, #0
}
 800eedc:	4618      	mov	r0, r3
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d009      	beq.n	800ef16 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	6852      	ldr	r2, [r2, #4]
 800ef0e:	b2d2      	uxtb	r2, r2
 800ef10:	4611      	mov	r1, r2
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	4798      	blx	r3
  }

  return USBD_OK;
 800ef16:	2300      	movs	r3, #0
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b087      	sub	sp, #28
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	3301      	adds	r3, #1
 800ef36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef3e:	8a3b      	ldrh	r3, [r7, #16]
 800ef40:	021b      	lsls	r3, r3, #8
 800ef42:	b21a      	sxth	r2, r3
 800ef44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	b21b      	sxth	r3, r3
 800ef4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ef4e:	89fb      	ldrh	r3, [r7, #14]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	371c      	adds	r7, #28
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef72:	2b20      	cmp	r3, #32
 800ef74:	d004      	beq.n	800ef80 <USBD_StdDevReq+0x24>
 800ef76:	2b40      	cmp	r3, #64	; 0x40
 800ef78:	d002      	beq.n	800ef80 <USBD_StdDevReq+0x24>
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00a      	beq.n	800ef94 <USBD_StdDevReq+0x38>
 800ef7e:	e050      	b.n	800f022 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef86:	689b      	ldr	r3, [r3, #8]
 800ef88:	6839      	ldr	r1, [r7, #0]
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	4798      	blx	r3
 800ef8e:	4603      	mov	r3, r0
 800ef90:	73fb      	strb	r3, [r7, #15]
    break;
 800ef92:	e04b      	b.n	800f02c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	785b      	ldrb	r3, [r3, #1]
 800ef98:	2b09      	cmp	r3, #9
 800ef9a:	d83c      	bhi.n	800f016 <USBD_StdDevReq+0xba>
 800ef9c:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <USBD_StdDevReq+0x48>)
 800ef9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa2:	bf00      	nop
 800efa4:	0800eff9 	.word	0x0800eff9
 800efa8:	0800f00d 	.word	0x0800f00d
 800efac:	0800f017 	.word	0x0800f017
 800efb0:	0800f003 	.word	0x0800f003
 800efb4:	0800f017 	.word	0x0800f017
 800efb8:	0800efd7 	.word	0x0800efd7
 800efbc:	0800efcd 	.word	0x0800efcd
 800efc0:	0800f017 	.word	0x0800f017
 800efc4:	0800efef 	.word	0x0800efef
 800efc8:	0800efe1 	.word	0x0800efe1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800efcc:	6839      	ldr	r1, [r7, #0]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 f9ce 	bl	800f370 <USBD_GetDescriptor>
      break;
 800efd4:	e024      	b.n	800f020 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800efd6:	6839      	ldr	r1, [r7, #0]
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fb33 	bl	800f644 <USBD_SetAddress>
      break;
 800efde:	e01f      	b.n	800f020 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800efe0:	6839      	ldr	r1, [r7, #0]
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 fb70 	bl	800f6c8 <USBD_SetConfig>
 800efe8:	4603      	mov	r3, r0
 800efea:	73fb      	strb	r3, [r7, #15]
      break;
 800efec:	e018      	b.n	800f020 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800efee:	6839      	ldr	r1, [r7, #0]
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fc0d 	bl	800f810 <USBD_GetConfig>
      break;
 800eff6:	e013      	b.n	800f020 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fc3c 	bl	800f878 <USBD_GetStatus>
      break;
 800f000:	e00e      	b.n	800f020 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 fc6a 	bl	800f8de <USBD_SetFeature>
      break;
 800f00a:	e009      	b.n	800f020 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f00c:	6839      	ldr	r1, [r7, #0]
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fc79 	bl	800f906 <USBD_ClrFeature>
      break;
 800f014:	e004      	b.n	800f020 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f016:	6839      	ldr	r1, [r7, #0]
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 fccf 	bl	800f9bc <USBD_CtlError>
      break;
 800f01e:	bf00      	nop
    }
    break;
 800f020:	e004      	b.n	800f02c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f022:	6839      	ldr	r1, [r7, #0]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fcc9 	bl	800f9bc <USBD_CtlError>
    break;
 800f02a:	bf00      	nop
  }

  return ret;
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop

0800f038 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f04e:	2b20      	cmp	r3, #32
 800f050:	d003      	beq.n	800f05a <USBD_StdItfReq+0x22>
 800f052:	2b40      	cmp	r3, #64	; 0x40
 800f054:	d001      	beq.n	800f05a <USBD_StdItfReq+0x22>
 800f056:	2b00      	cmp	r3, #0
 800f058:	d12a      	bne.n	800f0b0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f060:	3b01      	subs	r3, #1
 800f062:	2b02      	cmp	r3, #2
 800f064:	d81d      	bhi.n	800f0a2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	889b      	ldrh	r3, [r3, #4]
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d813      	bhi.n	800f098 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	6839      	ldr	r1, [r7, #0]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	4798      	blx	r3
 800f07e:	4603      	mov	r3, r0
 800f080:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	88db      	ldrh	r3, [r3, #6]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d110      	bne.n	800f0ac <USBD_StdItfReq+0x74>
 800f08a:	7bfb      	ldrb	r3, [r7, #15]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d10d      	bne.n	800f0ac <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fd41 	bl	800fb18 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f096:	e009      	b.n	800f0ac <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f098:	6839      	ldr	r1, [r7, #0]
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 fc8e 	bl	800f9bc <USBD_CtlError>
      break;
 800f0a0:	e004      	b.n	800f0ac <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fc89 	bl	800f9bc <USBD_CtlError>
      break;
 800f0aa:	e000      	b.n	800f0ae <USBD_StdItfReq+0x76>
      break;
 800f0ac:	bf00      	nop
    }
    break;
 800f0ae:	e004      	b.n	800f0ba <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f0b0:	6839      	ldr	r1, [r7, #0]
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 fc82 	bl	800f9bc <USBD_CtlError>
    break;
 800f0b8:	bf00      	nop
  }

  return ret;
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	889b      	ldrh	r3, [r3, #4]
 800f0d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f0e0:	2b20      	cmp	r3, #32
 800f0e2:	d004      	beq.n	800f0ee <USBD_StdEPReq+0x2a>
 800f0e4:	2b40      	cmp	r3, #64	; 0x40
 800f0e6:	d002      	beq.n	800f0ee <USBD_StdEPReq+0x2a>
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00a      	beq.n	800f102 <USBD_StdEPReq+0x3e>
 800f0ec:	e135      	b.n	800f35a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	6839      	ldr	r1, [r7, #0]
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	4798      	blx	r3
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f100:	e130      	b.n	800f364 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	785b      	ldrb	r3, [r3, #1]
 800f106:	2b01      	cmp	r3, #1
 800f108:	d03e      	beq.n	800f188 <USBD_StdEPReq+0xc4>
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d002      	beq.n	800f114 <USBD_StdEPReq+0x50>
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d077      	beq.n	800f202 <USBD_StdEPReq+0x13e>
 800f112:	e11c      	b.n	800f34e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f11a:	2b02      	cmp	r3, #2
 800f11c:	d002      	beq.n	800f124 <USBD_StdEPReq+0x60>
 800f11e:	2b03      	cmp	r3, #3
 800f120:	d015      	beq.n	800f14e <USBD_StdEPReq+0x8a>
 800f122:	e02b      	b.n	800f17c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f124:	7bbb      	ldrb	r3, [r7, #14]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00c      	beq.n	800f144 <USBD_StdEPReq+0x80>
 800f12a:	7bbb      	ldrb	r3, [r7, #14]
 800f12c:	2b80      	cmp	r3, #128	; 0x80
 800f12e:	d009      	beq.n	800f144 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f130:	7bbb      	ldrb	r3, [r7, #14]
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f003 fa80 	bl	801263a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f13a:	2180      	movs	r1, #128	; 0x80
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f003 fa7c 	bl	801263a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f142:	e020      	b.n	800f186 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f144:	6839      	ldr	r1, [r7, #0]
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 fc38 	bl	800f9bc <USBD_CtlError>
        break;
 800f14c:	e01b      	b.n	800f186 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	885b      	ldrh	r3, [r3, #2]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10e      	bne.n	800f174 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f156:	7bbb      	ldrb	r3, [r7, #14]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00b      	beq.n	800f174 <USBD_StdEPReq+0xb0>
 800f15c:	7bbb      	ldrb	r3, [r7, #14]
 800f15e:	2b80      	cmp	r3, #128	; 0x80
 800f160:	d008      	beq.n	800f174 <USBD_StdEPReq+0xb0>
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	88db      	ldrh	r3, [r3, #6]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d104      	bne.n	800f174 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f16a:	7bbb      	ldrb	r3, [r7, #14]
 800f16c:	4619      	mov	r1, r3
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f003 fa63 	bl	801263a <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fccf 	bl	800fb18 <USBD_CtlSendStatus>

        break;
 800f17a:	e004      	b.n	800f186 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f17c:	6839      	ldr	r1, [r7, #0]
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 fc1c 	bl	800f9bc <USBD_CtlError>
        break;
 800f184:	bf00      	nop
      }
      break;
 800f186:	e0e7      	b.n	800f358 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d002      	beq.n	800f198 <USBD_StdEPReq+0xd4>
 800f192:	2b03      	cmp	r3, #3
 800f194:	d015      	beq.n	800f1c2 <USBD_StdEPReq+0xfe>
 800f196:	e02d      	b.n	800f1f4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f198:	7bbb      	ldrb	r3, [r7, #14]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00c      	beq.n	800f1b8 <USBD_StdEPReq+0xf4>
 800f19e:	7bbb      	ldrb	r3, [r7, #14]
 800f1a0:	2b80      	cmp	r3, #128	; 0x80
 800f1a2:	d009      	beq.n	800f1b8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1a4:	7bbb      	ldrb	r3, [r7, #14]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f003 fa46 	bl	801263a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1ae:	2180      	movs	r1, #128	; 0x80
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f003 fa42 	bl	801263a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f1b6:	e023      	b.n	800f200 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f1b8:	6839      	ldr	r1, [r7, #0]
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fbfe 	bl	800f9bc <USBD_CtlError>
        break;
 800f1c0:	e01e      	b.n	800f200 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	885b      	ldrh	r3, [r3, #2]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d119      	bne.n	800f1fe <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f1ca:	7bbb      	ldrb	r3, [r7, #14]
 800f1cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d004      	beq.n	800f1de <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f1d4:	7bbb      	ldrb	r3, [r7, #14]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f003 fa4d 	bl	8012678 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 fc9a 	bl	800fb18 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	6839      	ldr	r1, [r7, #0]
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	4798      	blx	r3
        }
        break;
 800f1f2:	e004      	b.n	800f1fe <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f1f4:	6839      	ldr	r1, [r7, #0]
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fbe0 	bl	800f9bc <USBD_CtlError>
        break;
 800f1fc:	e000      	b.n	800f200 <USBD_StdEPReq+0x13c>
        break;
 800f1fe:	bf00      	nop
      }
      break;
 800f200:	e0aa      	b.n	800f358 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d002      	beq.n	800f212 <USBD_StdEPReq+0x14e>
 800f20c:	2b03      	cmp	r3, #3
 800f20e:	d032      	beq.n	800f276 <USBD_StdEPReq+0x1b2>
 800f210:	e097      	b.n	800f342 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f212:	7bbb      	ldrb	r3, [r7, #14]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d007      	beq.n	800f228 <USBD_StdEPReq+0x164>
 800f218:	7bbb      	ldrb	r3, [r7, #14]
 800f21a:	2b80      	cmp	r3, #128	; 0x80
 800f21c:	d004      	beq.n	800f228 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 fbcb 	bl	800f9bc <USBD_CtlError>
          break;
 800f226:	e091      	b.n	800f34c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	da0b      	bge.n	800f248 <USBD_StdEPReq+0x184>
 800f230:	7bbb      	ldrb	r3, [r7, #14]
 800f232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f236:	4613      	mov	r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	4413      	add	r3, r2
 800f23c:	009b      	lsls	r3, r3, #2
 800f23e:	3310      	adds	r3, #16
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	4413      	add	r3, r2
 800f244:	3304      	adds	r3, #4
 800f246:	e00b      	b.n	800f260 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f248:	7bbb      	ldrb	r3, [r7, #14]
 800f24a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f24e:	4613      	mov	r3, r2
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	4413      	add	r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	4413      	add	r3, r2
 800f25e:	3304      	adds	r3, #4
 800f260:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2200      	movs	r2, #0
 800f266:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2202      	movs	r2, #2
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 fc15 	bl	800fa9e <USBD_CtlSendData>
        break;
 800f274:	e06a      	b.n	800f34c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	da11      	bge.n	800f2a2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f27e:	7bbb      	ldrb	r3, [r7, #14]
 800f280:	f003 020f 	and.w	r2, r3, #15
 800f284:	6879      	ldr	r1, [r7, #4]
 800f286:	4613      	mov	r3, r2
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	4413      	add	r3, r2
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	440b      	add	r3, r1
 800f290:	3324      	adds	r3, #36	; 0x24
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d117      	bne.n	800f2c8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 fb8e 	bl	800f9bc <USBD_CtlError>
            break;
 800f2a0:	e054      	b.n	800f34c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f2a2:	7bbb      	ldrb	r3, [r7, #14]
 800f2a4:	f003 020f 	and.w	r2, r3, #15
 800f2a8:	6879      	ldr	r1, [r7, #4]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	440b      	add	r3, r1
 800f2b4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f2b8:	881b      	ldrh	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d104      	bne.n	800f2c8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f2be:	6839      	ldr	r1, [r7, #0]
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 fb7b 	bl	800f9bc <USBD_CtlError>
            break;
 800f2c6:	e041      	b.n	800f34c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	da0b      	bge.n	800f2e8 <USBD_StdEPReq+0x224>
 800f2d0:	7bbb      	ldrb	r3, [r7, #14]
 800f2d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4413      	add	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	3310      	adds	r3, #16
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	3304      	adds	r3, #4
 800f2e6:	e00b      	b.n	800f300 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	4413      	add	r3, r2
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	3304      	adds	r3, #4
 800f300:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f302:	7bbb      	ldrb	r3, [r7, #14]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d002      	beq.n	800f30e <USBD_StdEPReq+0x24a>
 800f308:	7bbb      	ldrb	r3, [r7, #14]
 800f30a:	2b80      	cmp	r3, #128	; 0x80
 800f30c:	d103      	bne.n	800f316 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	2200      	movs	r2, #0
 800f312:	601a      	str	r2, [r3, #0]
 800f314:	e00e      	b.n	800f334 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f316:	7bbb      	ldrb	r3, [r7, #14]
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f003 f9cb 	bl	80126b6 <USBD_LL_IsStallEP>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d003      	beq.n	800f32e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2201      	movs	r2, #1
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	e002      	b.n	800f334 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2200      	movs	r2, #0
 800f332:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	2202      	movs	r2, #2
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 fbaf 	bl	800fa9e <USBD_CtlSendData>
          break;
 800f340:	e004      	b.n	800f34c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fb39 	bl	800f9bc <USBD_CtlError>
        break;
 800f34a:	bf00      	nop
      }
      break;
 800f34c:	e004      	b.n	800f358 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f34e:	6839      	ldr	r1, [r7, #0]
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 fb33 	bl	800f9bc <USBD_CtlError>
      break;
 800f356:	bf00      	nop
    }
    break;
 800f358:	e004      	b.n	800f364 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fb2d 	bl	800f9bc <USBD_CtlError>
    break;
 800f362:	bf00      	nop
  }

  return ret;
 800f364:	7bfb      	ldrb	r3, [r7, #15]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
	...

0800f370 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f37a:	2300      	movs	r3, #0
 800f37c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f37e:	2300      	movs	r3, #0
 800f380:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f382:	2300      	movs	r3, #0
 800f384:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	885b      	ldrh	r3, [r3, #2]
 800f38a:	0a1b      	lsrs	r3, r3, #8
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	3b01      	subs	r3, #1
 800f390:	2b06      	cmp	r3, #6
 800f392:	f200 8128 	bhi.w	800f5e6 <USBD_GetDescriptor+0x276>
 800f396:	a201      	add	r2, pc, #4	; (adr r2, 800f39c <USBD_GetDescriptor+0x2c>)
 800f398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39c:	0800f3b9 	.word	0x0800f3b9
 800f3a0:	0800f3d1 	.word	0x0800f3d1
 800f3a4:	0800f411 	.word	0x0800f411
 800f3a8:	0800f5e7 	.word	0x0800f5e7
 800f3ac:	0800f5e7 	.word	0x0800f5e7
 800f3b0:	0800f587 	.word	0x0800f587
 800f3b4:	0800f5b3 	.word	0x0800f5b3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	7c12      	ldrb	r2, [r2, #16]
 800f3c4:	f107 0108 	add.w	r1, r7, #8
 800f3c8:	4610      	mov	r0, r2
 800f3ca:	4798      	blx	r3
 800f3cc:	60f8      	str	r0, [r7, #12]
    break;
 800f3ce:	e112      	b.n	800f5f6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	7c1b      	ldrb	r3, [r3, #16]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d10d      	bne.n	800f3f4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e0:	f107 0208 	add.w	r2, r7, #8
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	4798      	blx	r3
 800f3e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	2202      	movs	r2, #2
 800f3f0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f3f2:	e100      	b.n	800f5f6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3fc:	f107 0208 	add.w	r2, r7, #8
 800f400:	4610      	mov	r0, r2
 800f402:	4798      	blx	r3
 800f404:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	3301      	adds	r3, #1
 800f40a:	2202      	movs	r2, #2
 800f40c:	701a      	strb	r2, [r3, #0]
    break;
 800f40e:	e0f2      	b.n	800f5f6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	885b      	ldrh	r3, [r3, #2]
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b05      	cmp	r3, #5
 800f418:	f200 80ac 	bhi.w	800f574 <USBD_GetDescriptor+0x204>
 800f41c:	a201      	add	r2, pc, #4	; (adr r2, 800f424 <USBD_GetDescriptor+0xb4>)
 800f41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f422:	bf00      	nop
 800f424:	0800f43d 	.word	0x0800f43d
 800f428:	0800f471 	.word	0x0800f471
 800f42c:	0800f4a5 	.word	0x0800f4a5
 800f430:	0800f4d9 	.word	0x0800f4d9
 800f434:	0800f50d 	.word	0x0800f50d
 800f438:	0800f541 	.word	0x0800f541
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00b      	beq.n	800f460 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	7c12      	ldrb	r2, [r2, #16]
 800f454:	f107 0108 	add.w	r1, r7, #8
 800f458:	4610      	mov	r0, r2
 800f45a:	4798      	blx	r3
 800f45c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f45e:	e091      	b.n	800f584 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 faaa 	bl	800f9bc <USBD_CtlError>
        err++;
 800f468:	7afb      	ldrb	r3, [r7, #11]
 800f46a:	3301      	adds	r3, #1
 800f46c:	72fb      	strb	r3, [r7, #11]
      break;
 800f46e:	e089      	b.n	800f584 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00b      	beq.n	800f494 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	7c12      	ldrb	r2, [r2, #16]
 800f488:	f107 0108 	add.w	r1, r7, #8
 800f48c:	4610      	mov	r0, r2
 800f48e:	4798      	blx	r3
 800f490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f492:	e077      	b.n	800f584 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f494:	6839      	ldr	r1, [r7, #0]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 fa90 	bl	800f9bc <USBD_CtlError>
        err++;
 800f49c:	7afb      	ldrb	r3, [r7, #11]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	72fb      	strb	r3, [r7, #11]
      break;
 800f4a2:	e06f      	b.n	800f584 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00b      	beq.n	800f4c8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	7c12      	ldrb	r2, [r2, #16]
 800f4bc:	f107 0108 	add.w	r1, r7, #8
 800f4c0:	4610      	mov	r0, r2
 800f4c2:	4798      	blx	r3
 800f4c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f4c6:	e05d      	b.n	800f584 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 fa76 	bl	800f9bc <USBD_CtlError>
        err++;
 800f4d0:	7afb      	ldrb	r3, [r7, #11]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	72fb      	strb	r3, [r7, #11]
      break;
 800f4d6:	e055      	b.n	800f584 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00b      	beq.n	800f4fc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	7c12      	ldrb	r2, [r2, #16]
 800f4f0:	f107 0108 	add.w	r1, r7, #8
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	4798      	blx	r3
 800f4f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f4fa:	e043      	b.n	800f584 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 fa5c 	bl	800f9bc <USBD_CtlError>
        err++;
 800f504:	7afb      	ldrb	r3, [r7, #11]
 800f506:	3301      	adds	r3, #1
 800f508:	72fb      	strb	r3, [r7, #11]
      break;
 800f50a:	e03b      	b.n	800f584 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f512:	695b      	ldr	r3, [r3, #20]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00b      	beq.n	800f530 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f51e:	695b      	ldr	r3, [r3, #20]
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	7c12      	ldrb	r2, [r2, #16]
 800f524:	f107 0108 	add.w	r1, r7, #8
 800f528:	4610      	mov	r0, r2
 800f52a:	4798      	blx	r3
 800f52c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f52e:	e029      	b.n	800f584 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f530:	6839      	ldr	r1, [r7, #0]
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 fa42 	bl	800f9bc <USBD_CtlError>
        err++;
 800f538:	7afb      	ldrb	r3, [r7, #11]
 800f53a:	3301      	adds	r3, #1
 800f53c:	72fb      	strb	r3, [r7, #11]
      break;
 800f53e:	e021      	b.n	800f584 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d00b      	beq.n	800f564 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f552:	699b      	ldr	r3, [r3, #24]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	7c12      	ldrb	r2, [r2, #16]
 800f558:	f107 0108 	add.w	r1, r7, #8
 800f55c:	4610      	mov	r0, r2
 800f55e:	4798      	blx	r3
 800f560:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f562:	e00f      	b.n	800f584 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f564:	6839      	ldr	r1, [r7, #0]
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 fa28 	bl	800f9bc <USBD_CtlError>
        err++;
 800f56c:	7afb      	ldrb	r3, [r7, #11]
 800f56e:	3301      	adds	r3, #1
 800f570:	72fb      	strb	r3, [r7, #11]
      break;
 800f572:	e007      	b.n	800f584 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f574:	6839      	ldr	r1, [r7, #0]
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 fa20 	bl	800f9bc <USBD_CtlError>
      err++;
 800f57c:	7afb      	ldrb	r3, [r7, #11]
 800f57e:	3301      	adds	r3, #1
 800f580:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f582:	bf00      	nop
    }
    break;
 800f584:	e037      	b.n	800f5f6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	7c1b      	ldrb	r3, [r3, #16]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d109      	bne.n	800f5a2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f596:	f107 0208 	add.w	r2, r7, #8
 800f59a:	4610      	mov	r0, r2
 800f59c:	4798      	blx	r3
 800f59e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f5a0:	e029      	b.n	800f5f6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f5a2:	6839      	ldr	r1, [r7, #0]
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f000 fa09 	bl	800f9bc <USBD_CtlError>
      err++;
 800f5aa:	7afb      	ldrb	r3, [r7, #11]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	72fb      	strb	r3, [r7, #11]
    break;
 800f5b0:	e021      	b.n	800f5f6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	7c1b      	ldrb	r3, [r3, #16]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d10d      	bne.n	800f5d6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5c2:	f107 0208 	add.w	r2, r7, #8
 800f5c6:	4610      	mov	r0, r2
 800f5c8:	4798      	blx	r3
 800f5ca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	2207      	movs	r2, #7
 800f5d2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f5d4:	e00f      	b.n	800f5f6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f5d6:	6839      	ldr	r1, [r7, #0]
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 f9ef 	bl	800f9bc <USBD_CtlError>
      err++;
 800f5de:	7afb      	ldrb	r3, [r7, #11]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	72fb      	strb	r3, [r7, #11]
    break;
 800f5e4:	e007      	b.n	800f5f6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f9e7 	bl	800f9bc <USBD_CtlError>
    err++;
 800f5ee:	7afb      	ldrb	r3, [r7, #11]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	72fb      	strb	r3, [r7, #11]
    break;
 800f5f4:	bf00      	nop
  }

  if (err != 0U)
 800f5f6:	7afb      	ldrb	r3, [r7, #11]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d11e      	bne.n	800f63a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	88db      	ldrh	r3, [r3, #6]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d016      	beq.n	800f632 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f604:	893b      	ldrh	r3, [r7, #8]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00e      	beq.n	800f628 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	88da      	ldrh	r2, [r3, #6]
 800f60e:	893b      	ldrh	r3, [r7, #8]
 800f610:	4293      	cmp	r3, r2
 800f612:	bf28      	it	cs
 800f614:	4613      	movcs	r3, r2
 800f616:	b29b      	uxth	r3, r3
 800f618:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f61a:	893b      	ldrh	r3, [r7, #8]
 800f61c:	461a      	mov	r2, r3
 800f61e:	68f9      	ldr	r1, [r7, #12]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fa3c 	bl	800fa9e <USBD_CtlSendData>
 800f626:	e009      	b.n	800f63c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f000 f9c6 	bl	800f9bc <USBD_CtlError>
 800f630:	e004      	b.n	800f63c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 fa70 	bl	800fb18 <USBD_CtlSendStatus>
 800f638:	e000      	b.n	800f63c <USBD_GetDescriptor+0x2cc>
    return;
 800f63a:	bf00      	nop
    }
  }
}
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop

0800f644 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	889b      	ldrh	r3, [r3, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d130      	bne.n	800f6b8 <USBD_SetAddress+0x74>
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	88db      	ldrh	r3, [r3, #6]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d12c      	bne.n	800f6b8 <USBD_SetAddress+0x74>
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	885b      	ldrh	r3, [r3, #2]
 800f662:	2b7f      	cmp	r3, #127	; 0x7f
 800f664:	d828      	bhi.n	800f6b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	885b      	ldrh	r3, [r3, #2]
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f670:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f678:	2b03      	cmp	r3, #3
 800f67a:	d104      	bne.n	800f686 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 f99c 	bl	800f9bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f684:	e01c      	b.n	800f6c0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	7bfa      	ldrb	r2, [r7, #15]
 800f68a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
 800f690:	4619      	mov	r1, r3
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f003 f83b 	bl	801270e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 fa3d 	bl	800fb18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f69e:	7bfb      	ldrb	r3, [r7, #15]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d004      	beq.n	800f6ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2202      	movs	r2, #2
 800f6a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6ac:	e008      	b.n	800f6c0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6b6:	e003      	b.n	800f6c0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 f97e 	bl	800f9bc <USBD_CtlError>
  }
}
 800f6c0:	bf00      	nop
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	885b      	ldrh	r3, [r3, #2]
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	4b4b      	ldr	r3, [pc, #300]	; (800f80c <USBD_SetConfig+0x144>)
 800f6de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f6e0:	4b4a      	ldr	r3, [pc, #296]	; (800f80c <USBD_SetConfig+0x144>)
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d905      	bls.n	800f6f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f6e8:	6839      	ldr	r1, [r7, #0]
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f000 f966 	bl	800f9bc <USBD_CtlError>
    return USBD_FAIL;
 800f6f0:	2303      	movs	r3, #3
 800f6f2:	e087      	b.n	800f804 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d002      	beq.n	800f704 <USBD_SetConfig+0x3c>
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d025      	beq.n	800f74e <USBD_SetConfig+0x86>
 800f702:	e071      	b.n	800f7e8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f704:	4b41      	ldr	r3, [pc, #260]	; (800f80c <USBD_SetConfig+0x144>)
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d01c      	beq.n	800f746 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f70c:	4b3f      	ldr	r3, [pc, #252]	; (800f80c <USBD_SetConfig+0x144>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	461a      	mov	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f716:	4b3d      	ldr	r3, [pc, #244]	; (800f80c <USBD_SetConfig+0x144>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	4619      	mov	r1, r3
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7ff f9a8 	bl	800ea72 <USBD_SetClassConfig>
 800f722:	4603      	mov	r3, r0
 800f724:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f726:	7bfb      	ldrb	r3, [r7, #15]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d004      	beq.n	800f736 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 f944 	bl	800f9bc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f734:	e065      	b.n	800f802 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 f9ee 	bl	800fb18 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2203      	movs	r2, #3
 800f740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f744:	e05d      	b.n	800f802 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f9e6 	bl	800fb18 <USBD_CtlSendStatus>
    break;
 800f74c:	e059      	b.n	800f802 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f74e:	4b2f      	ldr	r3, [pc, #188]	; (800f80c <USBD_SetConfig+0x144>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d112      	bne.n	800f77c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2202      	movs	r2, #2
 800f75a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f75e:	4b2b      	ldr	r3, [pc, #172]	; (800f80c <USBD_SetConfig+0x144>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f768:	4b28      	ldr	r3, [pc, #160]	; (800f80c <USBD_SetConfig+0x144>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	4619      	mov	r1, r3
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7ff f99b 	bl	800eaaa <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f9cf 	bl	800fb18 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f77a:	e042      	b.n	800f802 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f77c:	4b23      	ldr	r3, [pc, #140]	; (800f80c <USBD_SetConfig+0x144>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	461a      	mov	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	429a      	cmp	r2, r3
 800f788:	d02a      	beq.n	800f7e0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	4619      	mov	r1, r3
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7ff f989 	bl	800eaaa <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f798:	4b1c      	ldr	r3, [pc, #112]	; (800f80c <USBD_SetConfig+0x144>)
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	461a      	mov	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7a2:	4b1a      	ldr	r3, [pc, #104]	; (800f80c <USBD_SetConfig+0x144>)
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f7ff f962 	bl	800ea72 <USBD_SetClassConfig>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f7b2:	7bfb      	ldrb	r3, [r7, #15]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d00f      	beq.n	800f7d8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f7b8:	6839      	ldr	r1, [r7, #0]
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f8fe 	bl	800f9bc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7ff f96e 	bl	800eaaa <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2202      	movs	r2, #2
 800f7d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f7d6:	e014      	b.n	800f802 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 f99d 	bl	800fb18 <USBD_CtlSendStatus>
    break;
 800f7de:	e010      	b.n	800f802 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 f999 	bl	800fb18 <USBD_CtlSendStatus>
    break;
 800f7e6:	e00c      	b.n	800f802 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 f8e6 	bl	800f9bc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7f0:	4b06      	ldr	r3, [pc, #24]	; (800f80c <USBD_SetConfig+0x144>)
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7ff f957 	bl	800eaaa <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f7fc:	2303      	movs	r3, #3
 800f7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f800:	bf00      	nop
  }

  return ret;
 800f802:	7bfb      	ldrb	r3, [r7, #15]
}
 800f804:	4618      	mov	r0, r3
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	240001f4 	.word	0x240001f4

0800f810 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	88db      	ldrh	r3, [r3, #6]
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d004      	beq.n	800f82c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 f8c9 	bl	800f9bc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f82a:	e021      	b.n	800f870 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f832:	2b01      	cmp	r3, #1
 800f834:	db17      	blt.n	800f866 <USBD_GetConfig+0x56>
 800f836:	2b02      	cmp	r3, #2
 800f838:	dd02      	ble.n	800f840 <USBD_GetConfig+0x30>
 800f83a:	2b03      	cmp	r3, #3
 800f83c:	d00b      	beq.n	800f856 <USBD_GetConfig+0x46>
 800f83e:	e012      	b.n	800f866 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	3308      	adds	r3, #8
 800f84a:	2201      	movs	r2, #1
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f925 	bl	800fa9e <USBD_CtlSendData>
      break;
 800f854:	e00c      	b.n	800f870 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	3304      	adds	r3, #4
 800f85a:	2201      	movs	r2, #1
 800f85c:	4619      	mov	r1, r3
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 f91d 	bl	800fa9e <USBD_CtlSendData>
      break;
 800f864:	e004      	b.n	800f870 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 f8a7 	bl	800f9bc <USBD_CtlError>
      break;
 800f86e:	bf00      	nop
}
 800f870:	bf00      	nop
 800f872:	3708      	adds	r7, #8
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f888:	3b01      	subs	r3, #1
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d81e      	bhi.n	800f8cc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	88db      	ldrh	r3, [r3, #6]
 800f892:	2b02      	cmp	r3, #2
 800f894:	d004      	beq.n	800f8a0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f88f 	bl	800f9bc <USBD_CtlError>
      break;
 800f89e:	e01a      	b.n	800f8d6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d005      	beq.n	800f8bc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	f043 0202 	orr.w	r2, r3, #2
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	330c      	adds	r3, #12
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 f8ea 	bl	800fa9e <USBD_CtlSendData>
    break;
 800f8ca:	e004      	b.n	800f8d6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f8cc:	6839      	ldr	r1, [r7, #0]
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 f874 	bl	800f9bc <USBD_CtlError>
    break;
 800f8d4:	bf00      	nop
  }
}
 800f8d6:	bf00      	nop
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b082      	sub	sp, #8
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
 800f8e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	885b      	ldrh	r3, [r3, #2]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d106      	bne.n	800f8fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 f90d 	bl	800fb18 <USBD_CtlSendStatus>
  }
}
 800f8fe:	bf00      	nop
 800f900:	3708      	adds	r7, #8
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b082      	sub	sp, #8
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f916:	3b01      	subs	r3, #1
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d80b      	bhi.n	800f934 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	885b      	ldrh	r3, [r3, #2]
 800f920:	2b01      	cmp	r3, #1
 800f922:	d10c      	bne.n	800f93e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 f8f3 	bl	800fb18 <USBD_CtlSendStatus>
      }
      break;
 800f932:	e004      	b.n	800f93e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f934:	6839      	ldr	r1, [r7, #0]
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 f840 	bl	800f9bc <USBD_CtlError>
      break;
 800f93c:	e000      	b.n	800f940 <USBD_ClrFeature+0x3a>
      break;
 800f93e:	bf00      	nop
  }
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	781a      	ldrb	r2, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	3301      	adds	r3, #1
 800f962:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	781a      	ldrb	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	3301      	adds	r3, #1
 800f970:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f972:	68f8      	ldr	r0, [r7, #12]
 800f974:	f7ff fad4 	bl	800ef20 <SWAPBYTE>
 800f978:	4603      	mov	r3, r0
 800f97a:	461a      	mov	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	3301      	adds	r3, #1
 800f984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	3301      	adds	r3, #1
 800f98a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f7ff fac7 	bl	800ef20 <SWAPBYTE>
 800f992:	4603      	mov	r3, r0
 800f994:	461a      	mov	r2, r3
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	3301      	adds	r3, #1
 800f99e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f9a6:	68f8      	ldr	r0, [r7, #12]
 800f9a8:	f7ff faba 	bl	800ef20 <SWAPBYTE>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	80da      	strh	r2, [r3, #6]
}
 800f9b4:	bf00      	nop
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9c6:	2180      	movs	r1, #128	; 0x80
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f002 fe36 	bl	801263a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f002 fe32 	bl	801263a <USBD_LL_StallEP>
}
 800f9d6:	bf00      	nop
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b086      	sub	sp, #24
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	60f8      	str	r0, [r7, #12]
 800f9e6:	60b9      	str	r1, [r7, #8]
 800f9e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d036      	beq.n	800fa62 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f9f8:	6938      	ldr	r0, [r7, #16]
 800f9fa:	f000 f836 	bl	800fa6a <USBD_GetLen>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	3301      	adds	r3, #1
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	005b      	lsls	r3, r3, #1
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa0c:	7dfb      	ldrb	r3, [r7, #23]
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	4413      	add	r3, r2
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	7812      	ldrb	r2, [r2, #0]
 800fa16:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa18:	7dfb      	ldrb	r3, [r7, #23]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa1e:	7dfb      	ldrb	r3, [r7, #23]
 800fa20:	68ba      	ldr	r2, [r7, #8]
 800fa22:	4413      	add	r3, r2
 800fa24:	2203      	movs	r2, #3
 800fa26:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa28:	7dfb      	ldrb	r3, [r7, #23]
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa2e:	e013      	b.n	800fa58 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fa30:	7dfb      	ldrb	r3, [r7, #23]
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	4413      	add	r3, r2
 800fa36:	693a      	ldr	r2, [r7, #16]
 800fa38:	7812      	ldrb	r2, [r2, #0]
 800fa3a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	613b      	str	r3, [r7, #16]
    idx++;
 800fa42:	7dfb      	ldrb	r3, [r7, #23]
 800fa44:	3301      	adds	r3, #1
 800fa46:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
 800fa4a:	68ba      	ldr	r2, [r7, #8]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	2200      	movs	r2, #0
 800fa50:	701a      	strb	r2, [r3, #0]
    idx++;
 800fa52:	7dfb      	ldrb	r3, [r7, #23]
 800fa54:	3301      	adds	r3, #1
 800fa56:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d1e7      	bne.n	800fa30 <USBD_GetString+0x52>
 800fa60:	e000      	b.n	800fa64 <USBD_GetString+0x86>
    return;
 800fa62:	bf00      	nop
  }
}
 800fa64:	3718      	adds	r7, #24
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b085      	sub	sp, #20
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fa72:	2300      	movs	r3, #0
 800fa74:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fa7a:	e005      	b.n	800fa88 <USBD_GetLen+0x1e>
  {
    len++;
 800fa7c:	7bfb      	ldrb	r3, [r7, #15]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	3301      	adds	r3, #1
 800fa86:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d1f5      	bne.n	800fa7c <USBD_GetLen+0x12>
  }

  return len;
 800fa90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fa9e:	b580      	push	{r7, lr}
 800faa0:	b084      	sub	sp, #16
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	60f8      	str	r0, [r7, #12]
 800faa6:	60b9      	str	r1, [r7, #8]
 800faa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2202      	movs	r2, #2
 800faae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	687a      	ldr	r2, [r7, #4]
 800fabc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	2100      	movs	r1, #0
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f002 fe41 	bl	801274c <USBD_LL_Transmit>

  return USBD_OK;
 800faca:	2300      	movs	r3, #0
}
 800facc:	4618      	mov	r0, r3
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	68ba      	ldr	r2, [r7, #8]
 800fae4:	2100      	movs	r1, #0
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f002 fe30 	bl	801274c <USBD_LL_Transmit>

  return USBD_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}

0800faf6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800faf6:	b580      	push	{r7, lr}
 800faf8:	b084      	sub	sp, #16
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	60f8      	str	r0, [r7, #12]
 800fafe:	60b9      	str	r1, [r7, #8]
 800fb00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	68ba      	ldr	r2, [r7, #8]
 800fb06:	2100      	movs	r1, #0
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f002 fe40 	bl	801278e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb0e:	2300      	movs	r3, #0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2204      	movs	r2, #4
 800fb24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fb28:	2300      	movs	r3, #0
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f002 fe0c 	bl	801274c <USBD_LL_Transmit>

  return USBD_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3708      	adds	r7, #8
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}

0800fb3e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b082      	sub	sp, #8
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2205      	movs	r2, #5
 800fb4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb4e:	2300      	movs	r3, #0
 800fb50:	2200      	movs	r2, #0
 800fb52:	2100      	movs	r1, #0
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f002 fe1a 	bl	801278e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fb6e:	79fb      	ldrb	r3, [r7, #7]
 800fb70:	4a08      	ldr	r2, [pc, #32]	; (800fb94 <disk_status+0x30>)
 800fb72:	009b      	lsls	r3, r3, #2
 800fb74:	4413      	add	r3, r2
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	79fa      	ldrb	r2, [r7, #7]
 800fb7c:	4905      	ldr	r1, [pc, #20]	; (800fb94 <disk_status+0x30>)
 800fb7e:	440a      	add	r2, r1
 800fb80:	7a12      	ldrb	r2, [r2, #8]
 800fb82:	4610      	mov	r0, r2
 800fb84:	4798      	blx	r3
 800fb86:	4603      	mov	r3, r0
 800fb88:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	24000220 	.word	0x24000220

0800fb98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	4603      	mov	r3, r0
 800fba0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fba2:	2300      	movs	r3, #0
 800fba4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fba6:	79fb      	ldrb	r3, [r7, #7]
 800fba8:	4a0d      	ldr	r2, [pc, #52]	; (800fbe0 <disk_initialize+0x48>)
 800fbaa:	5cd3      	ldrb	r3, [r2, r3]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d111      	bne.n	800fbd4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fbb0:	79fb      	ldrb	r3, [r7, #7]
 800fbb2:	4a0b      	ldr	r2, [pc, #44]	; (800fbe0 <disk_initialize+0x48>)
 800fbb4:	2101      	movs	r1, #1
 800fbb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	4a09      	ldr	r2, [pc, #36]	; (800fbe0 <disk_initialize+0x48>)
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	4413      	add	r3, r2
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	79fa      	ldrb	r2, [r7, #7]
 800fbc6:	4906      	ldr	r1, [pc, #24]	; (800fbe0 <disk_initialize+0x48>)
 800fbc8:	440a      	add	r2, r1
 800fbca:	7a12      	ldrb	r2, [r2, #8]
 800fbcc:	4610      	mov	r0, r2
 800fbce:	4798      	blx	r3
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	24000220 	.word	0x24000220

0800fbe4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fbe4:	b590      	push	{r4, r7, lr}
 800fbe6:	b087      	sub	sp, #28
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60b9      	str	r1, [r7, #8]
 800fbec:	607a      	str	r2, [r7, #4]
 800fbee:	603b      	str	r3, [r7, #0]
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fbf4:	7bfb      	ldrb	r3, [r7, #15]
 800fbf6:	4a0a      	ldr	r2, [pc, #40]	; (800fc20 <disk_read+0x3c>)
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	4413      	add	r3, r2
 800fbfc:	685b      	ldr	r3, [r3, #4]
 800fbfe:	689c      	ldr	r4, [r3, #8]
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
 800fc02:	4a07      	ldr	r2, [pc, #28]	; (800fc20 <disk_read+0x3c>)
 800fc04:	4413      	add	r3, r2
 800fc06:	7a18      	ldrb	r0, [r3, #8]
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	68b9      	ldr	r1, [r7, #8]
 800fc0e:	47a0      	blx	r4
 800fc10:	4603      	mov	r3, r0
 800fc12:	75fb      	strb	r3, [r7, #23]
  return res;
 800fc14:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	371c      	adds	r7, #28
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd90      	pop	{r4, r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	24000220 	.word	0x24000220

0800fc24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fc24:	b590      	push	{r4, r7, lr}
 800fc26:	b087      	sub	sp, #28
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60b9      	str	r1, [r7, #8]
 800fc2c:	607a      	str	r2, [r7, #4]
 800fc2e:	603b      	str	r3, [r7, #0]
 800fc30:	4603      	mov	r3, r0
 800fc32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fc34:	7bfb      	ldrb	r3, [r7, #15]
 800fc36:	4a0a      	ldr	r2, [pc, #40]	; (800fc60 <disk_write+0x3c>)
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	4413      	add	r3, r2
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	68dc      	ldr	r4, [r3, #12]
 800fc40:	7bfb      	ldrb	r3, [r7, #15]
 800fc42:	4a07      	ldr	r2, [pc, #28]	; (800fc60 <disk_write+0x3c>)
 800fc44:	4413      	add	r3, r2
 800fc46:	7a18      	ldrb	r0, [r3, #8]
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	68b9      	ldr	r1, [r7, #8]
 800fc4e:	47a0      	blx	r4
 800fc50:	4603      	mov	r3, r0
 800fc52:	75fb      	strb	r3, [r7, #23]
  return res;
 800fc54:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	371c      	adds	r7, #28
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd90      	pop	{r4, r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	24000220 	.word	0x24000220

0800fc64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	603a      	str	r2, [r7, #0]
 800fc6e:	71fb      	strb	r3, [r7, #7]
 800fc70:	460b      	mov	r3, r1
 800fc72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fc74:	79fb      	ldrb	r3, [r7, #7]
 800fc76:	4a09      	ldr	r2, [pc, #36]	; (800fc9c <disk_ioctl+0x38>)
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	4413      	add	r3, r2
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	691b      	ldr	r3, [r3, #16]
 800fc80:	79fa      	ldrb	r2, [r7, #7]
 800fc82:	4906      	ldr	r1, [pc, #24]	; (800fc9c <disk_ioctl+0x38>)
 800fc84:	440a      	add	r2, r1
 800fc86:	7a10      	ldrb	r0, [r2, #8]
 800fc88:	79b9      	ldrb	r1, [r7, #6]
 800fc8a:	683a      	ldr	r2, [r7, #0]
 800fc8c:	4798      	blx	r3
 800fc8e:	4603      	mov	r3, r0
 800fc90:	73fb      	strb	r3, [r7, #15]
  return res;
 800fc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	24000220 	.word	0x24000220

0800fca0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fcb0:	89fb      	ldrh	r3, [r7, #14]
 800fcb2:	021b      	lsls	r3, r3, #8
 800fcb4:	b21a      	sxth	r2, r3
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	b21b      	sxth	r3, r3
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	b21b      	sxth	r3, r3
 800fcc0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fcc2:	89fb      	ldrh	r3, [r7, #14]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3714      	adds	r7, #20
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	3303      	adds	r3, #3
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	021b      	lsls	r3, r3, #8
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	3202      	adds	r2, #2
 800fce8:	7812      	ldrb	r2, [r2, #0]
 800fcea:	4313      	orrs	r3, r2
 800fcec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	021b      	lsls	r3, r3, #8
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	3201      	adds	r2, #1
 800fcf6:	7812      	ldrb	r2, [r2, #0]
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	021b      	lsls	r3, r3, #8
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	7812      	ldrb	r2, [r2, #0]
 800fd04:	4313      	orrs	r3, r2
 800fd06:	60fb      	str	r3, [r7, #12]
	return rv;
 800fd08:	68fb      	ldr	r3, [r7, #12]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3714      	adds	r7, #20
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fd16:	b480      	push	{r7}
 800fd18:	b083      	sub	sp, #12
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
 800fd1e:	460b      	mov	r3, r1
 800fd20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	1c5a      	adds	r2, r3, #1
 800fd26:	607a      	str	r2, [r7, #4]
 800fd28:	887a      	ldrh	r2, [r7, #2]
 800fd2a:	b2d2      	uxtb	r2, r2
 800fd2c:	701a      	strb	r2, [r3, #0]
 800fd2e:	887b      	ldrh	r3, [r7, #2]
 800fd30:	0a1b      	lsrs	r3, r3, #8
 800fd32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	607a      	str	r2, [r7, #4]
 800fd3a:	887a      	ldrh	r2, [r7, #2]
 800fd3c:	b2d2      	uxtb	r2, r2
 800fd3e:	701a      	strb	r2, [r3, #0]
}
 800fd40:	bf00      	nop
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	1c5a      	adds	r2, r3, #1
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	683a      	ldr	r2, [r7, #0]
 800fd5e:	b2d2      	uxtb	r2, r2
 800fd60:	701a      	strb	r2, [r3, #0]
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	0a1b      	lsrs	r3, r3, #8
 800fd66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	1c5a      	adds	r2, r3, #1
 800fd6c:	607a      	str	r2, [r7, #4]
 800fd6e:	683a      	ldr	r2, [r7, #0]
 800fd70:	b2d2      	uxtb	r2, r2
 800fd72:	701a      	strb	r2, [r3, #0]
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	0a1b      	lsrs	r3, r3, #8
 800fd78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	683a      	ldr	r2, [r7, #0]
 800fd82:	b2d2      	uxtb	r2, r2
 800fd84:	701a      	strb	r2, [r3, #0]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	0a1b      	lsrs	r3, r3, #8
 800fd8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	1c5a      	adds	r2, r3, #1
 800fd90:	607a      	str	r2, [r7, #4]
 800fd92:	683a      	ldr	r2, [r7, #0]
 800fd94:	b2d2      	uxtb	r2, r2
 800fd96:	701a      	strb	r2, [r3, #0]
}
 800fd98:	bf00      	nop
 800fd9a:	370c      	adds	r7, #12
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fda4:	b480      	push	{r7}
 800fda6:	b087      	sub	sp, #28
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00d      	beq.n	800fdda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	1c53      	adds	r3, r2, #1
 800fdc2:	613b      	str	r3, [r7, #16]
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	1c59      	adds	r1, r3, #1
 800fdc8:	6179      	str	r1, [r7, #20]
 800fdca:	7812      	ldrb	r2, [r2, #0]
 800fdcc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	3b01      	subs	r3, #1
 800fdd2:	607b      	str	r3, [r7, #4]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1f1      	bne.n	800fdbe <mem_cpy+0x1a>
	}
}
 800fdda:	bf00      	nop
 800fddc:	371c      	adds	r7, #28
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr

0800fde6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fde6:	b480      	push	{r7}
 800fde8:	b087      	sub	sp, #28
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	60f8      	str	r0, [r7, #12]
 800fdee:	60b9      	str	r1, [r7, #8]
 800fdf0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	1c5a      	adds	r2, r3, #1
 800fdfa:	617a      	str	r2, [r7, #20]
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	b2d2      	uxtb	r2, r2
 800fe00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	607b      	str	r3, [r7, #4]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1f3      	bne.n	800fdf6 <mem_set+0x10>
}
 800fe0e:	bf00      	nop
 800fe10:	371c      	adds	r7, #28
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr

0800fe1a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fe1a:	b480      	push	{r7}
 800fe1c:	b089      	sub	sp, #36	; 0x24
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	60f8      	str	r0, [r7, #12]
 800fe22:	60b9      	str	r1, [r7, #8]
 800fe24:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	61fb      	str	r3, [r7, #28]
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	1c5a      	adds	r2, r3, #1
 800fe36:	61fa      	str	r2, [r7, #28]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	1c5a      	adds	r2, r3, #1
 800fe40:	61ba      	str	r2, [r7, #24]
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	1acb      	subs	r3, r1, r3
 800fe46:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	607b      	str	r3, [r7, #4]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <mem_cmp+0x40>
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d0eb      	beq.n	800fe32 <mem_cmp+0x18>

	return r;
 800fe5a:	697b      	ldr	r3, [r7, #20]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3724      	adds	r7, #36	; 0x24
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fe72:	e002      	b.n	800fe7a <chk_chr+0x12>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	3301      	adds	r3, #1
 800fe78:	607b      	str	r3, [r7, #4]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d005      	beq.n	800fe8e <chk_chr+0x26>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	461a      	mov	r2, r3
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d1f2      	bne.n	800fe74 <chk_chr+0xc>
	return *str;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	781b      	ldrb	r3, [r3, #0]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	370c      	adds	r7, #12
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
	...

0800fea0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b085      	sub	sp, #20
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800feaa:	2300      	movs	r3, #0
 800feac:	60bb      	str	r3, [r7, #8]
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	60fb      	str	r3, [r7, #12]
 800feb2:	e029      	b.n	800ff08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800feb4:	4a27      	ldr	r2, [pc, #156]	; (800ff54 <chk_lock+0xb4>)
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	011b      	lsls	r3, r3, #4
 800feba:	4413      	add	r3, r2
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d01d      	beq.n	800fefe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fec2:	4a24      	ldr	r2, [pc, #144]	; (800ff54 <chk_lock+0xb4>)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	011b      	lsls	r3, r3, #4
 800fec8:	4413      	add	r3, r2
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d116      	bne.n	800ff02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fed4:	4a1f      	ldr	r2, [pc, #124]	; (800ff54 <chk_lock+0xb4>)
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	011b      	lsls	r3, r3, #4
 800feda:	4413      	add	r3, r2
 800fedc:	3304      	adds	r3, #4
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d10c      	bne.n	800ff02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fee8:	4a1a      	ldr	r2, [pc, #104]	; (800ff54 <chk_lock+0xb4>)
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	011b      	lsls	r3, r3, #4
 800feee:	4413      	add	r3, r2
 800fef0:	3308      	adds	r3, #8
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d102      	bne.n	800ff02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fefc:	e007      	b.n	800ff0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fefe:	2301      	movs	r3, #1
 800ff00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	3301      	adds	r3, #1
 800ff06:	60fb      	str	r3, [r7, #12]
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d9d2      	bls.n	800feb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2b02      	cmp	r3, #2
 800ff12:	d109      	bne.n	800ff28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d102      	bne.n	800ff20 <chk_lock+0x80>
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	d101      	bne.n	800ff24 <chk_lock+0x84>
 800ff20:	2300      	movs	r3, #0
 800ff22:	e010      	b.n	800ff46 <chk_lock+0xa6>
 800ff24:	2312      	movs	r3, #18
 800ff26:	e00e      	b.n	800ff46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d108      	bne.n	800ff40 <chk_lock+0xa0>
 800ff2e:	4a09      	ldr	r2, [pc, #36]	; (800ff54 <chk_lock+0xb4>)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	011b      	lsls	r3, r3, #4
 800ff34:	4413      	add	r3, r2
 800ff36:	330c      	adds	r3, #12
 800ff38:	881b      	ldrh	r3, [r3, #0]
 800ff3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff3e:	d101      	bne.n	800ff44 <chk_lock+0xa4>
 800ff40:	2310      	movs	r3, #16
 800ff42:	e000      	b.n	800ff46 <chk_lock+0xa6>
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3714      	adds	r7, #20
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	24000200 	.word	0x24000200

0800ff58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	607b      	str	r3, [r7, #4]
 800ff62:	e002      	b.n	800ff6a <enq_lock+0x12>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3301      	adds	r3, #1
 800ff68:	607b      	str	r3, [r7, #4]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d806      	bhi.n	800ff7e <enq_lock+0x26>
 800ff70:	4a09      	ldr	r2, [pc, #36]	; (800ff98 <enq_lock+0x40>)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	011b      	lsls	r3, r3, #4
 800ff76:	4413      	add	r3, r2
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d1f2      	bne.n	800ff64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b02      	cmp	r3, #2
 800ff82:	bf14      	ite	ne
 800ff84:	2301      	movne	r3, #1
 800ff86:	2300      	moveq	r3, #0
 800ff88:	b2db      	uxtb	r3, r3
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	24000200 	.word	0x24000200

0800ff9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b085      	sub	sp, #20
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	60fb      	str	r3, [r7, #12]
 800ffaa:	e01f      	b.n	800ffec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ffac:	4a41      	ldr	r2, [pc, #260]	; (80100b4 <inc_lock+0x118>)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	011b      	lsls	r3, r3, #4
 800ffb2:	4413      	add	r3, r2
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d113      	bne.n	800ffe6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ffbe:	4a3d      	ldr	r2, [pc, #244]	; (80100b4 <inc_lock+0x118>)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	011b      	lsls	r3, r3, #4
 800ffc4:	4413      	add	r3, r2
 800ffc6:	3304      	adds	r3, #4
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d109      	bne.n	800ffe6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ffd2:	4a38      	ldr	r2, [pc, #224]	; (80100b4 <inc_lock+0x118>)
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	011b      	lsls	r3, r3, #4
 800ffd8:	4413      	add	r3, r2
 800ffda:	3308      	adds	r3, #8
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d006      	beq.n	800fff4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	60fb      	str	r3, [r7, #12]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d9dc      	bls.n	800ffac <inc_lock+0x10>
 800fff2:	e000      	b.n	800fff6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fff4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2b02      	cmp	r3, #2
 800fffa:	d132      	bne.n	8010062 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fffc:	2300      	movs	r3, #0
 800fffe:	60fb      	str	r3, [r7, #12]
 8010000:	e002      	b.n	8010008 <inc_lock+0x6c>
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	3301      	adds	r3, #1
 8010006:	60fb      	str	r3, [r7, #12]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d806      	bhi.n	801001c <inc_lock+0x80>
 801000e:	4a29      	ldr	r2, [pc, #164]	; (80100b4 <inc_lock+0x118>)
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	011b      	lsls	r3, r3, #4
 8010014:	4413      	add	r3, r2
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1f2      	bne.n	8010002 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2b02      	cmp	r3, #2
 8010020:	d101      	bne.n	8010026 <inc_lock+0x8a>
 8010022:	2300      	movs	r3, #0
 8010024:	e040      	b.n	80100a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	4922      	ldr	r1, [pc, #136]	; (80100b4 <inc_lock+0x118>)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	011b      	lsls	r3, r3, #4
 8010030:	440b      	add	r3, r1
 8010032:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	689a      	ldr	r2, [r3, #8]
 8010038:	491e      	ldr	r1, [pc, #120]	; (80100b4 <inc_lock+0x118>)
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	011b      	lsls	r3, r3, #4
 801003e:	440b      	add	r3, r1
 8010040:	3304      	adds	r3, #4
 8010042:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	695a      	ldr	r2, [r3, #20]
 8010048:	491a      	ldr	r1, [pc, #104]	; (80100b4 <inc_lock+0x118>)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	011b      	lsls	r3, r3, #4
 801004e:	440b      	add	r3, r1
 8010050:	3308      	adds	r3, #8
 8010052:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010054:	4a17      	ldr	r2, [pc, #92]	; (80100b4 <inc_lock+0x118>)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	011b      	lsls	r3, r3, #4
 801005a:	4413      	add	r3, r2
 801005c:	330c      	adds	r3, #12
 801005e:	2200      	movs	r2, #0
 8010060:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d009      	beq.n	801007c <inc_lock+0xe0>
 8010068:	4a12      	ldr	r2, [pc, #72]	; (80100b4 <inc_lock+0x118>)
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	011b      	lsls	r3, r3, #4
 801006e:	4413      	add	r3, r2
 8010070:	330c      	adds	r3, #12
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d001      	beq.n	801007c <inc_lock+0xe0>
 8010078:	2300      	movs	r3, #0
 801007a:	e015      	b.n	80100a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d108      	bne.n	8010094 <inc_lock+0xf8>
 8010082:	4a0c      	ldr	r2, [pc, #48]	; (80100b4 <inc_lock+0x118>)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	011b      	lsls	r3, r3, #4
 8010088:	4413      	add	r3, r2
 801008a:	330c      	adds	r3, #12
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	3301      	adds	r3, #1
 8010090:	b29a      	uxth	r2, r3
 8010092:	e001      	b.n	8010098 <inc_lock+0xfc>
 8010094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010098:	4906      	ldr	r1, [pc, #24]	; (80100b4 <inc_lock+0x118>)
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	011b      	lsls	r3, r3, #4
 801009e:	440b      	add	r3, r1
 80100a0:	330c      	adds	r3, #12
 80100a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	3301      	adds	r3, #1
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	24000200 	.word	0x24000200

080100b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	3b01      	subs	r3, #1
 80100c4:	607b      	str	r3, [r7, #4]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d825      	bhi.n	8010118 <dec_lock+0x60>
		n = Files[i].ctr;
 80100cc:	4a17      	ldr	r2, [pc, #92]	; (801012c <dec_lock+0x74>)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	011b      	lsls	r3, r3, #4
 80100d2:	4413      	add	r3, r2
 80100d4:	330c      	adds	r3, #12
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80100da:	89fb      	ldrh	r3, [r7, #14]
 80100dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100e0:	d101      	bne.n	80100e6 <dec_lock+0x2e>
 80100e2:	2300      	movs	r3, #0
 80100e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80100e6:	89fb      	ldrh	r3, [r7, #14]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d002      	beq.n	80100f2 <dec_lock+0x3a>
 80100ec:	89fb      	ldrh	r3, [r7, #14]
 80100ee:	3b01      	subs	r3, #1
 80100f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80100f2:	4a0e      	ldr	r2, [pc, #56]	; (801012c <dec_lock+0x74>)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	011b      	lsls	r3, r3, #4
 80100f8:	4413      	add	r3, r2
 80100fa:	330c      	adds	r3, #12
 80100fc:	89fa      	ldrh	r2, [r7, #14]
 80100fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010100:	89fb      	ldrh	r3, [r7, #14]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d105      	bne.n	8010112 <dec_lock+0x5a>
 8010106:	4a09      	ldr	r2, [pc, #36]	; (801012c <dec_lock+0x74>)
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	011b      	lsls	r3, r3, #4
 801010c:	4413      	add	r3, r2
 801010e:	2200      	movs	r2, #0
 8010110:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010112:	2300      	movs	r3, #0
 8010114:	737b      	strb	r3, [r7, #13]
 8010116:	e001      	b.n	801011c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010118:	2302      	movs	r3, #2
 801011a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801011c:	7b7b      	ldrb	r3, [r7, #13]
}
 801011e:	4618      	mov	r0, r3
 8010120:	3714      	adds	r7, #20
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr
 801012a:	bf00      	nop
 801012c:	24000200 	.word	0x24000200

08010130 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010138:	2300      	movs	r3, #0
 801013a:	60fb      	str	r3, [r7, #12]
 801013c:	e010      	b.n	8010160 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801013e:	4a0d      	ldr	r2, [pc, #52]	; (8010174 <clear_lock+0x44>)
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	011b      	lsls	r3, r3, #4
 8010144:	4413      	add	r3, r2
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	429a      	cmp	r2, r3
 801014c:	d105      	bne.n	801015a <clear_lock+0x2a>
 801014e:	4a09      	ldr	r2, [pc, #36]	; (8010174 <clear_lock+0x44>)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	011b      	lsls	r3, r3, #4
 8010154:	4413      	add	r3, r2
 8010156:	2200      	movs	r2, #0
 8010158:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	3301      	adds	r3, #1
 801015e:	60fb      	str	r3, [r7, #12]
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2b01      	cmp	r3, #1
 8010164:	d9eb      	bls.n	801013e <clear_lock+0xe>
	}
}
 8010166:	bf00      	nop
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	24000200 	.word	0x24000200

08010178 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010180:	2300      	movs	r3, #0
 8010182:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	78db      	ldrb	r3, [r3, #3]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d034      	beq.n	80101f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010190:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	7858      	ldrb	r0, [r3, #1]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801019c:	2301      	movs	r3, #1
 801019e:	697a      	ldr	r2, [r7, #20]
 80101a0:	f7ff fd40 	bl	800fc24 <disk_write>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d002      	beq.n	80101b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80101aa:	2301      	movs	r3, #1
 80101ac:	73fb      	strb	r3, [r7, #15]
 80101ae:	e022      	b.n	80101f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a1b      	ldr	r3, [r3, #32]
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	1ad2      	subs	r2, r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	699b      	ldr	r3, [r3, #24]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d217      	bcs.n	80101f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	789b      	ldrb	r3, [r3, #2]
 80101ca:	613b      	str	r3, [r7, #16]
 80101cc:	e010      	b.n	80101f0 <sync_window+0x78>
					wsect += fs->fsize;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	699b      	ldr	r3, [r3, #24]
 80101d2:	697a      	ldr	r2, [r7, #20]
 80101d4:	4413      	add	r3, r2
 80101d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	7858      	ldrb	r0, [r3, #1]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101e2:	2301      	movs	r3, #1
 80101e4:	697a      	ldr	r2, [r7, #20]
 80101e6:	f7ff fd1d 	bl	800fc24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	3b01      	subs	r3, #1
 80101ee:	613b      	str	r3, [r7, #16]
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d8eb      	bhi.n	80101ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80101f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3718      	adds	r7, #24
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801020a:	2300      	movs	r3, #0
 801020c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010212:	683a      	ldr	r2, [r7, #0]
 8010214:	429a      	cmp	r2, r3
 8010216:	d01b      	beq.n	8010250 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7ff ffad 	bl	8010178 <sync_window>
 801021e:	4603      	mov	r3, r0
 8010220:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010222:	7bfb      	ldrb	r3, [r7, #15]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d113      	bne.n	8010250 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	7858      	ldrb	r0, [r3, #1]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010232:	2301      	movs	r3, #1
 8010234:	683a      	ldr	r2, [r7, #0]
 8010236:	f7ff fcd5 	bl	800fbe4 <disk_read>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d004      	beq.n	801024a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010240:	f04f 33ff 	mov.w	r3, #4294967295
 8010244:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010246:	2301      	movs	r3, #1
 8010248:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	683a      	ldr	r2, [r7, #0]
 801024e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8010250:	7bfb      	ldrb	r3, [r7, #15]
}
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
	...

0801025c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b084      	sub	sp, #16
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f7ff ff87 	bl	8010178 <sync_window>
 801026a:	4603      	mov	r3, r0
 801026c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801026e:	7bfb      	ldrb	r3, [r7, #15]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d158      	bne.n	8010326 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	2b03      	cmp	r3, #3
 801027a:	d148      	bne.n	801030e <sync_fs+0xb2>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	791b      	ldrb	r3, [r3, #4]
 8010280:	2b01      	cmp	r3, #1
 8010282:	d144      	bne.n	801030e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	3330      	adds	r3, #48	; 0x30
 8010288:	f44f 7200 	mov.w	r2, #512	; 0x200
 801028c:	2100      	movs	r1, #0
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff fda9 	bl	800fde6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	3330      	adds	r3, #48	; 0x30
 8010298:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801029c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff fd38 	bl	800fd16 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	3330      	adds	r3, #48	; 0x30
 80102aa:	4921      	ldr	r1, [pc, #132]	; (8010330 <sync_fs+0xd4>)
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff fd4d 	bl	800fd4c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	3330      	adds	r3, #48	; 0x30
 80102b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80102ba:	491e      	ldr	r1, [pc, #120]	; (8010334 <sync_fs+0xd8>)
 80102bc:	4618      	mov	r0, r3
 80102be:	f7ff fd45 	bl	800fd4c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	3330      	adds	r3, #48	; 0x30
 80102c6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	4619      	mov	r1, r3
 80102d0:	4610      	mov	r0, r2
 80102d2:	f7ff fd3b 	bl	800fd4c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	3330      	adds	r3, #48	; 0x30
 80102da:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	4619      	mov	r1, r3
 80102e4:	4610      	mov	r0, r2
 80102e6:	f7ff fd31 	bl	800fd4c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	69db      	ldr	r3, [r3, #28]
 80102ee:	1c5a      	adds	r2, r3, #1
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	7858      	ldrb	r0, [r3, #1]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010302:	2301      	movs	r3, #1
 8010304:	f7ff fc8e 	bl	800fc24 <disk_write>
			fs->fsi_flag = 0;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	785b      	ldrb	r3, [r3, #1]
 8010312:	2200      	movs	r2, #0
 8010314:	2100      	movs	r1, #0
 8010316:	4618      	mov	r0, r3
 8010318:	f7ff fca4 	bl	800fc64 <disk_ioctl>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <sync_fs+0xca>
 8010322:	2301      	movs	r3, #1
 8010324:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010326:	7bfb      	ldrb	r3, [r7, #15]
}
 8010328:	4618      	mov	r0, r3
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	41615252 	.word	0x41615252
 8010334:	61417272 	.word	0x61417272

08010338 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	3b02      	subs	r3, #2
 8010346:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	695b      	ldr	r3, [r3, #20]
 801034c:	3b02      	subs	r3, #2
 801034e:	683a      	ldr	r2, [r7, #0]
 8010350:	429a      	cmp	r2, r3
 8010352:	d301      	bcc.n	8010358 <clust2sect+0x20>
 8010354:	2300      	movs	r3, #0
 8010356:	e008      	b.n	801036a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	895b      	ldrh	r3, [r3, #10]
 801035c:	461a      	mov	r2, r3
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	fb03 f202 	mul.w	r2, r3, r2
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010368:	4413      	add	r3, r2
}
 801036a:	4618      	mov	r0, r3
 801036c:	370c      	adds	r7, #12
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr

08010376 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b086      	sub	sp, #24
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	2b01      	cmp	r3, #1
 801038a:	d904      	bls.n	8010396 <get_fat+0x20>
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	695b      	ldr	r3, [r3, #20]
 8010390:	683a      	ldr	r2, [r7, #0]
 8010392:	429a      	cmp	r2, r3
 8010394:	d302      	bcc.n	801039c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010396:	2301      	movs	r3, #1
 8010398:	617b      	str	r3, [r7, #20]
 801039a:	e08c      	b.n	80104b6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801039c:	f04f 33ff 	mov.w	r3, #4294967295
 80103a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	2b02      	cmp	r3, #2
 80103a8:	d045      	beq.n	8010436 <get_fat+0xc0>
 80103aa:	2b03      	cmp	r3, #3
 80103ac:	d05d      	beq.n	801046a <get_fat+0xf4>
 80103ae:	2b01      	cmp	r3, #1
 80103b0:	d177      	bne.n	80104a2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	60fb      	str	r3, [r7, #12]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	085b      	lsrs	r3, r3, #1
 80103ba:	68fa      	ldr	r2, [r7, #12]
 80103bc:	4413      	add	r3, r2
 80103be:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	6a1a      	ldr	r2, [r3, #32]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	0a5b      	lsrs	r3, r3, #9
 80103c8:	4413      	add	r3, r2
 80103ca:	4619      	mov	r1, r3
 80103cc:	6938      	ldr	r0, [r7, #16]
 80103ce:	f7ff ff17 	bl	8010200 <move_window>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d167      	bne.n	80104a8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	1c5a      	adds	r2, r3, #1
 80103dc:	60fa      	str	r2, [r7, #12]
 80103de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	4413      	add	r3, r2
 80103e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103ea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	6a1a      	ldr	r2, [r3, #32]
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	0a5b      	lsrs	r3, r3, #9
 80103f4:	4413      	add	r3, r2
 80103f6:	4619      	mov	r1, r3
 80103f8:	6938      	ldr	r0, [r7, #16]
 80103fa:	f7ff ff01 	bl	8010200 <move_window>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d153      	bne.n	80104ac <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801040a:	693a      	ldr	r2, [r7, #16]
 801040c:	4413      	add	r3, r2
 801040e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010412:	021b      	lsls	r3, r3, #8
 8010414:	461a      	mov	r2, r3
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	4313      	orrs	r3, r2
 801041a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	f003 0301 	and.w	r3, r3, #1
 8010422:	2b00      	cmp	r3, #0
 8010424:	d002      	beq.n	801042c <get_fat+0xb6>
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	091b      	lsrs	r3, r3, #4
 801042a:	e002      	b.n	8010432 <get_fat+0xbc>
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010432:	617b      	str	r3, [r7, #20]
			break;
 8010434:	e03f      	b.n	80104b6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	6a1a      	ldr	r2, [r3, #32]
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	0a1b      	lsrs	r3, r3, #8
 801043e:	4413      	add	r3, r2
 8010440:	4619      	mov	r1, r3
 8010442:	6938      	ldr	r0, [r7, #16]
 8010444:	f7ff fedc 	bl	8010200 <move_window>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d130      	bne.n	80104b0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	005b      	lsls	r3, r3, #1
 8010458:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801045c:	4413      	add	r3, r2
 801045e:	4618      	mov	r0, r3
 8010460:	f7ff fc1e 	bl	800fca0 <ld_word>
 8010464:	4603      	mov	r3, r0
 8010466:	617b      	str	r3, [r7, #20]
			break;
 8010468:	e025      	b.n	80104b6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	6a1a      	ldr	r2, [r3, #32]
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	09db      	lsrs	r3, r3, #7
 8010472:	4413      	add	r3, r2
 8010474:	4619      	mov	r1, r3
 8010476:	6938      	ldr	r0, [r7, #16]
 8010478:	f7ff fec2 	bl	8010200 <move_window>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d118      	bne.n	80104b4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010490:	4413      	add	r3, r2
 8010492:	4618      	mov	r0, r3
 8010494:	f7ff fc1c 	bl	800fcd0 <ld_dword>
 8010498:	4603      	mov	r3, r0
 801049a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801049e:	617b      	str	r3, [r7, #20]
			break;
 80104a0:	e009      	b.n	80104b6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80104a2:	2301      	movs	r3, #1
 80104a4:	617b      	str	r3, [r7, #20]
 80104a6:	e006      	b.n	80104b6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80104a8:	bf00      	nop
 80104aa:	e004      	b.n	80104b6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80104ac:	bf00      	nop
 80104ae:	e002      	b.n	80104b6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80104b0:	bf00      	nop
 80104b2:	e000      	b.n	80104b6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80104b4:	bf00      	nop
		}
	}

	return val;
 80104b6:	697b      	ldr	r3, [r7, #20]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80104c0:	b590      	push	{r4, r7, lr}
 80104c2:	b089      	sub	sp, #36	; 0x24
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	60f8      	str	r0, [r7, #12]
 80104c8:	60b9      	str	r1, [r7, #8]
 80104ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80104cc:	2302      	movs	r3, #2
 80104ce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	f240 80d6 	bls.w	8010684 <put_fat+0x1c4>
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	695b      	ldr	r3, [r3, #20]
 80104dc:	68ba      	ldr	r2, [r7, #8]
 80104de:	429a      	cmp	r2, r3
 80104e0:	f080 80d0 	bcs.w	8010684 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	d073      	beq.n	80105d4 <put_fat+0x114>
 80104ec:	2b03      	cmp	r3, #3
 80104ee:	f000 8091 	beq.w	8010614 <put_fat+0x154>
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	f040 80c6 	bne.w	8010684 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	61bb      	str	r3, [r7, #24]
 80104fc:	69bb      	ldr	r3, [r7, #24]
 80104fe:	085b      	lsrs	r3, r3, #1
 8010500:	69ba      	ldr	r2, [r7, #24]
 8010502:	4413      	add	r3, r2
 8010504:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	6a1a      	ldr	r2, [r3, #32]
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	0a5b      	lsrs	r3, r3, #9
 801050e:	4413      	add	r3, r2
 8010510:	4619      	mov	r1, r3
 8010512:	68f8      	ldr	r0, [r7, #12]
 8010514:	f7ff fe74 	bl	8010200 <move_window>
 8010518:	4603      	mov	r3, r0
 801051a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801051c:	7ffb      	ldrb	r3, [r7, #31]
 801051e:	2b00      	cmp	r3, #0
 8010520:	f040 80a9 	bne.w	8010676 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	1c59      	adds	r1, r3, #1
 801052e:	61b9      	str	r1, [r7, #24]
 8010530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010534:	4413      	add	r3, r2
 8010536:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	f003 0301 	and.w	r3, r3, #1
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00d      	beq.n	801055e <put_fat+0x9e>
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	b25b      	sxtb	r3, r3
 8010548:	f003 030f 	and.w	r3, r3, #15
 801054c:	b25a      	sxtb	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	b2db      	uxtb	r3, r3
 8010552:	011b      	lsls	r3, r3, #4
 8010554:	b25b      	sxtb	r3, r3
 8010556:	4313      	orrs	r3, r2
 8010558:	b25b      	sxtb	r3, r3
 801055a:	b2db      	uxtb	r3, r3
 801055c:	e001      	b.n	8010562 <put_fat+0xa2>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	b2db      	uxtb	r3, r3
 8010562:	697a      	ldr	r2, [r7, #20]
 8010564:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2201      	movs	r2, #1
 801056a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6a1a      	ldr	r2, [r3, #32]
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	0a5b      	lsrs	r3, r3, #9
 8010574:	4413      	add	r3, r2
 8010576:	4619      	mov	r1, r3
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f7ff fe41 	bl	8010200 <move_window>
 801057e:	4603      	mov	r3, r0
 8010580:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010582:	7ffb      	ldrb	r3, [r7, #31]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d178      	bne.n	801067a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010594:	4413      	add	r3, r2
 8010596:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	f003 0301 	and.w	r3, r3, #1
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d003      	beq.n	80105aa <put_fat+0xea>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	091b      	lsrs	r3, r3, #4
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	e00e      	b.n	80105c8 <put_fat+0x108>
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	b25b      	sxtb	r3, r3
 80105b0:	f023 030f 	bic.w	r3, r3, #15
 80105b4:	b25a      	sxtb	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	0a1b      	lsrs	r3, r3, #8
 80105ba:	b25b      	sxtb	r3, r3
 80105bc:	f003 030f 	and.w	r3, r3, #15
 80105c0:	b25b      	sxtb	r3, r3
 80105c2:	4313      	orrs	r3, r2
 80105c4:	b25b      	sxtb	r3, r3
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	697a      	ldr	r2, [r7, #20]
 80105ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2201      	movs	r2, #1
 80105d0:	70da      	strb	r2, [r3, #3]
			break;
 80105d2:	e057      	b.n	8010684 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	6a1a      	ldr	r2, [r3, #32]
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	0a1b      	lsrs	r3, r3, #8
 80105dc:	4413      	add	r3, r2
 80105de:	4619      	mov	r1, r3
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f7ff fe0d 	bl	8010200 <move_window>
 80105e6:	4603      	mov	r3, r0
 80105e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80105ea:	7ffb      	ldrb	r3, [r7, #31]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d146      	bne.n	801067e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	005b      	lsls	r3, r3, #1
 80105fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80105fe:	4413      	add	r3, r2
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	b292      	uxth	r2, r2
 8010604:	4611      	mov	r1, r2
 8010606:	4618      	mov	r0, r3
 8010608:	f7ff fb85 	bl	800fd16 <st_word>
			fs->wflag = 1;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2201      	movs	r2, #1
 8010610:	70da      	strb	r2, [r3, #3]
			break;
 8010612:	e037      	b.n	8010684 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	6a1a      	ldr	r2, [r3, #32]
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	09db      	lsrs	r3, r3, #7
 801061c:	4413      	add	r3, r2
 801061e:	4619      	mov	r1, r3
 8010620:	68f8      	ldr	r0, [r7, #12]
 8010622:	f7ff fded 	bl	8010200 <move_window>
 8010626:	4603      	mov	r3, r0
 8010628:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801062a:	7ffb      	ldrb	r3, [r7, #31]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d128      	bne.n	8010682 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010644:	4413      	add	r3, r2
 8010646:	4618      	mov	r0, r3
 8010648:	f7ff fb42 	bl	800fcd0 <ld_dword>
 801064c:	4603      	mov	r3, r0
 801064e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010652:	4323      	orrs	r3, r4
 8010654:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010664:	4413      	add	r3, r2
 8010666:	6879      	ldr	r1, [r7, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fb6f 	bl	800fd4c <st_dword>
			fs->wflag = 1;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2201      	movs	r2, #1
 8010672:	70da      	strb	r2, [r3, #3]
			break;
 8010674:	e006      	b.n	8010684 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010676:	bf00      	nop
 8010678:	e004      	b.n	8010684 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801067a:	bf00      	nop
 801067c:	e002      	b.n	8010684 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801067e:	bf00      	nop
 8010680:	e000      	b.n	8010684 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010682:	bf00      	nop
		}
	}
	return res;
 8010684:	7ffb      	ldrb	r3, [r7, #31]
}
 8010686:	4618      	mov	r0, r3
 8010688:	3724      	adds	r7, #36	; 0x24
 801068a:	46bd      	mov	sp, r7
 801068c:	bd90      	pop	{r4, r7, pc}

0801068e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b088      	sub	sp, #32
 8010692:	af00      	add	r7, sp, #0
 8010694:	60f8      	str	r0, [r7, #12]
 8010696:	60b9      	str	r1, [r7, #8]
 8010698:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801069a:	2300      	movs	r3, #0
 801069c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d904      	bls.n	80106b4 <remove_chain+0x26>
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	695b      	ldr	r3, [r3, #20]
 80106ae:	68ba      	ldr	r2, [r7, #8]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d301      	bcc.n	80106b8 <remove_chain+0x2a>
 80106b4:	2302      	movs	r3, #2
 80106b6:	e04b      	b.n	8010750 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00c      	beq.n	80106d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80106be:	f04f 32ff 	mov.w	r2, #4294967295
 80106c2:	6879      	ldr	r1, [r7, #4]
 80106c4:	69b8      	ldr	r0, [r7, #24]
 80106c6:	f7ff fefb 	bl	80104c0 <put_fat>
 80106ca:	4603      	mov	r3, r0
 80106cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80106ce:	7ffb      	ldrb	r3, [r7, #31]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d001      	beq.n	80106d8 <remove_chain+0x4a>
 80106d4:	7ffb      	ldrb	r3, [r7, #31]
 80106d6:	e03b      	b.n	8010750 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80106d8:	68b9      	ldr	r1, [r7, #8]
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f7ff fe4b 	bl	8010376 <get_fat>
 80106e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d031      	beq.n	801074c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d101      	bne.n	80106f2 <remove_chain+0x64>
 80106ee:	2302      	movs	r3, #2
 80106f0:	e02e      	b.n	8010750 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f8:	d101      	bne.n	80106fe <remove_chain+0x70>
 80106fa:	2301      	movs	r3, #1
 80106fc:	e028      	b.n	8010750 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80106fe:	2200      	movs	r2, #0
 8010700:	68b9      	ldr	r1, [r7, #8]
 8010702:	69b8      	ldr	r0, [r7, #24]
 8010704:	f7ff fedc 	bl	80104c0 <put_fat>
 8010708:	4603      	mov	r3, r0
 801070a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801070c:	7ffb      	ldrb	r3, [r7, #31]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d001      	beq.n	8010716 <remove_chain+0x88>
 8010712:	7ffb      	ldrb	r3, [r7, #31]
 8010714:	e01c      	b.n	8010750 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	691a      	ldr	r2, [r3, #16]
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	695b      	ldr	r3, [r3, #20]
 801071e:	3b02      	subs	r3, #2
 8010720:	429a      	cmp	r2, r3
 8010722:	d20b      	bcs.n	801073c <remove_chain+0xae>
			fs->free_clst++;
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	691b      	ldr	r3, [r3, #16]
 8010728:	1c5a      	adds	r2, r3, #1
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	791b      	ldrb	r3, [r3, #4]
 8010732:	f043 0301 	orr.w	r3, r3, #1
 8010736:	b2da      	uxtb	r2, r3
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	695b      	ldr	r3, [r3, #20]
 8010744:	68ba      	ldr	r2, [r7, #8]
 8010746:	429a      	cmp	r2, r3
 8010748:	d3c6      	bcc.n	80106d8 <remove_chain+0x4a>
 801074a:	e000      	b.n	801074e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801074c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3720      	adds	r7, #32
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d10d      	bne.n	801078a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d004      	beq.n	8010784 <create_chain+0x2c>
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	695b      	ldr	r3, [r3, #20]
 801077e:	69ba      	ldr	r2, [r7, #24]
 8010780:	429a      	cmp	r2, r3
 8010782:	d31b      	bcc.n	80107bc <create_chain+0x64>
 8010784:	2301      	movs	r3, #1
 8010786:	61bb      	str	r3, [r7, #24]
 8010788:	e018      	b.n	80107bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801078a:	6839      	ldr	r1, [r7, #0]
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f7ff fdf2 	bl	8010376 <get_fat>
 8010792:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2b01      	cmp	r3, #1
 8010798:	d801      	bhi.n	801079e <create_chain+0x46>
 801079a:	2301      	movs	r3, #1
 801079c:	e070      	b.n	8010880 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107a4:	d101      	bne.n	80107aa <create_chain+0x52>
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	e06a      	b.n	8010880 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	695b      	ldr	r3, [r3, #20]
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d201      	bcs.n	80107b8 <create_chain+0x60>
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	e063      	b.n	8010880 <create_chain+0x128>
		scl = clst;
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80107bc:	69bb      	ldr	r3, [r7, #24]
 80107be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	3301      	adds	r3, #1
 80107c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	695b      	ldr	r3, [r3, #20]
 80107ca:	69fa      	ldr	r2, [r7, #28]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d307      	bcc.n	80107e0 <create_chain+0x88>
				ncl = 2;
 80107d0:	2302      	movs	r3, #2
 80107d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80107d4:	69fa      	ldr	r2, [r7, #28]
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d901      	bls.n	80107e0 <create_chain+0x88>
 80107dc:	2300      	movs	r3, #0
 80107de:	e04f      	b.n	8010880 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80107e0:	69f9      	ldr	r1, [r7, #28]
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f7ff fdc7 	bl	8010376 <get_fat>
 80107e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d00e      	beq.n	801080e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d003      	beq.n	80107fe <create_chain+0xa6>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107fc:	d101      	bne.n	8010802 <create_chain+0xaa>
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	e03e      	b.n	8010880 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010802:	69fa      	ldr	r2, [r7, #28]
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	429a      	cmp	r2, r3
 8010808:	d1da      	bne.n	80107c0 <create_chain+0x68>
 801080a:	2300      	movs	r3, #0
 801080c:	e038      	b.n	8010880 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801080e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010810:	f04f 32ff 	mov.w	r2, #4294967295
 8010814:	69f9      	ldr	r1, [r7, #28]
 8010816:	6938      	ldr	r0, [r7, #16]
 8010818:	f7ff fe52 	bl	80104c0 <put_fat>
 801081c:	4603      	mov	r3, r0
 801081e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010820:	7dfb      	ldrb	r3, [r7, #23]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d109      	bne.n	801083a <create_chain+0xe2>
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d006      	beq.n	801083a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801082c:	69fa      	ldr	r2, [r7, #28]
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	6938      	ldr	r0, [r7, #16]
 8010832:	f7ff fe45 	bl	80104c0 <put_fat>
 8010836:	4603      	mov	r3, r0
 8010838:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801083a:	7dfb      	ldrb	r3, [r7, #23]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d116      	bne.n	801086e <create_chain+0x116>
		fs->last_clst = ncl;
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	69fa      	ldr	r2, [r7, #28]
 8010844:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	691a      	ldr	r2, [r3, #16]
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	695b      	ldr	r3, [r3, #20]
 801084e:	3b02      	subs	r3, #2
 8010850:	429a      	cmp	r2, r3
 8010852:	d804      	bhi.n	801085e <create_chain+0x106>
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	691b      	ldr	r3, [r3, #16]
 8010858:	1e5a      	subs	r2, r3, #1
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	791b      	ldrb	r3, [r3, #4]
 8010862:	f043 0301 	orr.w	r3, r3, #1
 8010866:	b2da      	uxtb	r2, r3
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	711a      	strb	r2, [r3, #4]
 801086c:	e007      	b.n	801087e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801086e:	7dfb      	ldrb	r3, [r7, #23]
 8010870:	2b01      	cmp	r3, #1
 8010872:	d102      	bne.n	801087a <create_chain+0x122>
 8010874:	f04f 33ff 	mov.w	r3, #4294967295
 8010878:	e000      	b.n	801087c <create_chain+0x124>
 801087a:	2301      	movs	r3, #1
 801087c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801087e:	69fb      	ldr	r3, [r7, #28]
}
 8010880:	4618      	mov	r0, r3
 8010882:	3720      	adds	r7, #32
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010888:	b480      	push	{r7}
 801088a:	b087      	sub	sp, #28
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801089c:	3304      	adds	r3, #4
 801089e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	0a5b      	lsrs	r3, r3, #9
 80108a4:	68fa      	ldr	r2, [r7, #12]
 80108a6:	8952      	ldrh	r2, [r2, #10]
 80108a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80108ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	1d1a      	adds	r2, r3, #4
 80108b2:	613a      	str	r2, [r7, #16]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <clmt_clust+0x3a>
 80108be:	2300      	movs	r3, #0
 80108c0:	e010      	b.n	80108e4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80108c2:	697a      	ldr	r2, [r7, #20]
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d307      	bcc.n	80108da <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80108ca:	697a      	ldr	r2, [r7, #20]
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	1ad3      	subs	r3, r2, r3
 80108d0:	617b      	str	r3, [r7, #20]
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	3304      	adds	r3, #4
 80108d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80108d8:	e7e9      	b.n	80108ae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80108da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	4413      	add	r3, r2
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	371c      	adds	r7, #28
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr

080108f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b086      	sub	sp, #24
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010906:	d204      	bcs.n	8010912 <dir_sdi+0x22>
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	f003 031f 	and.w	r3, r3, #31
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010912:	2302      	movs	r3, #2
 8010914:	e063      	b.n	80109de <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d106      	bne.n	8010936 <dir_sdi+0x46>
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2b02      	cmp	r3, #2
 801092e:	d902      	bls.n	8010936 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010934:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d10c      	bne.n	8010956 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	095b      	lsrs	r3, r3, #5
 8010940:	693a      	ldr	r2, [r7, #16]
 8010942:	8912      	ldrh	r2, [r2, #8]
 8010944:	4293      	cmp	r3, r2
 8010946:	d301      	bcc.n	801094c <dir_sdi+0x5c>
 8010948:	2302      	movs	r3, #2
 801094a:	e048      	b.n	80109de <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	61da      	str	r2, [r3, #28]
 8010954:	e029      	b.n	80109aa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	895b      	ldrh	r3, [r3, #10]
 801095a:	025b      	lsls	r3, r3, #9
 801095c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801095e:	e019      	b.n	8010994 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6979      	ldr	r1, [r7, #20]
 8010964:	4618      	mov	r0, r3
 8010966:	f7ff fd06 	bl	8010376 <get_fat>
 801096a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010972:	d101      	bne.n	8010978 <dir_sdi+0x88>
 8010974:	2301      	movs	r3, #1
 8010976:	e032      	b.n	80109de <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	2b01      	cmp	r3, #1
 801097c:	d904      	bls.n	8010988 <dir_sdi+0x98>
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	695b      	ldr	r3, [r3, #20]
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	429a      	cmp	r2, r3
 8010986:	d301      	bcc.n	801098c <dir_sdi+0x9c>
 8010988:	2302      	movs	r3, #2
 801098a:	e028      	b.n	80109de <dir_sdi+0xee>
			ofs -= csz;
 801098c:	683a      	ldr	r2, [r7, #0]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010994:	683a      	ldr	r2, [r7, #0]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	429a      	cmp	r2, r3
 801099a:	d2e1      	bcs.n	8010960 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801099c:	6979      	ldr	r1, [r7, #20]
 801099e:	6938      	ldr	r0, [r7, #16]
 80109a0:	f7ff fcca 	bl	8010338 <clust2sect>
 80109a4:	4602      	mov	r2, r0
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	697a      	ldr	r2, [r7, #20]
 80109ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	69db      	ldr	r3, [r3, #28]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d101      	bne.n	80109bc <dir_sdi+0xcc>
 80109b8:	2302      	movs	r3, #2
 80109ba:	e010      	b.n	80109de <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	69da      	ldr	r2, [r3, #28]
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	0a5b      	lsrs	r3, r3, #9
 80109c4:	441a      	add	r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109d6:	441a      	add	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3718      	adds	r7, #24
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b086      	sub	sp, #24
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
 80109ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	695b      	ldr	r3, [r3, #20]
 80109fa:	3320      	adds	r3, #32
 80109fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	69db      	ldr	r3, [r3, #28]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d003      	beq.n	8010a0e <dir_next+0x28>
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010a0c:	d301      	bcc.n	8010a12 <dir_next+0x2c>
 8010a0e:	2304      	movs	r3, #4
 8010a10:	e0aa      	b.n	8010b68 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f040 8098 	bne.w	8010b4e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	69db      	ldr	r3, [r3, #28]
 8010a22:	1c5a      	adds	r2, r3, #1
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	699b      	ldr	r3, [r3, #24]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10b      	bne.n	8010a48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	095b      	lsrs	r3, r3, #5
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	8912      	ldrh	r2, [r2, #8]
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	f0c0 8088 	bcc.w	8010b4e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	61da      	str	r2, [r3, #28]
 8010a44:	2304      	movs	r3, #4
 8010a46:	e08f      	b.n	8010b68 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	0a5b      	lsrs	r3, r3, #9
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	8952      	ldrh	r2, [r2, #10]
 8010a50:	3a01      	subs	r2, #1
 8010a52:	4013      	ands	r3, r2
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d17a      	bne.n	8010b4e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	699b      	ldr	r3, [r3, #24]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	4610      	mov	r0, r2
 8010a62:	f7ff fc88 	bl	8010376 <get_fat>
 8010a66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d801      	bhi.n	8010a72 <dir_next+0x8c>
 8010a6e:	2302      	movs	r3, #2
 8010a70:	e07a      	b.n	8010b68 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a78:	d101      	bne.n	8010a7e <dir_next+0x98>
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e074      	b.n	8010b68 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	697a      	ldr	r2, [r7, #20]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d358      	bcc.n	8010b3a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d104      	bne.n	8010a98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2200      	movs	r2, #0
 8010a92:	61da      	str	r2, [r3, #28]
 8010a94:	2304      	movs	r3, #4
 8010a96:	e067      	b.n	8010b68 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	699b      	ldr	r3, [r3, #24]
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	4610      	mov	r0, r2
 8010aa2:	f7ff fe59 	bl	8010758 <create_chain>
 8010aa6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d101      	bne.n	8010ab2 <dir_next+0xcc>
 8010aae:	2307      	movs	r3, #7
 8010ab0:	e05a      	b.n	8010b68 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d101      	bne.n	8010abc <dir_next+0xd6>
 8010ab8:	2302      	movs	r3, #2
 8010aba:	e055      	b.n	8010b68 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac2:	d101      	bne.n	8010ac8 <dir_next+0xe2>
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	e04f      	b.n	8010b68 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f7ff fb55 	bl	8010178 <sync_window>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <dir_next+0xf2>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e047      	b.n	8010b68 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	3330      	adds	r3, #48	; 0x30
 8010adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7ff f97f 	bl	800fde6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010ae8:	2300      	movs	r3, #0
 8010aea:	613b      	str	r3, [r7, #16]
 8010aec:	6979      	ldr	r1, [r7, #20]
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f7ff fc22 	bl	8010338 <clust2sect>
 8010af4:	4602      	mov	r2, r0
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	62da      	str	r2, [r3, #44]	; 0x2c
 8010afa:	e012      	b.n	8010b22 <dir_next+0x13c>
						fs->wflag = 1;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2201      	movs	r2, #1
 8010b00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f7ff fb38 	bl	8010178 <sync_window>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d001      	beq.n	8010b12 <dir_next+0x12c>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	e02a      	b.n	8010b68 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	3301      	adds	r3, #1
 8010b16:	613b      	str	r3, [r7, #16]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1c:	1c5a      	adds	r2, r3, #1
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	62da      	str	r2, [r3, #44]	; 0x2c
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	895b      	ldrh	r3, [r3, #10]
 8010b26:	461a      	mov	r2, r3
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d3e6      	bcc.n	8010afc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	1ad2      	subs	r2, r2, r3
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	697a      	ldr	r2, [r7, #20]
 8010b3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010b40:	6979      	ldr	r1, [r7, #20]
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f7ff fbf8 	bl	8010338 <clust2sect>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	68ba      	ldr	r2, [r7, #8]
 8010b52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b60:	441a      	add	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3718      	adds	r7, #24
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010b80:	2100      	movs	r1, #0
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f7ff feb4 	bl	80108f0 <dir_sdi>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010b8c:	7dfb      	ldrb	r3, [r7, #23]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d12b      	bne.n	8010bea <dir_alloc+0x7a>
		n = 0;
 8010b92:	2300      	movs	r3, #0
 8010b94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	69db      	ldr	r3, [r3, #28]
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f7ff fb2f 	bl	8010200 <move_window>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d11d      	bne.n	8010be8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6a1b      	ldr	r3, [r3, #32]
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	2be5      	cmp	r3, #229	; 0xe5
 8010bb4:	d004      	beq.n	8010bc0 <dir_alloc+0x50>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6a1b      	ldr	r3, [r3, #32]
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d107      	bne.n	8010bd0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	613b      	str	r3, [r7, #16]
 8010bc6:	693a      	ldr	r2, [r7, #16]
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d102      	bne.n	8010bd4 <dir_alloc+0x64>
 8010bce:	e00c      	b.n	8010bea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010bd4:	2101      	movs	r1, #1
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f7ff ff05 	bl	80109e6 <dir_next>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010be0:	7dfb      	ldrb	r3, [r7, #23]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d0d7      	beq.n	8010b96 <dir_alloc+0x26>
 8010be6:	e000      	b.n	8010bea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010be8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010bea:	7dfb      	ldrb	r3, [r7, #23]
 8010bec:	2b04      	cmp	r3, #4
 8010bee:	d101      	bne.n	8010bf4 <dir_alloc+0x84>
 8010bf0:	2307      	movs	r3, #7
 8010bf2:	75fb      	strb	r3, [r7, #23]
	return res;
 8010bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3718      	adds	r7, #24
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b084      	sub	sp, #16
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	331a      	adds	r3, #26
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7ff f847 	bl	800fca0 <ld_word>
 8010c12:	4603      	mov	r3, r0
 8010c14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	2b03      	cmp	r3, #3
 8010c1c:	d109      	bne.n	8010c32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	3314      	adds	r3, #20
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7ff f83c 	bl	800fca0 <ld_word>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	041b      	lsls	r3, r3, #16
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010c32:	68fb      	ldr	r3, [r7, #12]
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	331a      	adds	r3, #26
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	b292      	uxth	r2, r2
 8010c50:	4611      	mov	r1, r2
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7ff f85f 	bl	800fd16 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	2b03      	cmp	r3, #3
 8010c5e:	d109      	bne.n	8010c74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	f103 0214 	add.w	r2, r3, #20
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	0c1b      	lsrs	r3, r3, #16
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	4610      	mov	r0, r2
 8010c70:	f7ff f851 	bl	800fd16 <st_word>
	}
}
 8010c74:	bf00      	nop
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b086      	sub	sp, #24
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7ff fe2f 	bl	80108f0 <dir_sdi>
 8010c92:	4603      	mov	r3, r0
 8010c94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010c96:	7dfb      	ldrb	r3, [r7, #23]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d001      	beq.n	8010ca0 <dir_find+0x24>
 8010c9c:	7dfb      	ldrb	r3, [r7, #23]
 8010c9e:	e03e      	b.n	8010d1e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	69db      	ldr	r3, [r3, #28]
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	6938      	ldr	r0, [r7, #16]
 8010ca8:	f7ff faaa 	bl	8010200 <move_window>
 8010cac:	4603      	mov	r3, r0
 8010cae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010cb0:	7dfb      	ldrb	r3, [r7, #23]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d12f      	bne.n	8010d16 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6a1b      	ldr	r3, [r3, #32]
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010cbe:	7bfb      	ldrb	r3, [r7, #15]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d102      	bne.n	8010cca <dir_find+0x4e>
 8010cc4:	2304      	movs	r3, #4
 8010cc6:	75fb      	strb	r3, [r7, #23]
 8010cc8:	e028      	b.n	8010d1c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6a1b      	ldr	r3, [r3, #32]
 8010cce:	330b      	adds	r3, #11
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010cd6:	b2da      	uxtb	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a1b      	ldr	r3, [r3, #32]
 8010ce0:	330b      	adds	r3, #11
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	f003 0308 	and.w	r3, r3, #8
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d10a      	bne.n	8010d02 <dir_find+0x86>
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6a18      	ldr	r0, [r3, #32]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	3324      	adds	r3, #36	; 0x24
 8010cf4:	220b      	movs	r2, #11
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	f7ff f88f 	bl	800fe1a <mem_cmp>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d00b      	beq.n	8010d1a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010d02:	2100      	movs	r1, #0
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7ff fe6e 	bl	80109e6 <dir_next>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010d0e:	7dfb      	ldrb	r3, [r7, #23]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d0c5      	beq.n	8010ca0 <dir_find+0x24>
 8010d14:	e002      	b.n	8010d1c <dir_find+0xa0>
		if (res != FR_OK) break;
 8010d16:	bf00      	nop
 8010d18:	e000      	b.n	8010d1c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010d1a:	bf00      	nop

	return res;
 8010d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3718      	adds	r7, #24
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b084      	sub	sp, #16
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010d34:	2101      	movs	r1, #1
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f7ff ff1a 	bl	8010b70 <dir_alloc>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010d40:	7bfb      	ldrb	r3, [r7, #15]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d11c      	bne.n	8010d80 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	69db      	ldr	r3, [r3, #28]
 8010d4a:	4619      	mov	r1, r3
 8010d4c:	68b8      	ldr	r0, [r7, #8]
 8010d4e:	f7ff fa57 	bl	8010200 <move_window>
 8010d52:	4603      	mov	r3, r0
 8010d54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010d56:	7bfb      	ldrb	r3, [r7, #15]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d111      	bne.n	8010d80 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6a1b      	ldr	r3, [r3, #32]
 8010d60:	2220      	movs	r2, #32
 8010d62:	2100      	movs	r1, #0
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7ff f83e 	bl	800fde6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6a18      	ldr	r0, [r3, #32]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	3324      	adds	r3, #36	; 0x24
 8010d72:	220b      	movs	r2, #11
 8010d74:	4619      	mov	r1, r3
 8010d76:	f7ff f815 	bl	800fda4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b088      	sub	sp, #32
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	60fb      	str	r3, [r7, #12]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	3324      	adds	r3, #36	; 0x24
 8010da0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010da2:	220b      	movs	r2, #11
 8010da4:	2120      	movs	r1, #32
 8010da6:	68b8      	ldr	r0, [r7, #8]
 8010da8:	f7ff f81d 	bl	800fde6 <mem_set>
	si = i = 0; ni = 8;
 8010dac:	2300      	movs	r3, #0
 8010dae:	613b      	str	r3, [r7, #16]
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	617b      	str	r3, [r7, #20]
 8010db4:	2308      	movs	r3, #8
 8010db6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	1c5a      	adds	r2, r3, #1
 8010dbc:	617a      	str	r2, [r7, #20]
 8010dbe:	68fa      	ldr	r2, [r7, #12]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010dc6:	7ffb      	ldrb	r3, [r7, #31]
 8010dc8:	2b20      	cmp	r3, #32
 8010dca:	d94e      	bls.n	8010e6a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010dcc:	7ffb      	ldrb	r3, [r7, #31]
 8010dce:	2b2f      	cmp	r3, #47	; 0x2f
 8010dd0:	d006      	beq.n	8010de0 <create_name+0x54>
 8010dd2:	7ffb      	ldrb	r3, [r7, #31]
 8010dd4:	2b5c      	cmp	r3, #92	; 0x5c
 8010dd6:	d110      	bne.n	8010dfa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010dd8:	e002      	b.n	8010de0 <create_name+0x54>
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	3301      	adds	r3, #1
 8010dde:	617b      	str	r3, [r7, #20]
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	4413      	add	r3, r2
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	2b2f      	cmp	r3, #47	; 0x2f
 8010dea:	d0f6      	beq.n	8010dda <create_name+0x4e>
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	4413      	add	r3, r2
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	2b5c      	cmp	r3, #92	; 0x5c
 8010df6:	d0f0      	beq.n	8010dda <create_name+0x4e>
			break;
 8010df8:	e038      	b.n	8010e6c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010dfa:	7ffb      	ldrb	r3, [r7, #31]
 8010dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8010dfe:	d003      	beq.n	8010e08 <create_name+0x7c>
 8010e00:	693a      	ldr	r2, [r7, #16]
 8010e02:	69bb      	ldr	r3, [r7, #24]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d30c      	bcc.n	8010e22 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010e08:	69bb      	ldr	r3, [r7, #24]
 8010e0a:	2b0b      	cmp	r3, #11
 8010e0c:	d002      	beq.n	8010e14 <create_name+0x88>
 8010e0e:	7ffb      	ldrb	r3, [r7, #31]
 8010e10:	2b2e      	cmp	r3, #46	; 0x2e
 8010e12:	d001      	beq.n	8010e18 <create_name+0x8c>
 8010e14:	2306      	movs	r3, #6
 8010e16:	e044      	b.n	8010ea2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010e18:	2308      	movs	r3, #8
 8010e1a:	613b      	str	r3, [r7, #16]
 8010e1c:	230b      	movs	r3, #11
 8010e1e:	61bb      	str	r3, [r7, #24]
			continue;
 8010e20:	e022      	b.n	8010e68 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010e22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	da04      	bge.n	8010e34 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010e2a:	7ffb      	ldrb	r3, [r7, #31]
 8010e2c:	3b80      	subs	r3, #128	; 0x80
 8010e2e:	4a1f      	ldr	r2, [pc, #124]	; (8010eac <create_name+0x120>)
 8010e30:	5cd3      	ldrb	r3, [r2, r3]
 8010e32:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010e34:	7ffb      	ldrb	r3, [r7, #31]
 8010e36:	4619      	mov	r1, r3
 8010e38:	481d      	ldr	r0, [pc, #116]	; (8010eb0 <create_name+0x124>)
 8010e3a:	f7ff f815 	bl	800fe68 <chk_chr>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d001      	beq.n	8010e48 <create_name+0xbc>
 8010e44:	2306      	movs	r3, #6
 8010e46:	e02c      	b.n	8010ea2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010e48:	7ffb      	ldrb	r3, [r7, #31]
 8010e4a:	2b60      	cmp	r3, #96	; 0x60
 8010e4c:	d905      	bls.n	8010e5a <create_name+0xce>
 8010e4e:	7ffb      	ldrb	r3, [r7, #31]
 8010e50:	2b7a      	cmp	r3, #122	; 0x7a
 8010e52:	d802      	bhi.n	8010e5a <create_name+0xce>
 8010e54:	7ffb      	ldrb	r3, [r7, #31]
 8010e56:	3b20      	subs	r3, #32
 8010e58:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	1c5a      	adds	r2, r3, #1
 8010e5e:	613a      	str	r2, [r7, #16]
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	4413      	add	r3, r2
 8010e64:	7ffa      	ldrb	r2, [r7, #31]
 8010e66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010e68:	e7a6      	b.n	8010db8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010e6a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	441a      	add	r2, r3
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d101      	bne.n	8010e80 <create_name+0xf4>
 8010e7c:	2306      	movs	r3, #6
 8010e7e:	e010      	b.n	8010ea2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	2be5      	cmp	r3, #229	; 0xe5
 8010e86:	d102      	bne.n	8010e8e <create_name+0x102>
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	2205      	movs	r2, #5
 8010e8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010e8e:	7ffb      	ldrb	r3, [r7, #31]
 8010e90:	2b20      	cmp	r3, #32
 8010e92:	d801      	bhi.n	8010e98 <create_name+0x10c>
 8010e94:	2204      	movs	r2, #4
 8010e96:	e000      	b.n	8010e9a <create_name+0x10e>
 8010e98:	2200      	movs	r2, #0
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	330b      	adds	r3, #11
 8010e9e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010ea0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3720      	adds	r7, #32
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	08013924 	.word	0x08013924
 8010eb0:	08013858 	.word	0x08013858

08010eb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b086      	sub	sp, #24
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010ec8:	e002      	b.n	8010ed0 <follow_path+0x1c>
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	3301      	adds	r3, #1
 8010ece:	603b      	str	r3, [r7, #0]
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8010ed6:	d0f8      	beq.n	8010eca <follow_path+0x16>
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2b5c      	cmp	r3, #92	; 0x5c
 8010ede:	d0f4      	beq.n	8010eca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	2b1f      	cmp	r3, #31
 8010eec:	d80a      	bhi.n	8010f04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2280      	movs	r2, #128	; 0x80
 8010ef2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010ef6:	2100      	movs	r1, #0
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f7ff fcf9 	bl	80108f0 <dir_sdi>
 8010efe:	4603      	mov	r3, r0
 8010f00:	75fb      	strb	r3, [r7, #23]
 8010f02:	e043      	b.n	8010f8c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010f04:	463b      	mov	r3, r7
 8010f06:	4619      	mov	r1, r3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7ff ff3f 	bl	8010d8c <create_name>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010f12:	7dfb      	ldrb	r3, [r7, #23]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d134      	bne.n	8010f82 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f7ff feaf 	bl	8010c7c <dir_find>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010f28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010f2a:	7dfb      	ldrb	r3, [r7, #23]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00a      	beq.n	8010f46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010f30:	7dfb      	ldrb	r3, [r7, #23]
 8010f32:	2b04      	cmp	r3, #4
 8010f34:	d127      	bne.n	8010f86 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010f36:	7afb      	ldrb	r3, [r7, #11]
 8010f38:	f003 0304 	and.w	r3, r3, #4
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d122      	bne.n	8010f86 <follow_path+0xd2>
 8010f40:	2305      	movs	r3, #5
 8010f42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010f44:	e01f      	b.n	8010f86 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010f46:	7afb      	ldrb	r3, [r7, #11]
 8010f48:	f003 0304 	and.w	r3, r3, #4
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d11c      	bne.n	8010f8a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	799b      	ldrb	r3, [r3, #6]
 8010f54:	f003 0310 	and.w	r3, r3, #16
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d102      	bne.n	8010f62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010f5c:	2305      	movs	r3, #5
 8010f5e:	75fb      	strb	r3, [r7, #23]
 8010f60:	e014      	b.n	8010f8c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	695b      	ldr	r3, [r3, #20]
 8010f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f70:	4413      	add	r3, r2
 8010f72:	4619      	mov	r1, r3
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	f7ff fe42 	bl	8010bfe <ld_clust>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010f80:	e7c0      	b.n	8010f04 <follow_path+0x50>
			if (res != FR_OK) break;
 8010f82:	bf00      	nop
 8010f84:	e002      	b.n	8010f8c <follow_path+0xd8>
				break;
 8010f86:	bf00      	nop
 8010f88:	e000      	b.n	8010f8c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010f8a:	bf00      	nop
			}
		}
	}

	return res;
 8010f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3718      	adds	r7, #24
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}

08010f96 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010f96:	b480      	push	{r7}
 8010f98:	b087      	sub	sp, #28
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d031      	beq.n	8011010 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	617b      	str	r3, [r7, #20]
 8010fb2:	e002      	b.n	8010fba <get_ldnumber+0x24>
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	617b      	str	r3, [r7, #20]
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	2b20      	cmp	r3, #32
 8010fc0:	d903      	bls.n	8010fca <get_ldnumber+0x34>
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	2b3a      	cmp	r3, #58	; 0x3a
 8010fc8:	d1f4      	bne.n	8010fb4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	2b3a      	cmp	r3, #58	; 0x3a
 8010fd0:	d11c      	bne.n	801100c <get_ldnumber+0x76>
			tp = *path;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	1c5a      	adds	r2, r3, #1
 8010fdc:	60fa      	str	r2, [r7, #12]
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	3b30      	subs	r3, #48	; 0x30
 8010fe2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	2b09      	cmp	r3, #9
 8010fe8:	d80e      	bhi.n	8011008 <get_ldnumber+0x72>
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d10a      	bne.n	8011008 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d107      	bne.n	8011008 <get_ldnumber+0x72>
					vol = (int)i;
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	3301      	adds	r3, #1
 8011000:	617b      	str	r3, [r7, #20]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	e002      	b.n	8011012 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801100c:	2300      	movs	r3, #0
 801100e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011010:	693b      	ldr	r3, [r7, #16]
}
 8011012:	4618      	mov	r0, r3
 8011014:	371c      	adds	r7, #28
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr
	...

08011020 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	70da      	strb	r2, [r3, #3]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f04f 32ff 	mov.w	r2, #4294967295
 8011036:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011038:	6839      	ldr	r1, [r7, #0]
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7ff f8e0 	bl	8010200 <move_window>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d001      	beq.n	801104a <check_fs+0x2a>
 8011046:	2304      	movs	r3, #4
 8011048:	e038      	b.n	80110bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	3330      	adds	r3, #48	; 0x30
 801104e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011052:	4618      	mov	r0, r3
 8011054:	f7fe fe24 	bl	800fca0 <ld_word>
 8011058:	4603      	mov	r3, r0
 801105a:	461a      	mov	r2, r3
 801105c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011060:	429a      	cmp	r2, r3
 8011062:	d001      	beq.n	8011068 <check_fs+0x48>
 8011064:	2303      	movs	r3, #3
 8011066:	e029      	b.n	80110bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801106e:	2be9      	cmp	r3, #233	; 0xe9
 8011070:	d009      	beq.n	8011086 <check_fs+0x66>
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011078:	2beb      	cmp	r3, #235	; 0xeb
 801107a:	d11e      	bne.n	80110ba <check_fs+0x9a>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011082:	2b90      	cmp	r3, #144	; 0x90
 8011084:	d119      	bne.n	80110ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	3330      	adds	r3, #48	; 0x30
 801108a:	3336      	adds	r3, #54	; 0x36
 801108c:	4618      	mov	r0, r3
 801108e:	f7fe fe1f 	bl	800fcd0 <ld_dword>
 8011092:	4603      	mov	r3, r0
 8011094:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011098:	4a0a      	ldr	r2, [pc, #40]	; (80110c4 <check_fs+0xa4>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d101      	bne.n	80110a2 <check_fs+0x82>
 801109e:	2300      	movs	r3, #0
 80110a0:	e00c      	b.n	80110bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	3330      	adds	r3, #48	; 0x30
 80110a6:	3352      	adds	r3, #82	; 0x52
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7fe fe11 	bl	800fcd0 <ld_dword>
 80110ae:	4602      	mov	r2, r0
 80110b0:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <check_fs+0xa8>)
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d101      	bne.n	80110ba <check_fs+0x9a>
 80110b6:	2300      	movs	r3, #0
 80110b8:	e000      	b.n	80110bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80110ba:	2302      	movs	r3, #2
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	00544146 	.word	0x00544146
 80110c8:	33544146 	.word	0x33544146

080110cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b096      	sub	sp, #88	; 0x58
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	4613      	mov	r3, r2
 80110d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	2200      	movs	r2, #0
 80110de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f7ff ff58 	bl	8010f96 <get_ldnumber>
 80110e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80110e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	da01      	bge.n	80110f2 <find_volume+0x26>
 80110ee:	230b      	movs	r3, #11
 80110f0:	e22e      	b.n	8011550 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80110f2:	4aa8      	ldr	r2, [pc, #672]	; (8011394 <find_volume+0x2c8>)
 80110f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80110fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d101      	bne.n	8011106 <find_volume+0x3a>
 8011102:	230c      	movs	r3, #12
 8011104:	e224      	b.n	8011550 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801110a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801110c:	79fb      	ldrb	r3, [r7, #7]
 801110e:	f023 0301 	bic.w	r3, r3, #1
 8011112:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d01a      	beq.n	8011152 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801111c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111e:	785b      	ldrb	r3, [r3, #1]
 8011120:	4618      	mov	r0, r3
 8011122:	f7fe fd1f 	bl	800fb64 <disk_status>
 8011126:	4603      	mov	r3, r0
 8011128:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801112c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011130:	f003 0301 	and.w	r3, r3, #1
 8011134:	2b00      	cmp	r3, #0
 8011136:	d10c      	bne.n	8011152 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011138:	79fb      	ldrb	r3, [r7, #7]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d007      	beq.n	801114e <find_volume+0x82>
 801113e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011142:	f003 0304 	and.w	r3, r3, #4
 8011146:	2b00      	cmp	r3, #0
 8011148:	d001      	beq.n	801114e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801114a:	230a      	movs	r3, #10
 801114c:	e200      	b.n	8011550 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801114e:	2300      	movs	r3, #0
 8011150:	e1fe      	b.n	8011550 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011154:	2200      	movs	r2, #0
 8011156:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801115a:	b2da      	uxtb	r2, r3
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011162:	785b      	ldrb	r3, [r3, #1]
 8011164:	4618      	mov	r0, r3
 8011166:	f7fe fd17 	bl	800fb98 <disk_initialize>
 801116a:	4603      	mov	r3, r0
 801116c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011170:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011174:	f003 0301 	and.w	r3, r3, #1
 8011178:	2b00      	cmp	r3, #0
 801117a:	d001      	beq.n	8011180 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801117c:	2303      	movs	r3, #3
 801117e:	e1e7      	b.n	8011550 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011180:	79fb      	ldrb	r3, [r7, #7]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d007      	beq.n	8011196 <find_volume+0xca>
 8011186:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801118a:	f003 0304 	and.w	r3, r3, #4
 801118e:	2b00      	cmp	r3, #0
 8011190:	d001      	beq.n	8011196 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011192:	230a      	movs	r3, #10
 8011194:	e1dc      	b.n	8011550 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801119a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801119c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801119e:	f7ff ff3f 	bl	8011020 <check_fs>
 80111a2:	4603      	mov	r3, r0
 80111a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80111a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d14b      	bne.n	8011248 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80111b0:	2300      	movs	r3, #0
 80111b2:	643b      	str	r3, [r7, #64]	; 0x40
 80111b4:	e01f      	b.n	80111f6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80111b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80111bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111be:	011b      	lsls	r3, r3, #4
 80111c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80111c4:	4413      	add	r3, r2
 80111c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80111c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ca:	3304      	adds	r3, #4
 80111cc:	781b      	ldrb	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d006      	beq.n	80111e0 <find_volume+0x114>
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	3308      	adds	r3, #8
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fe fd7a 	bl	800fcd0 <ld_dword>
 80111dc:	4602      	mov	r2, r0
 80111de:	e000      	b.n	80111e2 <find_volume+0x116>
 80111e0:	2200      	movs	r2, #0
 80111e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80111ea:	440b      	add	r3, r1
 80111ec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80111f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111f2:	3301      	adds	r3, #1
 80111f4:	643b      	str	r3, [r7, #64]	; 0x40
 80111f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111f8:	2b03      	cmp	r3, #3
 80111fa:	d9dc      	bls.n	80111b6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80111fc:	2300      	movs	r3, #0
 80111fe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011202:	2b00      	cmp	r3, #0
 8011204:	d002      	beq.n	801120c <find_volume+0x140>
 8011206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011208:	3b01      	subs	r3, #1
 801120a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801120c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011214:	4413      	add	r3, r2
 8011216:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801121a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801121c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801121e:	2b00      	cmp	r3, #0
 8011220:	d005      	beq.n	801122e <find_volume+0x162>
 8011222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011226:	f7ff fefb 	bl	8011020 <check_fs>
 801122a:	4603      	mov	r3, r0
 801122c:	e000      	b.n	8011230 <find_volume+0x164>
 801122e:	2303      	movs	r3, #3
 8011230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011238:	2b01      	cmp	r3, #1
 801123a:	d905      	bls.n	8011248 <find_volume+0x17c>
 801123c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801123e:	3301      	adds	r3, #1
 8011240:	643b      	str	r3, [r7, #64]	; 0x40
 8011242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011244:	2b03      	cmp	r3, #3
 8011246:	d9e1      	bls.n	801120c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801124c:	2b04      	cmp	r3, #4
 801124e:	d101      	bne.n	8011254 <find_volume+0x188>
 8011250:	2301      	movs	r3, #1
 8011252:	e17d      	b.n	8011550 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011258:	2b01      	cmp	r3, #1
 801125a:	d901      	bls.n	8011260 <find_volume+0x194>
 801125c:	230d      	movs	r3, #13
 801125e:	e177      	b.n	8011550 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011262:	3330      	adds	r3, #48	; 0x30
 8011264:	330b      	adds	r3, #11
 8011266:	4618      	mov	r0, r3
 8011268:	f7fe fd1a 	bl	800fca0 <ld_word>
 801126c:	4603      	mov	r3, r0
 801126e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011272:	d001      	beq.n	8011278 <find_volume+0x1ac>
 8011274:	230d      	movs	r3, #13
 8011276:	e16b      	b.n	8011550 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127a:	3330      	adds	r3, #48	; 0x30
 801127c:	3316      	adds	r3, #22
 801127e:	4618      	mov	r0, r3
 8011280:	f7fe fd0e 	bl	800fca0 <ld_word>
 8011284:	4603      	mov	r3, r0
 8011286:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801128a:	2b00      	cmp	r3, #0
 801128c:	d106      	bne.n	801129c <find_volume+0x1d0>
 801128e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011290:	3330      	adds	r3, #48	; 0x30
 8011292:	3324      	adds	r3, #36	; 0x24
 8011294:	4618      	mov	r0, r3
 8011296:	f7fe fd1b 	bl	800fcd0 <ld_dword>
 801129a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112a0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80112a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80112a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80112ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ae:	789b      	ldrb	r3, [r3, #2]
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d005      	beq.n	80112c0 <find_volume+0x1f4>
 80112b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b6:	789b      	ldrb	r3, [r3, #2]
 80112b8:	2b02      	cmp	r3, #2
 80112ba:	d001      	beq.n	80112c0 <find_volume+0x1f4>
 80112bc:	230d      	movs	r3, #13
 80112be:	e147      	b.n	8011550 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80112c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c2:	789b      	ldrb	r3, [r3, #2]
 80112c4:	461a      	mov	r2, r3
 80112c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112c8:	fb02 f303 	mul.w	r3, r2, r3
 80112cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80112ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80112da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112dc:	895b      	ldrh	r3, [r3, #10]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d008      	beq.n	80112f4 <find_volume+0x228>
 80112e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e4:	895b      	ldrh	r3, [r3, #10]
 80112e6:	461a      	mov	r2, r3
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	895b      	ldrh	r3, [r3, #10]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	4013      	ands	r3, r2
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <find_volume+0x22c>
 80112f4:	230d      	movs	r3, #13
 80112f6:	e12b      	b.n	8011550 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80112f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fa:	3330      	adds	r3, #48	; 0x30
 80112fc:	3311      	adds	r3, #17
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fe fcce 	bl	800fca0 <ld_word>
 8011304:	4603      	mov	r3, r0
 8011306:	461a      	mov	r2, r3
 8011308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130e:	891b      	ldrh	r3, [r3, #8]
 8011310:	f003 030f 	and.w	r3, r3, #15
 8011314:	b29b      	uxth	r3, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	d001      	beq.n	801131e <find_volume+0x252>
 801131a:	230d      	movs	r3, #13
 801131c:	e118      	b.n	8011550 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011320:	3330      	adds	r3, #48	; 0x30
 8011322:	3313      	adds	r3, #19
 8011324:	4618      	mov	r0, r3
 8011326:	f7fe fcbb 	bl	800fca0 <ld_word>
 801132a:	4603      	mov	r3, r0
 801132c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801132e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011330:	2b00      	cmp	r3, #0
 8011332:	d106      	bne.n	8011342 <find_volume+0x276>
 8011334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011336:	3330      	adds	r3, #48	; 0x30
 8011338:	3320      	adds	r3, #32
 801133a:	4618      	mov	r0, r3
 801133c:	f7fe fcc8 	bl	800fcd0 <ld_dword>
 8011340:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011344:	3330      	adds	r3, #48	; 0x30
 8011346:	330e      	adds	r3, #14
 8011348:	4618      	mov	r0, r3
 801134a:	f7fe fca9 	bl	800fca0 <ld_word>
 801134e:	4603      	mov	r3, r0
 8011350:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011352:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011354:	2b00      	cmp	r3, #0
 8011356:	d101      	bne.n	801135c <find_volume+0x290>
 8011358:	230d      	movs	r3, #13
 801135a:	e0f9      	b.n	8011550 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801135c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801135e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011360:	4413      	add	r3, r2
 8011362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011364:	8912      	ldrh	r2, [r2, #8]
 8011366:	0912      	lsrs	r2, r2, #4
 8011368:	b292      	uxth	r2, r2
 801136a:	4413      	add	r3, r2
 801136c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801136e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011372:	429a      	cmp	r2, r3
 8011374:	d201      	bcs.n	801137a <find_volume+0x2ae>
 8011376:	230d      	movs	r3, #13
 8011378:	e0ea      	b.n	8011550 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801137a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137e:	1ad3      	subs	r3, r2, r3
 8011380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011382:	8952      	ldrh	r2, [r2, #10]
 8011384:	fbb3 f3f2 	udiv	r3, r3, r2
 8011388:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138c:	2b00      	cmp	r3, #0
 801138e:	d103      	bne.n	8011398 <find_volume+0x2cc>
 8011390:	230d      	movs	r3, #13
 8011392:	e0dd      	b.n	8011550 <find_volume+0x484>
 8011394:	240001f8 	.word	0x240001f8
		fmt = FS_FAT32;
 8011398:	2303      	movs	r3, #3
 801139a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d802      	bhi.n	80113ae <find_volume+0x2e2>
 80113a8:	2302      	movs	r3, #2
 80113aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80113ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d802      	bhi.n	80113be <find_volume+0x2f2>
 80113b8:	2301      	movs	r3, #1
 80113ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80113be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c0:	1c9a      	adds	r2, r3, #2
 80113c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80113c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113ca:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80113cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80113ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113d0:	441a      	add	r2, r3
 80113d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80113d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113da:	441a      	add	r2, r3
 80113dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113de:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80113e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113e4:	2b03      	cmp	r3, #3
 80113e6:	d11e      	bne.n	8011426 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80113e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ea:	3330      	adds	r3, #48	; 0x30
 80113ec:	332a      	adds	r3, #42	; 0x2a
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe fc56 	bl	800fca0 <ld_word>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d001      	beq.n	80113fe <find_volume+0x332>
 80113fa:	230d      	movs	r3, #13
 80113fc:	e0a8      	b.n	8011550 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80113fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011400:	891b      	ldrh	r3, [r3, #8]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d001      	beq.n	801140a <find_volume+0x33e>
 8011406:	230d      	movs	r3, #13
 8011408:	e0a2      	b.n	8011550 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801140a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140c:	3330      	adds	r3, #48	; 0x30
 801140e:	332c      	adds	r3, #44	; 0x2c
 8011410:	4618      	mov	r0, r3
 8011412:	f7fe fc5d 	bl	800fcd0 <ld_dword>
 8011416:	4602      	mov	r2, r0
 8011418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141e:	695b      	ldr	r3, [r3, #20]
 8011420:	009b      	lsls	r3, r3, #2
 8011422:	647b      	str	r3, [r7, #68]	; 0x44
 8011424:	e01f      	b.n	8011466 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011428:	891b      	ldrh	r3, [r3, #8]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d101      	bne.n	8011432 <find_volume+0x366>
 801142e:	230d      	movs	r3, #13
 8011430:	e08e      	b.n	8011550 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011434:	6a1a      	ldr	r2, [r3, #32]
 8011436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011438:	441a      	add	r2, r3
 801143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801143e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011442:	2b02      	cmp	r3, #2
 8011444:	d103      	bne.n	801144e <find_volume+0x382>
 8011446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011448:	695b      	ldr	r3, [r3, #20]
 801144a:	005b      	lsls	r3, r3, #1
 801144c:	e00a      	b.n	8011464 <find_volume+0x398>
 801144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011450:	695a      	ldr	r2, [r3, #20]
 8011452:	4613      	mov	r3, r2
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4413      	add	r3, r2
 8011458:	085a      	lsrs	r2, r3, #1
 801145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145c:	695b      	ldr	r3, [r3, #20]
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011464:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011468:	699a      	ldr	r2, [r3, #24]
 801146a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801146c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011470:	0a5b      	lsrs	r3, r3, #9
 8011472:	429a      	cmp	r2, r3
 8011474:	d201      	bcs.n	801147a <find_volume+0x3ae>
 8011476:	230d      	movs	r3, #13
 8011478:	e06a      	b.n	8011550 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147c:	f04f 32ff 	mov.w	r2, #4294967295
 8011480:	611a      	str	r2, [r3, #16]
 8011482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011484:	691a      	ldr	r2, [r3, #16]
 8011486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011488:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801148a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801148c:	2280      	movs	r2, #128	; 0x80
 801148e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011494:	2b03      	cmp	r3, #3
 8011496:	d149      	bne.n	801152c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149a:	3330      	adds	r3, #48	; 0x30
 801149c:	3330      	adds	r3, #48	; 0x30
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fe fbfe 	bl	800fca0 <ld_word>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d140      	bne.n	801152c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80114aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114ac:	3301      	adds	r3, #1
 80114ae:	4619      	mov	r1, r3
 80114b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80114b2:	f7fe fea5 	bl	8010200 <move_window>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d137      	bne.n	801152c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80114bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114be:	2200      	movs	r2, #0
 80114c0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80114c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c4:	3330      	adds	r3, #48	; 0x30
 80114c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fe fbe8 	bl	800fca0 <ld_word>
 80114d0:	4603      	mov	r3, r0
 80114d2:	461a      	mov	r2, r3
 80114d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80114d8:	429a      	cmp	r2, r3
 80114da:	d127      	bne.n	801152c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80114dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114de:	3330      	adds	r3, #48	; 0x30
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7fe fbf5 	bl	800fcd0 <ld_dword>
 80114e6:	4602      	mov	r2, r0
 80114e8:	4b1b      	ldr	r3, [pc, #108]	; (8011558 <find_volume+0x48c>)
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d11e      	bne.n	801152c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80114ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f0:	3330      	adds	r3, #48	; 0x30
 80114f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fe fbea 	bl	800fcd0 <ld_dword>
 80114fc:	4602      	mov	r2, r0
 80114fe:	4b17      	ldr	r3, [pc, #92]	; (801155c <find_volume+0x490>)
 8011500:	429a      	cmp	r2, r3
 8011502:	d113      	bne.n	801152c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011506:	3330      	adds	r3, #48	; 0x30
 8011508:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801150c:	4618      	mov	r0, r3
 801150e:	f7fe fbdf 	bl	800fcd0 <ld_dword>
 8011512:	4602      	mov	r2, r0
 8011514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011516:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151a:	3330      	adds	r3, #48	; 0x30
 801151c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011520:	4618      	mov	r0, r3
 8011522:	f7fe fbd5 	bl	800fcd0 <ld_dword>
 8011526:	4602      	mov	r2, r0
 8011528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011532:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011534:	4b0a      	ldr	r3, [pc, #40]	; (8011560 <find_volume+0x494>)
 8011536:	881b      	ldrh	r3, [r3, #0]
 8011538:	3301      	adds	r3, #1
 801153a:	b29a      	uxth	r2, r3
 801153c:	4b08      	ldr	r3, [pc, #32]	; (8011560 <find_volume+0x494>)
 801153e:	801a      	strh	r2, [r3, #0]
 8011540:	4b07      	ldr	r3, [pc, #28]	; (8011560 <find_volume+0x494>)
 8011542:	881a      	ldrh	r2, [r3, #0]
 8011544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011546:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011548:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801154a:	f7fe fdf1 	bl	8010130 <clear_lock>
#endif
	return FR_OK;
 801154e:	2300      	movs	r3, #0
}
 8011550:	4618      	mov	r0, r3
 8011552:	3758      	adds	r7, #88	; 0x58
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	41615252 	.word	0x41615252
 801155c:	61417272 	.word	0x61417272
 8011560:	240001fc 	.word	0x240001fc

08011564 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801156e:	2309      	movs	r3, #9
 8011570:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d01c      	beq.n	80115b2 <validate+0x4e>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d018      	beq.n	80115b2 <validate+0x4e>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d013      	beq.n	80115b2 <validate+0x4e>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	889a      	ldrh	r2, [r3, #4]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	88db      	ldrh	r3, [r3, #6]
 8011594:	429a      	cmp	r2, r3
 8011596:	d10c      	bne.n	80115b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	785b      	ldrb	r3, [r3, #1]
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fe fae0 	bl	800fb64 <disk_status>
 80115a4:	4603      	mov	r3, r0
 80115a6:	f003 0301 	and.w	r3, r3, #1
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d101      	bne.n	80115b2 <validate+0x4e>
			res = FR_OK;
 80115ae:	2300      	movs	r3, #0
 80115b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d102      	bne.n	80115be <validate+0x5a>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	e000      	b.n	80115c0 <validate+0x5c>
 80115be:	2300      	movs	r3, #0
 80115c0:	683a      	ldr	r2, [r7, #0]
 80115c2:	6013      	str	r3, [r2, #0]
	return res;
 80115c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
	...

080115d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b088      	sub	sp, #32
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	4613      	mov	r3, r2
 80115dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80115e2:	f107 0310 	add.w	r3, r7, #16
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff fcd5 	bl	8010f96 <get_ldnumber>
 80115ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80115ee:	69fb      	ldr	r3, [r7, #28]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	da01      	bge.n	80115f8 <f_mount+0x28>
 80115f4:	230b      	movs	r3, #11
 80115f6:	e02b      	b.n	8011650 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80115f8:	4a17      	ldr	r2, [pc, #92]	; (8011658 <f_mount+0x88>)
 80115fa:	69fb      	ldr	r3, [r7, #28]
 80115fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011600:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d005      	beq.n	8011614 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011608:	69b8      	ldr	r0, [r7, #24]
 801160a:	f7fe fd91 	bl	8010130 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	2200      	movs	r2, #0
 8011612:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d002      	beq.n	8011620 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2200      	movs	r2, #0
 801161e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011620:	68fa      	ldr	r2, [r7, #12]
 8011622:	490d      	ldr	r1, [pc, #52]	; (8011658 <f_mount+0x88>)
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <f_mount+0x66>
 8011630:	79fb      	ldrb	r3, [r7, #7]
 8011632:	2b01      	cmp	r3, #1
 8011634:	d001      	beq.n	801163a <f_mount+0x6a>
 8011636:	2300      	movs	r3, #0
 8011638:	e00a      	b.n	8011650 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801163a:	f107 010c 	add.w	r1, r7, #12
 801163e:	f107 0308 	add.w	r3, r7, #8
 8011642:	2200      	movs	r2, #0
 8011644:	4618      	mov	r0, r3
 8011646:	f7ff fd41 	bl	80110cc <find_volume>
 801164a:	4603      	mov	r3, r0
 801164c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801164e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011650:	4618      	mov	r0, r3
 8011652:	3720      	adds	r7, #32
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}
 8011658:	240001f8 	.word	0x240001f8

0801165c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b098      	sub	sp, #96	; 0x60
 8011660:	af00      	add	r7, sp, #0
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	4613      	mov	r3, r2
 8011668:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d101      	bne.n	8011674 <f_open+0x18>
 8011670:	2309      	movs	r3, #9
 8011672:	e1ad      	b.n	80119d0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011674:	79fb      	ldrb	r3, [r7, #7]
 8011676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801167a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801167c:	79fa      	ldrb	r2, [r7, #7]
 801167e:	f107 0110 	add.w	r1, r7, #16
 8011682:	f107 0308 	add.w	r3, r7, #8
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff fd20 	bl	80110cc <find_volume>
 801168c:	4603      	mov	r3, r0
 801168e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8011692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011696:	2b00      	cmp	r3, #0
 8011698:	f040 8191 	bne.w	80119be <f_open+0x362>
		dj.obj.fs = fs;
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	f107 0314 	add.w	r3, r7, #20
 80116a6:	4611      	mov	r1, r2
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7ff fc03 	bl	8010eb4 <follow_path>
 80116ae:	4603      	mov	r3, r0
 80116b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80116b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d11a      	bne.n	80116f2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80116bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116c0:	b25b      	sxtb	r3, r3
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	da03      	bge.n	80116ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80116c6:	2306      	movs	r3, #6
 80116c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80116cc:	e011      	b.n	80116f2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80116ce:	79fb      	ldrb	r3, [r7, #7]
 80116d0:	f023 0301 	bic.w	r3, r3, #1
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	bf14      	ite	ne
 80116d8:	2301      	movne	r3, #1
 80116da:	2300      	moveq	r3, #0
 80116dc:	b2db      	uxtb	r3, r3
 80116de:	461a      	mov	r2, r3
 80116e0:	f107 0314 	add.w	r3, r7, #20
 80116e4:	4611      	mov	r1, r2
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fe fbda 	bl	800fea0 <chk_lock>
 80116ec:	4603      	mov	r3, r0
 80116ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80116f2:	79fb      	ldrb	r3, [r7, #7]
 80116f4:	f003 031c 	and.w	r3, r3, #28
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d07f      	beq.n	80117fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80116fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011700:	2b00      	cmp	r3, #0
 8011702:	d017      	beq.n	8011734 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011708:	2b04      	cmp	r3, #4
 801170a:	d10e      	bne.n	801172a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801170c:	f7fe fc24 	bl	800ff58 <enq_lock>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d006      	beq.n	8011724 <f_open+0xc8>
 8011716:	f107 0314 	add.w	r3, r7, #20
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff fb03 	bl	8010d26 <dir_register>
 8011720:	4603      	mov	r3, r0
 8011722:	e000      	b.n	8011726 <f_open+0xca>
 8011724:	2312      	movs	r3, #18
 8011726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801172a:	79fb      	ldrb	r3, [r7, #7]
 801172c:	f043 0308 	orr.w	r3, r3, #8
 8011730:	71fb      	strb	r3, [r7, #7]
 8011732:	e010      	b.n	8011756 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011734:	7ebb      	ldrb	r3, [r7, #26]
 8011736:	f003 0311 	and.w	r3, r3, #17
 801173a:	2b00      	cmp	r3, #0
 801173c:	d003      	beq.n	8011746 <f_open+0xea>
					res = FR_DENIED;
 801173e:	2307      	movs	r3, #7
 8011740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011744:	e007      	b.n	8011756 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011746:	79fb      	ldrb	r3, [r7, #7]
 8011748:	f003 0304 	and.w	r3, r3, #4
 801174c:	2b00      	cmp	r3, #0
 801174e:	d002      	beq.n	8011756 <f_open+0xfa>
 8011750:	2308      	movs	r3, #8
 8011752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801175a:	2b00      	cmp	r3, #0
 801175c:	d168      	bne.n	8011830 <f_open+0x1d4>
 801175e:	79fb      	ldrb	r3, [r7, #7]
 8011760:	f003 0308 	and.w	r3, r3, #8
 8011764:	2b00      	cmp	r3, #0
 8011766:	d063      	beq.n	8011830 <f_open+0x1d4>
				dw = GET_FATTIME();
 8011768:	f7fb fafa 	bl	800cd60 <get_fattime>
 801176c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011770:	330e      	adds	r3, #14
 8011772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011774:	4618      	mov	r0, r3
 8011776:	f7fe fae9 	bl	800fd4c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177c:	3316      	adds	r3, #22
 801177e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011780:	4618      	mov	r0, r3
 8011782:	f7fe fae3 	bl	800fd4c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011788:	330b      	adds	r3, #11
 801178a:	2220      	movs	r2, #32
 801178c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011792:	4611      	mov	r1, r2
 8011794:	4618      	mov	r0, r3
 8011796:	f7ff fa32 	bl	8010bfe <ld_clust>
 801179a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80117a0:	2200      	movs	r2, #0
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7ff fa4a 	bl	8010c3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80117a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117aa:	331c      	adds	r3, #28
 80117ac:	2100      	movs	r1, #0
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fe facc 	bl	800fd4c <st_dword>
					fs->wflag = 1;
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	2201      	movs	r2, #1
 80117b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80117ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d037      	beq.n	8011830 <f_open+0x1d4>
						dw = fs->winsect;
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80117c6:	f107 0314 	add.w	r3, r7, #20
 80117ca:	2200      	movs	r2, #0
 80117cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7fe ff5d 	bl	801068e <remove_chain>
 80117d4:	4603      	mov	r3, r0
 80117d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80117da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d126      	bne.n	8011830 <f_open+0x1d4>
							res = move_window(fs, dw);
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe fd0a 	bl	8010200 <move_window>
 80117ec:	4603      	mov	r3, r0
 80117ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80117f6:	3a01      	subs	r2, #1
 80117f8:	60da      	str	r2, [r3, #12]
 80117fa:	e019      	b.n	8011830 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80117fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011800:	2b00      	cmp	r3, #0
 8011802:	d115      	bne.n	8011830 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011804:	7ebb      	ldrb	r3, [r7, #26]
 8011806:	f003 0310 	and.w	r3, r3, #16
 801180a:	2b00      	cmp	r3, #0
 801180c:	d003      	beq.n	8011816 <f_open+0x1ba>
					res = FR_NO_FILE;
 801180e:	2304      	movs	r3, #4
 8011810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011814:	e00c      	b.n	8011830 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011816:	79fb      	ldrb	r3, [r7, #7]
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	2b00      	cmp	r3, #0
 801181e:	d007      	beq.n	8011830 <f_open+0x1d4>
 8011820:	7ebb      	ldrb	r3, [r7, #26]
 8011822:	f003 0301 	and.w	r3, r3, #1
 8011826:	2b00      	cmp	r3, #0
 8011828:	d002      	beq.n	8011830 <f_open+0x1d4>
						res = FR_DENIED;
 801182a:	2307      	movs	r3, #7
 801182c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011834:	2b00      	cmp	r3, #0
 8011836:	d128      	bne.n	801188a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011838:	79fb      	ldrb	r3, [r7, #7]
 801183a:	f003 0308 	and.w	r3, r3, #8
 801183e:	2b00      	cmp	r3, #0
 8011840:	d003      	beq.n	801184a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011842:	79fb      	ldrb	r3, [r7, #7]
 8011844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011848:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011858:	79fb      	ldrb	r3, [r7, #7]
 801185a:	f023 0301 	bic.w	r3, r3, #1
 801185e:	2b00      	cmp	r3, #0
 8011860:	bf14      	ite	ne
 8011862:	2301      	movne	r3, #1
 8011864:	2300      	moveq	r3, #0
 8011866:	b2db      	uxtb	r3, r3
 8011868:	461a      	mov	r2, r3
 801186a:	f107 0314 	add.w	r3, r7, #20
 801186e:	4611      	mov	r1, r2
 8011870:	4618      	mov	r0, r3
 8011872:	f7fe fb93 	bl	800ff9c <inc_lock>
 8011876:	4602      	mov	r2, r0
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	691b      	ldr	r3, [r3, #16]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d102      	bne.n	801188a <f_open+0x22e>
 8011884:	2302      	movs	r3, #2
 8011886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801188a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801188e:	2b00      	cmp	r3, #0
 8011890:	f040 8095 	bne.w	80119be <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011898:	4611      	mov	r1, r2
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff f9af 	bl	8010bfe <ld_clust>
 80118a0:	4602      	mov	r2, r0
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80118a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a8:	331c      	adds	r3, #28
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fe fa10 	bl	800fcd0 <ld_dword>
 80118b0:	4602      	mov	r2, r0
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	2200      	movs	r2, #0
 80118ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80118bc:	693a      	ldr	r2, [r7, #16]
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	88da      	ldrh	r2, [r3, #6]
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	79fa      	ldrb	r2, [r7, #7]
 80118ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	2200      	movs	r2, #0
 80118d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2200      	movs	r2, #0
 80118da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2200      	movs	r2, #0
 80118e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	3330      	adds	r3, #48	; 0x30
 80118e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118ea:	2100      	movs	r1, #0
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fe fa7a 	bl	800fde6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80118f2:	79fb      	ldrb	r3, [r7, #7]
 80118f4:	f003 0320 	and.w	r3, r3, #32
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d060      	beq.n	80119be <f_open+0x362>
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	68db      	ldr	r3, [r3, #12]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d05c      	beq.n	80119be <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	68da      	ldr	r2, [r3, #12]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	895b      	ldrh	r3, [r3, #10]
 8011910:	025b      	lsls	r3, r3, #9
 8011912:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	689b      	ldr	r3, [r3, #8]
 8011918:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	657b      	str	r3, [r7, #84]	; 0x54
 8011920:	e016      	b.n	8011950 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011926:	4618      	mov	r0, r3
 8011928:	f7fe fd25 	bl	8010376 <get_fat>
 801192c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801192e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011930:	2b01      	cmp	r3, #1
 8011932:	d802      	bhi.n	801193a <f_open+0x2de>
 8011934:	2302      	movs	r3, #2
 8011936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801193a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011940:	d102      	bne.n	8011948 <f_open+0x2ec>
 8011942:	2301      	movs	r3, #1
 8011944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801194a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801194c:	1ad3      	subs	r3, r2, r3
 801194e:	657b      	str	r3, [r7, #84]	; 0x54
 8011950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011954:	2b00      	cmp	r3, #0
 8011956:	d103      	bne.n	8011960 <f_open+0x304>
 8011958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801195a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801195c:	429a      	cmp	r2, r3
 801195e:	d8e0      	bhi.n	8011922 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011964:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801196a:	2b00      	cmp	r3, #0
 801196c:	d127      	bne.n	80119be <f_open+0x362>
 801196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011974:	2b00      	cmp	r3, #0
 8011976:	d022      	beq.n	80119be <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801197c:	4618      	mov	r0, r3
 801197e:	f7fe fcdb 	bl	8010338 <clust2sect>
 8011982:	6478      	str	r0, [r7, #68]	; 0x44
 8011984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011986:	2b00      	cmp	r3, #0
 8011988:	d103      	bne.n	8011992 <f_open+0x336>
						res = FR_INT_ERR;
 801198a:	2302      	movs	r3, #2
 801198c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011990:	e015      	b.n	80119be <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011994:	0a5a      	lsrs	r2, r3, #9
 8011996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011998:	441a      	add	r2, r3
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	7858      	ldrb	r0, [r3, #1]
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6a1a      	ldr	r2, [r3, #32]
 80119ac:	2301      	movs	r3, #1
 80119ae:	f7fe f919 	bl	800fbe4 <disk_read>
 80119b2:	4603      	mov	r3, r0
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d002      	beq.n	80119be <f_open+0x362>
 80119b8:	2301      	movs	r3, #1
 80119ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80119be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d002      	beq.n	80119cc <f_open+0x370>
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2200      	movs	r2, #0
 80119ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80119cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3760      	adds	r7, #96	; 0x60
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b08c      	sub	sp, #48	; 0x30
 80119dc:	af00      	add	r7, sp, #0
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	607a      	str	r2, [r7, #4]
 80119e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	2200      	movs	r2, #0
 80119ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f107 0210 	add.w	r2, r7, #16
 80119f6:	4611      	mov	r1, r2
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7ff fdb3 	bl	8011564 <validate>
 80119fe:	4603      	mov	r3, r0
 8011a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011a04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d107      	bne.n	8011a1c <f_write+0x44>
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	7d5b      	ldrb	r3, [r3, #21]
 8011a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011a14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d002      	beq.n	8011a22 <f_write+0x4a>
 8011a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a20:	e14b      	b.n	8011cba <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	7d1b      	ldrb	r3, [r3, #20]
 8011a26:	f003 0302 	and.w	r3, r3, #2
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <f_write+0x5a>
 8011a2e:	2307      	movs	r3, #7
 8011a30:	e143      	b.n	8011cba <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	699a      	ldr	r2, [r3, #24]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	441a      	add	r2, r3
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	699b      	ldr	r3, [r3, #24]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	f080 812d 	bcs.w	8011c9e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	699b      	ldr	r3, [r3, #24]
 8011a48:	43db      	mvns	r3, r3
 8011a4a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011a4c:	e127      	b.n	8011c9e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	699b      	ldr	r3, [r3, #24]
 8011a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	f040 80e3 	bne.w	8011c22 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	699b      	ldr	r3, [r3, #24]
 8011a60:	0a5b      	lsrs	r3, r3, #9
 8011a62:	693a      	ldr	r2, [r7, #16]
 8011a64:	8952      	ldrh	r2, [r2, #10]
 8011a66:	3a01      	subs	r2, #1
 8011a68:	4013      	ands	r3, r2
 8011a6a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d143      	bne.n	8011afa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	699b      	ldr	r3, [r3, #24]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d10c      	bne.n	8011a94 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d11a      	bne.n	8011abc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2100      	movs	r1, #0
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fe fe64 	bl	8010758 <create_chain>
 8011a90:	62b8      	str	r0, [r7, #40]	; 0x28
 8011a92:	e013      	b.n	8011abc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d007      	beq.n	8011aac <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	699b      	ldr	r3, [r3, #24]
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	68f8      	ldr	r0, [r7, #12]
 8011aa4:	f7fe fef0 	bl	8010888 <clmt_clust>
 8011aa8:	62b8      	str	r0, [r7, #40]	; 0x28
 8011aaa:	e007      	b.n	8011abc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011aac:	68fa      	ldr	r2, [r7, #12]
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	69db      	ldr	r3, [r3, #28]
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	4610      	mov	r0, r2
 8011ab6:	f7fe fe4f 	bl	8010758 <create_chain>
 8011aba:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	f000 80f2 	beq.w	8011ca8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac6:	2b01      	cmp	r3, #1
 8011ac8:	d104      	bne.n	8011ad4 <f_write+0xfc>
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2202      	movs	r2, #2
 8011ace:	755a      	strb	r2, [r3, #21]
 8011ad0:	2302      	movs	r3, #2
 8011ad2:	e0f2      	b.n	8011cba <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ada:	d104      	bne.n	8011ae6 <f_write+0x10e>
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	755a      	strb	r2, [r3, #21]
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	e0e9      	b.n	8011cba <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011aea:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	689b      	ldr	r3, [r3, #8]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d102      	bne.n	8011afa <f_write+0x122>
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011af8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	7d1b      	ldrb	r3, [r3, #20]
 8011afe:	b25b      	sxtb	r3, r3
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	da18      	bge.n	8011b36 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	7858      	ldrb	r0, [r3, #1]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	6a1a      	ldr	r2, [r3, #32]
 8011b12:	2301      	movs	r3, #1
 8011b14:	f7fe f886 	bl	800fc24 <disk_write>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d004      	beq.n	8011b28 <f_write+0x150>
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2201      	movs	r2, #1
 8011b22:	755a      	strb	r2, [r3, #21]
 8011b24:	2301      	movs	r3, #1
 8011b26:	e0c8      	b.n	8011cba <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	7d1b      	ldrb	r3, [r3, #20]
 8011b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b30:	b2da      	uxtb	r2, r3
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011b36:	693a      	ldr	r2, [r7, #16]
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	69db      	ldr	r3, [r3, #28]
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	4610      	mov	r0, r2
 8011b40:	f7fe fbfa 	bl	8010338 <clust2sect>
 8011b44:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d104      	bne.n	8011b56 <f_write+0x17e>
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	2202      	movs	r2, #2
 8011b50:	755a      	strb	r2, [r3, #21]
 8011b52:	2302      	movs	r3, #2
 8011b54:	e0b1      	b.n	8011cba <f_write+0x2e2>
			sect += csect;
 8011b56:	697a      	ldr	r2, [r7, #20]
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	4413      	add	r3, r2
 8011b5c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	0a5b      	lsrs	r3, r3, #9
 8011b62:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011b64:	6a3b      	ldr	r3, [r7, #32]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d03c      	beq.n	8011be4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011b6a:	69ba      	ldr	r2, [r7, #24]
 8011b6c:	6a3b      	ldr	r3, [r7, #32]
 8011b6e:	4413      	add	r3, r2
 8011b70:	693a      	ldr	r2, [r7, #16]
 8011b72:	8952      	ldrh	r2, [r2, #10]
 8011b74:	4293      	cmp	r3, r2
 8011b76:	d905      	bls.n	8011b84 <f_write+0x1ac>
					cc = fs->csize - csect;
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	895b      	ldrh	r3, [r3, #10]
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	69bb      	ldr	r3, [r7, #24]
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	7858      	ldrb	r0, [r3, #1]
 8011b88:	6a3b      	ldr	r3, [r7, #32]
 8011b8a:	697a      	ldr	r2, [r7, #20]
 8011b8c:	69f9      	ldr	r1, [r7, #28]
 8011b8e:	f7fe f849 	bl	800fc24 <disk_write>
 8011b92:	4603      	mov	r3, r0
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d004      	beq.n	8011ba2 <f_write+0x1ca>
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	755a      	strb	r2, [r3, #21]
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	e08b      	b.n	8011cba <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	6a1a      	ldr	r2, [r3, #32]
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	6a3a      	ldr	r2, [r7, #32]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d915      	bls.n	8011bdc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	6a1a      	ldr	r2, [r3, #32]
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	1ad3      	subs	r3, r2, r3
 8011bbe:	025b      	lsls	r3, r3, #9
 8011bc0:	69fa      	ldr	r2, [r7, #28]
 8011bc2:	4413      	add	r3, r2
 8011bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bc8:	4619      	mov	r1, r3
 8011bca:	f7fe f8eb 	bl	800fda4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	7d1b      	ldrb	r3, [r3, #20]
 8011bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bd6:	b2da      	uxtb	r2, r3
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011bdc:	6a3b      	ldr	r3, [r7, #32]
 8011bde:	025b      	lsls	r3, r3, #9
 8011be0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011be2:	e03f      	b.n	8011c64 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	6a1b      	ldr	r3, [r3, #32]
 8011be8:	697a      	ldr	r2, [r7, #20]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d016      	beq.n	8011c1c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	699a      	ldr	r2, [r3, #24]
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d210      	bcs.n	8011c1c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	7858      	ldrb	r0, [r3, #1]
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c04:	2301      	movs	r3, #1
 8011c06:	697a      	ldr	r2, [r7, #20]
 8011c08:	f7fd ffec 	bl	800fbe4 <disk_read>
 8011c0c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d004      	beq.n	8011c1c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2201      	movs	r2, #1
 8011c16:	755a      	strb	r2, [r3, #21]
 8011c18:	2301      	movs	r3, #1
 8011c1a:	e04e      	b.n	8011cba <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	697a      	ldr	r2, [r7, #20]
 8011c20:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	699b      	ldr	r3, [r3, #24]
 8011c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c2a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011c2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d901      	bls.n	8011c3c <f_write+0x264>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	699b      	ldr	r3, [r3, #24]
 8011c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c4a:	4413      	add	r3, r2
 8011c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c4e:	69f9      	ldr	r1, [r7, #28]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fe f8a7 	bl	800fda4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	7d1b      	ldrb	r3, [r3, #20]
 8011c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c5e:	b2da      	uxtb	r2, r3
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011c64:	69fa      	ldr	r2, [r7, #28]
 8011c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c68:	4413      	add	r3, r2
 8011c6a:	61fb      	str	r3, [r7, #28]
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	699a      	ldr	r2, [r3, #24]
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	441a      	add	r2, r3
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	619a      	str	r2, [r3, #24]
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	68da      	ldr	r2, [r3, #12]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	699b      	ldr	r3, [r3, #24]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	bf38      	it	cc
 8011c84:	461a      	movcc	r2, r3
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	60da      	str	r2, [r3, #12]
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c90:	441a      	add	r2, r3
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	601a      	str	r2, [r3, #0]
 8011c96:	687a      	ldr	r2, [r7, #4]
 8011c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9a:	1ad3      	subs	r3, r2, r3
 8011c9c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f47f aed4 	bne.w	8011a4e <f_write+0x76>
 8011ca6:	e000      	b.n	8011caa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ca8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
 8011cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cb2:	b2da      	uxtb	r2, r3
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011cb8:	2300      	movs	r3, #0
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3730      	adds	r7, #48	; 0x30
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}

08011cc2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011cc2:	b580      	push	{r7, lr}
 8011cc4:	b086      	sub	sp, #24
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f107 0208 	add.w	r2, r7, #8
 8011cd0:	4611      	mov	r1, r2
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7ff fc46 	bl	8011564 <validate>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011cdc:	7dfb      	ldrb	r3, [r7, #23]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d168      	bne.n	8011db4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	7d1b      	ldrb	r3, [r3, #20]
 8011ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d062      	beq.n	8011db4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	7d1b      	ldrb	r3, [r3, #20]
 8011cf2:	b25b      	sxtb	r3, r3
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	da15      	bge.n	8011d24 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	7858      	ldrb	r0, [r3, #1]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6a1a      	ldr	r2, [r3, #32]
 8011d06:	2301      	movs	r3, #1
 8011d08:	f7fd ff8c 	bl	800fc24 <disk_write>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <f_sync+0x54>
 8011d12:	2301      	movs	r3, #1
 8011d14:	e04f      	b.n	8011db6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	7d1b      	ldrb	r3, [r3, #20]
 8011d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d1e:	b2da      	uxtb	r2, r3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011d24:	f7fb f81c 	bl	800cd60 <get_fattime>
 8011d28:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011d2a:	68ba      	ldr	r2, [r7, #8]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d30:	4619      	mov	r1, r3
 8011d32:	4610      	mov	r0, r2
 8011d34:	f7fe fa64 	bl	8010200 <move_window>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011d3c:	7dfb      	ldrb	r3, [r7, #23]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d138      	bne.n	8011db4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d46:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	330b      	adds	r3, #11
 8011d4c:	781a      	ldrb	r2, [r3, #0]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	330b      	adds	r3, #11
 8011d52:	f042 0220 	orr.w	r2, r2, #32
 8011d56:	b2d2      	uxtb	r2, r2
 8011d58:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6818      	ldr	r0, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	689b      	ldr	r3, [r3, #8]
 8011d62:	461a      	mov	r2, r3
 8011d64:	68f9      	ldr	r1, [r7, #12]
 8011d66:	f7fe ff69 	bl	8010c3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f103 021c 	add.w	r2, r3, #28
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	4619      	mov	r1, r3
 8011d76:	4610      	mov	r0, r2
 8011d78:	f7fd ffe8 	bl	800fd4c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	3316      	adds	r3, #22
 8011d80:	6939      	ldr	r1, [r7, #16]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fd ffe2 	bl	800fd4c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	3312      	adds	r3, #18
 8011d8c:	2100      	movs	r1, #0
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7fd ffc1 	bl	800fd16 <st_word>
					fs->wflag = 1;
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	2201      	movs	r2, #1
 8011d98:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fe fa5d 	bl	801025c <sync_fs>
 8011da2:	4603      	mov	r3, r0
 8011da4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	7d1b      	ldrb	r3, [r3, #20]
 8011daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dae:	b2da      	uxtb	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3718      	adds	r7, #24
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011dbe:	b580      	push	{r7, lr}
 8011dc0:	b084      	sub	sp, #16
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f7ff ff7b 	bl	8011cc2 <f_sync>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011dd0:	7bfb      	ldrb	r3, [r7, #15]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d118      	bne.n	8011e08 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f107 0208 	add.w	r2, r7, #8
 8011ddc:	4611      	mov	r1, r2
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7ff fbc0 	bl	8011564 <validate>
 8011de4:	4603      	mov	r3, r0
 8011de6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011de8:	7bfb      	ldrb	r3, [r7, #15]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d10c      	bne.n	8011e08 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fe f960 	bl	80100b8 <dec_lock>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011dfc:	7bfb      	ldrb	r3, [r7, #15]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d102      	bne.n	8011e08 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2200      	movs	r2, #0
 8011e06:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
	...

08011e14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b087      	sub	sp, #28
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	4613      	mov	r3, r2
 8011e20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011e22:	2301      	movs	r3, #1
 8011e24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011e2a:	4b1f      	ldr	r3, [pc, #124]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e2c:	7a5b      	ldrb	r3, [r3, #9]
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d131      	bne.n	8011e98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011e34:	4b1c      	ldr	r3, [pc, #112]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e36:	7a5b      	ldrb	r3, [r3, #9]
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	4b1a      	ldr	r3, [pc, #104]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e3e:	2100      	movs	r1, #0
 8011e40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011e42:	4b19      	ldr	r3, [pc, #100]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e44:	7a5b      	ldrb	r3, [r3, #9]
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	4a17      	ldr	r2, [pc, #92]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	4413      	add	r3, r2
 8011e4e:	68fa      	ldr	r2, [r7, #12]
 8011e50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011e52:	4b15      	ldr	r3, [pc, #84]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e54:	7a5b      	ldrb	r3, [r3, #9]
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	461a      	mov	r2, r3
 8011e5a:	4b13      	ldr	r3, [pc, #76]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e5c:	4413      	add	r3, r2
 8011e5e:	79fa      	ldrb	r2, [r7, #7]
 8011e60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011e62:	4b11      	ldr	r3, [pc, #68]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e64:	7a5b      	ldrb	r3, [r3, #9]
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	1c5a      	adds	r2, r3, #1
 8011e6a:	b2d1      	uxtb	r1, r2
 8011e6c:	4a0e      	ldr	r2, [pc, #56]	; (8011ea8 <FATFS_LinkDriverEx+0x94>)
 8011e6e:	7251      	strb	r1, [r2, #9]
 8011e70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011e72:	7dbb      	ldrb	r3, [r7, #22]
 8011e74:	3330      	adds	r3, #48	; 0x30
 8011e76:	b2da      	uxtb	r2, r3
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	3301      	adds	r3, #1
 8011e80:	223a      	movs	r2, #58	; 0x3a
 8011e82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	3302      	adds	r3, #2
 8011e88:	222f      	movs	r2, #47	; 0x2f
 8011e8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	3303      	adds	r3, #3
 8011e90:	2200      	movs	r2, #0
 8011e92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	371c      	adds	r7, #28
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop
 8011ea8:	24000220 	.word	0x24000220

08011eac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	6839      	ldr	r1, [r7, #0]
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7ff ffaa 	bl	8011e14 <FATFS_LinkDriverEx>
 8011ec0:	4603      	mov	r3, r0
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3708      	adds	r7, #8
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
	...

08011ecc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	4913      	ldr	r1, [pc, #76]	; (8011f20 <MX_USB_DEVICE_Init+0x54>)
 8011ed4:	4813      	ldr	r0, [pc, #76]	; (8011f24 <MX_USB_DEVICE_Init+0x58>)
 8011ed6:	f7fc fd5e 	bl	800e996 <USBD_Init>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d001      	beq.n	8011ee4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011ee0:	f7ef f894 	bl	800100c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8011ee4:	4910      	ldr	r1, [pc, #64]	; (8011f28 <MX_USB_DEVICE_Init+0x5c>)
 8011ee6:	480f      	ldr	r0, [pc, #60]	; (8011f24 <MX_USB_DEVICE_Init+0x58>)
 8011ee8:	f7fc fd8b 	bl	800ea02 <USBD_RegisterClass>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d001      	beq.n	8011ef6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011ef2:	f7ef f88b 	bl	800100c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8011ef6:	490d      	ldr	r1, [pc, #52]	; (8011f2c <MX_USB_DEVICE_Init+0x60>)
 8011ef8:	480a      	ldr	r0, [pc, #40]	; (8011f24 <MX_USB_DEVICE_Init+0x58>)
 8011efa:	f7fb fa87 	bl	800d40c <USBD_MSC_RegisterStorage>
 8011efe:	4603      	mov	r3, r0
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011f04:	f7ef f882 	bl	800100c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011f08:	4806      	ldr	r0, [pc, #24]	; (8011f24 <MX_USB_DEVICE_Init+0x58>)
 8011f0a:	f7fc fd9b 	bl	800ea44 <USBD_Start>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d001      	beq.n	8011f18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011f14:	f7ef f87a 	bl	800100c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011f18:	f7f3 fa48 	bl	80053ac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011f1c:	bf00      	nop
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	240000f8 	.word	0x240000f8
 8011f24:	24000edc 	.word	0x24000edc
 8011f28:	24000010 	.word	0x24000010
 8011f2c:	24000148 	.word	0x24000148

08011f30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	4603      	mov	r3, r0
 8011f38:	6039      	str	r1, [r7, #0]
 8011f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2212      	movs	r2, #18
 8011f40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011f42:	4b03      	ldr	r3, [pc, #12]	; (8011f50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	370c      	adds	r7, #12
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr
 8011f50:	24000114 	.word	0x24000114

08011f54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	6039      	str	r1, [r7, #0]
 8011f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	2204      	movs	r2, #4
 8011f64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011f66:	4b03      	ldr	r3, [pc, #12]	; (8011f74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	370c      	adds	r7, #12
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr
 8011f74:	24000128 	.word	0x24000128

08011f78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	4603      	mov	r3, r0
 8011f80:	6039      	str	r1, [r7, #0]
 8011f82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011f84:	79fb      	ldrb	r3, [r7, #7]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d105      	bne.n	8011f96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011f8a:	683a      	ldr	r2, [r7, #0]
 8011f8c:	4907      	ldr	r1, [pc, #28]	; (8011fac <USBD_FS_ProductStrDescriptor+0x34>)
 8011f8e:	4808      	ldr	r0, [pc, #32]	; (8011fb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011f90:	f7fd fd25 	bl	800f9de <USBD_GetString>
 8011f94:	e004      	b.n	8011fa0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011f96:	683a      	ldr	r2, [r7, #0]
 8011f98:	4904      	ldr	r1, [pc, #16]	; (8011fac <USBD_FS_ProductStrDescriptor+0x34>)
 8011f9a:	4805      	ldr	r0, [pc, #20]	; (8011fb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011f9c:	f7fd fd1f 	bl	800f9de <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fa0:	4b02      	ldr	r3, [pc, #8]	; (8011fac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	240011ac 	.word	0x240011ac
 8011fb0:	0801389c 	.word	0x0801389c

08011fb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	4603      	mov	r3, r0
 8011fbc:	6039      	str	r1, [r7, #0]
 8011fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011fc0:	683a      	ldr	r2, [r7, #0]
 8011fc2:	4904      	ldr	r1, [pc, #16]	; (8011fd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011fc4:	4804      	ldr	r0, [pc, #16]	; (8011fd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011fc6:	f7fd fd0a 	bl	800f9de <USBD_GetString>
  return USBD_StrDesc;
 8011fca:	4b02      	ldr	r3, [pc, #8]	; (8011fd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3708      	adds	r7, #8
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	240011ac 	.word	0x240011ac
 8011fd8:	080138b0 	.word	0x080138b0

08011fdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	6039      	str	r1, [r7, #0]
 8011fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	221a      	movs	r2, #26
 8011fec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011fee:	f000 f843 	bl	8012078 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011ff2:	4b02      	ldr	r3, [pc, #8]	; (8011ffc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3708      	adds	r7, #8
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}
 8011ffc:	2400012c 	.word	0x2400012c

08012000 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	4603      	mov	r3, r0
 8012008:	6039      	str	r1, [r7, #0]
 801200a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801200c:	79fb      	ldrb	r3, [r7, #7]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d105      	bne.n	801201e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012012:	683a      	ldr	r2, [r7, #0]
 8012014:	4907      	ldr	r1, [pc, #28]	; (8012034 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012016:	4808      	ldr	r0, [pc, #32]	; (8012038 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012018:	f7fd fce1 	bl	800f9de <USBD_GetString>
 801201c:	e004      	b.n	8012028 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801201e:	683a      	ldr	r2, [r7, #0]
 8012020:	4904      	ldr	r1, [pc, #16]	; (8012034 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012022:	4805      	ldr	r0, [pc, #20]	; (8012038 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012024:	f7fd fcdb 	bl	800f9de <USBD_GetString>
  }
  return USBD_StrDesc;
 8012028:	4b02      	ldr	r3, [pc, #8]	; (8012034 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801202a:	4618      	mov	r0, r3
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	240011ac 	.word	0x240011ac
 8012038:	080138c4 	.word	0x080138c4

0801203c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	4603      	mov	r3, r0
 8012044:	6039      	str	r1, [r7, #0]
 8012046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012048:	79fb      	ldrb	r3, [r7, #7]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d105      	bne.n	801205a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801204e:	683a      	ldr	r2, [r7, #0]
 8012050:	4907      	ldr	r1, [pc, #28]	; (8012070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012052:	4808      	ldr	r0, [pc, #32]	; (8012074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012054:	f7fd fcc3 	bl	800f9de <USBD_GetString>
 8012058:	e004      	b.n	8012064 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801205a:	683a      	ldr	r2, [r7, #0]
 801205c:	4904      	ldr	r1, [pc, #16]	; (8012070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801205e:	4805      	ldr	r0, [pc, #20]	; (8012074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012060:	f7fd fcbd 	bl	800f9de <USBD_GetString>
  }
  return USBD_StrDesc;
 8012064:	4b02      	ldr	r3, [pc, #8]	; (8012070 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012066:	4618      	mov	r0, r3
 8012068:	3708      	adds	r7, #8
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	240011ac 	.word	0x240011ac
 8012074:	080138d0 	.word	0x080138d0

08012078 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801207e:	4b0f      	ldr	r3, [pc, #60]	; (80120bc <Get_SerialNum+0x44>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012084:	4b0e      	ldr	r3, [pc, #56]	; (80120c0 <Get_SerialNum+0x48>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801208a:	4b0e      	ldr	r3, [pc, #56]	; (80120c4 <Get_SerialNum+0x4c>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012090:	68fa      	ldr	r2, [r7, #12]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	4413      	add	r3, r2
 8012096:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d009      	beq.n	80120b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801209e:	2208      	movs	r2, #8
 80120a0:	4909      	ldr	r1, [pc, #36]	; (80120c8 <Get_SerialNum+0x50>)
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f000 f814 	bl	80120d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80120a8:	2204      	movs	r2, #4
 80120aa:	4908      	ldr	r1, [pc, #32]	; (80120cc <Get_SerialNum+0x54>)
 80120ac:	68b8      	ldr	r0, [r7, #8]
 80120ae:	f000 f80f 	bl	80120d0 <IntToUnicode>
  }
}
 80120b2:	bf00      	nop
 80120b4:	3710      	adds	r7, #16
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	bf00      	nop
 80120bc:	1ff1e800 	.word	0x1ff1e800
 80120c0:	1ff1e804 	.word	0x1ff1e804
 80120c4:	1ff1e808 	.word	0x1ff1e808
 80120c8:	2400012e 	.word	0x2400012e
 80120cc:	2400013e 	.word	0x2400013e

080120d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b087      	sub	sp, #28
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	60f8      	str	r0, [r7, #12]
 80120d8:	60b9      	str	r1, [r7, #8]
 80120da:	4613      	mov	r3, r2
 80120dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80120de:	2300      	movs	r3, #0
 80120e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80120e2:	2300      	movs	r3, #0
 80120e4:	75fb      	strb	r3, [r7, #23]
 80120e6:	e027      	b.n	8012138 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	0f1b      	lsrs	r3, r3, #28
 80120ec:	2b09      	cmp	r3, #9
 80120ee:	d80b      	bhi.n	8012108 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	0f1b      	lsrs	r3, r3, #28
 80120f4:	b2da      	uxtb	r2, r3
 80120f6:	7dfb      	ldrb	r3, [r7, #23]
 80120f8:	005b      	lsls	r3, r3, #1
 80120fa:	4619      	mov	r1, r3
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	440b      	add	r3, r1
 8012100:	3230      	adds	r2, #48	; 0x30
 8012102:	b2d2      	uxtb	r2, r2
 8012104:	701a      	strb	r2, [r3, #0]
 8012106:	e00a      	b.n	801211e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	0f1b      	lsrs	r3, r3, #28
 801210c:	b2da      	uxtb	r2, r3
 801210e:	7dfb      	ldrb	r3, [r7, #23]
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	4619      	mov	r1, r3
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	440b      	add	r3, r1
 8012118:	3237      	adds	r2, #55	; 0x37
 801211a:	b2d2      	uxtb	r2, r2
 801211c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	011b      	lsls	r3, r3, #4
 8012122:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012124:	7dfb      	ldrb	r3, [r7, #23]
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	3301      	adds	r3, #1
 801212a:	68ba      	ldr	r2, [r7, #8]
 801212c:	4413      	add	r3, r2
 801212e:	2200      	movs	r2, #0
 8012130:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012132:	7dfb      	ldrb	r3, [r7, #23]
 8012134:	3301      	adds	r3, #1
 8012136:	75fb      	strb	r3, [r7, #23]
 8012138:	7dfa      	ldrb	r2, [r7, #23]
 801213a:	79fb      	ldrb	r3, [r7, #7]
 801213c:	429a      	cmp	r2, r3
 801213e:	d3d3      	bcc.n	80120e8 <IntToUnicode+0x18>
  }
}
 8012140:	bf00      	nop
 8012142:	371c      	adds	r7, #28
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr

0801214c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	4603      	mov	r3, r0
 8012154:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8012156:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8012158:	4618      	mov	r0, r3
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8012164:	b480      	push	{r7}
 8012166:	b085      	sub	sp, #20
 8012168:	af00      	add	r7, sp, #0
 801216a:	4603      	mov	r3, r0
 801216c:	60b9      	str	r1, [r7, #8]
 801216e:	607a      	str	r2, [r7, #4]
 8012170:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012178:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012180:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8012182:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012184:	4618      	mov	r0, r3
 8012186:	3714      	adds	r7, #20
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
 8012196:	4603      	mov	r3, r0
 8012198:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801219a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801219c:	4618      	mov	r0, r3
 801219e:	370c      	adds	r7, #12
 80121a0:	46bd      	mov	sp, r7
 80121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a6:	4770      	bx	lr

080121a8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b083      	sub	sp, #12
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	4603      	mov	r3, r0
 80121b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80121b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80121c0:	b480      	push	{r7}
 80121c2:	b085      	sub	sp, #20
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60b9      	str	r1, [r7, #8]
 80121c8:	607a      	str	r2, [r7, #4]
 80121ca:	461a      	mov	r2, r3
 80121cc:	4603      	mov	r3, r0
 80121ce:	73fb      	strb	r3, [r7, #15]
 80121d0:	4613      	mov	r3, r2
 80121d2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80121d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3714      	adds	r7, #20
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr

080121e2 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80121e2:	b480      	push	{r7}
 80121e4:	b085      	sub	sp, #20
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
 80121ec:	461a      	mov	r2, r3
 80121ee:	4603      	mov	r3, r0
 80121f0:	73fb      	strb	r3, [r7, #15]
 80121f2:	4613      	mov	r3, r2
 80121f4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80121f6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3714      	adds	r7, #20
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr

08012204 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8012204:	b480      	push	{r7}
 8012206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8012208:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801220a:	4618      	mov	r0, r3
 801220c:	46bd      	mov	sp, r7
 801220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012212:	4770      	bx	lr

08012214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b08a      	sub	sp, #40	; 0x28
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801221c:	f107 0314 	add.w	r3, r7, #20
 8012220:	2200      	movs	r2, #0
 8012222:	601a      	str	r2, [r3, #0]
 8012224:	605a      	str	r2, [r3, #4]
 8012226:	609a      	str	r2, [r3, #8]
 8012228:	60da      	str	r2, [r3, #12]
 801222a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	4a1e      	ldr	r2, [pc, #120]	; (80122ac <HAL_PCD_MspInit+0x98>)
 8012232:	4293      	cmp	r3, r2
 8012234:	d136      	bne.n	80122a4 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012236:	4b1e      	ldr	r3, [pc, #120]	; (80122b0 <HAL_PCD_MspInit+0x9c>)
 8012238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801223c:	4a1c      	ldr	r2, [pc, #112]	; (80122b0 <HAL_PCD_MspInit+0x9c>)
 801223e:	f043 0301 	orr.w	r3, r3, #1
 8012242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012246:	4b1a      	ldr	r3, [pc, #104]	; (80122b0 <HAL_PCD_MspInit+0x9c>)
 8012248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801224c:	f003 0301 	and.w	r3, r3, #1
 8012250:	613b      	str	r3, [r7, #16]
 8012252:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012254:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801225a:	2302      	movs	r3, #2
 801225c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801225e:	2300      	movs	r3, #0
 8012260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012262:	2300      	movs	r3, #0
 8012264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012266:	230a      	movs	r3, #10
 8012268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801226a:	f107 0314 	add.w	r3, r7, #20
 801226e:	4619      	mov	r1, r3
 8012270:	4810      	ldr	r0, [pc, #64]	; (80122b4 <HAL_PCD_MspInit+0xa0>)
 8012272:	f7f1 fc5d 	bl	8003b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012276:	4b0e      	ldr	r3, [pc, #56]	; (80122b0 <HAL_PCD_MspInit+0x9c>)
 8012278:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801227c:	4a0c      	ldr	r2, [pc, #48]	; (80122b0 <HAL_PCD_MspInit+0x9c>)
 801227e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012282:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012286:	4b0a      	ldr	r3, [pc, #40]	; (80122b0 <HAL_PCD_MspInit+0x9c>)
 8012288:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801228c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012290:	60fb      	str	r3, [r7, #12]
 8012292:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012294:	2200      	movs	r2, #0
 8012296:	2100      	movs	r1, #0
 8012298:	2065      	movs	r0, #101	; 0x65
 801229a:	f7ef fbea 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801229e:	2065      	movs	r0, #101	; 0x65
 80122a0:	f7ef fc01 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80122a4:	bf00      	nop
 80122a6:	3728      	adds	r7, #40	; 0x28
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	40080000 	.word	0x40080000
 80122b0:	58024400 	.word	0x58024400
 80122b4:	58020000 	.word	0x58020000

080122b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80122cc:	4619      	mov	r1, r3
 80122ce:	4610      	mov	r0, r2
 80122d0:	f7fc fc03 	bl	800eada <USBD_LL_SetupStage>
}
 80122d4:	bf00      	nop
 80122d6:	3708      	adds	r7, #8
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}

080122dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	460b      	mov	r3, r1
 80122e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80122ee:	78fa      	ldrb	r2, [r7, #3]
 80122f0:	6879      	ldr	r1, [r7, #4]
 80122f2:	4613      	mov	r3, r2
 80122f4:	00db      	lsls	r3, r3, #3
 80122f6:	1a9b      	subs	r3, r3, r2
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	440b      	add	r3, r1
 80122fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	78fb      	ldrb	r3, [r7, #3]
 8012304:	4619      	mov	r1, r3
 8012306:	f7fc fc3b 	bl	800eb80 <USBD_LL_DataOutStage>
}
 801230a:	bf00      	nop
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}

08012312 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012312:	b580      	push	{r7, lr}
 8012314:	b082      	sub	sp, #8
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
 801231a:	460b      	mov	r3, r1
 801231c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012324:	78fa      	ldrb	r2, [r7, #3]
 8012326:	6879      	ldr	r1, [r7, #4]
 8012328:	4613      	mov	r3, r2
 801232a:	00db      	lsls	r3, r3, #3
 801232c:	1a9b      	subs	r3, r3, r2
 801232e:	009b      	lsls	r3, r3, #2
 8012330:	440b      	add	r3, r1
 8012332:	3348      	adds	r3, #72	; 0x48
 8012334:	681a      	ldr	r2, [r3, #0]
 8012336:	78fb      	ldrb	r3, [r7, #3]
 8012338:	4619      	mov	r1, r3
 801233a:	f7fc fc84 	bl	800ec46 <USBD_LL_DataInStage>
}
 801233e:	bf00      	nop
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012346:	b580      	push	{r7, lr}
 8012348:	b082      	sub	sp, #8
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012354:	4618      	mov	r0, r3
 8012356:	f7fc fd88 	bl	800ee6a <USBD_LL_SOF>
}
 801235a:	bf00      	nop
 801235c:	3708      	adds	r7, #8
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012362:	b580      	push	{r7, lr}
 8012364:	b084      	sub	sp, #16
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801236a:	2301      	movs	r3, #1
 801236c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d102      	bne.n	801237c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012376:	2300      	movs	r3, #0
 8012378:	73fb      	strb	r3, [r7, #15]
 801237a:	e008      	b.n	801238e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	2b02      	cmp	r3, #2
 8012382:	d102      	bne.n	801238a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012384:	2301      	movs	r3, #1
 8012386:	73fb      	strb	r3, [r7, #15]
 8012388:	e001      	b.n	801238e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801238a:	f7ee fe3f 	bl	800100c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012394:	7bfa      	ldrb	r2, [r7, #15]
 8012396:	4611      	mov	r1, r2
 8012398:	4618      	mov	r0, r3
 801239a:	f7fc fd2b 	bl	800edf4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fc fce4 	bl	800ed72 <USBD_LL_Reset>
}
 80123aa:	bf00      	nop
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
	...

080123b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7fc fd26 	bl	800ee14 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	6812      	ldr	r2, [r2, #0]
 80123d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80123da:	f043 0301 	orr.w	r3, r3, #1
 80123de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6a1b      	ldr	r3, [r3, #32]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d005      	beq.n	80123f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80123e8:	4b04      	ldr	r3, [pc, #16]	; (80123fc <HAL_PCD_SuspendCallback+0x48>)
 80123ea:	691b      	ldr	r3, [r3, #16]
 80123ec:	4a03      	ldr	r2, [pc, #12]	; (80123fc <HAL_PCD_SuspendCallback+0x48>)
 80123ee:	f043 0306 	orr.w	r3, r3, #6
 80123f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80123f4:	bf00      	nop
 80123f6:	3708      	adds	r7, #8
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	e000ed00 	.word	0xe000ed00

08012400 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801240e:	4618      	mov	r0, r3
 8012410:	f7fc fd15 	bl	800ee3e <USBD_LL_Resume>
}
 8012414:	bf00      	nop
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	460b      	mov	r3, r1
 8012426:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801242e:	78fa      	ldrb	r2, [r7, #3]
 8012430:	4611      	mov	r1, r2
 8012432:	4618      	mov	r0, r3
 8012434:	f7fc fd40 	bl	800eeb8 <USBD_LL_IsoOUTIncomplete>
}
 8012438:	bf00      	nop
 801243a:	3708      	adds	r7, #8
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	460b      	mov	r3, r1
 801244a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012452:	78fa      	ldrb	r2, [r7, #3]
 8012454:	4611      	mov	r1, r2
 8012456:	4618      	mov	r0, r3
 8012458:	f7fc fd21 	bl	800ee9e <USBD_LL_IsoINIncomplete>
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012472:	4618      	mov	r0, r3
 8012474:	f7fc fd2d 	bl	800eed2 <USBD_LL_DevConnected>
}
 8012478:	bf00      	nop
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801248e:	4618      	mov	r0, r3
 8012490:	f7fc fd2a 	bl	800eee8 <USBD_LL_DevDisconnected>
}
 8012494:	bf00      	nop
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b082      	sub	sp, #8
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d13e      	bne.n	801252a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80124ac:	4a21      	ldr	r2, [pc, #132]	; (8012534 <USBD_LL_Init+0x98>)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	4a1f      	ldr	r2, [pc, #124]	; (8012534 <USBD_LL_Init+0x98>)
 80124b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80124bc:	4b1d      	ldr	r3, [pc, #116]	; (8012534 <USBD_LL_Init+0x98>)
 80124be:	4a1e      	ldr	r2, [pc, #120]	; (8012538 <USBD_LL_Init+0x9c>)
 80124c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80124c2:	4b1c      	ldr	r3, [pc, #112]	; (8012534 <USBD_LL_Init+0x98>)
 80124c4:	2209      	movs	r2, #9
 80124c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80124c8:	4b1a      	ldr	r3, [pc, #104]	; (8012534 <USBD_LL_Init+0x98>)
 80124ca:	2202      	movs	r2, #2
 80124cc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80124ce:	4b19      	ldr	r3, [pc, #100]	; (8012534 <USBD_LL_Init+0x98>)
 80124d0:	2200      	movs	r2, #0
 80124d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80124d4:	4b17      	ldr	r3, [pc, #92]	; (8012534 <USBD_LL_Init+0x98>)
 80124d6:	2202      	movs	r2, #2
 80124d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80124da:	4b16      	ldr	r3, [pc, #88]	; (8012534 <USBD_LL_Init+0x98>)
 80124dc:	2200      	movs	r2, #0
 80124de:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80124e0:	4b14      	ldr	r3, [pc, #80]	; (8012534 <USBD_LL_Init+0x98>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80124e6:	4b13      	ldr	r3, [pc, #76]	; (8012534 <USBD_LL_Init+0x98>)
 80124e8:	2200      	movs	r2, #0
 80124ea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80124ec:	4b11      	ldr	r3, [pc, #68]	; (8012534 <USBD_LL_Init+0x98>)
 80124ee:	2200      	movs	r2, #0
 80124f0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80124f2:	4b10      	ldr	r3, [pc, #64]	; (8012534 <USBD_LL_Init+0x98>)
 80124f4:	2200      	movs	r2, #0
 80124f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80124f8:	4b0e      	ldr	r3, [pc, #56]	; (8012534 <USBD_LL_Init+0x98>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80124fe:	480d      	ldr	r0, [pc, #52]	; (8012534 <USBD_LL_Init+0x98>)
 8012500:	f7f1 fd12 	bl	8003f28 <HAL_PCD_Init>
 8012504:	4603      	mov	r3, r0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d001      	beq.n	801250e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801250a:	f7ee fd7f 	bl	800100c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801250e:	2180      	movs	r1, #128	; 0x80
 8012510:	4808      	ldr	r0, [pc, #32]	; (8012534 <USBD_LL_Init+0x98>)
 8012512:	f7f2 fed0 	bl	80052b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012516:	2240      	movs	r2, #64	; 0x40
 8012518:	2100      	movs	r1, #0
 801251a:	4806      	ldr	r0, [pc, #24]	; (8012534 <USBD_LL_Init+0x98>)
 801251c:	f7f2 fe84 	bl	8005228 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012520:	2280      	movs	r2, #128	; 0x80
 8012522:	2101      	movs	r1, #1
 8012524:	4803      	ldr	r0, [pc, #12]	; (8012534 <USBD_LL_Init+0x98>)
 8012526:	f7f2 fe7f 	bl	8005228 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801252a:	2300      	movs	r3, #0
}
 801252c:	4618      	mov	r0, r3
 801252e:	3708      	adds	r7, #8
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	240013ac 	.word	0x240013ac
 8012538:	40080000 	.word	0x40080000

0801253c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012544:	2300      	movs	r3, #0
 8012546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012548:	2300      	movs	r3, #0
 801254a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012552:	4618      	mov	r0, r3
 8012554:	f7f1 fe0c 	bl	8004170 <HAL_PCD_Start>
 8012558:	4603      	mov	r3, r0
 801255a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	4618      	mov	r0, r3
 8012560:	f000 f94a 	bl	80127f8 <USBD_Get_USB_Status>
 8012564:	4603      	mov	r3, r0
 8012566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012568:	7bbb      	ldrb	r3, [r7, #14]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b084      	sub	sp, #16
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	4608      	mov	r0, r1
 801257c:	4611      	mov	r1, r2
 801257e:	461a      	mov	r2, r3
 8012580:	4603      	mov	r3, r0
 8012582:	70fb      	strb	r3, [r7, #3]
 8012584:	460b      	mov	r3, r1
 8012586:	70bb      	strb	r3, [r7, #2]
 8012588:	4613      	mov	r3, r2
 801258a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801258c:	2300      	movs	r3, #0
 801258e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012590:	2300      	movs	r3, #0
 8012592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801259a:	78bb      	ldrb	r3, [r7, #2]
 801259c:	883a      	ldrh	r2, [r7, #0]
 801259e:	78f9      	ldrb	r1, [r7, #3]
 80125a0:	f7f2 fa1d 	bl	80049de <HAL_PCD_EP_Open>
 80125a4:	4603      	mov	r3, r0
 80125a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125a8:	7bfb      	ldrb	r3, [r7, #15]
 80125aa:	4618      	mov	r0, r3
 80125ac:	f000 f924 	bl	80127f8 <USBD_Get_USB_Status>
 80125b0:	4603      	mov	r3, r0
 80125b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3710      	adds	r7, #16
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125be:	b580      	push	{r7, lr}
 80125c0:	b084      	sub	sp, #16
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
 80125c6:	460b      	mov	r3, r1
 80125c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125ca:	2300      	movs	r3, #0
 80125cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125ce:	2300      	movs	r3, #0
 80125d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80125d8:	78fa      	ldrb	r2, [r7, #3]
 80125da:	4611      	mov	r1, r2
 80125dc:	4618      	mov	r0, r3
 80125de:	f7f2 fa66 	bl	8004aae <HAL_PCD_EP_Close>
 80125e2:	4603      	mov	r3, r0
 80125e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125e6:	7bfb      	ldrb	r3, [r7, #15]
 80125e8:	4618      	mov	r0, r3
 80125ea:	f000 f905 	bl	80127f8 <USBD_Get_USB_Status>
 80125ee:	4603      	mov	r3, r0
 80125f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3710      	adds	r7, #16
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b084      	sub	sp, #16
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	460b      	mov	r3, r1
 8012606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012608:	2300      	movs	r3, #0
 801260a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801260c:	2300      	movs	r3, #0
 801260e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012616:	78fa      	ldrb	r2, [r7, #3]
 8012618:	4611      	mov	r1, r2
 801261a:	4618      	mov	r0, r3
 801261c:	f7f2 fbf8 	bl	8004e10 <HAL_PCD_EP_Flush>
 8012620:	4603      	mov	r3, r0
 8012622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012624:	7bfb      	ldrb	r3, [r7, #15]
 8012626:	4618      	mov	r0, r3
 8012628:	f000 f8e6 	bl	80127f8 <USBD_Get_USB_Status>
 801262c:	4603      	mov	r3, r0
 801262e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012630:	7bbb      	ldrb	r3, [r7, #14]
}
 8012632:	4618      	mov	r0, r3
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801263a:	b580      	push	{r7, lr}
 801263c:	b084      	sub	sp, #16
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
 8012642:	460b      	mov	r3, r1
 8012644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012646:	2300      	movs	r3, #0
 8012648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801264a:	2300      	movs	r3, #0
 801264c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012654:	78fa      	ldrb	r2, [r7, #3]
 8012656:	4611      	mov	r1, r2
 8012658:	4618      	mov	r0, r3
 801265a:	f7f2 fb1f 	bl	8004c9c <HAL_PCD_EP_SetStall>
 801265e:	4603      	mov	r3, r0
 8012660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012662:	7bfb      	ldrb	r3, [r7, #15]
 8012664:	4618      	mov	r0, r3
 8012666:	f000 f8c7 	bl	80127f8 <USBD_Get_USB_Status>
 801266a:	4603      	mov	r3, r0
 801266c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801266e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012670:	4618      	mov	r0, r3
 8012672:	3710      	adds	r7, #16
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	460b      	mov	r3, r1
 8012682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012684:	2300      	movs	r3, #0
 8012686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012688:	2300      	movs	r3, #0
 801268a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012692:	78fa      	ldrb	r2, [r7, #3]
 8012694:	4611      	mov	r1, r2
 8012696:	4618      	mov	r0, r3
 8012698:	f7f2 fb64 	bl	8004d64 <HAL_PCD_EP_ClrStall>
 801269c:	4603      	mov	r3, r0
 801269e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126a0:	7bfb      	ldrb	r3, [r7, #15]
 80126a2:	4618      	mov	r0, r3
 80126a4:	f000 f8a8 	bl	80127f8 <USBD_Get_USB_Status>
 80126a8:	4603      	mov	r3, r0
 80126aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126b6:	b480      	push	{r7}
 80126b8:	b085      	sub	sp, #20
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
 80126be:	460b      	mov	r3, r1
 80126c0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80126c8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80126ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	da0b      	bge.n	80126ea <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80126d2:	78fb      	ldrb	r3, [r7, #3]
 80126d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126d8:	68f9      	ldr	r1, [r7, #12]
 80126da:	4613      	mov	r3, r2
 80126dc:	00db      	lsls	r3, r3, #3
 80126de:	1a9b      	subs	r3, r3, r2
 80126e0:	009b      	lsls	r3, r3, #2
 80126e2:	440b      	add	r3, r1
 80126e4:	333e      	adds	r3, #62	; 0x3e
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	e00b      	b.n	8012702 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80126ea:	78fb      	ldrb	r3, [r7, #3]
 80126ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126f0:	68f9      	ldr	r1, [r7, #12]
 80126f2:	4613      	mov	r3, r2
 80126f4:	00db      	lsls	r3, r3, #3
 80126f6:	1a9b      	subs	r3, r3, r2
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	440b      	add	r3, r1
 80126fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012700:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012702:	4618      	mov	r0, r3
 8012704:	3714      	adds	r7, #20
 8012706:	46bd      	mov	sp, r7
 8012708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270c:	4770      	bx	lr

0801270e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801270e:	b580      	push	{r7, lr}
 8012710:	b084      	sub	sp, #16
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
 8012716:	460b      	mov	r3, r1
 8012718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801271a:	2300      	movs	r3, #0
 801271c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801271e:	2300      	movs	r3, #0
 8012720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012728:	78fa      	ldrb	r2, [r7, #3]
 801272a:	4611      	mov	r1, r2
 801272c:	4618      	mov	r0, r3
 801272e:	f7f2 f931 	bl	8004994 <HAL_PCD_SetAddress>
 8012732:	4603      	mov	r3, r0
 8012734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012736:	7bfb      	ldrb	r3, [r7, #15]
 8012738:	4618      	mov	r0, r3
 801273a:	f000 f85d 	bl	80127f8 <USBD_Get_USB_Status>
 801273e:	4603      	mov	r3, r0
 8012740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012742:	7bbb      	ldrb	r3, [r7, #14]
}
 8012744:	4618      	mov	r0, r3
 8012746:	3710      	adds	r7, #16
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b086      	sub	sp, #24
 8012750:	af00      	add	r7, sp, #0
 8012752:	60f8      	str	r0, [r7, #12]
 8012754:	607a      	str	r2, [r7, #4]
 8012756:	603b      	str	r3, [r7, #0]
 8012758:	460b      	mov	r3, r1
 801275a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801275c:	2300      	movs	r3, #0
 801275e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012760:	2300      	movs	r3, #0
 8012762:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801276a:	7af9      	ldrb	r1, [r7, #11]
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	687a      	ldr	r2, [r7, #4]
 8012770:	f7f2 fa4a 	bl	8004c08 <HAL_PCD_EP_Transmit>
 8012774:	4603      	mov	r3, r0
 8012776:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012778:	7dfb      	ldrb	r3, [r7, #23]
 801277a:	4618      	mov	r0, r3
 801277c:	f000 f83c 	bl	80127f8 <USBD_Get_USB_Status>
 8012780:	4603      	mov	r3, r0
 8012782:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012784:	7dbb      	ldrb	r3, [r7, #22]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3718      	adds	r7, #24
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b086      	sub	sp, #24
 8012792:	af00      	add	r7, sp, #0
 8012794:	60f8      	str	r0, [r7, #12]
 8012796:	607a      	str	r2, [r7, #4]
 8012798:	603b      	str	r3, [r7, #0]
 801279a:	460b      	mov	r3, r1
 801279c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801279e:	2300      	movs	r3, #0
 80127a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127a2:	2300      	movs	r3, #0
 80127a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80127ac:	7af9      	ldrb	r1, [r7, #11]
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	687a      	ldr	r2, [r7, #4]
 80127b2:	f7f2 f9c6 	bl	8004b42 <HAL_PCD_EP_Receive>
 80127b6:	4603      	mov	r3, r0
 80127b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	4618      	mov	r0, r3
 80127be:	f000 f81b 	bl	80127f8 <USBD_Get_USB_Status>
 80127c2:	4603      	mov	r3, r0
 80127c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80127c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3718      	adds	r7, #24
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80127e2:	78fa      	ldrb	r2, [r7, #3]
 80127e4:	4611      	mov	r1, r2
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7f2 f9f6 	bl	8004bd8 <HAL_PCD_EP_GetRxCount>
 80127ec:	4603      	mov	r3, r0
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3708      	adds	r7, #8
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
	...

080127f8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80127f8:	b480      	push	{r7}
 80127fa:	b085      	sub	sp, #20
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	4603      	mov	r3, r0
 8012800:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012802:	2300      	movs	r3, #0
 8012804:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012806:	79fb      	ldrb	r3, [r7, #7]
 8012808:	2b03      	cmp	r3, #3
 801280a:	d817      	bhi.n	801283c <USBD_Get_USB_Status+0x44>
 801280c:	a201      	add	r2, pc, #4	; (adr r2, 8012814 <USBD_Get_USB_Status+0x1c>)
 801280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012812:	bf00      	nop
 8012814:	08012825 	.word	0x08012825
 8012818:	0801282b 	.word	0x0801282b
 801281c:	08012831 	.word	0x08012831
 8012820:	08012837 	.word	0x08012837
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012824:	2300      	movs	r3, #0
 8012826:	73fb      	strb	r3, [r7, #15]
    break;
 8012828:	e00b      	b.n	8012842 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801282a:	2303      	movs	r3, #3
 801282c:	73fb      	strb	r3, [r7, #15]
    break;
 801282e:	e008      	b.n	8012842 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012830:	2301      	movs	r3, #1
 8012832:	73fb      	strb	r3, [r7, #15]
    break;
 8012834:	e005      	b.n	8012842 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012836:	2303      	movs	r3, #3
 8012838:	73fb      	strb	r3, [r7, #15]
    break;
 801283a:	e002      	b.n	8012842 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801283c:	2303      	movs	r3, #3
 801283e:	73fb      	strb	r3, [r7, #15]
    break;
 8012840:	bf00      	nop
  }
  return usb_status;
 8012842:	7bfb      	ldrb	r3, [r7, #15]
}
 8012844:	4618      	mov	r0, r3
 8012846:	3714      	adds	r7, #20
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr

08012850 <__errno>:
 8012850:	4b01      	ldr	r3, [pc, #4]	; (8012858 <__errno+0x8>)
 8012852:	6818      	ldr	r0, [r3, #0]
 8012854:	4770      	bx	lr
 8012856:	bf00      	nop
 8012858:	24000168 	.word	0x24000168

0801285c <__libc_init_array>:
 801285c:	b570      	push	{r4, r5, r6, lr}
 801285e:	4e0d      	ldr	r6, [pc, #52]	; (8012894 <__libc_init_array+0x38>)
 8012860:	4c0d      	ldr	r4, [pc, #52]	; (8012898 <__libc_init_array+0x3c>)
 8012862:	1ba4      	subs	r4, r4, r6
 8012864:	10a4      	asrs	r4, r4, #2
 8012866:	2500      	movs	r5, #0
 8012868:	42a5      	cmp	r5, r4
 801286a:	d109      	bne.n	8012880 <__libc_init_array+0x24>
 801286c:	4e0b      	ldr	r6, [pc, #44]	; (801289c <__libc_init_array+0x40>)
 801286e:	4c0c      	ldr	r4, [pc, #48]	; (80128a0 <__libc_init_array+0x44>)
 8012870:	f000 ff84 	bl	801377c <_init>
 8012874:	1ba4      	subs	r4, r4, r6
 8012876:	10a4      	asrs	r4, r4, #2
 8012878:	2500      	movs	r5, #0
 801287a:	42a5      	cmp	r5, r4
 801287c:	d105      	bne.n	801288a <__libc_init_array+0x2e>
 801287e:	bd70      	pop	{r4, r5, r6, pc}
 8012880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012884:	4798      	blx	r3
 8012886:	3501      	adds	r5, #1
 8012888:	e7ee      	b.n	8012868 <__libc_init_array+0xc>
 801288a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801288e:	4798      	blx	r3
 8012890:	3501      	adds	r5, #1
 8012892:	e7f2      	b.n	801287a <__libc_init_array+0x1e>
 8012894:	08013a68 	.word	0x08013a68
 8012898:	08013a68 	.word	0x08013a68
 801289c:	08013a68 	.word	0x08013a68
 80128a0:	08013a6c 	.word	0x08013a6c

080128a4 <malloc>:
 80128a4:	4b02      	ldr	r3, [pc, #8]	; (80128b0 <malloc+0xc>)
 80128a6:	4601      	mov	r1, r0
 80128a8:	6818      	ldr	r0, [r3, #0]
 80128aa:	f000 b86d 	b.w	8012988 <_malloc_r>
 80128ae:	bf00      	nop
 80128b0:	24000168 	.word	0x24000168

080128b4 <free>:
 80128b4:	4b02      	ldr	r3, [pc, #8]	; (80128c0 <free+0xc>)
 80128b6:	4601      	mov	r1, r0
 80128b8:	6818      	ldr	r0, [r3, #0]
 80128ba:	f000 b817 	b.w	80128ec <_free_r>
 80128be:	bf00      	nop
 80128c0:	24000168 	.word	0x24000168

080128c4 <memcpy>:
 80128c4:	b510      	push	{r4, lr}
 80128c6:	1e43      	subs	r3, r0, #1
 80128c8:	440a      	add	r2, r1
 80128ca:	4291      	cmp	r1, r2
 80128cc:	d100      	bne.n	80128d0 <memcpy+0xc>
 80128ce:	bd10      	pop	{r4, pc}
 80128d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128d8:	e7f7      	b.n	80128ca <memcpy+0x6>

080128da <memset>:
 80128da:	4402      	add	r2, r0
 80128dc:	4603      	mov	r3, r0
 80128de:	4293      	cmp	r3, r2
 80128e0:	d100      	bne.n	80128e4 <memset+0xa>
 80128e2:	4770      	bx	lr
 80128e4:	f803 1b01 	strb.w	r1, [r3], #1
 80128e8:	e7f9      	b.n	80128de <memset+0x4>
	...

080128ec <_free_r>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4605      	mov	r5, r0
 80128f0:	2900      	cmp	r1, #0
 80128f2:	d045      	beq.n	8012980 <_free_r+0x94>
 80128f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128f8:	1f0c      	subs	r4, r1, #4
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	bfb8      	it	lt
 80128fe:	18e4      	addlt	r4, r4, r3
 8012900:	f000 fbc6 	bl	8013090 <__malloc_lock>
 8012904:	4a1f      	ldr	r2, [pc, #124]	; (8012984 <_free_r+0x98>)
 8012906:	6813      	ldr	r3, [r2, #0]
 8012908:	4610      	mov	r0, r2
 801290a:	b933      	cbnz	r3, 801291a <_free_r+0x2e>
 801290c:	6063      	str	r3, [r4, #4]
 801290e:	6014      	str	r4, [r2, #0]
 8012910:	4628      	mov	r0, r5
 8012912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012916:	f000 bbbc 	b.w	8013092 <__malloc_unlock>
 801291a:	42a3      	cmp	r3, r4
 801291c:	d90c      	bls.n	8012938 <_free_r+0x4c>
 801291e:	6821      	ldr	r1, [r4, #0]
 8012920:	1862      	adds	r2, r4, r1
 8012922:	4293      	cmp	r3, r2
 8012924:	bf04      	itt	eq
 8012926:	681a      	ldreq	r2, [r3, #0]
 8012928:	685b      	ldreq	r3, [r3, #4]
 801292a:	6063      	str	r3, [r4, #4]
 801292c:	bf04      	itt	eq
 801292e:	1852      	addeq	r2, r2, r1
 8012930:	6022      	streq	r2, [r4, #0]
 8012932:	6004      	str	r4, [r0, #0]
 8012934:	e7ec      	b.n	8012910 <_free_r+0x24>
 8012936:	4613      	mov	r3, r2
 8012938:	685a      	ldr	r2, [r3, #4]
 801293a:	b10a      	cbz	r2, 8012940 <_free_r+0x54>
 801293c:	42a2      	cmp	r2, r4
 801293e:	d9fa      	bls.n	8012936 <_free_r+0x4a>
 8012940:	6819      	ldr	r1, [r3, #0]
 8012942:	1858      	adds	r0, r3, r1
 8012944:	42a0      	cmp	r0, r4
 8012946:	d10b      	bne.n	8012960 <_free_r+0x74>
 8012948:	6820      	ldr	r0, [r4, #0]
 801294a:	4401      	add	r1, r0
 801294c:	1858      	adds	r0, r3, r1
 801294e:	4282      	cmp	r2, r0
 8012950:	6019      	str	r1, [r3, #0]
 8012952:	d1dd      	bne.n	8012910 <_free_r+0x24>
 8012954:	6810      	ldr	r0, [r2, #0]
 8012956:	6852      	ldr	r2, [r2, #4]
 8012958:	605a      	str	r2, [r3, #4]
 801295a:	4401      	add	r1, r0
 801295c:	6019      	str	r1, [r3, #0]
 801295e:	e7d7      	b.n	8012910 <_free_r+0x24>
 8012960:	d902      	bls.n	8012968 <_free_r+0x7c>
 8012962:	230c      	movs	r3, #12
 8012964:	602b      	str	r3, [r5, #0]
 8012966:	e7d3      	b.n	8012910 <_free_r+0x24>
 8012968:	6820      	ldr	r0, [r4, #0]
 801296a:	1821      	adds	r1, r4, r0
 801296c:	428a      	cmp	r2, r1
 801296e:	bf04      	itt	eq
 8012970:	6811      	ldreq	r1, [r2, #0]
 8012972:	6852      	ldreq	r2, [r2, #4]
 8012974:	6062      	str	r2, [r4, #4]
 8012976:	bf04      	itt	eq
 8012978:	1809      	addeq	r1, r1, r0
 801297a:	6021      	streq	r1, [r4, #0]
 801297c:	605c      	str	r4, [r3, #4]
 801297e:	e7c7      	b.n	8012910 <_free_r+0x24>
 8012980:	bd38      	pop	{r3, r4, r5, pc}
 8012982:	bf00      	nop
 8012984:	2400022c 	.word	0x2400022c

08012988 <_malloc_r>:
 8012988:	b570      	push	{r4, r5, r6, lr}
 801298a:	1ccd      	adds	r5, r1, #3
 801298c:	f025 0503 	bic.w	r5, r5, #3
 8012990:	3508      	adds	r5, #8
 8012992:	2d0c      	cmp	r5, #12
 8012994:	bf38      	it	cc
 8012996:	250c      	movcc	r5, #12
 8012998:	2d00      	cmp	r5, #0
 801299a:	4606      	mov	r6, r0
 801299c:	db01      	blt.n	80129a2 <_malloc_r+0x1a>
 801299e:	42a9      	cmp	r1, r5
 80129a0:	d903      	bls.n	80129aa <_malloc_r+0x22>
 80129a2:	230c      	movs	r3, #12
 80129a4:	6033      	str	r3, [r6, #0]
 80129a6:	2000      	movs	r0, #0
 80129a8:	bd70      	pop	{r4, r5, r6, pc}
 80129aa:	f000 fb71 	bl	8013090 <__malloc_lock>
 80129ae:	4a21      	ldr	r2, [pc, #132]	; (8012a34 <_malloc_r+0xac>)
 80129b0:	6814      	ldr	r4, [r2, #0]
 80129b2:	4621      	mov	r1, r4
 80129b4:	b991      	cbnz	r1, 80129dc <_malloc_r+0x54>
 80129b6:	4c20      	ldr	r4, [pc, #128]	; (8012a38 <_malloc_r+0xb0>)
 80129b8:	6823      	ldr	r3, [r4, #0]
 80129ba:	b91b      	cbnz	r3, 80129c4 <_malloc_r+0x3c>
 80129bc:	4630      	mov	r0, r6
 80129be:	f000 f8b9 	bl	8012b34 <_sbrk_r>
 80129c2:	6020      	str	r0, [r4, #0]
 80129c4:	4629      	mov	r1, r5
 80129c6:	4630      	mov	r0, r6
 80129c8:	f000 f8b4 	bl	8012b34 <_sbrk_r>
 80129cc:	1c43      	adds	r3, r0, #1
 80129ce:	d124      	bne.n	8012a1a <_malloc_r+0x92>
 80129d0:	230c      	movs	r3, #12
 80129d2:	6033      	str	r3, [r6, #0]
 80129d4:	4630      	mov	r0, r6
 80129d6:	f000 fb5c 	bl	8013092 <__malloc_unlock>
 80129da:	e7e4      	b.n	80129a6 <_malloc_r+0x1e>
 80129dc:	680b      	ldr	r3, [r1, #0]
 80129de:	1b5b      	subs	r3, r3, r5
 80129e0:	d418      	bmi.n	8012a14 <_malloc_r+0x8c>
 80129e2:	2b0b      	cmp	r3, #11
 80129e4:	d90f      	bls.n	8012a06 <_malloc_r+0x7e>
 80129e6:	600b      	str	r3, [r1, #0]
 80129e8:	50cd      	str	r5, [r1, r3]
 80129ea:	18cc      	adds	r4, r1, r3
 80129ec:	4630      	mov	r0, r6
 80129ee:	f000 fb50 	bl	8013092 <__malloc_unlock>
 80129f2:	f104 000b 	add.w	r0, r4, #11
 80129f6:	1d23      	adds	r3, r4, #4
 80129f8:	f020 0007 	bic.w	r0, r0, #7
 80129fc:	1ac3      	subs	r3, r0, r3
 80129fe:	d0d3      	beq.n	80129a8 <_malloc_r+0x20>
 8012a00:	425a      	negs	r2, r3
 8012a02:	50e2      	str	r2, [r4, r3]
 8012a04:	e7d0      	b.n	80129a8 <_malloc_r+0x20>
 8012a06:	428c      	cmp	r4, r1
 8012a08:	684b      	ldr	r3, [r1, #4]
 8012a0a:	bf16      	itet	ne
 8012a0c:	6063      	strne	r3, [r4, #4]
 8012a0e:	6013      	streq	r3, [r2, #0]
 8012a10:	460c      	movne	r4, r1
 8012a12:	e7eb      	b.n	80129ec <_malloc_r+0x64>
 8012a14:	460c      	mov	r4, r1
 8012a16:	6849      	ldr	r1, [r1, #4]
 8012a18:	e7cc      	b.n	80129b4 <_malloc_r+0x2c>
 8012a1a:	1cc4      	adds	r4, r0, #3
 8012a1c:	f024 0403 	bic.w	r4, r4, #3
 8012a20:	42a0      	cmp	r0, r4
 8012a22:	d005      	beq.n	8012a30 <_malloc_r+0xa8>
 8012a24:	1a21      	subs	r1, r4, r0
 8012a26:	4630      	mov	r0, r6
 8012a28:	f000 f884 	bl	8012b34 <_sbrk_r>
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	d0cf      	beq.n	80129d0 <_malloc_r+0x48>
 8012a30:	6025      	str	r5, [r4, #0]
 8012a32:	e7db      	b.n	80129ec <_malloc_r+0x64>
 8012a34:	2400022c 	.word	0x2400022c
 8012a38:	24000230 	.word	0x24000230

08012a3c <iprintf>:
 8012a3c:	b40f      	push	{r0, r1, r2, r3}
 8012a3e:	4b0a      	ldr	r3, [pc, #40]	; (8012a68 <iprintf+0x2c>)
 8012a40:	b513      	push	{r0, r1, r4, lr}
 8012a42:	681c      	ldr	r4, [r3, #0]
 8012a44:	b124      	cbz	r4, 8012a50 <iprintf+0x14>
 8012a46:	69a3      	ldr	r3, [r4, #24]
 8012a48:	b913      	cbnz	r3, 8012a50 <iprintf+0x14>
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	f000 fa32 	bl	8012eb4 <__sinit>
 8012a50:	ab05      	add	r3, sp, #20
 8012a52:	9a04      	ldr	r2, [sp, #16]
 8012a54:	68a1      	ldr	r1, [r4, #8]
 8012a56:	9301      	str	r3, [sp, #4]
 8012a58:	4620      	mov	r0, r4
 8012a5a:	f000 fb45 	bl	80130e8 <_vfiprintf_r>
 8012a5e:	b002      	add	sp, #8
 8012a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a64:	b004      	add	sp, #16
 8012a66:	4770      	bx	lr
 8012a68:	24000168 	.word	0x24000168

08012a6c <_puts_r>:
 8012a6c:	b570      	push	{r4, r5, r6, lr}
 8012a6e:	460e      	mov	r6, r1
 8012a70:	4605      	mov	r5, r0
 8012a72:	b118      	cbz	r0, 8012a7c <_puts_r+0x10>
 8012a74:	6983      	ldr	r3, [r0, #24]
 8012a76:	b90b      	cbnz	r3, 8012a7c <_puts_r+0x10>
 8012a78:	f000 fa1c 	bl	8012eb4 <__sinit>
 8012a7c:	69ab      	ldr	r3, [r5, #24]
 8012a7e:	68ac      	ldr	r4, [r5, #8]
 8012a80:	b913      	cbnz	r3, 8012a88 <_puts_r+0x1c>
 8012a82:	4628      	mov	r0, r5
 8012a84:	f000 fa16 	bl	8012eb4 <__sinit>
 8012a88:	4b23      	ldr	r3, [pc, #140]	; (8012b18 <_puts_r+0xac>)
 8012a8a:	429c      	cmp	r4, r3
 8012a8c:	d117      	bne.n	8012abe <_puts_r+0x52>
 8012a8e:	686c      	ldr	r4, [r5, #4]
 8012a90:	89a3      	ldrh	r3, [r4, #12]
 8012a92:	071b      	lsls	r3, r3, #28
 8012a94:	d51d      	bpl.n	8012ad2 <_puts_r+0x66>
 8012a96:	6923      	ldr	r3, [r4, #16]
 8012a98:	b1db      	cbz	r3, 8012ad2 <_puts_r+0x66>
 8012a9a:	3e01      	subs	r6, #1
 8012a9c:	68a3      	ldr	r3, [r4, #8]
 8012a9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012aa2:	3b01      	subs	r3, #1
 8012aa4:	60a3      	str	r3, [r4, #8]
 8012aa6:	b9e9      	cbnz	r1, 8012ae4 <_puts_r+0x78>
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	da2e      	bge.n	8012b0a <_puts_r+0x9e>
 8012aac:	4622      	mov	r2, r4
 8012aae:	210a      	movs	r1, #10
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	f000 f84f 	bl	8012b54 <__swbuf_r>
 8012ab6:	3001      	adds	r0, #1
 8012ab8:	d011      	beq.n	8012ade <_puts_r+0x72>
 8012aba:	200a      	movs	r0, #10
 8012abc:	e011      	b.n	8012ae2 <_puts_r+0x76>
 8012abe:	4b17      	ldr	r3, [pc, #92]	; (8012b1c <_puts_r+0xb0>)
 8012ac0:	429c      	cmp	r4, r3
 8012ac2:	d101      	bne.n	8012ac8 <_puts_r+0x5c>
 8012ac4:	68ac      	ldr	r4, [r5, #8]
 8012ac6:	e7e3      	b.n	8012a90 <_puts_r+0x24>
 8012ac8:	4b15      	ldr	r3, [pc, #84]	; (8012b20 <_puts_r+0xb4>)
 8012aca:	429c      	cmp	r4, r3
 8012acc:	bf08      	it	eq
 8012ace:	68ec      	ldreq	r4, [r5, #12]
 8012ad0:	e7de      	b.n	8012a90 <_puts_r+0x24>
 8012ad2:	4621      	mov	r1, r4
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	f000 f88f 	bl	8012bf8 <__swsetup_r>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	d0dd      	beq.n	8012a9a <_puts_r+0x2e>
 8012ade:	f04f 30ff 	mov.w	r0, #4294967295
 8012ae2:	bd70      	pop	{r4, r5, r6, pc}
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	da04      	bge.n	8012af2 <_puts_r+0x86>
 8012ae8:	69a2      	ldr	r2, [r4, #24]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	dc06      	bgt.n	8012afc <_puts_r+0x90>
 8012aee:	290a      	cmp	r1, #10
 8012af0:	d004      	beq.n	8012afc <_puts_r+0x90>
 8012af2:	6823      	ldr	r3, [r4, #0]
 8012af4:	1c5a      	adds	r2, r3, #1
 8012af6:	6022      	str	r2, [r4, #0]
 8012af8:	7019      	strb	r1, [r3, #0]
 8012afa:	e7cf      	b.n	8012a9c <_puts_r+0x30>
 8012afc:	4622      	mov	r2, r4
 8012afe:	4628      	mov	r0, r5
 8012b00:	f000 f828 	bl	8012b54 <__swbuf_r>
 8012b04:	3001      	adds	r0, #1
 8012b06:	d1c9      	bne.n	8012a9c <_puts_r+0x30>
 8012b08:	e7e9      	b.n	8012ade <_puts_r+0x72>
 8012b0a:	6823      	ldr	r3, [r4, #0]
 8012b0c:	200a      	movs	r0, #10
 8012b0e:	1c5a      	adds	r2, r3, #1
 8012b10:	6022      	str	r2, [r4, #0]
 8012b12:	7018      	strb	r0, [r3, #0]
 8012b14:	e7e5      	b.n	8012ae2 <_puts_r+0x76>
 8012b16:	bf00      	nop
 8012b18:	080139ec 	.word	0x080139ec
 8012b1c:	08013a0c 	.word	0x08013a0c
 8012b20:	080139cc 	.word	0x080139cc

08012b24 <puts>:
 8012b24:	4b02      	ldr	r3, [pc, #8]	; (8012b30 <puts+0xc>)
 8012b26:	4601      	mov	r1, r0
 8012b28:	6818      	ldr	r0, [r3, #0]
 8012b2a:	f7ff bf9f 	b.w	8012a6c <_puts_r>
 8012b2e:	bf00      	nop
 8012b30:	24000168 	.word	0x24000168

08012b34 <_sbrk_r>:
 8012b34:	b538      	push	{r3, r4, r5, lr}
 8012b36:	4c06      	ldr	r4, [pc, #24]	; (8012b50 <_sbrk_r+0x1c>)
 8012b38:	2300      	movs	r3, #0
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	4608      	mov	r0, r1
 8012b3e:	6023      	str	r3, [r4, #0]
 8012b40:	f7ee fd10 	bl	8001564 <_sbrk>
 8012b44:	1c43      	adds	r3, r0, #1
 8012b46:	d102      	bne.n	8012b4e <_sbrk_r+0x1a>
 8012b48:	6823      	ldr	r3, [r4, #0]
 8012b4a:	b103      	cbz	r3, 8012b4e <_sbrk_r+0x1a>
 8012b4c:	602b      	str	r3, [r5, #0]
 8012b4e:	bd38      	pop	{r3, r4, r5, pc}
 8012b50:	240017b4 	.word	0x240017b4

08012b54 <__swbuf_r>:
 8012b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b56:	460e      	mov	r6, r1
 8012b58:	4614      	mov	r4, r2
 8012b5a:	4605      	mov	r5, r0
 8012b5c:	b118      	cbz	r0, 8012b66 <__swbuf_r+0x12>
 8012b5e:	6983      	ldr	r3, [r0, #24]
 8012b60:	b90b      	cbnz	r3, 8012b66 <__swbuf_r+0x12>
 8012b62:	f000 f9a7 	bl	8012eb4 <__sinit>
 8012b66:	4b21      	ldr	r3, [pc, #132]	; (8012bec <__swbuf_r+0x98>)
 8012b68:	429c      	cmp	r4, r3
 8012b6a:	d12a      	bne.n	8012bc2 <__swbuf_r+0x6e>
 8012b6c:	686c      	ldr	r4, [r5, #4]
 8012b6e:	69a3      	ldr	r3, [r4, #24]
 8012b70:	60a3      	str	r3, [r4, #8]
 8012b72:	89a3      	ldrh	r3, [r4, #12]
 8012b74:	071a      	lsls	r2, r3, #28
 8012b76:	d52e      	bpl.n	8012bd6 <__swbuf_r+0x82>
 8012b78:	6923      	ldr	r3, [r4, #16]
 8012b7a:	b363      	cbz	r3, 8012bd6 <__swbuf_r+0x82>
 8012b7c:	6923      	ldr	r3, [r4, #16]
 8012b7e:	6820      	ldr	r0, [r4, #0]
 8012b80:	1ac0      	subs	r0, r0, r3
 8012b82:	6963      	ldr	r3, [r4, #20]
 8012b84:	b2f6      	uxtb	r6, r6
 8012b86:	4283      	cmp	r3, r0
 8012b88:	4637      	mov	r7, r6
 8012b8a:	dc04      	bgt.n	8012b96 <__swbuf_r+0x42>
 8012b8c:	4621      	mov	r1, r4
 8012b8e:	4628      	mov	r0, r5
 8012b90:	f000 f926 	bl	8012de0 <_fflush_r>
 8012b94:	bb28      	cbnz	r0, 8012be2 <__swbuf_r+0x8e>
 8012b96:	68a3      	ldr	r3, [r4, #8]
 8012b98:	3b01      	subs	r3, #1
 8012b9a:	60a3      	str	r3, [r4, #8]
 8012b9c:	6823      	ldr	r3, [r4, #0]
 8012b9e:	1c5a      	adds	r2, r3, #1
 8012ba0:	6022      	str	r2, [r4, #0]
 8012ba2:	701e      	strb	r6, [r3, #0]
 8012ba4:	6963      	ldr	r3, [r4, #20]
 8012ba6:	3001      	adds	r0, #1
 8012ba8:	4283      	cmp	r3, r0
 8012baa:	d004      	beq.n	8012bb6 <__swbuf_r+0x62>
 8012bac:	89a3      	ldrh	r3, [r4, #12]
 8012bae:	07db      	lsls	r3, r3, #31
 8012bb0:	d519      	bpl.n	8012be6 <__swbuf_r+0x92>
 8012bb2:	2e0a      	cmp	r6, #10
 8012bb4:	d117      	bne.n	8012be6 <__swbuf_r+0x92>
 8012bb6:	4621      	mov	r1, r4
 8012bb8:	4628      	mov	r0, r5
 8012bba:	f000 f911 	bl	8012de0 <_fflush_r>
 8012bbe:	b190      	cbz	r0, 8012be6 <__swbuf_r+0x92>
 8012bc0:	e00f      	b.n	8012be2 <__swbuf_r+0x8e>
 8012bc2:	4b0b      	ldr	r3, [pc, #44]	; (8012bf0 <__swbuf_r+0x9c>)
 8012bc4:	429c      	cmp	r4, r3
 8012bc6:	d101      	bne.n	8012bcc <__swbuf_r+0x78>
 8012bc8:	68ac      	ldr	r4, [r5, #8]
 8012bca:	e7d0      	b.n	8012b6e <__swbuf_r+0x1a>
 8012bcc:	4b09      	ldr	r3, [pc, #36]	; (8012bf4 <__swbuf_r+0xa0>)
 8012bce:	429c      	cmp	r4, r3
 8012bd0:	bf08      	it	eq
 8012bd2:	68ec      	ldreq	r4, [r5, #12]
 8012bd4:	e7cb      	b.n	8012b6e <__swbuf_r+0x1a>
 8012bd6:	4621      	mov	r1, r4
 8012bd8:	4628      	mov	r0, r5
 8012bda:	f000 f80d 	bl	8012bf8 <__swsetup_r>
 8012bde:	2800      	cmp	r0, #0
 8012be0:	d0cc      	beq.n	8012b7c <__swbuf_r+0x28>
 8012be2:	f04f 37ff 	mov.w	r7, #4294967295
 8012be6:	4638      	mov	r0, r7
 8012be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bea:	bf00      	nop
 8012bec:	080139ec 	.word	0x080139ec
 8012bf0:	08013a0c 	.word	0x08013a0c
 8012bf4:	080139cc 	.word	0x080139cc

08012bf8 <__swsetup_r>:
 8012bf8:	4b32      	ldr	r3, [pc, #200]	; (8012cc4 <__swsetup_r+0xcc>)
 8012bfa:	b570      	push	{r4, r5, r6, lr}
 8012bfc:	681d      	ldr	r5, [r3, #0]
 8012bfe:	4606      	mov	r6, r0
 8012c00:	460c      	mov	r4, r1
 8012c02:	b125      	cbz	r5, 8012c0e <__swsetup_r+0x16>
 8012c04:	69ab      	ldr	r3, [r5, #24]
 8012c06:	b913      	cbnz	r3, 8012c0e <__swsetup_r+0x16>
 8012c08:	4628      	mov	r0, r5
 8012c0a:	f000 f953 	bl	8012eb4 <__sinit>
 8012c0e:	4b2e      	ldr	r3, [pc, #184]	; (8012cc8 <__swsetup_r+0xd0>)
 8012c10:	429c      	cmp	r4, r3
 8012c12:	d10f      	bne.n	8012c34 <__swsetup_r+0x3c>
 8012c14:	686c      	ldr	r4, [r5, #4]
 8012c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c1a:	b29a      	uxth	r2, r3
 8012c1c:	0715      	lsls	r5, r2, #28
 8012c1e:	d42c      	bmi.n	8012c7a <__swsetup_r+0x82>
 8012c20:	06d0      	lsls	r0, r2, #27
 8012c22:	d411      	bmi.n	8012c48 <__swsetup_r+0x50>
 8012c24:	2209      	movs	r2, #9
 8012c26:	6032      	str	r2, [r6, #0]
 8012c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c2c:	81a3      	strh	r3, [r4, #12]
 8012c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c32:	e03e      	b.n	8012cb2 <__swsetup_r+0xba>
 8012c34:	4b25      	ldr	r3, [pc, #148]	; (8012ccc <__swsetup_r+0xd4>)
 8012c36:	429c      	cmp	r4, r3
 8012c38:	d101      	bne.n	8012c3e <__swsetup_r+0x46>
 8012c3a:	68ac      	ldr	r4, [r5, #8]
 8012c3c:	e7eb      	b.n	8012c16 <__swsetup_r+0x1e>
 8012c3e:	4b24      	ldr	r3, [pc, #144]	; (8012cd0 <__swsetup_r+0xd8>)
 8012c40:	429c      	cmp	r4, r3
 8012c42:	bf08      	it	eq
 8012c44:	68ec      	ldreq	r4, [r5, #12]
 8012c46:	e7e6      	b.n	8012c16 <__swsetup_r+0x1e>
 8012c48:	0751      	lsls	r1, r2, #29
 8012c4a:	d512      	bpl.n	8012c72 <__swsetup_r+0x7a>
 8012c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c4e:	b141      	cbz	r1, 8012c62 <__swsetup_r+0x6a>
 8012c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c54:	4299      	cmp	r1, r3
 8012c56:	d002      	beq.n	8012c5e <__swsetup_r+0x66>
 8012c58:	4630      	mov	r0, r6
 8012c5a:	f7ff fe47 	bl	80128ec <_free_r>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	6363      	str	r3, [r4, #52]	; 0x34
 8012c62:	89a3      	ldrh	r3, [r4, #12]
 8012c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c68:	81a3      	strh	r3, [r4, #12]
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	6063      	str	r3, [r4, #4]
 8012c6e:	6923      	ldr	r3, [r4, #16]
 8012c70:	6023      	str	r3, [r4, #0]
 8012c72:	89a3      	ldrh	r3, [r4, #12]
 8012c74:	f043 0308 	orr.w	r3, r3, #8
 8012c78:	81a3      	strh	r3, [r4, #12]
 8012c7a:	6923      	ldr	r3, [r4, #16]
 8012c7c:	b94b      	cbnz	r3, 8012c92 <__swsetup_r+0x9a>
 8012c7e:	89a3      	ldrh	r3, [r4, #12]
 8012c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c88:	d003      	beq.n	8012c92 <__swsetup_r+0x9a>
 8012c8a:	4621      	mov	r1, r4
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	f000 f9bf 	bl	8013010 <__smakebuf_r>
 8012c92:	89a2      	ldrh	r2, [r4, #12]
 8012c94:	f012 0301 	ands.w	r3, r2, #1
 8012c98:	d00c      	beq.n	8012cb4 <__swsetup_r+0xbc>
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	60a3      	str	r3, [r4, #8]
 8012c9e:	6963      	ldr	r3, [r4, #20]
 8012ca0:	425b      	negs	r3, r3
 8012ca2:	61a3      	str	r3, [r4, #24]
 8012ca4:	6923      	ldr	r3, [r4, #16]
 8012ca6:	b953      	cbnz	r3, 8012cbe <__swsetup_r+0xc6>
 8012ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012cb0:	d1ba      	bne.n	8012c28 <__swsetup_r+0x30>
 8012cb2:	bd70      	pop	{r4, r5, r6, pc}
 8012cb4:	0792      	lsls	r2, r2, #30
 8012cb6:	bf58      	it	pl
 8012cb8:	6963      	ldrpl	r3, [r4, #20]
 8012cba:	60a3      	str	r3, [r4, #8]
 8012cbc:	e7f2      	b.n	8012ca4 <__swsetup_r+0xac>
 8012cbe:	2000      	movs	r0, #0
 8012cc0:	e7f7      	b.n	8012cb2 <__swsetup_r+0xba>
 8012cc2:	bf00      	nop
 8012cc4:	24000168 	.word	0x24000168
 8012cc8:	080139ec 	.word	0x080139ec
 8012ccc:	08013a0c 	.word	0x08013a0c
 8012cd0:	080139cc 	.word	0x080139cc

08012cd4 <__sflush_r>:
 8012cd4:	898a      	ldrh	r2, [r1, #12]
 8012cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cda:	4605      	mov	r5, r0
 8012cdc:	0710      	lsls	r0, r2, #28
 8012cde:	460c      	mov	r4, r1
 8012ce0:	d458      	bmi.n	8012d94 <__sflush_r+0xc0>
 8012ce2:	684b      	ldr	r3, [r1, #4]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	dc05      	bgt.n	8012cf4 <__sflush_r+0x20>
 8012ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	dc02      	bgt.n	8012cf4 <__sflush_r+0x20>
 8012cee:	2000      	movs	r0, #0
 8012cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cf6:	2e00      	cmp	r6, #0
 8012cf8:	d0f9      	beq.n	8012cee <__sflush_r+0x1a>
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d00:	682f      	ldr	r7, [r5, #0]
 8012d02:	6a21      	ldr	r1, [r4, #32]
 8012d04:	602b      	str	r3, [r5, #0]
 8012d06:	d032      	beq.n	8012d6e <__sflush_r+0x9a>
 8012d08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d0a:	89a3      	ldrh	r3, [r4, #12]
 8012d0c:	075a      	lsls	r2, r3, #29
 8012d0e:	d505      	bpl.n	8012d1c <__sflush_r+0x48>
 8012d10:	6863      	ldr	r3, [r4, #4]
 8012d12:	1ac0      	subs	r0, r0, r3
 8012d14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d16:	b10b      	cbz	r3, 8012d1c <__sflush_r+0x48>
 8012d18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d1a:	1ac0      	subs	r0, r0, r3
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	4602      	mov	r2, r0
 8012d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d22:	6a21      	ldr	r1, [r4, #32]
 8012d24:	4628      	mov	r0, r5
 8012d26:	47b0      	blx	r6
 8012d28:	1c43      	adds	r3, r0, #1
 8012d2a:	89a3      	ldrh	r3, [r4, #12]
 8012d2c:	d106      	bne.n	8012d3c <__sflush_r+0x68>
 8012d2e:	6829      	ldr	r1, [r5, #0]
 8012d30:	291d      	cmp	r1, #29
 8012d32:	d848      	bhi.n	8012dc6 <__sflush_r+0xf2>
 8012d34:	4a29      	ldr	r2, [pc, #164]	; (8012ddc <__sflush_r+0x108>)
 8012d36:	40ca      	lsrs	r2, r1
 8012d38:	07d6      	lsls	r6, r2, #31
 8012d3a:	d544      	bpl.n	8012dc6 <__sflush_r+0xf2>
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	6062      	str	r2, [r4, #4]
 8012d40:	04d9      	lsls	r1, r3, #19
 8012d42:	6922      	ldr	r2, [r4, #16]
 8012d44:	6022      	str	r2, [r4, #0]
 8012d46:	d504      	bpl.n	8012d52 <__sflush_r+0x7e>
 8012d48:	1c42      	adds	r2, r0, #1
 8012d4a:	d101      	bne.n	8012d50 <__sflush_r+0x7c>
 8012d4c:	682b      	ldr	r3, [r5, #0]
 8012d4e:	b903      	cbnz	r3, 8012d52 <__sflush_r+0x7e>
 8012d50:	6560      	str	r0, [r4, #84]	; 0x54
 8012d52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d54:	602f      	str	r7, [r5, #0]
 8012d56:	2900      	cmp	r1, #0
 8012d58:	d0c9      	beq.n	8012cee <__sflush_r+0x1a>
 8012d5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d5e:	4299      	cmp	r1, r3
 8012d60:	d002      	beq.n	8012d68 <__sflush_r+0x94>
 8012d62:	4628      	mov	r0, r5
 8012d64:	f7ff fdc2 	bl	80128ec <_free_r>
 8012d68:	2000      	movs	r0, #0
 8012d6a:	6360      	str	r0, [r4, #52]	; 0x34
 8012d6c:	e7c0      	b.n	8012cf0 <__sflush_r+0x1c>
 8012d6e:	2301      	movs	r3, #1
 8012d70:	4628      	mov	r0, r5
 8012d72:	47b0      	blx	r6
 8012d74:	1c41      	adds	r1, r0, #1
 8012d76:	d1c8      	bne.n	8012d0a <__sflush_r+0x36>
 8012d78:	682b      	ldr	r3, [r5, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d0c5      	beq.n	8012d0a <__sflush_r+0x36>
 8012d7e:	2b1d      	cmp	r3, #29
 8012d80:	d001      	beq.n	8012d86 <__sflush_r+0xb2>
 8012d82:	2b16      	cmp	r3, #22
 8012d84:	d101      	bne.n	8012d8a <__sflush_r+0xb6>
 8012d86:	602f      	str	r7, [r5, #0]
 8012d88:	e7b1      	b.n	8012cee <__sflush_r+0x1a>
 8012d8a:	89a3      	ldrh	r3, [r4, #12]
 8012d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d90:	81a3      	strh	r3, [r4, #12]
 8012d92:	e7ad      	b.n	8012cf0 <__sflush_r+0x1c>
 8012d94:	690f      	ldr	r7, [r1, #16]
 8012d96:	2f00      	cmp	r7, #0
 8012d98:	d0a9      	beq.n	8012cee <__sflush_r+0x1a>
 8012d9a:	0793      	lsls	r3, r2, #30
 8012d9c:	680e      	ldr	r6, [r1, #0]
 8012d9e:	bf08      	it	eq
 8012da0:	694b      	ldreq	r3, [r1, #20]
 8012da2:	600f      	str	r7, [r1, #0]
 8012da4:	bf18      	it	ne
 8012da6:	2300      	movne	r3, #0
 8012da8:	eba6 0807 	sub.w	r8, r6, r7
 8012dac:	608b      	str	r3, [r1, #8]
 8012dae:	f1b8 0f00 	cmp.w	r8, #0
 8012db2:	dd9c      	ble.n	8012cee <__sflush_r+0x1a>
 8012db4:	4643      	mov	r3, r8
 8012db6:	463a      	mov	r2, r7
 8012db8:	6a21      	ldr	r1, [r4, #32]
 8012dba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	47b0      	blx	r6
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	dc06      	bgt.n	8012dd2 <__sflush_r+0xfe>
 8012dc4:	89a3      	ldrh	r3, [r4, #12]
 8012dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dca:	81a3      	strh	r3, [r4, #12]
 8012dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd0:	e78e      	b.n	8012cf0 <__sflush_r+0x1c>
 8012dd2:	4407      	add	r7, r0
 8012dd4:	eba8 0800 	sub.w	r8, r8, r0
 8012dd8:	e7e9      	b.n	8012dae <__sflush_r+0xda>
 8012dda:	bf00      	nop
 8012ddc:	20400001 	.word	0x20400001

08012de0 <_fflush_r>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	690b      	ldr	r3, [r1, #16]
 8012de4:	4605      	mov	r5, r0
 8012de6:	460c      	mov	r4, r1
 8012de8:	b1db      	cbz	r3, 8012e22 <_fflush_r+0x42>
 8012dea:	b118      	cbz	r0, 8012df4 <_fflush_r+0x14>
 8012dec:	6983      	ldr	r3, [r0, #24]
 8012dee:	b90b      	cbnz	r3, 8012df4 <_fflush_r+0x14>
 8012df0:	f000 f860 	bl	8012eb4 <__sinit>
 8012df4:	4b0c      	ldr	r3, [pc, #48]	; (8012e28 <_fflush_r+0x48>)
 8012df6:	429c      	cmp	r4, r3
 8012df8:	d109      	bne.n	8012e0e <_fflush_r+0x2e>
 8012dfa:	686c      	ldr	r4, [r5, #4]
 8012dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e00:	b17b      	cbz	r3, 8012e22 <_fflush_r+0x42>
 8012e02:	4621      	mov	r1, r4
 8012e04:	4628      	mov	r0, r5
 8012e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e0a:	f7ff bf63 	b.w	8012cd4 <__sflush_r>
 8012e0e:	4b07      	ldr	r3, [pc, #28]	; (8012e2c <_fflush_r+0x4c>)
 8012e10:	429c      	cmp	r4, r3
 8012e12:	d101      	bne.n	8012e18 <_fflush_r+0x38>
 8012e14:	68ac      	ldr	r4, [r5, #8]
 8012e16:	e7f1      	b.n	8012dfc <_fflush_r+0x1c>
 8012e18:	4b05      	ldr	r3, [pc, #20]	; (8012e30 <_fflush_r+0x50>)
 8012e1a:	429c      	cmp	r4, r3
 8012e1c:	bf08      	it	eq
 8012e1e:	68ec      	ldreq	r4, [r5, #12]
 8012e20:	e7ec      	b.n	8012dfc <_fflush_r+0x1c>
 8012e22:	2000      	movs	r0, #0
 8012e24:	bd38      	pop	{r3, r4, r5, pc}
 8012e26:	bf00      	nop
 8012e28:	080139ec 	.word	0x080139ec
 8012e2c:	08013a0c 	.word	0x08013a0c
 8012e30:	080139cc 	.word	0x080139cc

08012e34 <std>:
 8012e34:	2300      	movs	r3, #0
 8012e36:	b510      	push	{r4, lr}
 8012e38:	4604      	mov	r4, r0
 8012e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8012e3e:	6083      	str	r3, [r0, #8]
 8012e40:	8181      	strh	r1, [r0, #12]
 8012e42:	6643      	str	r3, [r0, #100]	; 0x64
 8012e44:	81c2      	strh	r2, [r0, #14]
 8012e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e4a:	6183      	str	r3, [r0, #24]
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	2208      	movs	r2, #8
 8012e50:	305c      	adds	r0, #92	; 0x5c
 8012e52:	f7ff fd42 	bl	80128da <memset>
 8012e56:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <std+0x38>)
 8012e58:	6263      	str	r3, [r4, #36]	; 0x24
 8012e5a:	4b05      	ldr	r3, [pc, #20]	; (8012e70 <std+0x3c>)
 8012e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e5e:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <std+0x40>)
 8012e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e62:	4b05      	ldr	r3, [pc, #20]	; (8012e78 <std+0x44>)
 8012e64:	6224      	str	r4, [r4, #32]
 8012e66:	6323      	str	r3, [r4, #48]	; 0x30
 8012e68:	bd10      	pop	{r4, pc}
 8012e6a:	bf00      	nop
 8012e6c:	08013625 	.word	0x08013625
 8012e70:	08013647 	.word	0x08013647
 8012e74:	0801367f 	.word	0x0801367f
 8012e78:	080136a3 	.word	0x080136a3

08012e7c <_cleanup_r>:
 8012e7c:	4901      	ldr	r1, [pc, #4]	; (8012e84 <_cleanup_r+0x8>)
 8012e7e:	f000 b885 	b.w	8012f8c <_fwalk_reent>
 8012e82:	bf00      	nop
 8012e84:	08012de1 	.word	0x08012de1

08012e88 <__sfmoreglue>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	1e4a      	subs	r2, r1, #1
 8012e8c:	2568      	movs	r5, #104	; 0x68
 8012e8e:	4355      	muls	r5, r2
 8012e90:	460e      	mov	r6, r1
 8012e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e96:	f7ff fd77 	bl	8012988 <_malloc_r>
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	b140      	cbz	r0, 8012eb0 <__sfmoreglue+0x28>
 8012e9e:	2100      	movs	r1, #0
 8012ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8012ea4:	300c      	adds	r0, #12
 8012ea6:	60a0      	str	r0, [r4, #8]
 8012ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012eac:	f7ff fd15 	bl	80128da <memset>
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	bd70      	pop	{r4, r5, r6, pc}

08012eb4 <__sinit>:
 8012eb4:	6983      	ldr	r3, [r0, #24]
 8012eb6:	b510      	push	{r4, lr}
 8012eb8:	4604      	mov	r4, r0
 8012eba:	bb33      	cbnz	r3, 8012f0a <__sinit+0x56>
 8012ebc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012ec0:	6503      	str	r3, [r0, #80]	; 0x50
 8012ec2:	4b12      	ldr	r3, [pc, #72]	; (8012f0c <__sinit+0x58>)
 8012ec4:	4a12      	ldr	r2, [pc, #72]	; (8012f10 <__sinit+0x5c>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	6282      	str	r2, [r0, #40]	; 0x28
 8012eca:	4298      	cmp	r0, r3
 8012ecc:	bf04      	itt	eq
 8012ece:	2301      	moveq	r3, #1
 8012ed0:	6183      	streq	r3, [r0, #24]
 8012ed2:	f000 f81f 	bl	8012f14 <__sfp>
 8012ed6:	6060      	str	r0, [r4, #4]
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f000 f81b 	bl	8012f14 <__sfp>
 8012ede:	60a0      	str	r0, [r4, #8]
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 f817 	bl	8012f14 <__sfp>
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	60e0      	str	r0, [r4, #12]
 8012eea:	2104      	movs	r1, #4
 8012eec:	6860      	ldr	r0, [r4, #4]
 8012eee:	f7ff ffa1 	bl	8012e34 <std>
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	2109      	movs	r1, #9
 8012ef6:	68a0      	ldr	r0, [r4, #8]
 8012ef8:	f7ff ff9c 	bl	8012e34 <std>
 8012efc:	2202      	movs	r2, #2
 8012efe:	2112      	movs	r1, #18
 8012f00:	68e0      	ldr	r0, [r4, #12]
 8012f02:	f7ff ff97 	bl	8012e34 <std>
 8012f06:	2301      	movs	r3, #1
 8012f08:	61a3      	str	r3, [r4, #24]
 8012f0a:	bd10      	pop	{r4, pc}
 8012f0c:	080139c8 	.word	0x080139c8
 8012f10:	08012e7d 	.word	0x08012e7d

08012f14 <__sfp>:
 8012f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f16:	4b1b      	ldr	r3, [pc, #108]	; (8012f84 <__sfp+0x70>)
 8012f18:	681e      	ldr	r6, [r3, #0]
 8012f1a:	69b3      	ldr	r3, [r6, #24]
 8012f1c:	4607      	mov	r7, r0
 8012f1e:	b913      	cbnz	r3, 8012f26 <__sfp+0x12>
 8012f20:	4630      	mov	r0, r6
 8012f22:	f7ff ffc7 	bl	8012eb4 <__sinit>
 8012f26:	3648      	adds	r6, #72	; 0x48
 8012f28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	d503      	bpl.n	8012f38 <__sfp+0x24>
 8012f30:	6833      	ldr	r3, [r6, #0]
 8012f32:	b133      	cbz	r3, 8012f42 <__sfp+0x2e>
 8012f34:	6836      	ldr	r6, [r6, #0]
 8012f36:	e7f7      	b.n	8012f28 <__sfp+0x14>
 8012f38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f3c:	b16d      	cbz	r5, 8012f5a <__sfp+0x46>
 8012f3e:	3468      	adds	r4, #104	; 0x68
 8012f40:	e7f4      	b.n	8012f2c <__sfp+0x18>
 8012f42:	2104      	movs	r1, #4
 8012f44:	4638      	mov	r0, r7
 8012f46:	f7ff ff9f 	bl	8012e88 <__sfmoreglue>
 8012f4a:	6030      	str	r0, [r6, #0]
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	d1f1      	bne.n	8012f34 <__sfp+0x20>
 8012f50:	230c      	movs	r3, #12
 8012f52:	603b      	str	r3, [r7, #0]
 8012f54:	4604      	mov	r4, r0
 8012f56:	4620      	mov	r0, r4
 8012f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f5a:	4b0b      	ldr	r3, [pc, #44]	; (8012f88 <__sfp+0x74>)
 8012f5c:	6665      	str	r5, [r4, #100]	; 0x64
 8012f5e:	e9c4 5500 	strd	r5, r5, [r4]
 8012f62:	60a5      	str	r5, [r4, #8]
 8012f64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012f68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012f6c:	2208      	movs	r2, #8
 8012f6e:	4629      	mov	r1, r5
 8012f70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f74:	f7ff fcb1 	bl	80128da <memset>
 8012f78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f80:	e7e9      	b.n	8012f56 <__sfp+0x42>
 8012f82:	bf00      	nop
 8012f84:	080139c8 	.word	0x080139c8
 8012f88:	ffff0001 	.word	0xffff0001

08012f8c <_fwalk_reent>:
 8012f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f90:	4680      	mov	r8, r0
 8012f92:	4689      	mov	r9, r1
 8012f94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f98:	2600      	movs	r6, #0
 8012f9a:	b914      	cbnz	r4, 8012fa2 <_fwalk_reent+0x16>
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fa2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012fa6:	3f01      	subs	r7, #1
 8012fa8:	d501      	bpl.n	8012fae <_fwalk_reent+0x22>
 8012faa:	6824      	ldr	r4, [r4, #0]
 8012fac:	e7f5      	b.n	8012f9a <_fwalk_reent+0xe>
 8012fae:	89ab      	ldrh	r3, [r5, #12]
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d907      	bls.n	8012fc4 <_fwalk_reent+0x38>
 8012fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012fb8:	3301      	adds	r3, #1
 8012fba:	d003      	beq.n	8012fc4 <_fwalk_reent+0x38>
 8012fbc:	4629      	mov	r1, r5
 8012fbe:	4640      	mov	r0, r8
 8012fc0:	47c8      	blx	r9
 8012fc2:	4306      	orrs	r6, r0
 8012fc4:	3568      	adds	r5, #104	; 0x68
 8012fc6:	e7ee      	b.n	8012fa6 <_fwalk_reent+0x1a>

08012fc8 <__swhatbuf_r>:
 8012fc8:	b570      	push	{r4, r5, r6, lr}
 8012fca:	460e      	mov	r6, r1
 8012fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fd0:	2900      	cmp	r1, #0
 8012fd2:	b096      	sub	sp, #88	; 0x58
 8012fd4:	4614      	mov	r4, r2
 8012fd6:	461d      	mov	r5, r3
 8012fd8:	da07      	bge.n	8012fea <__swhatbuf_r+0x22>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	602b      	str	r3, [r5, #0]
 8012fde:	89b3      	ldrh	r3, [r6, #12]
 8012fe0:	061a      	lsls	r2, r3, #24
 8012fe2:	d410      	bmi.n	8013006 <__swhatbuf_r+0x3e>
 8012fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fe8:	e00e      	b.n	8013008 <__swhatbuf_r+0x40>
 8012fea:	466a      	mov	r2, sp
 8012fec:	f000 fb80 	bl	80136f0 <_fstat_r>
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	dbf2      	blt.n	8012fda <__swhatbuf_r+0x12>
 8012ff4:	9a01      	ldr	r2, [sp, #4]
 8012ff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012ffa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012ffe:	425a      	negs	r2, r3
 8013000:	415a      	adcs	r2, r3
 8013002:	602a      	str	r2, [r5, #0]
 8013004:	e7ee      	b.n	8012fe4 <__swhatbuf_r+0x1c>
 8013006:	2340      	movs	r3, #64	; 0x40
 8013008:	2000      	movs	r0, #0
 801300a:	6023      	str	r3, [r4, #0]
 801300c:	b016      	add	sp, #88	; 0x58
 801300e:	bd70      	pop	{r4, r5, r6, pc}

08013010 <__smakebuf_r>:
 8013010:	898b      	ldrh	r3, [r1, #12]
 8013012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013014:	079d      	lsls	r5, r3, #30
 8013016:	4606      	mov	r6, r0
 8013018:	460c      	mov	r4, r1
 801301a:	d507      	bpl.n	801302c <__smakebuf_r+0x1c>
 801301c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013020:	6023      	str	r3, [r4, #0]
 8013022:	6123      	str	r3, [r4, #16]
 8013024:	2301      	movs	r3, #1
 8013026:	6163      	str	r3, [r4, #20]
 8013028:	b002      	add	sp, #8
 801302a:	bd70      	pop	{r4, r5, r6, pc}
 801302c:	ab01      	add	r3, sp, #4
 801302e:	466a      	mov	r2, sp
 8013030:	f7ff ffca 	bl	8012fc8 <__swhatbuf_r>
 8013034:	9900      	ldr	r1, [sp, #0]
 8013036:	4605      	mov	r5, r0
 8013038:	4630      	mov	r0, r6
 801303a:	f7ff fca5 	bl	8012988 <_malloc_r>
 801303e:	b948      	cbnz	r0, 8013054 <__smakebuf_r+0x44>
 8013040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013044:	059a      	lsls	r2, r3, #22
 8013046:	d4ef      	bmi.n	8013028 <__smakebuf_r+0x18>
 8013048:	f023 0303 	bic.w	r3, r3, #3
 801304c:	f043 0302 	orr.w	r3, r3, #2
 8013050:	81a3      	strh	r3, [r4, #12]
 8013052:	e7e3      	b.n	801301c <__smakebuf_r+0xc>
 8013054:	4b0d      	ldr	r3, [pc, #52]	; (801308c <__smakebuf_r+0x7c>)
 8013056:	62b3      	str	r3, [r6, #40]	; 0x28
 8013058:	89a3      	ldrh	r3, [r4, #12]
 801305a:	6020      	str	r0, [r4, #0]
 801305c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013060:	81a3      	strh	r3, [r4, #12]
 8013062:	9b00      	ldr	r3, [sp, #0]
 8013064:	6163      	str	r3, [r4, #20]
 8013066:	9b01      	ldr	r3, [sp, #4]
 8013068:	6120      	str	r0, [r4, #16]
 801306a:	b15b      	cbz	r3, 8013084 <__smakebuf_r+0x74>
 801306c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013070:	4630      	mov	r0, r6
 8013072:	f000 fb4f 	bl	8013714 <_isatty_r>
 8013076:	b128      	cbz	r0, 8013084 <__smakebuf_r+0x74>
 8013078:	89a3      	ldrh	r3, [r4, #12]
 801307a:	f023 0303 	bic.w	r3, r3, #3
 801307e:	f043 0301 	orr.w	r3, r3, #1
 8013082:	81a3      	strh	r3, [r4, #12]
 8013084:	89a3      	ldrh	r3, [r4, #12]
 8013086:	431d      	orrs	r5, r3
 8013088:	81a5      	strh	r5, [r4, #12]
 801308a:	e7cd      	b.n	8013028 <__smakebuf_r+0x18>
 801308c:	08012e7d 	.word	0x08012e7d

08013090 <__malloc_lock>:
 8013090:	4770      	bx	lr

08013092 <__malloc_unlock>:
 8013092:	4770      	bx	lr

08013094 <__sfputc_r>:
 8013094:	6893      	ldr	r3, [r2, #8]
 8013096:	3b01      	subs	r3, #1
 8013098:	2b00      	cmp	r3, #0
 801309a:	b410      	push	{r4}
 801309c:	6093      	str	r3, [r2, #8]
 801309e:	da08      	bge.n	80130b2 <__sfputc_r+0x1e>
 80130a0:	6994      	ldr	r4, [r2, #24]
 80130a2:	42a3      	cmp	r3, r4
 80130a4:	db01      	blt.n	80130aa <__sfputc_r+0x16>
 80130a6:	290a      	cmp	r1, #10
 80130a8:	d103      	bne.n	80130b2 <__sfputc_r+0x1e>
 80130aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130ae:	f7ff bd51 	b.w	8012b54 <__swbuf_r>
 80130b2:	6813      	ldr	r3, [r2, #0]
 80130b4:	1c58      	adds	r0, r3, #1
 80130b6:	6010      	str	r0, [r2, #0]
 80130b8:	7019      	strb	r1, [r3, #0]
 80130ba:	4608      	mov	r0, r1
 80130bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130c0:	4770      	bx	lr

080130c2 <__sfputs_r>:
 80130c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c4:	4606      	mov	r6, r0
 80130c6:	460f      	mov	r7, r1
 80130c8:	4614      	mov	r4, r2
 80130ca:	18d5      	adds	r5, r2, r3
 80130cc:	42ac      	cmp	r4, r5
 80130ce:	d101      	bne.n	80130d4 <__sfputs_r+0x12>
 80130d0:	2000      	movs	r0, #0
 80130d2:	e007      	b.n	80130e4 <__sfputs_r+0x22>
 80130d4:	463a      	mov	r2, r7
 80130d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130da:	4630      	mov	r0, r6
 80130dc:	f7ff ffda 	bl	8013094 <__sfputc_r>
 80130e0:	1c43      	adds	r3, r0, #1
 80130e2:	d1f3      	bne.n	80130cc <__sfputs_r+0xa>
 80130e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080130e8 <_vfiprintf_r>:
 80130e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ec:	460c      	mov	r4, r1
 80130ee:	b09d      	sub	sp, #116	; 0x74
 80130f0:	4617      	mov	r7, r2
 80130f2:	461d      	mov	r5, r3
 80130f4:	4606      	mov	r6, r0
 80130f6:	b118      	cbz	r0, 8013100 <_vfiprintf_r+0x18>
 80130f8:	6983      	ldr	r3, [r0, #24]
 80130fa:	b90b      	cbnz	r3, 8013100 <_vfiprintf_r+0x18>
 80130fc:	f7ff feda 	bl	8012eb4 <__sinit>
 8013100:	4b7c      	ldr	r3, [pc, #496]	; (80132f4 <_vfiprintf_r+0x20c>)
 8013102:	429c      	cmp	r4, r3
 8013104:	d158      	bne.n	80131b8 <_vfiprintf_r+0xd0>
 8013106:	6874      	ldr	r4, [r6, #4]
 8013108:	89a3      	ldrh	r3, [r4, #12]
 801310a:	0718      	lsls	r0, r3, #28
 801310c:	d55e      	bpl.n	80131cc <_vfiprintf_r+0xe4>
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d05b      	beq.n	80131cc <_vfiprintf_r+0xe4>
 8013114:	2300      	movs	r3, #0
 8013116:	9309      	str	r3, [sp, #36]	; 0x24
 8013118:	2320      	movs	r3, #32
 801311a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801311e:	2330      	movs	r3, #48	; 0x30
 8013120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013124:	9503      	str	r5, [sp, #12]
 8013126:	f04f 0b01 	mov.w	fp, #1
 801312a:	46b8      	mov	r8, r7
 801312c:	4645      	mov	r5, r8
 801312e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013132:	b10b      	cbz	r3, 8013138 <_vfiprintf_r+0x50>
 8013134:	2b25      	cmp	r3, #37	; 0x25
 8013136:	d154      	bne.n	80131e2 <_vfiprintf_r+0xfa>
 8013138:	ebb8 0a07 	subs.w	sl, r8, r7
 801313c:	d00b      	beq.n	8013156 <_vfiprintf_r+0x6e>
 801313e:	4653      	mov	r3, sl
 8013140:	463a      	mov	r2, r7
 8013142:	4621      	mov	r1, r4
 8013144:	4630      	mov	r0, r6
 8013146:	f7ff ffbc 	bl	80130c2 <__sfputs_r>
 801314a:	3001      	adds	r0, #1
 801314c:	f000 80c2 	beq.w	80132d4 <_vfiprintf_r+0x1ec>
 8013150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013152:	4453      	add	r3, sl
 8013154:	9309      	str	r3, [sp, #36]	; 0x24
 8013156:	f898 3000 	ldrb.w	r3, [r8]
 801315a:	2b00      	cmp	r3, #0
 801315c:	f000 80ba 	beq.w	80132d4 <_vfiprintf_r+0x1ec>
 8013160:	2300      	movs	r3, #0
 8013162:	f04f 32ff 	mov.w	r2, #4294967295
 8013166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801316a:	9304      	str	r3, [sp, #16]
 801316c:	9307      	str	r3, [sp, #28]
 801316e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013172:	931a      	str	r3, [sp, #104]	; 0x68
 8013174:	46a8      	mov	r8, r5
 8013176:	2205      	movs	r2, #5
 8013178:	f818 1b01 	ldrb.w	r1, [r8], #1
 801317c:	485e      	ldr	r0, [pc, #376]	; (80132f8 <_vfiprintf_r+0x210>)
 801317e:	f7ed f8af 	bl	80002e0 <memchr>
 8013182:	9b04      	ldr	r3, [sp, #16]
 8013184:	bb78      	cbnz	r0, 80131e6 <_vfiprintf_r+0xfe>
 8013186:	06d9      	lsls	r1, r3, #27
 8013188:	bf44      	itt	mi
 801318a:	2220      	movmi	r2, #32
 801318c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013190:	071a      	lsls	r2, r3, #28
 8013192:	bf44      	itt	mi
 8013194:	222b      	movmi	r2, #43	; 0x2b
 8013196:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801319a:	782a      	ldrb	r2, [r5, #0]
 801319c:	2a2a      	cmp	r2, #42	; 0x2a
 801319e:	d02a      	beq.n	80131f6 <_vfiprintf_r+0x10e>
 80131a0:	9a07      	ldr	r2, [sp, #28]
 80131a2:	46a8      	mov	r8, r5
 80131a4:	2000      	movs	r0, #0
 80131a6:	250a      	movs	r5, #10
 80131a8:	4641      	mov	r1, r8
 80131aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131ae:	3b30      	subs	r3, #48	; 0x30
 80131b0:	2b09      	cmp	r3, #9
 80131b2:	d969      	bls.n	8013288 <_vfiprintf_r+0x1a0>
 80131b4:	b360      	cbz	r0, 8013210 <_vfiprintf_r+0x128>
 80131b6:	e024      	b.n	8013202 <_vfiprintf_r+0x11a>
 80131b8:	4b50      	ldr	r3, [pc, #320]	; (80132fc <_vfiprintf_r+0x214>)
 80131ba:	429c      	cmp	r4, r3
 80131bc:	d101      	bne.n	80131c2 <_vfiprintf_r+0xda>
 80131be:	68b4      	ldr	r4, [r6, #8]
 80131c0:	e7a2      	b.n	8013108 <_vfiprintf_r+0x20>
 80131c2:	4b4f      	ldr	r3, [pc, #316]	; (8013300 <_vfiprintf_r+0x218>)
 80131c4:	429c      	cmp	r4, r3
 80131c6:	bf08      	it	eq
 80131c8:	68f4      	ldreq	r4, [r6, #12]
 80131ca:	e79d      	b.n	8013108 <_vfiprintf_r+0x20>
 80131cc:	4621      	mov	r1, r4
 80131ce:	4630      	mov	r0, r6
 80131d0:	f7ff fd12 	bl	8012bf8 <__swsetup_r>
 80131d4:	2800      	cmp	r0, #0
 80131d6:	d09d      	beq.n	8013114 <_vfiprintf_r+0x2c>
 80131d8:	f04f 30ff 	mov.w	r0, #4294967295
 80131dc:	b01d      	add	sp, #116	; 0x74
 80131de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e2:	46a8      	mov	r8, r5
 80131e4:	e7a2      	b.n	801312c <_vfiprintf_r+0x44>
 80131e6:	4a44      	ldr	r2, [pc, #272]	; (80132f8 <_vfiprintf_r+0x210>)
 80131e8:	1a80      	subs	r0, r0, r2
 80131ea:	fa0b f000 	lsl.w	r0, fp, r0
 80131ee:	4318      	orrs	r0, r3
 80131f0:	9004      	str	r0, [sp, #16]
 80131f2:	4645      	mov	r5, r8
 80131f4:	e7be      	b.n	8013174 <_vfiprintf_r+0x8c>
 80131f6:	9a03      	ldr	r2, [sp, #12]
 80131f8:	1d11      	adds	r1, r2, #4
 80131fa:	6812      	ldr	r2, [r2, #0]
 80131fc:	9103      	str	r1, [sp, #12]
 80131fe:	2a00      	cmp	r2, #0
 8013200:	db01      	blt.n	8013206 <_vfiprintf_r+0x11e>
 8013202:	9207      	str	r2, [sp, #28]
 8013204:	e004      	b.n	8013210 <_vfiprintf_r+0x128>
 8013206:	4252      	negs	r2, r2
 8013208:	f043 0302 	orr.w	r3, r3, #2
 801320c:	9207      	str	r2, [sp, #28]
 801320e:	9304      	str	r3, [sp, #16]
 8013210:	f898 3000 	ldrb.w	r3, [r8]
 8013214:	2b2e      	cmp	r3, #46	; 0x2e
 8013216:	d10e      	bne.n	8013236 <_vfiprintf_r+0x14e>
 8013218:	f898 3001 	ldrb.w	r3, [r8, #1]
 801321c:	2b2a      	cmp	r3, #42	; 0x2a
 801321e:	d138      	bne.n	8013292 <_vfiprintf_r+0x1aa>
 8013220:	9b03      	ldr	r3, [sp, #12]
 8013222:	1d1a      	adds	r2, r3, #4
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	9203      	str	r2, [sp, #12]
 8013228:	2b00      	cmp	r3, #0
 801322a:	bfb8      	it	lt
 801322c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013230:	f108 0802 	add.w	r8, r8, #2
 8013234:	9305      	str	r3, [sp, #20]
 8013236:	4d33      	ldr	r5, [pc, #204]	; (8013304 <_vfiprintf_r+0x21c>)
 8013238:	f898 1000 	ldrb.w	r1, [r8]
 801323c:	2203      	movs	r2, #3
 801323e:	4628      	mov	r0, r5
 8013240:	f7ed f84e 	bl	80002e0 <memchr>
 8013244:	b140      	cbz	r0, 8013258 <_vfiprintf_r+0x170>
 8013246:	2340      	movs	r3, #64	; 0x40
 8013248:	1b40      	subs	r0, r0, r5
 801324a:	fa03 f000 	lsl.w	r0, r3, r0
 801324e:	9b04      	ldr	r3, [sp, #16]
 8013250:	4303      	orrs	r3, r0
 8013252:	f108 0801 	add.w	r8, r8, #1
 8013256:	9304      	str	r3, [sp, #16]
 8013258:	f898 1000 	ldrb.w	r1, [r8]
 801325c:	482a      	ldr	r0, [pc, #168]	; (8013308 <_vfiprintf_r+0x220>)
 801325e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013262:	2206      	movs	r2, #6
 8013264:	f108 0701 	add.w	r7, r8, #1
 8013268:	f7ed f83a 	bl	80002e0 <memchr>
 801326c:	2800      	cmp	r0, #0
 801326e:	d037      	beq.n	80132e0 <_vfiprintf_r+0x1f8>
 8013270:	4b26      	ldr	r3, [pc, #152]	; (801330c <_vfiprintf_r+0x224>)
 8013272:	bb1b      	cbnz	r3, 80132bc <_vfiprintf_r+0x1d4>
 8013274:	9b03      	ldr	r3, [sp, #12]
 8013276:	3307      	adds	r3, #7
 8013278:	f023 0307 	bic.w	r3, r3, #7
 801327c:	3308      	adds	r3, #8
 801327e:	9303      	str	r3, [sp, #12]
 8013280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013282:	444b      	add	r3, r9
 8013284:	9309      	str	r3, [sp, #36]	; 0x24
 8013286:	e750      	b.n	801312a <_vfiprintf_r+0x42>
 8013288:	fb05 3202 	mla	r2, r5, r2, r3
 801328c:	2001      	movs	r0, #1
 801328e:	4688      	mov	r8, r1
 8013290:	e78a      	b.n	80131a8 <_vfiprintf_r+0xc0>
 8013292:	2300      	movs	r3, #0
 8013294:	f108 0801 	add.w	r8, r8, #1
 8013298:	9305      	str	r3, [sp, #20]
 801329a:	4619      	mov	r1, r3
 801329c:	250a      	movs	r5, #10
 801329e:	4640      	mov	r0, r8
 80132a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132a4:	3a30      	subs	r2, #48	; 0x30
 80132a6:	2a09      	cmp	r2, #9
 80132a8:	d903      	bls.n	80132b2 <_vfiprintf_r+0x1ca>
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d0c3      	beq.n	8013236 <_vfiprintf_r+0x14e>
 80132ae:	9105      	str	r1, [sp, #20]
 80132b0:	e7c1      	b.n	8013236 <_vfiprintf_r+0x14e>
 80132b2:	fb05 2101 	mla	r1, r5, r1, r2
 80132b6:	2301      	movs	r3, #1
 80132b8:	4680      	mov	r8, r0
 80132ba:	e7f0      	b.n	801329e <_vfiprintf_r+0x1b6>
 80132bc:	ab03      	add	r3, sp, #12
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	4622      	mov	r2, r4
 80132c2:	4b13      	ldr	r3, [pc, #76]	; (8013310 <_vfiprintf_r+0x228>)
 80132c4:	a904      	add	r1, sp, #16
 80132c6:	4630      	mov	r0, r6
 80132c8:	f3af 8000 	nop.w
 80132cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80132d0:	4681      	mov	r9, r0
 80132d2:	d1d5      	bne.n	8013280 <_vfiprintf_r+0x198>
 80132d4:	89a3      	ldrh	r3, [r4, #12]
 80132d6:	065b      	lsls	r3, r3, #25
 80132d8:	f53f af7e 	bmi.w	80131d8 <_vfiprintf_r+0xf0>
 80132dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132de:	e77d      	b.n	80131dc <_vfiprintf_r+0xf4>
 80132e0:	ab03      	add	r3, sp, #12
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	4622      	mov	r2, r4
 80132e6:	4b0a      	ldr	r3, [pc, #40]	; (8013310 <_vfiprintf_r+0x228>)
 80132e8:	a904      	add	r1, sp, #16
 80132ea:	4630      	mov	r0, r6
 80132ec:	f000 f888 	bl	8013400 <_printf_i>
 80132f0:	e7ec      	b.n	80132cc <_vfiprintf_r+0x1e4>
 80132f2:	bf00      	nop
 80132f4:	080139ec 	.word	0x080139ec
 80132f8:	08013a2c 	.word	0x08013a2c
 80132fc:	08013a0c 	.word	0x08013a0c
 8013300:	080139cc 	.word	0x080139cc
 8013304:	08013a32 	.word	0x08013a32
 8013308:	08013a36 	.word	0x08013a36
 801330c:	00000000 	.word	0x00000000
 8013310:	080130c3 	.word	0x080130c3

08013314 <_printf_common>:
 8013314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013318:	4691      	mov	r9, r2
 801331a:	461f      	mov	r7, r3
 801331c:	688a      	ldr	r2, [r1, #8]
 801331e:	690b      	ldr	r3, [r1, #16]
 8013320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013324:	4293      	cmp	r3, r2
 8013326:	bfb8      	it	lt
 8013328:	4613      	movlt	r3, r2
 801332a:	f8c9 3000 	str.w	r3, [r9]
 801332e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013332:	4606      	mov	r6, r0
 8013334:	460c      	mov	r4, r1
 8013336:	b112      	cbz	r2, 801333e <_printf_common+0x2a>
 8013338:	3301      	adds	r3, #1
 801333a:	f8c9 3000 	str.w	r3, [r9]
 801333e:	6823      	ldr	r3, [r4, #0]
 8013340:	0699      	lsls	r1, r3, #26
 8013342:	bf42      	ittt	mi
 8013344:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013348:	3302      	addmi	r3, #2
 801334a:	f8c9 3000 	strmi.w	r3, [r9]
 801334e:	6825      	ldr	r5, [r4, #0]
 8013350:	f015 0506 	ands.w	r5, r5, #6
 8013354:	d107      	bne.n	8013366 <_printf_common+0x52>
 8013356:	f104 0a19 	add.w	sl, r4, #25
 801335a:	68e3      	ldr	r3, [r4, #12]
 801335c:	f8d9 2000 	ldr.w	r2, [r9]
 8013360:	1a9b      	subs	r3, r3, r2
 8013362:	42ab      	cmp	r3, r5
 8013364:	dc28      	bgt.n	80133b8 <_printf_common+0xa4>
 8013366:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801336a:	6822      	ldr	r2, [r4, #0]
 801336c:	3300      	adds	r3, #0
 801336e:	bf18      	it	ne
 8013370:	2301      	movne	r3, #1
 8013372:	0692      	lsls	r2, r2, #26
 8013374:	d42d      	bmi.n	80133d2 <_printf_common+0xbe>
 8013376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801337a:	4639      	mov	r1, r7
 801337c:	4630      	mov	r0, r6
 801337e:	47c0      	blx	r8
 8013380:	3001      	adds	r0, #1
 8013382:	d020      	beq.n	80133c6 <_printf_common+0xb2>
 8013384:	6823      	ldr	r3, [r4, #0]
 8013386:	68e5      	ldr	r5, [r4, #12]
 8013388:	f8d9 2000 	ldr.w	r2, [r9]
 801338c:	f003 0306 	and.w	r3, r3, #6
 8013390:	2b04      	cmp	r3, #4
 8013392:	bf08      	it	eq
 8013394:	1aad      	subeq	r5, r5, r2
 8013396:	68a3      	ldr	r3, [r4, #8]
 8013398:	6922      	ldr	r2, [r4, #16]
 801339a:	bf0c      	ite	eq
 801339c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80133a0:	2500      	movne	r5, #0
 80133a2:	4293      	cmp	r3, r2
 80133a4:	bfc4      	itt	gt
 80133a6:	1a9b      	subgt	r3, r3, r2
 80133a8:	18ed      	addgt	r5, r5, r3
 80133aa:	f04f 0900 	mov.w	r9, #0
 80133ae:	341a      	adds	r4, #26
 80133b0:	454d      	cmp	r5, r9
 80133b2:	d11a      	bne.n	80133ea <_printf_common+0xd6>
 80133b4:	2000      	movs	r0, #0
 80133b6:	e008      	b.n	80133ca <_printf_common+0xb6>
 80133b8:	2301      	movs	r3, #1
 80133ba:	4652      	mov	r2, sl
 80133bc:	4639      	mov	r1, r7
 80133be:	4630      	mov	r0, r6
 80133c0:	47c0      	blx	r8
 80133c2:	3001      	adds	r0, #1
 80133c4:	d103      	bne.n	80133ce <_printf_common+0xba>
 80133c6:	f04f 30ff 	mov.w	r0, #4294967295
 80133ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133ce:	3501      	adds	r5, #1
 80133d0:	e7c3      	b.n	801335a <_printf_common+0x46>
 80133d2:	18e1      	adds	r1, r4, r3
 80133d4:	1c5a      	adds	r2, r3, #1
 80133d6:	2030      	movs	r0, #48	; 0x30
 80133d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80133dc:	4422      	add	r2, r4
 80133de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80133e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80133e6:	3302      	adds	r3, #2
 80133e8:	e7c5      	b.n	8013376 <_printf_common+0x62>
 80133ea:	2301      	movs	r3, #1
 80133ec:	4622      	mov	r2, r4
 80133ee:	4639      	mov	r1, r7
 80133f0:	4630      	mov	r0, r6
 80133f2:	47c0      	blx	r8
 80133f4:	3001      	adds	r0, #1
 80133f6:	d0e6      	beq.n	80133c6 <_printf_common+0xb2>
 80133f8:	f109 0901 	add.w	r9, r9, #1
 80133fc:	e7d8      	b.n	80133b0 <_printf_common+0x9c>
	...

08013400 <_printf_i>:
 8013400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013404:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013408:	460c      	mov	r4, r1
 801340a:	7e09      	ldrb	r1, [r1, #24]
 801340c:	b085      	sub	sp, #20
 801340e:	296e      	cmp	r1, #110	; 0x6e
 8013410:	4617      	mov	r7, r2
 8013412:	4606      	mov	r6, r0
 8013414:	4698      	mov	r8, r3
 8013416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013418:	f000 80b3 	beq.w	8013582 <_printf_i+0x182>
 801341c:	d822      	bhi.n	8013464 <_printf_i+0x64>
 801341e:	2963      	cmp	r1, #99	; 0x63
 8013420:	d036      	beq.n	8013490 <_printf_i+0x90>
 8013422:	d80a      	bhi.n	801343a <_printf_i+0x3a>
 8013424:	2900      	cmp	r1, #0
 8013426:	f000 80b9 	beq.w	801359c <_printf_i+0x19c>
 801342a:	2958      	cmp	r1, #88	; 0x58
 801342c:	f000 8083 	beq.w	8013536 <_printf_i+0x136>
 8013430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013434:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013438:	e032      	b.n	80134a0 <_printf_i+0xa0>
 801343a:	2964      	cmp	r1, #100	; 0x64
 801343c:	d001      	beq.n	8013442 <_printf_i+0x42>
 801343e:	2969      	cmp	r1, #105	; 0x69
 8013440:	d1f6      	bne.n	8013430 <_printf_i+0x30>
 8013442:	6820      	ldr	r0, [r4, #0]
 8013444:	6813      	ldr	r3, [r2, #0]
 8013446:	0605      	lsls	r5, r0, #24
 8013448:	f103 0104 	add.w	r1, r3, #4
 801344c:	d52a      	bpl.n	80134a4 <_printf_i+0xa4>
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	6011      	str	r1, [r2, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	da03      	bge.n	801345e <_printf_i+0x5e>
 8013456:	222d      	movs	r2, #45	; 0x2d
 8013458:	425b      	negs	r3, r3
 801345a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801345e:	486f      	ldr	r0, [pc, #444]	; (801361c <_printf_i+0x21c>)
 8013460:	220a      	movs	r2, #10
 8013462:	e039      	b.n	80134d8 <_printf_i+0xd8>
 8013464:	2973      	cmp	r1, #115	; 0x73
 8013466:	f000 809d 	beq.w	80135a4 <_printf_i+0x1a4>
 801346a:	d808      	bhi.n	801347e <_printf_i+0x7e>
 801346c:	296f      	cmp	r1, #111	; 0x6f
 801346e:	d020      	beq.n	80134b2 <_printf_i+0xb2>
 8013470:	2970      	cmp	r1, #112	; 0x70
 8013472:	d1dd      	bne.n	8013430 <_printf_i+0x30>
 8013474:	6823      	ldr	r3, [r4, #0]
 8013476:	f043 0320 	orr.w	r3, r3, #32
 801347a:	6023      	str	r3, [r4, #0]
 801347c:	e003      	b.n	8013486 <_printf_i+0x86>
 801347e:	2975      	cmp	r1, #117	; 0x75
 8013480:	d017      	beq.n	80134b2 <_printf_i+0xb2>
 8013482:	2978      	cmp	r1, #120	; 0x78
 8013484:	d1d4      	bne.n	8013430 <_printf_i+0x30>
 8013486:	2378      	movs	r3, #120	; 0x78
 8013488:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801348c:	4864      	ldr	r0, [pc, #400]	; (8013620 <_printf_i+0x220>)
 801348e:	e055      	b.n	801353c <_printf_i+0x13c>
 8013490:	6813      	ldr	r3, [r2, #0]
 8013492:	1d19      	adds	r1, r3, #4
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	6011      	str	r1, [r2, #0]
 8013498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801349c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80134a0:	2301      	movs	r3, #1
 80134a2:	e08c      	b.n	80135be <_printf_i+0x1be>
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	6011      	str	r1, [r2, #0]
 80134a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80134ac:	bf18      	it	ne
 80134ae:	b21b      	sxthne	r3, r3
 80134b0:	e7cf      	b.n	8013452 <_printf_i+0x52>
 80134b2:	6813      	ldr	r3, [r2, #0]
 80134b4:	6825      	ldr	r5, [r4, #0]
 80134b6:	1d18      	adds	r0, r3, #4
 80134b8:	6010      	str	r0, [r2, #0]
 80134ba:	0628      	lsls	r0, r5, #24
 80134bc:	d501      	bpl.n	80134c2 <_printf_i+0xc2>
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	e002      	b.n	80134c8 <_printf_i+0xc8>
 80134c2:	0668      	lsls	r0, r5, #25
 80134c4:	d5fb      	bpl.n	80134be <_printf_i+0xbe>
 80134c6:	881b      	ldrh	r3, [r3, #0]
 80134c8:	4854      	ldr	r0, [pc, #336]	; (801361c <_printf_i+0x21c>)
 80134ca:	296f      	cmp	r1, #111	; 0x6f
 80134cc:	bf14      	ite	ne
 80134ce:	220a      	movne	r2, #10
 80134d0:	2208      	moveq	r2, #8
 80134d2:	2100      	movs	r1, #0
 80134d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80134d8:	6865      	ldr	r5, [r4, #4]
 80134da:	60a5      	str	r5, [r4, #8]
 80134dc:	2d00      	cmp	r5, #0
 80134de:	f2c0 8095 	blt.w	801360c <_printf_i+0x20c>
 80134e2:	6821      	ldr	r1, [r4, #0]
 80134e4:	f021 0104 	bic.w	r1, r1, #4
 80134e8:	6021      	str	r1, [r4, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d13d      	bne.n	801356a <_printf_i+0x16a>
 80134ee:	2d00      	cmp	r5, #0
 80134f0:	f040 808e 	bne.w	8013610 <_printf_i+0x210>
 80134f4:	4665      	mov	r5, ip
 80134f6:	2a08      	cmp	r2, #8
 80134f8:	d10b      	bne.n	8013512 <_printf_i+0x112>
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	07db      	lsls	r3, r3, #31
 80134fe:	d508      	bpl.n	8013512 <_printf_i+0x112>
 8013500:	6923      	ldr	r3, [r4, #16]
 8013502:	6862      	ldr	r2, [r4, #4]
 8013504:	429a      	cmp	r2, r3
 8013506:	bfde      	ittt	le
 8013508:	2330      	movle	r3, #48	; 0x30
 801350a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801350e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013512:	ebac 0305 	sub.w	r3, ip, r5
 8013516:	6123      	str	r3, [r4, #16]
 8013518:	f8cd 8000 	str.w	r8, [sp]
 801351c:	463b      	mov	r3, r7
 801351e:	aa03      	add	r2, sp, #12
 8013520:	4621      	mov	r1, r4
 8013522:	4630      	mov	r0, r6
 8013524:	f7ff fef6 	bl	8013314 <_printf_common>
 8013528:	3001      	adds	r0, #1
 801352a:	d14d      	bne.n	80135c8 <_printf_i+0x1c8>
 801352c:	f04f 30ff 	mov.w	r0, #4294967295
 8013530:	b005      	add	sp, #20
 8013532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013536:	4839      	ldr	r0, [pc, #228]	; (801361c <_printf_i+0x21c>)
 8013538:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801353c:	6813      	ldr	r3, [r2, #0]
 801353e:	6821      	ldr	r1, [r4, #0]
 8013540:	1d1d      	adds	r5, r3, #4
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	6015      	str	r5, [r2, #0]
 8013546:	060a      	lsls	r2, r1, #24
 8013548:	d50b      	bpl.n	8013562 <_printf_i+0x162>
 801354a:	07ca      	lsls	r2, r1, #31
 801354c:	bf44      	itt	mi
 801354e:	f041 0120 	orrmi.w	r1, r1, #32
 8013552:	6021      	strmi	r1, [r4, #0]
 8013554:	b91b      	cbnz	r3, 801355e <_printf_i+0x15e>
 8013556:	6822      	ldr	r2, [r4, #0]
 8013558:	f022 0220 	bic.w	r2, r2, #32
 801355c:	6022      	str	r2, [r4, #0]
 801355e:	2210      	movs	r2, #16
 8013560:	e7b7      	b.n	80134d2 <_printf_i+0xd2>
 8013562:	064d      	lsls	r5, r1, #25
 8013564:	bf48      	it	mi
 8013566:	b29b      	uxthmi	r3, r3
 8013568:	e7ef      	b.n	801354a <_printf_i+0x14a>
 801356a:	4665      	mov	r5, ip
 801356c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013570:	fb02 3311 	mls	r3, r2, r1, r3
 8013574:	5cc3      	ldrb	r3, [r0, r3]
 8013576:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801357a:	460b      	mov	r3, r1
 801357c:	2900      	cmp	r1, #0
 801357e:	d1f5      	bne.n	801356c <_printf_i+0x16c>
 8013580:	e7b9      	b.n	80134f6 <_printf_i+0xf6>
 8013582:	6813      	ldr	r3, [r2, #0]
 8013584:	6825      	ldr	r5, [r4, #0]
 8013586:	6961      	ldr	r1, [r4, #20]
 8013588:	1d18      	adds	r0, r3, #4
 801358a:	6010      	str	r0, [r2, #0]
 801358c:	0628      	lsls	r0, r5, #24
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	d501      	bpl.n	8013596 <_printf_i+0x196>
 8013592:	6019      	str	r1, [r3, #0]
 8013594:	e002      	b.n	801359c <_printf_i+0x19c>
 8013596:	066a      	lsls	r2, r5, #25
 8013598:	d5fb      	bpl.n	8013592 <_printf_i+0x192>
 801359a:	8019      	strh	r1, [r3, #0]
 801359c:	2300      	movs	r3, #0
 801359e:	6123      	str	r3, [r4, #16]
 80135a0:	4665      	mov	r5, ip
 80135a2:	e7b9      	b.n	8013518 <_printf_i+0x118>
 80135a4:	6813      	ldr	r3, [r2, #0]
 80135a6:	1d19      	adds	r1, r3, #4
 80135a8:	6011      	str	r1, [r2, #0]
 80135aa:	681d      	ldr	r5, [r3, #0]
 80135ac:	6862      	ldr	r2, [r4, #4]
 80135ae:	2100      	movs	r1, #0
 80135b0:	4628      	mov	r0, r5
 80135b2:	f7ec fe95 	bl	80002e0 <memchr>
 80135b6:	b108      	cbz	r0, 80135bc <_printf_i+0x1bc>
 80135b8:	1b40      	subs	r0, r0, r5
 80135ba:	6060      	str	r0, [r4, #4]
 80135bc:	6863      	ldr	r3, [r4, #4]
 80135be:	6123      	str	r3, [r4, #16]
 80135c0:	2300      	movs	r3, #0
 80135c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135c6:	e7a7      	b.n	8013518 <_printf_i+0x118>
 80135c8:	6923      	ldr	r3, [r4, #16]
 80135ca:	462a      	mov	r2, r5
 80135cc:	4639      	mov	r1, r7
 80135ce:	4630      	mov	r0, r6
 80135d0:	47c0      	blx	r8
 80135d2:	3001      	adds	r0, #1
 80135d4:	d0aa      	beq.n	801352c <_printf_i+0x12c>
 80135d6:	6823      	ldr	r3, [r4, #0]
 80135d8:	079b      	lsls	r3, r3, #30
 80135da:	d413      	bmi.n	8013604 <_printf_i+0x204>
 80135dc:	68e0      	ldr	r0, [r4, #12]
 80135de:	9b03      	ldr	r3, [sp, #12]
 80135e0:	4298      	cmp	r0, r3
 80135e2:	bfb8      	it	lt
 80135e4:	4618      	movlt	r0, r3
 80135e6:	e7a3      	b.n	8013530 <_printf_i+0x130>
 80135e8:	2301      	movs	r3, #1
 80135ea:	464a      	mov	r2, r9
 80135ec:	4639      	mov	r1, r7
 80135ee:	4630      	mov	r0, r6
 80135f0:	47c0      	blx	r8
 80135f2:	3001      	adds	r0, #1
 80135f4:	d09a      	beq.n	801352c <_printf_i+0x12c>
 80135f6:	3501      	adds	r5, #1
 80135f8:	68e3      	ldr	r3, [r4, #12]
 80135fa:	9a03      	ldr	r2, [sp, #12]
 80135fc:	1a9b      	subs	r3, r3, r2
 80135fe:	42ab      	cmp	r3, r5
 8013600:	dcf2      	bgt.n	80135e8 <_printf_i+0x1e8>
 8013602:	e7eb      	b.n	80135dc <_printf_i+0x1dc>
 8013604:	2500      	movs	r5, #0
 8013606:	f104 0919 	add.w	r9, r4, #25
 801360a:	e7f5      	b.n	80135f8 <_printf_i+0x1f8>
 801360c:	2b00      	cmp	r3, #0
 801360e:	d1ac      	bne.n	801356a <_printf_i+0x16a>
 8013610:	7803      	ldrb	r3, [r0, #0]
 8013612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013616:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801361a:	e76c      	b.n	80134f6 <_printf_i+0xf6>
 801361c:	08013a3d 	.word	0x08013a3d
 8013620:	08013a4e 	.word	0x08013a4e

08013624 <__sread>:
 8013624:	b510      	push	{r4, lr}
 8013626:	460c      	mov	r4, r1
 8013628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362c:	f000 f894 	bl	8013758 <_read_r>
 8013630:	2800      	cmp	r0, #0
 8013632:	bfab      	itete	ge
 8013634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013636:	89a3      	ldrhlt	r3, [r4, #12]
 8013638:	181b      	addge	r3, r3, r0
 801363a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801363e:	bfac      	ite	ge
 8013640:	6563      	strge	r3, [r4, #84]	; 0x54
 8013642:	81a3      	strhlt	r3, [r4, #12]
 8013644:	bd10      	pop	{r4, pc}

08013646 <__swrite>:
 8013646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801364a:	461f      	mov	r7, r3
 801364c:	898b      	ldrh	r3, [r1, #12]
 801364e:	05db      	lsls	r3, r3, #23
 8013650:	4605      	mov	r5, r0
 8013652:	460c      	mov	r4, r1
 8013654:	4616      	mov	r6, r2
 8013656:	d505      	bpl.n	8013664 <__swrite+0x1e>
 8013658:	2302      	movs	r3, #2
 801365a:	2200      	movs	r2, #0
 801365c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013660:	f000 f868 	bl	8013734 <_lseek_r>
 8013664:	89a3      	ldrh	r3, [r4, #12]
 8013666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801366a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801366e:	81a3      	strh	r3, [r4, #12]
 8013670:	4632      	mov	r2, r6
 8013672:	463b      	mov	r3, r7
 8013674:	4628      	mov	r0, r5
 8013676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801367a:	f000 b817 	b.w	80136ac <_write_r>

0801367e <__sseek>:
 801367e:	b510      	push	{r4, lr}
 8013680:	460c      	mov	r4, r1
 8013682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013686:	f000 f855 	bl	8013734 <_lseek_r>
 801368a:	1c43      	adds	r3, r0, #1
 801368c:	89a3      	ldrh	r3, [r4, #12]
 801368e:	bf15      	itete	ne
 8013690:	6560      	strne	r0, [r4, #84]	; 0x54
 8013692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801369a:	81a3      	strheq	r3, [r4, #12]
 801369c:	bf18      	it	ne
 801369e:	81a3      	strhne	r3, [r4, #12]
 80136a0:	bd10      	pop	{r4, pc}

080136a2 <__sclose>:
 80136a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a6:	f000 b813 	b.w	80136d0 <_close_r>
	...

080136ac <_write_r>:
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	4c07      	ldr	r4, [pc, #28]	; (80136cc <_write_r+0x20>)
 80136b0:	4605      	mov	r5, r0
 80136b2:	4608      	mov	r0, r1
 80136b4:	4611      	mov	r1, r2
 80136b6:	2200      	movs	r2, #0
 80136b8:	6022      	str	r2, [r4, #0]
 80136ba:	461a      	mov	r2, r3
 80136bc:	f7ed f807 	bl	80006ce <_write>
 80136c0:	1c43      	adds	r3, r0, #1
 80136c2:	d102      	bne.n	80136ca <_write_r+0x1e>
 80136c4:	6823      	ldr	r3, [r4, #0]
 80136c6:	b103      	cbz	r3, 80136ca <_write_r+0x1e>
 80136c8:	602b      	str	r3, [r5, #0]
 80136ca:	bd38      	pop	{r3, r4, r5, pc}
 80136cc:	240017b4 	.word	0x240017b4

080136d0 <_close_r>:
 80136d0:	b538      	push	{r3, r4, r5, lr}
 80136d2:	4c06      	ldr	r4, [pc, #24]	; (80136ec <_close_r+0x1c>)
 80136d4:	2300      	movs	r3, #0
 80136d6:	4605      	mov	r5, r0
 80136d8:	4608      	mov	r0, r1
 80136da:	6023      	str	r3, [r4, #0]
 80136dc:	f7ed ff0d 	bl	80014fa <_close>
 80136e0:	1c43      	adds	r3, r0, #1
 80136e2:	d102      	bne.n	80136ea <_close_r+0x1a>
 80136e4:	6823      	ldr	r3, [r4, #0]
 80136e6:	b103      	cbz	r3, 80136ea <_close_r+0x1a>
 80136e8:	602b      	str	r3, [r5, #0]
 80136ea:	bd38      	pop	{r3, r4, r5, pc}
 80136ec:	240017b4 	.word	0x240017b4

080136f0 <_fstat_r>:
 80136f0:	b538      	push	{r3, r4, r5, lr}
 80136f2:	4c07      	ldr	r4, [pc, #28]	; (8013710 <_fstat_r+0x20>)
 80136f4:	2300      	movs	r3, #0
 80136f6:	4605      	mov	r5, r0
 80136f8:	4608      	mov	r0, r1
 80136fa:	4611      	mov	r1, r2
 80136fc:	6023      	str	r3, [r4, #0]
 80136fe:	f7ed ff08 	bl	8001512 <_fstat>
 8013702:	1c43      	adds	r3, r0, #1
 8013704:	d102      	bne.n	801370c <_fstat_r+0x1c>
 8013706:	6823      	ldr	r3, [r4, #0]
 8013708:	b103      	cbz	r3, 801370c <_fstat_r+0x1c>
 801370a:	602b      	str	r3, [r5, #0]
 801370c:	bd38      	pop	{r3, r4, r5, pc}
 801370e:	bf00      	nop
 8013710:	240017b4 	.word	0x240017b4

08013714 <_isatty_r>:
 8013714:	b538      	push	{r3, r4, r5, lr}
 8013716:	4c06      	ldr	r4, [pc, #24]	; (8013730 <_isatty_r+0x1c>)
 8013718:	2300      	movs	r3, #0
 801371a:	4605      	mov	r5, r0
 801371c:	4608      	mov	r0, r1
 801371e:	6023      	str	r3, [r4, #0]
 8013720:	f7ed ff07 	bl	8001532 <_isatty>
 8013724:	1c43      	adds	r3, r0, #1
 8013726:	d102      	bne.n	801372e <_isatty_r+0x1a>
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	b103      	cbz	r3, 801372e <_isatty_r+0x1a>
 801372c:	602b      	str	r3, [r5, #0]
 801372e:	bd38      	pop	{r3, r4, r5, pc}
 8013730:	240017b4 	.word	0x240017b4

08013734 <_lseek_r>:
 8013734:	b538      	push	{r3, r4, r5, lr}
 8013736:	4c07      	ldr	r4, [pc, #28]	; (8013754 <_lseek_r+0x20>)
 8013738:	4605      	mov	r5, r0
 801373a:	4608      	mov	r0, r1
 801373c:	4611      	mov	r1, r2
 801373e:	2200      	movs	r2, #0
 8013740:	6022      	str	r2, [r4, #0]
 8013742:	461a      	mov	r2, r3
 8013744:	f7ed ff00 	bl	8001548 <_lseek>
 8013748:	1c43      	adds	r3, r0, #1
 801374a:	d102      	bne.n	8013752 <_lseek_r+0x1e>
 801374c:	6823      	ldr	r3, [r4, #0]
 801374e:	b103      	cbz	r3, 8013752 <_lseek_r+0x1e>
 8013750:	602b      	str	r3, [r5, #0]
 8013752:	bd38      	pop	{r3, r4, r5, pc}
 8013754:	240017b4 	.word	0x240017b4

08013758 <_read_r>:
 8013758:	b538      	push	{r3, r4, r5, lr}
 801375a:	4c07      	ldr	r4, [pc, #28]	; (8013778 <_read_r+0x20>)
 801375c:	4605      	mov	r5, r0
 801375e:	4608      	mov	r0, r1
 8013760:	4611      	mov	r1, r2
 8013762:	2200      	movs	r2, #0
 8013764:	6022      	str	r2, [r4, #0]
 8013766:	461a      	mov	r2, r3
 8013768:	f7ed feaa 	bl	80014c0 <_read>
 801376c:	1c43      	adds	r3, r0, #1
 801376e:	d102      	bne.n	8013776 <_read_r+0x1e>
 8013770:	6823      	ldr	r3, [r4, #0]
 8013772:	b103      	cbz	r3, 8013776 <_read_r+0x1e>
 8013774:	602b      	str	r3, [r5, #0]
 8013776:	bd38      	pop	{r3, r4, r5, pc}
 8013778:	240017b4 	.word	0x240017b4

0801377c <_init>:
 801377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801377e:	bf00      	nop
 8013780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013782:	bc08      	pop	{r3}
 8013784:	469e      	mov	lr, r3
 8013786:	4770      	bx	lr

08013788 <_fini>:
 8013788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378a:	bf00      	nop
 801378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801378e:	bc08      	pop	{r3}
 8013790:	469e      	mov	lr, r3
 8013792:	4770      	bx	lr
